// source: ibc/core/connection/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ibc.core.connection.v1.MsgConnectionOpenTry');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.Any');
goog.require('proto.ibc.core.client.v1.Height');
goog.require('proto.ibc.core.connection.v1.Counterparty');
goog.require('proto.ibc.core.connection.v1.Version');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.core.connection.v1.MsgConnectionOpenTry.repeatedFields_, null);
};
goog.inherits(proto.ibc.core.connection.v1.MsgConnectionOpenTry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.core.connection.v1.MsgConnectionOpenTry.displayName = 'proto.ibc.core.connection.v1.MsgConnectionOpenTry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.core.connection.v1.MsgConnectionOpenTry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    previousConnectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientState: (f = msg.getClientState()) && proto.google.protobuf.Any.toObject(includeInstance, f),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.core.connection.v1.Counterparty.toObject(includeInstance, f),
    delayPeriod: jspb.Message.getFieldWithDefault(msg, 5, 0),
    counterpartyVersionsList: jspb.Message.toObjectList(msg.getCounterpartyVersionsList(),
    proto.ibc.core.connection.v1.Version.toObject, includeInstance),
    proofHeight: (f = msg.getProofHeight()) && proto.ibc.core.client.v1.Height.toObject(includeInstance, f),
    proofInit: msg.getProofInit_asB64(),
    proofClient: msg.getProofClient_asB64(),
    proofConsensus: msg.getProofConsensus_asB64(),
    consensusHeight: (f = msg.getConsensusHeight()) && proto.ibc.core.client.v1.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 12, ""),
    hostConsensusStateProof: msg.getHostConsensusStateProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.core.connection.v1.MsgConnectionOpenTry;
  return proto.ibc.core.connection.v1.MsgConnectionOpenTry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousConnectionId(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Any;
      reader.readMessage(value,proto.google.protobuf.Any.deserializeBinaryFromReader);
      msg.setClientState(value);
      break;
    case 4:
      var value = new proto.ibc.core.connection.v1.Counterparty;
      reader.readMessage(value,proto.ibc.core.connection.v1.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelayPeriod(value);
      break;
    case 6:
      var value = new proto.ibc.core.connection.v1.Version;
      reader.readMessage(value,proto.ibc.core.connection.v1.Version.deserializeBinaryFromReader);
      msg.addCounterpartyVersions(value);
      break;
    case 7:
      var value = new proto.ibc.core.client.v1.Height;
      reader.readMessage(value,proto.ibc.core.client.v1.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClient(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofConsensus(value);
      break;
    case 11:
      var value = new proto.ibc.core.client.v1.Height;
      reader.readMessage(value,proto.ibc.core.client.v1.Height.deserializeBinaryFromReader);
      msg.setConsensusHeight(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHostConsensusStateProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.core.connection.v1.MsgConnectionOpenTry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreviousConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Any.serializeBinaryToWriter
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ibc.core.connection.v1.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getDelayPeriod();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCounterpartyVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ibc.core.connection.v1.Version.serializeBinaryToWriter
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ibc.core.client.v1.Height.serializeBinaryToWriter
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getProofClient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getProofConsensus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getConsensusHeight();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ibc.core.client.v1.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getHostConsensusStateProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string previous_connection_id = 2;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getPreviousConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setPreviousConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any client_state = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getClientState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setClientState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearClientState = function() {
  return this.setClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasClientState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Counterparty counterparty = 4;
 * @return {?proto.ibc.core.connection.v1.Counterparty}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.core.connection.v1.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.connection.v1.Counterparty, 4));
};


/**
 * @param {?proto.ibc.core.connection.v1.Counterparty|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 delay_period = 5;
 * @return {number}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getDelayPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setDelayPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Version counterparty_versions = 6;
 * @return {!Array<!proto.ibc.core.connection.v1.Version>}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getCounterpartyVersionsList = function() {
  return /** @type{!Array<!proto.ibc.core.connection.v1.Version>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.core.connection.v1.Version, 6));
};


/**
 * @param {!Array<!proto.ibc.core.connection.v1.Version>} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setCounterpartyVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ibc.core.connection.v1.Version=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.core.connection.v1.Version}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.addCounterpartyVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ibc.core.connection.v1.Version, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearCounterpartyVersionsList = function() {
  return this.setCounterpartyVersionsList([]);
};


/**
 * optional ibc.core.client.v1.Height proof_height = 7;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.client.v1.Height, 7));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes proof_init = 8;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofInit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes proof_init = 8;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes proof_client = 9;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofClient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes proof_client = 9;
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofClient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClient()));
};


/**
 * optional bytes proof_client = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofClient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofClient = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes proof_consensus = 10;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofConsensus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes proof_consensus = 10;
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofConsensus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofConsensus()));
};


/**
 * optional bytes proof_consensus = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getProofConsensus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofConsensus()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setProofConsensus = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional ibc.core.client.v1.Height consensus_height = 11;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getConsensusHeight = function() {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, proto.ibc.core.client.v1.Height, 11));
};


/**
 * @param {?proto.ibc.core.client.v1.Height|undefined} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
*/
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setConsensusHeight = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.clearConsensusHeight = function() {
  return this.setConsensusHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.hasConsensusHeight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string signer = 12;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes host_consensus_state_proof = 13;
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getHostConsensusStateProof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes host_consensus_state_proof = 13;
 * This is a type-conversion wrapper around `getHostConsensusStateProof()`
 * @return {string}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getHostConsensusStateProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHostConsensusStateProof()));
};


/**
 * optional bytes host_consensus_state_proof = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHostConsensusStateProof()`
 * @return {!Uint8Array}
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.getHostConsensusStateProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHostConsensusStateProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.core.connection.v1.MsgConnectionOpenTry} returns this
 */
proto.ibc.core.connection.v1.MsgConnectionOpenTry.prototype.setHostConsensusStateProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


