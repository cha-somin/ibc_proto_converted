// source: band/bandchain/v1/oracle/proof.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.bandchain.v1.oracle.BlockHeaderMerkleParts');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bandchain.v1.oracle.BlockHeaderMerkleParts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.BlockHeaderMerkleParts.displayName = 'proto.bandchain.v1.oracle.BlockHeaderMerkleParts';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.toObject = function(opt_includeInstance) {
  return proto.bandchain.v1.oracle.BlockHeaderMerkleParts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionAndChainIdHash: msg.getVersionAndChainIdHash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeSecond: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeNanoSecond: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastBlockIdAndOther: msg.getLastBlockIdAndOther_asB64(),
    nextValidatorHashAndConsensusHash: msg.getNextValidatorHashAndConsensusHash_asB64(),
    lastResultsHash: msg.getLastResultsHash_asB64(),
    evidenceAndProposerHash: msg.getEvidenceAndProposerHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bandchain.v1.oracle.BlockHeaderMerkleParts;
  return proto.bandchain.v1.oracle.BlockHeaderMerkleParts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersionAndChainIdHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeSecond(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeNanoSecond(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastBlockIdAndOther(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorHashAndConsensusHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceAndProposerHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bandchain.v1.oracle.BlockHeaderMerkleParts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionAndChainIdHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimeSecond();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimeNanoSecond();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLastBlockIdAndOther_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getNextValidatorHashAndConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getEvidenceAndProposerHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional bytes version_and_chain_id_hash = 1;
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes version_and_chain_id_hash = 1;
 * This is a type-conversion wrapper around `getVersionAndChainIdHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersionAndChainIdHash()));
};


/**
 * optional bytes version_and_chain_id_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersionAndChainIdHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getVersionAndChainIdHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersionAndChainIdHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setVersionAndChainIdHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 time_second = 3;
 * @return {number}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getTimeSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setTimeSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 time_nano_second = 4;
 * @return {number}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getTimeNanoSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setTimeNanoSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes last_block_id_and_other = 5;
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes last_block_id_and_other = 5;
 * This is a type-conversion wrapper around `getLastBlockIdAndOther()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastBlockIdAndOther()));
};


/**
 * optional bytes last_block_id_and_other = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastBlockIdAndOther()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastBlockIdAndOther_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastBlockIdAndOther()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setLastBlockIdAndOther = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * This is a type-conversion wrapper around `getNextValidatorHashAndConsensusHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorHashAndConsensusHash()));
};


/**
 * optional bytes next_validator_hash_and_consensus_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorHashAndConsensusHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getNextValidatorHashAndConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorHashAndConsensusHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setNextValidatorHashAndConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes last_results_hash = 7;
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastResultsHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes last_results_hash = 7;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes evidence_and_proposer_hash = 8;
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes evidence_and_proposer_hash = 8;
 * This is a type-conversion wrapper around `getEvidenceAndProposerHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceAndProposerHash()));
};


/**
 * optional bytes evidence_and_proposer_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceAndProposerHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.getEvidenceAndProposerHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceAndProposerHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.BlockHeaderMerkleParts} returns this
 */
proto.bandchain.v1.oracle.BlockHeaderMerkleParts.prototype.setEvidenceAndProposerHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


