// source: desmos/subspaces/v3/genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.desmos.subspaces.v3.GenesisState');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.desmos.subspaces.v3.Grant');
goog.require('proto.desmos.subspaces.v3.Section');
goog.require('proto.desmos.subspaces.v3.Subspace');
goog.require('proto.desmos.subspaces.v3.SubspaceData');
goog.require('proto.desmos.subspaces.v3.UserGroup');
goog.require('proto.desmos.subspaces.v3.UserGroupMemberEntry');
goog.require('proto.desmos.subspaces.v3.UserPermission');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.desmos.subspaces.v3.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.desmos.subspaces.v3.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.desmos.subspaces.v3.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.desmos.subspaces.v3.GenesisState.displayName = 'proto.desmos.subspaces.v3.GenesisState';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.desmos.subspaces.v3.GenesisState.repeatedFields_ = [2,3,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.desmos.subspaces.v3.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.desmos.subspaces.v3.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialSubspaceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subspacesDataList: jspb.Message.toObjectList(msg.getSubspacesDataList(),
    proto.desmos.subspaces.v3.SubspaceData.toObject, includeInstance),
    subspacesList: jspb.Message.toObjectList(msg.getSubspacesList(),
    proto.desmos.subspaces.v3.Subspace.toObject, includeInstance),
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.desmos.subspaces.v3.Section.toObject, includeInstance),
    userPermissionsList: jspb.Message.toObjectList(msg.getUserPermissionsList(),
    proto.desmos.subspaces.v3.UserPermission.toObject, includeInstance),
    userGroupsList: jspb.Message.toObjectList(msg.getUserGroupsList(),
    proto.desmos.subspaces.v3.UserGroup.toObject, includeInstance),
    userGroupsMembersList: jspb.Message.toObjectList(msg.getUserGroupsMembersList(),
    proto.desmos.subspaces.v3.UserGroupMemberEntry.toObject, includeInstance),
    grantsList: jspb.Message.toObjectList(msg.getGrantsList(),
    proto.desmos.subspaces.v3.Grant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.desmos.subspaces.v3.GenesisState}
 */
proto.desmos.subspaces.v3.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.desmos.subspaces.v3.GenesisState;
  return proto.desmos.subspaces.v3.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.desmos.subspaces.v3.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.desmos.subspaces.v3.GenesisState}
 */
proto.desmos.subspaces.v3.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInitialSubspaceId(value);
      break;
    case 2:
      var value = new proto.desmos.subspaces.v3.SubspaceData;
      reader.readMessage(value,proto.desmos.subspaces.v3.SubspaceData.deserializeBinaryFromReader);
      msg.addSubspacesData(value);
      break;
    case 3:
      var value = new proto.desmos.subspaces.v3.Subspace;
      reader.readMessage(value,proto.desmos.subspaces.v3.Subspace.deserializeBinaryFromReader);
      msg.addSubspaces(value);
      break;
    case 4:
      var value = new proto.desmos.subspaces.v3.Section;
      reader.readMessage(value,proto.desmos.subspaces.v3.Section.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    case 5:
      var value = new proto.desmos.subspaces.v3.UserPermission;
      reader.readMessage(value,proto.desmos.subspaces.v3.UserPermission.deserializeBinaryFromReader);
      msg.addUserPermissions(value);
      break;
    case 6:
      var value = new proto.desmos.subspaces.v3.UserGroup;
      reader.readMessage(value,proto.desmos.subspaces.v3.UserGroup.deserializeBinaryFromReader);
      msg.addUserGroups(value);
      break;
    case 7:
      var value = new proto.desmos.subspaces.v3.UserGroupMemberEntry;
      reader.readMessage(value,proto.desmos.subspaces.v3.UserGroupMemberEntry.deserializeBinaryFromReader);
      msg.addUserGroupsMembers(value);
      break;
    case 8:
      var value = new proto.desmos.subspaces.v3.Grant;
      reader.readMessage(value,proto.desmos.subspaces.v3.Grant.deserializeBinaryFromReader);
      msg.addGrants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.desmos.subspaces.v3.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.desmos.subspaces.v3.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialSubspaceId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSubspacesDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.desmos.subspaces.v3.SubspaceData.serializeBinaryToWriter
    );
  }
  f = message.getSubspacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.desmos.subspaces.v3.Subspace.serializeBinaryToWriter
    );
  }
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.desmos.subspaces.v3.Section.serializeBinaryToWriter
    );
  }
  f = message.getUserPermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.desmos.subspaces.v3.UserPermission.serializeBinaryToWriter
    );
  }
  f = message.getUserGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.desmos.subspaces.v3.UserGroup.serializeBinaryToWriter
    );
  }
  f = message.getUserGroupsMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.desmos.subspaces.v3.UserGroupMemberEntry.serializeBinaryToWriter
    );
  }
  f = message.getGrantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.desmos.subspaces.v3.Grant.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 initial_subspace_id = 1;
 * @return {number}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getInitialSubspaceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.setInitialSubspaceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SubspaceData subspaces_data = 2;
 * @return {!Array<!proto.desmos.subspaces.v3.SubspaceData>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getSubspacesDataList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.SubspaceData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.SubspaceData, 2));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.SubspaceData>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setSubspacesDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.SubspaceData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.SubspaceData}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addSubspacesData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.desmos.subspaces.v3.SubspaceData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearSubspacesDataList = function() {
  return this.setSubspacesDataList([]);
};


/**
 * repeated Subspace subspaces = 3;
 * @return {!Array<!proto.desmos.subspaces.v3.Subspace>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getSubspacesList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.Subspace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.Subspace, 3));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.Subspace>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setSubspacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.Subspace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.Subspace}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addSubspaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.desmos.subspaces.v3.Subspace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearSubspacesList = function() {
  return this.setSubspacesList([]);
};


/**
 * repeated Section sections = 4;
 * @return {!Array<!proto.desmos.subspaces.v3.Section>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getSectionsList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.Section>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.Section, 4));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.Section>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setSectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.Section=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.Section}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.desmos.subspaces.v3.Section, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearSectionsList = function() {
  return this.setSectionsList([]);
};


/**
 * repeated UserPermission user_permissions = 5;
 * @return {!Array<!proto.desmos.subspaces.v3.UserPermission>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getUserPermissionsList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.UserPermission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.UserPermission, 5));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.UserPermission>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setUserPermissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.UserPermission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.UserPermission}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addUserPermissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.desmos.subspaces.v3.UserPermission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearUserPermissionsList = function() {
  return this.setUserPermissionsList([]);
};


/**
 * repeated UserGroup user_groups = 6;
 * @return {!Array<!proto.desmos.subspaces.v3.UserGroup>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getUserGroupsList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.UserGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.UserGroup, 6));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.UserGroup>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setUserGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.UserGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.UserGroup}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addUserGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.desmos.subspaces.v3.UserGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearUserGroupsList = function() {
  return this.setUserGroupsList([]);
};


/**
 * repeated UserGroupMemberEntry user_groups_members = 7;
 * @return {!Array<!proto.desmos.subspaces.v3.UserGroupMemberEntry>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getUserGroupsMembersList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.UserGroupMemberEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.UserGroupMemberEntry, 7));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.UserGroupMemberEntry>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setUserGroupsMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.UserGroupMemberEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.UserGroupMemberEntry}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addUserGroupsMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.desmos.subspaces.v3.UserGroupMemberEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearUserGroupsMembersList = function() {
  return this.setUserGroupsMembersList([]);
};


/**
 * repeated Grant grants = 8;
 * @return {!Array<!proto.desmos.subspaces.v3.Grant>}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.getGrantsList = function() {
  return /** @type{!Array<!proto.desmos.subspaces.v3.Grant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.desmos.subspaces.v3.Grant, 8));
};


/**
 * @param {!Array<!proto.desmos.subspaces.v3.Grant>} value
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
*/
proto.desmos.subspaces.v3.GenesisState.prototype.setGrantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.desmos.subspaces.v3.Grant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.Grant}
 */
proto.desmos.subspaces.v3.GenesisState.prototype.addGrants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.desmos.subspaces.v3.Grant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.GenesisState} returns this
 */
proto.desmos.subspaces.v3.GenesisState.prototype.clearGrantsList = function() {
  return this.setGrantsList([]);
};


