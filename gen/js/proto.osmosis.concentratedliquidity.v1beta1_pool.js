// source: osmosis/concentrated-liquidity/pool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.osmosis.concentratedliquidity.v1beta1.Pool');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.Timestamp');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.osmosis.concentratedliquidity.v1beta1.Pool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.osmosis.concentratedliquidity.v1beta1.Pool.displayName = 'proto.osmosis.concentratedliquidity.v1beta1.Pool';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.toObject = function(opt_includeInstance) {
  return proto.osmosis.concentratedliquidity.v1beta1.Pool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.osmosis.concentratedliquidity.v1beta1.Pool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    incentivesAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spreadRewardsAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentTickLiquidity: jspb.Message.getFieldWithDefault(msg, 5, ""),
    token0: jspb.Message.getFieldWithDefault(msg, 6, ""),
    token1: jspb.Message.getFieldWithDefault(msg, 7, ""),
    currentSqrtPrice: jspb.Message.getFieldWithDefault(msg, 8, ""),
    currentTick: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tickSpacing: jspb.Message.getFieldWithDefault(msg, 10, 0),
    exponentAtPriceOne: jspb.Message.getFieldWithDefault(msg, 11, 0),
    spreadFactor: jspb.Message.getFieldWithDefault(msg, 12, ""),
    lastLiquidityUpdate: (f = msg.getLastLiquidityUpdate()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.osmosis.concentratedliquidity.v1beta1.Pool;
  return proto.osmosis.concentratedliquidity.v1beta1.Pool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.osmosis.concentratedliquidity.v1beta1.Pool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIncentivesAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpreadRewardsAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentTickLiquidity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken0(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken1(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentSqrtPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentTick(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTickSpacing(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExponentAtPriceOne(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpreadFactor(value);
      break;
    case 13:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setLastLiquidityUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.osmosis.concentratedliquidity.v1beta1.Pool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.osmosis.concentratedliquidity.v1beta1.Pool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIncentivesAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpreadRewardsAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCurrentTickLiquidity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getToken0();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getToken1();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCurrentSqrtPrice();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCurrentTick();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getTickSpacing();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getExponentAtPriceOne();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getSpreadFactor();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLastLiquidityUpdate();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string incentives_address = 2;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getIncentivesAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setIncentivesAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string spread_rewards_address = 3;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getSpreadRewardsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setSpreadRewardsAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 id = 4;
 * @return {number}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string current_tick_liquidity = 5;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getCurrentTickLiquidity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setCurrentTickLiquidity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string token0 = 6;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getToken0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setToken0 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string token1 = 7;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getToken1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setToken1 = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string current_sqrt_price = 8;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getCurrentSqrtPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setCurrentSqrtPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 current_tick = 9;
 * @return {number}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getCurrentTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setCurrentTick = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 tick_spacing = 10;
 * @return {number}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getTickSpacing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setTickSpacing = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 exponent_at_price_one = 11;
 * @return {number}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getExponentAtPriceOne = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setExponentAtPriceOne = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string spread_factor = 12;
 * @return {string}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getSpreadFactor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setSpreadFactor = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional google.protobuf.Timestamp last_liquidity_update = 13;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.getLastLiquidityUpdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 13));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
*/
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.setLastLiquidityUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.osmosis.concentratedliquidity.v1beta1.Pool} returns this
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.clearLastLiquidityUpdate = function() {
  return this.setLastLiquidityUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.osmosis.concentratedliquidity.v1beta1.Pool.prototype.hasLastLiquidityUpdate = function() {
  return jspb.Message.getField(this, 13) != null;
};


