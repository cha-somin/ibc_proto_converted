// source: desmos/subspaces/v3/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.desmos.subspaces.v3.PermissionDetail');
goog.provide('proto.desmos.subspaces.v3.PermissionDetail.Group');
goog.provide('proto.desmos.subspaces.v3.PermissionDetail.SumCase');
goog.provide('proto.desmos.subspaces.v3.PermissionDetail.User');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.desmos.subspaces.v3.PermissionDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.desmos.subspaces.v3.PermissionDetail.oneofGroups_);
};
goog.inherits(proto.desmos.subspaces.v3.PermissionDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.desmos.subspaces.v3.PermissionDetail.displayName = 'proto.desmos.subspaces.v3.PermissionDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.desmos.subspaces.v3.PermissionDetail.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.desmos.subspaces.v3.PermissionDetail.User.repeatedFields_, null);
};
goog.inherits(proto.desmos.subspaces.v3.PermissionDetail.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.desmos.subspaces.v3.PermissionDetail.User.displayName = 'proto.desmos.subspaces.v3.PermissionDetail.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.desmos.subspaces.v3.PermissionDetail.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.desmos.subspaces.v3.PermissionDetail.Group.repeatedFields_, null);
};
goog.inherits(proto.desmos.subspaces.v3.PermissionDetail.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.desmos.subspaces.v3.PermissionDetail.Group.displayName = 'proto.desmos.subspaces.v3.PermissionDetail.Group';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.desmos.subspaces.v3.PermissionDetail.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.desmos.subspaces.v3.PermissionDetail.SumCase = {
  SUM_NOT_SET: 0,
  USER: 3,
  GROUP: 4
};

/**
 * @return {proto.desmos.subspaces.v3.PermissionDetail.SumCase}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.getSumCase = function() {
  return /** @type {proto.desmos.subspaces.v3.PermissionDetail.SumCase} */(jspb.Message.computeOneofCase(this, proto.desmos.subspaces.v3.PermissionDetail.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.desmos.subspaces.v3.PermissionDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.desmos.subspaces.v3.PermissionDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.PermissionDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    subspaceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sectionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    user: (f = msg.getUser()) && proto.desmos.subspaces.v3.PermissionDetail.User.toObject(includeInstance, f),
    group: (f = msg.getGroup()) && proto.desmos.subspaces.v3.PermissionDetail.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail}
 */
proto.desmos.subspaces.v3.PermissionDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.desmos.subspaces.v3.PermissionDetail;
  return proto.desmos.subspaces.v3.PermissionDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.desmos.subspaces.v3.PermissionDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail}
 */
proto.desmos.subspaces.v3.PermissionDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubspaceId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSectionId(value);
      break;
    case 3:
      var value = new proto.desmos.subspaces.v3.PermissionDetail.User;
      reader.readMessage(value,proto.desmos.subspaces.v3.PermissionDetail.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = new proto.desmos.subspaces.v3.PermissionDetail.Group;
      reader.readMessage(value,proto.desmos.subspaces.v3.PermissionDetail.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.desmos.subspaces.v3.PermissionDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.desmos.subspaces.v3.PermissionDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.PermissionDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubspaceId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSectionId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.desmos.subspaces.v3.PermissionDetail.User.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.desmos.subspaces.v3.PermissionDetail.Group.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.desmos.subspaces.v3.PermissionDetail.User.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.toObject = function(opt_includeInstance) {
  return proto.desmos.subspaces.v3.PermissionDetail.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.desmos.subspaces.v3.PermissionDetail.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.PermissionDetail.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permissionList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.User}
 */
proto.desmos.subspaces.v3.PermissionDetail.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.desmos.subspaces.v3.PermissionDetail.User;
  return proto.desmos.subspaces.v3.PermissionDetail.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.desmos.subspaces.v3.PermissionDetail.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.User}
 */
proto.desmos.subspaces.v3.PermissionDetail.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.desmos.subspaces.v3.PermissionDetail.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.desmos.subspaces.v3.PermissionDetail.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.PermissionDetail.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermissionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.User} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string permission = 2;
 * @return {!Array<string>}
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.getPermissionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.User} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.setPermissionList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.User} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.addPermission = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.User} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.User.prototype.clearPermissionList = function() {
  return this.setPermissionList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.desmos.subspaces.v3.PermissionDetail.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.desmos.subspaces.v3.PermissionDetail.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    permissionList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.Group}
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.desmos.subspaces.v3.PermissionDetail.Group;
  return proto.desmos.subspaces.v3.PermissionDetail.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.desmos.subspaces.v3.PermissionDetail.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.Group}
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.desmos.subspaces.v3.PermissionDetail.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.desmos.subspaces.v3.PermissionDetail.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPermissionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional uint32 group_id = 1;
 * @return {number}
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.Group} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string permission = 2;
 * @return {!Array<string>}
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.getPermissionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.Group} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.setPermissionList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.Group} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.addPermission = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail.Group} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.Group.prototype.clearPermissionList = function() {
  return this.setPermissionList([]);
};


/**
 * optional uint64 subspace_id = 1;
 * @return {number}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.getSubspaceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.setSubspaceId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 section_id = 2;
 * @return {number}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.getSectionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.setSectionId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional User user = 3;
 * @return {?proto.desmos.subspaces.v3.PermissionDetail.User}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.getUser = function() {
  return /** @type{?proto.desmos.subspaces.v3.PermissionDetail.User} */ (
    jspb.Message.getWrapperField(this, proto.desmos.subspaces.v3.PermissionDetail.User, 3));
};


/**
 * @param {?proto.desmos.subspaces.v3.PermissionDetail.User|undefined} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail} returns this
*/
proto.desmos.subspaces.v3.PermissionDetail.prototype.setUser = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.desmos.subspaces.v3.PermissionDetail.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Group group = 4;
 * @return {?proto.desmos.subspaces.v3.PermissionDetail.Group}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.getGroup = function() {
  return /** @type{?proto.desmos.subspaces.v3.PermissionDetail.Group} */ (
    jspb.Message.getWrapperField(this, proto.desmos.subspaces.v3.PermissionDetail.Group, 4));
};


/**
 * @param {?proto.desmos.subspaces.v3.PermissionDetail.Group|undefined} value
 * @return {!proto.desmos.subspaces.v3.PermissionDetail} returns this
*/
proto.desmos.subspaces.v3.PermissionDetail.prototype.setGroup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.desmos.subspaces.v3.PermissionDetail.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.desmos.subspaces.v3.PermissionDetail} returns this
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.desmos.subspaces.v3.PermissionDetail.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 4) != null;
};


