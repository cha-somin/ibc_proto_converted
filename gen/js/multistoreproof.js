// source: band/bandchain/v1/oracle/proof.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.bandchain.v1.oracle.MultiStoreProof');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bandchain.v1.oracle.MultiStoreProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bandchain.v1.oracle.MultiStoreProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bandchain.v1.oracle.MultiStoreProof.displayName = 'proto.bandchain.v1.oracle.MultiStoreProof';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.toObject = function(opt_includeInstance) {
  return proto.bandchain.v1.oracle.MultiStoreProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bandchain.v1.oracle.MultiStoreProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiStoreProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracleIavlStateHash: msg.getOracleIavlStateHash_asB64(),
    mintStoreMerkleHash: msg.getMintStoreMerkleHash_asB64(),
    paramsToSlashingStoresMerkleHash: msg.getParamsToSlashingStoresMerkleHash_asB64(),
    govToIcahostStoresMerkleHash: msg.getGovToIcahostStoresMerkleHash_asB64(),
    authToFeegrantStoresMerkleHash: msg.getAuthToFeegrantStoresMerkleHash_asB64(),
    stakingToUpgradeStoresMerkleHash: msg.getStakingToUpgradeStoresMerkleHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof}
 */
proto.bandchain.v1.oracle.MultiStoreProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bandchain.v1.oracle.MultiStoreProof;
  return proto.bandchain.v1.oracle.MultiStoreProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bandchain.v1.oracle.MultiStoreProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof}
 */
proto.bandchain.v1.oracle.MultiStoreProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOracleIavlStateHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMintStoreMerkleHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParamsToSlashingStoresMerkleHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGovToIcahostStoresMerkleHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthToFeegrantStoresMerkleHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStakingToUpgradeStoresMerkleHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bandchain.v1.oracle.MultiStoreProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bandchain.v1.oracle.MultiStoreProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bandchain.v1.oracle.MultiStoreProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracleIavlStateHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMintStoreMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getParamsToSlashingStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getGovToIcahostStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAuthToFeegrantStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStakingToUpgradeStoresMerkleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes oracle_iavl_state_hash = 1;
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getOracleIavlStateHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes oracle_iavl_state_hash = 1;
 * This is a type-conversion wrapper around `getOracleIavlStateHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getOracleIavlStateHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOracleIavlStateHash()));
};


/**
 * optional bytes oracle_iavl_state_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleIavlStateHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getOracleIavlStateHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOracleIavlStateHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setOracleIavlStateHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes mint_store_merkle_hash = 2;
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getMintStoreMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mint_store_merkle_hash = 2;
 * This is a type-conversion wrapper around `getMintStoreMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getMintStoreMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMintStoreMerkleHash()));
};


/**
 * optional bytes mint_store_merkle_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMintStoreMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getMintStoreMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMintStoreMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setMintStoreMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes params_to_slashing_stores_merkle_hash = 3;
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getParamsToSlashingStoresMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes params_to_slashing_stores_merkle_hash = 3;
 * This is a type-conversion wrapper around `getParamsToSlashingStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getParamsToSlashingStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParamsToSlashingStoresMerkleHash()));
};


/**
 * optional bytes params_to_slashing_stores_merkle_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParamsToSlashingStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getParamsToSlashingStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParamsToSlashingStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setParamsToSlashingStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes gov_to_icahost_stores_merkle_hash = 4;
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getGovToIcahostStoresMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes gov_to_icahost_stores_merkle_hash = 4;
 * This is a type-conversion wrapper around `getGovToIcahostStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getGovToIcahostStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGovToIcahostStoresMerkleHash()));
};


/**
 * optional bytes gov_to_icahost_stores_merkle_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGovToIcahostStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getGovToIcahostStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGovToIcahostStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setGovToIcahostStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes auth_to_feegrant_stores_merkle_hash = 5;
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getAuthToFeegrantStoresMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes auth_to_feegrant_stores_merkle_hash = 5;
 * This is a type-conversion wrapper around `getAuthToFeegrantStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getAuthToFeegrantStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthToFeegrantStoresMerkleHash()));
};


/**
 * optional bytes auth_to_feegrant_stores_merkle_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthToFeegrantStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getAuthToFeegrantStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthToFeegrantStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setAuthToFeegrantStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes staking_to_upgrade_stores_merkle_hash = 6;
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getStakingToUpgradeStoresMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes staking_to_upgrade_stores_merkle_hash = 6;
 * This is a type-conversion wrapper around `getStakingToUpgradeStoresMerkleHash()`
 * @return {string}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getStakingToUpgradeStoresMerkleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStakingToUpgradeStoresMerkleHash()));
};


/**
 * optional bytes staking_to_upgrade_stores_merkle_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStakingToUpgradeStoresMerkleHash()`
 * @return {!Uint8Array}
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.getStakingToUpgradeStoresMerkleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStakingToUpgradeStoresMerkleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bandchain.v1.oracle.MultiStoreProof} returns this
 */
proto.bandchain.v1.oracle.MultiStoreProof.prototype.setStakingToUpgradeStoresMerkleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


