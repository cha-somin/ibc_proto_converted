// source: regen/data/v1alpha2/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.regen.data.v1alpha2.ContentHash');
goog.provide('proto.regen.data.v1alpha2.ContentHash.Graph');
goog.provide('proto.regen.data.v1alpha2.ContentHash.Raw');
goog.provide('proto.regen.data.v1alpha2.ContentHash.SumCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

goog.forwardDeclare('proto.regen.data.v1alpha2.DigestAlgorithm');
goog.forwardDeclare('proto.regen.data.v1alpha2.GraphCanonicalizationAlgorithm');
goog.forwardDeclare('proto.regen.data.v1alpha2.GraphMerkleTree');
goog.forwardDeclare('proto.regen.data.v1alpha2.MediaType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.regen.data.v1alpha2.ContentHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.regen.data.v1alpha2.ContentHash.oneofGroups_);
};
goog.inherits(proto.regen.data.v1alpha2.ContentHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.regen.data.v1alpha2.ContentHash.displayName = 'proto.regen.data.v1alpha2.ContentHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.regen.data.v1alpha2.ContentHash.Raw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.regen.data.v1alpha2.ContentHash.Raw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.regen.data.v1alpha2.ContentHash.Raw.displayName = 'proto.regen.data.v1alpha2.ContentHash.Raw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.regen.data.v1alpha2.ContentHash.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.regen.data.v1alpha2.ContentHash.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.regen.data.v1alpha2.ContentHash.Graph.displayName = 'proto.regen.data.v1alpha2.ContentHash.Graph';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.regen.data.v1alpha2.ContentHash.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.regen.data.v1alpha2.ContentHash.SumCase = {
  SUM_NOT_SET: 0,
  RAW: 1,
  GRAPH: 2
};

/**
 * @return {proto.regen.data.v1alpha2.ContentHash.SumCase}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.getSumCase = function() {
  return /** @type {proto.regen.data.v1alpha2.ContentHash.SumCase} */(jspb.Message.computeOneofCase(this, proto.regen.data.v1alpha2.ContentHash.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.toObject = function(opt_includeInstance) {
  return proto.regen.data.v1alpha2.ContentHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.regen.data.v1alpha2.ContentHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.regen.data.v1alpha2.ContentHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    raw: (f = msg.getRaw()) && proto.regen.data.v1alpha2.ContentHash.Raw.toObject(includeInstance, f),
    graph: (f = msg.getGraph()) && proto.regen.data.v1alpha2.ContentHash.Graph.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.regen.data.v1alpha2.ContentHash}
 */
proto.regen.data.v1alpha2.ContentHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.regen.data.v1alpha2.ContentHash;
  return proto.regen.data.v1alpha2.ContentHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.regen.data.v1alpha2.ContentHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.regen.data.v1alpha2.ContentHash}
 */
proto.regen.data.v1alpha2.ContentHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.regen.data.v1alpha2.ContentHash.Raw;
      reader.readMessage(value,proto.regen.data.v1alpha2.ContentHash.Raw.deserializeBinaryFromReader);
      msg.setRaw(value);
      break;
    case 2:
      var value = new proto.regen.data.v1alpha2.ContentHash.Graph;
      reader.readMessage(value,proto.regen.data.v1alpha2.ContentHash.Graph.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.regen.data.v1alpha2.ContentHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.regen.data.v1alpha2.ContentHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.regen.data.v1alpha2.ContentHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.regen.data.v1alpha2.ContentHash.Raw.serializeBinaryToWriter
    );
  }
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.regen.data.v1alpha2.ContentHash.Graph.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.toObject = function(opt_includeInstance) {
  return proto.regen.data.v1alpha2.ContentHash.Raw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.regen.data.v1alpha2.ContentHash.Raw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.regen.data.v1alpha2.ContentHash.Raw.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    digestAlgorithm: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mediaType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.regen.data.v1alpha2.ContentHash.Raw}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.regen.data.v1alpha2.ContentHash.Raw;
  return proto.regen.data.v1alpha2.ContentHash.Raw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.regen.data.v1alpha2.ContentHash.Raw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.regen.data.v1alpha2.ContentHash.Raw}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!proto.regen.data.v1alpha2.DigestAlgorithm} */ (reader.readEnum());
      msg.setDigestAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!proto.regen.data.v1alpha2.MediaType} */ (reader.readEnum());
      msg.setMediaType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.regen.data.v1alpha2.ContentHash.Raw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.regen.data.v1alpha2.ContentHash.Raw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.regen.data.v1alpha2.ContentHash.Raw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDigestAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMediaType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Raw} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional DigestAlgorithm digest_algorithm = 2;
 * @return {!proto.regen.data.v1alpha2.DigestAlgorithm}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.getDigestAlgorithm = function() {
  return /** @type {!proto.regen.data.v1alpha2.DigestAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.regen.data.v1alpha2.DigestAlgorithm} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Raw} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.setDigestAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional MediaType media_type = 3;
 * @return {!proto.regen.data.v1alpha2.MediaType}
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.getMediaType = function() {
  return /** @type {!proto.regen.data.v1alpha2.MediaType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.regen.data.v1alpha2.MediaType} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Raw} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Raw.prototype.setMediaType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.regen.data.v1alpha2.ContentHash.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.regen.data.v1alpha2.ContentHash.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.regen.data.v1alpha2.ContentHash.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    digestAlgorithm: jspb.Message.getFieldWithDefault(msg, 2, 0),
    canonicalizationAlgorithm: jspb.Message.getFieldWithDefault(msg, 3, 0),
    merkleTree: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.regen.data.v1alpha2.ContentHash.Graph}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.regen.data.v1alpha2.ContentHash.Graph;
  return proto.regen.data.v1alpha2.ContentHash.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.regen.data.v1alpha2.ContentHash.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.regen.data.v1alpha2.ContentHash.Graph}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!proto.regen.data.v1alpha2.DigestAlgorithm} */ (reader.readEnum());
      msg.setDigestAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!proto.regen.data.v1alpha2.GraphCanonicalizationAlgorithm} */ (reader.readEnum());
      msg.setCanonicalizationAlgorithm(value);
      break;
    case 4:
      var value = /** @type {!proto.regen.data.v1alpha2.GraphMerkleTree} */ (reader.readEnum());
      msg.setMerkleTree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.regen.data.v1alpha2.ContentHash.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.regen.data.v1alpha2.ContentHash.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.regen.data.v1alpha2.ContentHash.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDigestAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCanonicalizationAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMerkleTree();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Graph} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional DigestAlgorithm digest_algorithm = 2;
 * @return {!proto.regen.data.v1alpha2.DigestAlgorithm}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.getDigestAlgorithm = function() {
  return /** @type {!proto.regen.data.v1alpha2.DigestAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.regen.data.v1alpha2.DigestAlgorithm} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Graph} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.setDigestAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional GraphCanonicalizationAlgorithm canonicalization_algorithm = 3;
 * @return {!proto.regen.data.v1alpha2.GraphCanonicalizationAlgorithm}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.getCanonicalizationAlgorithm = function() {
  return /** @type {!proto.regen.data.v1alpha2.GraphCanonicalizationAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.regen.data.v1alpha2.GraphCanonicalizationAlgorithm} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Graph} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.setCanonicalizationAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional GraphMerkleTree merkle_tree = 4;
 * @return {!proto.regen.data.v1alpha2.GraphMerkleTree}
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.getMerkleTree = function() {
  return /** @type {!proto.regen.data.v1alpha2.GraphMerkleTree} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.regen.data.v1alpha2.GraphMerkleTree} value
 * @return {!proto.regen.data.v1alpha2.ContentHash.Graph} returns this
 */
proto.regen.data.v1alpha2.ContentHash.Graph.prototype.setMerkleTree = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Raw raw = 1;
 * @return {?proto.regen.data.v1alpha2.ContentHash.Raw}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.getRaw = function() {
  return /** @type{?proto.regen.data.v1alpha2.ContentHash.Raw} */ (
    jspb.Message.getWrapperField(this, proto.regen.data.v1alpha2.ContentHash.Raw, 1));
};


/**
 * @param {?proto.regen.data.v1alpha2.ContentHash.Raw|undefined} value
 * @return {!proto.regen.data.v1alpha2.ContentHash} returns this
*/
proto.regen.data.v1alpha2.ContentHash.prototype.setRaw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.regen.data.v1alpha2.ContentHash.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.regen.data.v1alpha2.ContentHash} returns this
 */
proto.regen.data.v1alpha2.ContentHash.prototype.clearRaw = function() {
  return this.setRaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Graph graph = 2;
 * @return {?proto.regen.data.v1alpha2.ContentHash.Graph}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.getGraph = function() {
  return /** @type{?proto.regen.data.v1alpha2.ContentHash.Graph} */ (
    jspb.Message.getWrapperField(this, proto.regen.data.v1alpha2.ContentHash.Graph, 2));
};


/**
 * @param {?proto.regen.data.v1alpha2.ContentHash.Graph|undefined} value
 * @return {!proto.regen.data.v1alpha2.ContentHash} returns this
*/
proto.regen.data.v1alpha2.ContentHash.prototype.setGraph = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.regen.data.v1alpha2.ContentHash.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.regen.data.v1alpha2.ContentHash} returns this
 */
proto.regen.data.v1alpha2.ContentHash.prototype.clearGraph = function() {
  return this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.regen.data.v1alpha2.ContentHash.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 2) != null;
};


