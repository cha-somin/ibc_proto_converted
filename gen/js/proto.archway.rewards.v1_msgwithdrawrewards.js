// source: archway/rewards/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.archway.rewards.v1.MsgWithdrawRewards');
goog.provide('proto.archway.rewards.v1.MsgWithdrawRewards.ModeCase');
goog.provide('proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs');
goog.provide('proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archway.rewards.v1.MsgWithdrawRewards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.archway.rewards.v1.MsgWithdrawRewards.oneofGroups_);
};
goog.inherits(proto.archway.rewards.v1.MsgWithdrawRewards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archway.rewards.v1.MsgWithdrawRewards.displayName = 'proto.archway.rewards.v1.MsgWithdrawRewards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.displayName = 'proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.repeatedFields_, null);
};
goog.inherits(proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.displayName = 'proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.archway.rewards.v1.MsgWithdrawRewards.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.ModeCase = {
  MODE_NOT_SET: 0,
  RECORDS_LIMIT: 2,
  RECORD_IDS: 3
};

/**
 * @return {proto.archway.rewards.v1.MsgWithdrawRewards.ModeCase}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.getModeCase = function() {
  return /** @type {proto.archway.rewards.v1.MsgWithdrawRewards.ModeCase} */(jspb.Message.computeOneofCase(this, proto.archway.rewards.v1.MsgWithdrawRewards.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.toObject = function(opt_includeInstance) {
  return proto.archway.rewards.v1.MsgWithdrawRewards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archway.rewards.v1.MsgWithdrawRewards.toObject = function(includeInstance, msg) {
  var f, obj = {
    rewardsAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recordsLimit: (f = msg.getRecordsLimit()) && proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.toObject(includeInstance, f),
    recordIds: (f = msg.getRecordIds()) && proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archway.rewards.v1.MsgWithdrawRewards;
  return proto.archway.rewards.v1.MsgWithdrawRewards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRewardsAddress(value);
      break;
    case 2:
      var value = new proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit;
      reader.readMessage(value,proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.deserializeBinaryFromReader);
      msg.setRecordsLimit(value);
      break;
    case 3:
      var value = new proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs;
      reader.readMessage(value,proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.deserializeBinaryFromReader);
      msg.setRecordIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archway.rewards.v1.MsgWithdrawRewards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archway.rewards.v1.MsgWithdrawRewards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRewardsAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecordsLimit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.serializeBinaryToWriter
    );
  }
  f = message.getRecordIds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit;
  return proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 limit = 1;
 * @return {number}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.prototype.toObject = function(opt_includeInstance) {
  return proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs;
  return proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 ids = 1;
 * @return {!Array<number>}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * optional string rewards_address = 1;
 * @return {string}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.getRewardsAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.setRewardsAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RecordsLimit records_limit = 2;
 * @return {?proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.getRecordsLimit = function() {
  return /** @type{?proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit} */ (
    jspb.Message.getWrapperField(this, proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit, 2));
};


/**
 * @param {?proto.archway.rewards.v1.MsgWithdrawRewards.RecordsLimit|undefined} value
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards} returns this
*/
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.setRecordsLimit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.archway.rewards.v1.MsgWithdrawRewards.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.clearRecordsLimit = function() {
  return this.setRecordsLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.hasRecordsLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RecordIDs record_ids = 3;
 * @return {?proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.getRecordIds = function() {
  return /** @type{?proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs} */ (
    jspb.Message.getWrapperField(this, proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs, 3));
};


/**
 * @param {?proto.archway.rewards.v1.MsgWithdrawRewards.RecordIDs|undefined} value
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards} returns this
*/
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.setRecordIds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.archway.rewards.v1.MsgWithdrawRewards.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.archway.rewards.v1.MsgWithdrawRewards} returns this
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.clearRecordIds = function() {
  return this.setRecordIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.archway.rewards.v1.MsgWithdrawRewards.prototype.hasRecordIds = function() {
  return jspb.Message.getField(this, 3) != null;
};


