// source: comdex/liquidity/v1beta1/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.comdex.liquidity.v1beta1.PoolResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.comdex.liquidity.v1beta1.PoolBalances');

goog.forwardDeclare('proto.comdex.liquidity.v1beta1.PoolType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.comdex.liquidity.v1beta1.PoolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.comdex.liquidity.v1beta1.PoolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.comdex.liquidity.v1beta1.PoolResponse.displayName = 'proto.comdex.liquidity.v1beta1.PoolResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.comdex.liquidity.v1beta1.PoolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.comdex.liquidity.v1beta1.PoolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.comdex.liquidity.v1beta1.PoolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pairId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reserveAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    poolCoinDenom: jspb.Message.getFieldWithDefault(msg, 4, ""),
    balances: (f = msg.getBalances()) && proto.comdex.liquidity.v1beta1.PoolBalances.toObject(includeInstance, f),
    lastDepositRequestId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastWithdrawRequestId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    creator: jspb.Message.getFieldWithDefault(msg, 10, ""),
    poolCoinSupply: jspb.Message.getFieldWithDefault(msg, 11, ""),
    minPrice: jspb.Message.getFieldWithDefault(msg, 12, ""),
    maxPrice: jspb.Message.getFieldWithDefault(msg, 13, ""),
    price: jspb.Message.getFieldWithDefault(msg, 14, ""),
    disabled: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.comdex.liquidity.v1beta1.PoolResponse;
  return proto.comdex.liquidity.v1beta1.PoolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.comdex.liquidity.v1beta1.PoolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPairId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserveAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolCoinDenom(value);
      break;
    case 5:
      var value = new proto.comdex.liquidity.v1beta1.PoolBalances;
      reader.readMessage(value,proto.comdex.liquidity.v1beta1.PoolBalances.deserializeBinaryFromReader);
      msg.setBalances(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastDepositRequestId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastWithdrawRequestId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppId(value);
      break;
    case 9:
      var value = /** @type {!proto.comdex.liquidity.v1beta1.PoolType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolCoinSupply(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPrice(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxPrice(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.comdex.liquidity.v1beta1.PoolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.comdex.liquidity.v1beta1.PoolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.comdex.liquidity.v1beta1.PoolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPairId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getReserveAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPoolCoinDenom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBalances();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.comdex.liquidity.v1beta1.PoolBalances.serializeBinaryToWriter
    );
  }
  f = message.getLastDepositRequestId();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLastWithdrawRequestId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getAppId();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPoolCoinSupply();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMinPrice();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMaxPrice();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 pair_id = 2;
 * @return {number}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getPairId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setPairId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string reserve_address = 3;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getReserveAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setReserveAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pool_coin_denom = 4;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getPoolCoinDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setPoolCoinDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional PoolBalances balances = 5;
 * @return {?proto.comdex.liquidity.v1beta1.PoolBalances}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getBalances = function() {
  return /** @type{?proto.comdex.liquidity.v1beta1.PoolBalances} */ (
    jspb.Message.getWrapperField(this, proto.comdex.liquidity.v1beta1.PoolBalances, 5));
};


/**
 * @param {?proto.comdex.liquidity.v1beta1.PoolBalances|undefined} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
*/
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setBalances = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.clearBalances = function() {
  return this.setBalances(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.hasBalances = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 last_deposit_request_id = 6;
 * @return {number}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getLastDepositRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setLastDepositRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 last_withdraw_request_id = 7;
 * @return {number}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getLastWithdrawRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setLastWithdrawRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 app_id = 8;
 * @return {number}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setAppId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional PoolType type = 9;
 * @return {!proto.comdex.liquidity.v1beta1.PoolType}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getType = function() {
  return /** @type {!proto.comdex.liquidity.v1beta1.PoolType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.comdex.liquidity.v1beta1.PoolType} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string creator = 10;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setCreator = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string pool_coin_supply = 11;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getPoolCoinSupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setPoolCoinSupply = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string min_price = 12;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getMinPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setMinPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string max_price = 13;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getMaxPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setMaxPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string price = 14;
 * @return {string}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool disabled = 15;
 * @return {boolean}
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.comdex.liquidity.v1beta1.PoolResponse} returns this
 */
proto.comdex.liquidity.v1beta1.PoolResponse.prototype.setDisabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


