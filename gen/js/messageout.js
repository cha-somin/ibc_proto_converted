// source: axelar/tss/tofnd/v1beta1/tofnd.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.DataCase');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.KeygenResultDataCase');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult');
goog.provide('proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.SignResultDataCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.axelar.tss.tofnd.v1beta1.KeygenOutput');
goog.require('proto.axelar.tss.tofnd.v1beta1.TrafficOut');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_);
};
goog.inherits(proto.axelar.tss.tofnd.v1beta1.MessageOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.tss.tofnd.v1beta1.MessageOut.displayName = 'proto.axelar.tss.tofnd.v1beta1.MessageOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.oneofGroups_);
};
goog.inherits(proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.displayName = 'proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.oneofGroups_);
};
goog.inherits(proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.displayName = 'proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.repeatedFields_, null);
};
goog.inherits(proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.displayName = 'proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.displayName = 'proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.DataCase = {
  DATA_NOT_SET: 0,
  TRAFFIC: 1,
  KEYGEN_RESULT: 2,
  SIGN_RESULT: 3,
  NEED_RECOVER: 4
};

/**
 * @return {proto.axelar.tss.tofnd.v1beta1.MessageOut.DataCase}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.getDataCase = function() {
  return /** @type {proto.axelar.tss.tofnd.v1beta1.MessageOut.DataCase} */(jspb.Message.computeOneofCase(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    traffic: (f = msg.getTraffic()) && proto.axelar.tss.tofnd.v1beta1.TrafficOut.toObject(includeInstance, f),
    keygenResult: (f = msg.getKeygenResult()) && proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.toObject(includeInstance, f),
    signResult: (f = msg.getSignResult()) && proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.toObject(includeInstance, f),
    needRecover: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.tss.tofnd.v1beta1.MessageOut;
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.axelar.tss.tofnd.v1beta1.TrafficOut;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.TrafficOut.deserializeBinaryFromReader);
      msg.setTraffic(value);
      break;
    case 2:
      var value = new proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.deserializeBinaryFromReader);
      msg.setKeygenResult(value);
      break;
    case 3:
      var value = new proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.deserializeBinaryFromReader);
      msg.setSignResult(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedRecover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.tss.tofnd.v1beta1.MessageOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraffic();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.axelar.tss.tofnd.v1beta1.TrafficOut.serializeBinaryToWriter
    );
  }
  f = message.getKeygenResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.serializeBinaryToWriter
    );
  }
  f = message.getSignResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.KeygenResultDataCase = {
  KEYGEN_RESULT_DATA_NOT_SET: 0,
  DATA: 1,
  CRIMINALS: 2
};

/**
 * @return {proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.KeygenResultDataCase}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.getKeygenResultDataCase = function() {
  return /** @type {proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.KeygenResultDataCase} */(jspb.Message.computeOneofCase(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.axelar.tss.tofnd.v1beta1.KeygenOutput.toObject(includeInstance, f),
    criminals: (f = msg.getCriminals()) && proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult;
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.axelar.tss.tofnd.v1beta1.KeygenOutput;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.KeygenOutput.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.deserializeBinaryFromReader);
      msg.setCriminals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.axelar.tss.tofnd.v1beta1.KeygenOutput.serializeBinaryToWriter
    );
  }
  f = message.getCriminals();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeygenOutput data = 1;
 * @return {?proto.axelar.tss.tofnd.v1beta1.KeygenOutput}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.getData = function() {
  return /** @type{?proto.axelar.tss.tofnd.v1beta1.KeygenOutput} */ (
    jspb.Message.getWrapperField(this, proto.axelar.tss.tofnd.v1beta1.KeygenOutput, 1));
};


/**
 * @param {?proto.axelar.tss.tofnd.v1beta1.KeygenOutput|undefined} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CriminalList criminals = 2;
 * @return {?proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.getCriminals = function() {
  return /** @type{?proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} */ (
    jspb.Message.getWrapperField(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList, 2));
};


/**
 * @param {?proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList|undefined} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.setCriminals = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.clearCriminals = function() {
  return this.setCriminals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult.prototype.hasCriminals = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.SignResultDataCase = {
  SIGN_RESULT_DATA_NOT_SET: 0,
  SIGNATURE: 1,
  CRIMINALS: 2
};

/**
 * @return {proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.SignResultDataCase}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.getSignResultDataCase = function() {
  return /** @type {proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.SignResultDataCase} */(jspb.Message.computeOneofCase(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    criminals: (f = msg.getCriminals()) && proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult;
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.deserializeBinaryFromReader);
      msg.setCriminals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCriminals();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {string}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.setSignature = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.clearSignature = function() {
  return jspb.Message.setOneofField(this, 1, proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CriminalList criminals = 2;
 * @return {?proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.getCriminals = function() {
  return /** @type{?proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} */ (
    jspb.Message.getWrapperField(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList, 2));
};


/**
 * @param {?proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList|undefined} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.setCriminals = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.clearCriminals = function() {
  return this.setCriminals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult.prototype.hasCriminals = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.toObject = function(includeInstance, msg) {
  var f, obj = {
    criminalsList: jspb.Message.toObjectList(msg.getCriminalsList(),
    proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList;
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal;
      reader.readMessage(value,proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.deserializeBinaryFromReader);
      msg.addCriminals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCriminalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.toObject = function(includeInstance, msg) {
  var f, obj = {
    partyUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    crimeType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal;
  return proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyUid(value);
      break;
    case 2:
      var value = /** @type {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType} */ (reader.readEnum());
      msg.setCrimeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartyUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCrimeType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType = {
  CRIME_TYPE_UNSPECIFIED: 0,
  CRIME_TYPE_NON_MALICIOUS: 1,
  CRIME_TYPE_MALICIOUS: 2
};

/**
 * optional string party_uid = 1;
 * @return {string}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.prototype.getPartyUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.prototype.setPartyUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CrimeType crime_type = 2;
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.prototype.getCrimeType = function() {
  return /** @type {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.prototype.setCrimeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Criminal criminals = 1;
 * @return {!Array<!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal>}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.prototype.getCriminalsList = function() {
  return /** @type{!Array<!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal, 1));
};


/**
 * @param {!Array<!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal>} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.prototype.setCriminalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.prototype.addCriminals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.prototype.clearCriminalsList = function() {
  return this.setCriminalsList([]);
};


/**
 * optional TrafficOut traffic = 1;
 * @return {?proto.axelar.tss.tofnd.v1beta1.TrafficOut}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.getTraffic = function() {
  return /** @type{?proto.axelar.tss.tofnd.v1beta1.TrafficOut} */ (
    jspb.Message.getWrapperField(this, proto.axelar.tss.tofnd.v1beta1.TrafficOut, 1));
};


/**
 * @param {?proto.axelar.tss.tofnd.v1beta1.TrafficOut|undefined} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.setTraffic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.clearTraffic = function() {
  return this.setTraffic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.hasTraffic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KeygenResult keygen_result = 2;
 * @return {?proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.getKeygenResult = function() {
  return /** @type{?proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult} */ (
    jspb.Message.getWrapperField(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult, 2));
};


/**
 * @param {?proto.axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult|undefined} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.setKeygenResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.clearKeygenResult = function() {
  return this.setKeygenResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.hasKeygenResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SignResult sign_result = 3;
 * @return {?proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.getSignResult = function() {
  return /** @type{?proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult} */ (
    jspb.Message.getWrapperField(this, proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult, 3));
};


/**
 * @param {?proto.axelar.tss.tofnd.v1beta1.MessageOut.SignResult|undefined} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
*/
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.setSignResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.clearSignResult = function() {
  return this.setSignResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.hasSignResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool need_recover = 4;
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.getNeedRecover = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.setNeedRecover = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.axelar.tss.tofnd.v1beta1.MessageOut} returns this
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.clearNeedRecover = function() {
  return jspb.Message.setOneofField(this, 4, proto.axelar.tss.tofnd.v1beta1.MessageOut.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.tss.tofnd.v1beta1.MessageOut.prototype.hasNeedRecover = function() {
  return jspb.Message.getField(this, 4) != null;
};


