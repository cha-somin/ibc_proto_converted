// source: kava/bep3/v1beta1/bep3.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.kava.bep3.v1beta1.AtomicSwap');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cosmos.base.v1beta1.Coin');

goog.forwardDeclare('proto.kava.bep3.v1beta1.SwapDirection');
goog.forwardDeclare('proto.kava.bep3.v1beta1.SwapStatus');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kava.bep3.v1beta1.AtomicSwap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kava.bep3.v1beta1.AtomicSwap.repeatedFields_, null);
};
goog.inherits(proto.kava.bep3.v1beta1.AtomicSwap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kava.bep3.v1beta1.AtomicSwap.displayName = 'proto.kava.bep3.v1beta1.AtomicSwap';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kava.bep3.v1beta1.AtomicSwap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.toObject = function(opt_includeInstance) {
  return proto.kava.bep3.v1beta1.AtomicSwap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kava.bep3.v1beta1.AtomicSwap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kava.bep3.v1beta1.AtomicSwap.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountList: jspb.Message.toObjectList(msg.getAmountList(),
    proto.cosmos.base.v1beta1.Coin.toObject, includeInstance),
    randomNumberHash: msg.getRandomNumberHash_asB64(),
    expireHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sender: msg.getSender_asB64(),
    recipient: msg.getRecipient_asB64(),
    senderOtherChain: jspb.Message.getFieldWithDefault(msg, 7, ""),
    recipientOtherChain: jspb.Message.getFieldWithDefault(msg, 8, ""),
    closedBlock: jspb.Message.getFieldWithDefault(msg, 9, 0),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0),
    crossChain: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    direction: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap}
 */
proto.kava.bep3.v1beta1.AtomicSwap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kava.bep3.v1beta1.AtomicSwap;
  return proto.kava.bep3.v1beta1.AtomicSwap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kava.bep3.v1beta1.AtomicSwap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap}
 */
proto.kava.bep3.v1beta1.AtomicSwap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.addAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomNumberHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpireHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipient(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderOtherChain(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientOtherChain(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClosedBlock(value);
      break;
    case 10:
      var value = /** @type {!proto.kava.bep3.v1beta1.SwapStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrossChain(value);
      break;
    case 12:
      var value = /** @type {!proto.kava.bep3.v1beta1.SwapDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kava.bep3.v1beta1.AtomicSwap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kava.bep3.v1beta1.AtomicSwap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kava.bep3.v1beta1.AtomicSwap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
  f = message.getRandomNumberHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getExpireHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSenderOtherChain();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRecipientOtherChain();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getClosedBlock();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getCrossChain();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * repeated cosmos.base.v1beta1.Coin amount = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getAmountList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.v1beta1.Coin, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
*/
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setAmountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.addAmount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.clearAmountList = function() {
  return this.setAmountList([]);
};


/**
 * optional bytes random_number_hash = 2;
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRandomNumberHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes random_number_hash = 2;
 * This is a type-conversion wrapper around `getRandomNumberHash()`
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRandomNumberHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomNumberHash()));
};


/**
 * optional bytes random_number_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomNumberHash()`
 * @return {!Uint8Array}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRandomNumberHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomNumberHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setRandomNumberHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 expire_height = 3;
 * @return {number}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getExpireHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setExpireHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes sender = 5;
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sender = 5;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setSender = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes recipient = 6;
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes recipient = 6;
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipient()));
};


/**
 * optional bytes recipient = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {!Uint8Array}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string sender_other_chain = 7;
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getSenderOtherChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setSenderOtherChain = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string recipient_other_chain = 8;
 * @return {string}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getRecipientOtherChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setRecipientOtherChain = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 closed_block = 9;
 * @return {number}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getClosedBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setClosedBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional SwapStatus status = 10;
 * @return {!proto.kava.bep3.v1beta1.SwapStatus}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getStatus = function() {
  return /** @type {!proto.kava.bep3.v1beta1.SwapStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.kava.bep3.v1beta1.SwapStatus} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional bool cross_chain = 11;
 * @return {boolean}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getCrossChain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setCrossChain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional SwapDirection direction = 12;
 * @return {!proto.kava.bep3.v1beta1.SwapDirection}
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.getDirection = function() {
  return /** @type {!proto.kava.bep3.v1beta1.SwapDirection} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.kava.bep3.v1beta1.SwapDirection} value
 * @return {!proto.kava.bep3.v1beta1.AtomicSwap} returns this
 */
proto.kava.bep3.v1beta1.AtomicSwap.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


