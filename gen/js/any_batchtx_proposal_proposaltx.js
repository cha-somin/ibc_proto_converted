// source: shentu/burrow/payload.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.payload.Any');
goog.provide('proto.payload.BatchTx');
goog.provide('proto.payload.Proposal');
goog.provide('proto.payload.ProposalTx');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.payload.BondTx');
goog.require('proto.payload.CallTx');
goog.require('proto.payload.GovTx');
goog.require('proto.payload.IdentifyTx');
goog.require('proto.payload.NameTx');
goog.require('proto.payload.PermsTx');
goog.require('proto.payload.SendTx');
goog.require('proto.payload.TxInput');
goog.require('proto.payload.UnbondTx');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.Any = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.Any, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.Any.displayName = 'proto.payload.Any';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.BatchTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.BatchTx.repeatedFields_, null);
};
goog.inherits(proto.payload.BatchTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.BatchTx.displayName = 'proto.payload.BatchTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.Proposal.displayName = 'proto.payload.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.ProposalTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.ProposalTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.ProposalTx.displayName = 'proto.payload.ProposalTx';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.Any.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.Any.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.Any} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Any.toObject = function(includeInstance, msg) {
  var f, obj = {
    calltx: (f = msg.getCalltx()) && proto.payload.CallTx.toObject(includeInstance, f),
    sendtx: (f = msg.getSendtx()) && proto.payload.SendTx.toObject(includeInstance, f),
    nametx: (f = msg.getNametx()) && proto.payload.NameTx.toObject(includeInstance, f),
    permstx: (f = msg.getPermstx()) && proto.payload.PermsTx.toObject(includeInstance, f),
    govtx: (f = msg.getGovtx()) && proto.payload.GovTx.toObject(includeInstance, f),
    bondtx: (f = msg.getBondtx()) && proto.payload.BondTx.toObject(includeInstance, f),
    unbondtx: (f = msg.getUnbondtx()) && proto.payload.UnbondTx.toObject(includeInstance, f),
    batchtx: (f = msg.getBatchtx()) && proto.payload.BatchTx.toObject(includeInstance, f),
    proposaltx: (f = msg.getProposaltx()) && proto.payload.ProposalTx.toObject(includeInstance, f),
    identifytx: (f = msg.getIdentifytx()) && proto.payload.IdentifyTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.Any}
 */
proto.payload.Any.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.Any;
  return proto.payload.Any.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.Any} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.Any}
 */
proto.payload.Any.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.CallTx;
      reader.readMessage(value,proto.payload.CallTx.deserializeBinaryFromReader);
      msg.setCalltx(value);
      break;
    case 2:
      var value = new proto.payload.SendTx;
      reader.readMessage(value,proto.payload.SendTx.deserializeBinaryFromReader);
      msg.setSendtx(value);
      break;
    case 3:
      var value = new proto.payload.NameTx;
      reader.readMessage(value,proto.payload.NameTx.deserializeBinaryFromReader);
      msg.setNametx(value);
      break;
    case 4:
      var value = new proto.payload.PermsTx;
      reader.readMessage(value,proto.payload.PermsTx.deserializeBinaryFromReader);
      msg.setPermstx(value);
      break;
    case 5:
      var value = new proto.payload.GovTx;
      reader.readMessage(value,proto.payload.GovTx.deserializeBinaryFromReader);
      msg.setGovtx(value);
      break;
    case 6:
      var value = new proto.payload.BondTx;
      reader.readMessage(value,proto.payload.BondTx.deserializeBinaryFromReader);
      msg.setBondtx(value);
      break;
    case 7:
      var value = new proto.payload.UnbondTx;
      reader.readMessage(value,proto.payload.UnbondTx.deserializeBinaryFromReader);
      msg.setUnbondtx(value);
      break;
    case 8:
      var value = new proto.payload.BatchTx;
      reader.readMessage(value,proto.payload.BatchTx.deserializeBinaryFromReader);
      msg.setBatchtx(value);
      break;
    case 9:
      var value = new proto.payload.ProposalTx;
      reader.readMessage(value,proto.payload.ProposalTx.deserializeBinaryFromReader);
      msg.setProposaltx(value);
      break;
    case 10:
      var value = new proto.payload.IdentifyTx;
      reader.readMessage(value,proto.payload.IdentifyTx.deserializeBinaryFromReader);
      msg.setIdentifytx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.Any.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.Any.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.Any} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Any.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalltx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.CallTx.serializeBinaryToWriter
    );
  }
  f = message.getSendtx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.payload.SendTx.serializeBinaryToWriter
    );
  }
  f = message.getNametx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.payload.NameTx.serializeBinaryToWriter
    );
  }
  f = message.getPermstx();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.payload.PermsTx.serializeBinaryToWriter
    );
  }
  f = message.getGovtx();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.payload.GovTx.serializeBinaryToWriter
    );
  }
  f = message.getBondtx();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.payload.BondTx.serializeBinaryToWriter
    );
  }
  f = message.getUnbondtx();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.payload.UnbondTx.serializeBinaryToWriter
    );
  }
  f = message.getBatchtx();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.payload.BatchTx.serializeBinaryToWriter
    );
  }
  f = message.getProposaltx();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.payload.ProposalTx.serializeBinaryToWriter
    );
  }
  f = message.getIdentifytx();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.payload.IdentifyTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional CallTx CallTx = 1;
 * @return {?proto.payload.CallTx}
 */
proto.payload.Any.prototype.getCalltx = function() {
  return /** @type{?proto.payload.CallTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.CallTx, 1));
};


/**
 * @param {?proto.payload.CallTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setCalltx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearCalltx = function() {
  return this.setCalltx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasCalltx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SendTx SendTx = 2;
 * @return {?proto.payload.SendTx}
 */
proto.payload.Any.prototype.getSendtx = function() {
  return /** @type{?proto.payload.SendTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.SendTx, 2));
};


/**
 * @param {?proto.payload.SendTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setSendtx = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearSendtx = function() {
  return this.setSendtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasSendtx = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NameTx NameTx = 3;
 * @return {?proto.payload.NameTx}
 */
proto.payload.Any.prototype.getNametx = function() {
  return /** @type{?proto.payload.NameTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.NameTx, 3));
};


/**
 * @param {?proto.payload.NameTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setNametx = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearNametx = function() {
  return this.setNametx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasNametx = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PermsTx PermsTx = 4;
 * @return {?proto.payload.PermsTx}
 */
proto.payload.Any.prototype.getPermstx = function() {
  return /** @type{?proto.payload.PermsTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.PermsTx, 4));
};


/**
 * @param {?proto.payload.PermsTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setPermstx = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearPermstx = function() {
  return this.setPermstx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasPermstx = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GovTx GovTx = 5;
 * @return {?proto.payload.GovTx}
 */
proto.payload.Any.prototype.getGovtx = function() {
  return /** @type{?proto.payload.GovTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.GovTx, 5));
};


/**
 * @param {?proto.payload.GovTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setGovtx = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearGovtx = function() {
  return this.setGovtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasGovtx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BondTx BondTx = 6;
 * @return {?proto.payload.BondTx}
 */
proto.payload.Any.prototype.getBondtx = function() {
  return /** @type{?proto.payload.BondTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.BondTx, 6));
};


/**
 * @param {?proto.payload.BondTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setBondtx = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearBondtx = function() {
  return this.setBondtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasBondtx = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UnbondTx UnbondTx = 7;
 * @return {?proto.payload.UnbondTx}
 */
proto.payload.Any.prototype.getUnbondtx = function() {
  return /** @type{?proto.payload.UnbondTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.UnbondTx, 7));
};


/**
 * @param {?proto.payload.UnbondTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setUnbondtx = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearUnbondtx = function() {
  return this.setUnbondtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasUnbondtx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BatchTx BatchTx = 8;
 * @return {?proto.payload.BatchTx}
 */
proto.payload.Any.prototype.getBatchtx = function() {
  return /** @type{?proto.payload.BatchTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.BatchTx, 8));
};


/**
 * @param {?proto.payload.BatchTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setBatchtx = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearBatchtx = function() {
  return this.setBatchtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasBatchtx = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ProposalTx ProposalTx = 9;
 * @return {?proto.payload.ProposalTx}
 */
proto.payload.Any.prototype.getProposaltx = function() {
  return /** @type{?proto.payload.ProposalTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.ProposalTx, 9));
};


/**
 * @param {?proto.payload.ProposalTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setProposaltx = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearProposaltx = function() {
  return this.setProposaltx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasProposaltx = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional IdentifyTx IdentifyTx = 10;
 * @return {?proto.payload.IdentifyTx}
 */
proto.payload.Any.prototype.getIdentifytx = function() {
  return /** @type{?proto.payload.IdentifyTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.IdentifyTx, 10));
};


/**
 * @param {?proto.payload.IdentifyTx|undefined} value
 * @return {!proto.payload.Any} returns this
*/
proto.payload.Any.prototype.setIdentifytx = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Any} returns this
 */
proto.payload.Any.prototype.clearIdentifytx = function() {
  return this.setIdentifytx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Any.prototype.hasIdentifytx = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.BatchTx.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.BatchTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.BatchTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.BatchTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BatchTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.payload.TxInput.toObject, includeInstance),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.payload.Any.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.BatchTx}
 */
proto.payload.BatchTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.BatchTx;
  return proto.payload.BatchTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.BatchTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.BatchTx}
 */
proto.payload.BatchTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.payload.Any;
      reader.readMessage(value,proto.payload.Any.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.BatchTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.BatchTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.BatchTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BatchTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.payload.Any.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TxInput Inputs = 1;
 * @return {!Array<!proto.payload.TxInput>}
 */
proto.payload.BatchTx.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.payload.TxInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TxInput, 1));
};


/**
 * @param {!Array<!proto.payload.TxInput>} value
 * @return {!proto.payload.BatchTx} returns this
*/
proto.payload.BatchTx.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.payload.TxInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TxInput}
 */
proto.payload.BatchTx.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.payload.TxInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.BatchTx} returns this
 */
proto.payload.BatchTx.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated Any Txs = 2;
 * @return {!Array<!proto.payload.Any>}
 */
proto.payload.BatchTx.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.payload.Any>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.Any, 2));
};


/**
 * @param {!Array<!proto.payload.Any>} value
 * @return {!proto.payload.BatchTx} returns this
*/
proto.payload.BatchTx.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.payload.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.Any}
 */
proto.payload.BatchTx.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.payload.Any, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.BatchTx} returns this
 */
proto.payload.BatchTx.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    batchtx: (f = msg.getBatchtx()) && proto.payload.BatchTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.Proposal}
 */
proto.payload.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.Proposal;
  return proto.payload.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.Proposal}
 */
proto.payload.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.payload.BatchTx;
      reader.readMessage(value,proto.payload.BatchTx.deserializeBinaryFromReader);
      msg.setBatchtx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBatchtx();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.payload.BatchTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.payload.Proposal.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.Proposal} returns this
 */
proto.payload.Proposal.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.payload.Proposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.Proposal} returns this
 */
proto.payload.Proposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BatchTx BatchTx = 3;
 * @return {?proto.payload.BatchTx}
 */
proto.payload.Proposal.prototype.getBatchtx = function() {
  return /** @type{?proto.payload.BatchTx} */ (
    jspb.Message.getWrapperField(this, proto.payload.BatchTx, 3));
};


/**
 * @param {?proto.payload.BatchTx|undefined} value
 * @return {!proto.payload.Proposal} returns this
*/
proto.payload.Proposal.prototype.setBatchtx = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.Proposal} returns this
 */
proto.payload.Proposal.prototype.clearBatchtx = function() {
  return this.setBatchtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.Proposal.prototype.hasBatchtx = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.ProposalTx.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.ProposalTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.ProposalTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ProposalTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.payload.TxInput.toObject(includeInstance, f),
    votingweight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalhash: msg.getProposalhash_asB64(),
    proposal: (f = msg.getProposal()) && proto.payload.Proposal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.ProposalTx}
 */
proto.payload.ProposalTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.ProposalTx;
  return proto.payload.ProposalTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.ProposalTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.ProposalTx}
 */
proto.payload.ProposalTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payload.TxInput;
      reader.readMessage(value,proto.payload.TxInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotingweight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposalhash(value);
      break;
    case 4:
      var value = new proto.payload.Proposal;
      reader.readMessage(value,proto.payload.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.ProposalTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.ProposalTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.ProposalTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ProposalTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payload.TxInput.serializeBinaryToWriter
    );
  }
  f = message.getVotingweight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getProposalhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.payload.Proposal.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxInput Input = 1;
 * @return {?proto.payload.TxInput}
 */
proto.payload.ProposalTx.prototype.getInput = function() {
  return /** @type{?proto.payload.TxInput} */ (
    jspb.Message.getWrapperField(this, proto.payload.TxInput, 1));
};


/**
 * @param {?proto.payload.TxInput|undefined} value
 * @return {!proto.payload.ProposalTx} returns this
*/
proto.payload.ProposalTx.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.ProposalTx} returns this
 */
proto.payload.ProposalTx.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ProposalTx.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 VotingWeight = 2;
 * @return {number}
 */
proto.payload.ProposalTx.prototype.getVotingweight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.ProposalTx} returns this
 */
proto.payload.ProposalTx.prototype.setVotingweight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes ProposalHash = 3;
 * @return {string}
 */
proto.payload.ProposalTx.prototype.getProposalhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ProposalHash = 3;
 * This is a type-conversion wrapper around `getProposalhash()`
 * @return {string}
 */
proto.payload.ProposalTx.prototype.getProposalhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposalhash()));
};


/**
 * optional bytes ProposalHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposalhash()`
 * @return {!Uint8Array}
 */
proto.payload.ProposalTx.prototype.getProposalhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposalhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.payload.ProposalTx} returns this
 */
proto.payload.ProposalTx.prototype.setProposalhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Proposal Proposal = 4;
 * @return {?proto.payload.Proposal}
 */
proto.payload.ProposalTx.prototype.getProposal = function() {
  return /** @type{?proto.payload.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.payload.Proposal, 4));
};


/**
 * @param {?proto.payload.Proposal|undefined} value
 * @return {!proto.payload.ProposalTx} returns this
*/
proto.payload.ProposalTx.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.ProposalTx} returns this
 */
proto.payload.ProposalTx.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ProposalTx.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 4) != null;
};


