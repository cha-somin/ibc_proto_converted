// source: lum-network/millions/draw.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.lum.network.millions.Draw');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cosmos.base.v1beta1.Coin');
goog.require('proto.google.protobuf.Timestamp');
goog.require('proto.lum.network.millions.PrizeRef');

goog.forwardDeclare('proto.lum.network.millions.DrawState');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lum.network.millions.Draw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lum.network.millions.Draw.repeatedFields_, null);
};
goog.inherits(proto.lum.network.millions.Draw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lum.network.millions.Draw.displayName = 'proto.lum.network.millions.Draw';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lum.network.millions.Draw.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lum.network.millions.Draw.prototype.toObject = function(opt_includeInstance) {
  return proto.lum.network.millions.Draw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lum.network.millions.Draw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lum.network.millions.Draw.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    drawId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    errorState: jspb.Message.getFieldWithDefault(msg, 4, 0),
    randSeed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    prizePool: (f = msg.getPrizePool()) && proto.cosmos.base.v1beta1.Coin.toObject(includeInstance, f),
    prizePoolFreshAmount: jspb.Message.getFieldWithDefault(msg, 7, ""),
    prizePoolRemainsAmount: jspb.Message.getFieldWithDefault(msg, 8, ""),
    prizesRefsList: jspb.Message.toObjectList(msg.getPrizesRefsList(),
    proto.lum.network.millions.PrizeRef.toObject, includeInstance),
    totalWinCount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    totalWinAmount: jspb.Message.getFieldWithDefault(msg, 13, ""),
    createdAtHeight: jspb.Message.getFieldWithDefault(msg, 15, 0),
    updatedAtHeight: jspb.Message.getFieldWithDefault(msg, 16, 0),
    createdAt: (f = msg.getCreatedAt()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lum.network.millions.Draw}
 */
proto.lum.network.millions.Draw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lum.network.millions.Draw;
  return proto.lum.network.millions.Draw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lum.network.millions.Draw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lum.network.millions.Draw}
 */
proto.lum.network.millions.Draw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDrawId(value);
      break;
    case 3:
      var value = /** @type {!proto.lum.network.millions.DrawState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {!proto.lum.network.millions.DrawState} */ (reader.readEnum());
      msg.setErrorState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandSeed(value);
      break;
    case 6:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.setPrizePool(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrizePoolFreshAmount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrizePoolRemainsAmount(value);
      break;
    case 11:
      var value = new proto.lum.network.millions.PrizeRef;
      reader.readMessage(value,proto.lum.network.millions.PrizeRef.deserializeBinaryFromReader);
      msg.addPrizesRefs(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalWinCount(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalWinAmount(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAtHeight(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAtHeight(value);
      break;
    case 17:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 18:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lum.network.millions.Draw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lum.network.millions.Draw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lum.network.millions.Draw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lum.network.millions.Draw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDrawId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getErrorState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getRandSeed();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPrizePool();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
  f = message.getPrizePoolFreshAmount();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPrizePoolRemainsAmount();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPrizesRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.lum.network.millions.PrizeRef.serializeBinaryToWriter
    );
  }
  f = message.getTotalWinCount();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getTotalWinAmount();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCreatedAtHeight();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getUpdatedAtHeight();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 pool_id = 1;
 * @return {number}
 */
proto.lum.network.millions.Draw.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 draw_id = 2;
 * @return {number}
 */
proto.lum.network.millions.Draw.prototype.getDrawId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setDrawId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional DrawState state = 3;
 * @return {!proto.lum.network.millions.DrawState}
 */
proto.lum.network.millions.Draw.prototype.getState = function() {
  return /** @type {!proto.lum.network.millions.DrawState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lum.network.millions.DrawState} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional DrawState error_state = 4;
 * @return {!proto.lum.network.millions.DrawState}
 */
proto.lum.network.millions.Draw.prototype.getErrorState = function() {
  return /** @type {!proto.lum.network.millions.DrawState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lum.network.millions.DrawState} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setErrorState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 rand_seed = 5;
 * @return {number}
 */
proto.lum.network.millions.Draw.prototype.getRandSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setRandSeed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional cosmos.base.v1beta1.Coin prize_pool = 6;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.lum.network.millions.Draw.prototype.getPrizePool = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.v1beta1.Coin, 6));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.lum.network.millions.Draw} returns this
*/
proto.lum.network.millions.Draw.prototype.setPrizePool = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.clearPrizePool = function() {
  return this.setPrizePool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lum.network.millions.Draw.prototype.hasPrizePool = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string prize_pool_fresh_amount = 7;
 * @return {string}
 */
proto.lum.network.millions.Draw.prototype.getPrizePoolFreshAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setPrizePoolFreshAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string prize_pool_remains_amount = 8;
 * @return {string}
 */
proto.lum.network.millions.Draw.prototype.getPrizePoolRemainsAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setPrizePoolRemainsAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated PrizeRef prizes_refs = 11;
 * @return {!Array<!proto.lum.network.millions.PrizeRef>}
 */
proto.lum.network.millions.Draw.prototype.getPrizesRefsList = function() {
  return /** @type{!Array<!proto.lum.network.millions.PrizeRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lum.network.millions.PrizeRef, 11));
};


/**
 * @param {!Array<!proto.lum.network.millions.PrizeRef>} value
 * @return {!proto.lum.network.millions.Draw} returns this
*/
proto.lum.network.millions.Draw.prototype.setPrizesRefsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.lum.network.millions.PrizeRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lum.network.millions.PrizeRef}
 */
proto.lum.network.millions.Draw.prototype.addPrizesRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.lum.network.millions.PrizeRef, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.clearPrizesRefsList = function() {
  return this.setPrizesRefsList([]);
};


/**
 * optional uint64 total_win_count = 12;
 * @return {number}
 */
proto.lum.network.millions.Draw.prototype.getTotalWinCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setTotalWinCount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string total_win_amount = 13;
 * @return {string}
 */
proto.lum.network.millions.Draw.prototype.getTotalWinAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setTotalWinAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int64 created_at_height = 15;
 * @return {number}
 */
proto.lum.network.millions.Draw.prototype.getCreatedAtHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setCreatedAtHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 updated_at_height = 16;
 * @return {number}
 */
proto.lum.network.millions.Draw.prototype.getUpdatedAtHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.setUpdatedAtHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 17;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lum.network.millions.Draw.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 17));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.lum.network.millions.Draw} returns this
*/
proto.lum.network.millions.Draw.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lum.network.millions.Draw.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 18;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.lum.network.millions.Draw.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 18));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.lum.network.millions.Draw} returns this
*/
proto.lum.network.millions.Draw.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lum.network.millions.Draw} returns this
 */
proto.lum.network.millions.Draw.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lum.network.millions.Draw.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 18) != null;
};


