// source: panacea/datapool/v2alpha1/pool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.panacea.datapool.v2alpha1.Pool');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.cosmos.base.v1beta1.Coin');
goog.require('proto.panacea.datapool.v2alpha1.PoolParams');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panacea.datapool.v2alpha1.Pool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.panacea.datapool.v2alpha1.Pool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panacea.datapool.v2alpha1.Pool.displayName = 'proto.panacea.datapool.v2alpha1.Pool';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.toObject = function(opt_includeInstance) {
  return proto.panacea.datapool.v2alpha1.Pool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panacea.datapool.v2alpha1.Pool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panacea.datapool.v2alpha1.Pool.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    poolAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    poolParams: (f = msg.getPoolParams()) && proto.panacea.datapool.v2alpha1.PoolParams.toObject(includeInstance, f),
    curNumData: jspb.Message.getFieldWithDefault(msg, 5, 0),
    numIssuedNfts: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getFieldWithDefault(msg, 7, ""),
    curator: jspb.Message.getFieldWithDefault(msg, 8, ""),
    deposit: (f = msg.getDeposit()) && proto.cosmos.base.v1beta1.Coin.toObject(includeInstance, f),
    nftContractAddr: jspb.Message.getFieldWithDefault(msg, 10, ""),
    wasDepositReturned: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    curatorCommissionMap: (f = msg.getCuratorCommissionMap()) ? f.toObject(includeInstance, proto.cosmos.base.v1beta1.Coin.toObject) : [],
    curatorCommissionRate: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panacea.datapool.v2alpha1.Pool}
 */
proto.panacea.datapool.v2alpha1.Pool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panacea.datapool.v2alpha1.Pool;
  return proto.panacea.datapool.v2alpha1.Pool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panacea.datapool.v2alpha1.Pool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panacea.datapool.v2alpha1.Pool}
 */
proto.panacea.datapool.v2alpha1.Pool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPoolId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 4:
      var value = new proto.panacea.datapool.v2alpha1.PoolParams;
      reader.readMessage(value,proto.panacea.datapool.v2alpha1.PoolParams.deserializeBinaryFromReader);
      msg.setPoolParams(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurNumData(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumIssuedNfts(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurator(value);
      break;
    case 9:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNftContractAddr(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWasDepositReturned(value);
      break;
    case 12:
      var value = msg.getCuratorCommissionMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader, 0, new proto.cosmos.base.v1beta1.Coin());
         });
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCuratorCommissionRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panacea.datapool.v2alpha1.Pool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panacea.datapool.v2alpha1.Pool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panacea.datapool.v2alpha1.Pool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPoolAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPoolParams();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.panacea.datapool.v2alpha1.PoolParams.serializeBinaryToWriter
    );
  }
  f = message.getCurNumData();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNumIssuedNfts();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCurator();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
  f = message.getNftContractAddr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWasDepositReturned();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getCuratorCommissionMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter);
  }
  f = message.getCuratorCommissionRate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional uint64 pool_id = 1;
 * @return {number}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getPoolId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setPoolId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string pool_address = 2;
 * @return {string}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getPoolAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setPoolAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 round = 3;
 * @return {number}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional PoolParams pool_params = 4;
 * @return {?proto.panacea.datapool.v2alpha1.PoolParams}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getPoolParams = function() {
  return /** @type{?proto.panacea.datapool.v2alpha1.PoolParams} */ (
    jspb.Message.getWrapperField(this, proto.panacea.datapool.v2alpha1.PoolParams, 4));
};


/**
 * @param {?proto.panacea.datapool.v2alpha1.PoolParams|undefined} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
*/
proto.panacea.datapool.v2alpha1.Pool.prototype.setPoolParams = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.clearPoolParams = function() {
  return this.setPoolParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.hasPoolParams = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 cur_num_data = 5;
 * @return {number}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getCurNumData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setCurNumData = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 num_issued_nfts = 6;
 * @return {number}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getNumIssuedNfts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setNumIssuedNfts = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string status = 7;
 * @return {string}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string curator = 8;
 * @return {string}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getCurator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setCurator = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional cosmos.base.v1beta1.Coin deposit = 9;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getDeposit = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.v1beta1.Coin, 9));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
*/
proto.panacea.datapool.v2alpha1.Pool.prototype.setDeposit = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string nft_contract_addr = 10;
 * @return {string}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getNftContractAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setNftContractAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool was_deposit_returned = 11;
 * @return {boolean}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getWasDepositReturned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setWasDepositReturned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * map<uint64, cosmos.base.v1beta1.Coin> curator_commission = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.cosmos.base.v1beta1.Coin>}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getCuratorCommissionMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.cosmos.base.v1beta1.Coin>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      proto.cosmos.base.v1beta1.Coin));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.clearCuratorCommissionMap = function() {
  this.getCuratorCommissionMap().clear();
  return this;
};


/**
 * optional string curator_commission_rate = 13;
 * @return {string}
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.getCuratorCommissionRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.datapool.v2alpha1.Pool} returns this
 */
proto.panacea.datapool.v2alpha1.Pool.prototype.setCuratorCommissionRate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


