// source: quicksilver/interchainstaking/v1/interchainstaking.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.quicksilver.interchainstaking.v1.Zone');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.quicksilver.interchainstaking.v1.ICAAccount');
goog.require('proto.quicksilver.interchainstaking.v1.Validator');
goog.require('proto.quicksilver.interchainstaking.v1.ValidatorIntent');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.quicksilver.interchainstaking.v1.Zone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.quicksilver.interchainstaking.v1.Zone.repeatedFields_, null);
};
goog.inherits(proto.quicksilver.interchainstaking.v1.Zone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.quicksilver.interchainstaking.v1.Zone.displayName = 'proto.quicksilver.interchainstaking.v1.Zone';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.quicksilver.interchainstaking.v1.Zone.repeatedFields_ = [12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.toObject = function(opt_includeInstance) {
  return proto.quicksilver.interchainstaking.v1.Zone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.quicksilver.interchainstaking.v1.Zone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quicksilver.interchainstaking.v1.Zone.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    depositAddress: (f = msg.getDepositAddress()) && proto.quicksilver.interchainstaking.v1.ICAAccount.toObject(includeInstance, f),
    withdrawalAddress: (f = msg.getWithdrawalAddress()) && proto.quicksilver.interchainstaking.v1.ICAAccount.toObject(includeInstance, f),
    performanceAddress: (f = msg.getPerformanceAddress()) && proto.quicksilver.interchainstaking.v1.ICAAccount.toObject(includeInstance, f),
    delegationAddress: (f = msg.getDelegationAddress()) && proto.quicksilver.interchainstaking.v1.ICAAccount.toObject(includeInstance, f),
    accountPrefix: jspb.Message.getFieldWithDefault(msg, 7, ""),
    localDenom: jspb.Message.getFieldWithDefault(msg, 8, ""),
    baseDenom: jspb.Message.getFieldWithDefault(msg, 9, ""),
    redemptionRate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    lastRedemptionRate: jspb.Message.getFieldWithDefault(msg, 11, ""),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.quicksilver.interchainstaking.v1.Validator.toObject, includeInstance),
    aggregateIntentList: jspb.Message.toObjectList(msg.getAggregateIntentList(),
    proto.quicksilver.interchainstaking.v1.ValidatorIntent.toObject, includeInstance),
    multiSend: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    liquidityModule: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    withdrawalWaitgroup: jspb.Message.getFieldWithDefault(msg, 16, 0),
    ibcNextValidatorsHash: msg.getIbcNextValidatorsHash_asB64(),
    validatorSelectionAllocation: jspb.Message.getFieldWithDefault(msg, 18, 0),
    holdingsAllocation: jspb.Message.getFieldWithDefault(msg, 19, 0),
    lastEpochHeight: jspb.Message.getFieldWithDefault(msg, 20, 0),
    tvl: jspb.Message.getFieldWithDefault(msg, 21, ""),
    unbondingPeriod: jspb.Message.getFieldWithDefault(msg, 22, 0),
    messagesPerTx: jspb.Message.getFieldWithDefault(msg, 23, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 24, 0),
    unbondingEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    depositsEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 26, false),
    returnToSender: jspb.Message.getBooleanFieldWithDefault(msg, 27, false),
    is118: jspb.Message.getBooleanFieldWithDefault(msg, 28, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone}
 */
proto.quicksilver.interchainstaking.v1.Zone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.quicksilver.interchainstaking.v1.Zone;
  return proto.quicksilver.interchainstaking.v1.Zone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.quicksilver.interchainstaking.v1.Zone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone}
 */
proto.quicksilver.interchainstaking.v1.Zone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = new proto.quicksilver.interchainstaking.v1.ICAAccount;
      reader.readMessage(value,proto.quicksilver.interchainstaking.v1.ICAAccount.deserializeBinaryFromReader);
      msg.setDepositAddress(value);
      break;
    case 4:
      var value = new proto.quicksilver.interchainstaking.v1.ICAAccount;
      reader.readMessage(value,proto.quicksilver.interchainstaking.v1.ICAAccount.deserializeBinaryFromReader);
      msg.setWithdrawalAddress(value);
      break;
    case 5:
      var value = new proto.quicksilver.interchainstaking.v1.ICAAccount;
      reader.readMessage(value,proto.quicksilver.interchainstaking.v1.ICAAccount.deserializeBinaryFromReader);
      msg.setPerformanceAddress(value);
      break;
    case 6:
      var value = new proto.quicksilver.interchainstaking.v1.ICAAccount;
      reader.readMessage(value,proto.quicksilver.interchainstaking.v1.ICAAccount.deserializeBinaryFromReader);
      msg.setDelegationAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountPrefix(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalDenom(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseDenom(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedemptionRate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastRedemptionRate(value);
      break;
    case 12:
      var value = new proto.quicksilver.interchainstaking.v1.Validator;
      reader.readMessage(value,proto.quicksilver.interchainstaking.v1.Validator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 13:
      var value = new proto.quicksilver.interchainstaking.v1.ValidatorIntent;
      reader.readMessage(value,proto.quicksilver.interchainstaking.v1.ValidatorIntent.deserializeBinaryFromReader);
      msg.addAggregateIntent(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMultiSend(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLiquidityModule(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWithdrawalWaitgroup(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIbcNextValidatorsHash(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValidatorSelectionAllocation(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHoldingsAllocation(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastEpochHeight(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setTvl(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnbondingPeriod(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagesPerTx(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDecimals(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnbondingEnabled(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDepositsEnabled(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnToSender(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIs118(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.quicksilver.interchainstaking.v1.Zone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.quicksilver.interchainstaking.v1.Zone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.quicksilver.interchainstaking.v1.Zone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDepositAddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.quicksilver.interchainstaking.v1.ICAAccount.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawalAddress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.quicksilver.interchainstaking.v1.ICAAccount.serializeBinaryToWriter
    );
  }
  f = message.getPerformanceAddress();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.quicksilver.interchainstaking.v1.ICAAccount.serializeBinaryToWriter
    );
  }
  f = message.getDelegationAddress();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.quicksilver.interchainstaking.v1.ICAAccount.serializeBinaryToWriter
    );
  }
  f = message.getAccountPrefix();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLocalDenom();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBaseDenom();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRedemptionRate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLastRedemptionRate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.quicksilver.interchainstaking.v1.Validator.serializeBinaryToWriter
    );
  }
  f = message.getAggregateIntentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.quicksilver.interchainstaking.v1.ValidatorIntent.serializeBinaryToWriter
    );
  }
  f = message.getMultiSend();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getLiquidityModule();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getWithdrawalWaitgroup();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getIbcNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getValidatorSelectionAllocation();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getHoldingsAllocation();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getLastEpochHeight();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getTvl();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getUnbondingPeriod();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getMessagesPerTx();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt64(
      24,
      f
    );
  }
  f = message.getUnbondingEnabled();
  if (f) {
    writer.writeBool(
      25,
      f
    );
  }
  f = message.getDepositsEnabled();
  if (f) {
    writer.writeBool(
      26,
      f
    );
  }
  f = message.getReturnToSender();
  if (f) {
    writer.writeBool(
      27,
      f
    );
  }
  f = message.getIs118();
  if (f) {
    writer.writeBool(
      28,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ICAAccount deposit_address = 3;
 * @return {?proto.quicksilver.interchainstaking.v1.ICAAccount}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getDepositAddress = function() {
  return /** @type{?proto.quicksilver.interchainstaking.v1.ICAAccount} */ (
    jspb.Message.getWrapperField(this, proto.quicksilver.interchainstaking.v1.ICAAccount, 3));
};


/**
 * @param {?proto.quicksilver.interchainstaking.v1.ICAAccount|undefined} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
*/
proto.quicksilver.interchainstaking.v1.Zone.prototype.setDepositAddress = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.clearDepositAddress = function() {
  return this.setDepositAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.hasDepositAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ICAAccount withdrawal_address = 4;
 * @return {?proto.quicksilver.interchainstaking.v1.ICAAccount}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getWithdrawalAddress = function() {
  return /** @type{?proto.quicksilver.interchainstaking.v1.ICAAccount} */ (
    jspb.Message.getWrapperField(this, proto.quicksilver.interchainstaking.v1.ICAAccount, 4));
};


/**
 * @param {?proto.quicksilver.interchainstaking.v1.ICAAccount|undefined} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
*/
proto.quicksilver.interchainstaking.v1.Zone.prototype.setWithdrawalAddress = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.clearWithdrawalAddress = function() {
  return this.setWithdrawalAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.hasWithdrawalAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ICAAccount performance_address = 5;
 * @return {?proto.quicksilver.interchainstaking.v1.ICAAccount}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getPerformanceAddress = function() {
  return /** @type{?proto.quicksilver.interchainstaking.v1.ICAAccount} */ (
    jspb.Message.getWrapperField(this, proto.quicksilver.interchainstaking.v1.ICAAccount, 5));
};


/**
 * @param {?proto.quicksilver.interchainstaking.v1.ICAAccount|undefined} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
*/
proto.quicksilver.interchainstaking.v1.Zone.prototype.setPerformanceAddress = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.clearPerformanceAddress = function() {
  return this.setPerformanceAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.hasPerformanceAddress = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ICAAccount delegation_address = 6;
 * @return {?proto.quicksilver.interchainstaking.v1.ICAAccount}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getDelegationAddress = function() {
  return /** @type{?proto.quicksilver.interchainstaking.v1.ICAAccount} */ (
    jspb.Message.getWrapperField(this, proto.quicksilver.interchainstaking.v1.ICAAccount, 6));
};


/**
 * @param {?proto.quicksilver.interchainstaking.v1.ICAAccount|undefined} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
*/
proto.quicksilver.interchainstaking.v1.Zone.prototype.setDelegationAddress = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.clearDelegationAddress = function() {
  return this.setDelegationAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.hasDelegationAddress = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string account_prefix = 7;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getAccountPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setAccountPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string local_denom = 8;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getLocalDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setLocalDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string base_denom = 9;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getBaseDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setBaseDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string redemption_rate = 10;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getRedemptionRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setRedemptionRate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string last_redemption_rate = 11;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getLastRedemptionRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setLastRedemptionRate = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated Validator validators = 12;
 * @return {!Array<!proto.quicksilver.interchainstaking.v1.Validator>}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.quicksilver.interchainstaking.v1.Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quicksilver.interchainstaking.v1.Validator, 12));
};


/**
 * @param {!Array<!proto.quicksilver.interchainstaking.v1.Validator>} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
*/
proto.quicksilver.interchainstaking.v1.Zone.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.quicksilver.interchainstaking.v1.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quicksilver.interchainstaking.v1.Validator}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.quicksilver.interchainstaking.v1.Validator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * repeated ValidatorIntent aggregate_intent = 13;
 * @return {!Array<!proto.quicksilver.interchainstaking.v1.ValidatorIntent>}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getAggregateIntentList = function() {
  return /** @type{!Array<!proto.quicksilver.interchainstaking.v1.ValidatorIntent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.quicksilver.interchainstaking.v1.ValidatorIntent, 13));
};


/**
 * @param {!Array<!proto.quicksilver.interchainstaking.v1.ValidatorIntent>} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
*/
proto.quicksilver.interchainstaking.v1.Zone.prototype.setAggregateIntentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.quicksilver.interchainstaking.v1.ValidatorIntent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.quicksilver.interchainstaking.v1.ValidatorIntent}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.addAggregateIntent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.quicksilver.interchainstaking.v1.ValidatorIntent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.clearAggregateIntentList = function() {
  return this.setAggregateIntentList([]);
};


/**
 * optional bool multi_send = 14;
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getMultiSend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setMultiSend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool liquidity_module = 15;
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getLiquidityModule = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setLiquidityModule = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional uint32 withdrawal_waitgroup = 16;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getWithdrawalWaitgroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setWithdrawalWaitgroup = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional bytes ibc_next_validators_hash = 17;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getIbcNextValidatorsHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes ibc_next_validators_hash = 17;
 * This is a type-conversion wrapper around `getIbcNextValidatorsHash()`
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getIbcNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIbcNextValidatorsHash()));
};


/**
 * optional bytes ibc_next_validators_hash = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIbcNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getIbcNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIbcNextValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setIbcNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};


/**
 * optional uint64 validator_selection_allocation = 18;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getValidatorSelectionAllocation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setValidatorSelectionAllocation = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 holdings_allocation = 19;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getHoldingsAllocation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setHoldingsAllocation = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int64 last_epoch_height = 20;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getLastEpochHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setLastEpochHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string tvl = 21;
 * @return {string}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getTvl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setTvl = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional int64 unbonding_period = 22;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getUnbondingPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setUnbondingPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int64 messages_per_tx = 23;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getMessagesPerTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setMessagesPerTx = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int64 decimals = 24;
 * @return {number}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional bool unbonding_enabled = 25;
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getUnbondingEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setUnbondingEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 25, value);
};


/**
 * optional bool deposits_enabled = 26;
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getDepositsEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 26, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setDepositsEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 26, value);
};


/**
 * optional bool return_to_sender = 27;
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getReturnToSender = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 27, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setReturnToSender = function(value) {
  return jspb.Message.setProto3BooleanField(this, 27, value);
};


/**
 * optional bool is_118 = 28;
 * @return {boolean}
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.getIs118 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 28, false));
};


/**
 * @param {boolean} value
 * @return {!proto.quicksilver.interchainstaking.v1.Zone} returns this
 */
proto.quicksilver.interchainstaking.v1.Zone.prototype.setIs118 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 28, value);
};


