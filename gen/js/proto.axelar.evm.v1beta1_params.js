// source: axelar/evm/v1beta1/params.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.axelar.evm.v1beta1.Params');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.axelar.evm.v1beta1.NetworkInfo');
goog.require('proto.axelar.utils.v1beta1.Threshold');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.evm.v1beta1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.axelar.evm.v1beta1.Params.repeatedFields_, null);
};
goog.inherits(proto.axelar.evm.v1beta1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.evm.v1beta1.Params.displayName = 'proto.axelar.evm.v1beta1.Params';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.axelar.evm.v1beta1.Params.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.evm.v1beta1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.evm.v1beta1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.evm.v1beta1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.evm.v1beta1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    chain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confirmationHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    network: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenCode: msg.getTokenCode_asB64(),
    burnable: msg.getBurnable_asB64(),
    revoteLockingPeriod: jspb.Message.getFieldWithDefault(msg, 7, 0),
    networksList: jspb.Message.toObjectList(msg.getNetworksList(),
    proto.axelar.evm.v1beta1.NetworkInfo.toObject, includeInstance),
    votingThreshold: (f = msg.getVotingThreshold()) && proto.axelar.utils.v1beta1.Threshold.toObject(includeInstance, f),
    minVoterCount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    commandsGasLimit: jspb.Message.getFieldWithDefault(msg, 11, 0),
    votingGracePeriod: jspb.Message.getFieldWithDefault(msg, 13, 0),
    endBlockerLimit: jspb.Message.getFieldWithDefault(msg, 14, 0),
    transferLimit: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.evm.v1beta1.Params}
 */
proto.axelar.evm.v1beta1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.evm.v1beta1.Params;
  return proto.axelar.evm.v1beta1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.evm.v1beta1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.evm.v1beta1.Params}
 */
proto.axelar.evm.v1beta1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChain(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmationHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTokenCode(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBurnable(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRevoteLockingPeriod(value);
      break;
    case 8:
      var value = new proto.axelar.evm.v1beta1.NetworkInfo;
      reader.readMessage(value,proto.axelar.evm.v1beta1.NetworkInfo.deserializeBinaryFromReader);
      msg.addNetworks(value);
      break;
    case 9:
      var value = new proto.axelar.utils.v1beta1.Threshold;
      reader.readMessage(value,proto.axelar.utils.v1beta1.Threshold.deserializeBinaryFromReader);
      msg.setVotingThreshold(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinVoterCount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommandsGasLimit(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotingGracePeriod(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndBlockerLimit(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransferLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.evm.v1beta1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.evm.v1beta1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.evm.v1beta1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.evm.v1beta1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfirmationHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBurnable_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getRevoteLockingPeriod();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getNetworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.axelar.evm.v1beta1.NetworkInfo.serializeBinaryToWriter
    );
  }
  f = message.getVotingThreshold();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.axelar.utils.v1beta1.Threshold.serializeBinaryToWriter
    );
  }
  f = message.getMinVoterCount();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getCommandsGasLimit();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getVotingGracePeriod();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getEndBlockerLimit();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getTransferLimit();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
};


/**
 * optional string chain = 1;
 * @return {string}
 */
proto.axelar.evm.v1beta1.Params.prototype.getChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setChain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 confirmation_height = 2;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getConfirmationHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setConfirmationHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string network = 3;
 * @return {string}
 */
proto.axelar.evm.v1beta1.Params.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes token_code = 5;
 * @return {string}
 */
proto.axelar.evm.v1beta1.Params.prototype.getTokenCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes token_code = 5;
 * This is a type-conversion wrapper around `getTokenCode()`
 * @return {string}
 */
proto.axelar.evm.v1beta1.Params.prototype.getTokenCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTokenCode()));
};


/**
 * optional bytes token_code = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenCode()`
 * @return {!Uint8Array}
 */
proto.axelar.evm.v1beta1.Params.prototype.getTokenCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTokenCode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setTokenCode = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes burnable = 6;
 * @return {string}
 */
proto.axelar.evm.v1beta1.Params.prototype.getBurnable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes burnable = 6;
 * This is a type-conversion wrapper around `getBurnable()`
 * @return {string}
 */
proto.axelar.evm.v1beta1.Params.prototype.getBurnable_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBurnable()));
};


/**
 * optional bytes burnable = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBurnable()`
 * @return {!Uint8Array}
 */
proto.axelar.evm.v1beta1.Params.prototype.getBurnable_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBurnable()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setBurnable = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int64 revote_locking_period = 7;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getRevoteLockingPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setRevoteLockingPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated NetworkInfo networks = 8;
 * @return {!Array<!proto.axelar.evm.v1beta1.NetworkInfo>}
 */
proto.axelar.evm.v1beta1.Params.prototype.getNetworksList = function() {
  return /** @type{!Array<!proto.axelar.evm.v1beta1.NetworkInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.axelar.evm.v1beta1.NetworkInfo, 8));
};


/**
 * @param {!Array<!proto.axelar.evm.v1beta1.NetworkInfo>} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
*/
proto.axelar.evm.v1beta1.Params.prototype.setNetworksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.axelar.evm.v1beta1.NetworkInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.axelar.evm.v1beta1.NetworkInfo}
 */
proto.axelar.evm.v1beta1.Params.prototype.addNetworks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.axelar.evm.v1beta1.NetworkInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.clearNetworksList = function() {
  return this.setNetworksList([]);
};


/**
 * optional axelar.utils.v1beta1.Threshold voting_threshold = 9;
 * @return {?proto.axelar.utils.v1beta1.Threshold}
 */
proto.axelar.evm.v1beta1.Params.prototype.getVotingThreshold = function() {
  return /** @type{?proto.axelar.utils.v1beta1.Threshold} */ (
    jspb.Message.getWrapperField(this, proto.axelar.utils.v1beta1.Threshold, 9));
};


/**
 * @param {?proto.axelar.utils.v1beta1.Threshold|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
*/
proto.axelar.evm.v1beta1.Params.prototype.setVotingThreshold = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.clearVotingThreshold = function() {
  return this.setVotingThreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Params.prototype.hasVotingThreshold = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 min_voter_count = 10;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getMinVoterCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setMinVoterCount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 commands_gas_limit = 11;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getCommandsGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setCommandsGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 voting_grace_period = 13;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getVotingGracePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setVotingGracePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 end_blocker_limit = 14;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getEndBlockerLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setEndBlockerLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 transfer_limit = 15;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Params.prototype.getTransferLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Params} returns this
 */
proto.axelar.evm.v1beta1.Params.prototype.setTransferLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


