// source: axelar/evm/v1beta1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.axelar.evm.v1beta1.Event');
goog.provide('proto.axelar.evm.v1beta1.Event.EventCase');
goog.provide('proto.axelar.evm.v1beta1.Event.Status');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.axelar.evm.v1beta1.EventContractCall');
goog.require('proto.axelar.evm.v1beta1.EventContractCallWithToken');
goog.require('proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred');
goog.require('proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred');
goog.require('proto.axelar.evm.v1beta1.EventTokenDeployed');
goog.require('proto.axelar.evm.v1beta1.EventTokenSent');
goog.require('proto.axelar.evm.v1beta1.EventTransfer');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.evm.v1beta1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.axelar.evm.v1beta1.Event.oneofGroups_);
};
goog.inherits(proto.axelar.evm.v1beta1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.evm.v1beta1.Event.displayName = 'proto.axelar.evm.v1beta1.Event';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.axelar.evm.v1beta1.Event.oneofGroups_ = [[5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.axelar.evm.v1beta1.Event.EventCase = {
  EVENT_NOT_SET: 0,
  TOKEN_SENT: 5,
  CONTRACT_CALL: 6,
  CONTRACT_CALL_WITH_TOKEN: 7,
  TRANSFER: 8,
  TOKEN_DEPLOYED: 9,
  MULTISIG_OWNERSHIP_TRANSFERRED: 10,
  MULTISIG_OPERATORSHIP_TRANSFERRED: 11
};

/**
 * @return {proto.axelar.evm.v1beta1.Event.EventCase}
 */
proto.axelar.evm.v1beta1.Event.prototype.getEventCase = function() {
  return /** @type {proto.axelar.evm.v1beta1.Event.EventCase} */(jspb.Message.computeOneofCase(this, proto.axelar.evm.v1beta1.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.evm.v1beta1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.evm.v1beta1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.evm.v1beta1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.evm.v1beta1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    chain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txId: msg.getTxId_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tokenSent: (f = msg.getTokenSent()) && proto.axelar.evm.v1beta1.EventTokenSent.toObject(includeInstance, f),
    contractCall: (f = msg.getContractCall()) && proto.axelar.evm.v1beta1.EventContractCall.toObject(includeInstance, f),
    contractCallWithToken: (f = msg.getContractCallWithToken()) && proto.axelar.evm.v1beta1.EventContractCallWithToken.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.axelar.evm.v1beta1.EventTransfer.toObject(includeInstance, f),
    tokenDeployed: (f = msg.getTokenDeployed()) && proto.axelar.evm.v1beta1.EventTokenDeployed.toObject(includeInstance, f),
    multisigOwnershipTransferred: (f = msg.getMultisigOwnershipTransferred()) && proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred.toObject(includeInstance, f),
    multisigOperatorshipTransferred: (f = msg.getMultisigOperatorshipTransferred()) && proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.evm.v1beta1.Event}
 */
proto.axelar.evm.v1beta1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.evm.v1beta1.Event;
  return proto.axelar.evm.v1beta1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.evm.v1beta1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.evm.v1beta1.Event}
 */
proto.axelar.evm.v1beta1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChain(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {!proto.axelar.evm.v1beta1.Event.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = new proto.axelar.evm.v1beta1.EventTokenSent;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventTokenSent.deserializeBinaryFromReader);
      msg.setTokenSent(value);
      break;
    case 6:
      var value = new proto.axelar.evm.v1beta1.EventContractCall;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventContractCall.deserializeBinaryFromReader);
      msg.setContractCall(value);
      break;
    case 7:
      var value = new proto.axelar.evm.v1beta1.EventContractCallWithToken;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventContractCallWithToken.deserializeBinaryFromReader);
      msg.setContractCallWithToken(value);
      break;
    case 8:
      var value = new proto.axelar.evm.v1beta1.EventTransfer;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 9:
      var value = new proto.axelar.evm.v1beta1.EventTokenDeployed;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventTokenDeployed.deserializeBinaryFromReader);
      msg.setTokenDeployed(value);
      break;
    case 10:
      var value = new proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred.deserializeBinaryFromReader);
      msg.setMultisigOwnershipTransferred(value);
      break;
    case 11:
      var value = new proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred;
      reader.readMessage(value,proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred.deserializeBinaryFromReader);
      msg.setMultisigOperatorshipTransferred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.evm.v1beta1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.evm.v1beta1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.evm.v1beta1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.evm.v1beta1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTokenSent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.axelar.evm.v1beta1.EventTokenSent.serializeBinaryToWriter
    );
  }
  f = message.getContractCall();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.axelar.evm.v1beta1.EventContractCall.serializeBinaryToWriter
    );
  }
  f = message.getContractCallWithToken();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.axelar.evm.v1beta1.EventContractCallWithToken.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.axelar.evm.v1beta1.EventTransfer.serializeBinaryToWriter
    );
  }
  f = message.getTokenDeployed();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.axelar.evm.v1beta1.EventTokenDeployed.serializeBinaryToWriter
    );
  }
  f = message.getMultisigOwnershipTransferred();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred.serializeBinaryToWriter
    );
  }
  f = message.getMultisigOperatorshipTransferred();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.axelar.evm.v1beta1.Event.Status = {
  STATUS_UNSPECIFIED: 0,
  STATUS_CONFIRMED: 1,
  STATUS_COMPLETED: 2,
  STATUS_FAILED: 3
};

/**
 * optional string chain = 1;
 * @return {string}
 */
proto.axelar.evm.v1beta1.Event.prototype.getChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.setChain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes tx_id = 2;
 * @return {string}
 */
proto.axelar.evm.v1beta1.Event.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_id = 2;
 * This is a type-conversion wrapper around `getTxId()`
 * @return {string}
 */
proto.axelar.evm.v1beta1.Event.prototype.getTxId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxId()));
};


/**
 * optional bytes tx_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxId()`
 * @return {!Uint8Array}
 */
proto.axelar.evm.v1beta1.Event.prototype.getTxId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.setTxId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.axelar.evm.v1beta1.Event.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Status status = 4;
 * @return {!proto.axelar.evm.v1beta1.Event.Status}
 */
proto.axelar.evm.v1beta1.Event.prototype.getStatus = function() {
  return /** @type {!proto.axelar.evm.v1beta1.Event.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.axelar.evm.v1beta1.Event.Status} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional EventTokenSent token_sent = 5;
 * @return {?proto.axelar.evm.v1beta1.EventTokenSent}
 */
proto.axelar.evm.v1beta1.Event.prototype.getTokenSent = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventTokenSent} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventTokenSent, 5));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventTokenSent|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setTokenSent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearTokenSent = function() {
  return this.setTokenSent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasTokenSent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EventContractCall contract_call = 6;
 * @return {?proto.axelar.evm.v1beta1.EventContractCall}
 */
proto.axelar.evm.v1beta1.Event.prototype.getContractCall = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventContractCall} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventContractCall, 6));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventContractCall|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setContractCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearContractCall = function() {
  return this.setContractCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasContractCall = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EventContractCallWithToken contract_call_with_token = 7;
 * @return {?proto.axelar.evm.v1beta1.EventContractCallWithToken}
 */
proto.axelar.evm.v1beta1.Event.prototype.getContractCallWithToken = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventContractCallWithToken} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventContractCallWithToken, 7));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventContractCallWithToken|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setContractCallWithToken = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearContractCallWithToken = function() {
  return this.setContractCallWithToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasContractCallWithToken = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EventTransfer transfer = 8;
 * @return {?proto.axelar.evm.v1beta1.EventTransfer}
 */
proto.axelar.evm.v1beta1.Event.prototype.getTransfer = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventTransfer} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventTransfer, 8));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventTransfer|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EventTokenDeployed token_deployed = 9;
 * @return {?proto.axelar.evm.v1beta1.EventTokenDeployed}
 */
proto.axelar.evm.v1beta1.Event.prototype.getTokenDeployed = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventTokenDeployed} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventTokenDeployed, 9));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventTokenDeployed|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setTokenDeployed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearTokenDeployed = function() {
  return this.setTokenDeployed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasTokenDeployed = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional EventMultisigOwnershipTransferred multisig_ownership_transferred = 10;
 * @return {?proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred}
 */
proto.axelar.evm.v1beta1.Event.prototype.getMultisigOwnershipTransferred = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred, 10));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventMultisigOwnershipTransferred|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setMultisigOwnershipTransferred = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearMultisigOwnershipTransferred = function() {
  return this.setMultisigOwnershipTransferred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasMultisigOwnershipTransferred = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional EventMultisigOperatorshipTransferred multisig_operatorship_transferred = 11;
 * @return {?proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred}
 */
proto.axelar.evm.v1beta1.Event.prototype.getMultisigOperatorshipTransferred = function() {
  return /** @type{?proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred} */ (
    jspb.Message.getWrapperField(this, proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred, 11));
};


/**
 * @param {?proto.axelar.evm.v1beta1.EventMultisigOperatorshipTransferred|undefined} value
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
*/
proto.axelar.evm.v1beta1.Event.prototype.setMultisigOperatorshipTransferred = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.axelar.evm.v1beta1.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.evm.v1beta1.Event} returns this
 */
proto.axelar.evm.v1beta1.Event.prototype.clearMultisigOperatorshipTransferred = function() {
  return this.setMultisigOperatorshipTransferred(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.evm.v1beta1.Event.prototype.hasMultisigOperatorshipTransferred = function() {
  return jspb.Message.getField(this, 11) != null;
};


