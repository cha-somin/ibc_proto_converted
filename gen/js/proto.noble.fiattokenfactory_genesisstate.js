// source: noble/fiattokenfactory/genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.noble.fiattokenfactory.GenesisState');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.noble.fiattokenfactory.Blacklisted');
goog.require('proto.noble.fiattokenfactory.Blacklister');
goog.require('proto.noble.fiattokenfactory.MasterMinter');
goog.require('proto.noble.fiattokenfactory.MinterController');
goog.require('proto.noble.fiattokenfactory.Minters');
goog.require('proto.noble.fiattokenfactory.MintingDenom');
goog.require('proto.noble.fiattokenfactory.Owner');
goog.require('proto.noble.fiattokenfactory.Params');
goog.require('proto.noble.fiattokenfactory.Paused');
goog.require('proto.noble.fiattokenfactory.Pauser');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.noble.fiattokenfactory.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.noble.fiattokenfactory.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.noble.fiattokenfactory.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.noble.fiattokenfactory.GenesisState.displayName = 'proto.noble.fiattokenfactory.GenesisState';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.noble.fiattokenfactory.GenesisState.repeatedFields_ = [2,5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.noble.fiattokenfactory.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.noble.fiattokenfactory.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.noble.fiattokenfactory.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.noble.fiattokenfactory.Params.toObject(includeInstance, f),
    blacklistedlistList: jspb.Message.toObjectList(msg.getBlacklistedlistList(),
    proto.noble.fiattokenfactory.Blacklisted.toObject, includeInstance),
    paused: (f = msg.getPaused()) && proto.noble.fiattokenfactory.Paused.toObject(includeInstance, f),
    masterminter: (f = msg.getMasterminter()) && proto.noble.fiattokenfactory.MasterMinter.toObject(includeInstance, f),
    minterslistList: jspb.Message.toObjectList(msg.getMinterslistList(),
    proto.noble.fiattokenfactory.Minters.toObject, includeInstance),
    pauser: (f = msg.getPauser()) && proto.noble.fiattokenfactory.Pauser.toObject(includeInstance, f),
    blacklister: (f = msg.getBlacklister()) && proto.noble.fiattokenfactory.Blacklister.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && proto.noble.fiattokenfactory.Owner.toObject(includeInstance, f),
    mintercontrollerlistList: jspb.Message.toObjectList(msg.getMintercontrollerlistList(),
    proto.noble.fiattokenfactory.MinterController.toObject, includeInstance),
    mintingdenom: (f = msg.getMintingdenom()) && proto.noble.fiattokenfactory.MintingDenom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.noble.fiattokenfactory.GenesisState}
 */
proto.noble.fiattokenfactory.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.noble.fiattokenfactory.GenesisState;
  return proto.noble.fiattokenfactory.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.noble.fiattokenfactory.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.noble.fiattokenfactory.GenesisState}
 */
proto.noble.fiattokenfactory.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.noble.fiattokenfactory.Params;
      reader.readMessage(value,proto.noble.fiattokenfactory.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 2:
      var value = new proto.noble.fiattokenfactory.Blacklisted;
      reader.readMessage(value,proto.noble.fiattokenfactory.Blacklisted.deserializeBinaryFromReader);
      msg.addBlacklistedlist(value);
      break;
    case 3:
      var value = new proto.noble.fiattokenfactory.Paused;
      reader.readMessage(value,proto.noble.fiattokenfactory.Paused.deserializeBinaryFromReader);
      msg.setPaused(value);
      break;
    case 4:
      var value = new proto.noble.fiattokenfactory.MasterMinter;
      reader.readMessage(value,proto.noble.fiattokenfactory.MasterMinter.deserializeBinaryFromReader);
      msg.setMasterminter(value);
      break;
    case 5:
      var value = new proto.noble.fiattokenfactory.Minters;
      reader.readMessage(value,proto.noble.fiattokenfactory.Minters.deserializeBinaryFromReader);
      msg.addMinterslist(value);
      break;
    case 6:
      var value = new proto.noble.fiattokenfactory.Pauser;
      reader.readMessage(value,proto.noble.fiattokenfactory.Pauser.deserializeBinaryFromReader);
      msg.setPauser(value);
      break;
    case 7:
      var value = new proto.noble.fiattokenfactory.Blacklister;
      reader.readMessage(value,proto.noble.fiattokenfactory.Blacklister.deserializeBinaryFromReader);
      msg.setBlacklister(value);
      break;
    case 8:
      var value = new proto.noble.fiattokenfactory.Owner;
      reader.readMessage(value,proto.noble.fiattokenfactory.Owner.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 9:
      var value = new proto.noble.fiattokenfactory.MinterController;
      reader.readMessage(value,proto.noble.fiattokenfactory.MinterController.deserializeBinaryFromReader);
      msg.addMintercontrollerlist(value);
      break;
    case 10:
      var value = new proto.noble.fiattokenfactory.MintingDenom;
      reader.readMessage(value,proto.noble.fiattokenfactory.MintingDenom.deserializeBinaryFromReader);
      msg.setMintingdenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.noble.fiattokenfactory.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.noble.fiattokenfactory.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.noble.fiattokenfactory.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.noble.fiattokenfactory.Params.serializeBinaryToWriter
    );
  }
  f = message.getBlacklistedlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.noble.fiattokenfactory.Blacklisted.serializeBinaryToWriter
    );
  }
  f = message.getPaused();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.noble.fiattokenfactory.Paused.serializeBinaryToWriter
    );
  }
  f = message.getMasterminter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.noble.fiattokenfactory.MasterMinter.serializeBinaryToWriter
    );
  }
  f = message.getMinterslistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.noble.fiattokenfactory.Minters.serializeBinaryToWriter
    );
  }
  f = message.getPauser();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.noble.fiattokenfactory.Pauser.serializeBinaryToWriter
    );
  }
  f = message.getBlacklister();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.noble.fiattokenfactory.Blacklister.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.noble.fiattokenfactory.Owner.serializeBinaryToWriter
    );
  }
  f = message.getMintercontrollerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.noble.fiattokenfactory.MinterController.serializeBinaryToWriter
    );
  }
  f = message.getMintingdenom();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.noble.fiattokenfactory.MintingDenom.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.noble.fiattokenfactory.Params}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getParams = function() {
  return /** @type{?proto.noble.fiattokenfactory.Params} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.Params, 1));
};


/**
 * @param {?proto.noble.fiattokenfactory.Params|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Blacklisted blacklistedList = 2;
 * @return {!Array<!proto.noble.fiattokenfactory.Blacklisted>}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getBlacklistedlistList = function() {
  return /** @type{!Array<!proto.noble.fiattokenfactory.Blacklisted>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.noble.fiattokenfactory.Blacklisted, 2));
};


/**
 * @param {!Array<!proto.noble.fiattokenfactory.Blacklisted>} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setBlacklistedlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.noble.fiattokenfactory.Blacklisted=} opt_value
 * @param {number=} opt_index
 * @return {!proto.noble.fiattokenfactory.Blacklisted}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.addBlacklistedlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.noble.fiattokenfactory.Blacklisted, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearBlacklistedlistList = function() {
  return this.setBlacklistedlistList([]);
};


/**
 * optional Paused paused = 3;
 * @return {?proto.noble.fiattokenfactory.Paused}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getPaused = function() {
  return /** @type{?proto.noble.fiattokenfactory.Paused} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.Paused, 3));
};


/**
 * @param {?proto.noble.fiattokenfactory.Paused|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setPaused = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearPaused = function() {
  return this.setPaused(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasPaused = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MasterMinter masterMinter = 4;
 * @return {?proto.noble.fiattokenfactory.MasterMinter}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getMasterminter = function() {
  return /** @type{?proto.noble.fiattokenfactory.MasterMinter} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.MasterMinter, 4));
};


/**
 * @param {?proto.noble.fiattokenfactory.MasterMinter|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setMasterminter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearMasterminter = function() {
  return this.setMasterminter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasMasterminter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Minters mintersList = 5;
 * @return {!Array<!proto.noble.fiattokenfactory.Minters>}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getMinterslistList = function() {
  return /** @type{!Array<!proto.noble.fiattokenfactory.Minters>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.noble.fiattokenfactory.Minters, 5));
};


/**
 * @param {!Array<!proto.noble.fiattokenfactory.Minters>} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setMinterslistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.noble.fiattokenfactory.Minters=} opt_value
 * @param {number=} opt_index
 * @return {!proto.noble.fiattokenfactory.Minters}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.addMinterslist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.noble.fiattokenfactory.Minters, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearMinterslistList = function() {
  return this.setMinterslistList([]);
};


/**
 * optional Pauser pauser = 6;
 * @return {?proto.noble.fiattokenfactory.Pauser}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getPauser = function() {
  return /** @type{?proto.noble.fiattokenfactory.Pauser} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.Pauser, 6));
};


/**
 * @param {?proto.noble.fiattokenfactory.Pauser|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setPauser = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearPauser = function() {
  return this.setPauser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasPauser = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Blacklister blacklister = 7;
 * @return {?proto.noble.fiattokenfactory.Blacklister}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getBlacklister = function() {
  return /** @type{?proto.noble.fiattokenfactory.Blacklister} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.Blacklister, 7));
};


/**
 * @param {?proto.noble.fiattokenfactory.Blacklister|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setBlacklister = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearBlacklister = function() {
  return this.setBlacklister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasBlacklister = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Owner owner = 8;
 * @return {?proto.noble.fiattokenfactory.Owner}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getOwner = function() {
  return /** @type{?proto.noble.fiattokenfactory.Owner} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.Owner, 8));
};


/**
 * @param {?proto.noble.fiattokenfactory.Owner|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated MinterController minterControllerList = 9;
 * @return {!Array<!proto.noble.fiattokenfactory.MinterController>}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getMintercontrollerlistList = function() {
  return /** @type{!Array<!proto.noble.fiattokenfactory.MinterController>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.noble.fiattokenfactory.MinterController, 9));
};


/**
 * @param {!Array<!proto.noble.fiattokenfactory.MinterController>} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setMintercontrollerlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.noble.fiattokenfactory.MinterController=} opt_value
 * @param {number=} opt_index
 * @return {!proto.noble.fiattokenfactory.MinterController}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.addMintercontrollerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.noble.fiattokenfactory.MinterController, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearMintercontrollerlistList = function() {
  return this.setMintercontrollerlistList([]);
};


/**
 * optional MintingDenom mintingDenom = 10;
 * @return {?proto.noble.fiattokenfactory.MintingDenom}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.getMintingdenom = function() {
  return /** @type{?proto.noble.fiattokenfactory.MintingDenom} */ (
    jspb.Message.getWrapperField(this, proto.noble.fiattokenfactory.MintingDenom, 10));
};


/**
 * @param {?proto.noble.fiattokenfactory.MintingDenom|undefined} value
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
*/
proto.noble.fiattokenfactory.GenesisState.prototype.setMintingdenom = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.noble.fiattokenfactory.GenesisState} returns this
 */
proto.noble.fiattokenfactory.GenesisState.prototype.clearMintingdenom = function() {
  return this.setMintingdenom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.noble.fiattokenfactory.GenesisState.prototype.hasMintingdenom = function() {
  return jspb.Message.getField(this, 10) != null;
};


