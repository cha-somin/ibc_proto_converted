// source: injective/peggy/v1/params.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.injective.peggy.v1.Params');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cosmos.base.v1beta1.Coin');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.peggy.v1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.peggy.v1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.peggy.v1.Params.displayName = 'proto.injective.peggy.v1.Params';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.peggy.v1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.peggy.v1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.peggy.v1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    peggyId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractSourceHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bridgeEthereumAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bridgeChainId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signedValsetsWindow: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signedBatchesWindow: jspb.Message.getFieldWithDefault(msg, 6, 0),
    signedClaimsWindow: jspb.Message.getFieldWithDefault(msg, 7, 0),
    targetBatchTimeout: jspb.Message.getFieldWithDefault(msg, 8, 0),
    averageBlockTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    averageEthereumBlockTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    slashFractionValset: msg.getSlashFractionValset_asB64(),
    slashFractionBatch: msg.getSlashFractionBatch_asB64(),
    slashFractionClaim: msg.getSlashFractionClaim_asB64(),
    slashFractionConflictingClaim: msg.getSlashFractionConflictingClaim_asB64(),
    unbondSlashingValsetsWindow: jspb.Message.getFieldWithDefault(msg, 15, 0),
    slashFractionBadEthSignature: msg.getSlashFractionBadEthSignature_asB64(),
    cosmosCoinDenom: jspb.Message.getFieldWithDefault(msg, 17, ""),
    cosmosCoinErc20Contract: jspb.Message.getFieldWithDefault(msg, 18, ""),
    claimSlashingEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    bridgeContractStartHeight: jspb.Message.getFieldWithDefault(msg, 20, 0),
    valsetReward: (f = msg.getValsetReward()) && proto.cosmos.base.v1beta1.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.peggy.v1.Params}
 */
proto.injective.peggy.v1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.peggy.v1.Params;
  return proto.injective.peggy.v1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.peggy.v1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.peggy.v1.Params}
 */
proto.injective.peggy.v1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeggyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractSourceHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridgeEthereumAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeChainId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSignedValsetsWindow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSignedBatchesWindow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSignedClaimsWindow(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTargetBatchTimeout(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAverageBlockTime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAverageEthereumBlockTime(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlashFractionValset(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlashFractionBatch(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlashFractionClaim(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlashFractionConflictingClaim(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnbondSlashingValsetsWindow(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlashFractionBadEthSignature(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCosmosCoinDenom(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCosmosCoinErc20Contract(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClaimSlashingEnabled(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBridgeContractStartHeight(value);
      break;
    case 21:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.setValsetReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.peggy.v1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.peggy.v1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.peggy.v1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeggyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractSourceHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBridgeEthereumAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBridgeChainId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSignedValsetsWindow();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSignedBatchesWindow();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSignedClaimsWindow();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTargetBatchTimeout();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getAverageBlockTime();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getAverageEthereumBlockTime();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getSlashFractionValset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getSlashFractionBatch_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getSlashFractionClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getSlashFractionConflictingClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getUnbondSlashingValsetsWindow();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getSlashFractionBadEthSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getCosmosCoinDenom();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCosmosCoinErc20Contract();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getClaimSlashingEnabled();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getBridgeContractStartHeight();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getValsetReward();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string peggy_id = 1;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getPeggyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setPeggyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract_source_hash = 2;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getContractSourceHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setContractSourceHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bridge_ethereum_address = 3;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getBridgeEthereumAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setBridgeEthereumAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 bridge_chain_id = 4;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getBridgeChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setBridgeChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 signed_valsets_window = 5;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getSignedValsetsWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSignedValsetsWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 signed_batches_window = 6;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getSignedBatchesWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSignedBatchesWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 signed_claims_window = 7;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getSignedClaimsWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSignedClaimsWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 target_batch_timeout = 8;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getTargetBatchTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setTargetBatchTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 average_block_time = 9;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getAverageBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setAverageBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 average_ethereum_block_time = 10;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getAverageEthereumBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setAverageEthereumBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes slash_fraction_valset = 11;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionValset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes slash_fraction_valset = 11;
 * This is a type-conversion wrapper around `getSlashFractionValset()`
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionValset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlashFractionValset()));
};


/**
 * optional bytes slash_fraction_valset = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashFractionValset()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionValset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlashFractionValset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSlashFractionValset = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes slash_fraction_batch = 12;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionBatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes slash_fraction_batch = 12;
 * This is a type-conversion wrapper around `getSlashFractionBatch()`
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionBatch_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlashFractionBatch()));
};


/**
 * optional bytes slash_fraction_batch = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashFractionBatch()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionBatch_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlashFractionBatch()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSlashFractionBatch = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes slash_fraction_claim = 13;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionClaim = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes slash_fraction_claim = 13;
 * This is a type-conversion wrapper around `getSlashFractionClaim()`
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlashFractionClaim()));
};


/**
 * optional bytes slash_fraction_claim = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashFractionClaim()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlashFractionClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSlashFractionClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes slash_fraction_conflicting_claim = 14;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionConflictingClaim = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes slash_fraction_conflicting_claim = 14;
 * This is a type-conversion wrapper around `getSlashFractionConflictingClaim()`
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionConflictingClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlashFractionConflictingClaim()));
};


/**
 * optional bytes slash_fraction_conflicting_claim = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashFractionConflictingClaim()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionConflictingClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlashFractionConflictingClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSlashFractionConflictingClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional uint64 unbond_slashing_valsets_window = 15;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getUnbondSlashingValsetsWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setUnbondSlashingValsetsWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bytes slash_fraction_bad_eth_signature = 16;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionBadEthSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes slash_fraction_bad_eth_signature = 16;
 * This is a type-conversion wrapper around `getSlashFractionBadEthSignature()`
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionBadEthSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlashFractionBadEthSignature()));
};


/**
 * optional bytes slash_fraction_bad_eth_signature = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlashFractionBadEthSignature()`
 * @return {!Uint8Array}
 */
proto.injective.peggy.v1.Params.prototype.getSlashFractionBadEthSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlashFractionBadEthSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setSlashFractionBadEthSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional string cosmos_coin_denom = 17;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getCosmosCoinDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setCosmosCoinDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string cosmos_coin_erc20_contract = 18;
 * @return {string}
 */
proto.injective.peggy.v1.Params.prototype.getCosmosCoinErc20Contract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setCosmosCoinErc20Contract = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool claim_slashing_enabled = 19;
 * @return {boolean}
 */
proto.injective.peggy.v1.Params.prototype.getClaimSlashingEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setClaimSlashingEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional uint64 bridge_contract_start_height = 20;
 * @return {number}
 */
proto.injective.peggy.v1.Params.prototype.getBridgeContractStartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.setBridgeContractStartHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional cosmos.base.v1beta1.Coin valset_reward = 21;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.peggy.v1.Params.prototype.getValsetReward = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.v1beta1.Coin, 21));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.peggy.v1.Params} returns this
*/
proto.injective.peggy.v1.Params.prototype.setValsetReward = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.peggy.v1.Params} returns this
 */
proto.injective.peggy.v1.Params.prototype.clearValsetReward = function() {
  return this.setValsetReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.peggy.v1.Params.prototype.hasValsetReward = function() {
  return jspb.Message.getField(this, 21) != null;
};


