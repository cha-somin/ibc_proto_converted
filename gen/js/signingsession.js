// source: axelar/multisig/v1beta1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.axelar.multisig.v1beta1.SigningSession');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.axelar.multisig.v1beta1.Key');
goog.require('proto.axelar.multisig.v1beta1.MultiSig');
goog.require('proto.google.protobuf.Any');

goog.forwardDeclare('proto.axelar.multisig.exported.v1beta1.MultisigState');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.multisig.v1beta1.SigningSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.axelar.multisig.v1beta1.SigningSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.multisig.v1beta1.SigningSession.displayName = 'proto.axelar.multisig.v1beta1.SigningSession';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.multisig.v1beta1.SigningSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.multisig.v1beta1.SigningSession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.multisig.v1beta1.SigningSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    multiSig: (f = msg.getMultiSig()) && proto.axelar.multisig.v1beta1.MultiSig.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    key: (f = msg.getKey()) && proto.axelar.multisig.v1beta1.Key.toObject(includeInstance, f),
    expiresAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    completedAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    gracePeriod: jspb.Message.getFieldWithDefault(msg, 7, 0),
    module: jspb.Message.getFieldWithDefault(msg, 8, ""),
    moduleMetadata: (f = msg.getModuleMetadata()) && proto.google.protobuf.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.multisig.v1beta1.SigningSession}
 */
proto.axelar.multisig.v1beta1.SigningSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.multisig.v1beta1.SigningSession;
  return proto.axelar.multisig.v1beta1.SigningSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.multisig.v1beta1.SigningSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.multisig.v1beta1.SigningSession}
 */
proto.axelar.multisig.v1beta1.SigningSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.axelar.multisig.v1beta1.MultiSig;
      reader.readMessage(value,proto.axelar.multisig.v1beta1.MultiSig.deserializeBinaryFromReader);
      msg.setMultiSig(value);
      break;
    case 3:
      var value = /** @type {!proto.axelar.multisig.exported.v1beta1.MultisigState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = new proto.axelar.multisig.v1beta1.Key;
      reader.readMessage(value,proto.axelar.multisig.v1beta1.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiresAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompletedAt(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGracePeriod(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 9:
      var value = new proto.google.protobuf.Any;
      reader.readMessage(value,proto.google.protobuf.Any.deserializeBinaryFromReader);
      msg.setModuleMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.multisig.v1beta1.SigningSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.multisig.v1beta1.SigningSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.multisig.v1beta1.SigningSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMultiSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.axelar.multisig.v1beta1.MultiSig.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.axelar.multisig.v1beta1.Key.serializeBinaryToWriter
    );
  }
  f = message.getExpiresAt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCompletedAt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getGracePeriod();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getModuleMetadata();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.google.protobuf.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MultiSig multi_sig = 2;
 * @return {?proto.axelar.multisig.v1beta1.MultiSig}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getMultiSig = function() {
  return /** @type{?proto.axelar.multisig.v1beta1.MultiSig} */ (
    jspb.Message.getWrapperField(this, proto.axelar.multisig.v1beta1.MultiSig, 2));
};


/**
 * @param {?proto.axelar.multisig.v1beta1.MultiSig|undefined} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
*/
proto.axelar.multisig.v1beta1.SigningSession.prototype.setMultiSig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.clearMultiSig = function() {
  return this.setMultiSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.hasMultiSig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional axelar.multisig.exported.v1beta1.MultisigState state = 3;
 * @return {!proto.axelar.multisig.exported.v1beta1.MultisigState}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getState = function() {
  return /** @type {!proto.axelar.multisig.exported.v1beta1.MultisigState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.axelar.multisig.exported.v1beta1.MultisigState} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Key key = 4;
 * @return {?proto.axelar.multisig.v1beta1.Key}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getKey = function() {
  return /** @type{?proto.axelar.multisig.v1beta1.Key} */ (
    jspb.Message.getWrapperField(this, proto.axelar.multisig.v1beta1.Key, 4));
};


/**
 * @param {?proto.axelar.multisig.v1beta1.Key|undefined} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
*/
proto.axelar.multisig.v1beta1.SigningSession.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.hasKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 expires_at = 5;
 * @return {number}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getExpiresAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.setExpiresAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 completed_at = 6;
 * @return {number}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getCompletedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.setCompletedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 grace_period = 7;
 * @return {number}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getGracePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.setGracePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string module = 8;
 * @return {string}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.setModule = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Any module_metadata = 9;
 * @return {?proto.google.protobuf.Any}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.getModuleMetadata = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Any, 9));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
*/
proto.axelar.multisig.v1beta1.SigningSession.prototype.setModuleMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.axelar.multisig.v1beta1.SigningSession} returns this
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.clearModuleMetadata = function() {
  return this.setModuleMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.axelar.multisig.v1beta1.SigningSession.prototype.hasModuleMetadata = function() {
  return jspb.Message.getField(this, 9) != null;
};


