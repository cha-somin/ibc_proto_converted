// source: assetmantle/ids/base/any_id.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.assetmantle.schema.ids.base.AnyID');
goog.provide('proto.assetmantle.schema.ids.base.AnyID.ImplCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.assetmantle.schema.ids.base.AnyOwnableID');
goog.require('proto.assetmantle.schema.ids.base.AssetID');
goog.require('proto.assetmantle.schema.ids.base.ClassificationID');
goog.require('proto.assetmantle.schema.ids.base.CoinID');
goog.require('proto.assetmantle.schema.ids.base.DataID');
goog.require('proto.assetmantle.schema.ids.base.HashID');
goog.require('proto.assetmantle.schema.ids.base.IdentityID');
goog.require('proto.assetmantle.schema.ids.base.MaintainerID');
goog.require('proto.assetmantle.schema.ids.base.OrderID');
goog.require('proto.assetmantle.schema.ids.base.PropertyID');
goog.require('proto.assetmantle.schema.ids.base.SplitID');
goog.require('proto.assetmantle.schema.ids.base.StringID');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assetmantle.schema.ids.base.AnyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_);
};
goog.inherits(proto.assetmantle.schema.ids.base.AnyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.assetmantle.schema.ids.base.AnyID.displayName = 'proto.assetmantle.schema.ids.base.AnyID';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.assetmantle.schema.ids.base.AnyID.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.assetmantle.schema.ids.base.AnyID.ImplCase = {
  IMPL_NOT_SET: 0,
  ASSET_I_D: 1,
  CLASSIFICATION_I_D: 2,
  COIN_I_D: 3,
  DATA_I_D: 4,
  HASH_I_D: 5,
  IDENTITY_I_D: 6,
  MAINTAINER_I_D: 7,
  ORDER_I_D: 8,
  OWNABLE_I_D: 9,
  PROPERTY_I_D: 10,
  SPLIT_I_D: 11,
  STRING_I_D: 12
};

/**
 * @return {proto.assetmantle.schema.ids.base.AnyID.ImplCase}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getImplCase = function() {
  return /** @type {proto.assetmantle.schema.ids.base.AnyID.ImplCase} */(jspb.Message.computeOneofCase(this, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.toObject = function(opt_includeInstance) {
  return proto.assetmantle.schema.ids.base.AnyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assetmantle.schema.ids.base.AnyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assetmantle.schema.ids.base.AnyID.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetID: (f = msg.getAssetID()) && proto.assetmantle.schema.ids.base.AssetID.toObject(includeInstance, f),
    classificationID: (f = msg.getClassificationID()) && proto.assetmantle.schema.ids.base.ClassificationID.toObject(includeInstance, f),
    coinID: (f = msg.getCoinID()) && proto.assetmantle.schema.ids.base.CoinID.toObject(includeInstance, f),
    dataID: (f = msg.getDataID()) && proto.assetmantle.schema.ids.base.DataID.toObject(includeInstance, f),
    hashID: (f = msg.getHashID()) && proto.assetmantle.schema.ids.base.HashID.toObject(includeInstance, f),
    identityID: (f = msg.getIdentityID()) && proto.assetmantle.schema.ids.base.IdentityID.toObject(includeInstance, f),
    maintainerID: (f = msg.getMaintainerID()) && proto.assetmantle.schema.ids.base.MaintainerID.toObject(includeInstance, f),
    orderID: (f = msg.getOrderID()) && proto.assetmantle.schema.ids.base.OrderID.toObject(includeInstance, f),
    ownableID: (f = msg.getOwnableID()) && proto.assetmantle.schema.ids.base.AnyOwnableID.toObject(includeInstance, f),
    propertyID: (f = msg.getPropertyID()) && proto.assetmantle.schema.ids.base.PropertyID.toObject(includeInstance, f),
    splitID: (f = msg.getSplitID()) && proto.assetmantle.schema.ids.base.SplitID.toObject(includeInstance, f),
    stringID: (f = msg.getStringID()) && proto.assetmantle.schema.ids.base.StringID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assetmantle.schema.ids.base.AnyID}
 */
proto.assetmantle.schema.ids.base.AnyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assetmantle.schema.ids.base.AnyID;
  return proto.assetmantle.schema.ids.base.AnyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assetmantle.schema.ids.base.AnyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assetmantle.schema.ids.base.AnyID}
 */
proto.assetmantle.schema.ids.base.AnyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assetmantle.schema.ids.base.AssetID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.AssetID.deserializeBinaryFromReader);
      msg.setAssetID(value);
      break;
    case 2:
      var value = new proto.assetmantle.schema.ids.base.ClassificationID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.ClassificationID.deserializeBinaryFromReader);
      msg.setClassificationID(value);
      break;
    case 3:
      var value = new proto.assetmantle.schema.ids.base.CoinID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.CoinID.deserializeBinaryFromReader);
      msg.setCoinID(value);
      break;
    case 4:
      var value = new proto.assetmantle.schema.ids.base.DataID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.DataID.deserializeBinaryFromReader);
      msg.setDataID(value);
      break;
    case 5:
      var value = new proto.assetmantle.schema.ids.base.HashID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.HashID.deserializeBinaryFromReader);
      msg.setHashID(value);
      break;
    case 6:
      var value = new proto.assetmantle.schema.ids.base.IdentityID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.IdentityID.deserializeBinaryFromReader);
      msg.setIdentityID(value);
      break;
    case 7:
      var value = new proto.assetmantle.schema.ids.base.MaintainerID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.MaintainerID.deserializeBinaryFromReader);
      msg.setMaintainerID(value);
      break;
    case 8:
      var value = new proto.assetmantle.schema.ids.base.OrderID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.OrderID.deserializeBinaryFromReader);
      msg.setOrderID(value);
      break;
    case 9:
      var value = new proto.assetmantle.schema.ids.base.AnyOwnableID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.AnyOwnableID.deserializeBinaryFromReader);
      msg.setOwnableID(value);
      break;
    case 10:
      var value = new proto.assetmantle.schema.ids.base.PropertyID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.PropertyID.deserializeBinaryFromReader);
      msg.setPropertyID(value);
      break;
    case 11:
      var value = new proto.assetmantle.schema.ids.base.SplitID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.SplitID.deserializeBinaryFromReader);
      msg.setSplitID(value);
      break;
    case 12:
      var value = new proto.assetmantle.schema.ids.base.StringID;
      reader.readMessage(value,proto.assetmantle.schema.ids.base.StringID.deserializeBinaryFromReader);
      msg.setStringID(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assetmantle.schema.ids.base.AnyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assetmantle.schema.ids.base.AnyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assetmantle.schema.ids.base.AnyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetID();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assetmantle.schema.ids.base.AssetID.serializeBinaryToWriter
    );
  }
  f = message.getClassificationID();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assetmantle.schema.ids.base.ClassificationID.serializeBinaryToWriter
    );
  }
  f = message.getCoinID();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.assetmantle.schema.ids.base.CoinID.serializeBinaryToWriter
    );
  }
  f = message.getDataID();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.assetmantle.schema.ids.base.DataID.serializeBinaryToWriter
    );
  }
  f = message.getHashID();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.assetmantle.schema.ids.base.HashID.serializeBinaryToWriter
    );
  }
  f = message.getIdentityID();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.assetmantle.schema.ids.base.IdentityID.serializeBinaryToWriter
    );
  }
  f = message.getMaintainerID();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.assetmantle.schema.ids.base.MaintainerID.serializeBinaryToWriter
    );
  }
  f = message.getOrderID();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.assetmantle.schema.ids.base.OrderID.serializeBinaryToWriter
    );
  }
  f = message.getOwnableID();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.assetmantle.schema.ids.base.AnyOwnableID.serializeBinaryToWriter
    );
  }
  f = message.getPropertyID();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.assetmantle.schema.ids.base.PropertyID.serializeBinaryToWriter
    );
  }
  f = message.getSplitID();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.assetmantle.schema.ids.base.SplitID.serializeBinaryToWriter
    );
  }
  f = message.getStringID();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.assetmantle.schema.ids.base.StringID.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetID asset_i_d = 1;
 * @return {?proto.assetmantle.schema.ids.base.AssetID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getAssetID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.AssetID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.AssetID, 1));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.AssetID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setAssetID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearAssetID = function() {
  return this.setAssetID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasAssetID = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClassificationID classification_i_d = 2;
 * @return {?proto.assetmantle.schema.ids.base.ClassificationID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getClassificationID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.ClassificationID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.ClassificationID, 2));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.ClassificationID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setClassificationID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearClassificationID = function() {
  return this.setClassificationID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasClassificationID = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CoinID coin_i_d = 3;
 * @return {?proto.assetmantle.schema.ids.base.CoinID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getCoinID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.CoinID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.CoinID, 3));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.CoinID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setCoinID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearCoinID = function() {
  return this.setCoinID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasCoinID = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataID data_i_d = 4;
 * @return {?proto.assetmantle.schema.ids.base.DataID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getDataID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.DataID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.DataID, 4));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.DataID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setDataID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearDataID = function() {
  return this.setDataID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasDataID = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HashID hash_i_d = 5;
 * @return {?proto.assetmantle.schema.ids.base.HashID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getHashID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.HashID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.HashID, 5));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.HashID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setHashID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearHashID = function() {
  return this.setHashID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasHashID = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IdentityID identity_i_d = 6;
 * @return {?proto.assetmantle.schema.ids.base.IdentityID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getIdentityID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.IdentityID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.IdentityID, 6));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.IdentityID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setIdentityID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearIdentityID = function() {
  return this.setIdentityID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasIdentityID = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MaintainerID maintainer_i_d = 7;
 * @return {?proto.assetmantle.schema.ids.base.MaintainerID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getMaintainerID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.MaintainerID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.MaintainerID, 7));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.MaintainerID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setMaintainerID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearMaintainerID = function() {
  return this.setMaintainerID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasMaintainerID = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OrderID order_i_d = 8;
 * @return {?proto.assetmantle.schema.ids.base.OrderID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getOrderID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.OrderID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.OrderID, 8));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.OrderID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setOrderID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearOrderID = function() {
  return this.setOrderID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasOrderID = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AnyOwnableID ownable_i_d = 9;
 * @return {?proto.assetmantle.schema.ids.base.AnyOwnableID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getOwnableID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.AnyOwnableID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.AnyOwnableID, 9));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.AnyOwnableID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setOwnableID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearOwnableID = function() {
  return this.setOwnableID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasOwnableID = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PropertyID property_i_d = 10;
 * @return {?proto.assetmantle.schema.ids.base.PropertyID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getPropertyID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.PropertyID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.PropertyID, 10));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.PropertyID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setPropertyID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearPropertyID = function() {
  return this.setPropertyID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasPropertyID = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SplitID split_i_d = 11;
 * @return {?proto.assetmantle.schema.ids.base.SplitID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getSplitID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.SplitID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.SplitID, 11));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.SplitID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setSplitID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearSplitID = function() {
  return this.setSplitID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasSplitID = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional StringID string_i_d = 12;
 * @return {?proto.assetmantle.schema.ids.base.StringID}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.getStringID = function() {
  return /** @type{?proto.assetmantle.schema.ids.base.StringID} */ (
    jspb.Message.getWrapperField(this, proto.assetmantle.schema.ids.base.StringID, 12));
};


/**
 * @param {?proto.assetmantle.schema.ids.base.StringID|undefined} value
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
*/
proto.assetmantle.schema.ids.base.AnyID.prototype.setStringID = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.assetmantle.schema.ids.base.AnyID.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.assetmantle.schema.ids.base.AnyID} returns this
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.clearStringID = function() {
  return this.setStringID(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assetmantle.schema.ids.base.AnyID.prototype.hasStringID = function() {
  return jspb.Message.getField(this, 12) != null;
};


