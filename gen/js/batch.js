// source: ixo/bonds/v1beta1/bonds.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ixo.bonds.v1beta1.Batch');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cosmos.base.v1beta1.Coin');
goog.require('proto.cosmos.base.v1beta1.DecCoin');
goog.require('proto.ixo.bonds.v1beta1.BuyOrder');
goog.require('proto.ixo.bonds.v1beta1.SellOrder');
goog.require('proto.ixo.bonds.v1beta1.SwapOrder');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ixo.bonds.v1beta1.Batch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ixo.bonds.v1beta1.Batch.repeatedFields_, null);
};
goog.inherits(proto.ixo.bonds.v1beta1.Batch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ixo.bonds.v1beta1.Batch.displayName = 'proto.ixo.bonds.v1beta1.Batch';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ixo.bonds.v1beta1.Batch.repeatedFields_ = [6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.toObject = function(opt_includeInstance) {
  return proto.ixo.bonds.v1beta1.Batch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ixo.bonds.v1beta1.Batch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ixo.bonds.v1beta1.Batch.toObject = function(includeInstance, msg) {
  var f, obj = {
    bondDid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blocksRemaining: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nextPublicAlpha: jspb.Message.getFieldWithDefault(msg, 3, ""),
    totalBuyAmount: (f = msg.getTotalBuyAmount()) && proto.cosmos.base.v1beta1.Coin.toObject(includeInstance, f),
    totalSellAmount: (f = msg.getTotalSellAmount()) && proto.cosmos.base.v1beta1.Coin.toObject(includeInstance, f),
    buyPricesList: jspb.Message.toObjectList(msg.getBuyPricesList(),
    proto.cosmos.base.v1beta1.DecCoin.toObject, includeInstance),
    sellPricesList: jspb.Message.toObjectList(msg.getSellPricesList(),
    proto.cosmos.base.v1beta1.DecCoin.toObject, includeInstance),
    buysList: jspb.Message.toObjectList(msg.getBuysList(),
    proto.ixo.bonds.v1beta1.BuyOrder.toObject, includeInstance),
    sellsList: jspb.Message.toObjectList(msg.getSellsList(),
    proto.ixo.bonds.v1beta1.SellOrder.toObject, includeInstance),
    swapsList: jspb.Message.toObjectList(msg.getSwapsList(),
    proto.ixo.bonds.v1beta1.SwapOrder.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ixo.bonds.v1beta1.Batch}
 */
proto.ixo.bonds.v1beta1.Batch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ixo.bonds.v1beta1.Batch;
  return proto.ixo.bonds.v1beta1.Batch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ixo.bonds.v1beta1.Batch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ixo.bonds.v1beta1.Batch}
 */
proto.ixo.bonds.v1beta1.Batch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBondDid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocksRemaining(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPublicAlpha(value);
      break;
    case 4:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.setTotalBuyAmount(value);
      break;
    case 5:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.setTotalSellAmount(value);
      break;
    case 6:
      var value = new proto.cosmos.base.v1beta1.DecCoin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.DecCoin.deserializeBinaryFromReader);
      msg.addBuyPrices(value);
      break;
    case 7:
      var value = new proto.cosmos.base.v1beta1.DecCoin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.DecCoin.deserializeBinaryFromReader);
      msg.addSellPrices(value);
      break;
    case 8:
      var value = new proto.ixo.bonds.v1beta1.BuyOrder;
      reader.readMessage(value,proto.ixo.bonds.v1beta1.BuyOrder.deserializeBinaryFromReader);
      msg.addBuys(value);
      break;
    case 9:
      var value = new proto.ixo.bonds.v1beta1.SellOrder;
      reader.readMessage(value,proto.ixo.bonds.v1beta1.SellOrder.deserializeBinaryFromReader);
      msg.addSells(value);
      break;
    case 10:
      var value = new proto.ixo.bonds.v1beta1.SwapOrder;
      reader.readMessage(value,proto.ixo.bonds.v1beta1.SwapOrder.deserializeBinaryFromReader);
      msg.addSwaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ixo.bonds.v1beta1.Batch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ixo.bonds.v1beta1.Batch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ixo.bonds.v1beta1.Batch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBondDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlocksRemaining();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNextPublicAlpha();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTotalBuyAmount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
  f = message.getTotalSellAmount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
  f = message.getBuyPricesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.cosmos.base.v1beta1.DecCoin.serializeBinaryToWriter
    );
  }
  f = message.getSellPricesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.cosmos.base.v1beta1.DecCoin.serializeBinaryToWriter
    );
  }
  f = message.getBuysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ixo.bonds.v1beta1.BuyOrder.serializeBinaryToWriter
    );
  }
  f = message.getSellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ixo.bonds.v1beta1.SellOrder.serializeBinaryToWriter
    );
  }
  f = message.getSwapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ixo.bonds.v1beta1.SwapOrder.serializeBinaryToWriter
    );
  }
};


/**
 * optional string bond_did = 1;
 * @return {string}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getBondDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.setBondDid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blocks_remaining = 2;
 * @return {string}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getBlocksRemaining = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.setBlocksRemaining = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string next_public_alpha = 3;
 * @return {string}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getNextPublicAlpha = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.setNextPublicAlpha = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional cosmos.base.v1beta1.Coin total_buy_amount = 4;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getTotalBuyAmount = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.v1beta1.Coin, 4));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setTotalBuyAmount = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearTotalBuyAmount = function() {
  return this.setTotalBuyAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.hasTotalBuyAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cosmos.base.v1beta1.Coin total_sell_amount = 5;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getTotalSellAmount = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.v1beta1.Coin, 5));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setTotalSellAmount = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearTotalSellAmount = function() {
  return this.setTotalSellAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.hasTotalSellAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated cosmos.base.v1beta1.DecCoin buy_prices = 6;
 * @return {!Array<!proto.cosmos.base.v1beta1.DecCoin>}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getBuyPricesList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.DecCoin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.v1beta1.DecCoin, 6));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.DecCoin>} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setBuyPricesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.DecCoin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.DecCoin}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.addBuyPrices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.cosmos.base.v1beta1.DecCoin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearBuyPricesList = function() {
  return this.setBuyPricesList([]);
};


/**
 * repeated cosmos.base.v1beta1.DecCoin sell_prices = 7;
 * @return {!Array<!proto.cosmos.base.v1beta1.DecCoin>}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getSellPricesList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.DecCoin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.v1beta1.DecCoin, 7));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.DecCoin>} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setSellPricesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.DecCoin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.DecCoin}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.addSellPrices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.cosmos.base.v1beta1.DecCoin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearSellPricesList = function() {
  return this.setSellPricesList([]);
};


/**
 * repeated BuyOrder buys = 8;
 * @return {!Array<!proto.ixo.bonds.v1beta1.BuyOrder>}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getBuysList = function() {
  return /** @type{!Array<!proto.ixo.bonds.v1beta1.BuyOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ixo.bonds.v1beta1.BuyOrder, 8));
};


/**
 * @param {!Array<!proto.ixo.bonds.v1beta1.BuyOrder>} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setBuysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ixo.bonds.v1beta1.BuyOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ixo.bonds.v1beta1.BuyOrder}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.addBuys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ixo.bonds.v1beta1.BuyOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearBuysList = function() {
  return this.setBuysList([]);
};


/**
 * repeated SellOrder sells = 9;
 * @return {!Array<!proto.ixo.bonds.v1beta1.SellOrder>}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getSellsList = function() {
  return /** @type{!Array<!proto.ixo.bonds.v1beta1.SellOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ixo.bonds.v1beta1.SellOrder, 9));
};


/**
 * @param {!Array<!proto.ixo.bonds.v1beta1.SellOrder>} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setSellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ixo.bonds.v1beta1.SellOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ixo.bonds.v1beta1.SellOrder}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.addSells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ixo.bonds.v1beta1.SellOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearSellsList = function() {
  return this.setSellsList([]);
};


/**
 * repeated SwapOrder swaps = 10;
 * @return {!Array<!proto.ixo.bonds.v1beta1.SwapOrder>}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.getSwapsList = function() {
  return /** @type{!Array<!proto.ixo.bonds.v1beta1.SwapOrder>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ixo.bonds.v1beta1.SwapOrder, 10));
};


/**
 * @param {!Array<!proto.ixo.bonds.v1beta1.SwapOrder>} value
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
*/
proto.ixo.bonds.v1beta1.Batch.prototype.setSwapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ixo.bonds.v1beta1.SwapOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ixo.bonds.v1beta1.SwapOrder}
 */
proto.ixo.bonds.v1beta1.Batch.prototype.addSwaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ixo.bonds.v1beta1.SwapOrder, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ixo.bonds.v1beta1.Batch} returns this
 */
proto.ixo.bonds.v1beta1.Batch.prototype.clearSwapsList = function() {
  return this.setSwapsList([]);
};


