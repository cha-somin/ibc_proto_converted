// source: umee/leverage/v1/leverage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.umee.leverage.v1.Token');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.umee.leverage.v1.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.umee.leverage.v1.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.umee.leverage.v1.Token.displayName = 'proto.umee.leverage.v1.Token';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.umee.leverage.v1.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.umee.leverage.v1.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.umee.leverage.v1.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.umee.leverage.v1.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseDenom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reserveFactor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collateralWeight: jspb.Message.getFieldWithDefault(msg, 3, ""),
    liquidationThreshold: jspb.Message.getFieldWithDefault(msg, 4, ""),
    baseBorrowRate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    kinkBorrowRate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    maxBorrowRate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    kinkUtilization: jspb.Message.getFieldWithDefault(msg, 8, ""),
    liquidationIncentive: jspb.Message.getFieldWithDefault(msg, 9, ""),
    symbolDenom: jspb.Message.getFieldWithDefault(msg, 10, ""),
    exponent: jspb.Message.getFieldWithDefault(msg, 11, 0),
    enableMsgSupply: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    enableMsgBorrow: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    blacklist: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    maxCollateralShare: jspb.Message.getFieldWithDefault(msg, 15, ""),
    maxSupplyUtilization: jspb.Message.getFieldWithDefault(msg, 16, ""),
    minCollateralLiquidity: jspb.Message.getFieldWithDefault(msg, 17, ""),
    maxSupply: jspb.Message.getFieldWithDefault(msg, 18, ""),
    historicMedians: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.umee.leverage.v1.Token}
 */
proto.umee.leverage.v1.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.umee.leverage.v1.Token;
  return proto.umee.leverage.v1.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.umee.leverage.v1.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.umee.leverage.v1.Token}
 */
proto.umee.leverage.v1.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserveFactor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralWeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidationThreshold(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseBorrowRate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKinkBorrowRate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxBorrowRate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setKinkUtilization(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidationIncentive(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolDenom(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExponent(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMsgSupply(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMsgBorrow(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlacklist(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxCollateralShare(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxSupplyUtilization(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinCollateralLiquidity(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxSupply(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHistoricMedians(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.umee.leverage.v1.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.umee.leverage.v1.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.umee.leverage.v1.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.umee.leverage.v1.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReserveFactor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollateralWeight();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLiquidationThreshold();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBaseBorrowRate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKinkBorrowRate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMaxBorrowRate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getKinkUtilization();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLiquidationIncentive();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSymbolDenom();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getExponent();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getEnableMsgSupply();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getEnableMsgBorrow();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getBlacklist();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getMaxCollateralShare();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMaxSupplyUtilization();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getMinCollateralLiquidity();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getMaxSupply();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getHistoricMedians();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
};


/**
 * optional string base_denom = 1;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getBaseDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setBaseDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reserve_factor = 2;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getReserveFactor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setReserveFactor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string collateral_weight = 3;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getCollateralWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setCollateralWeight = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string liquidation_threshold = 4;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getLiquidationThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setLiquidationThreshold = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string base_borrow_rate = 5;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getBaseBorrowRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setBaseBorrowRate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string kink_borrow_rate = 6;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getKinkBorrowRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setKinkBorrowRate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string max_borrow_rate = 7;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getMaxBorrowRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setMaxBorrowRate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string kink_utilization = 8;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getKinkUtilization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setKinkUtilization = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string liquidation_incentive = 9;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getLiquidationIncentive = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setLiquidationIncentive = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string symbol_denom = 10;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getSymbolDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setSymbolDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint32 exponent = 11;
 * @return {number}
 */
proto.umee.leverage.v1.Token.prototype.getExponent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setExponent = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool enable_msg_supply = 12;
 * @return {boolean}
 */
proto.umee.leverage.v1.Token.prototype.getEnableMsgSupply = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setEnableMsgSupply = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool enable_msg_borrow = 13;
 * @return {boolean}
 */
proto.umee.leverage.v1.Token.prototype.getEnableMsgBorrow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setEnableMsgBorrow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool blacklist = 14;
 * @return {boolean}
 */
proto.umee.leverage.v1.Token.prototype.getBlacklist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setBlacklist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string max_collateral_share = 15;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getMaxCollateralShare = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setMaxCollateralShare = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string max_supply_utilization = 16;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getMaxSupplyUtilization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setMaxSupplyUtilization = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string min_collateral_liquidity = 17;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getMinCollateralLiquidity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setMinCollateralLiquidity = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string max_supply = 18;
 * @return {string}
 */
proto.umee.leverage.v1.Token.prototype.getMaxSupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setMaxSupply = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional uint32 historic_medians = 19;
 * @return {number}
 */
proto.umee.leverage.v1.Token.prototype.getHistoricMedians = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.umee.leverage.v1.Token} returns this
 */
proto.umee.leverage.v1.Token.prototype.setHistoricMedians = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


