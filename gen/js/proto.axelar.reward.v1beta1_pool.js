// source: axelar/reward/v1beta1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.axelar.reward.v1beta1.Pool');
goog.provide('proto.axelar.reward.v1beta1.Pool.Reward');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.cosmos.base.v1beta1.Coin');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.reward.v1beta1.Pool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.axelar.reward.v1beta1.Pool.repeatedFields_, null);
};
goog.inherits(proto.axelar.reward.v1beta1.Pool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.reward.v1beta1.Pool.displayName = 'proto.axelar.reward.v1beta1.Pool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.axelar.reward.v1beta1.Pool.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.axelar.reward.v1beta1.Pool.Reward.repeatedFields_, null);
};
goog.inherits(proto.axelar.reward.v1beta1.Pool.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.axelar.reward.v1beta1.Pool.Reward.displayName = 'proto.axelar.reward.v1beta1.Pool.Reward';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.axelar.reward.v1beta1.Pool.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.reward.v1beta1.Pool.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.reward.v1beta1.Pool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.reward.v1beta1.Pool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.reward.v1beta1.Pool.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.axelar.reward.v1beta1.Pool.Reward.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.reward.v1beta1.Pool}
 */
proto.axelar.reward.v1beta1.Pool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.reward.v1beta1.Pool;
  return proto.axelar.reward.v1beta1.Pool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.reward.v1beta1.Pool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.reward.v1beta1.Pool}
 */
proto.axelar.reward.v1beta1.Pool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.axelar.reward.v1beta1.Pool.Reward;
      reader.readMessage(value,proto.axelar.reward.v1beta1.Pool.Reward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.reward.v1beta1.Pool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.reward.v1beta1.Pool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.reward.v1beta1.Pool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.reward.v1beta1.Pool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.axelar.reward.v1beta1.Pool.Reward.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.axelar.reward.v1beta1.Pool.Reward.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.axelar.reward.v1beta1.Pool.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.axelar.reward.v1beta1.Pool.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.reward.v1beta1.Pool.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.getValidator_asB64(),
    coinsList: jspb.Message.toObjectList(msg.getCoinsList(),
    proto.cosmos.base.v1beta1.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.axelar.reward.v1beta1.Pool.Reward}
 */
proto.axelar.reward.v1beta1.Pool.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.axelar.reward.v1beta1.Pool.Reward;
  return proto.axelar.reward.v1beta1.Pool.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.axelar.reward.v1beta1.Pool.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.axelar.reward.v1beta1.Pool.Reward}
 */
proto.axelar.reward.v1beta1.Pool.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = new proto.cosmos.base.v1beta1.Coin;
      reader.readMessage(value,proto.cosmos.base.v1beta1.Coin.deserializeBinaryFromReader);
      msg.addCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.axelar.reward.v1beta1.Pool.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.axelar.reward.v1beta1.Pool.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.axelar.reward.v1beta1.Pool.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cosmos.base.v1beta1.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {string}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `getValidator()`
 * @return {string}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.getValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidator()`
 * @return {!Uint8Array}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.getValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidator()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.axelar.reward.v1beta1.Pool.Reward} returns this
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.setValidator = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin coins = 2;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.getCoinsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.v1beta1.Coin, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.axelar.reward.v1beta1.Pool.Reward} returns this
*/
proto.axelar.reward.v1beta1.Pool.Reward.prototype.setCoinsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.addCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axelar.reward.v1beta1.Pool.Reward} returns this
 */
proto.axelar.reward.v1beta1.Pool.Reward.prototype.clearCoinsList = function() {
  return this.setCoinsList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.axelar.reward.v1beta1.Pool.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.axelar.reward.v1beta1.Pool} returns this
 */
proto.axelar.reward.v1beta1.Pool.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Reward rewards = 2;
 * @return {!Array<!proto.axelar.reward.v1beta1.Pool.Reward>}
 */
proto.axelar.reward.v1beta1.Pool.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.axelar.reward.v1beta1.Pool.Reward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.axelar.reward.v1beta1.Pool.Reward, 2));
};


/**
 * @param {!Array<!proto.axelar.reward.v1beta1.Pool.Reward>} value
 * @return {!proto.axelar.reward.v1beta1.Pool} returns this
*/
proto.axelar.reward.v1beta1.Pool.prototype.setRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.axelar.reward.v1beta1.Pool.Reward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.axelar.reward.v1beta1.Pool.Reward}
 */
proto.axelar.reward.v1beta1.Pool.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.axelar.reward.v1beta1.Pool.Reward, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.axelar.reward.v1beta1.Pool} returns this
 */
proto.axelar.reward.v1beta1.Pool.prototype.clearRewardsList = function() {
  return this.setRewardsList([]);
};


