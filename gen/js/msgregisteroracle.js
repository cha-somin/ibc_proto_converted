// source: panacea/oracle/v2alpha2/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.panacea.oracle.v2alpha2.MsgRegisterOracle');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.panacea.oracle.v2alpha2.MsgRegisterOracle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panacea.oracle.v2alpha2.MsgRegisterOracle.displayName = 'proto.panacea.oracle.v2alpha2.MsgRegisterOracle';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.toObject = function(opt_includeInstance) {
  return proto.panacea.oracle.v2alpha2.MsgRegisterOracle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.toObject = function(includeInstance, msg) {
  var f, obj = {
    uniqueId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oracleAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodePubKey: msg.getNodePubKey_asB64(),
    nodePubKeyRemoteReport: msg.getNodePubKeyRemoteReport_asB64(),
    trustedBlockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    trustedBlockHash: msg.getTrustedBlockHash_asB64(),
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panacea.oracle.v2alpha2.MsgRegisterOracle;
  return proto.panacea.oracle.v2alpha2.MsgRegisterOracle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodePubKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodePubKeyRemoteReport(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrustedBlockHeight(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTrustedBlockHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panacea.oracle.v2alpha2.MsgRegisterOracle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUniqueId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOracleAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodePubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNodePubKeyRemoteReport_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTrustedBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTrustedBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string unique_id = 1;
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setUniqueId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string oracle_address = 2;
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getOracleAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setOracleAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes node_pub_key = 3;
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNodePubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes node_pub_key = 3;
 * This is a type-conversion wrapper around `getNodePubKey()`
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNodePubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodePubKey()));
};


/**
 * optional bytes node_pub_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodePubKey()`
 * @return {!Uint8Array}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNodePubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodePubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setNodePubKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes node_pub_key_remote_report = 4;
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNodePubKeyRemoteReport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes node_pub_key_remote_report = 4;
 * This is a type-conversion wrapper around `getNodePubKeyRemoteReport()`
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNodePubKeyRemoteReport_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodePubKeyRemoteReport()));
};


/**
 * optional bytes node_pub_key_remote_report = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodePubKeyRemoteReport()`
 * @return {!Uint8Array}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNodePubKeyRemoteReport_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodePubKeyRemoteReport()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setNodePubKeyRemoteReport = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 trusted_block_height = 5;
 * @return {number}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getTrustedBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setTrustedBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes trusted_block_hash = 6;
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getTrustedBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes trusted_block_hash = 6;
 * This is a type-conversion wrapper around `getTrustedBlockHash()`
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getTrustedBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTrustedBlockHash()));
};


/**
 * optional bytes trusted_block_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTrustedBlockHash()`
 * @return {!Uint8Array}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getTrustedBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTrustedBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setTrustedBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes nonce = 7;
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes nonce = 7;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.panacea.oracle.v2alpha2.MsgRegisterOracle} returns this
 */
proto.panacea.oracle.v2alpha2.MsgRegisterOracle.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


