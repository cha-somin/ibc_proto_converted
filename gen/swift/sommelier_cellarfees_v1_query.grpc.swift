//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sommelier/cellarfees/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cellarfees_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cellarfees_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? { get }

  func queryParams(
    _ request: Cellarfees_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cellarfees_V1_QueryParamsRequest, Cellarfees_V1_QueryParamsResponse>

  func queryModuleAccounts(
    _ request: Cellarfees_V1_QueryModuleAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cellarfees_V1_QueryModuleAccountsRequest, Cellarfees_V1_QueryModuleAccountsResponse>

  func queryLastRewardSupplyPeak(
    _ request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cellarfees_V1_QueryLastRewardSupplyPeakRequest, Cellarfees_V1_QueryLastRewardSupplyPeakResponse>

  func queryFeeAccrualCounters(
    _ request: Cellarfees_V1_QueryFeeAccrualCountersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cellarfees_V1_QueryFeeAccrualCountersRequest, Cellarfees_V1_QueryFeeAccrualCountersResponse>

  func queryAPY(
    _ request: Cellarfees_V1_QueryAPYRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cellarfees_V1_QueryAPYRequest, Cellarfees_V1_QueryAPYResponse>
}

extension Cellarfees_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "cellarfees.v1.Query"
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Cellarfees_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cellarfees_V1_QueryParamsRequest, Cellarfees_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  /// Unary call to QueryModuleAccounts
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryModuleAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryModuleAccounts(
    _ request: Cellarfees_V1_QueryModuleAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cellarfees_V1_QueryModuleAccountsRequest, Cellarfees_V1_QueryModuleAccountsResponse> {
    return self.makeUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryModuleAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryModuleAccountsInterceptors() ?? []
    )
  }

  /// Unary call to QueryLastRewardSupplyPeak
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryLastRewardSupplyPeak.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryLastRewardSupplyPeak(
    _ request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cellarfees_V1_QueryLastRewardSupplyPeakRequest, Cellarfees_V1_QueryLastRewardSupplyPeakResponse> {
    return self.makeUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryLastRewardSupplyPeak.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryLastRewardSupplyPeakInterceptors() ?? []
    )
  }

  /// Unary call to QueryFeeAccrualCounters
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryFeeAccrualCounters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryFeeAccrualCounters(
    _ request: Cellarfees_V1_QueryFeeAccrualCountersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cellarfees_V1_QueryFeeAccrualCountersRequest, Cellarfees_V1_QueryFeeAccrualCountersResponse> {
    return self.makeUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryFeeAccrualCounters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryFeeAccrualCountersInterceptors() ?? []
    )
  }

  /// Unary call to QueryAPY
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAPY.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAPY(
    _ request: Cellarfees_V1_QueryAPYRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cellarfees_V1_QueryAPYRequest, Cellarfees_V1_QueryAPYResponse> {
    return self.makeUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryAPY.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAPYInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cellarfees_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cellarfees_V1_QueryNIOClient")
internal final class Cellarfees_V1_QueryClient: Cellarfees_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cellarfees.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cellarfees_V1_QueryNIOClient: Cellarfees_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cellarfees.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cellarfees_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeQueryParamsCall(
    _ request: Cellarfees_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryParamsRequest, Cellarfees_V1_QueryParamsResponse>

  func makeQueryModuleAccountsCall(
    _ request: Cellarfees_V1_QueryModuleAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryModuleAccountsRequest, Cellarfees_V1_QueryModuleAccountsResponse>

  func makeQueryLastRewardSupplyPeakCall(
    _ request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryLastRewardSupplyPeakRequest, Cellarfees_V1_QueryLastRewardSupplyPeakResponse>

  func makeQueryFeeAccrualCountersCall(
    _ request: Cellarfees_V1_QueryFeeAccrualCountersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryFeeAccrualCountersRequest, Cellarfees_V1_QueryFeeAccrualCountersResponse>

  func makeQueryApyCall(
    _ request: Cellarfees_V1_QueryAPYRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryAPYRequest, Cellarfees_V1_QueryAPYResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cellarfees_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cellarfees_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQueryParamsCall(
    _ request: Cellarfees_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryParamsRequest, Cellarfees_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  internal func makeQueryModuleAccountsCall(
    _ request: Cellarfees_V1_QueryModuleAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryModuleAccountsRequest, Cellarfees_V1_QueryModuleAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryModuleAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryModuleAccountsInterceptors() ?? []
    )
  }

  internal func makeQueryLastRewardSupplyPeakCall(
    _ request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryLastRewardSupplyPeakRequest, Cellarfees_V1_QueryLastRewardSupplyPeakResponse> {
    return self.makeAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryLastRewardSupplyPeak.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryLastRewardSupplyPeakInterceptors() ?? []
    )
  }

  internal func makeQueryFeeAccrualCountersCall(
    _ request: Cellarfees_V1_QueryFeeAccrualCountersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryFeeAccrualCountersRequest, Cellarfees_V1_QueryFeeAccrualCountersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryFeeAccrualCounters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryFeeAccrualCountersInterceptors() ?? []
    )
  }

  internal func makeQueryApyCall(
    _ request: Cellarfees_V1_QueryAPYRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cellarfees_V1_QueryAPYRequest, Cellarfees_V1_QueryAPYResponse> {
    return self.makeAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryAPY.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAPYInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cellarfees_V1_QueryAsyncClientProtocol {
  internal func queryParams(
    _ request: Cellarfees_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cellarfees_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  internal func queryModuleAccounts(
    _ request: Cellarfees_V1_QueryModuleAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cellarfees_V1_QueryModuleAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryModuleAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryModuleAccountsInterceptors() ?? []
    )
  }

  internal func queryLastRewardSupplyPeak(
    _ request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cellarfees_V1_QueryLastRewardSupplyPeakResponse {
    return try await self.performAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryLastRewardSupplyPeak.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryLastRewardSupplyPeakInterceptors() ?? []
    )
  }

  internal func queryFeeAccrualCounters(
    _ request: Cellarfees_V1_QueryFeeAccrualCountersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cellarfees_V1_QueryFeeAccrualCountersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryFeeAccrualCounters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryFeeAccrualCountersInterceptors() ?? []
    )
  }

  internal func queryAPY(
    _ request: Cellarfees_V1_QueryAPYRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cellarfees_V1_QueryAPYResponse {
    return try await self.performAsyncUnaryCall(
      path: Cellarfees_V1_QueryClientMetadata.Methods.queryAPY.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAPYInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cellarfees_V1_QueryAsyncClient: Cellarfees_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cellarfees_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cellarfees_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Cellarfees_V1_QueryParamsRequest, Cellarfees_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryModuleAccounts'.
  func makeQueryModuleAccountsInterceptors() -> [ClientInterceptor<Cellarfees_V1_QueryModuleAccountsRequest, Cellarfees_V1_QueryModuleAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryLastRewardSupplyPeak'.
  func makeQueryLastRewardSupplyPeakInterceptors() -> [ClientInterceptor<Cellarfees_V1_QueryLastRewardSupplyPeakRequest, Cellarfees_V1_QueryLastRewardSupplyPeakResponse>]

  /// - Returns: Interceptors to use when invoking 'queryFeeAccrualCounters'.
  func makeQueryFeeAccrualCountersInterceptors() -> [ClientInterceptor<Cellarfees_V1_QueryFeeAccrualCountersRequest, Cellarfees_V1_QueryFeeAccrualCountersResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAPY'.
  func makeQueryAPYInterceptors() -> [ClientInterceptor<Cellarfees_V1_QueryAPYRequest, Cellarfees_V1_QueryAPYResponse>]
}

internal enum Cellarfees_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cellarfees.v1.Query",
    methods: [
      Cellarfees_V1_QueryClientMetadata.Methods.queryParams,
      Cellarfees_V1_QueryClientMetadata.Methods.queryModuleAccounts,
      Cellarfees_V1_QueryClientMetadata.Methods.queryLastRewardSupplyPeak,
      Cellarfees_V1_QueryClientMetadata.Methods.queryFeeAccrualCounters,
      Cellarfees_V1_QueryClientMetadata.Methods.queryAPY,
    ]
  )

  internal enum Methods {
    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/cellarfees.v1.Query/QueryParams",
      type: GRPCCallType.unary
    )

    internal static let queryModuleAccounts = GRPCMethodDescriptor(
      name: "QueryModuleAccounts",
      path: "/cellarfees.v1.Query/QueryModuleAccounts",
      type: GRPCCallType.unary
    )

    internal static let queryLastRewardSupplyPeak = GRPCMethodDescriptor(
      name: "QueryLastRewardSupplyPeak",
      path: "/cellarfees.v1.Query/QueryLastRewardSupplyPeak",
      type: GRPCCallType.unary
    )

    internal static let queryFeeAccrualCounters = GRPCMethodDescriptor(
      name: "QueryFeeAccrualCounters",
      path: "/cellarfees.v1.Query/QueryFeeAccrualCounters",
      type: GRPCCallType.unary
    )

    internal static let queryAPY = GRPCMethodDescriptor(
      name: "QueryAPY",
      path: "/cellarfees.v1.Query/QueryAPY",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Cellarfees_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Cellarfees_V1_QueryServerInterceptorFactoryProtocol? { get }

  func queryParams(request: Cellarfees_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cellarfees_V1_QueryParamsResponse>

  func queryModuleAccounts(request: Cellarfees_V1_QueryModuleAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cellarfees_V1_QueryModuleAccountsResponse>

  func queryLastRewardSupplyPeak(request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cellarfees_V1_QueryLastRewardSupplyPeakResponse>

  func queryFeeAccrualCounters(request: Cellarfees_V1_QueryFeeAccrualCountersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cellarfees_V1_QueryFeeAccrualCountersResponse>

  func queryAPY(request: Cellarfees_V1_QueryAPYRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cellarfees_V1_QueryAPYResponse>
}

extension Cellarfees_V1_QueryProvider {
  internal var serviceName: Substring {
    return Cellarfees_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    case "QueryModuleAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryModuleAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryModuleAccountsResponse>(),
        interceptors: self.interceptors?.makeQueryModuleAccountsInterceptors() ?? [],
        userFunction: self.queryModuleAccounts(request:context:)
      )

    case "QueryLastRewardSupplyPeak":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryLastRewardSupplyPeakRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryLastRewardSupplyPeakResponse>(),
        interceptors: self.interceptors?.makeQueryLastRewardSupplyPeakInterceptors() ?? [],
        userFunction: self.queryLastRewardSupplyPeak(request:context:)
      )

    case "QueryFeeAccrualCounters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryFeeAccrualCountersRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryFeeAccrualCountersResponse>(),
        interceptors: self.interceptors?.makeQueryFeeAccrualCountersInterceptors() ?? [],
        userFunction: self.queryFeeAccrualCounters(request:context:)
      )

    case "QueryAPY":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryAPYRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryAPYResponse>(),
        interceptors: self.interceptors?.makeQueryAPYInterceptors() ?? [],
        userFunction: self.queryAPY(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cellarfees_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cellarfees_V1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func queryParams(
    request: Cellarfees_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cellarfees_V1_QueryParamsResponse

  @Sendable func queryModuleAccounts(
    request: Cellarfees_V1_QueryModuleAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cellarfees_V1_QueryModuleAccountsResponse

  @Sendable func queryLastRewardSupplyPeak(
    request: Cellarfees_V1_QueryLastRewardSupplyPeakRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cellarfees_V1_QueryLastRewardSupplyPeakResponse

  @Sendable func queryFeeAccrualCounters(
    request: Cellarfees_V1_QueryFeeAccrualCountersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cellarfees_V1_QueryFeeAccrualCountersResponse

  @Sendable func queryAPY(
    request: Cellarfees_V1_QueryAPYRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cellarfees_V1_QueryAPYResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cellarfees_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cellarfees_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cellarfees_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cellarfees_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        wrapping: self.queryParams(request:context:)
      )

    case "QueryModuleAccounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryModuleAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryModuleAccountsResponse>(),
        interceptors: self.interceptors?.makeQueryModuleAccountsInterceptors() ?? [],
        wrapping: self.queryModuleAccounts(request:context:)
      )

    case "QueryLastRewardSupplyPeak":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryLastRewardSupplyPeakRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryLastRewardSupplyPeakResponse>(),
        interceptors: self.interceptors?.makeQueryLastRewardSupplyPeakInterceptors() ?? [],
        wrapping: self.queryLastRewardSupplyPeak(request:context:)
      )

    case "QueryFeeAccrualCounters":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryFeeAccrualCountersRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryFeeAccrualCountersResponse>(),
        interceptors: self.interceptors?.makeQueryFeeAccrualCountersInterceptors() ?? [],
        wrapping: self.queryFeeAccrualCounters(request:context:)
      )

    case "QueryAPY":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cellarfees_V1_QueryAPYRequest>(),
        responseSerializer: ProtobufSerializer<Cellarfees_V1_QueryAPYResponse>(),
        interceptors: self.interceptors?.makeQueryAPYInterceptors() ?? [],
        wrapping: self.queryAPY(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cellarfees_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Cellarfees_V1_QueryParamsRequest, Cellarfees_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryModuleAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryModuleAccountsInterceptors() -> [ServerInterceptor<Cellarfees_V1_QueryModuleAccountsRequest, Cellarfees_V1_QueryModuleAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'queryLastRewardSupplyPeak'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryLastRewardSupplyPeakInterceptors() -> [ServerInterceptor<Cellarfees_V1_QueryLastRewardSupplyPeakRequest, Cellarfees_V1_QueryLastRewardSupplyPeakResponse>]

  /// - Returns: Interceptors to use when handling 'queryFeeAccrualCounters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryFeeAccrualCountersInterceptors() -> [ServerInterceptor<Cellarfees_V1_QueryFeeAccrualCountersRequest, Cellarfees_V1_QueryFeeAccrualCountersResponse>]

  /// - Returns: Interceptors to use when handling 'queryAPY'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAPYInterceptors() -> [ServerInterceptor<Cellarfees_V1_QueryAPYRequest, Cellarfees_V1_QueryAPYResponse>]
}

internal enum Cellarfees_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cellarfees.v1.Query",
    methods: [
      Cellarfees_V1_QueryServerMetadata.Methods.queryParams,
      Cellarfees_V1_QueryServerMetadata.Methods.queryModuleAccounts,
      Cellarfees_V1_QueryServerMetadata.Methods.queryLastRewardSupplyPeak,
      Cellarfees_V1_QueryServerMetadata.Methods.queryFeeAccrualCounters,
      Cellarfees_V1_QueryServerMetadata.Methods.queryAPY,
    ]
  )

  internal enum Methods {
    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/cellarfees.v1.Query/QueryParams",
      type: GRPCCallType.unary
    )

    internal static let queryModuleAccounts = GRPCMethodDescriptor(
      name: "QueryModuleAccounts",
      path: "/cellarfees.v1.Query/QueryModuleAccounts",
      type: GRPCCallType.unary
    )

    internal static let queryLastRewardSupplyPeak = GRPCMethodDescriptor(
      name: "QueryLastRewardSupplyPeak",
      path: "/cellarfees.v1.Query/QueryLastRewardSupplyPeak",
      type: GRPCCallType.unary
    )

    internal static let queryFeeAccrualCounters = GRPCMethodDescriptor(
      name: "QueryFeeAccrualCounters",
      path: "/cellarfees.v1.Query/QueryFeeAccrualCounters",
      type: GRPCCallType.unary
    )

    internal static let queryAPY = GRPCMethodDescriptor(
      name: "QueryAPY",
      path: "/cellarfees.v1.Query/QueryAPY",
      type: GRPCCallType.unary
    )
  }
}
