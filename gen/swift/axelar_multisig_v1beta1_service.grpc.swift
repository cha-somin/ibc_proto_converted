//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/multisig/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the multisig Msg service.
///
/// Usage: instantiate `Axelar_Multisig_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Multisig_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func startKeygen(
    _ request: Axelar_Multisig_V1beta1_StartKeygenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_StartKeygenRequest, Axelar_Multisig_V1beta1_StartKeygenResponse>

  func submitPubKey(
    _ request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_SubmitPubKeyRequest, Axelar_Multisig_V1beta1_SubmitPubKeyResponse>

  func submitSignature(
    _ request: Axelar_Multisig_V1beta1_SubmitSignatureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_SubmitSignatureRequest, Axelar_Multisig_V1beta1_SubmitSignatureResponse>

  func rotateKey(
    _ request: Axelar_Multisig_V1beta1_RotateKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_RotateKeyRequest, Axelar_Multisig_V1beta1_RotateKeyResponse>

  func keygenOptOut(
    _ request: Axelar_Multisig_V1beta1_KeygenOptOutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeygenOptOutRequest, Axelar_Multisig_V1beta1_KeygenOptOutResponse>

  func keygenOptIn(
    _ request: Axelar_Multisig_V1beta1_KeygenOptInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeygenOptInRequest, Axelar_Multisig_V1beta1_KeygenOptInResponse>
}

extension Axelar_Multisig_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.multisig.v1beta1.MsgService"
  }

  /// Unary call to StartKeygen
  ///
  /// - Parameters:
  ///   - request: Request to send to StartKeygen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startKeygen(
    _ request: Axelar_Multisig_V1beta1_StartKeygenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_StartKeygenRequest, Axelar_Multisig_V1beta1_StartKeygenResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.startKeygen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? []
    )
  }

  /// Unary call to SubmitPubKey
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitPubKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitPubKey(
    _ request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_SubmitPubKeyRequest, Axelar_Multisig_V1beta1_SubmitPubKeyResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitPubKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitPubKeyInterceptors() ?? []
    )
  }

  /// Unary call to SubmitSignature
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitSignature.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitSignature(
    _ request: Axelar_Multisig_V1beta1_SubmitSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_SubmitSignatureRequest, Axelar_Multisig_V1beta1_SubmitSignatureResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitSignature.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitSignatureInterceptors() ?? []
    )
  }

  /// Unary call to RotateKey
  ///
  /// - Parameters:
  ///   - request: Request to send to RotateKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rotateKey(
    _ request: Axelar_Multisig_V1beta1_RotateKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_RotateKeyRequest, Axelar_Multisig_V1beta1_RotateKeyResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.rotateKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? []
    )
  }

  /// Unary call to KeygenOptOut
  ///
  /// - Parameters:
  ///   - request: Request to send to KeygenOptOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keygenOptOut(
    _ request: Axelar_Multisig_V1beta1_KeygenOptOutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeygenOptOutRequest, Axelar_Multisig_V1beta1_KeygenOptOutResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenOptOutInterceptors() ?? []
    )
  }

  /// Unary call to KeygenOptIn
  ///
  /// - Parameters:
  ///   - request: Request to send to KeygenOptIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keygenOptIn(
    _ request: Axelar_Multisig_V1beta1_KeygenOptInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeygenOptInRequest, Axelar_Multisig_V1beta1_KeygenOptInResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenOptInInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Multisig_V1beta1_MsgServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Multisig_V1beta1_MsgServiceNIOClient")
internal final class Axelar_Multisig_V1beta1_MsgServiceClient: Axelar_Multisig_V1beta1_MsgServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.multisig.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Multisig_V1beta1_MsgServiceNIOClient: Axelar_Multisig_V1beta1_MsgServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.multisig.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the multisig Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Multisig_V1beta1_MsgServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func makeStartKeygenCall(
    _ request: Axelar_Multisig_V1beta1_StartKeygenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_StartKeygenRequest, Axelar_Multisig_V1beta1_StartKeygenResponse>

  func makeSubmitPubKeyCall(
    _ request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_SubmitPubKeyRequest, Axelar_Multisig_V1beta1_SubmitPubKeyResponse>

  func makeSubmitSignatureCall(
    _ request: Axelar_Multisig_V1beta1_SubmitSignatureRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_SubmitSignatureRequest, Axelar_Multisig_V1beta1_SubmitSignatureResponse>

  func makeRotateKeyCall(
    _ request: Axelar_Multisig_V1beta1_RotateKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_RotateKeyRequest, Axelar_Multisig_V1beta1_RotateKeyResponse>

  func makeKeygenOptOutCall(
    _ request: Axelar_Multisig_V1beta1_KeygenOptOutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeygenOptOutRequest, Axelar_Multisig_V1beta1_KeygenOptOutResponse>

  func makeKeygenOptInCall(
    _ request: Axelar_Multisig_V1beta1_KeygenOptInRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeygenOptInRequest, Axelar_Multisig_V1beta1_KeygenOptInResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Multisig_V1beta1_MsgServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Multisig_V1beta1_MsgServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeStartKeygenCall(
    _ request: Axelar_Multisig_V1beta1_StartKeygenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_StartKeygenRequest, Axelar_Multisig_V1beta1_StartKeygenResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.startKeygen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? []
    )
  }

  internal func makeSubmitPubKeyCall(
    _ request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_SubmitPubKeyRequest, Axelar_Multisig_V1beta1_SubmitPubKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitPubKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitPubKeyInterceptors() ?? []
    )
  }

  internal func makeSubmitSignatureCall(
    _ request: Axelar_Multisig_V1beta1_SubmitSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_SubmitSignatureRequest, Axelar_Multisig_V1beta1_SubmitSignatureResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitSignature.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitSignatureInterceptors() ?? []
    )
  }

  internal func makeRotateKeyCall(
    _ request: Axelar_Multisig_V1beta1_RotateKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_RotateKeyRequest, Axelar_Multisig_V1beta1_RotateKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.rotateKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? []
    )
  }

  internal func makeKeygenOptOutCall(
    _ request: Axelar_Multisig_V1beta1_KeygenOptOutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeygenOptOutRequest, Axelar_Multisig_V1beta1_KeygenOptOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenOptOutInterceptors() ?? []
    )
  }

  internal func makeKeygenOptInCall(
    _ request: Axelar_Multisig_V1beta1_KeygenOptInRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeygenOptInRequest, Axelar_Multisig_V1beta1_KeygenOptInResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenOptInInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Multisig_V1beta1_MsgServiceAsyncClientProtocol {
  internal func startKeygen(
    _ request: Axelar_Multisig_V1beta1_StartKeygenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_StartKeygenResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.startKeygen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? []
    )
  }

  internal func submitPubKey(
    _ request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_SubmitPubKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitPubKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitPubKeyInterceptors() ?? []
    )
  }

  internal func submitSignature(
    _ request: Axelar_Multisig_V1beta1_SubmitSignatureRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_SubmitSignatureResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitSignature.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitSignatureInterceptors() ?? []
    )
  }

  internal func rotateKey(
    _ request: Axelar_Multisig_V1beta1_RotateKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_RotateKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.rotateKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? []
    )
  }

  internal func keygenOptOut(
    _ request: Axelar_Multisig_V1beta1_KeygenOptOutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_KeygenOptOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenOptOutInterceptors() ?? []
    )
  }

  internal func keygenOptIn(
    _ request: Axelar_Multisig_V1beta1_KeygenOptInRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_KeygenOptInResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenOptInInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Multisig_V1beta1_MsgServiceAsyncClient: Axelar_Multisig_V1beta1_MsgServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Multisig_V1beta1_MsgServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'startKeygen'.
  func makeStartKeygenInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_StartKeygenRequest, Axelar_Multisig_V1beta1_StartKeygenResponse>]

  /// - Returns: Interceptors to use when invoking 'submitPubKey'.
  func makeSubmitPubKeyInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_SubmitPubKeyRequest, Axelar_Multisig_V1beta1_SubmitPubKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'submitSignature'.
  func makeSubmitSignatureInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_SubmitSignatureRequest, Axelar_Multisig_V1beta1_SubmitSignatureResponse>]

  /// - Returns: Interceptors to use when invoking 'rotateKey'.
  func makeRotateKeyInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_RotateKeyRequest, Axelar_Multisig_V1beta1_RotateKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'keygenOptOut'.
  func makeKeygenOptOutInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_KeygenOptOutRequest, Axelar_Multisig_V1beta1_KeygenOptOutResponse>]

  /// - Returns: Interceptors to use when invoking 'keygenOptIn'.
  func makeKeygenOptInInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_KeygenOptInRequest, Axelar_Multisig_V1beta1_KeygenOptInResponse>]
}

internal enum Axelar_Multisig_V1beta1_MsgServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.multisig.v1beta1.MsgService",
    methods: [
      Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.startKeygen,
      Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitPubKey,
      Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.submitSignature,
      Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.rotateKey,
      Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptOut,
      Axelar_Multisig_V1beta1_MsgServiceClientMetadata.Methods.keygenOptIn,
    ]
  )

  internal enum Methods {
    internal static let startKeygen = GRPCMethodDescriptor(
      name: "StartKeygen",
      path: "/axelar.multisig.v1beta1.MsgService/StartKeygen",
      type: GRPCCallType.unary
    )

    internal static let submitPubKey = GRPCMethodDescriptor(
      name: "SubmitPubKey",
      path: "/axelar.multisig.v1beta1.MsgService/SubmitPubKey",
      type: GRPCCallType.unary
    )

    internal static let submitSignature = GRPCMethodDescriptor(
      name: "SubmitSignature",
      path: "/axelar.multisig.v1beta1.MsgService/SubmitSignature",
      type: GRPCCallType.unary
    )

    internal static let rotateKey = GRPCMethodDescriptor(
      name: "RotateKey",
      path: "/axelar.multisig.v1beta1.MsgService/RotateKey",
      type: GRPCCallType.unary
    )

    internal static let keygenOptOut = GRPCMethodDescriptor(
      name: "KeygenOptOut",
      path: "/axelar.multisig.v1beta1.MsgService/KeygenOptOut",
      type: GRPCCallType.unary
    )

    internal static let keygenOptIn = GRPCMethodDescriptor(
      name: "KeygenOptIn",
      path: "/axelar.multisig.v1beta1.MsgService/KeygenOptIn",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Multisig_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Multisig_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func keyID(
    _ request: Axelar_Multisig_V1beta1_KeyIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeyIDRequest, Axelar_Multisig_V1beta1_KeyIDResponse>

  func nextKeyID(
    _ request: Axelar_Multisig_V1beta1_NextKeyIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_NextKeyIDRequest, Axelar_Multisig_V1beta1_NextKeyIDResponse>

  func key(
    _ request: Axelar_Multisig_V1beta1_KeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeyRequest, Axelar_Multisig_V1beta1_KeyResponse>

  func keygenSession(
    _ request: Axelar_Multisig_V1beta1_KeygenSessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeygenSessionRequest, Axelar_Multisig_V1beta1_KeygenSessionResponse>
}

extension Axelar_Multisig_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.multisig.v1beta1.QueryService"
  }

  /// KeyID returns the key ID of a key assigned to a given chain.
  /// If no key is assigned, it returns the grpc NOT_FOUND error.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyID(
    _ request: Axelar_Multisig_V1beta1_KeyIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeyIDRequest, Axelar_Multisig_V1beta1_KeyIDResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keyID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyIDInterceptors() ?? []
    )
  }

  /// NextKeyID returns the key ID assigned for the next rotation on a given
  /// chain. If no key rotation is in progress, it returns the grpc NOT_FOUND
  /// error.
  ///
  /// - Parameters:
  ///   - request: Request to send to NextKeyID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nextKeyID(
    _ request: Axelar_Multisig_V1beta1_NextKeyIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_NextKeyIDRequest, Axelar_Multisig_V1beta1_NextKeyIDResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.nextKeyID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextKeyIDInterceptors() ?? []
    )
  }

  /// Key returns the key corresponding to a given key ID.
  /// If no key is found, it returns the grpc NOT_FOUND error.
  ///
  /// - Parameters:
  ///   - request: Request to send to Key.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func key(
    _ request: Axelar_Multisig_V1beta1_KeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeyRequest, Axelar_Multisig_V1beta1_KeyResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.key.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyInterceptors() ?? []
    )
  }

  /// KeygenSession returns the keygen session info for a given key ID.
  /// If no key is found, it returns the grpc NOT_FOUND error.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeygenSession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keygenSession(
    _ request: Axelar_Multisig_V1beta1_KeygenSessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Multisig_V1beta1_KeygenSessionRequest, Axelar_Multisig_V1beta1_KeygenSessionResponse> {
    return self.makeUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keygenSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenSessionInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Multisig_V1beta1_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Multisig_V1beta1_QueryServiceNIOClient")
internal final class Axelar_Multisig_V1beta1_QueryServiceClient: Axelar_Multisig_V1beta1_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.multisig.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Multisig_V1beta1_QueryServiceNIOClient: Axelar_Multisig_V1beta1_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.multisig.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Multisig_V1beta1_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeKeyIDCall(
    _ request: Axelar_Multisig_V1beta1_KeyIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeyIDRequest, Axelar_Multisig_V1beta1_KeyIDResponse>

  func makeNextKeyIDCall(
    _ request: Axelar_Multisig_V1beta1_NextKeyIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_NextKeyIDRequest, Axelar_Multisig_V1beta1_NextKeyIDResponse>

  func makeKeyCall(
    _ request: Axelar_Multisig_V1beta1_KeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeyRequest, Axelar_Multisig_V1beta1_KeyResponse>

  func makeKeygenSessionCall(
    _ request: Axelar_Multisig_V1beta1_KeygenSessionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeygenSessionRequest, Axelar_Multisig_V1beta1_KeygenSessionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Multisig_V1beta1_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Multisig_V1beta1_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeKeyIDCall(
    _ request: Axelar_Multisig_V1beta1_KeyIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeyIDRequest, Axelar_Multisig_V1beta1_KeyIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keyID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyIDInterceptors() ?? []
    )
  }

  internal func makeNextKeyIDCall(
    _ request: Axelar_Multisig_V1beta1_NextKeyIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_NextKeyIDRequest, Axelar_Multisig_V1beta1_NextKeyIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.nextKeyID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextKeyIDInterceptors() ?? []
    )
  }

  internal func makeKeyCall(
    _ request: Axelar_Multisig_V1beta1_KeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeyRequest, Axelar_Multisig_V1beta1_KeyResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.key.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyInterceptors() ?? []
    )
  }

  internal func makeKeygenSessionCall(
    _ request: Axelar_Multisig_V1beta1_KeygenSessionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Multisig_V1beta1_KeygenSessionRequest, Axelar_Multisig_V1beta1_KeygenSessionResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keygenSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenSessionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Multisig_V1beta1_QueryServiceAsyncClientProtocol {
  internal func keyID(
    _ request: Axelar_Multisig_V1beta1_KeyIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_KeyIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keyID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyIDInterceptors() ?? []
    )
  }

  internal func nextKeyID(
    _ request: Axelar_Multisig_V1beta1_NextKeyIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_NextKeyIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.nextKeyID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextKeyIDInterceptors() ?? []
    )
  }

  internal func key(
    _ request: Axelar_Multisig_V1beta1_KeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_KeyResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.key.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyInterceptors() ?? []
    )
  }

  internal func keygenSession(
    _ request: Axelar_Multisig_V1beta1_KeygenSessionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Multisig_V1beta1_KeygenSessionResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keygenSession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeygenSessionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Multisig_V1beta1_QueryServiceAsyncClient: Axelar_Multisig_V1beta1_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Multisig_V1beta1_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'keyID'.
  func makeKeyIDInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_KeyIDRequest, Axelar_Multisig_V1beta1_KeyIDResponse>]

  /// - Returns: Interceptors to use when invoking 'nextKeyID'.
  func makeNextKeyIDInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_NextKeyIDRequest, Axelar_Multisig_V1beta1_NextKeyIDResponse>]

  /// - Returns: Interceptors to use when invoking 'key'.
  func makeKeyInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_KeyRequest, Axelar_Multisig_V1beta1_KeyResponse>]

  /// - Returns: Interceptors to use when invoking 'keygenSession'.
  func makeKeygenSessionInterceptors() -> [ClientInterceptor<Axelar_Multisig_V1beta1_KeygenSessionRequest, Axelar_Multisig_V1beta1_KeygenSessionResponse>]
}

internal enum Axelar_Multisig_V1beta1_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.multisig.v1beta1.QueryService",
    methods: [
      Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keyID,
      Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.nextKeyID,
      Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.key,
      Axelar_Multisig_V1beta1_QueryServiceClientMetadata.Methods.keygenSession,
    ]
  )

  internal enum Methods {
    internal static let keyID = GRPCMethodDescriptor(
      name: "KeyID",
      path: "/axelar.multisig.v1beta1.QueryService/KeyID",
      type: GRPCCallType.unary
    )

    internal static let nextKeyID = GRPCMethodDescriptor(
      name: "NextKeyID",
      path: "/axelar.multisig.v1beta1.QueryService/NextKeyID",
      type: GRPCCallType.unary
    )

    internal static let key = GRPCMethodDescriptor(
      name: "Key",
      path: "/axelar.multisig.v1beta1.QueryService/Key",
      type: GRPCCallType.unary
    )

    internal static let keygenSession = GRPCMethodDescriptor(
      name: "KeygenSession",
      path: "/axelar.multisig.v1beta1.QueryService/KeygenSession",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the multisig Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Multisig_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Multisig_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func startKeygen(request: Axelar_Multisig_V1beta1_StartKeygenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_StartKeygenResponse>

  func submitPubKey(request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_SubmitPubKeyResponse>

  func submitSignature(request: Axelar_Multisig_V1beta1_SubmitSignatureRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_SubmitSignatureResponse>

  func rotateKey(request: Axelar_Multisig_V1beta1_RotateKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_RotateKeyResponse>

  func keygenOptOut(request: Axelar_Multisig_V1beta1_KeygenOptOutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_KeygenOptOutResponse>

  func keygenOptIn(request: Axelar_Multisig_V1beta1_KeygenOptInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_KeygenOptInResponse>
}

extension Axelar_Multisig_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Multisig_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartKeygen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_StartKeygenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_StartKeygenResponse>(),
        interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? [],
        userFunction: self.startKeygen(request:context:)
      )

    case "SubmitPubKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_SubmitPubKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_SubmitPubKeyResponse>(),
        interceptors: self.interceptors?.makeSubmitPubKeyInterceptors() ?? [],
        userFunction: self.submitPubKey(request:context:)
      )

    case "SubmitSignature":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_SubmitSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_SubmitSignatureResponse>(),
        interceptors: self.interceptors?.makeSubmitSignatureInterceptors() ?? [],
        userFunction: self.submitSignature(request:context:)
      )

    case "RotateKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_RotateKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_RotateKeyResponse>(),
        interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? [],
        userFunction: self.rotateKey(request:context:)
      )

    case "KeygenOptOut":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeygenOptOutRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeygenOptOutResponse>(),
        interceptors: self.interceptors?.makeKeygenOptOutInterceptors() ?? [],
        userFunction: self.keygenOptOut(request:context:)
      )

    case "KeygenOptIn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeygenOptInRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeygenOptInResponse>(),
        interceptors: self.interceptors?.makeKeygenOptInInterceptors() ?? [],
        userFunction: self.keygenOptIn(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the multisig Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Multisig_V1beta1_MsgServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Multisig_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func startKeygen(
    request: Axelar_Multisig_V1beta1_StartKeygenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_StartKeygenResponse

  @Sendable func submitPubKey(
    request: Axelar_Multisig_V1beta1_SubmitPubKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_SubmitPubKeyResponse

  @Sendable func submitSignature(
    request: Axelar_Multisig_V1beta1_SubmitSignatureRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_SubmitSignatureResponse

  @Sendable func rotateKey(
    request: Axelar_Multisig_V1beta1_RotateKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_RotateKeyResponse

  @Sendable func keygenOptOut(
    request: Axelar_Multisig_V1beta1_KeygenOptOutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_KeygenOptOutResponse

  @Sendable func keygenOptIn(
    request: Axelar_Multisig_V1beta1_KeygenOptInRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_KeygenOptInResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Multisig_V1beta1_MsgServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Multisig_V1beta1_MsgServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Multisig_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Multisig_V1beta1_MsgServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartKeygen":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_StartKeygenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_StartKeygenResponse>(),
        interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? [],
        wrapping: self.startKeygen(request:context:)
      )

    case "SubmitPubKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_SubmitPubKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_SubmitPubKeyResponse>(),
        interceptors: self.interceptors?.makeSubmitPubKeyInterceptors() ?? [],
        wrapping: self.submitPubKey(request:context:)
      )

    case "SubmitSignature":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_SubmitSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_SubmitSignatureResponse>(),
        interceptors: self.interceptors?.makeSubmitSignatureInterceptors() ?? [],
        wrapping: self.submitSignature(request:context:)
      )

    case "RotateKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_RotateKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_RotateKeyResponse>(),
        interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? [],
        wrapping: self.rotateKey(request:context:)
      )

    case "KeygenOptOut":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeygenOptOutRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeygenOptOutResponse>(),
        interceptors: self.interceptors?.makeKeygenOptOutInterceptors() ?? [],
        wrapping: self.keygenOptOut(request:context:)
      )

    case "KeygenOptIn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeygenOptInRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeygenOptInResponse>(),
        interceptors: self.interceptors?.makeKeygenOptInInterceptors() ?? [],
        wrapping: self.keygenOptIn(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Multisig_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'startKeygen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartKeygenInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_StartKeygenRequest, Axelar_Multisig_V1beta1_StartKeygenResponse>]

  /// - Returns: Interceptors to use when handling 'submitPubKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitPubKeyInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_SubmitPubKeyRequest, Axelar_Multisig_V1beta1_SubmitPubKeyResponse>]

  /// - Returns: Interceptors to use when handling 'submitSignature'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitSignatureInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_SubmitSignatureRequest, Axelar_Multisig_V1beta1_SubmitSignatureResponse>]

  /// - Returns: Interceptors to use when handling 'rotateKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRotateKeyInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_RotateKeyRequest, Axelar_Multisig_V1beta1_RotateKeyResponse>]

  /// - Returns: Interceptors to use when handling 'keygenOptOut'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeygenOptOutInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_KeygenOptOutRequest, Axelar_Multisig_V1beta1_KeygenOptOutResponse>]

  /// - Returns: Interceptors to use when handling 'keygenOptIn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeygenOptInInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_KeygenOptInRequest, Axelar_Multisig_V1beta1_KeygenOptInResponse>]
}

internal enum Axelar_Multisig_V1beta1_MsgServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.multisig.v1beta1.MsgService",
    methods: [
      Axelar_Multisig_V1beta1_MsgServiceServerMetadata.Methods.startKeygen,
      Axelar_Multisig_V1beta1_MsgServiceServerMetadata.Methods.submitPubKey,
      Axelar_Multisig_V1beta1_MsgServiceServerMetadata.Methods.submitSignature,
      Axelar_Multisig_V1beta1_MsgServiceServerMetadata.Methods.rotateKey,
      Axelar_Multisig_V1beta1_MsgServiceServerMetadata.Methods.keygenOptOut,
      Axelar_Multisig_V1beta1_MsgServiceServerMetadata.Methods.keygenOptIn,
    ]
  )

  internal enum Methods {
    internal static let startKeygen = GRPCMethodDescriptor(
      name: "StartKeygen",
      path: "/axelar.multisig.v1beta1.MsgService/StartKeygen",
      type: GRPCCallType.unary
    )

    internal static let submitPubKey = GRPCMethodDescriptor(
      name: "SubmitPubKey",
      path: "/axelar.multisig.v1beta1.MsgService/SubmitPubKey",
      type: GRPCCallType.unary
    )

    internal static let submitSignature = GRPCMethodDescriptor(
      name: "SubmitSignature",
      path: "/axelar.multisig.v1beta1.MsgService/SubmitSignature",
      type: GRPCCallType.unary
    )

    internal static let rotateKey = GRPCMethodDescriptor(
      name: "RotateKey",
      path: "/axelar.multisig.v1beta1.MsgService/RotateKey",
      type: GRPCCallType.unary
    )

    internal static let keygenOptOut = GRPCMethodDescriptor(
      name: "KeygenOptOut",
      path: "/axelar.multisig.v1beta1.MsgService/KeygenOptOut",
      type: GRPCCallType.unary
    )

    internal static let keygenOptIn = GRPCMethodDescriptor(
      name: "KeygenOptIn",
      path: "/axelar.multisig.v1beta1.MsgService/KeygenOptIn",
      type: GRPCCallType.unary
    )
  }
}
/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Multisig_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Multisig_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// KeyID returns the key ID of a key assigned to a given chain.
  /// If no key is assigned, it returns the grpc NOT_FOUND error.
  func keyID(request: Axelar_Multisig_V1beta1_KeyIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_KeyIDResponse>

  /// NextKeyID returns the key ID assigned for the next rotation on a given
  /// chain. If no key rotation is in progress, it returns the grpc NOT_FOUND
  /// error.
  func nextKeyID(request: Axelar_Multisig_V1beta1_NextKeyIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_NextKeyIDResponse>

  /// Key returns the key corresponding to a given key ID.
  /// If no key is found, it returns the grpc NOT_FOUND error.
  func key(request: Axelar_Multisig_V1beta1_KeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_KeyResponse>

  /// KeygenSession returns the keygen session info for a given key ID.
  /// If no key is found, it returns the grpc NOT_FOUND error.
  func keygenSession(request: Axelar_Multisig_V1beta1_KeygenSessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Multisig_V1beta1_KeygenSessionResponse>
}

extension Axelar_Multisig_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Multisig_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "KeyID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeyIDRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeyIDResponse>(),
        interceptors: self.interceptors?.makeKeyIDInterceptors() ?? [],
        userFunction: self.keyID(request:context:)
      )

    case "NextKeyID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_NextKeyIDRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_NextKeyIDResponse>(),
        interceptors: self.interceptors?.makeNextKeyIDInterceptors() ?? [],
        userFunction: self.nextKeyID(request:context:)
      )

    case "Key":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeyResponse>(),
        interceptors: self.interceptors?.makeKeyInterceptors() ?? [],
        userFunction: self.key(request:context:)
      )

    case "KeygenSession":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeygenSessionRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeygenSessionResponse>(),
        interceptors: self.interceptors?.makeKeygenSessionInterceptors() ?? [],
        userFunction: self.keygenSession(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Multisig_V1beta1_QueryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Multisig_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// KeyID returns the key ID of a key assigned to a given chain.
  /// If no key is assigned, it returns the grpc NOT_FOUND error.
  @Sendable func keyID(
    request: Axelar_Multisig_V1beta1_KeyIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_KeyIDResponse

  /// NextKeyID returns the key ID assigned for the next rotation on a given
  /// chain. If no key rotation is in progress, it returns the grpc NOT_FOUND
  /// error.
  @Sendable func nextKeyID(
    request: Axelar_Multisig_V1beta1_NextKeyIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_NextKeyIDResponse

  /// Key returns the key corresponding to a given key ID.
  /// If no key is found, it returns the grpc NOT_FOUND error.
  @Sendable func key(
    request: Axelar_Multisig_V1beta1_KeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_KeyResponse

  /// KeygenSession returns the keygen session info for a given key ID.
  /// If no key is found, it returns the grpc NOT_FOUND error.
  @Sendable func keygenSession(
    request: Axelar_Multisig_V1beta1_KeygenSessionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Multisig_V1beta1_KeygenSessionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Multisig_V1beta1_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Multisig_V1beta1_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Multisig_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Multisig_V1beta1_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "KeyID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeyIDRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeyIDResponse>(),
        interceptors: self.interceptors?.makeKeyIDInterceptors() ?? [],
        wrapping: self.keyID(request:context:)
      )

    case "NextKeyID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_NextKeyIDRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_NextKeyIDResponse>(),
        interceptors: self.interceptors?.makeNextKeyIDInterceptors() ?? [],
        wrapping: self.nextKeyID(request:context:)
      )

    case "Key":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeyResponse>(),
        interceptors: self.interceptors?.makeKeyInterceptors() ?? [],
        wrapping: self.key(request:context:)
      )

    case "KeygenSession":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Multisig_V1beta1_KeygenSessionRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Multisig_V1beta1_KeygenSessionResponse>(),
        interceptors: self.interceptors?.makeKeygenSessionInterceptors() ?? [],
        wrapping: self.keygenSession(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Multisig_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'keyID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyIDInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_KeyIDRequest, Axelar_Multisig_V1beta1_KeyIDResponse>]

  /// - Returns: Interceptors to use when handling 'nextKeyID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNextKeyIDInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_NextKeyIDRequest, Axelar_Multisig_V1beta1_NextKeyIDResponse>]

  /// - Returns: Interceptors to use when handling 'key'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_KeyRequest, Axelar_Multisig_V1beta1_KeyResponse>]

  /// - Returns: Interceptors to use when handling 'keygenSession'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeygenSessionInterceptors() -> [ServerInterceptor<Axelar_Multisig_V1beta1_KeygenSessionRequest, Axelar_Multisig_V1beta1_KeygenSessionResponse>]
}

internal enum Axelar_Multisig_V1beta1_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.multisig.v1beta1.QueryService",
    methods: [
      Axelar_Multisig_V1beta1_QueryServiceServerMetadata.Methods.keyID,
      Axelar_Multisig_V1beta1_QueryServiceServerMetadata.Methods.nextKeyID,
      Axelar_Multisig_V1beta1_QueryServiceServerMetadata.Methods.key,
      Axelar_Multisig_V1beta1_QueryServiceServerMetadata.Methods.keygenSession,
    ]
  )

  internal enum Methods {
    internal static let keyID = GRPCMethodDescriptor(
      name: "KeyID",
      path: "/axelar.multisig.v1beta1.QueryService/KeyID",
      type: GRPCCallType.unary
    )

    internal static let nextKeyID = GRPCMethodDescriptor(
      name: "NextKeyID",
      path: "/axelar.multisig.v1beta1.QueryService/NextKeyID",
      type: GRPCCallType.unary
    )

    internal static let key = GRPCMethodDescriptor(
      name: "Key",
      path: "/axelar.multisig.v1beta1.QueryService/Key",
      type: GRPCCallType.unary
    )

    internal static let keygenSession = GRPCMethodDescriptor(
      name: "KeygenSession",
      path: "/axelar.multisig.v1beta1.QueryService/KeygenSession",
      type: GRPCCallType.unary
    )
  }
}
