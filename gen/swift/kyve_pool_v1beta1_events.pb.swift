// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/pool/v1beta1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventCreatePool ...
/// emitted_by: EndBlock(gov)
struct Kyve_Pool_V1beta1_EventCreatePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the unique ID of the pool.
  var id: UInt64 = 0

  /// name is the human readable name of the pool
  var name: String = String()

  /// runtime is the runtime name of the pool
  var runtime: String = String()

  /// logo is the logo url of the pool
  var logo: String = String()

  /// config is either a json stringified config or an
  /// external link pointing to the config
  var config: String = String()

  /// start_key is the first key the pool should start
  /// indexing
  var startKey: String = String()

  /// upload_interval is the interval the pool should validate
  /// bundles with
  var uploadInterval: UInt64 = 0

  /// operating_cost is the fixed cost which gets paid out
  /// to every successful uploader
  var operatingCost: UInt64 = 0

  /// min_delegation is the minimum amount of $KYVE the pool has
  /// to have in order to produce bundles
  var minDelegation: UInt64 = 0

  /// max_bundle_size is the max size a data bundle can have
  /// (amount of data items)
  var maxBundleSize: UInt64 = 0

  /// version is the current version of the protocol nodes
  var version: String = String()

  /// binaries points to the current binaries of the protocol node
  var binaries: String = String()

  /// storage_provider_id is the unique id of the storage provider
  /// the pool is archiving the data on
  var storageProviderID: UInt32 = 0

  /// compression_id is the unique id of the compression type the bundles
  /// get compressed with
  var compressionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventPoolEnabled ...
/// emitted_by: EndBlock(gov)
struct Kyve_Pool_V1beta1_EventPoolEnabled {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the unique ID of the affected pool.
  var id: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventPoolDisabled ...
/// emitted_by: EndBlock(gov)
struct Kyve_Pool_V1beta1_EventPoolDisabled {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the unique ID of the affected pool.
  var id: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRuntimeUpgradeScheduled ...
/// emitted_by: EndBlock(gov)
struct Kyve_Pool_V1beta1_EventRuntimeUpgradeScheduled {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// runtime is the name of the runtime that will be upgraded.
  var runtime: String = String()

  /// version is the new version that the runtime will be upgraded to.
  var version: String = String()

  /// scheduled_at is the time in UNIX seconds when the upgrade will occur.
  var scheduledAt: UInt64 = 0

  /// duration is the amount of seconds the pool will be paused after the
  /// scheduled time is reached. This will give node operators time to upgrade
  /// their node.
  var duration: UInt64 = 0

  /// binaries contain download links for prebuilt binaries (in JSON format).
  var binaries: String = String()

  /// affected_pools contains all IDs of pools that will be affected by this runtime upgrade.
  var affectedPools: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRuntimeUpgradeCancelled ...
/// emitted_by: EndBlock(gov)
struct Kyve_Pool_V1beta1_EventRuntimeUpgradeCancelled {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// runtime is the name of the runtime that will be upgraded.
  var runtime: String = String()

  /// affected_pools contains all IDs of pools that are affected by the
  /// cancellation of this runtime upgrade.
  var affectedPools: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventPoolUpdated ...
/// emitted_by: EndBlock(gov)
struct Kyve_Pool_V1beta1_EventPoolUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the unique ID of the pool.
  var id: UInt64 = 0

  /// raw update string
  var rawUpdateString: String = String()

  /// name is the human readable name of the pool
  var name: String = String()

  /// runtime is the runtime name of the pool
  var runtime: String = String()

  /// logo is the logo url of the pool
  var logo: String = String()

  /// config is either a json stringified config or an
  /// external link pointing to the config
  var config: String = String()

  /// upload_interval is the interval the pool should validate
  /// bundles with
  var uploadInterval: UInt64 = 0

  /// operating_cost is the fixed cost which gets paid out
  /// to every successful uploader
  var operatingCost: UInt64 = 0

  /// min_delegation is the minimum amount of $KYVE the pool has
  /// to have in order to produce bundles
  var minDelegation: UInt64 = 0

  /// max_bundle_size is the max size a data bundle can have
  /// (amount of data items)
  var maxBundleSize: UInt64 = 0

  /// storage_provider_id is the unique id of the storage provider
  /// the pool is archiving the data on
  var storageProviderID: UInt32 = 0

  /// compression_id is the unique id of the compression type the bundles
  /// get compressed with
  var compressionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventFundPool is an event emitted when a pool is funded.
/// emitted_by: MsgFundPool
struct Kyve_Pool_V1beta1_EventFundPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// address is the account address of the pool funder.
  var address: String = String()

  /// amount is the amount in ukyve the funder has funded
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventDefundPool is an event emitted when a pool is defunded.
/// emitted_by: MsgDefundPool
struct Kyve_Pool_V1beta1_EventDefundPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// address is the account address of the pool funder.
  var address: String = String()

  /// amount is the amount in ukyve the funder has defunded
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventDefundPool is an event emitted when a pool is defunded.
/// emitted_by: MsgSubmitBundleProposal
struct Kyve_Pool_V1beta1_EventPoolFundsSlashed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// address is the account address of the pool funder.
  var address: String = String()

  /// amount is the amount in ukyve the validator has lost due to the slash
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventPoolOutOfFunds is an event emitted when a pool has run out of funds
/// emitted_by: MsgSubmitBundleProposal
struct Kyve_Pool_V1beta1_EventPoolOutOfFunds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Pool_V1beta1_EventCreatePool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventPoolEnabled: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventPoolDisabled: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventRuntimeUpgradeScheduled: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventRuntimeUpgradeCancelled: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventPoolUpdated: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventFundPool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventDefundPool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventPoolFundsSlashed: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_EventPoolOutOfFunds: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.pool.v1beta1"

extension Kyve_Pool_V1beta1_EventCreatePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreatePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "runtime"),
    4: .same(proto: "logo"),
    5: .same(proto: "config"),
    6: .standard(proto: "start_key"),
    7: .standard(proto: "upload_interval"),
    8: .standard(proto: "operating_cost"),
    9: .standard(proto: "min_delegation"),
    10: .standard(proto: "max_bundle_size"),
    11: .same(proto: "version"),
    12: .same(proto: "binaries"),
    13: .standard(proto: "storage_provider_id"),
    14: .standard(proto: "compression_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.logo) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.config) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.startKey) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.uploadInterval) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.operatingCost) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.minDelegation) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.maxBundleSize) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.binaries) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self.storageProviderID) }()
      case 14: try { try decoder.decodeSingularUInt32Field(value: &self.compressionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 3)
    }
    if !self.logo.isEmpty {
      try visitor.visitSingularStringField(value: self.logo, fieldNumber: 4)
    }
    if !self.config.isEmpty {
      try visitor.visitSingularStringField(value: self.config, fieldNumber: 5)
    }
    if !self.startKey.isEmpty {
      try visitor.visitSingularStringField(value: self.startKey, fieldNumber: 6)
    }
    if self.uploadInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.uploadInterval, fieldNumber: 7)
    }
    if self.operatingCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.operatingCost, fieldNumber: 8)
    }
    if self.minDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.minDelegation, fieldNumber: 9)
    }
    if self.maxBundleSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxBundleSize, fieldNumber: 10)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 11)
    }
    if !self.binaries.isEmpty {
      try visitor.visitSingularStringField(value: self.binaries, fieldNumber: 12)
    }
    if self.storageProviderID != 0 {
      try visitor.visitSingularUInt32Field(value: self.storageProviderID, fieldNumber: 13)
    }
    if self.compressionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.compressionID, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventCreatePool, rhs: Kyve_Pool_V1beta1_EventCreatePool) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs.logo != rhs.logo {return false}
    if lhs.config != rhs.config {return false}
    if lhs.startKey != rhs.startKey {return false}
    if lhs.uploadInterval != rhs.uploadInterval {return false}
    if lhs.operatingCost != rhs.operatingCost {return false}
    if lhs.minDelegation != rhs.minDelegation {return false}
    if lhs.maxBundleSize != rhs.maxBundleSize {return false}
    if lhs.version != rhs.version {return false}
    if lhs.binaries != rhs.binaries {return false}
    if lhs.storageProviderID != rhs.storageProviderID {return false}
    if lhs.compressionID != rhs.compressionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventPoolEnabled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPoolEnabled"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventPoolEnabled, rhs: Kyve_Pool_V1beta1_EventPoolEnabled) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventPoolDisabled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPoolDisabled"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventPoolDisabled, rhs: Kyve_Pool_V1beta1_EventPoolDisabled) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventRuntimeUpgradeScheduled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRuntimeUpgradeScheduled"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "runtime"),
    2: .same(proto: "version"),
    3: .standard(proto: "scheduled_at"),
    4: .same(proto: "duration"),
    5: .same(proto: "binaries"),
    6: .standard(proto: "affected_pools"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.scheduledAt) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.duration) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.binaries) }()
      case 6: try { try decoder.decodeRepeatedUInt64Field(value: &self.affectedPools) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if self.scheduledAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.scheduledAt, fieldNumber: 3)
    }
    if self.duration != 0 {
      try visitor.visitSingularUInt64Field(value: self.duration, fieldNumber: 4)
    }
    if !self.binaries.isEmpty {
      try visitor.visitSingularStringField(value: self.binaries, fieldNumber: 5)
    }
    if !self.affectedPools.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.affectedPools, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventRuntimeUpgradeScheduled, rhs: Kyve_Pool_V1beta1_EventRuntimeUpgradeScheduled) -> Bool {
    if lhs.runtime != rhs.runtime {return false}
    if lhs.version != rhs.version {return false}
    if lhs.scheduledAt != rhs.scheduledAt {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.binaries != rhs.binaries {return false}
    if lhs.affectedPools != rhs.affectedPools {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventRuntimeUpgradeCancelled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRuntimeUpgradeCancelled"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "runtime"),
    2: .standard(proto: "affected_pools"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.affectedPools) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 1)
    }
    if !self.affectedPools.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.affectedPools, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventRuntimeUpgradeCancelled, rhs: Kyve_Pool_V1beta1_EventRuntimeUpgradeCancelled) -> Bool {
    if lhs.runtime != rhs.runtime {return false}
    if lhs.affectedPools != rhs.affectedPools {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventPoolUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPoolUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "raw_update_string"),
    3: .same(proto: "name"),
    4: .same(proto: "runtime"),
    5: .same(proto: "logo"),
    6: .same(proto: "config"),
    7: .standard(proto: "upload_interval"),
    8: .standard(proto: "operating_cost"),
    9: .standard(proto: "min_delegation"),
    10: .standard(proto: "max_bundle_size"),
    11: .standard(proto: "storage_provider_id"),
    12: .standard(proto: "compression_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rawUpdateString) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.logo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.config) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.uploadInterval) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.operatingCost) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.minDelegation) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.maxBundleSize) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.storageProviderID) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.compressionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.rawUpdateString.isEmpty {
      try visitor.visitSingularStringField(value: self.rawUpdateString, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 4)
    }
    if !self.logo.isEmpty {
      try visitor.visitSingularStringField(value: self.logo, fieldNumber: 5)
    }
    if !self.config.isEmpty {
      try visitor.visitSingularStringField(value: self.config, fieldNumber: 6)
    }
    if self.uploadInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.uploadInterval, fieldNumber: 7)
    }
    if self.operatingCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.operatingCost, fieldNumber: 8)
    }
    if self.minDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.minDelegation, fieldNumber: 9)
    }
    if self.maxBundleSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxBundleSize, fieldNumber: 10)
    }
    if self.storageProviderID != 0 {
      try visitor.visitSingularUInt32Field(value: self.storageProviderID, fieldNumber: 11)
    }
    if self.compressionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.compressionID, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventPoolUpdated, rhs: Kyve_Pool_V1beta1_EventPoolUpdated) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.rawUpdateString != rhs.rawUpdateString {return false}
    if lhs.name != rhs.name {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs.logo != rhs.logo {return false}
    if lhs.config != rhs.config {return false}
    if lhs.uploadInterval != rhs.uploadInterval {return false}
    if lhs.operatingCost != rhs.operatingCost {return false}
    if lhs.minDelegation != rhs.minDelegation {return false}
    if lhs.maxBundleSize != rhs.maxBundleSize {return false}
    if lhs.storageProviderID != rhs.storageProviderID {return false}
    if lhs.compressionID != rhs.compressionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventFundPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventFundPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "address"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventFundPool, rhs: Kyve_Pool_V1beta1_EventFundPool) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventDefundPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventDefundPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "address"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventDefundPool, rhs: Kyve_Pool_V1beta1_EventDefundPool) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventPoolFundsSlashed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPoolFundsSlashed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "address"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventPoolFundsSlashed, rhs: Kyve_Pool_V1beta1_EventPoolFundsSlashed) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_EventPoolOutOfFunds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPoolOutOfFunds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_EventPoolOutOfFunds, rhs: Kyve_Pool_V1beta1_EventPoolOutOfFunds) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
