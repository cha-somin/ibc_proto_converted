//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/incentive/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the x/incentive module's Msg service.
///
/// Usage: instantiate `Umee_Incentive_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Umee_Incentive_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? { get }

  func claim(
    _ request: Umee_Incentive_V1_MsgClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgClaim, Umee_Incentive_V1_MsgClaimResponse>

  func bond(
    _ request: Umee_Incentive_V1_MsgBond,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgBond, Umee_Incentive_V1_MsgBondResponse>

  func beginUnbonding(
    _ request: Umee_Incentive_V1_MsgBeginUnbonding,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgBeginUnbonding, Umee_Incentive_V1_MsgBeginUnbondingResponse>

  func emergencyUnbond(
    _ request: Umee_Incentive_V1_MsgEmergencyUnbond,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgEmergencyUnbond, Umee_Incentive_V1_MsgEmergencyUnbondResponse>

  func sponsor(
    _ request: Umee_Incentive_V1_MsgSponsor,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgSponsor, Umee_Incentive_V1_MsgSponsorResponse>

  func govSetParams(
    _ request: Umee_Incentive_V1_MsgGovSetParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgGovSetParams, Umee_Incentive_V1_MsgGovSetParamsResponse>

  func govCreatePrograms(
    _ request: Umee_Incentive_V1_MsgGovCreatePrograms,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_MsgGovCreatePrograms, Umee_Incentive_V1_MsgGovCreateProgramsResponse>
}

extension Umee_Incentive_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "umee.incentive.v1.Msg"
  }

  /// Claim defines a method for claiming any pending incentive rewards.
  ///
  /// - Parameters:
  ///   - request: Request to send to Claim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claim(
    _ request: Umee_Incentive_V1_MsgClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgClaim, Umee_Incentive_V1_MsgClaimResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  /// Bond defines a method for bonding uToken collateral.
  ///
  /// - Parameters:
  ///   - request: Request to send to Bond.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bond(
    _ request: Umee_Incentive_V1_MsgBond,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgBond, Umee_Incentive_V1_MsgBondResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.bond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondInterceptors() ?? []
    )
  }

  /// BeginUnbonding defines a method for starting to unbond uToken collateral.
  /// Only max_unbondings unbondings can be active at per user, per denom, at once.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginUnbonding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func beginUnbonding(
    _ request: Umee_Incentive_V1_MsgBeginUnbonding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgBeginUnbonding, Umee_Incentive_V1_MsgBeginUnbondingResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.beginUnbonding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnbondingInterceptors() ?? []
    )
  }

  /// EmergencyUnbond defines a method for instantly unbonding uToken collateral in exchange for a fee.
  /// This can finish existing unbondings or unbond bonded tokens, and is not restricted by max_unbondings.
  ///
  /// - Parameters:
  ///   - request: Request to send to EmergencyUnbond.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func emergencyUnbond(
    _ request: Umee_Incentive_V1_MsgEmergencyUnbond,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgEmergencyUnbond, Umee_Incentive_V1_MsgEmergencyUnbondResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.emergencyUnbond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmergencyUnbondInterceptors() ?? []
    )
  }

  /// Sponsor defines a permissionless method for sponsoring an upcoming, not yet funded incentive program.
  /// The sponsor must be a single account and the MsgSponsor must fully cover the expected program rewards.
  ///
  /// - Parameters:
  ///   - request: Request to send to Sponsor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sponsor(
    _ request: Umee_Incentive_V1_MsgSponsor,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgSponsor, Umee_Incentive_V1_MsgSponsorResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.sponsor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSponsorInterceptors() ?? []
    )
  }

  /// GovSetParams is used by governance proposals to update parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to GovSetParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func govSetParams(
    _ request: Umee_Incentive_V1_MsgGovSetParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgGovSetParams, Umee_Incentive_V1_MsgGovSetParamsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.govSetParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovSetParamsInterceptors() ?? []
    )
  }

  /// GovCreatePrograms is used by governance proposals to create and optionally fund incentive programs.
  ///
  /// - Parameters:
  ///   - request: Request to send to GovCreatePrograms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func govCreatePrograms(
    _ request: Umee_Incentive_V1_MsgGovCreatePrograms,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_MsgGovCreatePrograms, Umee_Incentive_V1_MsgGovCreateProgramsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.govCreatePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovCreateProgramsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Umee_Incentive_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Umee_Incentive_V1_MsgNIOClient")
internal final class Umee_Incentive_V1_MsgClient: Umee_Incentive_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the umee.incentive.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Umee_Incentive_V1_MsgNIOClient: Umee_Incentive_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the umee.incentive.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the x/incentive module's Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Incentive_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeClaimCall(
    _ request: Umee_Incentive_V1_MsgClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgClaim, Umee_Incentive_V1_MsgClaimResponse>

  func makeBondCall(
    _ request: Umee_Incentive_V1_MsgBond,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgBond, Umee_Incentive_V1_MsgBondResponse>

  func makeBeginUnbondingCall(
    _ request: Umee_Incentive_V1_MsgBeginUnbonding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgBeginUnbonding, Umee_Incentive_V1_MsgBeginUnbondingResponse>

  func makeEmergencyUnbondCall(
    _ request: Umee_Incentive_V1_MsgEmergencyUnbond,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgEmergencyUnbond, Umee_Incentive_V1_MsgEmergencyUnbondResponse>

  func makeSponsorCall(
    _ request: Umee_Incentive_V1_MsgSponsor,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgSponsor, Umee_Incentive_V1_MsgSponsorResponse>

  func makeGovSetParamsCall(
    _ request: Umee_Incentive_V1_MsgGovSetParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgGovSetParams, Umee_Incentive_V1_MsgGovSetParamsResponse>

  func makeGovCreateProgramsCall(
    _ request: Umee_Incentive_V1_MsgGovCreatePrograms,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgGovCreatePrograms, Umee_Incentive_V1_MsgGovCreateProgramsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Incentive_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Incentive_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeClaimCall(
    _ request: Umee_Incentive_V1_MsgClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgClaim, Umee_Incentive_V1_MsgClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  internal func makeBondCall(
    _ request: Umee_Incentive_V1_MsgBond,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgBond, Umee_Incentive_V1_MsgBondResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.bond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondInterceptors() ?? []
    )
  }

  internal func makeBeginUnbondingCall(
    _ request: Umee_Incentive_V1_MsgBeginUnbonding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgBeginUnbonding, Umee_Incentive_V1_MsgBeginUnbondingResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.beginUnbonding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnbondingInterceptors() ?? []
    )
  }

  internal func makeEmergencyUnbondCall(
    _ request: Umee_Incentive_V1_MsgEmergencyUnbond,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgEmergencyUnbond, Umee_Incentive_V1_MsgEmergencyUnbondResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.emergencyUnbond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmergencyUnbondInterceptors() ?? []
    )
  }

  internal func makeSponsorCall(
    _ request: Umee_Incentive_V1_MsgSponsor,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgSponsor, Umee_Incentive_V1_MsgSponsorResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.sponsor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSponsorInterceptors() ?? []
    )
  }

  internal func makeGovSetParamsCall(
    _ request: Umee_Incentive_V1_MsgGovSetParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgGovSetParams, Umee_Incentive_V1_MsgGovSetParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.govSetParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovSetParamsInterceptors() ?? []
    )
  }

  internal func makeGovCreateProgramsCall(
    _ request: Umee_Incentive_V1_MsgGovCreatePrograms,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_MsgGovCreatePrograms, Umee_Incentive_V1_MsgGovCreateProgramsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.govCreatePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovCreateProgramsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Incentive_V1_MsgAsyncClientProtocol {
  internal func claim(
    _ request: Umee_Incentive_V1_MsgClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  internal func bond(
    _ request: Umee_Incentive_V1_MsgBond,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgBondResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.bond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondInterceptors() ?? []
    )
  }

  internal func beginUnbonding(
    _ request: Umee_Incentive_V1_MsgBeginUnbonding,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgBeginUnbondingResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.beginUnbonding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginUnbondingInterceptors() ?? []
    )
  }

  internal func emergencyUnbond(
    _ request: Umee_Incentive_V1_MsgEmergencyUnbond,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgEmergencyUnbondResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.emergencyUnbond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmergencyUnbondInterceptors() ?? []
    )
  }

  internal func sponsor(
    _ request: Umee_Incentive_V1_MsgSponsor,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgSponsorResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.sponsor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSponsorInterceptors() ?? []
    )
  }

  internal func govSetParams(
    _ request: Umee_Incentive_V1_MsgGovSetParams,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgGovSetParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.govSetParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovSetParamsInterceptors() ?? []
    )
  }

  internal func govCreatePrograms(
    _ request: Umee_Incentive_V1_MsgGovCreatePrograms,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_MsgGovCreateProgramsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_MsgClientMetadata.Methods.govCreatePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovCreateProgramsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Umee_Incentive_V1_MsgAsyncClient: Umee_Incentive_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Umee_Incentive_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'claim'.
  func makeClaimInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgClaim, Umee_Incentive_V1_MsgClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'bond'.
  func makeBondInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgBond, Umee_Incentive_V1_MsgBondResponse>]

  /// - Returns: Interceptors to use when invoking 'beginUnbonding'.
  func makeBeginUnbondingInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgBeginUnbonding, Umee_Incentive_V1_MsgBeginUnbondingResponse>]

  /// - Returns: Interceptors to use when invoking 'emergencyUnbond'.
  func makeEmergencyUnbondInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgEmergencyUnbond, Umee_Incentive_V1_MsgEmergencyUnbondResponse>]

  /// - Returns: Interceptors to use when invoking 'sponsor'.
  func makeSponsorInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgSponsor, Umee_Incentive_V1_MsgSponsorResponse>]

  /// - Returns: Interceptors to use when invoking 'govSetParams'.
  func makeGovSetParamsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgGovSetParams, Umee_Incentive_V1_MsgGovSetParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'govCreatePrograms'.
  func makeGovCreateProgramsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_MsgGovCreatePrograms, Umee_Incentive_V1_MsgGovCreateProgramsResponse>]
}

internal enum Umee_Incentive_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "umee.incentive.v1.Msg",
    methods: [
      Umee_Incentive_V1_MsgClientMetadata.Methods.claim,
      Umee_Incentive_V1_MsgClientMetadata.Methods.bond,
      Umee_Incentive_V1_MsgClientMetadata.Methods.beginUnbonding,
      Umee_Incentive_V1_MsgClientMetadata.Methods.emergencyUnbond,
      Umee_Incentive_V1_MsgClientMetadata.Methods.sponsor,
      Umee_Incentive_V1_MsgClientMetadata.Methods.govSetParams,
      Umee_Incentive_V1_MsgClientMetadata.Methods.govCreatePrograms,
    ]
  )

  internal enum Methods {
    internal static let claim = GRPCMethodDescriptor(
      name: "Claim",
      path: "/umee.incentive.v1.Msg/Claim",
      type: GRPCCallType.unary
    )

    internal static let bond = GRPCMethodDescriptor(
      name: "Bond",
      path: "/umee.incentive.v1.Msg/Bond",
      type: GRPCCallType.unary
    )

    internal static let beginUnbonding = GRPCMethodDescriptor(
      name: "BeginUnbonding",
      path: "/umee.incentive.v1.Msg/BeginUnbonding",
      type: GRPCCallType.unary
    )

    internal static let emergencyUnbond = GRPCMethodDescriptor(
      name: "EmergencyUnbond",
      path: "/umee.incentive.v1.Msg/EmergencyUnbond",
      type: GRPCCallType.unary
    )

    internal static let sponsor = GRPCMethodDescriptor(
      name: "Sponsor",
      path: "/umee.incentive.v1.Msg/Sponsor",
      type: GRPCCallType.unary
    )

    internal static let govSetParams = GRPCMethodDescriptor(
      name: "GovSetParams",
      path: "/umee.incentive.v1.Msg/GovSetParams",
      type: GRPCCallType.unary
    )

    internal static let govCreatePrograms = GRPCMethodDescriptor(
      name: "GovCreatePrograms",
      path: "/umee.incentive.v1.Msg/GovCreatePrograms",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the x/incentive module's Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umee_Incentive_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Umee_Incentive_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Claim defines a method for claiming any pending incentive rewards.
  func claim(request: Umee_Incentive_V1_MsgClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgClaimResponse>

  /// Bond defines a method for bonding uToken collateral.
  func bond(request: Umee_Incentive_V1_MsgBond, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgBondResponse>

  /// BeginUnbonding defines a method for starting to unbond uToken collateral.
  /// Only max_unbondings unbondings can be active at per user, per denom, at once.
  func beginUnbonding(request: Umee_Incentive_V1_MsgBeginUnbonding, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgBeginUnbondingResponse>

  /// EmergencyUnbond defines a method for instantly unbonding uToken collateral in exchange for a fee.
  /// This can finish existing unbondings or unbond bonded tokens, and is not restricted by max_unbondings.
  func emergencyUnbond(request: Umee_Incentive_V1_MsgEmergencyUnbond, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgEmergencyUnbondResponse>

  /// Sponsor defines a permissionless method for sponsoring an upcoming, not yet funded incentive program.
  /// The sponsor must be a single account and the MsgSponsor must fully cover the expected program rewards.
  func sponsor(request: Umee_Incentive_V1_MsgSponsor, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgSponsorResponse>

  /// GovSetParams is used by governance proposals to update parameters.
  func govSetParams(request: Umee_Incentive_V1_MsgGovSetParams, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgGovSetParamsResponse>

  /// GovCreatePrograms is used by governance proposals to create and optionally fund incentive programs.
  func govCreatePrograms(request: Umee_Incentive_V1_MsgGovCreatePrograms, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_MsgGovCreateProgramsResponse>
}

extension Umee_Incentive_V1_MsgProvider {
  internal var serviceName: Substring {
    return Umee_Incentive_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Claim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgClaim>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgClaimResponse>(),
        interceptors: self.interceptors?.makeClaimInterceptors() ?? [],
        userFunction: self.claim(request:context:)
      )

    case "Bond":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgBond>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgBondResponse>(),
        interceptors: self.interceptors?.makeBondInterceptors() ?? [],
        userFunction: self.bond(request:context:)
      )

    case "BeginUnbonding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgBeginUnbonding>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgBeginUnbondingResponse>(),
        interceptors: self.interceptors?.makeBeginUnbondingInterceptors() ?? [],
        userFunction: self.beginUnbonding(request:context:)
      )

    case "EmergencyUnbond":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgEmergencyUnbond>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgEmergencyUnbondResponse>(),
        interceptors: self.interceptors?.makeEmergencyUnbondInterceptors() ?? [],
        userFunction: self.emergencyUnbond(request:context:)
      )

    case "Sponsor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgSponsor>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgSponsorResponse>(),
        interceptors: self.interceptors?.makeSponsorInterceptors() ?? [],
        userFunction: self.sponsor(request:context:)
      )

    case "GovSetParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgGovSetParams>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgGovSetParamsResponse>(),
        interceptors: self.interceptors?.makeGovSetParamsInterceptors() ?? [],
        userFunction: self.govSetParams(request:context:)
      )

    case "GovCreatePrograms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgGovCreatePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgGovCreateProgramsResponse>(),
        interceptors: self.interceptors?.makeGovCreateProgramsInterceptors() ?? [],
        userFunction: self.govCreatePrograms(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the x/incentive module's Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Incentive_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Incentive_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Claim defines a method for claiming any pending incentive rewards.
  @Sendable func claim(
    request: Umee_Incentive_V1_MsgClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgClaimResponse

  /// Bond defines a method for bonding uToken collateral.
  @Sendable func bond(
    request: Umee_Incentive_V1_MsgBond,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgBondResponse

  /// BeginUnbonding defines a method for starting to unbond uToken collateral.
  /// Only max_unbondings unbondings can be active at per user, per denom, at once.
  @Sendable func beginUnbonding(
    request: Umee_Incentive_V1_MsgBeginUnbonding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgBeginUnbondingResponse

  /// EmergencyUnbond defines a method for instantly unbonding uToken collateral in exchange for a fee.
  /// This can finish existing unbondings or unbond bonded tokens, and is not restricted by max_unbondings.
  @Sendable func emergencyUnbond(
    request: Umee_Incentive_V1_MsgEmergencyUnbond,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgEmergencyUnbondResponse

  /// Sponsor defines a permissionless method for sponsoring an upcoming, not yet funded incentive program.
  /// The sponsor must be a single account and the MsgSponsor must fully cover the expected program rewards.
  @Sendable func sponsor(
    request: Umee_Incentive_V1_MsgSponsor,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgSponsorResponse

  /// GovSetParams is used by governance proposals to update parameters.
  @Sendable func govSetParams(
    request: Umee_Incentive_V1_MsgGovSetParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgGovSetParamsResponse

  /// GovCreatePrograms is used by governance proposals to create and optionally fund incentive programs.
  @Sendable func govCreatePrograms(
    request: Umee_Incentive_V1_MsgGovCreatePrograms,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_MsgGovCreateProgramsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Incentive_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Incentive_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Umee_Incentive_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Umee_Incentive_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Claim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgClaim>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgClaimResponse>(),
        interceptors: self.interceptors?.makeClaimInterceptors() ?? [],
        wrapping: self.claim(request:context:)
      )

    case "Bond":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgBond>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgBondResponse>(),
        interceptors: self.interceptors?.makeBondInterceptors() ?? [],
        wrapping: self.bond(request:context:)
      )

    case "BeginUnbonding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgBeginUnbonding>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgBeginUnbondingResponse>(),
        interceptors: self.interceptors?.makeBeginUnbondingInterceptors() ?? [],
        wrapping: self.beginUnbonding(request:context:)
      )

    case "EmergencyUnbond":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgEmergencyUnbond>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgEmergencyUnbondResponse>(),
        interceptors: self.interceptors?.makeEmergencyUnbondInterceptors() ?? [],
        wrapping: self.emergencyUnbond(request:context:)
      )

    case "Sponsor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgSponsor>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgSponsorResponse>(),
        interceptors: self.interceptors?.makeSponsorInterceptors() ?? [],
        wrapping: self.sponsor(request:context:)
      )

    case "GovSetParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgGovSetParams>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgGovSetParamsResponse>(),
        interceptors: self.interceptors?.makeGovSetParamsInterceptors() ?? [],
        wrapping: self.govSetParams(request:context:)
      )

    case "GovCreatePrograms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_MsgGovCreatePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_MsgGovCreateProgramsResponse>(),
        interceptors: self.interceptors?.makeGovCreateProgramsInterceptors() ?? [],
        wrapping: self.govCreatePrograms(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umee_Incentive_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'claim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgClaim, Umee_Incentive_V1_MsgClaimResponse>]

  /// - Returns: Interceptors to use when handling 'bond'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBondInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgBond, Umee_Incentive_V1_MsgBondResponse>]

  /// - Returns: Interceptors to use when handling 'beginUnbonding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBeginUnbondingInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgBeginUnbonding, Umee_Incentive_V1_MsgBeginUnbondingResponse>]

  /// - Returns: Interceptors to use when handling 'emergencyUnbond'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEmergencyUnbondInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgEmergencyUnbond, Umee_Incentive_V1_MsgEmergencyUnbondResponse>]

  /// - Returns: Interceptors to use when handling 'sponsor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSponsorInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgSponsor, Umee_Incentive_V1_MsgSponsorResponse>]

  /// - Returns: Interceptors to use when handling 'govSetParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGovSetParamsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgGovSetParams, Umee_Incentive_V1_MsgGovSetParamsResponse>]

  /// - Returns: Interceptors to use when handling 'govCreatePrograms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGovCreateProgramsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_MsgGovCreatePrograms, Umee_Incentive_V1_MsgGovCreateProgramsResponse>]
}

internal enum Umee_Incentive_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "umee.incentive.v1.Msg",
    methods: [
      Umee_Incentive_V1_MsgServerMetadata.Methods.claim,
      Umee_Incentive_V1_MsgServerMetadata.Methods.bond,
      Umee_Incentive_V1_MsgServerMetadata.Methods.beginUnbonding,
      Umee_Incentive_V1_MsgServerMetadata.Methods.emergencyUnbond,
      Umee_Incentive_V1_MsgServerMetadata.Methods.sponsor,
      Umee_Incentive_V1_MsgServerMetadata.Methods.govSetParams,
      Umee_Incentive_V1_MsgServerMetadata.Methods.govCreatePrograms,
    ]
  )

  internal enum Methods {
    internal static let claim = GRPCMethodDescriptor(
      name: "Claim",
      path: "/umee.incentive.v1.Msg/Claim",
      type: GRPCCallType.unary
    )

    internal static let bond = GRPCMethodDescriptor(
      name: "Bond",
      path: "/umee.incentive.v1.Msg/Bond",
      type: GRPCCallType.unary
    )

    internal static let beginUnbonding = GRPCMethodDescriptor(
      name: "BeginUnbonding",
      path: "/umee.incentive.v1.Msg/BeginUnbonding",
      type: GRPCCallType.unary
    )

    internal static let emergencyUnbond = GRPCMethodDescriptor(
      name: "EmergencyUnbond",
      path: "/umee.incentive.v1.Msg/EmergencyUnbond",
      type: GRPCCallType.unary
    )

    internal static let sponsor = GRPCMethodDescriptor(
      name: "Sponsor",
      path: "/umee.incentive.v1.Msg/Sponsor",
      type: GRPCCallType.unary
    )

    internal static let govSetParams = GRPCMethodDescriptor(
      name: "GovSetParams",
      path: "/umee.incentive.v1.Msg/GovSetParams",
      type: GRPCCallType.unary
    )

    internal static let govCreatePrograms = GRPCMethodDescriptor(
      name: "GovCreatePrograms",
      path: "/umee.incentive.v1.Msg/GovCreatePrograms",
      type: GRPCCallType.unary
    )
  }
}
