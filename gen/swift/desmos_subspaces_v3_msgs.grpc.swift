//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/subspaces/v3/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines subspaces Msg service.
///
/// Usage: instantiate `Desmos_Subspaces_V3_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Subspaces_V3_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? { get }

  func createSubspace(
    _ request: Desmos_Subspaces_V3_MsgCreateSubspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgCreateSubspace, Desmos_Subspaces_V3_MsgCreateSubspaceResponse>

  func editSubspace(
    _ request: Desmos_Subspaces_V3_MsgEditSubspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgEditSubspace, Desmos_Subspaces_V3_MsgEditSubspaceResponse>

  func deleteSubspace(
    _ request: Desmos_Subspaces_V3_MsgDeleteSubspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgDeleteSubspace, Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>

  func createSection(
    _ request: Desmos_Subspaces_V3_MsgCreateSection,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgCreateSection, Desmos_Subspaces_V3_MsgCreateSectionResponse>

  func editSection(
    _ request: Desmos_Subspaces_V3_MsgEditSection,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgEditSection, Desmos_Subspaces_V3_MsgEditSectionResponse>

  func moveSection(
    _ request: Desmos_Subspaces_V3_MsgMoveSection,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgMoveSection, Desmos_Subspaces_V3_MsgMoveSectionResponse>

  func deleteSection(
    _ request: Desmos_Subspaces_V3_MsgDeleteSection,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgDeleteSection, Desmos_Subspaces_V3_MsgDeleteSectionResponse>

  func createUserGroup(
    _ request: Desmos_Subspaces_V3_MsgCreateUserGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgCreateUserGroup, Desmos_Subspaces_V3_MsgCreateUserGroupResponse>

  func editUserGroup(
    _ request: Desmos_Subspaces_V3_MsgEditUserGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgEditUserGroup, Desmos_Subspaces_V3_MsgEditUserGroupResponse>

  func moveUserGroup(
    _ request: Desmos_Subspaces_V3_MsgMoveUserGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgMoveUserGroup, Desmos_Subspaces_V3_MsgMoveUserGroupResponse>

  func setUserGroupPermissions(
    _ request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgSetUserGroupPermissions, Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>

  func deleteUserGroup(
    _ request: Desmos_Subspaces_V3_MsgDeleteUserGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgDeleteUserGroup, Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>

  func addUserToUserGroup(
    _ request: Desmos_Subspaces_V3_MsgAddUserToUserGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgAddUserToUserGroup, Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>

  func removeUserFromUserGroup(
    _ request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>

  func setUserPermissions(
    _ request: Desmos_Subspaces_V3_MsgSetUserPermissions,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgSetUserPermissions, Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>

  func grantTreasuryAuthorization(
    _ request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>

  func revokeTreasuryAuthorization(
    _ request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>

  func grantAllowance(
    _ request: Desmos_Subspaces_V3_MsgGrantAllowance,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgGrantAllowance, Desmos_Subspaces_V3_MsgGrantAllowanceResponse>

  func revokeAllowance(
    _ request: Desmos_Subspaces_V3_MsgRevokeAllowance,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgRevokeAllowance, Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>
}

extension Desmos_Subspaces_V3_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.subspaces.v3.Msg"
  }

  /// CreateSubspace allows to create a subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSubspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSubspace(
    _ request: Desmos_Subspaces_V3_MsgCreateSubspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgCreateSubspace, Desmos_Subspaces_V3_MsgCreateSubspaceResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? []
    )
  }

  /// EditSubspace allows to edit a subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to EditSubspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editSubspace(
    _ request: Desmos_Subspaces_V3_MsgEditSubspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgEditSubspace, Desmos_Subspaces_V3_MsgEditSubspaceResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? []
    )
  }

  /// DeleteSubspace allows to delete a subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSubspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSubspace(
    _ request: Desmos_Subspaces_V3_MsgDeleteSubspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgDeleteSubspace, Desmos_Subspaces_V3_MsgDeleteSubspaceResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSubspaceInterceptors() ?? []
    )
  }

  /// CreateSection allows to create a new subspace section
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSection(
    _ request: Desmos_Subspaces_V3_MsgCreateSection,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgCreateSection, Desmos_Subspaces_V3_MsgCreateSectionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSectionInterceptors() ?? []
    )
  }

  /// EditSection allows to edit an existing section
  ///
  /// - Parameters:
  ///   - request: Request to send to EditSection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editSection(
    _ request: Desmos_Subspaces_V3_MsgEditSection,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgEditSection, Desmos_Subspaces_V3_MsgEditSectionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSectionInterceptors() ?? []
    )
  }

  /// MoveSection allows to move an existing section to another parent
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveSection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moveSection(
    _ request: Desmos_Subspaces_V3_MsgMoveSection,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgMoveSection, Desmos_Subspaces_V3_MsgMoveSectionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveSectionInterceptors() ?? []
    )
  }

  /// DeleteSection allows to delete an existing section
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSection(
    _ request: Desmos_Subspaces_V3_MsgDeleteSection,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgDeleteSection, Desmos_Subspaces_V3_MsgDeleteSectionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSectionInterceptors() ?? []
    )
  }

  /// CreateUserGroup allows to create a user group
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createUserGroup(
    _ request: Desmos_Subspaces_V3_MsgCreateUserGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgCreateUserGroup, Desmos_Subspaces_V3_MsgCreateUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserGroupInterceptors() ?? []
    )
  }

  /// EditUserGroup allows to edit a user group
  ///
  /// - Parameters:
  ///   - request: Request to send to EditUserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editUserGroup(
    _ request: Desmos_Subspaces_V3_MsgEditUserGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgEditUserGroup, Desmos_Subspaces_V3_MsgEditUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditUserGroupInterceptors() ?? []
    )
  }

  /// MoveUserGroup allows to move a user group from a section to another
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveUserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moveUserGroup(
    _ request: Desmos_Subspaces_V3_MsgMoveUserGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgMoveUserGroup, Desmos_Subspaces_V3_MsgMoveUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveUserGroupInterceptors() ?? []
    )
  }

  /// SetUserGroupPermissions allows to set the permissions for a specific group
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUserGroupPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setUserGroupPermissions(
    _ request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgSetUserGroupPermissions, Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserGroupPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupPermissionsInterceptors() ?? []
    )
  }

  /// DeleteUserGroup allows to delete an existing user group
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteUserGroup(
    _ request: Desmos_Subspaces_V3_MsgDeleteUserGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgDeleteUserGroup, Desmos_Subspaces_V3_MsgDeleteUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserGroupInterceptors() ?? []
    )
  }

  /// AddUserToUserGroup allows to add a specific user to a specific user group
  ///
  /// - Parameters:
  ///   - request: Request to send to AddUserToUserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addUserToUserGroup(
    _ request: Desmos_Subspaces_V3_MsgAddUserToUserGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgAddUserToUserGroup, Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.addUserToUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddUserToUserGroupInterceptors() ?? []
    )
  }

  /// RemoveUserFromUserGroup allows to remove a specific user from a specific
  /// user group
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveUserFromUserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeUserFromUserGroup(
    _ request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.removeUserFromUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveUserFromUserGroupInterceptors() ?? []
    )
  }

  /// SetUserPermissions allows to set the permissions for a specific user
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUserPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setUserPermissions(
    _ request: Desmos_Subspaces_V3_MsgSetUserPermissions,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgSetUserPermissions, Desmos_Subspaces_V3_MsgSetUserPermissionsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserPermissionsInterceptors() ?? []
    )
  }

  /// GrantTreasuryAuthorization allows managers who have the permission to grant
  /// a treasury authorization to a user
  ///
  /// - Parameters:
  ///   - request: Request to send to GrantTreasuryAuthorization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func grantTreasuryAuthorization(
    _ request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantTreasuryAuthorization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantTreasuryAuthorizationInterceptors() ?? []
    )
  }

  /// RevokeTreasuryAuthorization allows managers who have the permission to
  /// revoke an existing treasury authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeTreasuryAuthorization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeTreasuryAuthorization(
    _ request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeTreasuryAuthorization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeTreasuryAuthorizationInterceptors() ?? []
    )
  }

  /// GrantAllowance allows the granter to grant a fee allowance to the
  /// grantee
  ///
  /// - Parameters:
  ///   - request: Request to send to GrantAllowance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func grantAllowance(
    _ request: Desmos_Subspaces_V3_MsgGrantAllowance,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgGrantAllowance, Desmos_Subspaces_V3_MsgGrantAllowanceResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? []
    )
  }

  /// RevokeAllowance allows a granter to revoke any existing treasury allowance
  /// that has been granted to the grantee
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeAllowance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeAllowance(
    _ request: Desmos_Subspaces_V3_MsgRevokeAllowance,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_MsgRevokeAllowance, Desmos_Subspaces_V3_MsgRevokeAllowanceResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAllowanceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Desmos_Subspaces_V3_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Desmos_Subspaces_V3_MsgNIOClient")
internal final class Desmos_Subspaces_V3_MsgClient: Desmos_Subspaces_V3_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the desmos.subspaces.v3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Desmos_Subspaces_V3_MsgNIOClient: Desmos_Subspaces_V3_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.subspaces.v3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines subspaces Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Subspaces_V3_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateSubspaceCall(
    _ request: Desmos_Subspaces_V3_MsgCreateSubspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgCreateSubspace, Desmos_Subspaces_V3_MsgCreateSubspaceResponse>

  func makeEditSubspaceCall(
    _ request: Desmos_Subspaces_V3_MsgEditSubspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgEditSubspace, Desmos_Subspaces_V3_MsgEditSubspaceResponse>

  func makeDeleteSubspaceCall(
    _ request: Desmos_Subspaces_V3_MsgDeleteSubspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgDeleteSubspace, Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>

  func makeCreateSectionCall(
    _ request: Desmos_Subspaces_V3_MsgCreateSection,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgCreateSection, Desmos_Subspaces_V3_MsgCreateSectionResponse>

  func makeEditSectionCall(
    _ request: Desmos_Subspaces_V3_MsgEditSection,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgEditSection, Desmos_Subspaces_V3_MsgEditSectionResponse>

  func makeMoveSectionCall(
    _ request: Desmos_Subspaces_V3_MsgMoveSection,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgMoveSection, Desmos_Subspaces_V3_MsgMoveSectionResponse>

  func makeDeleteSectionCall(
    _ request: Desmos_Subspaces_V3_MsgDeleteSection,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgDeleteSection, Desmos_Subspaces_V3_MsgDeleteSectionResponse>

  func makeCreateUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgCreateUserGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgCreateUserGroup, Desmos_Subspaces_V3_MsgCreateUserGroupResponse>

  func makeEditUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgEditUserGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgEditUserGroup, Desmos_Subspaces_V3_MsgEditUserGroupResponse>

  func makeMoveUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgMoveUserGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgMoveUserGroup, Desmos_Subspaces_V3_MsgMoveUserGroupResponse>

  func makeSetUserGroupPermissionsCall(
    _ request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgSetUserGroupPermissions, Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>

  func makeDeleteUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgDeleteUserGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgDeleteUserGroup, Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>

  func makeAddUserToUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgAddUserToUserGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgAddUserToUserGroup, Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>

  func makeRemoveUserFromUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>

  func makeSetUserPermissionsCall(
    _ request: Desmos_Subspaces_V3_MsgSetUserPermissions,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgSetUserPermissions, Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>

  func makeGrantTreasuryAuthorizationCall(
    _ request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>

  func makeRevokeTreasuryAuthorizationCall(
    _ request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>

  func makeGrantAllowanceCall(
    _ request: Desmos_Subspaces_V3_MsgGrantAllowance,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgGrantAllowance, Desmos_Subspaces_V3_MsgGrantAllowanceResponse>

  func makeRevokeAllowanceCall(
    _ request: Desmos_Subspaces_V3_MsgRevokeAllowance,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgRevokeAllowance, Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Subspaces_V3_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Subspaces_V3_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateSubspaceCall(
    _ request: Desmos_Subspaces_V3_MsgCreateSubspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgCreateSubspace, Desmos_Subspaces_V3_MsgCreateSubspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? []
    )
  }

  internal func makeEditSubspaceCall(
    _ request: Desmos_Subspaces_V3_MsgEditSubspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgEditSubspace, Desmos_Subspaces_V3_MsgEditSubspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? []
    )
  }

  internal func makeDeleteSubspaceCall(
    _ request: Desmos_Subspaces_V3_MsgDeleteSubspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgDeleteSubspace, Desmos_Subspaces_V3_MsgDeleteSubspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSubspaceInterceptors() ?? []
    )
  }

  internal func makeCreateSectionCall(
    _ request: Desmos_Subspaces_V3_MsgCreateSection,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgCreateSection, Desmos_Subspaces_V3_MsgCreateSectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSectionInterceptors() ?? []
    )
  }

  internal func makeEditSectionCall(
    _ request: Desmos_Subspaces_V3_MsgEditSection,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgEditSection, Desmos_Subspaces_V3_MsgEditSectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSectionInterceptors() ?? []
    )
  }

  internal func makeMoveSectionCall(
    _ request: Desmos_Subspaces_V3_MsgMoveSection,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgMoveSection, Desmos_Subspaces_V3_MsgMoveSectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveSectionInterceptors() ?? []
    )
  }

  internal func makeDeleteSectionCall(
    _ request: Desmos_Subspaces_V3_MsgDeleteSection,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgDeleteSection, Desmos_Subspaces_V3_MsgDeleteSectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSectionInterceptors() ?? []
    )
  }

  internal func makeCreateUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgCreateUserGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgCreateUserGroup, Desmos_Subspaces_V3_MsgCreateUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserGroupInterceptors() ?? []
    )
  }

  internal func makeEditUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgEditUserGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgEditUserGroup, Desmos_Subspaces_V3_MsgEditUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditUserGroupInterceptors() ?? []
    )
  }

  internal func makeMoveUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgMoveUserGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgMoveUserGroup, Desmos_Subspaces_V3_MsgMoveUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveUserGroupInterceptors() ?? []
    )
  }

  internal func makeSetUserGroupPermissionsCall(
    _ request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgSetUserGroupPermissions, Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserGroupPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupPermissionsInterceptors() ?? []
    )
  }

  internal func makeDeleteUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgDeleteUserGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgDeleteUserGroup, Desmos_Subspaces_V3_MsgDeleteUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserGroupInterceptors() ?? []
    )
  }

  internal func makeAddUserToUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgAddUserToUserGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgAddUserToUserGroup, Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.addUserToUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddUserToUserGroupInterceptors() ?? []
    )
  }

  internal func makeRemoveUserFromUserGroupCall(
    _ request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.removeUserFromUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveUserFromUserGroupInterceptors() ?? []
    )
  }

  internal func makeSetUserPermissionsCall(
    _ request: Desmos_Subspaces_V3_MsgSetUserPermissions,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgSetUserPermissions, Desmos_Subspaces_V3_MsgSetUserPermissionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserPermissionsInterceptors() ?? []
    )
  }

  internal func makeGrantTreasuryAuthorizationCall(
    _ request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantTreasuryAuthorization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantTreasuryAuthorizationInterceptors() ?? []
    )
  }

  internal func makeRevokeTreasuryAuthorizationCall(
    _ request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeTreasuryAuthorization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeTreasuryAuthorizationInterceptors() ?? []
    )
  }

  internal func makeGrantAllowanceCall(
    _ request: Desmos_Subspaces_V3_MsgGrantAllowance,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgGrantAllowance, Desmos_Subspaces_V3_MsgGrantAllowanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? []
    )
  }

  internal func makeRevokeAllowanceCall(
    _ request: Desmos_Subspaces_V3_MsgRevokeAllowance,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_MsgRevokeAllowance, Desmos_Subspaces_V3_MsgRevokeAllowanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAllowanceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Subspaces_V3_MsgAsyncClientProtocol {
  internal func createSubspace(
    _ request: Desmos_Subspaces_V3_MsgCreateSubspace,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgCreateSubspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? []
    )
  }

  internal func editSubspace(
    _ request: Desmos_Subspaces_V3_MsgEditSubspace,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgEditSubspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? []
    )
  }

  internal func deleteSubspace(
    _ request: Desmos_Subspaces_V3_MsgDeleteSubspace,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgDeleteSubspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSubspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSubspaceInterceptors() ?? []
    )
  }

  internal func createSection(
    _ request: Desmos_Subspaces_V3_MsgCreateSection,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgCreateSectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSectionInterceptors() ?? []
    )
  }

  internal func editSection(
    _ request: Desmos_Subspaces_V3_MsgEditSection,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgEditSectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSectionInterceptors() ?? []
    )
  }

  internal func moveSection(
    _ request: Desmos_Subspaces_V3_MsgMoveSection,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgMoveSectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveSectionInterceptors() ?? []
    )
  }

  internal func deleteSection(
    _ request: Desmos_Subspaces_V3_MsgDeleteSection,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgDeleteSectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSectionInterceptors() ?? []
    )
  }

  internal func createUserGroup(
    _ request: Desmos_Subspaces_V3_MsgCreateUserGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgCreateUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.createUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserGroupInterceptors() ?? []
    )
  }

  internal func editUserGroup(
    _ request: Desmos_Subspaces_V3_MsgEditUserGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgEditUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.editUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditUserGroupInterceptors() ?? []
    )
  }

  internal func moveUserGroup(
    _ request: Desmos_Subspaces_V3_MsgMoveUserGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgMoveUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveUserGroupInterceptors() ?? []
    )
  }

  internal func setUserGroupPermissions(
    _ request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserGroupPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserGroupPermissionsInterceptors() ?? []
    )
  }

  internal func deleteUserGroup(
    _ request: Desmos_Subspaces_V3_MsgDeleteUserGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgDeleteUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserGroupInterceptors() ?? []
    )
  }

  internal func addUserToUserGroup(
    _ request: Desmos_Subspaces_V3_MsgAddUserToUserGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.addUserToUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddUserToUserGroupInterceptors() ?? []
    )
  }

  internal func removeUserFromUserGroup(
    _ request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.removeUserFromUserGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveUserFromUserGroupInterceptors() ?? []
    )
  }

  internal func setUserPermissions(
    _ request: Desmos_Subspaces_V3_MsgSetUserPermissions,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgSetUserPermissionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUserPermissionsInterceptors() ?? []
    )
  }

  internal func grantTreasuryAuthorization(
    _ request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantTreasuryAuthorization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantTreasuryAuthorizationInterceptors() ?? []
    )
  }

  internal func revokeTreasuryAuthorization(
    _ request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeTreasuryAuthorization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeTreasuryAuthorizationInterceptors() ?? []
    )
  }

  internal func grantAllowance(
    _ request: Desmos_Subspaces_V3_MsgGrantAllowance,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgGrantAllowanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? []
    )
  }

  internal func revokeAllowance(
    _ request: Desmos_Subspaces_V3_MsgRevokeAllowance,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_MsgRevokeAllowanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAllowanceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Desmos_Subspaces_V3_MsgAsyncClient: Desmos_Subspaces_V3_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Desmos_Subspaces_V3_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createSubspace'.
  func makeCreateSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgCreateSubspace, Desmos_Subspaces_V3_MsgCreateSubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'editSubspace'.
  func makeEditSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgEditSubspace, Desmos_Subspaces_V3_MsgEditSubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSubspace'.
  func makeDeleteSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgDeleteSubspace, Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'createSection'.
  func makeCreateSectionInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgCreateSection, Desmos_Subspaces_V3_MsgCreateSectionResponse>]

  /// - Returns: Interceptors to use when invoking 'editSection'.
  func makeEditSectionInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgEditSection, Desmos_Subspaces_V3_MsgEditSectionResponse>]

  /// - Returns: Interceptors to use when invoking 'moveSection'.
  func makeMoveSectionInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgMoveSection, Desmos_Subspaces_V3_MsgMoveSectionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSection'.
  func makeDeleteSectionInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgDeleteSection, Desmos_Subspaces_V3_MsgDeleteSectionResponse>]

  /// - Returns: Interceptors to use when invoking 'createUserGroup'.
  func makeCreateUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgCreateUserGroup, Desmos_Subspaces_V3_MsgCreateUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'editUserGroup'.
  func makeEditUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgEditUserGroup, Desmos_Subspaces_V3_MsgEditUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'moveUserGroup'.
  func makeMoveUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgMoveUserGroup, Desmos_Subspaces_V3_MsgMoveUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'setUserGroupPermissions'.
  func makeSetUserGroupPermissionsInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgSetUserGroupPermissions, Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteUserGroup'.
  func makeDeleteUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgDeleteUserGroup, Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'addUserToUserGroup'.
  func makeAddUserToUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgAddUserToUserGroup, Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'removeUserFromUserGroup'.
  func makeRemoveUserFromUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'setUserPermissions'.
  func makeSetUserPermissionsInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgSetUserPermissions, Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>]

  /// - Returns: Interceptors to use when invoking 'grantTreasuryAuthorization'.
  func makeGrantTreasuryAuthorizationInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeTreasuryAuthorization'.
  func makeRevokeTreasuryAuthorizationInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>]

  /// - Returns: Interceptors to use when invoking 'grantAllowance'.
  func makeGrantAllowanceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgGrantAllowance, Desmos_Subspaces_V3_MsgGrantAllowanceResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeAllowance'.
  func makeRevokeAllowanceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_MsgRevokeAllowance, Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>]
}

internal enum Desmos_Subspaces_V3_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.subspaces.v3.Msg",
    methods: [
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSubspace,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSubspace,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSubspace,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.createSection,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.editSection,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveSection,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteSection,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.createUserGroup,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.editUserGroup,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.moveUserGroup,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserGroupPermissions,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.deleteUserGroup,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.addUserToUserGroup,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.removeUserFromUserGroup,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.setUserPermissions,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantTreasuryAuthorization,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeTreasuryAuthorization,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.grantAllowance,
      Desmos_Subspaces_V3_MsgClientMetadata.Methods.revokeAllowance,
    ]
  )

  internal enum Methods {
    internal static let createSubspace = GRPCMethodDescriptor(
      name: "CreateSubspace",
      path: "/desmos.subspaces.v3.Msg/CreateSubspace",
      type: GRPCCallType.unary
    )

    internal static let editSubspace = GRPCMethodDescriptor(
      name: "EditSubspace",
      path: "/desmos.subspaces.v3.Msg/EditSubspace",
      type: GRPCCallType.unary
    )

    internal static let deleteSubspace = GRPCMethodDescriptor(
      name: "DeleteSubspace",
      path: "/desmos.subspaces.v3.Msg/DeleteSubspace",
      type: GRPCCallType.unary
    )

    internal static let createSection = GRPCMethodDescriptor(
      name: "CreateSection",
      path: "/desmos.subspaces.v3.Msg/CreateSection",
      type: GRPCCallType.unary
    )

    internal static let editSection = GRPCMethodDescriptor(
      name: "EditSection",
      path: "/desmos.subspaces.v3.Msg/EditSection",
      type: GRPCCallType.unary
    )

    internal static let moveSection = GRPCMethodDescriptor(
      name: "MoveSection",
      path: "/desmos.subspaces.v3.Msg/MoveSection",
      type: GRPCCallType.unary
    )

    internal static let deleteSection = GRPCMethodDescriptor(
      name: "DeleteSection",
      path: "/desmos.subspaces.v3.Msg/DeleteSection",
      type: GRPCCallType.unary
    )

    internal static let createUserGroup = GRPCMethodDescriptor(
      name: "CreateUserGroup",
      path: "/desmos.subspaces.v3.Msg/CreateUserGroup",
      type: GRPCCallType.unary
    )

    internal static let editUserGroup = GRPCMethodDescriptor(
      name: "EditUserGroup",
      path: "/desmos.subspaces.v3.Msg/EditUserGroup",
      type: GRPCCallType.unary
    )

    internal static let moveUserGroup = GRPCMethodDescriptor(
      name: "MoveUserGroup",
      path: "/desmos.subspaces.v3.Msg/MoveUserGroup",
      type: GRPCCallType.unary
    )

    internal static let setUserGroupPermissions = GRPCMethodDescriptor(
      name: "SetUserGroupPermissions",
      path: "/desmos.subspaces.v3.Msg/SetUserGroupPermissions",
      type: GRPCCallType.unary
    )

    internal static let deleteUserGroup = GRPCMethodDescriptor(
      name: "DeleteUserGroup",
      path: "/desmos.subspaces.v3.Msg/DeleteUserGroup",
      type: GRPCCallType.unary
    )

    internal static let addUserToUserGroup = GRPCMethodDescriptor(
      name: "AddUserToUserGroup",
      path: "/desmos.subspaces.v3.Msg/AddUserToUserGroup",
      type: GRPCCallType.unary
    )

    internal static let removeUserFromUserGroup = GRPCMethodDescriptor(
      name: "RemoveUserFromUserGroup",
      path: "/desmos.subspaces.v3.Msg/RemoveUserFromUserGroup",
      type: GRPCCallType.unary
    )

    internal static let setUserPermissions = GRPCMethodDescriptor(
      name: "SetUserPermissions",
      path: "/desmos.subspaces.v3.Msg/SetUserPermissions",
      type: GRPCCallType.unary
    )

    internal static let grantTreasuryAuthorization = GRPCMethodDescriptor(
      name: "GrantTreasuryAuthorization",
      path: "/desmos.subspaces.v3.Msg/GrantTreasuryAuthorization",
      type: GRPCCallType.unary
    )

    internal static let revokeTreasuryAuthorization = GRPCMethodDescriptor(
      name: "RevokeTreasuryAuthorization",
      path: "/desmos.subspaces.v3.Msg/RevokeTreasuryAuthorization",
      type: GRPCCallType.unary
    )

    internal static let grantAllowance = GRPCMethodDescriptor(
      name: "GrantAllowance",
      path: "/desmos.subspaces.v3.Msg/GrantAllowance",
      type: GRPCCallType.unary
    )

    internal static let revokeAllowance = GRPCMethodDescriptor(
      name: "RevokeAllowance",
      path: "/desmos.subspaces.v3.Msg/RevokeAllowance",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines subspaces Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Subspaces_V3_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Subspaces_V3_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateSubspace allows to create a subspace
  func createSubspace(request: Desmos_Subspaces_V3_MsgCreateSubspace, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgCreateSubspaceResponse>

  /// EditSubspace allows to edit a subspace
  func editSubspace(request: Desmos_Subspaces_V3_MsgEditSubspace, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgEditSubspaceResponse>

  /// DeleteSubspace allows to delete a subspace
  func deleteSubspace(request: Desmos_Subspaces_V3_MsgDeleteSubspace, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>

  /// CreateSection allows to create a new subspace section
  func createSection(request: Desmos_Subspaces_V3_MsgCreateSection, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgCreateSectionResponse>

  /// EditSection allows to edit an existing section
  func editSection(request: Desmos_Subspaces_V3_MsgEditSection, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgEditSectionResponse>

  /// MoveSection allows to move an existing section to another parent
  func moveSection(request: Desmos_Subspaces_V3_MsgMoveSection, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgMoveSectionResponse>

  /// DeleteSection allows to delete an existing section
  func deleteSection(request: Desmos_Subspaces_V3_MsgDeleteSection, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgDeleteSectionResponse>

  /// CreateUserGroup allows to create a user group
  func createUserGroup(request: Desmos_Subspaces_V3_MsgCreateUserGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgCreateUserGroupResponse>

  /// EditUserGroup allows to edit a user group
  func editUserGroup(request: Desmos_Subspaces_V3_MsgEditUserGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgEditUserGroupResponse>

  /// MoveUserGroup allows to move a user group from a section to another
  func moveUserGroup(request: Desmos_Subspaces_V3_MsgMoveUserGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgMoveUserGroupResponse>

  /// SetUserGroupPermissions allows to set the permissions for a specific group
  func setUserGroupPermissions(request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>

  /// DeleteUserGroup allows to delete an existing user group
  func deleteUserGroup(request: Desmos_Subspaces_V3_MsgDeleteUserGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>

  /// AddUserToUserGroup allows to add a specific user to a specific user group
  func addUserToUserGroup(request: Desmos_Subspaces_V3_MsgAddUserToUserGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>

  /// RemoveUserFromUserGroup allows to remove a specific user from a specific
  /// user group
  func removeUserFromUserGroup(request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>

  /// SetUserPermissions allows to set the permissions for a specific user
  func setUserPermissions(request: Desmos_Subspaces_V3_MsgSetUserPermissions, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>

  /// GrantTreasuryAuthorization allows managers who have the permission to grant
  /// a treasury authorization to a user
  func grantTreasuryAuthorization(request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>

  /// RevokeTreasuryAuthorization allows managers who have the permission to
  /// revoke an existing treasury authorization
  func revokeTreasuryAuthorization(request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>

  /// GrantAllowance allows the granter to grant a fee allowance to the
  /// grantee
  func grantAllowance(request: Desmos_Subspaces_V3_MsgGrantAllowance, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgGrantAllowanceResponse>

  /// RevokeAllowance allows a granter to revoke any existing treasury allowance
  /// that has been granted to the grantee
  func revokeAllowance(request: Desmos_Subspaces_V3_MsgRevokeAllowance, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>
}

extension Desmos_Subspaces_V3_MsgProvider {
  internal var serviceName: Substring {
    return Desmos_Subspaces_V3_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateSubspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgCreateSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgCreateSubspaceResponse>(),
        interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? [],
        userFunction: self.createSubspace(request:context:)
      )

    case "EditSubspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgEditSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgEditSubspaceResponse>(),
        interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? [],
        userFunction: self.editSubspace(request:context:)
      )

    case "DeleteSubspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgDeleteSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>(),
        interceptors: self.interceptors?.makeDeleteSubspaceInterceptors() ?? [],
        userFunction: self.deleteSubspace(request:context:)
      )

    case "CreateSection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgCreateSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgCreateSectionResponse>(),
        interceptors: self.interceptors?.makeCreateSectionInterceptors() ?? [],
        userFunction: self.createSection(request:context:)
      )

    case "EditSection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgEditSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgEditSectionResponse>(),
        interceptors: self.interceptors?.makeEditSectionInterceptors() ?? [],
        userFunction: self.editSection(request:context:)
      )

    case "MoveSection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgMoveSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgMoveSectionResponse>(),
        interceptors: self.interceptors?.makeMoveSectionInterceptors() ?? [],
        userFunction: self.moveSection(request:context:)
      )

    case "DeleteSection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgDeleteSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgDeleteSectionResponse>(),
        interceptors: self.interceptors?.makeDeleteSectionInterceptors() ?? [],
        userFunction: self.deleteSection(request:context:)
      )

    case "CreateUserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgCreateUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgCreateUserGroupResponse>(),
        interceptors: self.interceptors?.makeCreateUserGroupInterceptors() ?? [],
        userFunction: self.createUserGroup(request:context:)
      )

    case "EditUserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgEditUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgEditUserGroupResponse>(),
        interceptors: self.interceptors?.makeEditUserGroupInterceptors() ?? [],
        userFunction: self.editUserGroup(request:context:)
      )

    case "MoveUserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgMoveUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgMoveUserGroupResponse>(),
        interceptors: self.interceptors?.makeMoveUserGroupInterceptors() ?? [],
        userFunction: self.moveUserGroup(request:context:)
      )

    case "SetUserGroupPermissions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgSetUserGroupPermissions>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>(),
        interceptors: self.interceptors?.makeSetUserGroupPermissionsInterceptors() ?? [],
        userFunction: self.setUserGroupPermissions(request:context:)
      )

    case "DeleteUserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgDeleteUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>(),
        interceptors: self.interceptors?.makeDeleteUserGroupInterceptors() ?? [],
        userFunction: self.deleteUserGroup(request:context:)
      )

    case "AddUserToUserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgAddUserToUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>(),
        interceptors: self.interceptors?.makeAddUserToUserGroupInterceptors() ?? [],
        userFunction: self.addUserToUserGroup(request:context:)
      )

    case "RemoveUserFromUserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>(),
        interceptors: self.interceptors?.makeRemoveUserFromUserGroupInterceptors() ?? [],
        userFunction: self.removeUserFromUserGroup(request:context:)
      )

    case "SetUserPermissions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgSetUserPermissions>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>(),
        interceptors: self.interceptors?.makeSetUserPermissionsInterceptors() ?? [],
        userFunction: self.setUserPermissions(request:context:)
      )

    case "GrantTreasuryAuthorization":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>(),
        interceptors: self.interceptors?.makeGrantTreasuryAuthorizationInterceptors() ?? [],
        userFunction: self.grantTreasuryAuthorization(request:context:)
      )

    case "RevokeTreasuryAuthorization":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>(),
        interceptors: self.interceptors?.makeRevokeTreasuryAuthorizationInterceptors() ?? [],
        userFunction: self.revokeTreasuryAuthorization(request:context:)
      )

    case "GrantAllowance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgGrantAllowance>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgGrantAllowanceResponse>(),
        interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? [],
        userFunction: self.grantAllowance(request:context:)
      )

    case "RevokeAllowance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgRevokeAllowance>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>(),
        interceptors: self.interceptors?.makeRevokeAllowanceInterceptors() ?? [],
        userFunction: self.revokeAllowance(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines subspaces Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Subspaces_V3_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Subspaces_V3_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateSubspace allows to create a subspace
  @Sendable func createSubspace(
    request: Desmos_Subspaces_V3_MsgCreateSubspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgCreateSubspaceResponse

  /// EditSubspace allows to edit a subspace
  @Sendable func editSubspace(
    request: Desmos_Subspaces_V3_MsgEditSubspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgEditSubspaceResponse

  /// DeleteSubspace allows to delete a subspace
  @Sendable func deleteSubspace(
    request: Desmos_Subspaces_V3_MsgDeleteSubspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgDeleteSubspaceResponse

  /// CreateSection allows to create a new subspace section
  @Sendable func createSection(
    request: Desmos_Subspaces_V3_MsgCreateSection,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgCreateSectionResponse

  /// EditSection allows to edit an existing section
  @Sendable func editSection(
    request: Desmos_Subspaces_V3_MsgEditSection,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgEditSectionResponse

  /// MoveSection allows to move an existing section to another parent
  @Sendable func moveSection(
    request: Desmos_Subspaces_V3_MsgMoveSection,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgMoveSectionResponse

  /// DeleteSection allows to delete an existing section
  @Sendable func deleteSection(
    request: Desmos_Subspaces_V3_MsgDeleteSection,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgDeleteSectionResponse

  /// CreateUserGroup allows to create a user group
  @Sendable func createUserGroup(
    request: Desmos_Subspaces_V3_MsgCreateUserGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgCreateUserGroupResponse

  /// EditUserGroup allows to edit a user group
  @Sendable func editUserGroup(
    request: Desmos_Subspaces_V3_MsgEditUserGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgEditUserGroupResponse

  /// MoveUserGroup allows to move a user group from a section to another
  @Sendable func moveUserGroup(
    request: Desmos_Subspaces_V3_MsgMoveUserGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgMoveUserGroupResponse

  /// SetUserGroupPermissions allows to set the permissions for a specific group
  @Sendable func setUserGroupPermissions(
    request: Desmos_Subspaces_V3_MsgSetUserGroupPermissions,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse

  /// DeleteUserGroup allows to delete an existing user group
  @Sendable func deleteUserGroup(
    request: Desmos_Subspaces_V3_MsgDeleteUserGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgDeleteUserGroupResponse

  /// AddUserToUserGroup allows to add a specific user to a specific user group
  @Sendable func addUserToUserGroup(
    request: Desmos_Subspaces_V3_MsgAddUserToUserGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse

  /// RemoveUserFromUserGroup allows to remove a specific user from a specific
  /// user group
  @Sendable func removeUserFromUserGroup(
    request: Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse

  /// SetUserPermissions allows to set the permissions for a specific user
  @Sendable func setUserPermissions(
    request: Desmos_Subspaces_V3_MsgSetUserPermissions,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgSetUserPermissionsResponse

  /// GrantTreasuryAuthorization allows managers who have the permission to grant
  /// a treasury authorization to a user
  @Sendable func grantTreasuryAuthorization(
    request: Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse

  /// RevokeTreasuryAuthorization allows managers who have the permission to
  /// revoke an existing treasury authorization
  @Sendable func revokeTreasuryAuthorization(
    request: Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse

  /// GrantAllowance allows the granter to grant a fee allowance to the
  /// grantee
  @Sendable func grantAllowance(
    request: Desmos_Subspaces_V3_MsgGrantAllowance,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgGrantAllowanceResponse

  /// RevokeAllowance allows a granter to revoke any existing treasury allowance
  /// that has been granted to the grantee
  @Sendable func revokeAllowance(
    request: Desmos_Subspaces_V3_MsgRevokeAllowance,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_MsgRevokeAllowanceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Subspaces_V3_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Subspaces_V3_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Desmos_Subspaces_V3_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Desmos_Subspaces_V3_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateSubspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgCreateSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgCreateSubspaceResponse>(),
        interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? [],
        wrapping: self.createSubspace(request:context:)
      )

    case "EditSubspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgEditSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgEditSubspaceResponse>(),
        interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? [],
        wrapping: self.editSubspace(request:context:)
      )

    case "DeleteSubspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgDeleteSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>(),
        interceptors: self.interceptors?.makeDeleteSubspaceInterceptors() ?? [],
        wrapping: self.deleteSubspace(request:context:)
      )

    case "CreateSection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgCreateSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgCreateSectionResponse>(),
        interceptors: self.interceptors?.makeCreateSectionInterceptors() ?? [],
        wrapping: self.createSection(request:context:)
      )

    case "EditSection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgEditSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgEditSectionResponse>(),
        interceptors: self.interceptors?.makeEditSectionInterceptors() ?? [],
        wrapping: self.editSection(request:context:)
      )

    case "MoveSection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgMoveSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgMoveSectionResponse>(),
        interceptors: self.interceptors?.makeMoveSectionInterceptors() ?? [],
        wrapping: self.moveSection(request:context:)
      )

    case "DeleteSection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgDeleteSection>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgDeleteSectionResponse>(),
        interceptors: self.interceptors?.makeDeleteSectionInterceptors() ?? [],
        wrapping: self.deleteSection(request:context:)
      )

    case "CreateUserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgCreateUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgCreateUserGroupResponse>(),
        interceptors: self.interceptors?.makeCreateUserGroupInterceptors() ?? [],
        wrapping: self.createUserGroup(request:context:)
      )

    case "EditUserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgEditUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgEditUserGroupResponse>(),
        interceptors: self.interceptors?.makeEditUserGroupInterceptors() ?? [],
        wrapping: self.editUserGroup(request:context:)
      )

    case "MoveUserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgMoveUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgMoveUserGroupResponse>(),
        interceptors: self.interceptors?.makeMoveUserGroupInterceptors() ?? [],
        wrapping: self.moveUserGroup(request:context:)
      )

    case "SetUserGroupPermissions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgSetUserGroupPermissions>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>(),
        interceptors: self.interceptors?.makeSetUserGroupPermissionsInterceptors() ?? [],
        wrapping: self.setUserGroupPermissions(request:context:)
      )

    case "DeleteUserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgDeleteUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>(),
        interceptors: self.interceptors?.makeDeleteUserGroupInterceptors() ?? [],
        wrapping: self.deleteUserGroup(request:context:)
      )

    case "AddUserToUserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgAddUserToUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>(),
        interceptors: self.interceptors?.makeAddUserToUserGroupInterceptors() ?? [],
        wrapping: self.addUserToUserGroup(request:context:)
      )

    case "RemoveUserFromUserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>(),
        interceptors: self.interceptors?.makeRemoveUserFromUserGroupInterceptors() ?? [],
        wrapping: self.removeUserFromUserGroup(request:context:)
      )

    case "SetUserPermissions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgSetUserPermissions>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>(),
        interceptors: self.interceptors?.makeSetUserPermissionsInterceptors() ?? [],
        wrapping: self.setUserPermissions(request:context:)
      )

    case "GrantTreasuryAuthorization":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>(),
        interceptors: self.interceptors?.makeGrantTreasuryAuthorizationInterceptors() ?? [],
        wrapping: self.grantTreasuryAuthorization(request:context:)
      )

    case "RevokeTreasuryAuthorization":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>(),
        interceptors: self.interceptors?.makeRevokeTreasuryAuthorizationInterceptors() ?? [],
        wrapping: self.revokeTreasuryAuthorization(request:context:)
      )

    case "GrantAllowance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgGrantAllowance>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgGrantAllowanceResponse>(),
        interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? [],
        wrapping: self.grantAllowance(request:context:)
      )

    case "RevokeAllowance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_MsgRevokeAllowance>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>(),
        interceptors: self.interceptors?.makeRevokeAllowanceInterceptors() ?? [],
        wrapping: self.revokeAllowance(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Subspaces_V3_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createSubspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgCreateSubspace, Desmos_Subspaces_V3_MsgCreateSubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'editSubspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgEditSubspace, Desmos_Subspaces_V3_MsgEditSubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'deleteSubspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgDeleteSubspace, Desmos_Subspaces_V3_MsgDeleteSubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'createSection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSectionInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgCreateSection, Desmos_Subspaces_V3_MsgCreateSectionResponse>]

  /// - Returns: Interceptors to use when handling 'editSection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditSectionInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgEditSection, Desmos_Subspaces_V3_MsgEditSectionResponse>]

  /// - Returns: Interceptors to use when handling 'moveSection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMoveSectionInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgMoveSection, Desmos_Subspaces_V3_MsgMoveSectionResponse>]

  /// - Returns: Interceptors to use when handling 'deleteSection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteSectionInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgDeleteSection, Desmos_Subspaces_V3_MsgDeleteSectionResponse>]

  /// - Returns: Interceptors to use when handling 'createUserGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgCreateUserGroup, Desmos_Subspaces_V3_MsgCreateUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'editUserGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgEditUserGroup, Desmos_Subspaces_V3_MsgEditUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'moveUserGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMoveUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgMoveUserGroup, Desmos_Subspaces_V3_MsgMoveUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'setUserGroupPermissions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetUserGroupPermissionsInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgSetUserGroupPermissions, Desmos_Subspaces_V3_MsgSetUserGroupPermissionsResponse>]

  /// - Returns: Interceptors to use when handling 'deleteUserGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgDeleteUserGroup, Desmos_Subspaces_V3_MsgDeleteUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'addUserToUserGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddUserToUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgAddUserToUserGroup, Desmos_Subspaces_V3_MsgAddUserToUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'removeUserFromUserGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveUserFromUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgRemoveUserFromUserGroup, Desmos_Subspaces_V3_MsgRemoveUserFromUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'setUserPermissions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetUserPermissionsInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgSetUserPermissions, Desmos_Subspaces_V3_MsgSetUserPermissionsResponse>]

  /// - Returns: Interceptors to use when handling 'grantTreasuryAuthorization'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGrantTreasuryAuthorizationInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgGrantTreasuryAuthorization, Desmos_Subspaces_V3_MsgGrantTreasuryAuthorizationResponse>]

  /// - Returns: Interceptors to use when handling 'revokeTreasuryAuthorization'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeTreasuryAuthorizationInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorization, Desmos_Subspaces_V3_MsgRevokeTreasuryAuthorizationResponse>]

  /// - Returns: Interceptors to use when handling 'grantAllowance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGrantAllowanceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgGrantAllowance, Desmos_Subspaces_V3_MsgGrantAllowanceResponse>]

  /// - Returns: Interceptors to use when handling 'revokeAllowance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeAllowanceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_MsgRevokeAllowance, Desmos_Subspaces_V3_MsgRevokeAllowanceResponse>]
}

internal enum Desmos_Subspaces_V3_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.subspaces.v3.Msg",
    methods: [
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.createSubspace,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.editSubspace,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.deleteSubspace,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.createSection,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.editSection,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.moveSection,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.deleteSection,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.createUserGroup,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.editUserGroup,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.moveUserGroup,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.setUserGroupPermissions,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.deleteUserGroup,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.addUserToUserGroup,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.removeUserFromUserGroup,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.setUserPermissions,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.grantTreasuryAuthorization,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.revokeTreasuryAuthorization,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.grantAllowance,
      Desmos_Subspaces_V3_MsgServerMetadata.Methods.revokeAllowance,
    ]
  )

  internal enum Methods {
    internal static let createSubspace = GRPCMethodDescriptor(
      name: "CreateSubspace",
      path: "/desmos.subspaces.v3.Msg/CreateSubspace",
      type: GRPCCallType.unary
    )

    internal static let editSubspace = GRPCMethodDescriptor(
      name: "EditSubspace",
      path: "/desmos.subspaces.v3.Msg/EditSubspace",
      type: GRPCCallType.unary
    )

    internal static let deleteSubspace = GRPCMethodDescriptor(
      name: "DeleteSubspace",
      path: "/desmos.subspaces.v3.Msg/DeleteSubspace",
      type: GRPCCallType.unary
    )

    internal static let createSection = GRPCMethodDescriptor(
      name: "CreateSection",
      path: "/desmos.subspaces.v3.Msg/CreateSection",
      type: GRPCCallType.unary
    )

    internal static let editSection = GRPCMethodDescriptor(
      name: "EditSection",
      path: "/desmos.subspaces.v3.Msg/EditSection",
      type: GRPCCallType.unary
    )

    internal static let moveSection = GRPCMethodDescriptor(
      name: "MoveSection",
      path: "/desmos.subspaces.v3.Msg/MoveSection",
      type: GRPCCallType.unary
    )

    internal static let deleteSection = GRPCMethodDescriptor(
      name: "DeleteSection",
      path: "/desmos.subspaces.v3.Msg/DeleteSection",
      type: GRPCCallType.unary
    )

    internal static let createUserGroup = GRPCMethodDescriptor(
      name: "CreateUserGroup",
      path: "/desmos.subspaces.v3.Msg/CreateUserGroup",
      type: GRPCCallType.unary
    )

    internal static let editUserGroup = GRPCMethodDescriptor(
      name: "EditUserGroup",
      path: "/desmos.subspaces.v3.Msg/EditUserGroup",
      type: GRPCCallType.unary
    )

    internal static let moveUserGroup = GRPCMethodDescriptor(
      name: "MoveUserGroup",
      path: "/desmos.subspaces.v3.Msg/MoveUserGroup",
      type: GRPCCallType.unary
    )

    internal static let setUserGroupPermissions = GRPCMethodDescriptor(
      name: "SetUserGroupPermissions",
      path: "/desmos.subspaces.v3.Msg/SetUserGroupPermissions",
      type: GRPCCallType.unary
    )

    internal static let deleteUserGroup = GRPCMethodDescriptor(
      name: "DeleteUserGroup",
      path: "/desmos.subspaces.v3.Msg/DeleteUserGroup",
      type: GRPCCallType.unary
    )

    internal static let addUserToUserGroup = GRPCMethodDescriptor(
      name: "AddUserToUserGroup",
      path: "/desmos.subspaces.v3.Msg/AddUserToUserGroup",
      type: GRPCCallType.unary
    )

    internal static let removeUserFromUserGroup = GRPCMethodDescriptor(
      name: "RemoveUserFromUserGroup",
      path: "/desmos.subspaces.v3.Msg/RemoveUserFromUserGroup",
      type: GRPCCallType.unary
    )

    internal static let setUserPermissions = GRPCMethodDescriptor(
      name: "SetUserPermissions",
      path: "/desmos.subspaces.v3.Msg/SetUserPermissions",
      type: GRPCCallType.unary
    )

    internal static let grantTreasuryAuthorization = GRPCMethodDescriptor(
      name: "GrantTreasuryAuthorization",
      path: "/desmos.subspaces.v3.Msg/GrantTreasuryAuthorization",
      type: GRPCCallType.unary
    )

    internal static let revokeTreasuryAuthorization = GRPCMethodDescriptor(
      name: "RevokeTreasuryAuthorization",
      path: "/desmos.subspaces.v3.Msg/RevokeTreasuryAuthorization",
      type: GRPCCallType.unary
    )

    internal static let grantAllowance = GRPCMethodDescriptor(
      name: "GrantAllowance",
      path: "/desmos.subspaces.v3.Msg/GrantAllowance",
      type: GRPCCallType.unary
    )

    internal static let revokeAllowance = GRPCMethodDescriptor(
      name: "RevokeAllowance",
      path: "/desmos.subspaces.v3.Msg/RevokeAllowance",
      type: GRPCCallType.unary
    )
  }
}
