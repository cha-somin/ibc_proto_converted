//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: OmniFlix/itc/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `OmniFlix_Itc_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol OmniFlix_Itc_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createCampaign(
    _ request: OmniFlix_Itc_V1_MsgCreateCampaign,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgCreateCampaign, OmniFlix_Itc_V1_MsgCreateCampaignResponse>

  func cancelCampaign(
    _ request: OmniFlix_Itc_V1_MsgCancelCampaign,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgCancelCampaign, OmniFlix_Itc_V1_MsgCancelCampaignResponse>

  func claim(
    _ request: OmniFlix_Itc_V1_MsgClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgClaim, OmniFlix_Itc_V1_MsgClaimResponse>

  func depositCampaign(
    _ request: OmniFlix_Itc_V1_MsgDepositCampaign,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgDepositCampaign, OmniFlix_Itc_V1_MsgDepositCampaignResponse>

  func updateParams(
    _ request: OmniFlix_Itc_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgUpdateParams, OmniFlix_Itc_V1_MsgUpdateParamsResponse>
}

extension OmniFlix_Itc_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "OmniFlix.itc.v1.Msg"
  }

  /// Unary call to CreateCampaign
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCampaign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCampaign(
    _ request: OmniFlix_Itc_V1_MsgCreateCampaign,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgCreateCampaign, OmniFlix_Itc_V1_MsgCreateCampaignResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.createCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCampaignInterceptors() ?? []
    )
  }

  /// Unary call to CancelCampaign
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelCampaign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelCampaign(
    _ request: OmniFlix_Itc_V1_MsgCancelCampaign,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgCancelCampaign, OmniFlix_Itc_V1_MsgCancelCampaignResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.cancelCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelCampaignInterceptors() ?? []
    )
  }

  /// Unary call to Claim
  ///
  /// - Parameters:
  ///   - request: Request to send to Claim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claim(
    _ request: OmniFlix_Itc_V1_MsgClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgClaim, OmniFlix_Itc_V1_MsgClaimResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  /// Unary call to DepositCampaign
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositCampaign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositCampaign(
    _ request: OmniFlix_Itc_V1_MsgDepositCampaign,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgDepositCampaign, OmniFlix_Itc_V1_MsgDepositCampaignResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.depositCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositCampaignInterceptors() ?? []
    )
  }

  /// UpdateParams defines a governance operation for updating the x/itc module
  /// parameters. The authority is hard-coded to the x/gov module account.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: OmniFlix_Itc_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Itc_V1_MsgUpdateParams, OmniFlix_Itc_V1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension OmniFlix_Itc_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "OmniFlix_Itc_V1_MsgNIOClient")
internal final class OmniFlix_Itc_V1_MsgClient: OmniFlix_Itc_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the OmniFlix.itc.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct OmniFlix_Itc_V1_MsgNIOClient: OmniFlix_Itc_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the OmniFlix.itc.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Itc_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateCampaignCall(
    _ request: OmniFlix_Itc_V1_MsgCreateCampaign,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgCreateCampaign, OmniFlix_Itc_V1_MsgCreateCampaignResponse>

  func makeCancelCampaignCall(
    _ request: OmniFlix_Itc_V1_MsgCancelCampaign,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgCancelCampaign, OmniFlix_Itc_V1_MsgCancelCampaignResponse>

  func makeClaimCall(
    _ request: OmniFlix_Itc_V1_MsgClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgClaim, OmniFlix_Itc_V1_MsgClaimResponse>

  func makeDepositCampaignCall(
    _ request: OmniFlix_Itc_V1_MsgDepositCampaign,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgDepositCampaign, OmniFlix_Itc_V1_MsgDepositCampaignResponse>

  func makeUpdateParamsCall(
    _ request: OmniFlix_Itc_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgUpdateParams, OmniFlix_Itc_V1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Itc_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Itc_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateCampaignCall(
    _ request: OmniFlix_Itc_V1_MsgCreateCampaign,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgCreateCampaign, OmniFlix_Itc_V1_MsgCreateCampaignResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.createCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCampaignInterceptors() ?? []
    )
  }

  internal func makeCancelCampaignCall(
    _ request: OmniFlix_Itc_V1_MsgCancelCampaign,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgCancelCampaign, OmniFlix_Itc_V1_MsgCancelCampaignResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.cancelCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelCampaignInterceptors() ?? []
    )
  }

  internal func makeClaimCall(
    _ request: OmniFlix_Itc_V1_MsgClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgClaim, OmniFlix_Itc_V1_MsgClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  internal func makeDepositCampaignCall(
    _ request: OmniFlix_Itc_V1_MsgDepositCampaign,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgDepositCampaign, OmniFlix_Itc_V1_MsgDepositCampaignResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.depositCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositCampaignInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: OmniFlix_Itc_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Itc_V1_MsgUpdateParams, OmniFlix_Itc_V1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Itc_V1_MsgAsyncClientProtocol {
  internal func createCampaign(
    _ request: OmniFlix_Itc_V1_MsgCreateCampaign,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Itc_V1_MsgCreateCampaignResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.createCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCampaignInterceptors() ?? []
    )
  }

  internal func cancelCampaign(
    _ request: OmniFlix_Itc_V1_MsgCancelCampaign,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Itc_V1_MsgCancelCampaignResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.cancelCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelCampaignInterceptors() ?? []
    )
  }

  internal func claim(
    _ request: OmniFlix_Itc_V1_MsgClaim,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Itc_V1_MsgClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  internal func depositCampaign(
    _ request: OmniFlix_Itc_V1_MsgDepositCampaign,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Itc_V1_MsgDepositCampaignResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.depositCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositCampaignInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: OmniFlix_Itc_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Itc_V1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Itc_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct OmniFlix_Itc_V1_MsgAsyncClient: OmniFlix_Itc_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol OmniFlix_Itc_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createCampaign'.
  func makeCreateCampaignInterceptors() -> [ClientInterceptor<OmniFlix_Itc_V1_MsgCreateCampaign, OmniFlix_Itc_V1_MsgCreateCampaignResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelCampaign'.
  func makeCancelCampaignInterceptors() -> [ClientInterceptor<OmniFlix_Itc_V1_MsgCancelCampaign, OmniFlix_Itc_V1_MsgCancelCampaignResponse>]

  /// - Returns: Interceptors to use when invoking 'claim'.
  func makeClaimInterceptors() -> [ClientInterceptor<OmniFlix_Itc_V1_MsgClaim, OmniFlix_Itc_V1_MsgClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'depositCampaign'.
  func makeDepositCampaignInterceptors() -> [ClientInterceptor<OmniFlix_Itc_V1_MsgDepositCampaign, OmniFlix_Itc_V1_MsgDepositCampaignResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<OmniFlix_Itc_V1_MsgUpdateParams, OmniFlix_Itc_V1_MsgUpdateParamsResponse>]
}

internal enum OmniFlix_Itc_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "OmniFlix.itc.v1.Msg",
    methods: [
      OmniFlix_Itc_V1_MsgClientMetadata.Methods.createCampaign,
      OmniFlix_Itc_V1_MsgClientMetadata.Methods.cancelCampaign,
      OmniFlix_Itc_V1_MsgClientMetadata.Methods.claim,
      OmniFlix_Itc_V1_MsgClientMetadata.Methods.depositCampaign,
      OmniFlix_Itc_V1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createCampaign = GRPCMethodDescriptor(
      name: "CreateCampaign",
      path: "/OmniFlix.itc.v1.Msg/CreateCampaign",
      type: GRPCCallType.unary
    )

    internal static let cancelCampaign = GRPCMethodDescriptor(
      name: "CancelCampaign",
      path: "/OmniFlix.itc.v1.Msg/CancelCampaign",
      type: GRPCCallType.unary
    )

    internal static let claim = GRPCMethodDescriptor(
      name: "Claim",
      path: "/OmniFlix.itc.v1.Msg/Claim",
      type: GRPCCallType.unary
    )

    internal static let depositCampaign = GRPCMethodDescriptor(
      name: "DepositCampaign",
      path: "/OmniFlix.itc.v1.Msg/DepositCampaign",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/OmniFlix.itc.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol OmniFlix_Itc_V1_MsgProvider: CallHandlerProvider {
  var interceptors: OmniFlix_Itc_V1_MsgServerInterceptorFactoryProtocol? { get }

  func createCampaign(request: OmniFlix_Itc_V1_MsgCreateCampaign, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Itc_V1_MsgCreateCampaignResponse>

  func cancelCampaign(request: OmniFlix_Itc_V1_MsgCancelCampaign, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Itc_V1_MsgCancelCampaignResponse>

  func claim(request: OmniFlix_Itc_V1_MsgClaim, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Itc_V1_MsgClaimResponse>

  func depositCampaign(request: OmniFlix_Itc_V1_MsgDepositCampaign, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Itc_V1_MsgDepositCampaignResponse>

  /// UpdateParams defines a governance operation for updating the x/itc module
  /// parameters. The authority is hard-coded to the x/gov module account.
  ///
  /// Since: cosmos-sdk 0.47
  func updateParams(request: OmniFlix_Itc_V1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Itc_V1_MsgUpdateParamsResponse>
}

extension OmniFlix_Itc_V1_MsgProvider {
  internal var serviceName: Substring {
    return OmniFlix_Itc_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCampaign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgCreateCampaign>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgCreateCampaignResponse>(),
        interceptors: self.interceptors?.makeCreateCampaignInterceptors() ?? [],
        userFunction: self.createCampaign(request:context:)
      )

    case "CancelCampaign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgCancelCampaign>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgCancelCampaignResponse>(),
        interceptors: self.interceptors?.makeCancelCampaignInterceptors() ?? [],
        userFunction: self.cancelCampaign(request:context:)
      )

    case "Claim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgClaim>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgClaimResponse>(),
        interceptors: self.interceptors?.makeClaimInterceptors() ?? [],
        userFunction: self.claim(request:context:)
      )

    case "DepositCampaign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgDepositCampaign>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgDepositCampaignResponse>(),
        interceptors: self.interceptors?.makeDepositCampaignInterceptors() ?? [],
        userFunction: self.depositCampaign(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Itc_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Itc_V1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createCampaign(
    request: OmniFlix_Itc_V1_MsgCreateCampaign,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Itc_V1_MsgCreateCampaignResponse

  @Sendable func cancelCampaign(
    request: OmniFlix_Itc_V1_MsgCancelCampaign,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Itc_V1_MsgCancelCampaignResponse

  @Sendable func claim(
    request: OmniFlix_Itc_V1_MsgClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Itc_V1_MsgClaimResponse

  @Sendable func depositCampaign(
    request: OmniFlix_Itc_V1_MsgDepositCampaign,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Itc_V1_MsgDepositCampaignResponse

  /// UpdateParams defines a governance operation for updating the x/itc module
  /// parameters. The authority is hard-coded to the x/gov module account.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func updateParams(
    request: OmniFlix_Itc_V1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Itc_V1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Itc_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Itc_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return OmniFlix_Itc_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: OmniFlix_Itc_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCampaign":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgCreateCampaign>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgCreateCampaignResponse>(),
        interceptors: self.interceptors?.makeCreateCampaignInterceptors() ?? [],
        wrapping: self.createCampaign(request:context:)
      )

    case "CancelCampaign":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgCancelCampaign>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgCancelCampaignResponse>(),
        interceptors: self.interceptors?.makeCancelCampaignInterceptors() ?? [],
        wrapping: self.cancelCampaign(request:context:)
      )

    case "Claim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgClaim>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgClaimResponse>(),
        interceptors: self.interceptors?.makeClaimInterceptors() ?? [],
        wrapping: self.claim(request:context:)
      )

    case "DepositCampaign":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgDepositCampaign>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgDepositCampaignResponse>(),
        interceptors: self.interceptors?.makeDepositCampaignInterceptors() ?? [],
        wrapping: self.depositCampaign(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Itc_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Itc_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol OmniFlix_Itc_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createCampaign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateCampaignInterceptors() -> [ServerInterceptor<OmniFlix_Itc_V1_MsgCreateCampaign, OmniFlix_Itc_V1_MsgCreateCampaignResponse>]

  /// - Returns: Interceptors to use when handling 'cancelCampaign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelCampaignInterceptors() -> [ServerInterceptor<OmniFlix_Itc_V1_MsgCancelCampaign, OmniFlix_Itc_V1_MsgCancelCampaignResponse>]

  /// - Returns: Interceptors to use when handling 'claim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimInterceptors() -> [ServerInterceptor<OmniFlix_Itc_V1_MsgClaim, OmniFlix_Itc_V1_MsgClaimResponse>]

  /// - Returns: Interceptors to use when handling 'depositCampaign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositCampaignInterceptors() -> [ServerInterceptor<OmniFlix_Itc_V1_MsgDepositCampaign, OmniFlix_Itc_V1_MsgDepositCampaignResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<OmniFlix_Itc_V1_MsgUpdateParams, OmniFlix_Itc_V1_MsgUpdateParamsResponse>]
}

internal enum OmniFlix_Itc_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "OmniFlix.itc.v1.Msg",
    methods: [
      OmniFlix_Itc_V1_MsgServerMetadata.Methods.createCampaign,
      OmniFlix_Itc_V1_MsgServerMetadata.Methods.cancelCampaign,
      OmniFlix_Itc_V1_MsgServerMetadata.Methods.claim,
      OmniFlix_Itc_V1_MsgServerMetadata.Methods.depositCampaign,
      OmniFlix_Itc_V1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createCampaign = GRPCMethodDescriptor(
      name: "CreateCampaign",
      path: "/OmniFlix.itc.v1.Msg/CreateCampaign",
      type: GRPCCallType.unary
    )

    internal static let cancelCampaign = GRPCMethodDescriptor(
      name: "CancelCampaign",
      path: "/OmniFlix.itc.v1.Msg/CancelCampaign",
      type: GRPCCallType.unary
    )

    internal static let claim = GRPCMethodDescriptor(
      name: "Claim",
      path: "/OmniFlix.itc.v1.Msg/Claim",
      type: GRPCCallType.unary
    )

    internal static let depositCampaign = GRPCMethodDescriptor(
      name: "DepositCampaign",
      path: "/OmniFlix.itc.v1.Msg/DepositCampaign",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/OmniFlix.itc.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
