//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pstake/liquidstakeibc/v1beta1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the liquidstakeibc services.
///
/// Usage: instantiate `Pstake_Liquidstakeibc_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Pstake_Liquidstakeibc_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func registerHostChain(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain,
    callOptions: CallOptions?
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>

  func updateHostChain(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain,
    callOptions: CallOptions?
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>

  func liquidStake(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake,
    callOptions: CallOptions?
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>

  func liquidUnstake(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake,
    callOptions: CallOptions?
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>

  func redeem(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem,
    callOptions: CallOptions?
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRedeem, Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>
}

extension Pstake_Liquidstakeibc_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "pstake.liquidstakeibc.v1beta1.Msg"
  }

  /// Unary call to RegisterHostChain
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterHostChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerHostChain(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse> {
    return self.makeUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.registerHostChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterHostChainInterceptors() ?? []
    )
  }

  /// Unary call to UpdateHostChain
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateHostChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateHostChain(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse> {
    return self.makeUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.updateHostChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateHostChainInterceptors() ?? []
    )
  }

  /// Unary call to LiquidStake
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidStake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidStake(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse> {
    return self.makeUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidStake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? []
    )
  }

  /// Unary call to LiquidUnstake
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidUnstake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidUnstake(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse> {
    return self.makeUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidUnstake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidUnstakeInterceptors() ?? []
    )
  }

  /// Unary call to Redeem
  ///
  /// - Parameters:
  ///   - request: Request to send to Redeem.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redeem(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRedeem, Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse> {
    return self.makeUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.redeem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Pstake_Liquidstakeibc_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Pstake_Liquidstakeibc_V1beta1_MsgNIOClient")
internal final class Pstake_Liquidstakeibc_V1beta1_MsgClient: Pstake_Liquidstakeibc_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the pstake.liquidstakeibc.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Pstake_Liquidstakeibc_V1beta1_MsgNIOClient: Pstake_Liquidstakeibc_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the pstake.liquidstakeibc.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the liquidstakeibc services.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Pstake_Liquidstakeibc_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeRegisterHostChainCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>

  func makeUpdateHostChainCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>

  func makeLiquidStakeCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>

  func makeLiquidUnstakeCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>

  func makeRedeemCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRedeem, Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pstake_Liquidstakeibc_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterHostChainCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.registerHostChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterHostChainInterceptors() ?? []
    )
  }

  internal func makeUpdateHostChainCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.updateHostChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateHostChainInterceptors() ?? []
    )
  }

  internal func makeLiquidStakeCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse> {
    return self.makeAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidStake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? []
    )
  }

  internal func makeLiquidUnstakeCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse> {
    return self.makeAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidUnstake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidUnstakeInterceptors() ?? []
    )
  }

  internal func makeRedeemCall(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pstake_Liquidstakeibc_V1beta1_MsgRedeem, Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse> {
    return self.makeAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.redeem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pstake_Liquidstakeibc_V1beta1_MsgAsyncClientProtocol {
  internal func registerHostChain(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain,
    callOptions: CallOptions? = nil
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.registerHostChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterHostChainInterceptors() ?? []
    )
  }

  internal func updateHostChain(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain,
    callOptions: CallOptions? = nil
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.updateHostChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateHostChainInterceptors() ?? []
    )
  }

  internal func liquidStake(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake,
    callOptions: CallOptions? = nil
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse {
    return try await self.performAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidStake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? []
    )
  }

  internal func liquidUnstake(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake,
    callOptions: CallOptions? = nil
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse {
    return try await self.performAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidUnstake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidUnstakeInterceptors() ?? []
    )
  }

  internal func redeem(
    _ request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem,
    callOptions: CallOptions? = nil
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse {
    return try await self.performAsyncUnaryCall(
      path: Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.redeem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Pstake_Liquidstakeibc_V1beta1_MsgAsyncClient: Pstake_Liquidstakeibc_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Pstake_Liquidstakeibc_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerHostChain'.
  func makeRegisterHostChainInterceptors() -> [ClientInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>]

  /// - Returns: Interceptors to use when invoking 'updateHostChain'.
  func makeUpdateHostChainInterceptors() -> [ClientInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidStake'.
  func makeLiquidStakeInterceptors() -> [ClientInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidUnstake'.
  func makeLiquidUnstakeInterceptors() -> [ClientInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>]

  /// - Returns: Interceptors to use when invoking 'redeem'.
  func makeRedeemInterceptors() -> [ClientInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgRedeem, Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>]
}

internal enum Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "pstake.liquidstakeibc.v1beta1.Msg",
    methods: [
      Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.registerHostChain,
      Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.updateHostChain,
      Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidStake,
      Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.liquidUnstake,
      Pstake_Liquidstakeibc_V1beta1_MsgClientMetadata.Methods.redeem,
    ]
  )

  internal enum Methods {
    internal static let registerHostChain = GRPCMethodDescriptor(
      name: "RegisterHostChain",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/RegisterHostChain",
      type: GRPCCallType.unary
    )

    internal static let updateHostChain = GRPCMethodDescriptor(
      name: "UpdateHostChain",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/UpdateHostChain",
      type: GRPCCallType.unary
    )

    internal static let liquidStake = GRPCMethodDescriptor(
      name: "LiquidStake",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/LiquidStake",
      type: GRPCCallType.unary
    )

    internal static let liquidUnstake = GRPCMethodDescriptor(
      name: "LiquidUnstake",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/LiquidUnstake",
      type: GRPCCallType.unary
    )

    internal static let redeem = GRPCMethodDescriptor(
      name: "Redeem",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/Redeem",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the liquidstakeibc services.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Pstake_Liquidstakeibc_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  func registerHostChain(request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, context: StatusOnlyCallContext) -> EventLoopFuture<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>

  func updateHostChain(request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, context: StatusOnlyCallContext) -> EventLoopFuture<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>

  func liquidStake(request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, context: StatusOnlyCallContext) -> EventLoopFuture<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>

  func liquidUnstake(request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, context: StatusOnlyCallContext) -> EventLoopFuture<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>

  func redeem(request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem, context: StatusOnlyCallContext) -> EventLoopFuture<Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>
}

extension Pstake_Liquidstakeibc_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterHostChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>(),
        interceptors: self.interceptors?.makeRegisterHostChainInterceptors() ?? [],
        userFunction: self.registerHostChain(request:context:)
      )

    case "UpdateHostChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>(),
        interceptors: self.interceptors?.makeUpdateHostChainInterceptors() ?? [],
        userFunction: self.updateHostChain(request:context:)
      )

    case "LiquidStake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>(),
        interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? [],
        userFunction: self.liquidStake(request:context:)
      )

    case "LiquidUnstake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>(),
        interceptors: self.interceptors?.makeLiquidUnstakeInterceptors() ?? [],
        userFunction: self.liquidUnstake(request:context:)
      )

    case "Redeem":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgRedeem>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>(),
        interceptors: self.interceptors?.makeRedeemInterceptors() ?? [],
        userFunction: self.redeem(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the liquidstakeibc services.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Pstake_Liquidstakeibc_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func registerHostChain(
    request: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse

  @Sendable func updateHostChain(
    request: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse

  @Sendable func liquidStake(
    request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse

  @Sendable func liquidUnstake(
    request: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse

  @Sendable func redeem(
    request: Pstake_Liquidstakeibc_V1beta1_MsgRedeem,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pstake_Liquidstakeibc_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Pstake_Liquidstakeibc_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterHostChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>(),
        interceptors: self.interceptors?.makeRegisterHostChainInterceptors() ?? [],
        wrapping: self.registerHostChain(request:context:)
      )

    case "UpdateHostChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>(),
        interceptors: self.interceptors?.makeUpdateHostChainInterceptors() ?? [],
        wrapping: self.updateHostChain(request:context:)
      )

    case "LiquidStake":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>(),
        interceptors: self.interceptors?.makeLiquidStakeInterceptors() ?? [],
        wrapping: self.liquidStake(request:context:)
      )

    case "LiquidUnstake":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>(),
        interceptors: self.interceptors?.makeLiquidUnstakeInterceptors() ?? [],
        wrapping: self.liquidUnstake(request:context:)
      )

    case "Redeem":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pstake_Liquidstakeibc_V1beta1_MsgRedeem>(),
        responseSerializer: ProtobufSerializer<Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>(),
        interceptors: self.interceptors?.makeRedeemInterceptors() ?? [],
        wrapping: self.redeem(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Pstake_Liquidstakeibc_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerHostChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterHostChainInterceptors() -> [ServerInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse>]

  /// - Returns: Interceptors to use when handling 'updateHostChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateHostChainInterceptors() -> [ServerInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse>]

  /// - Returns: Interceptors to use when handling 'liquidStake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidStakeInterceptors() -> [ServerInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse>]

  /// - Returns: Interceptors to use when handling 'liquidUnstake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidUnstakeInterceptors() -> [ServerInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse>]

  /// - Returns: Interceptors to use when handling 'redeem'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedeemInterceptors() -> [ServerInterceptor<Pstake_Liquidstakeibc_V1beta1_MsgRedeem, Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse>]
}

internal enum Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "pstake.liquidstakeibc.v1beta1.Msg",
    methods: [
      Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.Methods.registerHostChain,
      Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.Methods.updateHostChain,
      Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.Methods.liquidStake,
      Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.Methods.liquidUnstake,
      Pstake_Liquidstakeibc_V1beta1_MsgServerMetadata.Methods.redeem,
    ]
  )

  internal enum Methods {
    internal static let registerHostChain = GRPCMethodDescriptor(
      name: "RegisterHostChain",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/RegisterHostChain",
      type: GRPCCallType.unary
    )

    internal static let updateHostChain = GRPCMethodDescriptor(
      name: "UpdateHostChain",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/UpdateHostChain",
      type: GRPCCallType.unary
    )

    internal static let liquidStake = GRPCMethodDescriptor(
      name: "LiquidStake",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/LiquidStake",
      type: GRPCCallType.unary
    )

    internal static let liquidUnstake = GRPCMethodDescriptor(
      name: "LiquidUnstake",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/LiquidUnstake",
      type: GRPCCallType.unary
    )

    internal static let redeem = GRPCMethodDescriptor(
      name: "Redeem",
      path: "/pstake.liquidstakeibc.v1beta1.Msg/Redeem",
      type: GRPCCallType.unary
    )
  }
}
