//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: juno/feeshare/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the fees Msg service.
///
/// Usage: instantiate `Juno_Feeshare_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Juno_Feeshare_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? { get }

  func registerFeeShare(
    _ request: Juno_Feeshare_V1_MsgRegisterFeeShare,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_MsgRegisterFeeShare, Juno_Feeshare_V1_MsgRegisterFeeShareResponse>

  func updateFeeShare(
    _ request: Juno_Feeshare_V1_MsgUpdateFeeShare,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_MsgUpdateFeeShare, Juno_Feeshare_V1_MsgUpdateFeeShareResponse>

  func cancelFeeShare(
    _ request: Juno_Feeshare_V1_MsgCancelFeeShare,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_MsgCancelFeeShare, Juno_Feeshare_V1_MsgCancelFeeShareResponse>
}

extension Juno_Feeshare_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "juno.feeshare.v1.Msg"
  }

  /// RegisterFeeShare registers a new contract for receiving transaction fees
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterFeeShare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerFeeShare(
    _ request: Juno_Feeshare_V1_MsgRegisterFeeShare,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_MsgRegisterFeeShare, Juno_Feeshare_V1_MsgRegisterFeeShareResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.registerFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterFeeShareInterceptors() ?? []
    )
  }

  /// UpdateFeeShare updates the withdrawer address of a FeeShare
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFeeShare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateFeeShare(
    _ request: Juno_Feeshare_V1_MsgUpdateFeeShare,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_MsgUpdateFeeShare, Juno_Feeshare_V1_MsgUpdateFeeShareResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.updateFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFeeShareInterceptors() ?? []
    )
  }

  /// CancelFeeShare cancels a contract's fee registration and further receival
  /// of transaction fees
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelFeeShare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelFeeShare(
    _ request: Juno_Feeshare_V1_MsgCancelFeeShare,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_MsgCancelFeeShare, Juno_Feeshare_V1_MsgCancelFeeShareResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.cancelFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelFeeShareInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Juno_Feeshare_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Juno_Feeshare_V1_MsgNIOClient")
internal final class Juno_Feeshare_V1_MsgClient: Juno_Feeshare_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the juno.feeshare.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Juno_Feeshare_V1_MsgNIOClient: Juno_Feeshare_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the juno.feeshare.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the fees Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Juno_Feeshare_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeRegisterFeeShareCall(
    _ request: Juno_Feeshare_V1_MsgRegisterFeeShare,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_MsgRegisterFeeShare, Juno_Feeshare_V1_MsgRegisterFeeShareResponse>

  func makeUpdateFeeShareCall(
    _ request: Juno_Feeshare_V1_MsgUpdateFeeShare,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_MsgUpdateFeeShare, Juno_Feeshare_V1_MsgUpdateFeeShareResponse>

  func makeCancelFeeShareCall(
    _ request: Juno_Feeshare_V1_MsgCancelFeeShare,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_MsgCancelFeeShare, Juno_Feeshare_V1_MsgCancelFeeShareResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Juno_Feeshare_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Juno_Feeshare_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterFeeShareCall(
    _ request: Juno_Feeshare_V1_MsgRegisterFeeShare,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_MsgRegisterFeeShare, Juno_Feeshare_V1_MsgRegisterFeeShareResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.registerFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterFeeShareInterceptors() ?? []
    )
  }

  internal func makeUpdateFeeShareCall(
    _ request: Juno_Feeshare_V1_MsgUpdateFeeShare,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_MsgUpdateFeeShare, Juno_Feeshare_V1_MsgUpdateFeeShareResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.updateFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFeeShareInterceptors() ?? []
    )
  }

  internal func makeCancelFeeShareCall(
    _ request: Juno_Feeshare_V1_MsgCancelFeeShare,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_MsgCancelFeeShare, Juno_Feeshare_V1_MsgCancelFeeShareResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.cancelFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelFeeShareInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Juno_Feeshare_V1_MsgAsyncClientProtocol {
  internal func registerFeeShare(
    _ request: Juno_Feeshare_V1_MsgRegisterFeeShare,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_MsgRegisterFeeShareResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.registerFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterFeeShareInterceptors() ?? []
    )
  }

  internal func updateFeeShare(
    _ request: Juno_Feeshare_V1_MsgUpdateFeeShare,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_MsgUpdateFeeShareResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.updateFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFeeShareInterceptors() ?? []
    )
  }

  internal func cancelFeeShare(
    _ request: Juno_Feeshare_V1_MsgCancelFeeShare,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_MsgCancelFeeShareResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_MsgClientMetadata.Methods.cancelFeeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelFeeShareInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Juno_Feeshare_V1_MsgAsyncClient: Juno_Feeshare_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Juno_Feeshare_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerFeeShare'.
  func makeRegisterFeeShareInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_MsgRegisterFeeShare, Juno_Feeshare_V1_MsgRegisterFeeShareResponse>]

  /// - Returns: Interceptors to use when invoking 'updateFeeShare'.
  func makeUpdateFeeShareInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_MsgUpdateFeeShare, Juno_Feeshare_V1_MsgUpdateFeeShareResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelFeeShare'.
  func makeCancelFeeShareInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_MsgCancelFeeShare, Juno_Feeshare_V1_MsgCancelFeeShareResponse>]
}

internal enum Juno_Feeshare_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "juno.feeshare.v1.Msg",
    methods: [
      Juno_Feeshare_V1_MsgClientMetadata.Methods.registerFeeShare,
      Juno_Feeshare_V1_MsgClientMetadata.Methods.updateFeeShare,
      Juno_Feeshare_V1_MsgClientMetadata.Methods.cancelFeeShare,
    ]
  )

  internal enum Methods {
    internal static let registerFeeShare = GRPCMethodDescriptor(
      name: "RegisterFeeShare",
      path: "/juno.feeshare.v1.Msg/RegisterFeeShare",
      type: GRPCCallType.unary
    )

    internal static let updateFeeShare = GRPCMethodDescriptor(
      name: "UpdateFeeShare",
      path: "/juno.feeshare.v1.Msg/UpdateFeeShare",
      type: GRPCCallType.unary
    )

    internal static let cancelFeeShare = GRPCMethodDescriptor(
      name: "CancelFeeShare",
      path: "/juno.feeshare.v1.Msg/CancelFeeShare",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the fees Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Juno_Feeshare_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Juno_Feeshare_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// RegisterFeeShare registers a new contract for receiving transaction fees
  func registerFeeShare(request: Juno_Feeshare_V1_MsgRegisterFeeShare, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_MsgRegisterFeeShareResponse>

  /// UpdateFeeShare updates the withdrawer address of a FeeShare
  func updateFeeShare(request: Juno_Feeshare_V1_MsgUpdateFeeShare, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_MsgUpdateFeeShareResponse>

  /// CancelFeeShare cancels a contract's fee registration and further receival
  /// of transaction fees
  func cancelFeeShare(request: Juno_Feeshare_V1_MsgCancelFeeShare, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_MsgCancelFeeShareResponse>
}

extension Juno_Feeshare_V1_MsgProvider {
  internal var serviceName: Substring {
    return Juno_Feeshare_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterFeeShare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_MsgRegisterFeeShare>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_MsgRegisterFeeShareResponse>(),
        interceptors: self.interceptors?.makeRegisterFeeShareInterceptors() ?? [],
        userFunction: self.registerFeeShare(request:context:)
      )

    case "UpdateFeeShare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_MsgUpdateFeeShare>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_MsgUpdateFeeShareResponse>(),
        interceptors: self.interceptors?.makeUpdateFeeShareInterceptors() ?? [],
        userFunction: self.updateFeeShare(request:context:)
      )

    case "CancelFeeShare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_MsgCancelFeeShare>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_MsgCancelFeeShareResponse>(),
        interceptors: self.interceptors?.makeCancelFeeShareInterceptors() ?? [],
        userFunction: self.cancelFeeShare(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the fees Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Juno_Feeshare_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Juno_Feeshare_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// RegisterFeeShare registers a new contract for receiving transaction fees
  @Sendable func registerFeeShare(
    request: Juno_Feeshare_V1_MsgRegisterFeeShare,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_MsgRegisterFeeShareResponse

  /// UpdateFeeShare updates the withdrawer address of a FeeShare
  @Sendable func updateFeeShare(
    request: Juno_Feeshare_V1_MsgUpdateFeeShare,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_MsgUpdateFeeShareResponse

  /// CancelFeeShare cancels a contract's fee registration and further receival
  /// of transaction fees
  @Sendable func cancelFeeShare(
    request: Juno_Feeshare_V1_MsgCancelFeeShare,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_MsgCancelFeeShareResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Juno_Feeshare_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Juno_Feeshare_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Juno_Feeshare_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Juno_Feeshare_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterFeeShare":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_MsgRegisterFeeShare>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_MsgRegisterFeeShareResponse>(),
        interceptors: self.interceptors?.makeRegisterFeeShareInterceptors() ?? [],
        wrapping: self.registerFeeShare(request:context:)
      )

    case "UpdateFeeShare":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_MsgUpdateFeeShare>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_MsgUpdateFeeShareResponse>(),
        interceptors: self.interceptors?.makeUpdateFeeShareInterceptors() ?? [],
        wrapping: self.updateFeeShare(request:context:)
      )

    case "CancelFeeShare":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_MsgCancelFeeShare>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_MsgCancelFeeShareResponse>(),
        interceptors: self.interceptors?.makeCancelFeeShareInterceptors() ?? [],
        wrapping: self.cancelFeeShare(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Juno_Feeshare_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerFeeShare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterFeeShareInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_MsgRegisterFeeShare, Juno_Feeshare_V1_MsgRegisterFeeShareResponse>]

  /// - Returns: Interceptors to use when handling 'updateFeeShare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateFeeShareInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_MsgUpdateFeeShare, Juno_Feeshare_V1_MsgUpdateFeeShareResponse>]

  /// - Returns: Interceptors to use when handling 'cancelFeeShare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelFeeShareInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_MsgCancelFeeShare, Juno_Feeshare_V1_MsgCancelFeeShareResponse>]
}

internal enum Juno_Feeshare_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "juno.feeshare.v1.Msg",
    methods: [
      Juno_Feeshare_V1_MsgServerMetadata.Methods.registerFeeShare,
      Juno_Feeshare_V1_MsgServerMetadata.Methods.updateFeeShare,
      Juno_Feeshare_V1_MsgServerMetadata.Methods.cancelFeeShare,
    ]
  )

  internal enum Methods {
    internal static let registerFeeShare = GRPCMethodDescriptor(
      name: "RegisterFeeShare",
      path: "/juno.feeshare.v1.Msg/RegisterFeeShare",
      type: GRPCCallType.unary
    )

    internal static let updateFeeShare = GRPCMethodDescriptor(
      name: "UpdateFeeShare",
      path: "/juno.feeshare.v1.Msg/UpdateFeeShare",
      type: GRPCCallType.unary
    )

    internal static let cancelFeeShare = GRPCMethodDescriptor(
      name: "CancelFeeShare",
      path: "/juno.feeshare.v1.Msg/CancelFeeShare",
      type: GRPCCallType.unary
    )
  }
}
