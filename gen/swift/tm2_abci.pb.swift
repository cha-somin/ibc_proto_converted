// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tm2/abci.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Tm2_Abci_ResponseDeliverTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var responseBase: Tm2_Abci_ResponseBase {
    get {return _responseBase ?? Tm2_Abci_ResponseBase()}
    set {_responseBase = newValue}
  }
  /// Returns true if `responseBase` has been explicitly set.
  var hasResponseBase: Bool {return self._responseBase != nil}
  /// Clears the value of `responseBase`. Subsequent reads from it will return its default value.
  mutating func clearResponseBase() {self._responseBase = nil}

  var gasWanted: Int64 = 0

  var gasUsed: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _responseBase: Tm2_Abci_ResponseBase? = nil
}

struct Tm2_Abci_ResponseBase {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var error: SwiftProtobuf.Google_Protobuf_Any {
    get {return _error ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  mutating func clearError() {self._error = nil}

  var data: Data = Data()

  var events: [SwiftProtobuf.Google_Protobuf_Any] = []

  var log: String = String()

  var info: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _error: SwiftProtobuf.Google_Protobuf_Any? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tm2_Abci_ResponseDeliverTx: @unchecked Sendable {}
extension Tm2_Abci_ResponseBase: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tm2.abci"

extension Tm2_Abci_ResponseDeliverTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseDeliverTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "response_base", json: "ResponseBase"),
    2: .unique(proto: "gas_wanted", json: "GasWanted"),
    3: .unique(proto: "gas_used", json: "GasUsed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._responseBase) }()
      case 2: try { try decoder.decodeSingularSInt64Field(value: &self.gasWanted) }()
      case 3: try { try decoder.decodeSingularSInt64Field(value: &self.gasUsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._responseBase {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.gasWanted != 0 {
      try visitor.visitSingularSInt64Field(value: self.gasWanted, fieldNumber: 2)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularSInt64Field(value: self.gasUsed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tm2_Abci_ResponseDeliverTx, rhs: Tm2_Abci_ResponseDeliverTx) -> Bool {
    if lhs._responseBase != rhs._responseBase {return false}
    if lhs.gasWanted != rhs.gasWanted {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tm2_Abci_ResponseBase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseBase"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "error", json: "Error"),
    2: .unique(proto: "data", json: "Data"),
    3: .unique(proto: "events", json: "Events"),
    4: .unique(proto: "log", json: "Log"),
    5: .unique(proto: "info", json: "Info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.log) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 3)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 4)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tm2_Abci_ResponseBase, rhs: Tm2_Abci_ResponseBase) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.data != rhs.data {return false}
    if lhs.events != rhs.events {return false}
    if lhs.log != rhs.log {return false}
    if lhs.info != rhs.info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
