//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: lum-network/millions/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Lum_Network_Millions_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Lum_Network_Millions_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Lum_Network_Millions_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryParamsRequest, Lum_Network_Millions_QueryParamsResponse>

  func pools(
    _ request: Lum_Network_Millions_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolsRequest, Lum_Network_Millions_QueryPoolsResponse>

  func pool(
    _ request: Lum_Network_Millions_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolRequest, Lum_Network_Millions_QueryPoolResponse>

  func deposits(
    _ request: Lum_Network_Millions_QueryDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func poolDeposits(
    _ request: Lum_Network_Millions_QueryPoolDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func poolDeposit(
    _ request: Lum_Network_Millions_QueryPoolDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDepositRequest, Lum_Network_Millions_QueryDepositResponse>

  func accountDeposits(
    _ request: Lum_Network_Millions_QueryAccountDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func accountPoolDeposits(
    _ request: Lum_Network_Millions_QueryAccountPoolDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func draws(
    _ request: Lum_Network_Millions_QueryDrawsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>

  func poolDraws(
    _ request: Lum_Network_Millions_QueryPoolDrawsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>

  func poolDraw(
    _ request: Lum_Network_Millions_QueryPoolDrawRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawRequest, Lum_Network_Millions_QueryDrawResponse>

  func prizes(
    _ request: Lum_Network_Millions_QueryPrizesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func poolPrizes(
    _ request: Lum_Network_Millions_QueryPoolPrizesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func poolDrawPrizes(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func poolDrawPrize(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawPrizeRequest, Lum_Network_Millions_QueryPrizeResponse>

  func accountPrizes(
    _ request: Lum_Network_Millions_QueryAccountPrizesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func accountPoolPrizes(
    _ request: Lum_Network_Millions_QueryAccountPoolPrizesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func accountPoolDrawPrizes(
    _ request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func withdrawals(
    _ request: Lum_Network_Millions_QueryWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>

  func poolWithdrawals(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>

  func poolWithdrawal(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolWithdrawalRequest, Lum_Network_Millions_QueryWithdrawalResponse>

  func accountWithdrawals(
    _ request: Lum_Network_Millions_QueryAccountWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>

  func accountPoolWithdrawals(
    _ request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>
}

extension Lum_Network_Millions_QueryClientProtocol {
  internal var serviceName: String {
    return "lum.network.millions.Query"
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Lum_Network_Millions_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryParamsRequest, Lum_Network_Millions_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to Pools
  ///
  /// - Parameters:
  ///   - request: Request to send to Pools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pools(
    _ request: Lum_Network_Millions_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolsRequest, Lum_Network_Millions_QueryPoolsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  /// Unary call to Pool
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Lum_Network_Millions_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolRequest, Lum_Network_Millions_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// Unary call to Deposits
  ///
  /// - Parameters:
  ///   - request: Request to send to Deposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deposits(
    _ request: Lum_Network_Millions_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.deposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }

  /// Unary call to PoolDeposits
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolDeposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolDeposits(
    _ request: Lum_Network_Millions_QueryPoolDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDepositsInterceptors() ?? []
    )
  }

  /// Unary call to PoolDeposit
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolDeposit(
    _ request: Lum_Network_Millions_QueryPoolDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDepositRequest, Lum_Network_Millions_QueryDepositResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDepositInterceptors() ?? []
    )
  }

  /// Unary call to AccountDeposits
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountDeposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountDeposits(
    _ request: Lum_Network_Millions_QueryAccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountDepositsInterceptors() ?? []
    )
  }

  /// Unary call to AccountPoolDeposits
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountPoolDeposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountPoolDeposits(
    _ request: Lum_Network_Millions_QueryAccountPoolDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolDepositsInterceptors() ?? []
    )
  }

  /// Unary call to Draws
  ///
  /// - Parameters:
  ///   - request: Request to send to Draws.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func draws(
    _ request: Lum_Network_Millions_QueryDrawsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryDrawsRequest, Lum_Network_Millions_QueryDrawsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.draws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDrawsInterceptors() ?? []
    )
  }

  /// Unary call to PoolDraws
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolDraws.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolDraws(
    _ request: Lum_Network_Millions_QueryPoolDrawsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawsRequest, Lum_Network_Millions_QueryDrawsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDraws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawsInterceptors() ?? []
    )
  }

  /// Unary call to PoolDraw
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolDraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolDraw(
    _ request: Lum_Network_Millions_QueryPoolDrawRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawRequest, Lum_Network_Millions_QueryDrawResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawInterceptors() ?? []
    )
  }

  /// Unary call to Prizes
  ///
  /// - Parameters:
  ///   - request: Request to send to Prizes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func prizes(
    _ request: Lum_Network_Millions_QueryPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.prizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrizesInterceptors() ?? []
    )
  }

  /// Unary call to PoolPrizes
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolPrizes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolPrizes(
    _ request: Lum_Network_Millions_QueryPoolPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolPrizesInterceptors() ?? []
    )
  }

  /// Unary call to PoolDrawPrizes
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolDrawPrizes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolDrawPrizes(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawPrizesInterceptors() ?? []
    )
  }

  /// Unary call to PoolDrawPrize
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolDrawPrize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolDrawPrize(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolDrawPrizeRequest, Lum_Network_Millions_QueryPrizeResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawPrizeInterceptors() ?? []
    )
  }

  /// Unary call to AccountPrizes
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountPrizes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountPrizes(
    _ request: Lum_Network_Millions_QueryAccountPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPrizesInterceptors() ?? []
    )
  }

  /// Unary call to AccountPoolPrizes
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountPoolPrizes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountPoolPrizes(
    _ request: Lum_Network_Millions_QueryAccountPoolPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolPrizesInterceptors() ?? []
    )
  }

  /// Unary call to AccountPoolDrawPrizes
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountPoolDrawPrizes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountPoolDrawPrizes(
    _ request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDrawPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolDrawPrizesInterceptors() ?? []
    )
  }

  /// Unary call to Withdrawals
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdrawals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawals(
    _ request: Lum_Network_Millions_QueryWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.withdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawalsInterceptors() ?? []
    )
  }

  /// Unary call to PoolWithdrawals
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolWithdrawals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolWithdrawals(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolWithdrawalsInterceptors() ?? []
    )
  }

  /// Unary call to PoolWithdrawal
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolWithdrawal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolWithdrawal(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryPoolWithdrawalRequest, Lum_Network_Millions_QueryWithdrawalResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolWithdrawalInterceptors() ?? []
    )
  }

  /// Unary call to AccountWithdrawals
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountWithdrawals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountWithdrawals(
    _ request: Lum_Network_Millions_QueryAccountWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountWithdrawalsInterceptors() ?? []
    )
  }

  /// Unary call to AccountPoolWithdrawals
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountPoolWithdrawals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountPoolWithdrawals(
    _ request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolWithdrawalsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Lum_Network_Millions_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Lum_Network_Millions_QueryNIOClient")
internal final class Lum_Network_Millions_QueryClient: Lum_Network_Millions_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the lum.network.millions.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Lum_Network_Millions_QueryNIOClient: Lum_Network_Millions_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the lum.network.millions.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Lum_Network_Millions_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Lum_Network_Millions_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryParamsRequest, Lum_Network_Millions_QueryParamsResponse>

  func makePoolsCall(
    _ request: Lum_Network_Millions_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolsRequest, Lum_Network_Millions_QueryPoolsResponse>

  func makePoolCall(
    _ request: Lum_Network_Millions_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolRequest, Lum_Network_Millions_QueryPoolResponse>

  func makeDepositsCall(
    _ request: Lum_Network_Millions_QueryDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func makePoolDepositsCall(
    _ request: Lum_Network_Millions_QueryPoolDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func makePoolDepositCall(
    _ request: Lum_Network_Millions_QueryPoolDepositRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDepositRequest, Lum_Network_Millions_QueryDepositResponse>

  func makeAccountDepositsCall(
    _ request: Lum_Network_Millions_QueryAccountDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func makeAccountPoolDepositsCall(
    _ request: Lum_Network_Millions_QueryAccountPoolDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>

  func makeDrawsCall(
    _ request: Lum_Network_Millions_QueryDrawsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>

  func makePoolDrawsCall(
    _ request: Lum_Network_Millions_QueryPoolDrawsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>

  func makePoolDrawCall(
    _ request: Lum_Network_Millions_QueryPoolDrawRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawRequest, Lum_Network_Millions_QueryDrawResponse>

  func makePrizesCall(
    _ request: Lum_Network_Millions_QueryPrizesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func makePoolPrizesCall(
    _ request: Lum_Network_Millions_QueryPoolPrizesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func makePoolDrawPrizesCall(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func makePoolDrawPrizeCall(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawPrizeRequest, Lum_Network_Millions_QueryPrizeResponse>

  func makeAccountPrizesCall(
    _ request: Lum_Network_Millions_QueryAccountPrizesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func makeAccountPoolPrizesCall(
    _ request: Lum_Network_Millions_QueryAccountPoolPrizesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func makeAccountPoolDrawPrizesCall(
    _ request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>

  func makeWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>

  func makePoolWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>

  func makePoolWithdrawalCall(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolWithdrawalRequest, Lum_Network_Millions_QueryWithdrawalResponse>

  func makeAccountWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryAccountWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>

  func makeAccountPoolWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Lum_Network_Millions_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Lum_Network_Millions_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Lum_Network_Millions_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryParamsRequest, Lum_Network_Millions_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makePoolsCall(
    _ request: Lum_Network_Millions_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolsRequest, Lum_Network_Millions_QueryPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  internal func makePoolCall(
    _ request: Lum_Network_Millions_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolRequest, Lum_Network_Millions_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func makeDepositsCall(
    _ request: Lum_Network_Millions_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.deposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }

  internal func makePoolDepositsCall(
    _ request: Lum_Network_Millions_QueryPoolDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDepositsInterceptors() ?? []
    )
  }

  internal func makePoolDepositCall(
    _ request: Lum_Network_Millions_QueryPoolDepositRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDepositRequest, Lum_Network_Millions_QueryDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDepositInterceptors() ?? []
    )
  }

  internal func makeAccountDepositsCall(
    _ request: Lum_Network_Millions_QueryAccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountDepositsInterceptors() ?? []
    )
  }

  internal func makeAccountPoolDepositsCall(
    _ request: Lum_Network_Millions_QueryAccountPoolDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolDepositsInterceptors() ?? []
    )
  }

  internal func makeDrawsCall(
    _ request: Lum_Network_Millions_QueryDrawsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryDrawsRequest, Lum_Network_Millions_QueryDrawsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.draws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDrawsInterceptors() ?? []
    )
  }

  internal func makePoolDrawsCall(
    _ request: Lum_Network_Millions_QueryPoolDrawsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawsRequest, Lum_Network_Millions_QueryDrawsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDraws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawsInterceptors() ?? []
    )
  }

  internal func makePoolDrawCall(
    _ request: Lum_Network_Millions_QueryPoolDrawRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawRequest, Lum_Network_Millions_QueryDrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawInterceptors() ?? []
    )
  }

  internal func makePrizesCall(
    _ request: Lum_Network_Millions_QueryPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.prizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrizesInterceptors() ?? []
    )
  }

  internal func makePoolPrizesCall(
    _ request: Lum_Network_Millions_QueryPoolPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolPrizesInterceptors() ?? []
    )
  }

  internal func makePoolDrawPrizesCall(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawPrizesInterceptors() ?? []
    )
  }

  internal func makePoolDrawPrizeCall(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolDrawPrizeRequest, Lum_Network_Millions_QueryPrizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawPrizeInterceptors() ?? []
    )
  }

  internal func makeAccountPrizesCall(
    _ request: Lum_Network_Millions_QueryAccountPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPrizesInterceptors() ?? []
    )
  }

  internal func makeAccountPoolPrizesCall(
    _ request: Lum_Network_Millions_QueryAccountPoolPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolPrizesInterceptors() ?? []
    )
  }

  internal func makeAccountPoolDrawPrizesCall(
    _ request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDrawPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolDrawPrizesInterceptors() ?? []
    )
  }

  internal func makeWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.withdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawalsInterceptors() ?? []
    )
  }

  internal func makePoolWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolWithdrawalsInterceptors() ?? []
    )
  }

  internal func makePoolWithdrawalCall(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryPoolWithdrawalRequest, Lum_Network_Millions_QueryWithdrawalResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolWithdrawalInterceptors() ?? []
    )
  }

  internal func makeAccountWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryAccountWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountWithdrawalsInterceptors() ?? []
    )
  }

  internal func makeAccountPoolWithdrawalsCall(
    _ request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolWithdrawalsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Lum_Network_Millions_QueryAsyncClientProtocol {
  internal func params(
    _ request: Lum_Network_Millions_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func pools(
    _ request: Lum_Network_Millions_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  internal func pool(
    _ request: Lum_Network_Millions_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func deposits(
    _ request: Lum_Network_Millions_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.deposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }

  internal func poolDeposits(
    _ request: Lum_Network_Millions_QueryPoolDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDepositsInterceptors() ?? []
    )
  }

  internal func poolDeposit(
    _ request: Lum_Network_Millions_QueryPoolDepositRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDepositInterceptors() ?? []
    )
  }

  internal func accountDeposits(
    _ request: Lum_Network_Millions_QueryAccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountDepositsInterceptors() ?? []
    )
  }

  internal func accountPoolDeposits(
    _ request: Lum_Network_Millions_QueryAccountPoolDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolDepositsInterceptors() ?? []
    )
  }

  internal func draws(
    _ request: Lum_Network_Millions_QueryDrawsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDrawsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.draws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDrawsInterceptors() ?? []
    )
  }

  internal func poolDraws(
    _ request: Lum_Network_Millions_QueryPoolDrawsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDrawsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDraws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawsInterceptors() ?? []
    )
  }

  internal func poolDraw(
    _ request: Lum_Network_Millions_QueryPoolDrawRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryDrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawInterceptors() ?? []
    )
  }

  internal func prizes(
    _ request: Lum_Network_Millions_QueryPrizesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.prizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrizesInterceptors() ?? []
    )
  }

  internal func poolPrizes(
    _ request: Lum_Network_Millions_QueryPoolPrizesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolPrizesInterceptors() ?? []
    )
  }

  internal func poolDrawPrizes(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawPrizesInterceptors() ?? []
    )
  }

  internal func poolDrawPrize(
    _ request: Lum_Network_Millions_QueryPoolDrawPrizeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolDrawPrizeInterceptors() ?? []
    )
  }

  internal func accountPrizes(
    _ request: Lum_Network_Millions_QueryAccountPrizesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPrizesInterceptors() ?? []
    )
  }

  internal func accountPoolPrizes(
    _ request: Lum_Network_Millions_QueryAccountPoolPrizesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolPrizesInterceptors() ?? []
    )
  }

  internal func accountPoolDrawPrizes(
    _ request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDrawPrizes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolDrawPrizesInterceptors() ?? []
    )
  }

  internal func withdrawals(
    _ request: Lum_Network_Millions_QueryWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.withdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawalsInterceptors() ?? []
    )
  }

  internal func poolWithdrawals(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolWithdrawalsInterceptors() ?? []
    )
  }

  internal func poolWithdrawal(
    _ request: Lum_Network_Millions_QueryPoolWithdrawalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryWithdrawalResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolWithdrawalInterceptors() ?? []
    )
  }

  internal func accountWithdrawals(
    _ request: Lum_Network_Millions_QueryAccountWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountWithdrawalsInterceptors() ?? []
    )
  }

  internal func accountPoolWithdrawals(
    _ request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolWithdrawals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountPoolWithdrawalsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Lum_Network_Millions_QueryAsyncClient: Lum_Network_Millions_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Lum_Network_Millions_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Lum_Network_Millions_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryParamsRequest, Lum_Network_Millions_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'pools'.
  func makePoolsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolsRequest, Lum_Network_Millions_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolRequest, Lum_Network_Millions_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'deposits'.
  func makeDepositsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolDeposits'.
  func makePoolDepositsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolDeposit'.
  func makePoolDepositInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolDepositRequest, Lum_Network_Millions_QueryDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'accountDeposits'.
  func makeAccountDepositsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'accountPoolDeposits'.
  func makeAccountPoolDepositsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'draws'.
  func makeDrawsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolDraws'.
  func makePoolDrawsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolDraw'.
  func makePoolDrawInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolDrawRequest, Lum_Network_Millions_QueryDrawResponse>]

  /// - Returns: Interceptors to use when invoking 'prizes'.
  func makePrizesInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when invoking 'poolPrizes'.
  func makePoolPrizesInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when invoking 'poolDrawPrizes'.
  func makePoolDrawPrizesInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when invoking 'poolDrawPrize'.
  func makePoolDrawPrizeInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolDrawPrizeRequest, Lum_Network_Millions_QueryPrizeResponse>]

  /// - Returns: Interceptors to use when invoking 'accountPrizes'.
  func makeAccountPrizesInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when invoking 'accountPoolPrizes'.
  func makeAccountPoolPrizesInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when invoking 'accountPoolDrawPrizes'.
  func makeAccountPoolDrawPrizesInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawals'.
  func makeWithdrawalsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolWithdrawals'.
  func makePoolWithdrawalsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolWithdrawal'.
  func makePoolWithdrawalInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryPoolWithdrawalRequest, Lum_Network_Millions_QueryWithdrawalResponse>]

  /// - Returns: Interceptors to use when invoking 'accountWithdrawals'.
  func makeAccountWithdrawalsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]

  /// - Returns: Interceptors to use when invoking 'accountPoolWithdrawals'.
  func makeAccountPoolWithdrawalsInterceptors() -> [ClientInterceptor<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]
}

internal enum Lum_Network_Millions_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "lum.network.millions.Query",
    methods: [
      Lum_Network_Millions_QueryClientMetadata.Methods.params,
      Lum_Network_Millions_QueryClientMetadata.Methods.pools,
      Lum_Network_Millions_QueryClientMetadata.Methods.pool,
      Lum_Network_Millions_QueryClientMetadata.Methods.deposits,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposits,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolDeposit,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountDeposits,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDeposits,
      Lum_Network_Millions_QueryClientMetadata.Methods.draws,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolDraws,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolDraw,
      Lum_Network_Millions_QueryClientMetadata.Methods.prizes,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolPrizes,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrizes,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolDrawPrize,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountPrizes,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolPrizes,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolDrawPrizes,
      Lum_Network_Millions_QueryClientMetadata.Methods.withdrawals,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawals,
      Lum_Network_Millions_QueryClientMetadata.Methods.poolWithdrawal,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountWithdrawals,
      Lum_Network_Millions_QueryClientMetadata.Methods.accountPoolWithdrawals,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/lum.network.millions.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/lum.network.millions.Query/Pools",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/lum.network.millions.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let deposits = GRPCMethodDescriptor(
      name: "Deposits",
      path: "/lum.network.millions.Query/Deposits",
      type: GRPCCallType.unary
    )

    internal static let poolDeposits = GRPCMethodDescriptor(
      name: "PoolDeposits",
      path: "/lum.network.millions.Query/PoolDeposits",
      type: GRPCCallType.unary
    )

    internal static let poolDeposit = GRPCMethodDescriptor(
      name: "PoolDeposit",
      path: "/lum.network.millions.Query/PoolDeposit",
      type: GRPCCallType.unary
    )

    internal static let accountDeposits = GRPCMethodDescriptor(
      name: "AccountDeposits",
      path: "/lum.network.millions.Query/AccountDeposits",
      type: GRPCCallType.unary
    )

    internal static let accountPoolDeposits = GRPCMethodDescriptor(
      name: "AccountPoolDeposits",
      path: "/lum.network.millions.Query/AccountPoolDeposits",
      type: GRPCCallType.unary
    )

    internal static let draws = GRPCMethodDescriptor(
      name: "Draws",
      path: "/lum.network.millions.Query/Draws",
      type: GRPCCallType.unary
    )

    internal static let poolDraws = GRPCMethodDescriptor(
      name: "PoolDraws",
      path: "/lum.network.millions.Query/PoolDraws",
      type: GRPCCallType.unary
    )

    internal static let poolDraw = GRPCMethodDescriptor(
      name: "PoolDraw",
      path: "/lum.network.millions.Query/PoolDraw",
      type: GRPCCallType.unary
    )

    internal static let prizes = GRPCMethodDescriptor(
      name: "Prizes",
      path: "/lum.network.millions.Query/Prizes",
      type: GRPCCallType.unary
    )

    internal static let poolPrizes = GRPCMethodDescriptor(
      name: "PoolPrizes",
      path: "/lum.network.millions.Query/PoolPrizes",
      type: GRPCCallType.unary
    )

    internal static let poolDrawPrizes = GRPCMethodDescriptor(
      name: "PoolDrawPrizes",
      path: "/lum.network.millions.Query/PoolDrawPrizes",
      type: GRPCCallType.unary
    )

    internal static let poolDrawPrize = GRPCMethodDescriptor(
      name: "PoolDrawPrize",
      path: "/lum.network.millions.Query/PoolDrawPrize",
      type: GRPCCallType.unary
    )

    internal static let accountPrizes = GRPCMethodDescriptor(
      name: "AccountPrizes",
      path: "/lum.network.millions.Query/AccountPrizes",
      type: GRPCCallType.unary
    )

    internal static let accountPoolPrizes = GRPCMethodDescriptor(
      name: "AccountPoolPrizes",
      path: "/lum.network.millions.Query/AccountPoolPrizes",
      type: GRPCCallType.unary
    )

    internal static let accountPoolDrawPrizes = GRPCMethodDescriptor(
      name: "AccountPoolDrawPrizes",
      path: "/lum.network.millions.Query/AccountPoolDrawPrizes",
      type: GRPCCallType.unary
    )

    internal static let withdrawals = GRPCMethodDescriptor(
      name: "Withdrawals",
      path: "/lum.network.millions.Query/Withdrawals",
      type: GRPCCallType.unary
    )

    internal static let poolWithdrawals = GRPCMethodDescriptor(
      name: "PoolWithdrawals",
      path: "/lum.network.millions.Query/PoolWithdrawals",
      type: GRPCCallType.unary
    )

    internal static let poolWithdrawal = GRPCMethodDescriptor(
      name: "PoolWithdrawal",
      path: "/lum.network.millions.Query/PoolWithdrawal",
      type: GRPCCallType.unary
    )

    internal static let accountWithdrawals = GRPCMethodDescriptor(
      name: "AccountWithdrawals",
      path: "/lum.network.millions.Query/AccountWithdrawals",
      type: GRPCCallType.unary
    )

    internal static let accountPoolWithdrawals = GRPCMethodDescriptor(
      name: "AccountPoolWithdrawals",
      path: "/lum.network.millions.Query/AccountPoolWithdrawals",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Lum_Network_Millions_QueryProvider: CallHandlerProvider {
  var interceptors: Lum_Network_Millions_QueryServerInterceptorFactoryProtocol? { get }

  func params(request: Lum_Network_Millions_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryParamsResponse>

  func pools(request: Lum_Network_Millions_QueryPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPoolsResponse>

  func pool(request: Lum_Network_Millions_QueryPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPoolResponse>

  func deposits(request: Lum_Network_Millions_QueryDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDepositsResponse>

  func poolDeposits(request: Lum_Network_Millions_QueryPoolDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDepositsResponse>

  func poolDeposit(request: Lum_Network_Millions_QueryPoolDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDepositResponse>

  func accountDeposits(request: Lum_Network_Millions_QueryAccountDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDepositsResponse>

  func accountPoolDeposits(request: Lum_Network_Millions_QueryAccountPoolDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDepositsResponse>

  func draws(request: Lum_Network_Millions_QueryDrawsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDrawsResponse>

  func poolDraws(request: Lum_Network_Millions_QueryPoolDrawsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDrawsResponse>

  func poolDraw(request: Lum_Network_Millions_QueryPoolDrawRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryDrawResponse>

  func prizes(request: Lum_Network_Millions_QueryPrizesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizesResponse>

  func poolPrizes(request: Lum_Network_Millions_QueryPoolPrizesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizesResponse>

  func poolDrawPrizes(request: Lum_Network_Millions_QueryPoolDrawPrizesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizesResponse>

  func poolDrawPrize(request: Lum_Network_Millions_QueryPoolDrawPrizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizeResponse>

  func accountPrizes(request: Lum_Network_Millions_QueryAccountPrizesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizesResponse>

  func accountPoolPrizes(request: Lum_Network_Millions_QueryAccountPoolPrizesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizesResponse>

  func accountPoolDrawPrizes(request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryPrizesResponse>

  func withdrawals(request: Lum_Network_Millions_QueryWithdrawalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryWithdrawalsResponse>

  func poolWithdrawals(request: Lum_Network_Millions_QueryPoolWithdrawalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryWithdrawalsResponse>

  func poolWithdrawal(request: Lum_Network_Millions_QueryPoolWithdrawalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryWithdrawalResponse>

  func accountWithdrawals(request: Lum_Network_Millions_QueryAccountWithdrawalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryWithdrawalsResponse>

  func accountPoolWithdrawals(request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Millions_QueryWithdrawalsResponse>
}

extension Lum_Network_Millions_QueryProvider {
  internal var serviceName: Substring {
    return Lum_Network_Millions_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Pools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        userFunction: self.pools(request:context:)
      )

    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "Deposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeDepositsInterceptors() ?? [],
        userFunction: self.deposits(request:context:)
      )

    case "PoolDeposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makePoolDepositsInterceptors() ?? [],
        userFunction: self.poolDeposits(request:context:)
      )

    case "PoolDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDepositRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositResponse>(),
        interceptors: self.interceptors?.makePoolDepositInterceptors() ?? [],
        userFunction: self.poolDeposit(request:context:)
      )

    case "AccountDeposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeAccountDepositsInterceptors() ?? [],
        userFunction: self.accountDeposits(request:context:)
      )

    case "AccountPoolDeposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeAccountPoolDepositsInterceptors() ?? [],
        userFunction: self.accountPoolDeposits(request:context:)
      )

    case "Draws":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryDrawsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDrawsResponse>(),
        interceptors: self.interceptors?.makeDrawsInterceptors() ?? [],
        userFunction: self.draws(request:context:)
      )

    case "PoolDraws":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDrawsResponse>(),
        interceptors: self.interceptors?.makePoolDrawsInterceptors() ?? [],
        userFunction: self.poolDraws(request:context:)
      )

    case "PoolDraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDrawResponse>(),
        interceptors: self.interceptors?.makePoolDrawInterceptors() ?? [],
        userFunction: self.poolDraw(request:context:)
      )

    case "Prizes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makePrizesInterceptors() ?? [],
        userFunction: self.prizes(request:context:)
      )

    case "PoolPrizes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makePoolPrizesInterceptors() ?? [],
        userFunction: self.poolPrizes(request:context:)
      )

    case "PoolDrawPrizes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makePoolDrawPrizesInterceptors() ?? [],
        userFunction: self.poolDrawPrizes(request:context:)
      )

    case "PoolDrawPrize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawPrizeRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizeResponse>(),
        interceptors: self.interceptors?.makePoolDrawPrizeInterceptors() ?? [],
        userFunction: self.poolDrawPrize(request:context:)
      )

    case "AccountPrizes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makeAccountPrizesInterceptors() ?? [],
        userFunction: self.accountPrizes(request:context:)
      )

    case "AccountPoolPrizes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makeAccountPoolPrizesInterceptors() ?? [],
        userFunction: self.accountPoolPrizes(request:context:)
      )

    case "AccountPoolDrawPrizes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makeAccountPoolDrawPrizesInterceptors() ?? [],
        userFunction: self.accountPoolDrawPrizes(request:context:)
      )

    case "Withdrawals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makeWithdrawalsInterceptors() ?? [],
        userFunction: self.withdrawals(request:context:)
      )

    case "PoolWithdrawals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makePoolWithdrawalsInterceptors() ?? [],
        userFunction: self.poolWithdrawals(request:context:)
      )

    case "PoolWithdrawal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolWithdrawalRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalResponse>(),
        interceptors: self.interceptors?.makePoolWithdrawalInterceptors() ?? [],
        userFunction: self.poolWithdrawal(request:context:)
      )

    case "AccountWithdrawals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makeAccountWithdrawalsInterceptors() ?? [],
        userFunction: self.accountWithdrawals(request:context:)
      )

    case "AccountPoolWithdrawals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makeAccountPoolWithdrawalsInterceptors() ?? [],
        userFunction: self.accountPoolWithdrawals(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Lum_Network_Millions_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Lum_Network_Millions_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func params(
    request: Lum_Network_Millions_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryParamsResponse

  @Sendable func pools(
    request: Lum_Network_Millions_QueryPoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPoolsResponse

  @Sendable func pool(
    request: Lum_Network_Millions_QueryPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPoolResponse

  @Sendable func deposits(
    request: Lum_Network_Millions_QueryDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse

  @Sendable func poolDeposits(
    request: Lum_Network_Millions_QueryPoolDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse

  @Sendable func poolDeposit(
    request: Lum_Network_Millions_QueryPoolDepositRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDepositResponse

  @Sendable func accountDeposits(
    request: Lum_Network_Millions_QueryAccountDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse

  @Sendable func accountPoolDeposits(
    request: Lum_Network_Millions_QueryAccountPoolDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDepositsResponse

  @Sendable func draws(
    request: Lum_Network_Millions_QueryDrawsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDrawsResponse

  @Sendable func poolDraws(
    request: Lum_Network_Millions_QueryPoolDrawsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDrawsResponse

  @Sendable func poolDraw(
    request: Lum_Network_Millions_QueryPoolDrawRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryDrawResponse

  @Sendable func prizes(
    request: Lum_Network_Millions_QueryPrizesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse

  @Sendable func poolPrizes(
    request: Lum_Network_Millions_QueryPoolPrizesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse

  @Sendable func poolDrawPrizes(
    request: Lum_Network_Millions_QueryPoolDrawPrizesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse

  @Sendable func poolDrawPrize(
    request: Lum_Network_Millions_QueryPoolDrawPrizeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizeResponse

  @Sendable func accountPrizes(
    request: Lum_Network_Millions_QueryAccountPrizesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse

  @Sendable func accountPoolPrizes(
    request: Lum_Network_Millions_QueryAccountPoolPrizesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse

  @Sendable func accountPoolDrawPrizes(
    request: Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryPrizesResponse

  @Sendable func withdrawals(
    request: Lum_Network_Millions_QueryWithdrawalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse

  @Sendable func poolWithdrawals(
    request: Lum_Network_Millions_QueryPoolWithdrawalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse

  @Sendable func poolWithdrawal(
    request: Lum_Network_Millions_QueryPoolWithdrawalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryWithdrawalResponse

  @Sendable func accountWithdrawals(
    request: Lum_Network_Millions_QueryAccountWithdrawalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse

  @Sendable func accountPoolWithdrawals(
    request: Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Millions_QueryWithdrawalsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Lum_Network_Millions_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Lum_Network_Millions_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Lum_Network_Millions_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Lum_Network_Millions_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Pools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        wrapping: self.pools(request:context:)
      )

    case "Pool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        wrapping: self.pool(request:context:)
      )

    case "Deposits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeDepositsInterceptors() ?? [],
        wrapping: self.deposits(request:context:)
      )

    case "PoolDeposits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makePoolDepositsInterceptors() ?? [],
        wrapping: self.poolDeposits(request:context:)
      )

    case "PoolDeposit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDepositRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositResponse>(),
        interceptors: self.interceptors?.makePoolDepositInterceptors() ?? [],
        wrapping: self.poolDeposit(request:context:)
      )

    case "AccountDeposits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeAccountDepositsInterceptors() ?? [],
        wrapping: self.accountDeposits(request:context:)
      )

    case "AccountPoolDeposits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeAccountPoolDepositsInterceptors() ?? [],
        wrapping: self.accountPoolDeposits(request:context:)
      )

    case "Draws":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryDrawsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDrawsResponse>(),
        interceptors: self.interceptors?.makeDrawsInterceptors() ?? [],
        wrapping: self.draws(request:context:)
      )

    case "PoolDraws":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDrawsResponse>(),
        interceptors: self.interceptors?.makePoolDrawsInterceptors() ?? [],
        wrapping: self.poolDraws(request:context:)
      )

    case "PoolDraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryDrawResponse>(),
        interceptors: self.interceptors?.makePoolDrawInterceptors() ?? [],
        wrapping: self.poolDraw(request:context:)
      )

    case "Prizes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makePrizesInterceptors() ?? [],
        wrapping: self.prizes(request:context:)
      )

    case "PoolPrizes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makePoolPrizesInterceptors() ?? [],
        wrapping: self.poolPrizes(request:context:)
      )

    case "PoolDrawPrizes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makePoolDrawPrizesInterceptors() ?? [],
        wrapping: self.poolDrawPrizes(request:context:)
      )

    case "PoolDrawPrize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolDrawPrizeRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizeResponse>(),
        interceptors: self.interceptors?.makePoolDrawPrizeInterceptors() ?? [],
        wrapping: self.poolDrawPrize(request:context:)
      )

    case "AccountPrizes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makeAccountPrizesInterceptors() ?? [],
        wrapping: self.accountPrizes(request:context:)
      )

    case "AccountPoolPrizes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makeAccountPoolPrizesInterceptors() ?? [],
        wrapping: self.accountPoolPrizes(request:context:)
      )

    case "AccountPoolDrawPrizes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryPrizesResponse>(),
        interceptors: self.interceptors?.makeAccountPoolDrawPrizesInterceptors() ?? [],
        wrapping: self.accountPoolDrawPrizes(request:context:)
      )

    case "Withdrawals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makeWithdrawalsInterceptors() ?? [],
        wrapping: self.withdrawals(request:context:)
      )

    case "PoolWithdrawals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makePoolWithdrawalsInterceptors() ?? [],
        wrapping: self.poolWithdrawals(request:context:)
      )

    case "PoolWithdrawal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryPoolWithdrawalRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalResponse>(),
        interceptors: self.interceptors?.makePoolWithdrawalInterceptors() ?? [],
        wrapping: self.poolWithdrawal(request:context:)
      )

    case "AccountWithdrawals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makeAccountWithdrawalsInterceptors() ?? [],
        wrapping: self.accountWithdrawals(request:context:)
      )

    case "AccountPoolWithdrawals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Millions_QueryWithdrawalsResponse>(),
        interceptors: self.interceptors?.makeAccountPoolWithdrawalsInterceptors() ?? [],
        wrapping: self.accountPoolWithdrawals(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Lum_Network_Millions_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryParamsRequest, Lum_Network_Millions_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'pools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolsRequest, Lum_Network_Millions_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolRequest, Lum_Network_Millions_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'deposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'poolDeposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolDepositsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'poolDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolDepositInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolDepositRequest, Lum_Network_Millions_QueryDepositResponse>]

  /// - Returns: Interceptors to use when handling 'accountDeposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountDepositsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'accountPoolDeposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountPoolDepositsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountPoolDepositsRequest, Lum_Network_Millions_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'draws'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDrawsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>]

  /// - Returns: Interceptors to use when handling 'poolDraws'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolDrawsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolDrawsRequest, Lum_Network_Millions_QueryDrawsResponse>]

  /// - Returns: Interceptors to use when handling 'poolDraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolDrawInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolDrawRequest, Lum_Network_Millions_QueryDrawResponse>]

  /// - Returns: Interceptors to use when handling 'prizes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePrizesInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when handling 'poolPrizes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolPrizesInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when handling 'poolDrawPrizes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolDrawPrizesInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when handling 'poolDrawPrize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolDrawPrizeInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolDrawPrizeRequest, Lum_Network_Millions_QueryPrizeResponse>]

  /// - Returns: Interceptors to use when handling 'accountPrizes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountPrizesInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when handling 'accountPoolPrizes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountPoolPrizesInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountPoolPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when handling 'accountPoolDrawPrizes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountPoolDrawPrizesInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountPoolDrawPrizesRequest, Lum_Network_Millions_QueryPrizesResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawalsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]

  /// - Returns: Interceptors to use when handling 'poolWithdrawals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolWithdrawalsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]

  /// - Returns: Interceptors to use when handling 'poolWithdrawal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolWithdrawalInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryPoolWithdrawalRequest, Lum_Network_Millions_QueryWithdrawalResponse>]

  /// - Returns: Interceptors to use when handling 'accountWithdrawals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountWithdrawalsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]

  /// - Returns: Interceptors to use when handling 'accountPoolWithdrawals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountPoolWithdrawalsInterceptors() -> [ServerInterceptor<Lum_Network_Millions_QueryAccountPoolWithdrawalsRequest, Lum_Network_Millions_QueryWithdrawalsResponse>]
}

internal enum Lum_Network_Millions_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "lum.network.millions.Query",
    methods: [
      Lum_Network_Millions_QueryServerMetadata.Methods.params,
      Lum_Network_Millions_QueryServerMetadata.Methods.pools,
      Lum_Network_Millions_QueryServerMetadata.Methods.pool,
      Lum_Network_Millions_QueryServerMetadata.Methods.deposits,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolDeposits,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolDeposit,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountDeposits,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountPoolDeposits,
      Lum_Network_Millions_QueryServerMetadata.Methods.draws,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolDraws,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolDraw,
      Lum_Network_Millions_QueryServerMetadata.Methods.prizes,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolPrizes,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolDrawPrizes,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolDrawPrize,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountPrizes,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountPoolPrizes,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountPoolDrawPrizes,
      Lum_Network_Millions_QueryServerMetadata.Methods.withdrawals,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolWithdrawals,
      Lum_Network_Millions_QueryServerMetadata.Methods.poolWithdrawal,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountWithdrawals,
      Lum_Network_Millions_QueryServerMetadata.Methods.accountPoolWithdrawals,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/lum.network.millions.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/lum.network.millions.Query/Pools",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/lum.network.millions.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let deposits = GRPCMethodDescriptor(
      name: "Deposits",
      path: "/lum.network.millions.Query/Deposits",
      type: GRPCCallType.unary
    )

    internal static let poolDeposits = GRPCMethodDescriptor(
      name: "PoolDeposits",
      path: "/lum.network.millions.Query/PoolDeposits",
      type: GRPCCallType.unary
    )

    internal static let poolDeposit = GRPCMethodDescriptor(
      name: "PoolDeposit",
      path: "/lum.network.millions.Query/PoolDeposit",
      type: GRPCCallType.unary
    )

    internal static let accountDeposits = GRPCMethodDescriptor(
      name: "AccountDeposits",
      path: "/lum.network.millions.Query/AccountDeposits",
      type: GRPCCallType.unary
    )

    internal static let accountPoolDeposits = GRPCMethodDescriptor(
      name: "AccountPoolDeposits",
      path: "/lum.network.millions.Query/AccountPoolDeposits",
      type: GRPCCallType.unary
    )

    internal static let draws = GRPCMethodDescriptor(
      name: "Draws",
      path: "/lum.network.millions.Query/Draws",
      type: GRPCCallType.unary
    )

    internal static let poolDraws = GRPCMethodDescriptor(
      name: "PoolDraws",
      path: "/lum.network.millions.Query/PoolDraws",
      type: GRPCCallType.unary
    )

    internal static let poolDraw = GRPCMethodDescriptor(
      name: "PoolDraw",
      path: "/lum.network.millions.Query/PoolDraw",
      type: GRPCCallType.unary
    )

    internal static let prizes = GRPCMethodDescriptor(
      name: "Prizes",
      path: "/lum.network.millions.Query/Prizes",
      type: GRPCCallType.unary
    )

    internal static let poolPrizes = GRPCMethodDescriptor(
      name: "PoolPrizes",
      path: "/lum.network.millions.Query/PoolPrizes",
      type: GRPCCallType.unary
    )

    internal static let poolDrawPrizes = GRPCMethodDescriptor(
      name: "PoolDrawPrizes",
      path: "/lum.network.millions.Query/PoolDrawPrizes",
      type: GRPCCallType.unary
    )

    internal static let poolDrawPrize = GRPCMethodDescriptor(
      name: "PoolDrawPrize",
      path: "/lum.network.millions.Query/PoolDrawPrize",
      type: GRPCCallType.unary
    )

    internal static let accountPrizes = GRPCMethodDescriptor(
      name: "AccountPrizes",
      path: "/lum.network.millions.Query/AccountPrizes",
      type: GRPCCallType.unary
    )

    internal static let accountPoolPrizes = GRPCMethodDescriptor(
      name: "AccountPoolPrizes",
      path: "/lum.network.millions.Query/AccountPoolPrizes",
      type: GRPCCallType.unary
    )

    internal static let accountPoolDrawPrizes = GRPCMethodDescriptor(
      name: "AccountPoolDrawPrizes",
      path: "/lum.network.millions.Query/AccountPoolDrawPrizes",
      type: GRPCCallType.unary
    )

    internal static let withdrawals = GRPCMethodDescriptor(
      name: "Withdrawals",
      path: "/lum.network.millions.Query/Withdrawals",
      type: GRPCCallType.unary
    )

    internal static let poolWithdrawals = GRPCMethodDescriptor(
      name: "PoolWithdrawals",
      path: "/lum.network.millions.Query/PoolWithdrawals",
      type: GRPCCallType.unary
    )

    internal static let poolWithdrawal = GRPCMethodDescriptor(
      name: "PoolWithdrawal",
      path: "/lum.network.millions.Query/PoolWithdrawal",
      type: GRPCCallType.unary
    )

    internal static let accountWithdrawals = GRPCMethodDescriptor(
      name: "AccountWithdrawals",
      path: "/lum.network.millions.Query/AccountWithdrawals",
      type: GRPCCallType.unary
    )

    internal static let accountPoolWithdrawals = GRPCMethodDescriptor(
      name: "AccountPoolWithdrawals",
      path: "/lum.network.millions.Query/AccountPoolWithdrawals",
      type: GRPCCallType.unary
    )
  }
}
