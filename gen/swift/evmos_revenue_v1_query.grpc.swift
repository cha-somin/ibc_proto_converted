//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: evmos/revenue/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Evmos_Revenue_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Evmos_Revenue_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? { get }

  func revenues(
    _ request: Evmos_Revenue_V1_QueryRevenuesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Revenue_V1_QueryRevenuesRequest, Evmos_Revenue_V1_QueryRevenuesResponse>

  func revenue(
    _ request: Evmos_Revenue_V1_QueryRevenueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Revenue_V1_QueryRevenueRequest, Evmos_Revenue_V1_QueryRevenueResponse>

  func params(
    _ request: Evmos_Revenue_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Revenue_V1_QueryParamsRequest, Evmos_Revenue_V1_QueryParamsResponse>

  func deployerRevenues(
    _ request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Revenue_V1_QueryDeployerRevenuesRequest, Evmos_Revenue_V1_QueryDeployerRevenuesResponse>

  func withdrawerRevenues(
    _ request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>
}

extension Evmos_Revenue_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "evmos.revenue.v1.Query"
  }

  /// Revenues retrieves all registered revenues
  ///
  /// - Parameters:
  ///   - request: Request to send to Revenues.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revenues(
    _ request: Evmos_Revenue_V1_QueryRevenuesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Revenue_V1_QueryRevenuesRequest, Evmos_Revenue_V1_QueryRevenuesResponse> {
    return self.makeUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.revenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevenuesInterceptors() ?? []
    )
  }

  /// Revenue retrieves a registered revenue for a given contract address
  ///
  /// - Parameters:
  ///   - request: Request to send to Revenue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revenue(
    _ request: Evmos_Revenue_V1_QueryRevenueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Revenue_V1_QueryRevenueRequest, Evmos_Revenue_V1_QueryRevenueResponse> {
    return self.makeUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.revenue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevenueInterceptors() ?? []
    )
  }

  /// Params retrieves the revenue module params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Evmos_Revenue_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Revenue_V1_QueryParamsRequest, Evmos_Revenue_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DeployerRevenues retrieves all revenues that a given deployer has
  /// registered
  ///
  /// - Parameters:
  ///   - request: Request to send to DeployerRevenues.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deployerRevenues(
    _ request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Revenue_V1_QueryDeployerRevenuesRequest, Evmos_Revenue_V1_QueryDeployerRevenuesResponse> {
    return self.makeUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.deployerRevenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployerRevenuesInterceptors() ?? []
    )
  }

  /// WithdrawerRevenues retrieves all revenues with a given withdrawer
  /// address
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawerRevenues.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawerRevenues(
    _ request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse> {
    return self.makeUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.withdrawerRevenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawerRevenuesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Evmos_Revenue_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Evmos_Revenue_V1_QueryNIOClient")
internal final class Evmos_Revenue_V1_QueryClient: Evmos_Revenue_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the evmos.revenue.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Evmos_Revenue_V1_QueryNIOClient: Evmos_Revenue_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the evmos.revenue.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Evmos_Revenue_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeRevenuesCall(
    _ request: Evmos_Revenue_V1_QueryRevenuesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryRevenuesRequest, Evmos_Revenue_V1_QueryRevenuesResponse>

  func makeRevenueCall(
    _ request: Evmos_Revenue_V1_QueryRevenueRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryRevenueRequest, Evmos_Revenue_V1_QueryRevenueResponse>

  func makeParamsCall(
    _ request: Evmos_Revenue_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryParamsRequest, Evmos_Revenue_V1_QueryParamsResponse>

  func makeDeployerRevenuesCall(
    _ request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryDeployerRevenuesRequest, Evmos_Revenue_V1_QueryDeployerRevenuesResponse>

  func makeWithdrawerRevenuesCall(
    _ request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Revenue_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Evmos_Revenue_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRevenuesCall(
    _ request: Evmos_Revenue_V1_QueryRevenuesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryRevenuesRequest, Evmos_Revenue_V1_QueryRevenuesResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.revenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevenuesInterceptors() ?? []
    )
  }

  internal func makeRevenueCall(
    _ request: Evmos_Revenue_V1_QueryRevenueRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryRevenueRequest, Evmos_Revenue_V1_QueryRevenueResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.revenue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevenueInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Evmos_Revenue_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryParamsRequest, Evmos_Revenue_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeDeployerRevenuesCall(
    _ request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryDeployerRevenuesRequest, Evmos_Revenue_V1_QueryDeployerRevenuesResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.deployerRevenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployerRevenuesInterceptors() ?? []
    )
  }

  internal func makeWithdrawerRevenuesCall(
    _ request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse> {
    return self.makeAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.withdrawerRevenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawerRevenuesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Revenue_V1_QueryAsyncClientProtocol {
  internal func revenues(
    _ request: Evmos_Revenue_V1_QueryRevenuesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Revenue_V1_QueryRevenuesResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.revenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevenuesInterceptors() ?? []
    )
  }

  internal func revenue(
    _ request: Evmos_Revenue_V1_QueryRevenueRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Revenue_V1_QueryRevenueResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.revenue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevenueInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Evmos_Revenue_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Revenue_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func deployerRevenues(
    _ request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Revenue_V1_QueryDeployerRevenuesResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.deployerRevenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployerRevenuesInterceptors() ?? []
    )
  }

  internal func withdrawerRevenues(
    _ request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse {
    return try await self.performAsyncUnaryCall(
      path: Evmos_Revenue_V1_QueryClientMetadata.Methods.withdrawerRevenues.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawerRevenuesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Evmos_Revenue_V1_QueryAsyncClient: Evmos_Revenue_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Evmos_Revenue_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'revenues'.
  func makeRevenuesInterceptors() -> [ClientInterceptor<Evmos_Revenue_V1_QueryRevenuesRequest, Evmos_Revenue_V1_QueryRevenuesResponse>]

  /// - Returns: Interceptors to use when invoking 'revenue'.
  func makeRevenueInterceptors() -> [ClientInterceptor<Evmos_Revenue_V1_QueryRevenueRequest, Evmos_Revenue_V1_QueryRevenueResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Evmos_Revenue_V1_QueryParamsRequest, Evmos_Revenue_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'deployerRevenues'.
  func makeDeployerRevenuesInterceptors() -> [ClientInterceptor<Evmos_Revenue_V1_QueryDeployerRevenuesRequest, Evmos_Revenue_V1_QueryDeployerRevenuesResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawerRevenues'.
  func makeWithdrawerRevenuesInterceptors() -> [ClientInterceptor<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>]
}

internal enum Evmos_Revenue_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "evmos.revenue.v1.Query",
    methods: [
      Evmos_Revenue_V1_QueryClientMetadata.Methods.revenues,
      Evmos_Revenue_V1_QueryClientMetadata.Methods.revenue,
      Evmos_Revenue_V1_QueryClientMetadata.Methods.params,
      Evmos_Revenue_V1_QueryClientMetadata.Methods.deployerRevenues,
      Evmos_Revenue_V1_QueryClientMetadata.Methods.withdrawerRevenues,
    ]
  )

  internal enum Methods {
    internal static let revenues = GRPCMethodDescriptor(
      name: "Revenues",
      path: "/evmos.revenue.v1.Query/Revenues",
      type: GRPCCallType.unary
    )

    internal static let revenue = GRPCMethodDescriptor(
      name: "Revenue",
      path: "/evmos.revenue.v1.Query/Revenue",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/evmos.revenue.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let deployerRevenues = GRPCMethodDescriptor(
      name: "DeployerRevenues",
      path: "/evmos.revenue.v1.Query/DeployerRevenues",
      type: GRPCCallType.unary
    )

    internal static let withdrawerRevenues = GRPCMethodDescriptor(
      name: "WithdrawerRevenues",
      path: "/evmos.revenue.v1.Query/WithdrawerRevenues",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Evmos_Revenue_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Evmos_Revenue_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Revenues retrieves all registered revenues
  func revenues(request: Evmos_Revenue_V1_QueryRevenuesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Revenue_V1_QueryRevenuesResponse>

  /// Revenue retrieves a registered revenue for a given contract address
  func revenue(request: Evmos_Revenue_V1_QueryRevenueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Revenue_V1_QueryRevenueResponse>

  /// Params retrieves the revenue module params
  func params(request: Evmos_Revenue_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Revenue_V1_QueryParamsResponse>

  /// DeployerRevenues retrieves all revenues that a given deployer has
  /// registered
  func deployerRevenues(request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Revenue_V1_QueryDeployerRevenuesResponse>

  /// WithdrawerRevenues retrieves all revenues with a given withdrawer
  /// address
  func withdrawerRevenues(request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>
}

extension Evmos_Revenue_V1_QueryProvider {
  internal var serviceName: Substring {
    return Evmos_Revenue_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Revenues":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryRevenuesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryRevenuesResponse>(),
        interceptors: self.interceptors?.makeRevenuesInterceptors() ?? [],
        userFunction: self.revenues(request:context:)
      )

    case "Revenue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryRevenueRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryRevenueResponse>(),
        interceptors: self.interceptors?.makeRevenueInterceptors() ?? [],
        userFunction: self.revenue(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "DeployerRevenues":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryDeployerRevenuesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryDeployerRevenuesResponse>(),
        interceptors: self.interceptors?.makeDeployerRevenuesInterceptors() ?? [],
        userFunction: self.deployerRevenues(request:context:)
      )

    case "WithdrawerRevenues":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>(),
        interceptors: self.interceptors?.makeWithdrawerRevenuesInterceptors() ?? [],
        userFunction: self.withdrawerRevenues(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Evmos_Revenue_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Evmos_Revenue_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Revenues retrieves all registered revenues
  @Sendable func revenues(
    request: Evmos_Revenue_V1_QueryRevenuesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Evmos_Revenue_V1_QueryRevenuesResponse

  /// Revenue retrieves a registered revenue for a given contract address
  @Sendable func revenue(
    request: Evmos_Revenue_V1_QueryRevenueRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Evmos_Revenue_V1_QueryRevenueResponse

  /// Params retrieves the revenue module params
  @Sendable func params(
    request: Evmos_Revenue_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Evmos_Revenue_V1_QueryParamsResponse

  /// DeployerRevenues retrieves all revenues that a given deployer has
  /// registered
  @Sendable func deployerRevenues(
    request: Evmos_Revenue_V1_QueryDeployerRevenuesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Evmos_Revenue_V1_QueryDeployerRevenuesResponse

  /// WithdrawerRevenues retrieves all revenues with a given withdrawer
  /// address
  @Sendable func withdrawerRevenues(
    request: Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Evmos_Revenue_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Evmos_Revenue_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Evmos_Revenue_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Evmos_Revenue_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Revenues":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryRevenuesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryRevenuesResponse>(),
        interceptors: self.interceptors?.makeRevenuesInterceptors() ?? [],
        wrapping: self.revenues(request:context:)
      )

    case "Revenue":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryRevenueRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryRevenueResponse>(),
        interceptors: self.interceptors?.makeRevenueInterceptors() ?? [],
        wrapping: self.revenue(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "DeployerRevenues":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryDeployerRevenuesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryDeployerRevenuesResponse>(),
        interceptors: self.interceptors?.makeDeployerRevenuesInterceptors() ?? [],
        wrapping: self.deployerRevenues(request:context:)
      )

    case "WithdrawerRevenues":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>(),
        interceptors: self.interceptors?.makeWithdrawerRevenuesInterceptors() ?? [],
        wrapping: self.withdrawerRevenues(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Evmos_Revenue_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'revenues'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevenuesInterceptors() -> [ServerInterceptor<Evmos_Revenue_V1_QueryRevenuesRequest, Evmos_Revenue_V1_QueryRevenuesResponse>]

  /// - Returns: Interceptors to use when handling 'revenue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevenueInterceptors() -> [ServerInterceptor<Evmos_Revenue_V1_QueryRevenueRequest, Evmos_Revenue_V1_QueryRevenueResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Evmos_Revenue_V1_QueryParamsRequest, Evmos_Revenue_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'deployerRevenues'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeployerRevenuesInterceptors() -> [ServerInterceptor<Evmos_Revenue_V1_QueryDeployerRevenuesRequest, Evmos_Revenue_V1_QueryDeployerRevenuesResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawerRevenues'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawerRevenuesInterceptors() -> [ServerInterceptor<Evmos_Revenue_V1_QueryWithdrawerRevenuesRequest, Evmos_Revenue_V1_QueryWithdrawerRevenuesResponse>]
}

internal enum Evmos_Revenue_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "evmos.revenue.v1.Query",
    methods: [
      Evmos_Revenue_V1_QueryServerMetadata.Methods.revenues,
      Evmos_Revenue_V1_QueryServerMetadata.Methods.revenue,
      Evmos_Revenue_V1_QueryServerMetadata.Methods.params,
      Evmos_Revenue_V1_QueryServerMetadata.Methods.deployerRevenues,
      Evmos_Revenue_V1_QueryServerMetadata.Methods.withdrawerRevenues,
    ]
  )

  internal enum Methods {
    internal static let revenues = GRPCMethodDescriptor(
      name: "Revenues",
      path: "/evmos.revenue.v1.Query/Revenues",
      type: GRPCCallType.unary
    )

    internal static let revenue = GRPCMethodDescriptor(
      name: "Revenue",
      path: "/evmos.revenue.v1.Query/Revenue",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/evmos.revenue.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let deployerRevenues = GRPCMethodDescriptor(
      name: "DeployerRevenues",
      path: "/evmos.revenue.v1.Query/DeployerRevenues",
      type: GRPCCallType.unary
    )

    internal static let withdrawerRevenues = GRPCMethodDescriptor(
      name: "WithdrawerRevenues",
      path: "/evmos.revenue.v1.Query/WithdrawerRevenues",
      type: GRPCCallType.unary
    )
  }
}
