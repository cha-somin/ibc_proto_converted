//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/leverage/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the x/leverage module's Msg service.
///
/// Usage: instantiate `Umee_Leverage_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Umee_Leverage_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? { get }

  func supply(
    _ request: Umee_Leverage_V1_MsgSupply,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgSupply, Umee_Leverage_V1_MsgSupplyResponse>

  func withdraw(
    _ request: Umee_Leverage_V1_MsgWithdraw,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgWithdraw, Umee_Leverage_V1_MsgWithdrawResponse>

  func maxWithdraw(
    _ request: Umee_Leverage_V1_MsgMaxWithdraw,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgMaxWithdraw, Umee_Leverage_V1_MsgMaxWithdrawResponse>

  func collateralize(
    _ request: Umee_Leverage_V1_MsgCollateralize,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgCollateralize, Umee_Leverage_V1_MsgCollateralizeResponse>

  func decollateralize(
    _ request: Umee_Leverage_V1_MsgDecollateralize,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgDecollateralize, Umee_Leverage_V1_MsgDecollateralizeResponse>

  func borrow(
    _ request: Umee_Leverage_V1_MsgBorrow,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgBorrow, Umee_Leverage_V1_MsgBorrowResponse>

  func maxBorrow(
    _ request: Umee_Leverage_V1_MsgMaxBorrow,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgMaxBorrow, Umee_Leverage_V1_MsgMaxBorrowResponse>

  func repay(
    _ request: Umee_Leverage_V1_MsgRepay,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgRepay, Umee_Leverage_V1_MsgRepayResponse>

  func liquidate(
    _ request: Umee_Leverage_V1_MsgLiquidate,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgLiquidate, Umee_Leverage_V1_MsgLiquidateResponse>

  func supplyCollateral(
    _ request: Umee_Leverage_V1_MsgSupplyCollateral,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgSupplyCollateral, Umee_Leverage_V1_MsgSupplyCollateralResponse>

  func govUpdateRegistry(
    _ request: Umee_Leverage_V1_MsgGovUpdateRegistry,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_MsgGovUpdateRegistry, Umee_Leverage_V1_MsgGovUpdateRegistryResponse>
}

extension Umee_Leverage_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "umee.leverage.v1.Msg"
  }

  /// Supply moves tokens from user balance to the module for lending or collateral.
  /// The user receives uTokens in return.
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Umee_Leverage_V1_MsgSupply,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgSupply, Umee_Leverage_V1_MsgSupplyResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// Withdraw moves previously supplied tokens from the module back to the user balance in
  /// exchange for burning uTokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdraw(
    _ request: Umee_Leverage_V1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgWithdraw, Umee_Leverage_V1_MsgWithdrawResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  /// MaxWithdraw moves previously supplied tokens from the module back to the user balance in
  /// exchange for burning uTokens. It automatically calculates the maximum valid amount to withdraw.
  /// Zero is returned if no more tokens can be withdrawn.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxWithdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxWithdraw(
    _ request: Umee_Leverage_V1_MsgMaxWithdraw,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgMaxWithdraw, Umee_Leverage_V1_MsgMaxWithdrawResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.maxWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? []
    )
  }

  /// Collateralize enables selected uTokens as collateral, which moves them to the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Collateralize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collateralize(
    _ request: Umee_Leverage_V1_MsgCollateralize,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgCollateralize, Umee_Leverage_V1_MsgCollateralizeResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.collateralize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollateralizeInterceptors() ?? []
    )
  }

  /// Decollateralize disables selected uTokens as collateral. They are returned to the user's
  /// balance from the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Decollateralize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func decollateralize(
    _ request: Umee_Leverage_V1_MsgDecollateralize,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgDecollateralize, Umee_Leverage_V1_MsgDecollateralizeResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.decollateralize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecollateralizeInterceptors() ?? []
    )
  }

  /// Borrow allows a user to borrow tokens from the module if they have sufficient collateral.
  ///
  /// - Parameters:
  ///   - request: Request to send to Borrow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func borrow(
    _ request: Umee_Leverage_V1_MsgBorrow,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgBorrow, Umee_Leverage_V1_MsgBorrowResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.borrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBorrowInterceptors() ?? []
    )
  }

  /// MaxBorrow allows a user to borrow the maximum amount of tokens their collateral will allow.
  /// Zero is returned if no more can be borrowed.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxBorrow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxBorrow(
    _ request: Umee_Leverage_V1_MsgMaxBorrow,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgMaxBorrow, Umee_Leverage_V1_MsgMaxBorrowResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.maxBorrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? []
    )
  }

  /// Repay allows a user to repay previously borrowed tokens and interest.
  ///
  /// - Parameters:
  ///   - request: Request to send to Repay.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func repay(
    _ request: Umee_Leverage_V1_MsgRepay,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgRepay, Umee_Leverage_V1_MsgRepayResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.repay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepayInterceptors() ?? []
    )
  }

  /// Liquidate allows a user to repay a different user's borrowed coins in exchange for some
  /// of the target's collateral.
  ///
  /// - Parameters:
  ///   - request: Request to send to Liquidate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidate(
    _ request: Umee_Leverage_V1_MsgLiquidate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgLiquidate, Umee_Leverage_V1_MsgLiquidateResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.liquidate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidateInterceptors() ?? []
    )
  }

  /// SupplyCollateral combines the Supply and Collateralize actions.
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplyCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplyCollateral(
    _ request: Umee_Leverage_V1_MsgSupplyCollateral,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgSupplyCollateral, Umee_Leverage_V1_MsgSupplyCollateralResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.supplyCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyCollateralInterceptors() ?? []
    )
  }

  /// GovUpdateRegistry adds new tokens to the token registry or
  /// updates existing tokens with new settings.
  ///
  /// - Parameters:
  ///   - request: Request to send to GovUpdateRegistry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func govUpdateRegistry(
    _ request: Umee_Leverage_V1_MsgGovUpdateRegistry,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_MsgGovUpdateRegistry, Umee_Leverage_V1_MsgGovUpdateRegistryResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.govUpdateRegistry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovUpdateRegistryInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Umee_Leverage_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Umee_Leverage_V1_MsgNIOClient")
internal final class Umee_Leverage_V1_MsgClient: Umee_Leverage_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the umee.leverage.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Umee_Leverage_V1_MsgNIOClient: Umee_Leverage_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the umee.leverage.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the x/leverage module's Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Leverage_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeSupplyCall(
    _ request: Umee_Leverage_V1_MsgSupply,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgSupply, Umee_Leverage_V1_MsgSupplyResponse>

  func makeWithdrawCall(
    _ request: Umee_Leverage_V1_MsgWithdraw,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgWithdraw, Umee_Leverage_V1_MsgWithdrawResponse>

  func makeMaxWithdrawCall(
    _ request: Umee_Leverage_V1_MsgMaxWithdraw,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgMaxWithdraw, Umee_Leverage_V1_MsgMaxWithdrawResponse>

  func makeCollateralizeCall(
    _ request: Umee_Leverage_V1_MsgCollateralize,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgCollateralize, Umee_Leverage_V1_MsgCollateralizeResponse>

  func makeDecollateralizeCall(
    _ request: Umee_Leverage_V1_MsgDecollateralize,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgDecollateralize, Umee_Leverage_V1_MsgDecollateralizeResponse>

  func makeBorrowCall(
    _ request: Umee_Leverage_V1_MsgBorrow,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgBorrow, Umee_Leverage_V1_MsgBorrowResponse>

  func makeMaxBorrowCall(
    _ request: Umee_Leverage_V1_MsgMaxBorrow,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgMaxBorrow, Umee_Leverage_V1_MsgMaxBorrowResponse>

  func makeRepayCall(
    _ request: Umee_Leverage_V1_MsgRepay,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgRepay, Umee_Leverage_V1_MsgRepayResponse>

  func makeLiquidateCall(
    _ request: Umee_Leverage_V1_MsgLiquidate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgLiquidate, Umee_Leverage_V1_MsgLiquidateResponse>

  func makeSupplyCollateralCall(
    _ request: Umee_Leverage_V1_MsgSupplyCollateral,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgSupplyCollateral, Umee_Leverage_V1_MsgSupplyCollateralResponse>

  func makeGovUpdateRegistryCall(
    _ request: Umee_Leverage_V1_MsgGovUpdateRegistry,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgGovUpdateRegistry, Umee_Leverage_V1_MsgGovUpdateRegistryResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Leverage_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Leverage_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSupplyCall(
    _ request: Umee_Leverage_V1_MsgSupply,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgSupply, Umee_Leverage_V1_MsgSupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func makeWithdrawCall(
    _ request: Umee_Leverage_V1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgWithdraw, Umee_Leverage_V1_MsgWithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func makeMaxWithdrawCall(
    _ request: Umee_Leverage_V1_MsgMaxWithdraw,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgMaxWithdraw, Umee_Leverage_V1_MsgMaxWithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.maxWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? []
    )
  }

  internal func makeCollateralizeCall(
    _ request: Umee_Leverage_V1_MsgCollateralize,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgCollateralize, Umee_Leverage_V1_MsgCollateralizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.collateralize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollateralizeInterceptors() ?? []
    )
  }

  internal func makeDecollateralizeCall(
    _ request: Umee_Leverage_V1_MsgDecollateralize,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgDecollateralize, Umee_Leverage_V1_MsgDecollateralizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.decollateralize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecollateralizeInterceptors() ?? []
    )
  }

  internal func makeBorrowCall(
    _ request: Umee_Leverage_V1_MsgBorrow,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgBorrow, Umee_Leverage_V1_MsgBorrowResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.borrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBorrowInterceptors() ?? []
    )
  }

  internal func makeMaxBorrowCall(
    _ request: Umee_Leverage_V1_MsgMaxBorrow,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgMaxBorrow, Umee_Leverage_V1_MsgMaxBorrowResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.maxBorrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? []
    )
  }

  internal func makeRepayCall(
    _ request: Umee_Leverage_V1_MsgRepay,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgRepay, Umee_Leverage_V1_MsgRepayResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.repay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepayInterceptors() ?? []
    )
  }

  internal func makeLiquidateCall(
    _ request: Umee_Leverage_V1_MsgLiquidate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgLiquidate, Umee_Leverage_V1_MsgLiquidateResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.liquidate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidateInterceptors() ?? []
    )
  }

  internal func makeSupplyCollateralCall(
    _ request: Umee_Leverage_V1_MsgSupplyCollateral,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgSupplyCollateral, Umee_Leverage_V1_MsgSupplyCollateralResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.supplyCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyCollateralInterceptors() ?? []
    )
  }

  internal func makeGovUpdateRegistryCall(
    _ request: Umee_Leverage_V1_MsgGovUpdateRegistry,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_MsgGovUpdateRegistry, Umee_Leverage_V1_MsgGovUpdateRegistryResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.govUpdateRegistry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovUpdateRegistryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Leverage_V1_MsgAsyncClientProtocol {
  internal func supply(
    _ request: Umee_Leverage_V1_MsgSupply,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgSupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func withdraw(
    _ request: Umee_Leverage_V1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgWithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func maxWithdraw(
    _ request: Umee_Leverage_V1_MsgMaxWithdraw,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgMaxWithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.maxWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? []
    )
  }

  internal func collateralize(
    _ request: Umee_Leverage_V1_MsgCollateralize,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgCollateralizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.collateralize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollateralizeInterceptors() ?? []
    )
  }

  internal func decollateralize(
    _ request: Umee_Leverage_V1_MsgDecollateralize,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgDecollateralizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.decollateralize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecollateralizeInterceptors() ?? []
    )
  }

  internal func borrow(
    _ request: Umee_Leverage_V1_MsgBorrow,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgBorrowResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.borrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBorrowInterceptors() ?? []
    )
  }

  internal func maxBorrow(
    _ request: Umee_Leverage_V1_MsgMaxBorrow,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgMaxBorrowResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.maxBorrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? []
    )
  }

  internal func repay(
    _ request: Umee_Leverage_V1_MsgRepay,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgRepayResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.repay.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepayInterceptors() ?? []
    )
  }

  internal func liquidate(
    _ request: Umee_Leverage_V1_MsgLiquidate,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgLiquidateResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.liquidate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidateInterceptors() ?? []
    )
  }

  internal func supplyCollateral(
    _ request: Umee_Leverage_V1_MsgSupplyCollateral,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgSupplyCollateralResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.supplyCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyCollateralInterceptors() ?? []
    )
  }

  internal func govUpdateRegistry(
    _ request: Umee_Leverage_V1_MsgGovUpdateRegistry,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_MsgGovUpdateRegistryResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_MsgClientMetadata.Methods.govUpdateRegistry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovUpdateRegistryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Umee_Leverage_V1_MsgAsyncClient: Umee_Leverage_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Umee_Leverage_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgSupply, Umee_Leverage_V1_MsgSupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'withdraw'.
  func makeWithdrawInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgWithdraw, Umee_Leverage_V1_MsgWithdrawResponse>]

  /// - Returns: Interceptors to use when invoking 'maxWithdraw'.
  func makeMaxWithdrawInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgMaxWithdraw, Umee_Leverage_V1_MsgMaxWithdrawResponse>]

  /// - Returns: Interceptors to use when invoking 'collateralize'.
  func makeCollateralizeInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgCollateralize, Umee_Leverage_V1_MsgCollateralizeResponse>]

  /// - Returns: Interceptors to use when invoking 'decollateralize'.
  func makeDecollateralizeInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgDecollateralize, Umee_Leverage_V1_MsgDecollateralizeResponse>]

  /// - Returns: Interceptors to use when invoking 'borrow'.
  func makeBorrowInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgBorrow, Umee_Leverage_V1_MsgBorrowResponse>]

  /// - Returns: Interceptors to use when invoking 'maxBorrow'.
  func makeMaxBorrowInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgMaxBorrow, Umee_Leverage_V1_MsgMaxBorrowResponse>]

  /// - Returns: Interceptors to use when invoking 'repay'.
  func makeRepayInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgRepay, Umee_Leverage_V1_MsgRepayResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidate'.
  func makeLiquidateInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgLiquidate, Umee_Leverage_V1_MsgLiquidateResponse>]

  /// - Returns: Interceptors to use when invoking 'supplyCollateral'.
  func makeSupplyCollateralInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgSupplyCollateral, Umee_Leverage_V1_MsgSupplyCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'govUpdateRegistry'.
  func makeGovUpdateRegistryInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_MsgGovUpdateRegistry, Umee_Leverage_V1_MsgGovUpdateRegistryResponse>]
}

internal enum Umee_Leverage_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "umee.leverage.v1.Msg",
    methods: [
      Umee_Leverage_V1_MsgClientMetadata.Methods.supply,
      Umee_Leverage_V1_MsgClientMetadata.Methods.withdraw,
      Umee_Leverage_V1_MsgClientMetadata.Methods.maxWithdraw,
      Umee_Leverage_V1_MsgClientMetadata.Methods.collateralize,
      Umee_Leverage_V1_MsgClientMetadata.Methods.decollateralize,
      Umee_Leverage_V1_MsgClientMetadata.Methods.borrow,
      Umee_Leverage_V1_MsgClientMetadata.Methods.maxBorrow,
      Umee_Leverage_V1_MsgClientMetadata.Methods.repay,
      Umee_Leverage_V1_MsgClientMetadata.Methods.liquidate,
      Umee_Leverage_V1_MsgClientMetadata.Methods.supplyCollateral,
      Umee_Leverage_V1_MsgClientMetadata.Methods.govUpdateRegistry,
    ]
  )

  internal enum Methods {
    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/umee.leverage.v1.Msg/Supply",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/umee.leverage.v1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let maxWithdraw = GRPCMethodDescriptor(
      name: "MaxWithdraw",
      path: "/umee.leverage.v1.Msg/MaxWithdraw",
      type: GRPCCallType.unary
    )

    internal static let collateralize = GRPCMethodDescriptor(
      name: "Collateralize",
      path: "/umee.leverage.v1.Msg/Collateralize",
      type: GRPCCallType.unary
    )

    internal static let decollateralize = GRPCMethodDescriptor(
      name: "Decollateralize",
      path: "/umee.leverage.v1.Msg/Decollateralize",
      type: GRPCCallType.unary
    )

    internal static let borrow = GRPCMethodDescriptor(
      name: "Borrow",
      path: "/umee.leverage.v1.Msg/Borrow",
      type: GRPCCallType.unary
    )

    internal static let maxBorrow = GRPCMethodDescriptor(
      name: "MaxBorrow",
      path: "/umee.leverage.v1.Msg/MaxBorrow",
      type: GRPCCallType.unary
    )

    internal static let repay = GRPCMethodDescriptor(
      name: "Repay",
      path: "/umee.leverage.v1.Msg/Repay",
      type: GRPCCallType.unary
    )

    internal static let liquidate = GRPCMethodDescriptor(
      name: "Liquidate",
      path: "/umee.leverage.v1.Msg/Liquidate",
      type: GRPCCallType.unary
    )

    internal static let supplyCollateral = GRPCMethodDescriptor(
      name: "SupplyCollateral",
      path: "/umee.leverage.v1.Msg/SupplyCollateral",
      type: GRPCCallType.unary
    )

    internal static let govUpdateRegistry = GRPCMethodDescriptor(
      name: "GovUpdateRegistry",
      path: "/umee.leverage.v1.Msg/GovUpdateRegistry",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the x/leverage module's Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umee_Leverage_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Umee_Leverage_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Supply moves tokens from user balance to the module for lending or collateral.
  /// The user receives uTokens in return.
  func supply(request: Umee_Leverage_V1_MsgSupply, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgSupplyResponse>

  /// Withdraw moves previously supplied tokens from the module back to the user balance in
  /// exchange for burning uTokens.
  func withdraw(request: Umee_Leverage_V1_MsgWithdraw, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgWithdrawResponse>

  /// MaxWithdraw moves previously supplied tokens from the module back to the user balance in
  /// exchange for burning uTokens. It automatically calculates the maximum valid amount to withdraw.
  /// Zero is returned if no more tokens can be withdrawn.
  func maxWithdraw(request: Umee_Leverage_V1_MsgMaxWithdraw, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgMaxWithdrawResponse>

  /// Collateralize enables selected uTokens as collateral, which moves them to the module.
  func collateralize(request: Umee_Leverage_V1_MsgCollateralize, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgCollateralizeResponse>

  /// Decollateralize disables selected uTokens as collateral. They are returned to the user's
  /// balance from the module.
  func decollateralize(request: Umee_Leverage_V1_MsgDecollateralize, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgDecollateralizeResponse>

  /// Borrow allows a user to borrow tokens from the module if they have sufficient collateral.
  func borrow(request: Umee_Leverage_V1_MsgBorrow, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgBorrowResponse>

  /// MaxBorrow allows a user to borrow the maximum amount of tokens their collateral will allow.
  /// Zero is returned if no more can be borrowed.
  func maxBorrow(request: Umee_Leverage_V1_MsgMaxBorrow, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgMaxBorrowResponse>

  /// Repay allows a user to repay previously borrowed tokens and interest.
  func repay(request: Umee_Leverage_V1_MsgRepay, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgRepayResponse>

  /// Liquidate allows a user to repay a different user's borrowed coins in exchange for some
  /// of the target's collateral.
  func liquidate(request: Umee_Leverage_V1_MsgLiquidate, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgLiquidateResponse>

  /// SupplyCollateral combines the Supply and Collateralize actions.
  func supplyCollateral(request: Umee_Leverage_V1_MsgSupplyCollateral, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgSupplyCollateralResponse>

  /// GovUpdateRegistry adds new tokens to the token registry or
  /// updates existing tokens with new settings.
  func govUpdateRegistry(request: Umee_Leverage_V1_MsgGovUpdateRegistry, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_MsgGovUpdateRegistryResponse>
}

extension Umee_Leverage_V1_MsgProvider {
  internal var serviceName: Substring {
    return Umee_Leverage_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Supply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgSupply>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgSupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        userFunction: self.supply(request:context:)
      )

    case "Withdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgWithdraw>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgWithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        userFunction: self.withdraw(request:context:)
      )

    case "MaxWithdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgMaxWithdraw>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgMaxWithdrawResponse>(),
        interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? [],
        userFunction: self.maxWithdraw(request:context:)
      )

    case "Collateralize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgCollateralize>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgCollateralizeResponse>(),
        interceptors: self.interceptors?.makeCollateralizeInterceptors() ?? [],
        userFunction: self.collateralize(request:context:)
      )

    case "Decollateralize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgDecollateralize>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgDecollateralizeResponse>(),
        interceptors: self.interceptors?.makeDecollateralizeInterceptors() ?? [],
        userFunction: self.decollateralize(request:context:)
      )

    case "Borrow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgBorrow>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgBorrowResponse>(),
        interceptors: self.interceptors?.makeBorrowInterceptors() ?? [],
        userFunction: self.borrow(request:context:)
      )

    case "MaxBorrow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgMaxBorrow>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgMaxBorrowResponse>(),
        interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? [],
        userFunction: self.maxBorrow(request:context:)
      )

    case "Repay":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgRepay>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgRepayResponse>(),
        interceptors: self.interceptors?.makeRepayInterceptors() ?? [],
        userFunction: self.repay(request:context:)
      )

    case "Liquidate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgLiquidate>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgLiquidateResponse>(),
        interceptors: self.interceptors?.makeLiquidateInterceptors() ?? [],
        userFunction: self.liquidate(request:context:)
      )

    case "SupplyCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgSupplyCollateral>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgSupplyCollateralResponse>(),
        interceptors: self.interceptors?.makeSupplyCollateralInterceptors() ?? [],
        userFunction: self.supplyCollateral(request:context:)
      )

    case "GovUpdateRegistry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgGovUpdateRegistry>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgGovUpdateRegistryResponse>(),
        interceptors: self.interceptors?.makeGovUpdateRegistryInterceptors() ?? [],
        userFunction: self.govUpdateRegistry(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the x/leverage module's Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Leverage_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Leverage_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Supply moves tokens from user balance to the module for lending or collateral.
  /// The user receives uTokens in return.
  @Sendable func supply(
    request: Umee_Leverage_V1_MsgSupply,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgSupplyResponse

  /// Withdraw moves previously supplied tokens from the module back to the user balance in
  /// exchange for burning uTokens.
  @Sendable func withdraw(
    request: Umee_Leverage_V1_MsgWithdraw,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgWithdrawResponse

  /// MaxWithdraw moves previously supplied tokens from the module back to the user balance in
  /// exchange for burning uTokens. It automatically calculates the maximum valid amount to withdraw.
  /// Zero is returned if no more tokens can be withdrawn.
  @Sendable func maxWithdraw(
    request: Umee_Leverage_V1_MsgMaxWithdraw,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgMaxWithdrawResponse

  /// Collateralize enables selected uTokens as collateral, which moves them to the module.
  @Sendable func collateralize(
    request: Umee_Leverage_V1_MsgCollateralize,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgCollateralizeResponse

  /// Decollateralize disables selected uTokens as collateral. They are returned to the user's
  /// balance from the module.
  @Sendable func decollateralize(
    request: Umee_Leverage_V1_MsgDecollateralize,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgDecollateralizeResponse

  /// Borrow allows a user to borrow tokens from the module if they have sufficient collateral.
  @Sendable func borrow(
    request: Umee_Leverage_V1_MsgBorrow,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgBorrowResponse

  /// MaxBorrow allows a user to borrow the maximum amount of tokens their collateral will allow.
  /// Zero is returned if no more can be borrowed.
  @Sendable func maxBorrow(
    request: Umee_Leverage_V1_MsgMaxBorrow,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgMaxBorrowResponse

  /// Repay allows a user to repay previously borrowed tokens and interest.
  @Sendable func repay(
    request: Umee_Leverage_V1_MsgRepay,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgRepayResponse

  /// Liquidate allows a user to repay a different user's borrowed coins in exchange for some
  /// of the target's collateral.
  @Sendable func liquidate(
    request: Umee_Leverage_V1_MsgLiquidate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgLiquidateResponse

  /// SupplyCollateral combines the Supply and Collateralize actions.
  @Sendable func supplyCollateral(
    request: Umee_Leverage_V1_MsgSupplyCollateral,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgSupplyCollateralResponse

  /// GovUpdateRegistry adds new tokens to the token registry or
  /// updates existing tokens with new settings.
  @Sendable func govUpdateRegistry(
    request: Umee_Leverage_V1_MsgGovUpdateRegistry,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_MsgGovUpdateRegistryResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Leverage_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Leverage_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Umee_Leverage_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Umee_Leverage_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Supply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgSupply>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgSupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        wrapping: self.supply(request:context:)
      )

    case "Withdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgWithdraw>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgWithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        wrapping: self.withdraw(request:context:)
      )

    case "MaxWithdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgMaxWithdraw>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgMaxWithdrawResponse>(),
        interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? [],
        wrapping: self.maxWithdraw(request:context:)
      )

    case "Collateralize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgCollateralize>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgCollateralizeResponse>(),
        interceptors: self.interceptors?.makeCollateralizeInterceptors() ?? [],
        wrapping: self.collateralize(request:context:)
      )

    case "Decollateralize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgDecollateralize>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgDecollateralizeResponse>(),
        interceptors: self.interceptors?.makeDecollateralizeInterceptors() ?? [],
        wrapping: self.decollateralize(request:context:)
      )

    case "Borrow":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgBorrow>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgBorrowResponse>(),
        interceptors: self.interceptors?.makeBorrowInterceptors() ?? [],
        wrapping: self.borrow(request:context:)
      )

    case "MaxBorrow":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgMaxBorrow>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgMaxBorrowResponse>(),
        interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? [],
        wrapping: self.maxBorrow(request:context:)
      )

    case "Repay":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgRepay>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgRepayResponse>(),
        interceptors: self.interceptors?.makeRepayInterceptors() ?? [],
        wrapping: self.repay(request:context:)
      )

    case "Liquidate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgLiquidate>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgLiquidateResponse>(),
        interceptors: self.interceptors?.makeLiquidateInterceptors() ?? [],
        wrapping: self.liquidate(request:context:)
      )

    case "SupplyCollateral":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgSupplyCollateral>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgSupplyCollateralResponse>(),
        interceptors: self.interceptors?.makeSupplyCollateralInterceptors() ?? [],
        wrapping: self.supplyCollateral(request:context:)
      )

    case "GovUpdateRegistry":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_MsgGovUpdateRegistry>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_MsgGovUpdateRegistryResponse>(),
        interceptors: self.interceptors?.makeGovUpdateRegistryInterceptors() ?? [],
        wrapping: self.govUpdateRegistry(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umee_Leverage_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'supply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgSupply, Umee_Leverage_V1_MsgSupplyResponse>]

  /// - Returns: Interceptors to use when handling 'withdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgWithdraw, Umee_Leverage_V1_MsgWithdrawResponse>]

  /// - Returns: Interceptors to use when handling 'maxWithdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxWithdrawInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgMaxWithdraw, Umee_Leverage_V1_MsgMaxWithdrawResponse>]

  /// - Returns: Interceptors to use when handling 'collateralize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollateralizeInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgCollateralize, Umee_Leverage_V1_MsgCollateralizeResponse>]

  /// - Returns: Interceptors to use when handling 'decollateralize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDecollateralizeInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgDecollateralize, Umee_Leverage_V1_MsgDecollateralizeResponse>]

  /// - Returns: Interceptors to use when handling 'borrow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBorrowInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgBorrow, Umee_Leverage_V1_MsgBorrowResponse>]

  /// - Returns: Interceptors to use when handling 'maxBorrow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxBorrowInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgMaxBorrow, Umee_Leverage_V1_MsgMaxBorrowResponse>]

  /// - Returns: Interceptors to use when handling 'repay'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRepayInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgRepay, Umee_Leverage_V1_MsgRepayResponse>]

  /// - Returns: Interceptors to use when handling 'liquidate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidateInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgLiquidate, Umee_Leverage_V1_MsgLiquidateResponse>]

  /// - Returns: Interceptors to use when handling 'supplyCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyCollateralInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgSupplyCollateral, Umee_Leverage_V1_MsgSupplyCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'govUpdateRegistry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGovUpdateRegistryInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_MsgGovUpdateRegistry, Umee_Leverage_V1_MsgGovUpdateRegistryResponse>]
}

internal enum Umee_Leverage_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "umee.leverage.v1.Msg",
    methods: [
      Umee_Leverage_V1_MsgServerMetadata.Methods.supply,
      Umee_Leverage_V1_MsgServerMetadata.Methods.withdraw,
      Umee_Leverage_V1_MsgServerMetadata.Methods.maxWithdraw,
      Umee_Leverage_V1_MsgServerMetadata.Methods.collateralize,
      Umee_Leverage_V1_MsgServerMetadata.Methods.decollateralize,
      Umee_Leverage_V1_MsgServerMetadata.Methods.borrow,
      Umee_Leverage_V1_MsgServerMetadata.Methods.maxBorrow,
      Umee_Leverage_V1_MsgServerMetadata.Methods.repay,
      Umee_Leverage_V1_MsgServerMetadata.Methods.liquidate,
      Umee_Leverage_V1_MsgServerMetadata.Methods.supplyCollateral,
      Umee_Leverage_V1_MsgServerMetadata.Methods.govUpdateRegistry,
    ]
  )

  internal enum Methods {
    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/umee.leverage.v1.Msg/Supply",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/umee.leverage.v1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let maxWithdraw = GRPCMethodDescriptor(
      name: "MaxWithdraw",
      path: "/umee.leverage.v1.Msg/MaxWithdraw",
      type: GRPCCallType.unary
    )

    internal static let collateralize = GRPCMethodDescriptor(
      name: "Collateralize",
      path: "/umee.leverage.v1.Msg/Collateralize",
      type: GRPCCallType.unary
    )

    internal static let decollateralize = GRPCMethodDescriptor(
      name: "Decollateralize",
      path: "/umee.leverage.v1.Msg/Decollateralize",
      type: GRPCCallType.unary
    )

    internal static let borrow = GRPCMethodDescriptor(
      name: "Borrow",
      path: "/umee.leverage.v1.Msg/Borrow",
      type: GRPCCallType.unary
    )

    internal static let maxBorrow = GRPCMethodDescriptor(
      name: "MaxBorrow",
      path: "/umee.leverage.v1.Msg/MaxBorrow",
      type: GRPCCallType.unary
    )

    internal static let repay = GRPCMethodDescriptor(
      name: "Repay",
      path: "/umee.leverage.v1.Msg/Repay",
      type: GRPCCallType.unary
    )

    internal static let liquidate = GRPCMethodDescriptor(
      name: "Liquidate",
      path: "/umee.leverage.v1.Msg/Liquidate",
      type: GRPCCallType.unary
    )

    internal static let supplyCollateral = GRPCMethodDescriptor(
      name: "SupplyCollateral",
      path: "/umee.leverage.v1.Msg/SupplyCollateral",
      type: GRPCCallType.unary
    )

    internal static let govUpdateRegistry = GRPCMethodDescriptor(
      name: "GovUpdateRegistry",
      path: "/umee.leverage.v1.Msg/GovUpdateRegistry",
      type: GRPCCallType.unary
    )
  }
}
