//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stafihub/rdex/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Stafihub_Stafihub_Rdex_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Stafihub_Stafihub_Rdex_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? { get }

  func createPool(
    _ request: Stafihub_Stafihub_Rdex_MsgCreatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgCreatePool, Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>

  func addLiquidity(
    _ request: Stafihub_Stafihub_Rdex_MsgAddLiquidity,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgAddLiquidity, Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>

  func swap(
    _ request: Stafihub_Stafihub_Rdex_MsgSwap,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgSwap, Stafihub_Stafihub_Rdex_MsgSwapResponse>

  func removeLiquidity(
    _ request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>

  func toggleProviderSwitch(
    _ request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>

  func addProvider(
    _ request: Stafihub_Stafihub_Rdex_MsgAddProvider,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgAddProvider, Stafihub_Stafihub_Rdex_MsgAddProviderResponse>

  func rmProvider(
    _ request: Stafihub_Stafihub_Rdex_MsgRmProvider,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgRmProvider, Stafihub_Stafihub_Rdex_MsgRmProviderResponse>

  func addPoolCreator(
    _ request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgAddPoolCreator, Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>

  func rmPoolCreator(
    _ request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgRmPoolCreator, Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>
}

extension Stafihub_Stafihub_Rdex_MsgClientProtocol {
  internal var serviceName: String {
    return "stafihub.stafihub.rdex.Msg"
  }

  /// Unary call to CreatePool
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPool(
    _ request: Stafihub_Stafihub_Rdex_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgCreatePool, Stafihub_Stafihub_Rdex_MsgCreatePoolResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  /// Unary call to AddLiquidity
  ///
  /// - Parameters:
  ///   - request: Request to send to AddLiquidity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addLiquidity(
    _ request: Stafihub_Stafihub_Rdex_MsgAddLiquidity,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgAddLiquidity, Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLiquidityInterceptors() ?? []
    )
  }

  /// Unary call to Swap
  ///
  /// - Parameters:
  ///   - request: Request to send to Swap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func swap(
    _ request: Stafihub_Stafihub_Rdex_MsgSwap,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgSwap, Stafihub_Stafihub_Rdex_MsgSwapResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.swap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapInterceptors() ?? []
    )
  }

  /// Unary call to RemoveLiquidity
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveLiquidity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeLiquidity(
    _ request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.removeLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveLiquidityInterceptors() ?? []
    )
  }

  /// Unary call to ToggleProviderSwitch
  ///
  /// - Parameters:
  ///   - request: Request to send to ToggleProviderSwitch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func toggleProviderSwitch(
    _ request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.toggleProviderSwitch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToggleProviderSwitchInterceptors() ?? []
    )
  }

  /// Unary call to AddProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to AddProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addProvider(
    _ request: Stafihub_Stafihub_Rdex_MsgAddProvider,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgAddProvider, Stafihub_Stafihub_Rdex_MsgAddProviderResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddProviderInterceptors() ?? []
    )
  }

  /// Unary call to RmProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to RmProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rmProvider(
    _ request: Stafihub_Stafihub_Rdex_MsgRmProvider,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgRmProvider, Stafihub_Stafihub_Rdex_MsgRmProviderResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRmProviderInterceptors() ?? []
    )
  }

  /// Unary call to AddPoolCreator
  ///
  /// - Parameters:
  ///   - request: Request to send to AddPoolCreator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addPoolCreator(
    _ request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgAddPoolCreator, Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addPoolCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPoolCreatorInterceptors() ?? []
    )
  }

  /// this line is used by starport scaffolding # proto/tx/rpc
  ///
  /// - Parameters:
  ///   - request: Request to send to RmPoolCreator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rmPoolCreator(
    _ request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Rdex_MsgRmPoolCreator, Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmPoolCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRmPoolCreatorInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Stafihub_Stafihub_Rdex_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Stafihub_Stafihub_Rdex_MsgNIOClient")
internal final class Stafihub_Stafihub_Rdex_MsgClient: Stafihub_Stafihub_Rdex_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the stafihub.stafihub.rdex.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Stafihub_Stafihub_Rdex_MsgNIOClient: Stafihub_Stafihub_Rdex_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the stafihub.stafihub.rdex.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stafihub_Stafihub_Rdex_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreatePoolCall(
    _ request: Stafihub_Stafihub_Rdex_MsgCreatePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgCreatePool, Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>

  func makeAddLiquidityCall(
    _ request: Stafihub_Stafihub_Rdex_MsgAddLiquidity,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgAddLiquidity, Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>

  func makeSwapCall(
    _ request: Stafihub_Stafihub_Rdex_MsgSwap,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgSwap, Stafihub_Stafihub_Rdex_MsgSwapResponse>

  func makeRemoveLiquidityCall(
    _ request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>

  func makeToggleProviderSwitchCall(
    _ request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>

  func makeAddProviderCall(
    _ request: Stafihub_Stafihub_Rdex_MsgAddProvider,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgAddProvider, Stafihub_Stafihub_Rdex_MsgAddProviderResponse>

  func makeRmProviderCall(
    _ request: Stafihub_Stafihub_Rdex_MsgRmProvider,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgRmProvider, Stafihub_Stafihub_Rdex_MsgRmProviderResponse>

  func makeAddPoolCreatorCall(
    _ request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgAddPoolCreator, Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>

  func makeRmPoolCreatorCall(
    _ request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgRmPoolCreator, Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stafihub_Stafihub_Rdex_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stafihub_Stafihub_Rdex_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreatePoolCall(
    _ request: Stafihub_Stafihub_Rdex_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgCreatePool, Stafihub_Stafihub_Rdex_MsgCreatePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func makeAddLiquidityCall(
    _ request: Stafihub_Stafihub_Rdex_MsgAddLiquidity,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgAddLiquidity, Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLiquidityInterceptors() ?? []
    )
  }

  internal func makeSwapCall(
    _ request: Stafihub_Stafihub_Rdex_MsgSwap,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgSwap, Stafihub_Stafihub_Rdex_MsgSwapResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.swap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapInterceptors() ?? []
    )
  }

  internal func makeRemoveLiquidityCall(
    _ request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.removeLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveLiquidityInterceptors() ?? []
    )
  }

  internal func makeToggleProviderSwitchCall(
    _ request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.toggleProviderSwitch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToggleProviderSwitchInterceptors() ?? []
    )
  }

  internal func makeAddProviderCall(
    _ request: Stafihub_Stafihub_Rdex_MsgAddProvider,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgAddProvider, Stafihub_Stafihub_Rdex_MsgAddProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddProviderInterceptors() ?? []
    )
  }

  internal func makeRmProviderCall(
    _ request: Stafihub_Stafihub_Rdex_MsgRmProvider,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgRmProvider, Stafihub_Stafihub_Rdex_MsgRmProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRmProviderInterceptors() ?? []
    )
  }

  internal func makeAddPoolCreatorCall(
    _ request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgAddPoolCreator, Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addPoolCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPoolCreatorInterceptors() ?? []
    )
  }

  internal func makeRmPoolCreatorCall(
    _ request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Rdex_MsgRmPoolCreator, Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmPoolCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRmPoolCreatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stafihub_Stafihub_Rdex_MsgAsyncClientProtocol {
  internal func createPool(
    _ request: Stafihub_Stafihub_Rdex_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgCreatePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func addLiquidity(
    _ request: Stafihub_Stafihub_Rdex_MsgAddLiquidity,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLiquidityInterceptors() ?? []
    )
  }

  internal func swap(
    _ request: Stafihub_Stafihub_Rdex_MsgSwap,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgSwapResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.swap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapInterceptors() ?? []
    )
  }

  internal func removeLiquidity(
    _ request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.removeLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveLiquidityInterceptors() ?? []
    )
  }

  internal func toggleProviderSwitch(
    _ request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.toggleProviderSwitch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToggleProviderSwitchInterceptors() ?? []
    )
  }

  internal func addProvider(
    _ request: Stafihub_Stafihub_Rdex_MsgAddProvider,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgAddProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddProviderInterceptors() ?? []
    )
  }

  internal func rmProvider(
    _ request: Stafihub_Stafihub_Rdex_MsgRmProvider,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgRmProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRmProviderInterceptors() ?? []
    )
  }

  internal func addPoolCreator(
    _ request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addPoolCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPoolCreatorInterceptors() ?? []
    )
  }

  internal func rmPoolCreator(
    _ request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmPoolCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRmPoolCreatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Stafihub_Stafihub_Rdex_MsgAsyncClient: Stafihub_Stafihub_Rdex_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Stafihub_Stafihub_Rdex_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createPool'.
  func makeCreatePoolInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgCreatePool, Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'addLiquidity'.
  func makeAddLiquidityInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgAddLiquidity, Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>]

  /// - Returns: Interceptors to use when invoking 'swap'.
  func makeSwapInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgSwap, Stafihub_Stafihub_Rdex_MsgSwapResponse>]

  /// - Returns: Interceptors to use when invoking 'removeLiquidity'.
  func makeRemoveLiquidityInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>]

  /// - Returns: Interceptors to use when invoking 'toggleProviderSwitch'.
  func makeToggleProviderSwitchInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>]

  /// - Returns: Interceptors to use when invoking 'addProvider'.
  func makeAddProviderInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgAddProvider, Stafihub_Stafihub_Rdex_MsgAddProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'rmProvider'.
  func makeRmProviderInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgRmProvider, Stafihub_Stafihub_Rdex_MsgRmProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'addPoolCreator'.
  func makeAddPoolCreatorInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgAddPoolCreator, Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>]

  /// - Returns: Interceptors to use when invoking 'rmPoolCreator'.
  func makeRmPoolCreatorInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Rdex_MsgRmPoolCreator, Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>]
}

internal enum Stafihub_Stafihub_Rdex_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "stafihub.stafihub.rdex.Msg",
    methods: [
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.createPool,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addLiquidity,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.swap,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.removeLiquidity,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.toggleProviderSwitch,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addProvider,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmProvider,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.addPoolCreator,
      Stafihub_Stafihub_Rdex_MsgClientMetadata.Methods.rmPoolCreator,
    ]
  )

  internal enum Methods {
    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/stafihub.stafihub.rdex.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let addLiquidity = GRPCMethodDescriptor(
      name: "AddLiquidity",
      path: "/stafihub.stafihub.rdex.Msg/AddLiquidity",
      type: GRPCCallType.unary
    )

    internal static let swap = GRPCMethodDescriptor(
      name: "Swap",
      path: "/stafihub.stafihub.rdex.Msg/Swap",
      type: GRPCCallType.unary
    )

    internal static let removeLiquidity = GRPCMethodDescriptor(
      name: "RemoveLiquidity",
      path: "/stafihub.stafihub.rdex.Msg/RemoveLiquidity",
      type: GRPCCallType.unary
    )

    internal static let toggleProviderSwitch = GRPCMethodDescriptor(
      name: "ToggleProviderSwitch",
      path: "/stafihub.stafihub.rdex.Msg/ToggleProviderSwitch",
      type: GRPCCallType.unary
    )

    internal static let addProvider = GRPCMethodDescriptor(
      name: "AddProvider",
      path: "/stafihub.stafihub.rdex.Msg/AddProvider",
      type: GRPCCallType.unary
    )

    internal static let rmProvider = GRPCMethodDescriptor(
      name: "RmProvider",
      path: "/stafihub.stafihub.rdex.Msg/RmProvider",
      type: GRPCCallType.unary
    )

    internal static let addPoolCreator = GRPCMethodDescriptor(
      name: "AddPoolCreator",
      path: "/stafihub.stafihub.rdex.Msg/AddPoolCreator",
      type: GRPCCallType.unary
    )

    internal static let rmPoolCreator = GRPCMethodDescriptor(
      name: "RmPoolCreator",
      path: "/stafihub.stafihub.rdex.Msg/RmPoolCreator",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stafihub_Stafihub_Rdex_MsgProvider: CallHandlerProvider {
  var interceptors: Stafihub_Stafihub_Rdex_MsgServerInterceptorFactoryProtocol? { get }

  func createPool(request: Stafihub_Stafihub_Rdex_MsgCreatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>

  func addLiquidity(request: Stafihub_Stafihub_Rdex_MsgAddLiquidity, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>

  func swap(request: Stafihub_Stafihub_Rdex_MsgSwap, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgSwapResponse>

  func removeLiquidity(request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>

  func toggleProviderSwitch(request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>

  func addProvider(request: Stafihub_Stafihub_Rdex_MsgAddProvider, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgAddProviderResponse>

  func rmProvider(request: Stafihub_Stafihub_Rdex_MsgRmProvider, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgRmProviderResponse>

  func addPoolCreator(request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>

  /// this line is used by starport scaffolding # proto/tx/rpc
  func rmPoolCreator(request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>
}

extension Stafihub_Stafihub_Rdex_MsgProvider {
  internal var serviceName: Substring {
    return Stafihub_Stafihub_Rdex_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        userFunction: self.createPool(request:context:)
      )

    case "AddLiquidity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgAddLiquidity>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>(),
        interceptors: self.interceptors?.makeAddLiquidityInterceptors() ?? [],
        userFunction: self.addLiquidity(request:context:)
      )

    case "Swap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgSwap>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgSwapResponse>(),
        interceptors: self.interceptors?.makeSwapInterceptors() ?? [],
        userFunction: self.swap(request:context:)
      )

    case "RemoveLiquidity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>(),
        interceptors: self.interceptors?.makeRemoveLiquidityInterceptors() ?? [],
        userFunction: self.removeLiquidity(request:context:)
      )

    case "ToggleProviderSwitch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>(),
        interceptors: self.interceptors?.makeToggleProviderSwitchInterceptors() ?? [],
        userFunction: self.toggleProviderSwitch(request:context:)
      )

    case "AddProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgAddProvider>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgAddProviderResponse>(),
        interceptors: self.interceptors?.makeAddProviderInterceptors() ?? [],
        userFunction: self.addProvider(request:context:)
      )

    case "RmProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgRmProvider>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgRmProviderResponse>(),
        interceptors: self.interceptors?.makeRmProviderInterceptors() ?? [],
        userFunction: self.rmProvider(request:context:)
      )

    case "AddPoolCreator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgAddPoolCreator>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>(),
        interceptors: self.interceptors?.makeAddPoolCreatorInterceptors() ?? [],
        userFunction: self.addPoolCreator(request:context:)
      )

    case "RmPoolCreator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgRmPoolCreator>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>(),
        interceptors: self.interceptors?.makeRmPoolCreatorInterceptors() ?? [],
        userFunction: self.rmPoolCreator(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stafihub_Stafihub_Rdex_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stafihub_Stafihub_Rdex_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createPool(
    request: Stafihub_Stafihub_Rdex_MsgCreatePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgCreatePoolResponse

  @Sendable func addLiquidity(
    request: Stafihub_Stafihub_Rdex_MsgAddLiquidity,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse

  @Sendable func swap(
    request: Stafihub_Stafihub_Rdex_MsgSwap,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgSwapResponse

  @Sendable func removeLiquidity(
    request: Stafihub_Stafihub_Rdex_MsgRemoveLiquidity,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse

  @Sendable func toggleProviderSwitch(
    request: Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse

  @Sendable func addProvider(
    request: Stafihub_Stafihub_Rdex_MsgAddProvider,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgAddProviderResponse

  @Sendable func rmProvider(
    request: Stafihub_Stafihub_Rdex_MsgRmProvider,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgRmProviderResponse

  @Sendable func addPoolCreator(
    request: Stafihub_Stafihub_Rdex_MsgAddPoolCreator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse

  /// this line is used by starport scaffolding # proto/tx/rpc
  @Sendable func rmPoolCreator(
    request: Stafihub_Stafihub_Rdex_MsgRmPoolCreator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stafihub_Stafihub_Rdex_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stafihub_Stafihub_Rdex_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Stafihub_Stafihub_Rdex_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Stafihub_Stafihub_Rdex_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        wrapping: self.createPool(request:context:)
      )

    case "AddLiquidity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgAddLiquidity>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>(),
        interceptors: self.interceptors?.makeAddLiquidityInterceptors() ?? [],
        wrapping: self.addLiquidity(request:context:)
      )

    case "Swap":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgSwap>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgSwapResponse>(),
        interceptors: self.interceptors?.makeSwapInterceptors() ?? [],
        wrapping: self.swap(request:context:)
      )

    case "RemoveLiquidity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>(),
        interceptors: self.interceptors?.makeRemoveLiquidityInterceptors() ?? [],
        wrapping: self.removeLiquidity(request:context:)
      )

    case "ToggleProviderSwitch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>(),
        interceptors: self.interceptors?.makeToggleProviderSwitchInterceptors() ?? [],
        wrapping: self.toggleProviderSwitch(request:context:)
      )

    case "AddProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgAddProvider>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgAddProviderResponse>(),
        interceptors: self.interceptors?.makeAddProviderInterceptors() ?? [],
        wrapping: self.addProvider(request:context:)
      )

    case "RmProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgRmProvider>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgRmProviderResponse>(),
        interceptors: self.interceptors?.makeRmProviderInterceptors() ?? [],
        wrapping: self.rmProvider(request:context:)
      )

    case "AddPoolCreator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgAddPoolCreator>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>(),
        interceptors: self.interceptors?.makeAddPoolCreatorInterceptors() ?? [],
        wrapping: self.addPoolCreator(request:context:)
      )

    case "RmPoolCreator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Rdex_MsgRmPoolCreator>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>(),
        interceptors: self.interceptors?.makeRmPoolCreatorInterceptors() ?? [],
        wrapping: self.rmPoolCreator(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stafihub_Stafihub_Rdex_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePoolInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgCreatePool, Stafihub_Stafihub_Rdex_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'addLiquidity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddLiquidityInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgAddLiquidity, Stafihub_Stafihub_Rdex_MsgAddLiquidityResponse>]

  /// - Returns: Interceptors to use when handling 'swap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSwapInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgSwap, Stafihub_Stafihub_Rdex_MsgSwapResponse>]

  /// - Returns: Interceptors to use when handling 'removeLiquidity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveLiquidityInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgRemoveLiquidity, Stafihub_Stafihub_Rdex_MsgRemoveLiquidityResponse>]

  /// - Returns: Interceptors to use when handling 'toggleProviderSwitch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeToggleProviderSwitchInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgToggleProviderSwitch, Stafihub_Stafihub_Rdex_MsgToggleProviderSwitchResponse>]

  /// - Returns: Interceptors to use when handling 'addProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddProviderInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgAddProvider, Stafihub_Stafihub_Rdex_MsgAddProviderResponse>]

  /// - Returns: Interceptors to use when handling 'rmProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRmProviderInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgRmProvider, Stafihub_Stafihub_Rdex_MsgRmProviderResponse>]

  /// - Returns: Interceptors to use when handling 'addPoolCreator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddPoolCreatorInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgAddPoolCreator, Stafihub_Stafihub_Rdex_MsgAddPoolCreatorResponse>]

  /// - Returns: Interceptors to use when handling 'rmPoolCreator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRmPoolCreatorInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Rdex_MsgRmPoolCreator, Stafihub_Stafihub_Rdex_MsgRmPoolCreatorResponse>]
}

internal enum Stafihub_Stafihub_Rdex_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "stafihub.stafihub.rdex.Msg",
    methods: [
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.createPool,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.addLiquidity,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.swap,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.removeLiquidity,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.toggleProviderSwitch,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.addProvider,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.rmProvider,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.addPoolCreator,
      Stafihub_Stafihub_Rdex_MsgServerMetadata.Methods.rmPoolCreator,
    ]
  )

  internal enum Methods {
    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/stafihub.stafihub.rdex.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let addLiquidity = GRPCMethodDescriptor(
      name: "AddLiquidity",
      path: "/stafihub.stafihub.rdex.Msg/AddLiquidity",
      type: GRPCCallType.unary
    )

    internal static let swap = GRPCMethodDescriptor(
      name: "Swap",
      path: "/stafihub.stafihub.rdex.Msg/Swap",
      type: GRPCCallType.unary
    )

    internal static let removeLiquidity = GRPCMethodDescriptor(
      name: "RemoveLiquidity",
      path: "/stafihub.stafihub.rdex.Msg/RemoveLiquidity",
      type: GRPCCallType.unary
    )

    internal static let toggleProviderSwitch = GRPCMethodDescriptor(
      name: "ToggleProviderSwitch",
      path: "/stafihub.stafihub.rdex.Msg/ToggleProviderSwitch",
      type: GRPCCallType.unary
    )

    internal static let addProvider = GRPCMethodDescriptor(
      name: "AddProvider",
      path: "/stafihub.stafihub.rdex.Msg/AddProvider",
      type: GRPCCallType.unary
    )

    internal static let rmProvider = GRPCMethodDescriptor(
      name: "RmProvider",
      path: "/stafihub.stafihub.rdex.Msg/RmProvider",
      type: GRPCCallType.unary
    )

    internal static let addPoolCreator = GRPCMethodDescriptor(
      name: "AddPoolCreator",
      path: "/stafihub.stafihub.rdex.Msg/AddPoolCreator",
      type: GRPCCallType.unary
    )

    internal static let rmPoolCreator = GRPCMethodDescriptor(
      name: "RmPoolCreator",
      path: "/stafihub.stafihub.rdex.Msg/RmPoolCreator",
      type: GRPCCallType.unary
    )
  }
}
