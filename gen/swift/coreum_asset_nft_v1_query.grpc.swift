//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: coreum/asset/nft/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Coreum_Asset_Nft_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Coreum_Asset_Nft_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Coreum_Asset_Nft_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryParamsRequest, Coreum_Asset_Nft_V1_QueryParamsResponse>

  func `class`(
    _ request: Coreum_Asset_Nft_V1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryClassRequest, Coreum_Asset_Nft_V1_QueryClassResponse>

  func classes(
    _ request: Coreum_Asset_Nft_V1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryClassesRequest, Coreum_Asset_Nft_V1_QueryClassesResponse>

  func frozen(
    _ request: Coreum_Asset_Nft_V1_QueryFrozenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryFrozenRequest, Coreum_Asset_Nft_V1_QueryFrozenResponse>

  func whitelisted(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedRequest, Coreum_Asset_Nft_V1_QueryWhitelistedResponse>

  func whitelistedAccountsForNFT(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>
}

extension Coreum_Asset_Nft_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "coreum.asset.nft.v1.Query"
  }

  /// Params queries the parameters of x/asset/ft module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Coreum_Asset_Nft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryParamsRequest, Coreum_Asset_Nft_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Class queries the non-fungible token class of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Class.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func `class`(
    _ request: Coreum_Asset_Nft_V1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryClassRequest, Coreum_Asset_Nft_V1_QueryClassResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  /// Classes queries the non-fungible token classes of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Classes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classes(
    _ request: Coreum_Asset_Nft_V1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryClassesRequest, Coreum_Asset_Nft_V1_QueryClassesResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }

  /// Frozen queries to check if an NFT is frozen or not.
  ///
  /// - Parameters:
  ///   - request: Request to send to Frozen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func frozen(
    _ request: Coreum_Asset_Nft_V1_QueryFrozenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryFrozenRequest, Coreum_Asset_Nft_V1_QueryFrozenResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.frozen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenInterceptors() ?? []
    )
  }

  /// Whitelisted queries to check if an account is whitelited to hold an NFT or not.
  ///
  /// - Parameters:
  ///   - request: Request to send to Whitelisted.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func whitelisted(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedRequest, Coreum_Asset_Nft_V1_QueryWhitelistedResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelisted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedInterceptors() ?? []
    )
  }

  /// WhitelistedAccountsForNFT returns the list of accounts which are whitelisted to hold this NFT.
  ///
  /// - Parameters:
  ///   - request: Request to send to WhitelistedAccountsForNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func whitelistedAccountsForNFT(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelistedAccountsForNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedAccountsForNFTInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Coreum_Asset_Nft_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Coreum_Asset_Nft_V1_QueryNIOClient")
internal final class Coreum_Asset_Nft_V1_QueryClient: Coreum_Asset_Nft_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the coreum.asset.nft.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Coreum_Asset_Nft_V1_QueryNIOClient: Coreum_Asset_Nft_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the coreum.asset.nft.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Asset_Nft_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Coreum_Asset_Nft_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryParamsRequest, Coreum_Asset_Nft_V1_QueryParamsResponse>

  func makeClassCall(
    _ request: Coreum_Asset_Nft_V1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryClassRequest, Coreum_Asset_Nft_V1_QueryClassResponse>

  func makeClassesCall(
    _ request: Coreum_Asset_Nft_V1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryClassesRequest, Coreum_Asset_Nft_V1_QueryClassesResponse>

  func makeFrozenCall(
    _ request: Coreum_Asset_Nft_V1_QueryFrozenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryFrozenRequest, Coreum_Asset_Nft_V1_QueryFrozenResponse>

  func makeWhitelistedCall(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedRequest, Coreum_Asset_Nft_V1_QueryWhitelistedResponse>

  func makeWhitelistedAccountsForNftCall(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Nft_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Asset_Nft_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Coreum_Asset_Nft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryParamsRequest, Coreum_Asset_Nft_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeClassCall(
    _ request: Coreum_Asset_Nft_V1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryClassRequest, Coreum_Asset_Nft_V1_QueryClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  internal func makeClassesCall(
    _ request: Coreum_Asset_Nft_V1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryClassesRequest, Coreum_Asset_Nft_V1_QueryClassesResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }

  internal func makeFrozenCall(
    _ request: Coreum_Asset_Nft_V1_QueryFrozenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryFrozenRequest, Coreum_Asset_Nft_V1_QueryFrozenResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.frozen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenInterceptors() ?? []
    )
  }

  internal func makeWhitelistedCall(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedRequest, Coreum_Asset_Nft_V1_QueryWhitelistedResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelisted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedInterceptors() ?? []
    )
  }

  internal func makeWhitelistedAccountsForNftCall(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelistedAccountsForNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedAccountsForNFTInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Nft_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Coreum_Asset_Nft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Nft_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func `class`(
    _ request: Coreum_Asset_Nft_V1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Nft_V1_QueryClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  internal func classes(
    _ request: Coreum_Asset_Nft_V1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Nft_V1_QueryClassesResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }

  internal func frozen(
    _ request: Coreum_Asset_Nft_V1_QueryFrozenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Nft_V1_QueryFrozenResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.frozen.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenInterceptors() ?? []
    )
  }

  internal func whitelisted(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Nft_V1_QueryWhitelistedResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelisted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedInterceptors() ?? []
    )
  }

  internal func whitelistedAccountsForNFT(
    _ request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelistedAccountsForNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedAccountsForNFTInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Coreum_Asset_Nft_V1_QueryAsyncClient: Coreum_Asset_Nft_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Coreum_Asset_Nft_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Coreum_Asset_Nft_V1_QueryParamsRequest, Coreum_Asset_Nft_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking '`class`'.
  func makeClassInterceptors() -> [ClientInterceptor<Coreum_Asset_Nft_V1_QueryClassRequest, Coreum_Asset_Nft_V1_QueryClassResponse>]

  /// - Returns: Interceptors to use when invoking 'classes'.
  func makeClassesInterceptors() -> [ClientInterceptor<Coreum_Asset_Nft_V1_QueryClassesRequest, Coreum_Asset_Nft_V1_QueryClassesResponse>]

  /// - Returns: Interceptors to use when invoking 'frozen'.
  func makeFrozenInterceptors() -> [ClientInterceptor<Coreum_Asset_Nft_V1_QueryFrozenRequest, Coreum_Asset_Nft_V1_QueryFrozenResponse>]

  /// - Returns: Interceptors to use when invoking 'whitelisted'.
  func makeWhitelistedInterceptors() -> [ClientInterceptor<Coreum_Asset_Nft_V1_QueryWhitelistedRequest, Coreum_Asset_Nft_V1_QueryWhitelistedResponse>]

  /// - Returns: Interceptors to use when invoking 'whitelistedAccountsForNFT'.
  func makeWhitelistedAccountsForNFTInterceptors() -> [ClientInterceptor<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>]
}

internal enum Coreum_Asset_Nft_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "coreum.asset.nft.v1.Query",
    methods: [
      Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.params,
      Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.`class`,
      Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.classes,
      Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.frozen,
      Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelisted,
      Coreum_Asset_Nft_V1_QueryClientMetadata.Methods.whitelistedAccountsForNFT,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/coreum.asset.nft.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let `class` = GRPCMethodDescriptor(
      name: "Class",
      path: "/coreum.asset.nft.v1.Query/Class",
      type: GRPCCallType.unary
    )

    internal static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/coreum.asset.nft.v1.Query/Classes",
      type: GRPCCallType.unary
    )

    internal static let frozen = GRPCMethodDescriptor(
      name: "Frozen",
      path: "/coreum.asset.nft.v1.Query/Frozen",
      type: GRPCCallType.unary
    )

    internal static let whitelisted = GRPCMethodDescriptor(
      name: "Whitelisted",
      path: "/coreum.asset.nft.v1.Query/Whitelisted",
      type: GRPCCallType.unary
    )

    internal static let whitelistedAccountsForNFT = GRPCMethodDescriptor(
      name: "WhitelistedAccountsForNFT",
      path: "/coreum.asset.nft.v1.Query/WhitelistedAccountsForNFT",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Coreum_Asset_Nft_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Coreum_Asset_Nft_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of x/asset/ft module.
  func params(request: Coreum_Asset_Nft_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Nft_V1_QueryParamsResponse>

  /// Class queries the non-fungible token class of the module.
  func `class`(request: Coreum_Asset_Nft_V1_QueryClassRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Nft_V1_QueryClassResponse>

  /// Classes queries the non-fungible token classes of the module.
  func classes(request: Coreum_Asset_Nft_V1_QueryClassesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Nft_V1_QueryClassesResponse>

  /// Frozen queries to check if an NFT is frozen or not.
  func frozen(request: Coreum_Asset_Nft_V1_QueryFrozenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Nft_V1_QueryFrozenResponse>

  /// Whitelisted queries to check if an account is whitelited to hold an NFT or not.
  func whitelisted(request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Nft_V1_QueryWhitelistedResponse>

  /// WhitelistedAccountsForNFT returns the list of accounts which are whitelisted to hold this NFT.
  func whitelistedAccountsForNFT(request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>
}

extension Coreum_Asset_Nft_V1_QueryProvider {
  internal var serviceName: Substring {
    return Coreum_Asset_Nft_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Class":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryClassRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryClassResponse>(),
        interceptors: self.interceptors?.makeClassInterceptors() ?? [],
        userFunction: self.`class`(request:context:)
      )

    case "Classes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryClassesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryClassesResponse>(),
        interceptors: self.interceptors?.makeClassesInterceptors() ?? [],
        userFunction: self.classes(request:context:)
      )

    case "Frozen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryFrozenRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryFrozenResponse>(),
        interceptors: self.interceptors?.makeFrozenInterceptors() ?? [],
        userFunction: self.frozen(request:context:)
      )

    case "Whitelisted":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryWhitelistedRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryWhitelistedResponse>(),
        interceptors: self.interceptors?.makeWhitelistedInterceptors() ?? [],
        userFunction: self.whitelisted(request:context:)
      )

    case "WhitelistedAccountsForNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>(),
        interceptors: self.interceptors?.makeWhitelistedAccountsForNFTInterceptors() ?? [],
        userFunction: self.whitelistedAccountsForNFT(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Asset_Nft_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Asset_Nft_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of x/asset/ft module.
  @Sendable func params(
    request: Coreum_Asset_Nft_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Nft_V1_QueryParamsResponse

  /// Class queries the non-fungible token class of the module.
  @Sendable func `class`(
    request: Coreum_Asset_Nft_V1_QueryClassRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Nft_V1_QueryClassResponse

  /// Classes queries the non-fungible token classes of the module.
  @Sendable func classes(
    request: Coreum_Asset_Nft_V1_QueryClassesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Nft_V1_QueryClassesResponse

  /// Frozen queries to check if an NFT is frozen or not.
  @Sendable func frozen(
    request: Coreum_Asset_Nft_V1_QueryFrozenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Nft_V1_QueryFrozenResponse

  /// Whitelisted queries to check if an account is whitelited to hold an NFT or not.
  @Sendable func whitelisted(
    request: Coreum_Asset_Nft_V1_QueryWhitelistedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Nft_V1_QueryWhitelistedResponse

  /// WhitelistedAccountsForNFT returns the list of accounts which are whitelisted to hold this NFT.
  @Sendable func whitelistedAccountsForNFT(
    request: Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Nft_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Asset_Nft_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Coreum_Asset_Nft_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Coreum_Asset_Nft_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Class":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryClassRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryClassResponse>(),
        interceptors: self.interceptors?.makeClassInterceptors() ?? [],
        wrapping: self.`class`(request:context:)
      )

    case "Classes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryClassesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryClassesResponse>(),
        interceptors: self.interceptors?.makeClassesInterceptors() ?? [],
        wrapping: self.classes(request:context:)
      )

    case "Frozen":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryFrozenRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryFrozenResponse>(),
        interceptors: self.interceptors?.makeFrozenInterceptors() ?? [],
        wrapping: self.frozen(request:context:)
      )

    case "Whitelisted":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryWhitelistedRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryWhitelistedResponse>(),
        interceptors: self.interceptors?.makeWhitelistedInterceptors() ?? [],
        wrapping: self.whitelisted(request:context:)
      )

    case "WhitelistedAccountsForNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>(),
        interceptors: self.interceptors?.makeWhitelistedAccountsForNFTInterceptors() ?? [],
        wrapping: self.whitelistedAccountsForNFT(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Coreum_Asset_Nft_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Coreum_Asset_Nft_V1_QueryParamsRequest, Coreum_Asset_Nft_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling '`class`'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassInterceptors() -> [ServerInterceptor<Coreum_Asset_Nft_V1_QueryClassRequest, Coreum_Asset_Nft_V1_QueryClassResponse>]

  /// - Returns: Interceptors to use when handling 'classes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesInterceptors() -> [ServerInterceptor<Coreum_Asset_Nft_V1_QueryClassesRequest, Coreum_Asset_Nft_V1_QueryClassesResponse>]

  /// - Returns: Interceptors to use when handling 'frozen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFrozenInterceptors() -> [ServerInterceptor<Coreum_Asset_Nft_V1_QueryFrozenRequest, Coreum_Asset_Nft_V1_QueryFrozenResponse>]

  /// - Returns: Interceptors to use when handling 'whitelisted'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWhitelistedInterceptors() -> [ServerInterceptor<Coreum_Asset_Nft_V1_QueryWhitelistedRequest, Coreum_Asset_Nft_V1_QueryWhitelistedResponse>]

  /// - Returns: Interceptors to use when handling 'whitelistedAccountsForNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWhitelistedAccountsForNFTInterceptors() -> [ServerInterceptor<Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTRequest, Coreum_Asset_Nft_V1_QueryWhitelistedAccountsForNFTResponse>]
}

internal enum Coreum_Asset_Nft_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "coreum.asset.nft.v1.Query",
    methods: [
      Coreum_Asset_Nft_V1_QueryServerMetadata.Methods.params,
      Coreum_Asset_Nft_V1_QueryServerMetadata.Methods.`class`,
      Coreum_Asset_Nft_V1_QueryServerMetadata.Methods.classes,
      Coreum_Asset_Nft_V1_QueryServerMetadata.Methods.frozen,
      Coreum_Asset_Nft_V1_QueryServerMetadata.Methods.whitelisted,
      Coreum_Asset_Nft_V1_QueryServerMetadata.Methods.whitelistedAccountsForNFT,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/coreum.asset.nft.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let `class` = GRPCMethodDescriptor(
      name: "Class",
      path: "/coreum.asset.nft.v1.Query/Class",
      type: GRPCCallType.unary
    )

    internal static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/coreum.asset.nft.v1.Query/Classes",
      type: GRPCCallType.unary
    )

    internal static let frozen = GRPCMethodDescriptor(
      name: "Frozen",
      path: "/coreum.asset.nft.v1.Query/Frozen",
      type: GRPCCallType.unary
    )

    internal static let whitelisted = GRPCMethodDescriptor(
      name: "Whitelisted",
      path: "/coreum.asset.nft.v1.Query/Whitelisted",
      type: GRPCCallType.unary
    )

    internal static let whitelistedAccountsForNFT = GRPCMethodDescriptor(
      name: "WhitelistedAccountsForNFT",
      path: "/coreum.asset.nft.v1.Query/WhitelistedAccountsForNFT",
      type: GRPCCallType.unary
    )
  }
}
