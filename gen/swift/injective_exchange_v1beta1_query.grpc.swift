//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/exchange/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Injective_Exchange_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Exchange_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func queryExchangeParams(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>

  func subaccountDeposits(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>

  func subaccountDeposit(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>

  func exchangeBalances(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>

  func aggregateVolume(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>

  func aggregateVolumes(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>

  func aggregateMarketVolume(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>

  func aggregateMarketVolumes(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>

  func denomDecimal(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalRequest, Injective_Exchange_V1beta1_QueryDenomDecimalResponse>

  func denomDecimals(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>

  func spotMarkets(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>

  func spotMarket(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>

  func fullSpotMarkets(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>

  func fullSpotMarket(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>

  func spotOrderbook(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>

  func traderSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  func accountAddressSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>

  func spotOrdersByHashes(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>

  func subaccountOrders(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>

  func traderSpotTransientOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  func spotMidPriceAndTOB(
    _ request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>

  func derivativeMidPriceAndTOB(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>

  func derivativeOrderbook(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>

  func traderDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  func accountAddressDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>

  func derivativeOrdersByHashes(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>

  func traderDerivativeTransientOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  func derivativeMarkets(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>

  func derivativeMarket(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>

  func derivativeMarketAddress(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>

  func subaccountTradeNonce(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>

  func exchangeModuleState(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>

  func positions(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>

  func subaccountPositions(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>

  func subaccountPositionInMarket(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>

  func subaccountEffectivePositionInMarket(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>

  func perpetualMarketInfo(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>

  func expiryFuturesMarketInfo(
    _ request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>

  func perpetualMarketFunding(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>

  func subaccountOrderMetadata(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>

  func tradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  func pendingTradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  func tradeRewardCampaign(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>

  func feeDiscountAccountInfo(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>

  func feeDiscountSchedule(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>

  func balanceMismatches(
    _ request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>

  func balanceWithBalanceHolds(
    _ request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>

  func feeDiscountTierStatistics(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>

  func mitoVaultInfos(
    _ request: Injective_Exchange_V1beta1_MitoVaultInfosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_MitoVaultInfosRequest, Injective_Exchange_V1beta1_MitoVaultInfosResponse>

  func queryMarketIDFromVault(
    _ request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>

  func historicalTradeRecords(
    _ request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>

  func isOptedOutOfRewards(
    _ request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>

  func optedOutOfRewardsAccounts(
    _ request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>

  func marketVolatility(
    _ request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>

  func binaryOptionsMarkets(
    _ request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>

  func traderDerivativeConditionalOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>

  func marketAtomicExecutionFeeMultiplier(
    _ request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>
}

extension Injective_Exchange_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "injective.exchange.v1beta1.Query"
  }

  /// Retrieves exchange params
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExchangeParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExchangeParams(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryExchangeParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? []
    )
  }

  /// Retrieves a Subaccount's Deposits
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountDeposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountDeposits(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? []
    )
  }

  /// Retrieves a Subaccount's Deposits
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountDeposit(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? []
    )
  }

  /// Retrieves all of the balances of all users on the exchange.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeBalances(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? []
    )
  }

  /// Retrieves the aggregate volumes for the specified account or subaccount
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateVolume.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateVolume(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateVolumeResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVolumeInterceptors() ?? []
    )
  }

  /// Retrieves the aggregate volumes for specified accounts
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateVolumes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateVolumes(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateVolumesResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolumes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVolumesInterceptors() ?? []
    )
  }

  /// Retrieves the aggregate volume for the specified market
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateMarketVolume.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateMarketVolume(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateMarketVolumeInterceptors() ?? []
    )
  }

  /// Retrieves the aggregate market volumes for specified markets
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateMarketVolumes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateMarketVolumes(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolumes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateMarketVolumesInterceptors() ?? []
    )
  }

  /// Retrieves the denom decimals for a denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomDecimal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomDecimal(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalRequest, Injective_Exchange_V1beta1_QueryDenomDecimalResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomDecimalInterceptors() ?? []
    )
  }

  /// Retrieves the denom decimals for multiple denoms. Returns all denom
  /// decimals if unspecified.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomDecimals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomDecimals(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, Injective_Exchange_V1beta1_QueryDenomDecimalsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomDecimalsInterceptors() ?? []
    )
  }

  /// Retrieves a list of spot markets.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotMarkets(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? []
    )
  }

  /// Retrieves a spot market by ticker
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotMarket(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? []
    )
  }

  /// Retrieves a list of spot markets with extra information.
  ///
  /// - Parameters:
  ///   - request: Request to send to FullSpotMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fullSpotMarkets(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFullSpotMarketsInterceptors() ?? []
    )
  }

  /// Retrieves a spot market with extra information.
  ///
  /// - Parameters:
  ///   - request: Request to send to FullSpotMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fullSpotMarket(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFullSpotMarketInterceptors() ?? []
    )
  }

  /// Retrieves a spot market's orderbook by marketID
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotOrderbook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotOrderbook(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrderbook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? []
    )
  }

  /// Retrieves a trader's spot orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderSpotOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? []
    )
  }

  /// Retrieves all account address spot orders
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountAddressSpotOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountAddressSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressSpotOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressSpotOrdersInterceptors() ?? []
    )
  }

  /// Retrieves spot orders corresponding to specified order hashes for a given
  /// subaccountID and marketID
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotOrdersByHashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotOrdersByHashes(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrdersByHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrdersByHashesInterceptors() ?? []
    )
  }

  /// Retrieves subaccount's orders
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountOrders(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountOrdersInterceptors() ?? []
    )
  }

  /// Retrieves a trader's transient spot orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderSpotTransientOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderSpotTransientOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotTransientOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotTransientOrdersInterceptors() ?? []
    )
  }

  /// Retrieves a spot market's mid-price
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotMidPriceAndTOB.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotMidPriceAndTOB(
    _ request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMidPriceAndTOB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMidPriceAndTOBInterceptors() ?? []
    )
  }

  /// Retrieves a derivative market's mid-price
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeMidPriceAndTOB.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeMidPriceAndTOB(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMidPriceAndTOB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMidPriceAndTOBInterceptors() ?? []
    )
  }

  /// Retrieves a derivative market's orderbook by marketID
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeOrderbook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeOrderbook(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrderbook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? []
    )
  }

  /// Retrieves a trader's derivative orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderDerivativeOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? []
    )
  }

  /// Retrieves all account address derivative orders
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountAddressDerivativeOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountAddressDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressDerivativeOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressDerivativeOrdersInterceptors() ?? []
    )
  }

  /// Retrieves a trader's derivative orders
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeOrdersByHashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeOrdersByHashes(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrdersByHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrdersByHashesInterceptors() ?? []
    )
  }

  /// Retrieves a trader's transient derivative orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderDerivativeTransientOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderDerivativeTransientOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeTransientOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeTransientOrdersInterceptors() ?? []
    )
  }

  /// Retrieves a list of derivative markets.
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeMarkets(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? []
    )
  }

  /// Retrieves a derivative market by ticker
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeMarket(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? []
    )
  }

  /// Retrieves a derivative market's corresponding address for fees that
  /// contribute to the market's insurance fund
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeMarketAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeMarketAddress(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarketAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketAddressInterceptors() ?? []
    )
  }

  /// Retrieves a subaccount's trade nonce
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountTradeNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountTradeNonce(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountTradeNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? []
    )
  }

  /// Retrieves the entire exchange module's state
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeModuleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeModuleState(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeModuleState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? []
    )
  }

  /// Retrieves the entire exchange module's positions
  ///
  /// - Parameters:
  ///   - request: Request to send to Positions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func positions(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.positions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  /// Retrieves subaccount's positions
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountPositions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountPositions(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? []
    )
  }

  /// Retrieves subaccount's position in market
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountPositionInMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountPositionInMarket(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositionInMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionInMarketInterceptors() ?? []
    )
  }

  /// Retrieves subaccount's position in market
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountEffectivePositionInMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountEffectivePositionInMarket(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountEffectivePositionInMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountEffectivePositionInMarketInterceptors() ?? []
    )
  }

  /// Retrieves perpetual market info
  ///
  /// - Parameters:
  ///   - request: Request to send to PerpetualMarketInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func perpetualMarketInfo(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePerpetualMarketInfoInterceptors() ?? []
    )
  }

  /// Retrieves expiry market info
  ///
  /// - Parameters:
  ///   - request: Request to send to ExpiryFuturesMarketInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func expiryFuturesMarketInfo(
    _ request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.expiryFuturesMarketInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExpiryFuturesMarketInfoInterceptors() ?? []
    )
  }

  /// Retrieves perpetual market funding
  ///
  /// - Parameters:
  ///   - request: Request to send to PerpetualMarketFunding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func perpetualMarketFunding(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketFunding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePerpetualMarketFundingInterceptors() ?? []
    )
  }

  /// Retrieves subaccount's order metadata
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountOrderMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountOrderMetadata(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrderMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountOrderMetadataInterceptors() ?? []
    )
  }

  /// Retrieves the account and total trade rewards points
  ///
  /// - Parameters:
  ///   - request: Request to send to TradeRewardPoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardPoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? []
    )
  }

  /// Retrieves the pending account and total trade rewards points
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingTradeRewardPoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pendingTradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.pendingTradeRewardPoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingTradeRewardPointsInterceptors() ?? []
    )
  }

  /// Retrieves the trade reward campaign
  ///
  /// - Parameters:
  ///   - request: Request to send to TradeRewardCampaign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tradeRewardCampaign(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? []
    )
  }

  /// Retrieves the account's fee discount info
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeDiscountAccountInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeDiscountAccountInfo(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? []
    )
  }

  /// Retrieves the fee discount schedule
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeDiscountSchedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeDiscountSchedule(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? []
    )
  }

  /// Retrieves mismatches between available vs. total balance
  ///
  /// - Parameters:
  ///   - request: Request to send to BalanceMismatches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balanceMismatches(
    _ request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceMismatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceMismatchesInterceptors() ?? []
    )
  }

  /// Retrieves available and total balances with balance holds
  ///
  /// - Parameters:
  ///   - request: Request to send to BalanceWithBalanceHolds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balanceWithBalanceHolds(
    _ request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceWithBalanceHolds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceWithBalanceHoldsInterceptors() ?? []
    )
  }

  /// Retrieves fee discount tier stats
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeDiscountTierStatistics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeDiscountTierStatistics(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountTierStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountTierStatisticsInterceptors() ?? []
    )
  }

  /// Retrieves market making pool info
  ///
  /// - Parameters:
  ///   - request: Request to send to MitoVaultInfos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mitoVaultInfos(
    _ request: Injective_Exchange_V1beta1_MitoVaultInfosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_MitoVaultInfosRequest, Injective_Exchange_V1beta1_MitoVaultInfosResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.mitoVaultInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMitoVaultInfosInterceptors() ?? []
    )
  }

  /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryMarketIDFromVault.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryMarketIDFromVault(
    _ request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryMarketIDFromVault.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMarketIDFromVaultInterceptors() ?? []
    )
  }

  /// Retrieves historical trade records for a given market ID
  ///
  /// - Parameters:
  ///   - request: Request to send to HistoricalTradeRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func historicalTradeRecords(
    _ request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.historicalTradeRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalTradeRecordsInterceptors() ?? []
    )
  }

  /// Retrieves if the account is opted out of rewards
  ///
  /// - Parameters:
  ///   - request: Request to send to IsOptedOutOfRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isOptedOutOfRewards(
    _ request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.isOptedOutOfRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsOptedOutOfRewardsInterceptors() ?? []
    )
  }

  /// Retrieves all accounts opted out of rewards
  ///
  /// - Parameters:
  ///   - request: Request to send to OptedOutOfRewardsAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func optedOutOfRewardsAccounts(
    _ request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.optedOutOfRewardsAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOptedOutOfRewardsAccountsInterceptors() ?? []
    )
  }

  /// MarketVolatility computes the volatility for spot and derivative markets
  /// trading history.
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketVolatility.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marketVolatility(
    _ request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, Injective_Exchange_V1beta1_QueryMarketVolatilityResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketVolatility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketVolatilityInterceptors() ?? []
    )
  }

  /// Retrieves a spot market's orderbook by marketID
  ///
  /// - Parameters:
  ///   - request: Request to send to BinaryOptionsMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func binaryOptionsMarkets(
    _ request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, Injective_Exchange_V1beta1_QueryBinaryMarketsResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.binaryOptionsMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBinaryOptionsMarketsInterceptors() ?? []
    )
  }

  /// Retrieves a trader's derivative conditional orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderDerivativeConditionalOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderDerivativeConditionalOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeConditionalOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeConditionalOrdersInterceptors() ?? []
    )
  }

  /// Unary call to MarketAtomicExecutionFeeMultiplier
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketAtomicExecutionFeeMultiplier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marketAtomicExecutionFeeMultiplier(
    _ request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse> {
    return self.makeUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketAtomicExecutionFeeMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketAtomicExecutionFeeMultiplierInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Exchange_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Exchange_V1beta1_QueryNIOClient")
internal final class Injective_Exchange_V1beta1_QueryClient: Injective_Exchange_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.exchange.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Exchange_V1beta1_QueryNIOClient: Injective_Exchange_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.exchange.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Exchange_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeQueryExchangeParamsCall(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>

  func makeSubaccountDepositsCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>

  func makeSubaccountDepositCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>

  func makeExchangeBalancesCall(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>

  func makeAggregateVolumeCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>

  func makeAggregateVolumesCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>

  func makeAggregateMarketVolumeCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>

  func makeAggregateMarketVolumesCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>

  func makeDenomDecimalCall(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalRequest, Injective_Exchange_V1beta1_QueryDenomDecimalResponse>

  func makeDenomDecimalsCall(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>

  func makeSpotMarketsCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>

  func makeSpotMarketCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>

  func makeFullSpotMarketsCall(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>

  func makeFullSpotMarketCall(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>

  func makeSpotOrderbookCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>

  func makeTraderSpotOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  func makeAccountAddressSpotOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>

  func makeSpotOrdersByHashesCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>

  func makeSubaccountOrdersCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>

  func makeTraderSpotTransientOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  func makeSpotMidPriceAndTobCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>

  func makeDerivativeMidPriceAndTobCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>

  func makeDerivativeOrderbookCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>

  func makeTraderDerivativeOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  func makeAccountAddressDerivativeOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>

  func makeDerivativeOrdersByHashesCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>

  func makeTraderDerivativeTransientOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  func makeDerivativeMarketsCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>

  func makeDerivativeMarketCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>

  func makeDerivativeMarketAddressCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>

  func makeSubaccountTradeNonceCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>

  func makeExchangeModuleStateCall(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>

  func makePositionsCall(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>

  func makeSubaccountPositionsCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>

  func makeSubaccountPositionInMarketCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>

  func makeSubaccountEffectivePositionInMarketCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>

  func makePerpetualMarketInfoCall(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>

  func makeExpiryFuturesMarketInfoCall(
    _ request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>

  func makePerpetualMarketFundingCall(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>

  func makeSubaccountOrderMetadataCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>

  func makeTradeRewardPointsCall(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  func makePendingTradeRewardPointsCall(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  func makeTradeRewardCampaignCall(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>

  func makeFeeDiscountAccountInfoCall(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>

  func makeFeeDiscountScheduleCall(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>

  func makeBalanceMismatchesCall(
    _ request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>

  func makeBalanceWithBalanceHoldsCall(
    _ request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>

  func makeFeeDiscountTierStatisticsCall(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>

  func makeMitoVaultInfosCall(
    _ request: Injective_Exchange_V1beta1_MitoVaultInfosRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_MitoVaultInfosRequest, Injective_Exchange_V1beta1_MitoVaultInfosResponse>

  func makeQueryMarketIdfromVaultCall(
    _ request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>

  func makeHistoricalTradeRecordsCall(
    _ request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>

  func makeIsOptedOutOfRewardsCall(
    _ request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>

  func makeOptedOutOfRewardsAccountsCall(
    _ request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>

  func makeMarketVolatilityCall(
    _ request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>

  func makeBinaryOptionsMarketsCall(
    _ request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>

  func makeTraderDerivativeConditionalOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>

  func makeMarketAtomicExecutionFeeMultiplierCall(
    _ request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Exchange_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Exchange_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQueryExchangeParamsCall(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryExchangeParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? []
    )
  }

  internal func makeSubaccountDepositsCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? []
    )
  }

  internal func makeSubaccountDepositCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? []
    )
  }

  internal func makeExchangeBalancesCall(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? []
    )
  }

  internal func makeAggregateVolumeCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateVolumeResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVolumeInterceptors() ?? []
    )
  }

  internal func makeAggregateVolumesCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateVolumesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolumes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVolumesInterceptors() ?? []
    )
  }

  internal func makeAggregateMarketVolumeCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateMarketVolumeInterceptors() ?? []
    )
  }

  internal func makeAggregateMarketVolumesCall(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolumes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateMarketVolumesInterceptors() ?? []
    )
  }

  internal func makeDenomDecimalCall(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalRequest, Injective_Exchange_V1beta1_QueryDenomDecimalResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomDecimalInterceptors() ?? []
    )
  }

  internal func makeDenomDecimalsCall(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, Injective_Exchange_V1beta1_QueryDenomDecimalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomDecimalsInterceptors() ?? []
    )
  }

  internal func makeSpotMarketsCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? []
    )
  }

  internal func makeSpotMarketCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? []
    )
  }

  internal func makeFullSpotMarketsCall(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFullSpotMarketsInterceptors() ?? []
    )
  }

  internal func makeFullSpotMarketCall(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFullSpotMarketInterceptors() ?? []
    )
  }

  internal func makeSpotOrderbookCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrderbook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? []
    )
  }

  internal func makeTraderSpotOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? []
    )
  }

  internal func makeAccountAddressSpotOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressSpotOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressSpotOrdersInterceptors() ?? []
    )
  }

  internal func makeSpotOrdersByHashesCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrdersByHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrdersByHashesInterceptors() ?? []
    )
  }

  internal func makeSubaccountOrdersCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountOrdersInterceptors() ?? []
    )
  }

  internal func makeTraderSpotTransientOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotTransientOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotTransientOrdersInterceptors() ?? []
    )
  }

  internal func makeSpotMidPriceAndTobCall(
    _ request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMidPriceAndTOB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMidPriceAndTOBInterceptors() ?? []
    )
  }

  internal func makeDerivativeMidPriceAndTobCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMidPriceAndTOB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMidPriceAndTOBInterceptors() ?? []
    )
  }

  internal func makeDerivativeOrderbookCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrderbook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? []
    )
  }

  internal func makeTraderDerivativeOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? []
    )
  }

  internal func makeAccountAddressDerivativeOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressDerivativeOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressDerivativeOrdersInterceptors() ?? []
    )
  }

  internal func makeDerivativeOrdersByHashesCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrdersByHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrdersByHashesInterceptors() ?? []
    )
  }

  internal func makeTraderDerivativeTransientOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeTransientOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeTransientOrdersInterceptors() ?? []
    )
  }

  internal func makeDerivativeMarketsCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? []
    )
  }

  internal func makeDerivativeMarketCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? []
    )
  }

  internal func makeDerivativeMarketAddressCall(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarketAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketAddressInterceptors() ?? []
    )
  }

  internal func makeSubaccountTradeNonceCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountTradeNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? []
    )
  }

  internal func makeExchangeModuleStateCall(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeModuleState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? []
    )
  }

  internal func makePositionsCall(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.positions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  internal func makeSubaccountPositionsCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? []
    )
  }

  internal func makeSubaccountPositionInMarketCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositionInMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionInMarketInterceptors() ?? []
    )
  }

  internal func makeSubaccountEffectivePositionInMarketCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountEffectivePositionInMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountEffectivePositionInMarketInterceptors() ?? []
    )
  }

  internal func makePerpetualMarketInfoCall(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePerpetualMarketInfoInterceptors() ?? []
    )
  }

  internal func makeExpiryFuturesMarketInfoCall(
    _ request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.expiryFuturesMarketInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExpiryFuturesMarketInfoInterceptors() ?? []
    )
  }

  internal func makePerpetualMarketFundingCall(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketFunding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePerpetualMarketFundingInterceptors() ?? []
    )
  }

  internal func makeSubaccountOrderMetadataCall(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrderMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountOrderMetadataInterceptors() ?? []
    )
  }

  internal func makeTradeRewardPointsCall(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardPoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? []
    )
  }

  internal func makePendingTradeRewardPointsCall(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.pendingTradeRewardPoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingTradeRewardPointsInterceptors() ?? []
    )
  }

  internal func makeTradeRewardCampaignCall(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? []
    )
  }

  internal func makeFeeDiscountAccountInfoCall(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? []
    )
  }

  internal func makeFeeDiscountScheduleCall(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? []
    )
  }

  internal func makeBalanceMismatchesCall(
    _ request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceMismatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceMismatchesInterceptors() ?? []
    )
  }

  internal func makeBalanceWithBalanceHoldsCall(
    _ request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceWithBalanceHolds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceWithBalanceHoldsInterceptors() ?? []
    )
  }

  internal func makeFeeDiscountTierStatisticsCall(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountTierStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountTierStatisticsInterceptors() ?? []
    )
  }

  internal func makeMitoVaultInfosCall(
    _ request: Injective_Exchange_V1beta1_MitoVaultInfosRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_MitoVaultInfosRequest, Injective_Exchange_V1beta1_MitoVaultInfosResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.mitoVaultInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMitoVaultInfosInterceptors() ?? []
    )
  }

  internal func makeQueryMarketIdfromVaultCall(
    _ request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryMarketIDFromVault.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMarketIDFromVaultInterceptors() ?? []
    )
  }

  internal func makeHistoricalTradeRecordsCall(
    _ request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.historicalTradeRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalTradeRecordsInterceptors() ?? []
    )
  }

  internal func makeIsOptedOutOfRewardsCall(
    _ request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.isOptedOutOfRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsOptedOutOfRewardsInterceptors() ?? []
    )
  }

  internal func makeOptedOutOfRewardsAccountsCall(
    _ request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.optedOutOfRewardsAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOptedOutOfRewardsAccountsInterceptors() ?? []
    )
  }

  internal func makeMarketVolatilityCall(
    _ request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, Injective_Exchange_V1beta1_QueryMarketVolatilityResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketVolatility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketVolatilityInterceptors() ?? []
    )
  }

  internal func makeBinaryOptionsMarketsCall(
    _ request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, Injective_Exchange_V1beta1_QueryBinaryMarketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.binaryOptionsMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBinaryOptionsMarketsInterceptors() ?? []
    )
  }

  internal func makeTraderDerivativeConditionalOrdersCall(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeConditionalOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeConditionalOrdersInterceptors() ?? []
    )
  }

  internal func makeMarketAtomicExecutionFeeMultiplierCall(
    _ request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketAtomicExecutionFeeMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketAtomicExecutionFeeMultiplierInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Exchange_V1beta1_QueryAsyncClientProtocol {
  internal func queryExchangeParams(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryExchangeParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryExchangeParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? []
    )
  }

  internal func subaccountDeposits(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? []
    )
  }

  internal func subaccountDeposit(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? []
    )
  }

  internal func exchangeBalances(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryExchangeBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? []
    )
  }

  internal func aggregateVolume(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateVolumeResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVolumeInterceptors() ?? []
    )
  }

  internal func aggregateVolumes(
    _ request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateVolumesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolumes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVolumesInterceptors() ?? []
    )
  }

  internal func aggregateMarketVolume(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolume.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateMarketVolumeInterceptors() ?? []
    )
  }

  internal func aggregateMarketVolumes(
    _ request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolumes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateMarketVolumesInterceptors() ?? []
    )
  }

  internal func denomDecimal(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDenomDecimalResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomDecimalInterceptors() ?? []
    )
  }

  internal func denomDecimals(
    _ request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDenomDecimalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomDecimalsInterceptors() ?? []
    )
  }

  internal func spotMarkets(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotMarketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? []
    )
  }

  internal func spotMarket(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotMarketResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? []
    )
  }

  internal func fullSpotMarkets(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFullSpotMarketsInterceptors() ?? []
    )
  }

  internal func fullSpotMarket(
    _ request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryFullSpotMarketResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFullSpotMarketInterceptors() ?? []
    )
  }

  internal func spotOrderbook(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotOrderbookResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrderbook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? []
    )
  }

  internal func traderSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? []
    )
  }

  internal func accountAddressSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressSpotOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressSpotOrdersInterceptors() ?? []
    )
  }

  internal func spotOrdersByHashes(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrdersByHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrdersByHashesInterceptors() ?? []
    )
  }

  internal func subaccountOrders(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountOrdersInterceptors() ?? []
    )
  }

  internal func traderSpotTransientOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotTransientOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotTransientOrdersInterceptors() ?? []
    )
  }

  internal func spotMidPriceAndTOB(
    _ request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMidPriceAndTOB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMidPriceAndTOBInterceptors() ?? []
    )
  }

  internal func derivativeMidPriceAndTOB(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMidPriceAndTOB.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMidPriceAndTOBInterceptors() ?? []
    )
  }

  internal func derivativeOrderbook(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrderbook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? []
    )
  }

  internal func traderDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? []
    )
  }

  internal func accountAddressDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressDerivativeOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAddressDerivativeOrdersInterceptors() ?? []
    )
  }

  internal func derivativeOrdersByHashes(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrdersByHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrdersByHashesInterceptors() ?? []
    )
  }

  internal func traderDerivativeTransientOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeTransientOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeTransientOrdersInterceptors() ?? []
    )
  }

  internal func derivativeMarkets(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? []
    )
  }

  internal func derivativeMarket(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMarketResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? []
    )
  }

  internal func derivativeMarketAddress(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarketAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketAddressInterceptors() ?? []
    )
  }

  internal func subaccountTradeNonce(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountTradeNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? []
    )
  }

  internal func exchangeModuleState(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryModuleStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeModuleState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? []
    )
  }

  internal func positions(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryPositionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.positions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  internal func subaccountPositions(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? []
    )
  }

  internal func subaccountPositionInMarket(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositionInMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionInMarketInterceptors() ?? []
    )
  }

  internal func subaccountEffectivePositionInMarket(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountEffectivePositionInMarket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountEffectivePositionInMarketInterceptors() ?? []
    )
  }

  internal func perpetualMarketInfo(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePerpetualMarketInfoInterceptors() ?? []
    )
  }

  internal func expiryFuturesMarketInfo(
    _ request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.expiryFuturesMarketInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExpiryFuturesMarketInfoInterceptors() ?? []
    )
  }

  internal func perpetualMarketFunding(
    _ request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketFunding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePerpetualMarketFundingInterceptors() ?? []
    )
  }

  internal func subaccountOrderMetadata(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrderMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountOrderMetadataInterceptors() ?? []
    )
  }

  internal func tradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardPoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? []
    )
  }

  internal func pendingTradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.pendingTradeRewardPoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingTradeRewardPointsInterceptors() ?? []
    )
  }

  internal func tradeRewardCampaign(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardCampaign.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? []
    )
  }

  internal func feeDiscountAccountInfo(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? []
    )
  }

  internal func feeDiscountSchedule(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? []
    )
  }

  internal func balanceMismatches(
    _ request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceMismatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceMismatchesInterceptors() ?? []
    )
  }

  internal func balanceWithBalanceHolds(
    _ request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceWithBalanceHolds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceWithBalanceHoldsInterceptors() ?? []
    )
  }

  internal func feeDiscountTierStatistics(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountTierStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountTierStatisticsInterceptors() ?? []
    )
  }

  internal func mitoVaultInfos(
    _ request: Injective_Exchange_V1beta1_MitoVaultInfosRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_MitoVaultInfosResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.mitoVaultInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMitoVaultInfosInterceptors() ?? []
    )
  }

  internal func queryMarketIDFromVault(
    _ request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryMarketIDFromVault.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMarketIDFromVaultInterceptors() ?? []
    )
  }

  internal func historicalTradeRecords(
    _ request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.historicalTradeRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalTradeRecordsInterceptors() ?? []
    )
  }

  internal func isOptedOutOfRewards(
    _ request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.isOptedOutOfRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsOptedOutOfRewardsInterceptors() ?? []
    )
  }

  internal func optedOutOfRewardsAccounts(
    _ request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.optedOutOfRewardsAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOptedOutOfRewardsAccountsInterceptors() ?? []
    )
  }

  internal func marketVolatility(
    _ request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryMarketVolatilityResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketVolatility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketVolatilityInterceptors() ?? []
    )
  }

  internal func binaryOptionsMarkets(
    _ request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryBinaryMarketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.binaryOptionsMarkets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBinaryOptionsMarketsInterceptors() ?? []
    )
  }

  internal func traderDerivativeConditionalOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeConditionalOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeConditionalOrdersInterceptors() ?? []
    )
  }

  internal func marketAtomicExecutionFeeMultiplier(
    _ request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketAtomicExecutionFeeMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketAtomicExecutionFeeMultiplierInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Exchange_V1beta1_QueryAsyncClient: Injective_Exchange_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'queryExchangeParams'.
  func makeQueryExchangeParamsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountDeposits'.
  func makeSubaccountDepositsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountDeposit'.
  func makeSubaccountDepositInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeBalances'.
  func makeExchangeBalancesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateVolume'.
  func makeAggregateVolumeInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateVolumes'.
  func makeAggregateVolumesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateMarketVolume'.
  func makeAggregateMarketVolumeInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateMarketVolumes'.
  func makeAggregateMarketVolumesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>]

  /// - Returns: Interceptors to use when invoking 'denomDecimal'.
  func makeDenomDecimalInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDenomDecimalRequest, Injective_Exchange_V1beta1_QueryDenomDecimalResponse>]

  /// - Returns: Interceptors to use when invoking 'denomDecimals'.
  func makeDenomDecimalsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>]

  /// - Returns: Interceptors to use when invoking 'spotMarkets'.
  func makeSpotMarketsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'spotMarket'.
  func makeSpotMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'fullSpotMarkets'.
  func makeFullSpotMarketsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'fullSpotMarket'.
  func makeFullSpotMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'spotOrderbook'.
  func makeSpotOrderbookInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>]

  /// - Returns: Interceptors to use when invoking 'traderSpotOrders'.
  func makeTraderSpotOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'accountAddressSpotOrders'.
  func makeAccountAddressSpotOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'spotOrdersByHashes'.
  func makeSpotOrdersByHashesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountOrders'.
  func makeSubaccountOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'traderSpotTransientOrders'.
  func makeTraderSpotTransientOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'spotMidPriceAndTOB'.
  func makeSpotMidPriceAndTOBInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeMidPriceAndTOB'.
  func makeDerivativeMidPriceAndTOBInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeOrderbook'.
  func makeDerivativeOrderbookInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>]

  /// - Returns: Interceptors to use when invoking 'traderDerivativeOrders'.
  func makeTraderDerivativeOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'accountAddressDerivativeOrders'.
  func makeAccountAddressDerivativeOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeOrdersByHashes'.
  func makeDerivativeOrdersByHashesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>]

  /// - Returns: Interceptors to use when invoking 'traderDerivativeTransientOrders'.
  func makeTraderDerivativeTransientOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeMarkets'.
  func makeDerivativeMarketsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeMarket'.
  func makeDerivativeMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeMarketAddress'.
  func makeDerivativeMarketAddressInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountTradeNonce'.
  func makeSubaccountTradeNonceInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeModuleState'.
  func makeExchangeModuleStateInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>]

  /// - Returns: Interceptors to use when invoking 'positions'.
  func makePositionsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountPositions'.
  func makeSubaccountPositionsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountPositionInMarket'.
  func makeSubaccountPositionInMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountEffectivePositionInMarket'.
  func makeSubaccountEffectivePositionInMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'perpetualMarketInfo'.
  func makePerpetualMarketInfoInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'expiryFuturesMarketInfo'.
  func makeExpiryFuturesMarketInfoInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'perpetualMarketFunding'.
  func makePerpetualMarketFundingInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountOrderMetadata'.
  func makeSubaccountOrderMetadataInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'tradeRewardPoints'.
  func makeTradeRewardPointsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>]

  /// - Returns: Interceptors to use when invoking 'pendingTradeRewardPoints'.
  func makePendingTradeRewardPointsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>]

  /// - Returns: Interceptors to use when invoking 'tradeRewardCampaign'.
  func makeTradeRewardCampaignInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>]

  /// - Returns: Interceptors to use when invoking 'feeDiscountAccountInfo'.
  func makeFeeDiscountAccountInfoInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'feeDiscountSchedule'.
  func makeFeeDiscountScheduleInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>]

  /// - Returns: Interceptors to use when invoking 'balanceMismatches'.
  func makeBalanceMismatchesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>]

  /// - Returns: Interceptors to use when invoking 'balanceWithBalanceHolds'.
  func makeBalanceWithBalanceHoldsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>]

  /// - Returns: Interceptors to use when invoking 'feeDiscountTierStatistics'.
  func makeFeeDiscountTierStatisticsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>]

  /// - Returns: Interceptors to use when invoking 'mitoVaultInfos'.
  func makeMitoVaultInfosInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_MitoVaultInfosRequest, Injective_Exchange_V1beta1_MitoVaultInfosResponse>]

  /// - Returns: Interceptors to use when invoking 'queryMarketIDFromVault'.
  func makeQueryMarketIDFromVaultInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>]

  /// - Returns: Interceptors to use when invoking 'historicalTradeRecords'.
  func makeHistoricalTradeRecordsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'isOptedOutOfRewards'.
  func makeIsOptedOutOfRewardsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'optedOutOfRewardsAccounts'.
  func makeOptedOutOfRewardsAccountsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'marketVolatility'.
  func makeMarketVolatilityInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>]

  /// - Returns: Interceptors to use when invoking 'binaryOptionsMarkets'.
  func makeBinaryOptionsMarketsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'traderDerivativeConditionalOrders'.
  func makeTraderDerivativeConditionalOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'marketAtomicExecutionFeeMultiplier'.
  func makeMarketAtomicExecutionFeeMultiplierInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>]
}

internal enum Injective_Exchange_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "injective.exchange.v1beta1.Query",
    methods: [
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryExchangeParams,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposits,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountDeposit,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeBalances,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolume,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateVolumes,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolume,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.aggregateMarketVolumes,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimal,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.denomDecimals,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarkets,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMarket,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarkets,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.fullSpotMarket,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrderbook,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressSpotOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotOrdersByHashes,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderSpotTransientOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.spotMidPriceAndTOB,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMidPriceAndTOB,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrderbook,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.accountAddressDerivativeOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeOrdersByHashes,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeTransientOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarkets,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarket,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.derivativeMarketAddress,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountTradeNonce,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.exchangeModuleState,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.positions,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositions,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountPositionInMarket,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountEffectivePositionInMarket,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketInfo,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.expiryFuturesMarketInfo,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.perpetualMarketFunding,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.subaccountOrderMetadata,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardPoints,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.pendingTradeRewardPoints,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.tradeRewardCampaign,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountAccountInfo,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountSchedule,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceMismatches,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.balanceWithBalanceHolds,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.feeDiscountTierStatistics,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.mitoVaultInfos,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.queryMarketIDFromVault,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.historicalTradeRecords,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.isOptedOutOfRewards,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.optedOutOfRewardsAccounts,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketVolatility,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.binaryOptionsMarkets,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.traderDerivativeConditionalOrders,
      Injective_Exchange_V1beta1_QueryClientMetadata.Methods.marketAtomicExecutionFeeMultiplier,
    ]
  )

  internal enum Methods {
    internal static let queryExchangeParams = GRPCMethodDescriptor(
      name: "QueryExchangeParams",
      path: "/injective.exchange.v1beta1.Query/QueryExchangeParams",
      type: GRPCCallType.unary
    )

    internal static let subaccountDeposits = GRPCMethodDescriptor(
      name: "SubaccountDeposits",
      path: "/injective.exchange.v1beta1.Query/SubaccountDeposits",
      type: GRPCCallType.unary
    )

    internal static let subaccountDeposit = GRPCMethodDescriptor(
      name: "SubaccountDeposit",
      path: "/injective.exchange.v1beta1.Query/SubaccountDeposit",
      type: GRPCCallType.unary
    )

    internal static let exchangeBalances = GRPCMethodDescriptor(
      name: "ExchangeBalances",
      path: "/injective.exchange.v1beta1.Query/ExchangeBalances",
      type: GRPCCallType.unary
    )

    internal static let aggregateVolume = GRPCMethodDescriptor(
      name: "AggregateVolume",
      path: "/injective.exchange.v1beta1.Query/AggregateVolume",
      type: GRPCCallType.unary
    )

    internal static let aggregateVolumes = GRPCMethodDescriptor(
      name: "AggregateVolumes",
      path: "/injective.exchange.v1beta1.Query/AggregateVolumes",
      type: GRPCCallType.unary
    )

    internal static let aggregateMarketVolume = GRPCMethodDescriptor(
      name: "AggregateMarketVolume",
      path: "/injective.exchange.v1beta1.Query/AggregateMarketVolume",
      type: GRPCCallType.unary
    )

    internal static let aggregateMarketVolumes = GRPCMethodDescriptor(
      name: "AggregateMarketVolumes",
      path: "/injective.exchange.v1beta1.Query/AggregateMarketVolumes",
      type: GRPCCallType.unary
    )

    internal static let denomDecimal = GRPCMethodDescriptor(
      name: "DenomDecimal",
      path: "/injective.exchange.v1beta1.Query/DenomDecimal",
      type: GRPCCallType.unary
    )

    internal static let denomDecimals = GRPCMethodDescriptor(
      name: "DenomDecimals",
      path: "/injective.exchange.v1beta1.Query/DenomDecimals",
      type: GRPCCallType.unary
    )

    internal static let spotMarkets = GRPCMethodDescriptor(
      name: "SpotMarkets",
      path: "/injective.exchange.v1beta1.Query/SpotMarkets",
      type: GRPCCallType.unary
    )

    internal static let spotMarket = GRPCMethodDescriptor(
      name: "SpotMarket",
      path: "/injective.exchange.v1beta1.Query/SpotMarket",
      type: GRPCCallType.unary
    )

    internal static let fullSpotMarkets = GRPCMethodDescriptor(
      name: "FullSpotMarkets",
      path: "/injective.exchange.v1beta1.Query/FullSpotMarkets",
      type: GRPCCallType.unary
    )

    internal static let fullSpotMarket = GRPCMethodDescriptor(
      name: "FullSpotMarket",
      path: "/injective.exchange.v1beta1.Query/FullSpotMarket",
      type: GRPCCallType.unary
    )

    internal static let spotOrderbook = GRPCMethodDescriptor(
      name: "SpotOrderbook",
      path: "/injective.exchange.v1beta1.Query/SpotOrderbook",
      type: GRPCCallType.unary
    )

    internal static let traderSpotOrders = GRPCMethodDescriptor(
      name: "TraderSpotOrders",
      path: "/injective.exchange.v1beta1.Query/TraderSpotOrders",
      type: GRPCCallType.unary
    )

    internal static let accountAddressSpotOrders = GRPCMethodDescriptor(
      name: "AccountAddressSpotOrders",
      path: "/injective.exchange.v1beta1.Query/AccountAddressSpotOrders",
      type: GRPCCallType.unary
    )

    internal static let spotOrdersByHashes = GRPCMethodDescriptor(
      name: "SpotOrdersByHashes",
      path: "/injective.exchange.v1beta1.Query/SpotOrdersByHashes",
      type: GRPCCallType.unary
    )

    internal static let subaccountOrders = GRPCMethodDescriptor(
      name: "SubaccountOrders",
      path: "/injective.exchange.v1beta1.Query/SubaccountOrders",
      type: GRPCCallType.unary
    )

    internal static let traderSpotTransientOrders = GRPCMethodDescriptor(
      name: "TraderSpotTransientOrders",
      path: "/injective.exchange.v1beta1.Query/TraderSpotTransientOrders",
      type: GRPCCallType.unary
    )

    internal static let spotMidPriceAndTOB = GRPCMethodDescriptor(
      name: "SpotMidPriceAndTOB",
      path: "/injective.exchange.v1beta1.Query/SpotMidPriceAndTOB",
      type: GRPCCallType.unary
    )

    internal static let derivativeMidPriceAndTOB = GRPCMethodDescriptor(
      name: "DerivativeMidPriceAndTOB",
      path: "/injective.exchange.v1beta1.Query/DerivativeMidPriceAndTOB",
      type: GRPCCallType.unary
    )

    internal static let derivativeOrderbook = GRPCMethodDescriptor(
      name: "DerivativeOrderbook",
      path: "/injective.exchange.v1beta1.Query/DerivativeOrderbook",
      type: GRPCCallType.unary
    )

    internal static let traderDerivativeOrders = GRPCMethodDescriptor(
      name: "TraderDerivativeOrders",
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeOrders",
      type: GRPCCallType.unary
    )

    internal static let accountAddressDerivativeOrders = GRPCMethodDescriptor(
      name: "AccountAddressDerivativeOrders",
      path: "/injective.exchange.v1beta1.Query/AccountAddressDerivativeOrders",
      type: GRPCCallType.unary
    )

    internal static let derivativeOrdersByHashes = GRPCMethodDescriptor(
      name: "DerivativeOrdersByHashes",
      path: "/injective.exchange.v1beta1.Query/DerivativeOrdersByHashes",
      type: GRPCCallType.unary
    )

    internal static let traderDerivativeTransientOrders = GRPCMethodDescriptor(
      name: "TraderDerivativeTransientOrders",
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders",
      type: GRPCCallType.unary
    )

    internal static let derivativeMarkets = GRPCMethodDescriptor(
      name: "DerivativeMarkets",
      path: "/injective.exchange.v1beta1.Query/DerivativeMarkets",
      type: GRPCCallType.unary
    )

    internal static let derivativeMarket = GRPCMethodDescriptor(
      name: "DerivativeMarket",
      path: "/injective.exchange.v1beta1.Query/DerivativeMarket",
      type: GRPCCallType.unary
    )

    internal static let derivativeMarketAddress = GRPCMethodDescriptor(
      name: "DerivativeMarketAddress",
      path: "/injective.exchange.v1beta1.Query/DerivativeMarketAddress",
      type: GRPCCallType.unary
    )

    internal static let subaccountTradeNonce = GRPCMethodDescriptor(
      name: "SubaccountTradeNonce",
      path: "/injective.exchange.v1beta1.Query/SubaccountTradeNonce",
      type: GRPCCallType.unary
    )

    internal static let exchangeModuleState = GRPCMethodDescriptor(
      name: "ExchangeModuleState",
      path: "/injective.exchange.v1beta1.Query/ExchangeModuleState",
      type: GRPCCallType.unary
    )

    internal static let positions = GRPCMethodDescriptor(
      name: "Positions",
      path: "/injective.exchange.v1beta1.Query/Positions",
      type: GRPCCallType.unary
    )

    internal static let subaccountPositions = GRPCMethodDescriptor(
      name: "SubaccountPositions",
      path: "/injective.exchange.v1beta1.Query/SubaccountPositions",
      type: GRPCCallType.unary
    )

    internal static let subaccountPositionInMarket = GRPCMethodDescriptor(
      name: "SubaccountPositionInMarket",
      path: "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket",
      type: GRPCCallType.unary
    )

    internal static let subaccountEffectivePositionInMarket = GRPCMethodDescriptor(
      name: "SubaccountEffectivePositionInMarket",
      path: "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket",
      type: GRPCCallType.unary
    )

    internal static let perpetualMarketInfo = GRPCMethodDescriptor(
      name: "PerpetualMarketInfo",
      path: "/injective.exchange.v1beta1.Query/PerpetualMarketInfo",
      type: GRPCCallType.unary
    )

    internal static let expiryFuturesMarketInfo = GRPCMethodDescriptor(
      name: "ExpiryFuturesMarketInfo",
      path: "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo",
      type: GRPCCallType.unary
    )

    internal static let perpetualMarketFunding = GRPCMethodDescriptor(
      name: "PerpetualMarketFunding",
      path: "/injective.exchange.v1beta1.Query/PerpetualMarketFunding",
      type: GRPCCallType.unary
    )

    internal static let subaccountOrderMetadata = GRPCMethodDescriptor(
      name: "SubaccountOrderMetadata",
      path: "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata",
      type: GRPCCallType.unary
    )

    internal static let tradeRewardPoints = GRPCMethodDescriptor(
      name: "TradeRewardPoints",
      path: "/injective.exchange.v1beta1.Query/TradeRewardPoints",
      type: GRPCCallType.unary
    )

    internal static let pendingTradeRewardPoints = GRPCMethodDescriptor(
      name: "PendingTradeRewardPoints",
      path: "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints",
      type: GRPCCallType.unary
    )

    internal static let tradeRewardCampaign = GRPCMethodDescriptor(
      name: "TradeRewardCampaign",
      path: "/injective.exchange.v1beta1.Query/TradeRewardCampaign",
      type: GRPCCallType.unary
    )

    internal static let feeDiscountAccountInfo = GRPCMethodDescriptor(
      name: "FeeDiscountAccountInfo",
      path: "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo",
      type: GRPCCallType.unary
    )

    internal static let feeDiscountSchedule = GRPCMethodDescriptor(
      name: "FeeDiscountSchedule",
      path: "/injective.exchange.v1beta1.Query/FeeDiscountSchedule",
      type: GRPCCallType.unary
    )

    internal static let balanceMismatches = GRPCMethodDescriptor(
      name: "BalanceMismatches",
      path: "/injective.exchange.v1beta1.Query/BalanceMismatches",
      type: GRPCCallType.unary
    )

    internal static let balanceWithBalanceHolds = GRPCMethodDescriptor(
      name: "BalanceWithBalanceHolds",
      path: "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds",
      type: GRPCCallType.unary
    )

    internal static let feeDiscountTierStatistics = GRPCMethodDescriptor(
      name: "FeeDiscountTierStatistics",
      path: "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics",
      type: GRPCCallType.unary
    )

    internal static let mitoVaultInfos = GRPCMethodDescriptor(
      name: "MitoVaultInfos",
      path: "/injective.exchange.v1beta1.Query/MitoVaultInfos",
      type: GRPCCallType.unary
    )

    internal static let queryMarketIDFromVault = GRPCMethodDescriptor(
      name: "QueryMarketIDFromVault",
      path: "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault",
      type: GRPCCallType.unary
    )

    internal static let historicalTradeRecords = GRPCMethodDescriptor(
      name: "HistoricalTradeRecords",
      path: "/injective.exchange.v1beta1.Query/HistoricalTradeRecords",
      type: GRPCCallType.unary
    )

    internal static let isOptedOutOfRewards = GRPCMethodDescriptor(
      name: "IsOptedOutOfRewards",
      path: "/injective.exchange.v1beta1.Query/IsOptedOutOfRewards",
      type: GRPCCallType.unary
    )

    internal static let optedOutOfRewardsAccounts = GRPCMethodDescriptor(
      name: "OptedOutOfRewardsAccounts",
      path: "/injective.exchange.v1beta1.Query/OptedOutOfRewardsAccounts",
      type: GRPCCallType.unary
    )

    internal static let marketVolatility = GRPCMethodDescriptor(
      name: "MarketVolatility",
      path: "/injective.exchange.v1beta1.Query/MarketVolatility",
      type: GRPCCallType.unary
    )

    internal static let binaryOptionsMarkets = GRPCMethodDescriptor(
      name: "BinaryOptionsMarkets",
      path: "/injective.exchange.v1beta1.Query/BinaryOptionsMarkets",
      type: GRPCCallType.unary
    )

    internal static let traderDerivativeConditionalOrders = GRPCMethodDescriptor(
      name: "TraderDerivativeConditionalOrders",
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeConditionalOrders",
      type: GRPCCallType.unary
    )

    internal static let marketAtomicExecutionFeeMultiplier = GRPCMethodDescriptor(
      name: "MarketAtomicExecutionFeeMultiplier",
      path: "/injective.exchange.v1beta1.Query/MarketAtomicExecutionFeeMultiplier",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Exchange_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Injective_Exchange_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Retrieves exchange params
  func queryExchangeParams(request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryExchangeParamsResponse>

  /// Retrieves a Subaccount's Deposits
  func subaccountDeposits(request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>

  /// Retrieves a Subaccount's Deposits
  func subaccountDeposit(request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>

  /// Retrieves all of the balances of all users on the exchange.
  func exchangeBalances(request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>

  /// Retrieves the aggregate volumes for the specified account or subaccount
  func aggregateVolume(request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>

  /// Retrieves the aggregate volumes for specified accounts
  func aggregateVolumes(request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>

  /// Retrieves the aggregate volume for the specified market
  func aggregateMarketVolume(request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>

  /// Retrieves the aggregate market volumes for specified markets
  func aggregateMarketVolumes(request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>

  /// Retrieves the denom decimals for a denom.
  func denomDecimal(request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDenomDecimalResponse>

  /// Retrieves the denom decimals for multiple denoms. Returns all denom
  /// decimals if unspecified.
  func denomDecimals(request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>

  /// Retrieves a list of spot markets.
  func spotMarkets(request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotMarketsResponse>

  /// Retrieves a spot market by ticker
  func spotMarket(request: Injective_Exchange_V1beta1_QuerySpotMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotMarketResponse>

  /// Retrieves a list of spot markets with extra information.
  func fullSpotMarkets(request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>

  /// Retrieves a spot market with extra information.
  func fullSpotMarket(request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>

  /// Retrieves a spot market's orderbook by marketID
  func spotOrderbook(request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>

  /// Retrieves a trader's spot orders
  func traderSpotOrders(request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  /// Retrieves all account address spot orders
  func accountAddressSpotOrders(request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>

  /// Retrieves spot orders corresponding to specified order hashes for a given
  /// subaccountID and marketID
  func spotOrdersByHashes(request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>

  /// Retrieves subaccount's orders
  func subaccountOrders(request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>

  /// Retrieves a trader's transient spot orders
  func traderSpotTransientOrders(request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  /// Retrieves a spot market's mid-price
  func spotMidPriceAndTOB(request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>

  /// Retrieves a derivative market's mid-price
  func derivativeMidPriceAndTOB(request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>

  /// Retrieves a derivative market's orderbook by marketID
  func derivativeOrderbook(request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>

  /// Retrieves a trader's derivative orders
  func traderDerivativeOrders(request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  /// Retrieves all account address derivative orders
  func accountAddressDerivativeOrders(request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>

  /// Retrieves a trader's derivative orders
  func derivativeOrdersByHashes(request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>

  /// Retrieves a trader's transient derivative orders
  func traderDerivativeTransientOrders(request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  /// Retrieves a list of derivative markets.
  func derivativeMarkets(request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>

  /// Retrieves a derivative market by ticker
  func derivativeMarket(request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>

  /// Retrieves a derivative market's corresponding address for fees that
  /// contribute to the market's insurance fund
  func derivativeMarketAddress(request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>

  /// Retrieves a subaccount's trade nonce
  func subaccountTradeNonce(request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>

  /// Retrieves the entire exchange module's state
  func exchangeModuleState(request: Injective_Exchange_V1beta1_QueryModuleStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryModuleStateResponse>

  /// Retrieves the entire exchange module's positions
  func positions(request: Injective_Exchange_V1beta1_QueryPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryPositionsResponse>

  /// Retrieves subaccount's positions
  func subaccountPositions(request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>

  /// Retrieves subaccount's position in market
  func subaccountPositionInMarket(request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>

  /// Retrieves subaccount's position in market
  func subaccountEffectivePositionInMarket(request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>

  /// Retrieves perpetual market info
  func perpetualMarketInfo(request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>

  /// Retrieves expiry market info
  func expiryFuturesMarketInfo(request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>

  /// Retrieves perpetual market funding
  func perpetualMarketFunding(request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>

  /// Retrieves subaccount's order metadata
  func subaccountOrderMetadata(request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>

  /// Retrieves the account and total trade rewards points
  func tradeRewardPoints(request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  /// Retrieves the pending account and total trade rewards points
  func pendingTradeRewardPoints(request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  /// Retrieves the trade reward campaign
  func tradeRewardCampaign(request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>

  /// Retrieves the account's fee discount info
  func feeDiscountAccountInfo(request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>

  /// Retrieves the fee discount schedule
  func feeDiscountSchedule(request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>

  /// Retrieves mismatches between available vs. total balance
  func balanceMismatches(request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>

  /// Retrieves available and total balances with balance holds
  func balanceWithBalanceHolds(request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>

  /// Retrieves fee discount tier stats
  func feeDiscountTierStatistics(request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>

  /// Retrieves market making pool info
  func mitoVaultInfos(request: Injective_Exchange_V1beta1_MitoVaultInfosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_MitoVaultInfosResponse>

  /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
  func queryMarketIDFromVault(request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>

  /// Retrieves historical trade records for a given market ID
  func historicalTradeRecords(request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>

  /// Retrieves if the account is opted out of rewards
  func isOptedOutOfRewards(request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>

  /// Retrieves all accounts opted out of rewards
  func optedOutOfRewardsAccounts(request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>

  /// MarketVolatility computes the volatility for spot and derivative markets
  /// trading history.
  func marketVolatility(request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>

  /// Retrieves a spot market's orderbook by marketID
  func binaryOptionsMarkets(request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>

  /// Retrieves a trader's derivative conditional orders
  func traderDerivativeConditionalOrders(request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>

  func marketAtomicExecutionFeeMultiplier(request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>
}

extension Injective_Exchange_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Injective_Exchange_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryExchangeParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExchangeParamsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExchangeParamsResponse>(),
        interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? [],
        userFunction: self.queryExchangeParams(request:context:)
      )

    case "SubaccountDeposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>(),
        interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? [],
        userFunction: self.subaccountDeposits(request:context:)
      )

    case "SubaccountDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>(),
        interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? [],
        userFunction: self.subaccountDeposit(request:context:)
      )

    case "ExchangeBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>(),
        interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? [],
        userFunction: self.exchangeBalances(request:context:)
      )

    case "AggregateVolume":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>(),
        interceptors: self.interceptors?.makeAggregateVolumeInterceptors() ?? [],
        userFunction: self.aggregateVolume(request:context:)
      )

    case "AggregateVolumes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>(),
        interceptors: self.interceptors?.makeAggregateVolumesInterceptors() ?? [],
        userFunction: self.aggregateVolumes(request:context:)
      )

    case "AggregateMarketVolume":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>(),
        interceptors: self.interceptors?.makeAggregateMarketVolumeInterceptors() ?? [],
        userFunction: self.aggregateMarketVolume(request:context:)
      )

    case "AggregateMarketVolumes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>(),
        interceptors: self.interceptors?.makeAggregateMarketVolumesInterceptors() ?? [],
        userFunction: self.aggregateMarketVolumes(request:context:)
      )

    case "DenomDecimal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDenomDecimalRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDenomDecimalResponse>(),
        interceptors: self.interceptors?.makeDenomDecimalInterceptors() ?? [],
        userFunction: self.denomDecimal(request:context:)
      )

    case "DenomDecimals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>(),
        interceptors: self.interceptors?.makeDenomDecimalsInterceptors() ?? [],
        userFunction: self.denomDecimals(request:context:)
      )

    case "SpotMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMarketsResponse>(),
        interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? [],
        userFunction: self.spotMarkets(request:context:)
      )

    case "SpotMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMarketResponse>(),
        interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? [],
        userFunction: self.spotMarket(request:context:)
      )

    case "FullSpotMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>(),
        interceptors: self.interceptors?.makeFullSpotMarketsInterceptors() ?? [],
        userFunction: self.fullSpotMarkets(request:context:)
      )

    case "FullSpotMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>(),
        interceptors: self.interceptors?.makeFullSpotMarketInterceptors() ?? [],
        userFunction: self.fullSpotMarket(request:context:)
      )

    case "SpotOrderbook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>(),
        interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? [],
        userFunction: self.spotOrderbook(request:context:)
      )

    case "TraderSpotOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? [],
        userFunction: self.traderSpotOrders(request:context:)
      )

    case "AccountAddressSpotOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeAccountAddressSpotOrdersInterceptors() ?? [],
        userFunction: self.accountAddressSpotOrders(request:context:)
      )

    case "SpotOrdersByHashes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>(),
        interceptors: self.interceptors?.makeSpotOrdersByHashesInterceptors() ?? [],
        userFunction: self.spotOrdersByHashes(request:context:)
      )

    case "SubaccountOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>(),
        interceptors: self.interceptors?.makeSubaccountOrdersInterceptors() ?? [],
        userFunction: self.subaccountOrders(request:context:)
      )

    case "TraderSpotTransientOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderSpotTransientOrdersInterceptors() ?? [],
        userFunction: self.traderSpotTransientOrders(request:context:)
      )

    case "SpotMidPriceAndTOB":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>(),
        interceptors: self.interceptors?.makeSpotMidPriceAndTOBInterceptors() ?? [],
        userFunction: self.spotMidPriceAndTOB(request:context:)
      )

    case "DerivativeMidPriceAndTOB":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>(),
        interceptors: self.interceptors?.makeDerivativeMidPriceAndTOBInterceptors() ?? [],
        userFunction: self.derivativeMidPriceAndTOB(request:context:)
      )

    case "DerivativeOrderbook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>(),
        interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? [],
        userFunction: self.derivativeOrderbook(request:context:)
      )

    case "TraderDerivativeOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? [],
        userFunction: self.traderDerivativeOrders(request:context:)
      )

    case "AccountAddressDerivativeOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeAccountAddressDerivativeOrdersInterceptors() ?? [],
        userFunction: self.accountAddressDerivativeOrders(request:context:)
      )

    case "DerivativeOrdersByHashes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>(),
        interceptors: self.interceptors?.makeDerivativeOrdersByHashesInterceptors() ?? [],
        userFunction: self.derivativeOrdersByHashes(request:context:)
      )

    case "TraderDerivativeTransientOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeTransientOrdersInterceptors() ?? [],
        userFunction: self.traderDerivativeTransientOrders(request:context:)
      )

    case "DerivativeMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? [],
        userFunction: self.derivativeMarkets(request:context:)
      )

    case "DerivativeMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? [],
        userFunction: self.derivativeMarket(request:context:)
      )

    case "DerivativeMarketAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketAddressInterceptors() ?? [],
        userFunction: self.derivativeMarketAddress(request:context:)
      )

    case "SubaccountTradeNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>(),
        interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? [],
        userFunction: self.subaccountTradeNonce(request:context:)
      )

    case "ExchangeModuleState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? [],
        userFunction: self.exchangeModuleState(request:context:)
      )

    case "Positions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPositionsResponse>(),
        interceptors: self.interceptors?.makePositionsInterceptors() ?? [],
        userFunction: self.positions(request:context:)
      )

    case "SubaccountPositions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>(),
        interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? [],
        userFunction: self.subaccountPositions(request:context:)
      )

    case "SubaccountPositionInMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>(),
        interceptors: self.interceptors?.makeSubaccountPositionInMarketInterceptors() ?? [],
        userFunction: self.subaccountPositionInMarket(request:context:)
      )

    case "SubaccountEffectivePositionInMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>(),
        interceptors: self.interceptors?.makeSubaccountEffectivePositionInMarketInterceptors() ?? [],
        userFunction: self.subaccountEffectivePositionInMarket(request:context:)
      )

    case "PerpetualMarketInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>(),
        interceptors: self.interceptors?.makePerpetualMarketInfoInterceptors() ?? [],
        userFunction: self.perpetualMarketInfo(request:context:)
      )

    case "ExpiryFuturesMarketInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>(),
        interceptors: self.interceptors?.makeExpiryFuturesMarketInfoInterceptors() ?? [],
        userFunction: self.expiryFuturesMarketInfo(request:context:)
      )

    case "PerpetualMarketFunding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>(),
        interceptors: self.interceptors?.makePerpetualMarketFundingInterceptors() ?? [],
        userFunction: self.perpetualMarketFunding(request:context:)
      )

    case "SubaccountOrderMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>(),
        interceptors: self.interceptors?.makeSubaccountOrderMetadataInterceptors() ?? [],
        userFunction: self.subaccountOrderMetadata(request:context:)
      )

    case "TradeRewardPoints":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>(),
        interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? [],
        userFunction: self.tradeRewardPoints(request:context:)
      )

    case "PendingTradeRewardPoints":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>(),
        interceptors: self.interceptors?.makePendingTradeRewardPointsInterceptors() ?? [],
        userFunction: self.pendingTradeRewardPoints(request:context:)
      )

    case "TradeRewardCampaign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>(),
        interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? [],
        userFunction: self.tradeRewardCampaign(request:context:)
      )

    case "FeeDiscountAccountInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? [],
        userFunction: self.feeDiscountAccountInfo(request:context:)
      )

    case "FeeDiscountSchedule":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? [],
        userFunction: self.feeDiscountSchedule(request:context:)
      )

    case "BalanceMismatches":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>(),
        interceptors: self.interceptors?.makeBalanceMismatchesInterceptors() ?? [],
        userFunction: self.balanceMismatches(request:context:)
      )

    case "BalanceWithBalanceHolds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>(),
        interceptors: self.interceptors?.makeBalanceWithBalanceHoldsInterceptors() ?? [],
        userFunction: self.balanceWithBalanceHolds(request:context:)
      )

    case "FeeDiscountTierStatistics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountTierStatisticsInterceptors() ?? [],
        userFunction: self.feeDiscountTierStatistics(request:context:)
      )

    case "MitoVaultInfos":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_MitoVaultInfosRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_MitoVaultInfosResponse>(),
        interceptors: self.interceptors?.makeMitoVaultInfosInterceptors() ?? [],
        userFunction: self.mitoVaultInfos(request:context:)
      )

    case "QueryMarketIDFromVault":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>(),
        interceptors: self.interceptors?.makeQueryMarketIDFromVaultInterceptors() ?? [],
        userFunction: self.queryMarketIDFromVault(request:context:)
      )

    case "HistoricalTradeRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>(),
        interceptors: self.interceptors?.makeHistoricalTradeRecordsInterceptors() ?? [],
        userFunction: self.historicalTradeRecords(request:context:)
      )

    case "IsOptedOutOfRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>(),
        interceptors: self.interceptors?.makeIsOptedOutOfRewardsInterceptors() ?? [],
        userFunction: self.isOptedOutOfRewards(request:context:)
      )

    case "OptedOutOfRewardsAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>(),
        interceptors: self.interceptors?.makeOptedOutOfRewardsAccountsInterceptors() ?? [],
        userFunction: self.optedOutOfRewardsAccounts(request:context:)
      )

    case "MarketVolatility":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>(),
        interceptors: self.interceptors?.makeMarketVolatilityInterceptors() ?? [],
        userFunction: self.marketVolatility(request:context:)
      )

    case "BinaryOptionsMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>(),
        interceptors: self.interceptors?.makeBinaryOptionsMarketsInterceptors() ?? [],
        userFunction: self.binaryOptionsMarkets(request:context:)
      )

    case "TraderDerivativeConditionalOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeConditionalOrdersInterceptors() ?? [],
        userFunction: self.traderDerivativeConditionalOrders(request:context:)
      )

    case "MarketAtomicExecutionFeeMultiplier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>(),
        interceptors: self.interceptors?.makeMarketAtomicExecutionFeeMultiplierInterceptors() ?? [],
        userFunction: self.marketAtomicExecutionFeeMultiplier(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Exchange_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Exchange_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Retrieves exchange params
  @Sendable func queryExchangeParams(
    request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryExchangeParamsResponse

  /// Retrieves a Subaccount's Deposits
  @Sendable func subaccountDeposits(
    request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse

  /// Retrieves a Subaccount's Deposits
  @Sendable func subaccountDeposit(
    request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountDepositResponse

  /// Retrieves all of the balances of all users on the exchange.
  @Sendable func exchangeBalances(
    request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryExchangeBalancesResponse

  /// Retrieves the aggregate volumes for the specified account or subaccount
  @Sendable func aggregateVolume(
    request: Injective_Exchange_V1beta1_QueryAggregateVolumeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateVolumeResponse

  /// Retrieves the aggregate volumes for specified accounts
  @Sendable func aggregateVolumes(
    request: Injective_Exchange_V1beta1_QueryAggregateVolumesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateVolumesResponse

  /// Retrieves the aggregate volume for the specified market
  @Sendable func aggregateMarketVolume(
    request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse

  /// Retrieves the aggregate market volumes for specified markets
  @Sendable func aggregateMarketVolumes(
    request: Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse

  /// Retrieves the denom decimals for a denom.
  @Sendable func denomDecimal(
    request: Injective_Exchange_V1beta1_QueryDenomDecimalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDenomDecimalResponse

  /// Retrieves the denom decimals for multiple denoms. Returns all denom
  /// decimals if unspecified.
  @Sendable func denomDecimals(
    request: Injective_Exchange_V1beta1_QueryDenomDecimalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDenomDecimalsResponse

  /// Retrieves a list of spot markets.
  @Sendable func spotMarkets(
    request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotMarketsResponse

  /// Retrieves a spot market by ticker
  @Sendable func spotMarket(
    request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotMarketResponse

  /// Retrieves a list of spot markets with extra information.
  @Sendable func fullSpotMarkets(
    request: Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse

  /// Retrieves a spot market with extra information.
  @Sendable func fullSpotMarket(
    request: Injective_Exchange_V1beta1_QueryFullSpotMarketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryFullSpotMarketResponse

  /// Retrieves a spot market's orderbook by marketID
  @Sendable func spotOrderbook(
    request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotOrderbookResponse

  /// Retrieves a trader's spot orders
  @Sendable func traderSpotOrders(
    request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse

  /// Retrieves all account address spot orders
  @Sendable func accountAddressSpotOrders(
    request: Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse

  /// Retrieves spot orders corresponding to specified order hashes for a given
  /// subaccountID and marketID
  @Sendable func spotOrdersByHashes(
    request: Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse

  /// Retrieves subaccount's orders
  @Sendable func subaccountOrders(
    request: Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse

  /// Retrieves a trader's transient spot orders
  @Sendable func traderSpotTransientOrders(
    request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse

  /// Retrieves a spot market's mid-price
  @Sendable func spotMidPriceAndTOB(
    request: Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse

  /// Retrieves a derivative market's mid-price
  @Sendable func derivativeMidPriceAndTOB(
    request: Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse

  /// Retrieves a derivative market's orderbook by marketID
  @Sendable func derivativeOrderbook(
    request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse

  /// Retrieves a trader's derivative orders
  @Sendable func traderDerivativeOrders(
    request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse

  /// Retrieves all account address derivative orders
  @Sendable func accountAddressDerivativeOrders(
    request: Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse

  /// Retrieves a trader's derivative orders
  @Sendable func derivativeOrdersByHashes(
    request: Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse

  /// Retrieves a trader's transient derivative orders
  @Sendable func traderDerivativeTransientOrders(
    request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse

  /// Retrieves a list of derivative markets.
  @Sendable func derivativeMarkets(
    request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse

  /// Retrieves a derivative market by ticker
  @Sendable func derivativeMarket(
    request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMarketResponse

  /// Retrieves a derivative market's corresponding address for fees that
  /// contribute to the market's insurance fund
  @Sendable func derivativeMarketAddress(
    request: Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse

  /// Retrieves a subaccount's trade nonce
  @Sendable func subaccountTradeNonce(
    request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse

  /// Retrieves the entire exchange module's state
  @Sendable func exchangeModuleState(
    request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryModuleStateResponse

  /// Retrieves the entire exchange module's positions
  @Sendable func positions(
    request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryPositionsResponse

  /// Retrieves subaccount's positions
  @Sendable func subaccountPositions(
    request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse

  /// Retrieves subaccount's position in market
  @Sendable func subaccountPositionInMarket(
    request: Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse

  /// Retrieves subaccount's position in market
  @Sendable func subaccountEffectivePositionInMarket(
    request: Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse

  /// Retrieves perpetual market info
  @Sendable func perpetualMarketInfo(
    request: Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse

  /// Retrieves expiry market info
  @Sendable func expiryFuturesMarketInfo(
    request: Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse

  /// Retrieves perpetual market funding
  @Sendable func perpetualMarketFunding(
    request: Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse

  /// Retrieves subaccount's order metadata
  @Sendable func subaccountOrderMetadata(
    request: Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse

  /// Retrieves the account and total trade rewards points
  @Sendable func tradeRewardPoints(
    request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse

  /// Retrieves the pending account and total trade rewards points
  @Sendable func pendingTradeRewardPoints(
    request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse

  /// Retrieves the trade reward campaign
  @Sendable func tradeRewardCampaign(
    request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse

  /// Retrieves the account's fee discount info
  @Sendable func feeDiscountAccountInfo(
    request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse

  /// Retrieves the fee discount schedule
  @Sendable func feeDiscountSchedule(
    request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse

  /// Retrieves mismatches between available vs. total balance
  @Sendable func balanceMismatches(
    request: Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse

  /// Retrieves available and total balances with balance holds
  @Sendable func balanceWithBalanceHolds(
    request: Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse

  /// Retrieves fee discount tier stats
  @Sendable func feeDiscountTierStatistics(
    request: Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse

  /// Retrieves market making pool info
  @Sendable func mitoVaultInfos(
    request: Injective_Exchange_V1beta1_MitoVaultInfosRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_MitoVaultInfosResponse

  /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
  @Sendable func queryMarketIDFromVault(
    request: Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse

  /// Retrieves historical trade records for a given market ID
  @Sendable func historicalTradeRecords(
    request: Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse

  /// Retrieves if the account is opted out of rewards
  @Sendable func isOptedOutOfRewards(
    request: Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse

  /// Retrieves all accounts opted out of rewards
  @Sendable func optedOutOfRewardsAccounts(
    request: Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse

  /// MarketVolatility computes the volatility for spot and derivative markets
  /// trading history.
  @Sendable func marketVolatility(
    request: Injective_Exchange_V1beta1_QueryMarketVolatilityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryMarketVolatilityResponse

  /// Retrieves a spot market's orderbook by marketID
  @Sendable func binaryOptionsMarkets(
    request: Injective_Exchange_V1beta1_QueryBinaryMarketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryBinaryMarketsResponse

  /// Retrieves a trader's derivative conditional orders
  @Sendable func traderDerivativeConditionalOrders(
    request: Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse

  @Sendable func marketAtomicExecutionFeeMultiplier(
    request: Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Exchange_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Exchange_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Exchange_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Exchange_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryExchangeParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExchangeParamsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExchangeParamsResponse>(),
        interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? [],
        wrapping: self.queryExchangeParams(request:context:)
      )

    case "SubaccountDeposits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>(),
        interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? [],
        wrapping: self.subaccountDeposits(request:context:)
      )

    case "SubaccountDeposit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>(),
        interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? [],
        wrapping: self.subaccountDeposit(request:context:)
      )

    case "ExchangeBalances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>(),
        interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? [],
        wrapping: self.exchangeBalances(request:context:)
      )

    case "AggregateVolume":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>(),
        interceptors: self.interceptors?.makeAggregateVolumeInterceptors() ?? [],
        wrapping: self.aggregateVolume(request:context:)
      )

    case "AggregateVolumes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>(),
        interceptors: self.interceptors?.makeAggregateVolumesInterceptors() ?? [],
        wrapping: self.aggregateVolumes(request:context:)
      )

    case "AggregateMarketVolume":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>(),
        interceptors: self.interceptors?.makeAggregateMarketVolumeInterceptors() ?? [],
        wrapping: self.aggregateMarketVolume(request:context:)
      )

    case "AggregateMarketVolumes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>(),
        interceptors: self.interceptors?.makeAggregateMarketVolumesInterceptors() ?? [],
        wrapping: self.aggregateMarketVolumes(request:context:)
      )

    case "DenomDecimal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDenomDecimalRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDenomDecimalResponse>(),
        interceptors: self.interceptors?.makeDenomDecimalInterceptors() ?? [],
        wrapping: self.denomDecimal(request:context:)
      )

    case "DenomDecimals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>(),
        interceptors: self.interceptors?.makeDenomDecimalsInterceptors() ?? [],
        wrapping: self.denomDecimals(request:context:)
      )

    case "SpotMarkets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMarketsResponse>(),
        interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? [],
        wrapping: self.spotMarkets(request:context:)
      )

    case "SpotMarket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMarketResponse>(),
        interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? [],
        wrapping: self.spotMarket(request:context:)
      )

    case "FullSpotMarkets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>(),
        interceptors: self.interceptors?.makeFullSpotMarketsInterceptors() ?? [],
        wrapping: self.fullSpotMarkets(request:context:)
      )

    case "FullSpotMarket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>(),
        interceptors: self.interceptors?.makeFullSpotMarketInterceptors() ?? [],
        wrapping: self.fullSpotMarket(request:context:)
      )

    case "SpotOrderbook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>(),
        interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? [],
        wrapping: self.spotOrderbook(request:context:)
      )

    case "TraderSpotOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? [],
        wrapping: self.traderSpotOrders(request:context:)
      )

    case "AccountAddressSpotOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeAccountAddressSpotOrdersInterceptors() ?? [],
        wrapping: self.accountAddressSpotOrders(request:context:)
      )

    case "SpotOrdersByHashes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>(),
        interceptors: self.interceptors?.makeSpotOrdersByHashesInterceptors() ?? [],
        wrapping: self.spotOrdersByHashes(request:context:)
      )

    case "SubaccountOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>(),
        interceptors: self.interceptors?.makeSubaccountOrdersInterceptors() ?? [],
        wrapping: self.subaccountOrders(request:context:)
      )

    case "TraderSpotTransientOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderSpotTransientOrdersInterceptors() ?? [],
        wrapping: self.traderSpotTransientOrders(request:context:)
      )

    case "SpotMidPriceAndTOB":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>(),
        interceptors: self.interceptors?.makeSpotMidPriceAndTOBInterceptors() ?? [],
        wrapping: self.spotMidPriceAndTOB(request:context:)
      )

    case "DerivativeMidPriceAndTOB":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>(),
        interceptors: self.interceptors?.makeDerivativeMidPriceAndTOBInterceptors() ?? [],
        wrapping: self.derivativeMidPriceAndTOB(request:context:)
      )

    case "DerivativeOrderbook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>(),
        interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? [],
        wrapping: self.derivativeOrderbook(request:context:)
      )

    case "TraderDerivativeOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? [],
        wrapping: self.traderDerivativeOrders(request:context:)
      )

    case "AccountAddressDerivativeOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeAccountAddressDerivativeOrdersInterceptors() ?? [],
        wrapping: self.accountAddressDerivativeOrders(request:context:)
      )

    case "DerivativeOrdersByHashes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>(),
        interceptors: self.interceptors?.makeDerivativeOrdersByHashesInterceptors() ?? [],
        wrapping: self.derivativeOrdersByHashes(request:context:)
      )

    case "TraderDerivativeTransientOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeTransientOrdersInterceptors() ?? [],
        wrapping: self.traderDerivativeTransientOrders(request:context:)
      )

    case "DerivativeMarkets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? [],
        wrapping: self.derivativeMarkets(request:context:)
      )

    case "DerivativeMarket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? [],
        wrapping: self.derivativeMarket(request:context:)
      )

    case "DerivativeMarketAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketAddressInterceptors() ?? [],
        wrapping: self.derivativeMarketAddress(request:context:)
      )

    case "SubaccountTradeNonce":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>(),
        interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? [],
        wrapping: self.subaccountTradeNonce(request:context:)
      )

    case "ExchangeModuleState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? [],
        wrapping: self.exchangeModuleState(request:context:)
      )

    case "Positions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPositionsResponse>(),
        interceptors: self.interceptors?.makePositionsInterceptors() ?? [],
        wrapping: self.positions(request:context:)
      )

    case "SubaccountPositions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>(),
        interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? [],
        wrapping: self.subaccountPositions(request:context:)
      )

    case "SubaccountPositionInMarket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>(),
        interceptors: self.interceptors?.makeSubaccountPositionInMarketInterceptors() ?? [],
        wrapping: self.subaccountPositionInMarket(request:context:)
      )

    case "SubaccountEffectivePositionInMarket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>(),
        interceptors: self.interceptors?.makeSubaccountEffectivePositionInMarketInterceptors() ?? [],
        wrapping: self.subaccountEffectivePositionInMarket(request:context:)
      )

    case "PerpetualMarketInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>(),
        interceptors: self.interceptors?.makePerpetualMarketInfoInterceptors() ?? [],
        wrapping: self.perpetualMarketInfo(request:context:)
      )

    case "ExpiryFuturesMarketInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>(),
        interceptors: self.interceptors?.makeExpiryFuturesMarketInfoInterceptors() ?? [],
        wrapping: self.expiryFuturesMarketInfo(request:context:)
      )

    case "PerpetualMarketFunding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>(),
        interceptors: self.interceptors?.makePerpetualMarketFundingInterceptors() ?? [],
        wrapping: self.perpetualMarketFunding(request:context:)
      )

    case "SubaccountOrderMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>(),
        interceptors: self.interceptors?.makeSubaccountOrderMetadataInterceptors() ?? [],
        wrapping: self.subaccountOrderMetadata(request:context:)
      )

    case "TradeRewardPoints":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>(),
        interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? [],
        wrapping: self.tradeRewardPoints(request:context:)
      )

    case "PendingTradeRewardPoints":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>(),
        interceptors: self.interceptors?.makePendingTradeRewardPointsInterceptors() ?? [],
        wrapping: self.pendingTradeRewardPoints(request:context:)
      )

    case "TradeRewardCampaign":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>(),
        interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? [],
        wrapping: self.tradeRewardCampaign(request:context:)
      )

    case "FeeDiscountAccountInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? [],
        wrapping: self.feeDiscountAccountInfo(request:context:)
      )

    case "FeeDiscountSchedule":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? [],
        wrapping: self.feeDiscountSchedule(request:context:)
      )

    case "BalanceMismatches":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>(),
        interceptors: self.interceptors?.makeBalanceMismatchesInterceptors() ?? [],
        wrapping: self.balanceMismatches(request:context:)
      )

    case "BalanceWithBalanceHolds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>(),
        interceptors: self.interceptors?.makeBalanceWithBalanceHoldsInterceptors() ?? [],
        wrapping: self.balanceWithBalanceHolds(request:context:)
      )

    case "FeeDiscountTierStatistics":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountTierStatisticsInterceptors() ?? [],
        wrapping: self.feeDiscountTierStatistics(request:context:)
      )

    case "MitoVaultInfos":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_MitoVaultInfosRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_MitoVaultInfosResponse>(),
        interceptors: self.interceptors?.makeMitoVaultInfosInterceptors() ?? [],
        wrapping: self.mitoVaultInfos(request:context:)
      )

    case "QueryMarketIDFromVault":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>(),
        interceptors: self.interceptors?.makeQueryMarketIDFromVaultInterceptors() ?? [],
        wrapping: self.queryMarketIDFromVault(request:context:)
      )

    case "HistoricalTradeRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>(),
        interceptors: self.interceptors?.makeHistoricalTradeRecordsInterceptors() ?? [],
        wrapping: self.historicalTradeRecords(request:context:)
      )

    case "IsOptedOutOfRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>(),
        interceptors: self.interceptors?.makeIsOptedOutOfRewardsInterceptors() ?? [],
        wrapping: self.isOptedOutOfRewards(request:context:)
      )

    case "OptedOutOfRewardsAccounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>(),
        interceptors: self.interceptors?.makeOptedOutOfRewardsAccountsInterceptors() ?? [],
        wrapping: self.optedOutOfRewardsAccounts(request:context:)
      )

    case "MarketVolatility":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>(),
        interceptors: self.interceptors?.makeMarketVolatilityInterceptors() ?? [],
        wrapping: self.marketVolatility(request:context:)
      )

    case "BinaryOptionsMarkets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>(),
        interceptors: self.interceptors?.makeBinaryOptionsMarketsInterceptors() ?? [],
        wrapping: self.binaryOptionsMarkets(request:context:)
      )

    case "TraderDerivativeConditionalOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeConditionalOrdersInterceptors() ?? [],
        wrapping: self.traderDerivativeConditionalOrders(request:context:)
      )

    case "MarketAtomicExecutionFeeMultiplier":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>(),
        interceptors: self.interceptors?.makeMarketAtomicExecutionFeeMultiplierInterceptors() ?? [],
        wrapping: self.marketAtomicExecutionFeeMultiplier(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Exchange_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryExchangeParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExchangeParamsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountDeposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountDepositsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountDepositInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeBalancesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateVolume'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateVolumeInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryAggregateVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateVolumeResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateVolumes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateVolumesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryAggregateVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateVolumesResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateMarketVolume'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateMarketVolumeInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryAggregateMarketVolumeRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumeResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateMarketVolumes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateMarketVolumesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryAggregateMarketVolumesRequest, Injective_Exchange_V1beta1_QueryAggregateMarketVolumesResponse>]

  /// - Returns: Interceptors to use when handling 'denomDecimal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomDecimalInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDenomDecimalRequest, Injective_Exchange_V1beta1_QueryDenomDecimalResponse>]

  /// - Returns: Interceptors to use when handling 'denomDecimals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomDecimalsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDenomDecimalsRequest, Injective_Exchange_V1beta1_QueryDenomDecimalsResponse>]

  /// - Returns: Interceptors to use when handling 'spotMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotMarketsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'spotMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>]

  /// - Returns: Interceptors to use when handling 'fullSpotMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFullSpotMarketsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFullSpotMarketsRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'fullSpotMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFullSpotMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFullSpotMarketRequest, Injective_Exchange_V1beta1_QueryFullSpotMarketResponse>]

  /// - Returns: Interceptors to use when handling 'spotOrderbook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotOrderbookInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>]

  /// - Returns: Interceptors to use when handling 'traderSpotOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderSpotOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'accountAddressSpotOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountAddressSpotOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressSpotOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'spotOrdersByHashes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotOrdersByHashesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotOrdersByHashesRequest, Injective_Exchange_V1beta1_QuerySpotOrdersByHashesResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountOrdersRequest, Injective_Exchange_V1beta1_QuerySubaccountOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'traderSpotTransientOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderSpotTransientOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'spotMidPriceAndTOB'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotMidPriceAndTOBInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QuerySpotMidPriceAndTOBResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeMidPriceAndTOB'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeMidPriceAndTOBInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBRequest, Injective_Exchange_V1beta1_QueryDerivativeMidPriceAndTOBResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeOrderbook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeOrderbookInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>]

  /// - Returns: Interceptors to use when handling 'traderDerivativeOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderDerivativeOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'accountAddressDerivativeOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountAddressDerivativeOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryAccountAddressDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeOrdersByHashes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeOrdersByHashesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesRequest, Injective_Exchange_V1beta1_QueryDerivativeOrdersByHashesResponse>]

  /// - Returns: Interceptors to use when handling 'traderDerivativeTransientOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderDerivativeTransientOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeMarketsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeMarketAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeMarketAddressInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketAddressRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketAddressResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountTradeNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountTradeNonceInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeModuleState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeModuleStateInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>]

  /// - Returns: Interceptors to use when handling 'positions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePositionsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountPositions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountPositionsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountPositionInMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountPositionInMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionInMarketResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountEffectivePositionInMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountEffectivePositionInMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketRequest, Injective_Exchange_V1beta1_QuerySubaccountEffectivePositionInMarketResponse>]

  /// - Returns: Interceptors to use when handling 'perpetualMarketInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePerpetualMarketInfoInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryPerpetualMarketInfoRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketInfoResponse>]

  /// - Returns: Interceptors to use when handling 'expiryFuturesMarketInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExpiryFuturesMarketInfoInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoRequest, Injective_Exchange_V1beta1_QueryExpiryFuturesMarketInfoResponse>]

  /// - Returns: Interceptors to use when handling 'perpetualMarketFunding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePerpetualMarketFundingInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryPerpetualMarketFundingRequest, Injective_Exchange_V1beta1_QueryPerpetualMarketFundingResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountOrderMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountOrderMetadataInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataRequest, Injective_Exchange_V1beta1_QuerySubaccountOrderMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'tradeRewardPoints'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTradeRewardPointsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>]

  /// - Returns: Interceptors to use when handling 'pendingTradeRewardPoints'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePendingTradeRewardPointsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>]

  /// - Returns: Interceptors to use when handling 'tradeRewardCampaign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTradeRewardCampaignInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>]

  /// - Returns: Interceptors to use when handling 'feeDiscountAccountInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeDiscountAccountInfoInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>]

  /// - Returns: Interceptors to use when handling 'feeDiscountSchedule'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeDiscountScheduleInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>]

  /// - Returns: Interceptors to use when handling 'balanceMismatches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceMismatchesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryBalanceMismatchesRequest, Injective_Exchange_V1beta1_QueryBalanceMismatchesResponse>]

  /// - Returns: Interceptors to use when handling 'balanceWithBalanceHolds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceWithBalanceHoldsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsRequest, Injective_Exchange_V1beta1_QueryBalanceWithBalanceHoldsResponse>]

  /// - Returns: Interceptors to use when handling 'feeDiscountTierStatistics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeDiscountTierStatisticsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsRequest, Injective_Exchange_V1beta1_QueryFeeDiscountTierStatisticsResponse>]

  /// - Returns: Interceptors to use when handling 'mitoVaultInfos'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMitoVaultInfosInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_MitoVaultInfosRequest, Injective_Exchange_V1beta1_MitoVaultInfosResponse>]

  /// - Returns: Interceptors to use when handling 'queryMarketIDFromVault'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryMarketIDFromVaultInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryMarketIDFromVaultRequest, Injective_Exchange_V1beta1_QueryMarketIDFromVaultResponse>]

  /// - Returns: Interceptors to use when handling 'historicalTradeRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHistoricalTradeRecordsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsRequest, Injective_Exchange_V1beta1_QueryHistoricalTradeRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'isOptedOutOfRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsOptedOutOfRewardsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsRequest, Injective_Exchange_V1beta1_QueryIsOptedOutOfRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'optedOutOfRewardsAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOptedOutOfRewardsAccountsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsRequest, Injective_Exchange_V1beta1_QueryOptedOutOfRewardsAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'marketVolatility'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketVolatilityInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryMarketVolatilityRequest, Injective_Exchange_V1beta1_QueryMarketVolatilityResponse>]

  /// - Returns: Interceptors to use when handling 'binaryOptionsMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBinaryOptionsMarketsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryBinaryMarketsRequest, Injective_Exchange_V1beta1_QueryBinaryMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'traderDerivativeConditionalOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderDerivativeConditionalOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeConditionalOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'marketAtomicExecutionFeeMultiplier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketAtomicExecutionFeeMultiplierInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest, Injective_Exchange_V1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse>]
}

internal enum Injective_Exchange_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "injective.exchange.v1beta1.Query",
    methods: [
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.queryExchangeParams,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountDeposits,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountDeposit,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.exchangeBalances,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.aggregateVolume,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.aggregateVolumes,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.aggregateMarketVolume,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.aggregateMarketVolumes,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.denomDecimal,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.denomDecimals,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.spotMarkets,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.spotMarket,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.fullSpotMarkets,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.fullSpotMarket,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.spotOrderbook,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.traderSpotOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.accountAddressSpotOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.spotOrdersByHashes,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.traderSpotTransientOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.spotMidPriceAndTOB,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.derivativeMidPriceAndTOB,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.derivativeOrderbook,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.traderDerivativeOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.accountAddressDerivativeOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.derivativeOrdersByHashes,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.traderDerivativeTransientOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.derivativeMarkets,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.derivativeMarket,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.derivativeMarketAddress,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountTradeNonce,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.exchangeModuleState,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.positions,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountPositions,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountPositionInMarket,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountEffectivePositionInMarket,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.perpetualMarketInfo,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.expiryFuturesMarketInfo,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.perpetualMarketFunding,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.subaccountOrderMetadata,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.tradeRewardPoints,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.pendingTradeRewardPoints,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.tradeRewardCampaign,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.feeDiscountAccountInfo,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.feeDiscountSchedule,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.balanceMismatches,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.balanceWithBalanceHolds,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.feeDiscountTierStatistics,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.mitoVaultInfos,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.queryMarketIDFromVault,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.historicalTradeRecords,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.isOptedOutOfRewards,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.optedOutOfRewardsAccounts,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.marketVolatility,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.binaryOptionsMarkets,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.traderDerivativeConditionalOrders,
      Injective_Exchange_V1beta1_QueryServerMetadata.Methods.marketAtomicExecutionFeeMultiplier,
    ]
  )

  internal enum Methods {
    internal static let queryExchangeParams = GRPCMethodDescriptor(
      name: "QueryExchangeParams",
      path: "/injective.exchange.v1beta1.Query/QueryExchangeParams",
      type: GRPCCallType.unary
    )

    internal static let subaccountDeposits = GRPCMethodDescriptor(
      name: "SubaccountDeposits",
      path: "/injective.exchange.v1beta1.Query/SubaccountDeposits",
      type: GRPCCallType.unary
    )

    internal static let subaccountDeposit = GRPCMethodDescriptor(
      name: "SubaccountDeposit",
      path: "/injective.exchange.v1beta1.Query/SubaccountDeposit",
      type: GRPCCallType.unary
    )

    internal static let exchangeBalances = GRPCMethodDescriptor(
      name: "ExchangeBalances",
      path: "/injective.exchange.v1beta1.Query/ExchangeBalances",
      type: GRPCCallType.unary
    )

    internal static let aggregateVolume = GRPCMethodDescriptor(
      name: "AggregateVolume",
      path: "/injective.exchange.v1beta1.Query/AggregateVolume",
      type: GRPCCallType.unary
    )

    internal static let aggregateVolumes = GRPCMethodDescriptor(
      name: "AggregateVolumes",
      path: "/injective.exchange.v1beta1.Query/AggregateVolumes",
      type: GRPCCallType.unary
    )

    internal static let aggregateMarketVolume = GRPCMethodDescriptor(
      name: "AggregateMarketVolume",
      path: "/injective.exchange.v1beta1.Query/AggregateMarketVolume",
      type: GRPCCallType.unary
    )

    internal static let aggregateMarketVolumes = GRPCMethodDescriptor(
      name: "AggregateMarketVolumes",
      path: "/injective.exchange.v1beta1.Query/AggregateMarketVolumes",
      type: GRPCCallType.unary
    )

    internal static let denomDecimal = GRPCMethodDescriptor(
      name: "DenomDecimal",
      path: "/injective.exchange.v1beta1.Query/DenomDecimal",
      type: GRPCCallType.unary
    )

    internal static let denomDecimals = GRPCMethodDescriptor(
      name: "DenomDecimals",
      path: "/injective.exchange.v1beta1.Query/DenomDecimals",
      type: GRPCCallType.unary
    )

    internal static let spotMarkets = GRPCMethodDescriptor(
      name: "SpotMarkets",
      path: "/injective.exchange.v1beta1.Query/SpotMarkets",
      type: GRPCCallType.unary
    )

    internal static let spotMarket = GRPCMethodDescriptor(
      name: "SpotMarket",
      path: "/injective.exchange.v1beta1.Query/SpotMarket",
      type: GRPCCallType.unary
    )

    internal static let fullSpotMarkets = GRPCMethodDescriptor(
      name: "FullSpotMarkets",
      path: "/injective.exchange.v1beta1.Query/FullSpotMarkets",
      type: GRPCCallType.unary
    )

    internal static let fullSpotMarket = GRPCMethodDescriptor(
      name: "FullSpotMarket",
      path: "/injective.exchange.v1beta1.Query/FullSpotMarket",
      type: GRPCCallType.unary
    )

    internal static let spotOrderbook = GRPCMethodDescriptor(
      name: "SpotOrderbook",
      path: "/injective.exchange.v1beta1.Query/SpotOrderbook",
      type: GRPCCallType.unary
    )

    internal static let traderSpotOrders = GRPCMethodDescriptor(
      name: "TraderSpotOrders",
      path: "/injective.exchange.v1beta1.Query/TraderSpotOrders",
      type: GRPCCallType.unary
    )

    internal static let accountAddressSpotOrders = GRPCMethodDescriptor(
      name: "AccountAddressSpotOrders",
      path: "/injective.exchange.v1beta1.Query/AccountAddressSpotOrders",
      type: GRPCCallType.unary
    )

    internal static let spotOrdersByHashes = GRPCMethodDescriptor(
      name: "SpotOrdersByHashes",
      path: "/injective.exchange.v1beta1.Query/SpotOrdersByHashes",
      type: GRPCCallType.unary
    )

    internal static let subaccountOrders = GRPCMethodDescriptor(
      name: "SubaccountOrders",
      path: "/injective.exchange.v1beta1.Query/SubaccountOrders",
      type: GRPCCallType.unary
    )

    internal static let traderSpotTransientOrders = GRPCMethodDescriptor(
      name: "TraderSpotTransientOrders",
      path: "/injective.exchange.v1beta1.Query/TraderSpotTransientOrders",
      type: GRPCCallType.unary
    )

    internal static let spotMidPriceAndTOB = GRPCMethodDescriptor(
      name: "SpotMidPriceAndTOB",
      path: "/injective.exchange.v1beta1.Query/SpotMidPriceAndTOB",
      type: GRPCCallType.unary
    )

    internal static let derivativeMidPriceAndTOB = GRPCMethodDescriptor(
      name: "DerivativeMidPriceAndTOB",
      path: "/injective.exchange.v1beta1.Query/DerivativeMidPriceAndTOB",
      type: GRPCCallType.unary
    )

    internal static let derivativeOrderbook = GRPCMethodDescriptor(
      name: "DerivativeOrderbook",
      path: "/injective.exchange.v1beta1.Query/DerivativeOrderbook",
      type: GRPCCallType.unary
    )

    internal static let traderDerivativeOrders = GRPCMethodDescriptor(
      name: "TraderDerivativeOrders",
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeOrders",
      type: GRPCCallType.unary
    )

    internal static let accountAddressDerivativeOrders = GRPCMethodDescriptor(
      name: "AccountAddressDerivativeOrders",
      path: "/injective.exchange.v1beta1.Query/AccountAddressDerivativeOrders",
      type: GRPCCallType.unary
    )

    internal static let derivativeOrdersByHashes = GRPCMethodDescriptor(
      name: "DerivativeOrdersByHashes",
      path: "/injective.exchange.v1beta1.Query/DerivativeOrdersByHashes",
      type: GRPCCallType.unary
    )

    internal static let traderDerivativeTransientOrders = GRPCMethodDescriptor(
      name: "TraderDerivativeTransientOrders",
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders",
      type: GRPCCallType.unary
    )

    internal static let derivativeMarkets = GRPCMethodDescriptor(
      name: "DerivativeMarkets",
      path: "/injective.exchange.v1beta1.Query/DerivativeMarkets",
      type: GRPCCallType.unary
    )

    internal static let derivativeMarket = GRPCMethodDescriptor(
      name: "DerivativeMarket",
      path: "/injective.exchange.v1beta1.Query/DerivativeMarket",
      type: GRPCCallType.unary
    )

    internal static let derivativeMarketAddress = GRPCMethodDescriptor(
      name: "DerivativeMarketAddress",
      path: "/injective.exchange.v1beta1.Query/DerivativeMarketAddress",
      type: GRPCCallType.unary
    )

    internal static let subaccountTradeNonce = GRPCMethodDescriptor(
      name: "SubaccountTradeNonce",
      path: "/injective.exchange.v1beta1.Query/SubaccountTradeNonce",
      type: GRPCCallType.unary
    )

    internal static let exchangeModuleState = GRPCMethodDescriptor(
      name: "ExchangeModuleState",
      path: "/injective.exchange.v1beta1.Query/ExchangeModuleState",
      type: GRPCCallType.unary
    )

    internal static let positions = GRPCMethodDescriptor(
      name: "Positions",
      path: "/injective.exchange.v1beta1.Query/Positions",
      type: GRPCCallType.unary
    )

    internal static let subaccountPositions = GRPCMethodDescriptor(
      name: "SubaccountPositions",
      path: "/injective.exchange.v1beta1.Query/SubaccountPositions",
      type: GRPCCallType.unary
    )

    internal static let subaccountPositionInMarket = GRPCMethodDescriptor(
      name: "SubaccountPositionInMarket",
      path: "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket",
      type: GRPCCallType.unary
    )

    internal static let subaccountEffectivePositionInMarket = GRPCMethodDescriptor(
      name: "SubaccountEffectivePositionInMarket",
      path: "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket",
      type: GRPCCallType.unary
    )

    internal static let perpetualMarketInfo = GRPCMethodDescriptor(
      name: "PerpetualMarketInfo",
      path: "/injective.exchange.v1beta1.Query/PerpetualMarketInfo",
      type: GRPCCallType.unary
    )

    internal static let expiryFuturesMarketInfo = GRPCMethodDescriptor(
      name: "ExpiryFuturesMarketInfo",
      path: "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo",
      type: GRPCCallType.unary
    )

    internal static let perpetualMarketFunding = GRPCMethodDescriptor(
      name: "PerpetualMarketFunding",
      path: "/injective.exchange.v1beta1.Query/PerpetualMarketFunding",
      type: GRPCCallType.unary
    )

    internal static let subaccountOrderMetadata = GRPCMethodDescriptor(
      name: "SubaccountOrderMetadata",
      path: "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata",
      type: GRPCCallType.unary
    )

    internal static let tradeRewardPoints = GRPCMethodDescriptor(
      name: "TradeRewardPoints",
      path: "/injective.exchange.v1beta1.Query/TradeRewardPoints",
      type: GRPCCallType.unary
    )

    internal static let pendingTradeRewardPoints = GRPCMethodDescriptor(
      name: "PendingTradeRewardPoints",
      path: "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints",
      type: GRPCCallType.unary
    )

    internal static let tradeRewardCampaign = GRPCMethodDescriptor(
      name: "TradeRewardCampaign",
      path: "/injective.exchange.v1beta1.Query/TradeRewardCampaign",
      type: GRPCCallType.unary
    )

    internal static let feeDiscountAccountInfo = GRPCMethodDescriptor(
      name: "FeeDiscountAccountInfo",
      path: "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo",
      type: GRPCCallType.unary
    )

    internal static let feeDiscountSchedule = GRPCMethodDescriptor(
      name: "FeeDiscountSchedule",
      path: "/injective.exchange.v1beta1.Query/FeeDiscountSchedule",
      type: GRPCCallType.unary
    )

    internal static let balanceMismatches = GRPCMethodDescriptor(
      name: "BalanceMismatches",
      path: "/injective.exchange.v1beta1.Query/BalanceMismatches",
      type: GRPCCallType.unary
    )

    internal static let balanceWithBalanceHolds = GRPCMethodDescriptor(
      name: "BalanceWithBalanceHolds",
      path: "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds",
      type: GRPCCallType.unary
    )

    internal static let feeDiscountTierStatistics = GRPCMethodDescriptor(
      name: "FeeDiscountTierStatistics",
      path: "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics",
      type: GRPCCallType.unary
    )

    internal static let mitoVaultInfos = GRPCMethodDescriptor(
      name: "MitoVaultInfos",
      path: "/injective.exchange.v1beta1.Query/MitoVaultInfos",
      type: GRPCCallType.unary
    )

    internal static let queryMarketIDFromVault = GRPCMethodDescriptor(
      name: "QueryMarketIDFromVault",
      path: "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault",
      type: GRPCCallType.unary
    )

    internal static let historicalTradeRecords = GRPCMethodDescriptor(
      name: "HistoricalTradeRecords",
      path: "/injective.exchange.v1beta1.Query/HistoricalTradeRecords",
      type: GRPCCallType.unary
    )

    internal static let isOptedOutOfRewards = GRPCMethodDescriptor(
      name: "IsOptedOutOfRewards",
      path: "/injective.exchange.v1beta1.Query/IsOptedOutOfRewards",
      type: GRPCCallType.unary
    )

    internal static let optedOutOfRewardsAccounts = GRPCMethodDescriptor(
      name: "OptedOutOfRewardsAccounts",
      path: "/injective.exchange.v1beta1.Query/OptedOutOfRewardsAccounts",
      type: GRPCCallType.unary
    )

    internal static let marketVolatility = GRPCMethodDescriptor(
      name: "MarketVolatility",
      path: "/injective.exchange.v1beta1.Query/MarketVolatility",
      type: GRPCCallType.unary
    )

    internal static let binaryOptionsMarkets = GRPCMethodDescriptor(
      name: "BinaryOptionsMarkets",
      path: "/injective.exchange.v1beta1.Query/BinaryOptionsMarkets",
      type: GRPCCallType.unary
    )

    internal static let traderDerivativeConditionalOrders = GRPCMethodDescriptor(
      name: "TraderDerivativeConditionalOrders",
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeConditionalOrders",
      type: GRPCCallType.unary
    )

    internal static let marketAtomicExecutionFeeMultiplier = GRPCMethodDescriptor(
      name: "MarketAtomicExecutionFeeMultiplier",
      path: "/injective.exchange.v1beta1.Query/MarketAtomicExecutionFeeMultiplier",
      type: GRPCCallType.unary
    )
  }
}
