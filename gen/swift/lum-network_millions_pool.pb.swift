// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lum-network/millions/pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// PoolState the state of a Pool
/// Deposits are only accepted for Pools in a Ready state
/// 
/// TODO:
/// Pool states PAUSED and KILLED are not available in the current implementation
/// Introduce the capability to:
/// - Pause a Pool in case of Interchain issues or via Governance proposal
/// - Kill a Pool and withdraw or migrate all deposits to another Pool via Governance proposal
enum Lum_Network_Millions_PoolState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case created // = 1
  case ready // = 2
  case paused // = 3
  case killed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .created
    case 2: self = .ready
    case 3: self = .paused
    case 4: self = .killed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .created: return 1
    case .ready: return 2
    case .paused: return 3
    case .killed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Lum_Network_Millions_PoolState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Lum_Network_Millions_PoolState] = [
    .unspecified,
    .created,
    .ready,
    .paused,
    .killed,
  ]
}

#endif  // swift(>=4.2)

struct Lum_Network_Millions_Pool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 {
    get {return _storage._poolID}
    set {_uniqueStorage()._poolID = newValue}
  }

  var denom: String {
    get {return _storage._denom}
    set {_uniqueStorage()._denom = newValue}
  }

  var nativeDenom: String {
    get {return _storage._nativeDenom}
    set {_uniqueStorage()._nativeDenom = newValue}
  }

  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  var connectionID: String {
    get {return _storage._connectionID}
    set {_uniqueStorage()._connectionID = newValue}
  }

  var transferChannelID: String {
    get {return _storage._transferChannelID}
    set {_uniqueStorage()._transferChannelID = newValue}
  }

  var icaDepositPortID: String {
    get {return _storage._icaDepositPortID}
    set {_uniqueStorage()._icaDepositPortID = newValue}
  }

  var icaPrizepoolPortID: String {
    get {return _storage._icaPrizepoolPortID}
    set {_uniqueStorage()._icaPrizepoolPortID = newValue}
  }

  var validators: [Lum_Network_Millions_PoolValidator] {
    get {return _storage._validators}
    set {_uniqueStorage()._validators = newValue}
  }

  var bech32PrefixAccAddr: String {
    get {return _storage._bech32PrefixAccAddr}
    set {_uniqueStorage()._bech32PrefixAccAddr = newValue}
  }

  var bech32PrefixValAddr: String {
    get {return _storage._bech32PrefixValAddr}
    set {_uniqueStorage()._bech32PrefixValAddr = newValue}
  }

  var minDepositAmount: String {
    get {return _storage._minDepositAmount}
    set {_uniqueStorage()._minDepositAmount = newValue}
  }

  var drawSchedule: Lum_Network_Millions_DrawSchedule {
    get {return _storage._drawSchedule ?? Lum_Network_Millions_DrawSchedule()}
    set {_uniqueStorage()._drawSchedule = newValue}
  }
  /// Returns true if `drawSchedule` has been explicitly set.
  var hasDrawSchedule: Bool {return _storage._drawSchedule != nil}
  /// Clears the value of `drawSchedule`. Subsequent reads from it will return its default value.
  mutating func clearDrawSchedule() {_uniqueStorage()._drawSchedule = nil}

  var prizeStrategy: Lum_Network_Millions_PrizeStrategy {
    get {return _storage._prizeStrategy ?? Lum_Network_Millions_PrizeStrategy()}
    set {_uniqueStorage()._prizeStrategy = newValue}
  }
  /// Returns true if `prizeStrategy` has been explicitly set.
  var hasPrizeStrategy: Bool {return _storage._prizeStrategy != nil}
  /// Clears the value of `prizeStrategy`. Subsequent reads from it will return its default value.
  mutating func clearPrizeStrategy() {_uniqueStorage()._prizeStrategy = nil}

  var localAddress: String {
    get {return _storage._localAddress}
    set {_uniqueStorage()._localAddress = newValue}
  }

  var icaDepositAddress: String {
    get {return _storage._icaDepositAddress}
    set {_uniqueStorage()._icaDepositAddress = newValue}
  }

  var icaPrizepoolAddress: String {
    get {return _storage._icaPrizepoolAddress}
    set {_uniqueStorage()._icaPrizepoolAddress = newValue}
  }

  var nextDrawID: UInt64 {
    get {return _storage._nextDrawID}
    set {_uniqueStorage()._nextDrawID = newValue}
  }

  var tvlAmount: String {
    get {return _storage._tvlAmount}
    set {_uniqueStorage()._tvlAmount = newValue}
  }

  var depositorsCount: UInt64 {
    get {return _storage._depositorsCount}
    set {_uniqueStorage()._depositorsCount = newValue}
  }

  var sponsorshipAmount: String {
    get {return _storage._sponsorshipAmount}
    set {_uniqueStorage()._sponsorshipAmount = newValue}
  }

  var lastDrawCreatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastDrawCreatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastDrawCreatedAt = newValue}
  }
  /// Returns true if `lastDrawCreatedAt` has been explicitly set.
  var hasLastDrawCreatedAt: Bool {return _storage._lastDrawCreatedAt != nil}
  /// Clears the value of `lastDrawCreatedAt`. Subsequent reads from it will return its default value.
  mutating func clearLastDrawCreatedAt() {_uniqueStorage()._lastDrawCreatedAt = nil}

  var lastDrawState: Lum_Network_Millions_DrawState {
    get {return _storage._lastDrawState}
    set {_uniqueStorage()._lastDrawState = newValue}
  }

  var availablePrizePool: Cosmos_Base_V1beta1_Coin {
    get {return _storage._availablePrizePool ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._availablePrizePool = newValue}
  }
  /// Returns true if `availablePrizePool` has been explicitly set.
  var hasAvailablePrizePool: Bool {return _storage._availablePrizePool != nil}
  /// Clears the value of `availablePrizePool`. Subsequent reads from it will return its default value.
  mutating func clearAvailablePrizePool() {_uniqueStorage()._availablePrizePool = nil}

  var state: Lum_Network_Millions_PoolState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var createdAtHeight: Int64 {
    get {return _storage._createdAtHeight}
    set {_uniqueStorage()._createdAtHeight = newValue}
  }

  var updatedAtHeight: Int64 {
    get {return _storage._updatedAtHeight}
    set {_uniqueStorage()._updatedAtHeight = newValue}
  }

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lum_Network_Millions_PoolValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operatorAddress: String = String()

  var isEnabled: Bool = false

  var bondedAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lum_Network_Millions_PoolState: @unchecked Sendable {}
extension Lum_Network_Millions_Pool: @unchecked Sendable {}
extension Lum_Network_Millions_PoolValidator: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lum.network.millions"

extension Lum_Network_Millions_PoolState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POOL_STATE_UNSPECIFIED"),
    1: .same(proto: "POOL_STATE_CREATED"),
    2: .same(proto: "POOL_STATE_READY"),
    3: .same(proto: "POOL_STATE_PAUSED"),
    4: .same(proto: "POOL_STATE_KILLED"),
  ]
}

extension Lum_Network_Millions_Pool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "denom"),
    3: .standard(proto: "native_denom"),
    4: .standard(proto: "chain_id"),
    5: .standard(proto: "connection_id"),
    6: .standard(proto: "transfer_channel_id"),
    7: .standard(proto: "ica_deposit_port_id"),
    8: .standard(proto: "ica_prizepool_port_id"),
    10: .same(proto: "validators"),
    11: .standard(proto: "bech32_prefix_acc_addr"),
    12: .standard(proto: "bech32_prefix_val_addr"),
    13: .standard(proto: "min_deposit_amount"),
    14: .standard(proto: "draw_schedule"),
    15: .standard(proto: "prize_strategy"),
    18: .standard(proto: "local_address"),
    19: .standard(proto: "ica_deposit_address"),
    20: .standard(proto: "ica_prizepool_address"),
    22: .standard(proto: "next_draw_id"),
    23: .standard(proto: "tvl_amount"),
    24: .standard(proto: "depositors_count"),
    25: .standard(proto: "sponsorship_amount"),
    27: .standard(proto: "last_draw_created_at"),
    28: .standard(proto: "last_draw_state"),
    29: .standard(proto: "available_prize_pool"),
    32: .same(proto: "state"),
    33: .standard(proto: "created_at_height"),
    34: .standard(proto: "updated_at_height"),
    35: .standard(proto: "created_at"),
    36: .standard(proto: "updated_at"),
  ]

  fileprivate class _StorageClass {
    var _poolID: UInt64 = 0
    var _denom: String = String()
    var _nativeDenom: String = String()
    var _chainID: String = String()
    var _connectionID: String = String()
    var _transferChannelID: String = String()
    var _icaDepositPortID: String = String()
    var _icaPrizepoolPortID: String = String()
    var _validators: [Lum_Network_Millions_PoolValidator] = []
    var _bech32PrefixAccAddr: String = String()
    var _bech32PrefixValAddr: String = String()
    var _minDepositAmount: String = String()
    var _drawSchedule: Lum_Network_Millions_DrawSchedule? = nil
    var _prizeStrategy: Lum_Network_Millions_PrizeStrategy? = nil
    var _localAddress: String = String()
    var _icaDepositAddress: String = String()
    var _icaPrizepoolAddress: String = String()
    var _nextDrawID: UInt64 = 0
    var _tvlAmount: String = String()
    var _depositorsCount: UInt64 = 0
    var _sponsorshipAmount: String = String()
    var _lastDrawCreatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastDrawState: Lum_Network_Millions_DrawState = .unspecified
    var _availablePrizePool: Cosmos_Base_V1beta1_Coin? = nil
    var _state: Lum_Network_Millions_PoolState = .unspecified
    var _createdAtHeight: Int64 = 0
    var _updatedAtHeight: Int64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _poolID = source._poolID
      _denom = source._denom
      _nativeDenom = source._nativeDenom
      _chainID = source._chainID
      _connectionID = source._connectionID
      _transferChannelID = source._transferChannelID
      _icaDepositPortID = source._icaDepositPortID
      _icaPrizepoolPortID = source._icaPrizepoolPortID
      _validators = source._validators
      _bech32PrefixAccAddr = source._bech32PrefixAccAddr
      _bech32PrefixValAddr = source._bech32PrefixValAddr
      _minDepositAmount = source._minDepositAmount
      _drawSchedule = source._drawSchedule
      _prizeStrategy = source._prizeStrategy
      _localAddress = source._localAddress
      _icaDepositAddress = source._icaDepositAddress
      _icaPrizepoolAddress = source._icaPrizepoolAddress
      _nextDrawID = source._nextDrawID
      _tvlAmount = source._tvlAmount
      _depositorsCount = source._depositorsCount
      _sponsorshipAmount = source._sponsorshipAmount
      _lastDrawCreatedAt = source._lastDrawCreatedAt
      _lastDrawState = source._lastDrawState
      _availablePrizePool = source._availablePrizePool
      _state = source._state
      _createdAtHeight = source._createdAtHeight
      _updatedAtHeight = source._updatedAtHeight
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._poolID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._denom) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._nativeDenom) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._chainID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._connectionID) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._transferChannelID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._icaDepositPortID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._icaPrizepoolPortID) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._validators) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._bech32PrefixAccAddr) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._bech32PrefixValAddr) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._minDepositAmount) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._drawSchedule) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._prizeStrategy) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._localAddress) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._icaDepositAddress) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._icaPrizepoolAddress) }()
        case 22: try { try decoder.decodeSingularUInt64Field(value: &_storage._nextDrawID) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._tvlAmount) }()
        case 24: try { try decoder.decodeSingularUInt64Field(value: &_storage._depositorsCount) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._sponsorshipAmount) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._lastDrawCreatedAt) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._lastDrawState) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._availablePrizePool) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 33: try { try decoder.decodeSingularInt64Field(value: &_storage._createdAtHeight) }()
        case 34: try { try decoder.decodeSingularInt64Field(value: &_storage._updatedAtHeight) }()
        case 35: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._poolID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._poolID, fieldNumber: 1)
      }
      if !_storage._denom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._denom, fieldNumber: 2)
      }
      if !_storage._nativeDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nativeDenom, fieldNumber: 3)
      }
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 4)
      }
      if !_storage._connectionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._connectionID, fieldNumber: 5)
      }
      if !_storage._transferChannelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transferChannelID, fieldNumber: 6)
      }
      if !_storage._icaDepositPortID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._icaDepositPortID, fieldNumber: 7)
      }
      if !_storage._icaPrizepoolPortID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._icaPrizepoolPortID, fieldNumber: 8)
      }
      if !_storage._validators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validators, fieldNumber: 10)
      }
      if !_storage._bech32PrefixAccAddr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bech32PrefixAccAddr, fieldNumber: 11)
      }
      if !_storage._bech32PrefixValAddr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bech32PrefixValAddr, fieldNumber: 12)
      }
      if !_storage._minDepositAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minDepositAmount, fieldNumber: 13)
      }
      try { if let v = _storage._drawSchedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._prizeStrategy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._localAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._localAddress, fieldNumber: 18)
      }
      if !_storage._icaDepositAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._icaDepositAddress, fieldNumber: 19)
      }
      if !_storage._icaPrizepoolAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._icaPrizepoolAddress, fieldNumber: 20)
      }
      if _storage._nextDrawID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._nextDrawID, fieldNumber: 22)
      }
      if !_storage._tvlAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tvlAmount, fieldNumber: 23)
      }
      if _storage._depositorsCount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._depositorsCount, fieldNumber: 24)
      }
      if !_storage._sponsorshipAmount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sponsorshipAmount, fieldNumber: 25)
      }
      try { if let v = _storage._lastDrawCreatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      if _storage._lastDrawState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._lastDrawState, fieldNumber: 28)
      }
      try { if let v = _storage._availablePrizePool {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 32)
      }
      if _storage._createdAtHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAtHeight, fieldNumber: 33)
      }
      if _storage._updatedAtHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._updatedAtHeight, fieldNumber: 34)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_Pool, rhs: Lum_Network_Millions_Pool) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._poolID != rhs_storage._poolID {return false}
        if _storage._denom != rhs_storage._denom {return false}
        if _storage._nativeDenom != rhs_storage._nativeDenom {return false}
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._connectionID != rhs_storage._connectionID {return false}
        if _storage._transferChannelID != rhs_storage._transferChannelID {return false}
        if _storage._icaDepositPortID != rhs_storage._icaDepositPortID {return false}
        if _storage._icaPrizepoolPortID != rhs_storage._icaPrizepoolPortID {return false}
        if _storage._validators != rhs_storage._validators {return false}
        if _storage._bech32PrefixAccAddr != rhs_storage._bech32PrefixAccAddr {return false}
        if _storage._bech32PrefixValAddr != rhs_storage._bech32PrefixValAddr {return false}
        if _storage._minDepositAmount != rhs_storage._minDepositAmount {return false}
        if _storage._drawSchedule != rhs_storage._drawSchedule {return false}
        if _storage._prizeStrategy != rhs_storage._prizeStrategy {return false}
        if _storage._localAddress != rhs_storage._localAddress {return false}
        if _storage._icaDepositAddress != rhs_storage._icaDepositAddress {return false}
        if _storage._icaPrizepoolAddress != rhs_storage._icaPrizepoolAddress {return false}
        if _storage._nextDrawID != rhs_storage._nextDrawID {return false}
        if _storage._tvlAmount != rhs_storage._tvlAmount {return false}
        if _storage._depositorsCount != rhs_storage._depositorsCount {return false}
        if _storage._sponsorshipAmount != rhs_storage._sponsorshipAmount {return false}
        if _storage._lastDrawCreatedAt != rhs_storage._lastDrawCreatedAt {return false}
        if _storage._lastDrawState != rhs_storage._lastDrawState {return false}
        if _storage._availablePrizePool != rhs_storage._availablePrizePool {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._createdAtHeight != rhs_storage._createdAtHeight {return false}
        if _storage._updatedAtHeight != rhs_storage._updatedAtHeight {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_PoolValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operator_address"),
    2: .standard(proto: "is_enabled"),
    3: .standard(proto: "bonded_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operatorAddress) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bondedAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 1)
    }
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 2)
    }
    if !self.bondedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.bondedAmount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_PoolValidator, rhs: Lum_Network_Millions_PoolValidator) -> Bool {
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.bondedAmount != rhs.bondedAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
