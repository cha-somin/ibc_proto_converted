// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/incentive/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// StakeholderType represents the different types of stakeholders.
enum Babylon_Incentive_StakeholderType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Finality provider stakeholder type
  case finalityProvider // = 0

  /// BTC delegation stakeholder type
  case btcDelegation // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .finalityProvider
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .finalityProvider
    case 1: self = .btcDelegation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .finalityProvider: return 0
    case .btcDelegation: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Babylon_Incentive_StakeholderType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Babylon_Incentive_StakeholderType] = [
    .finalityProvider,
    .btcDelegation,
  ]
}

#endif  // swift(>=4.2)

/// GenesisState defines the incentive module's genesis state.
struct Babylon_Incentive_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params the current params of the state.
  var params: Babylon_Incentive_Params {
    get {return _params ?? Babylon_Incentive_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// BTC staking gauge on every height
  var btcStakingGauges: [Babylon_Incentive_BTCStakingGaugeEntry] = []

  /// RewardGauges the reward gauge for each BTC staker and finality provider
  var rewardGauges: [Babylon_Incentive_RewardGaugeEntry] = []

  /// Withdraw addresses of the delegators
  var withdrawAddresses: [Babylon_Incentive_WithdrawAddressEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Incentive_Params? = nil
}

/// BTCStakingGaugeEntry represents a gauge for BTC staking rewards at a specific
/// height.
struct Babylon_Incentive_BTCStakingGaugeEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Block height at which this gauge is set
  var height: UInt64 = 0

  /// The gauge object storing rewards info
  var gauge: Babylon_Incentive_Gauge {
    get {return _gauge ?? Babylon_Incentive_Gauge()}
    set {_gauge = newValue}
  }
  /// Returns true if `gauge` has been explicitly set.
  var hasGauge: Bool {return self._gauge != nil}
  /// Clears the value of `gauge`. Subsequent reads from it will return its default value.
  mutating func clearGauge() {self._gauge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _gauge: Babylon_Incentive_Gauge? = nil
}

/// RewardGaugeEntry represents a reward gauge for a specific stakeholder.
struct Babylon_Incentive_RewardGaugeEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of stakeholder
  var stakeholderType: Babylon_Incentive_StakeholderType = .finalityProvider

  /// Address of the stakeholder
  var address: String = String()

  /// The reward gauge object
  var rewardGauge: Babylon_Incentive_RewardGauge {
    get {return _rewardGauge ?? Babylon_Incentive_RewardGauge()}
    set {_rewardGauge = newValue}
  }
  /// Returns true if `rewardGauge` has been explicitly set.
  var hasRewardGauge: Bool {return self._rewardGauge != nil}
  /// Clears the value of `rewardGauge`. Subsequent reads from it will return its default value.
  mutating func clearRewardGauge() {self._rewardGauge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rewardGauge: Babylon_Incentive_RewardGauge? = nil
}

/// WithdrawAddressEntry holds the record of a withdraw address belonging to a
/// delegator address.
struct Babylon_Incentive_WithdrawAddressEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of the delegator
  var delegatorAddress: String = String()

  /// Withdraw address
  var withdrawAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Incentive_StakeholderType: @unchecked Sendable {}
extension Babylon_Incentive_GenesisState: @unchecked Sendable {}
extension Babylon_Incentive_BTCStakingGaugeEntry: @unchecked Sendable {}
extension Babylon_Incentive_RewardGaugeEntry: @unchecked Sendable {}
extension Babylon_Incentive_WithdrawAddressEntry: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.incentive"

extension Babylon_Incentive_StakeholderType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FINALITY_PROVIDER"),
    1: .same(proto: "BTC_DELEGATION"),
  ]
}

extension Babylon_Incentive_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "btc_staking_gauges"),
    3: .standard(proto: "reward_gauges"),
    4: .standard(proto: "withdraw_addresses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.btcStakingGauges) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.rewardGauges) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.withdrawAddresses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.btcStakingGauges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.btcStakingGauges, fieldNumber: 2)
    }
    if !self.rewardGauges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardGauges, fieldNumber: 3)
    }
    if !self.withdrawAddresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.withdrawAddresses, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_GenesisState, rhs: Babylon_Incentive_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.btcStakingGauges != rhs.btcStakingGauges {return false}
    if lhs.rewardGauges != rhs.rewardGauges {return false}
    if lhs.withdrawAddresses != rhs.withdrawAddresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Incentive_BTCStakingGaugeEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCStakingGaugeEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "gauge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._gauge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 1)
    }
    try { if let v = self._gauge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_BTCStakingGaugeEntry, rhs: Babylon_Incentive_BTCStakingGaugeEntry) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs._gauge != rhs._gauge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Incentive_RewardGaugeEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RewardGaugeEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stakeholder_type"),
    2: .same(proto: "address"),
    3: .standard(proto: "reward_gauge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.stakeholderType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rewardGauge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.stakeholderType != .finalityProvider {
      try visitor.visitSingularEnumField(value: self.stakeholderType, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    try { if let v = self._rewardGauge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_RewardGaugeEntry, rhs: Babylon_Incentive_RewardGaugeEntry) -> Bool {
    if lhs.stakeholderType != rhs.stakeholderType {return false}
    if lhs.address != rhs.address {return false}
    if lhs._rewardGauge != rhs._rewardGauge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Incentive_WithdrawAddressEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WithdrawAddressEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "withdraw_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.withdrawAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.withdrawAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_WithdrawAddressEntry, rhs: Babylon_Incentive_WithdrawAddressEntry) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.withdrawAddress != rhs.withdrawAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
