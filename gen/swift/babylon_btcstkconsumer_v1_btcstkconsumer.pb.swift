// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstkconsumer/v1/btcstkconsumer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ConsumerType defines the type of consumer chain
enum Babylon_Btcstkconsumer_V1_ConsumerType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// COSMOS represents a Cosmos SDK chain consumer
  case cosmos // = 0

  /// ETH_L2 represents an Ethereum L2 chain consumer
  case ethL2 // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .cosmos
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cosmos
    case 1: self = .ethL2
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .cosmos: return 0
    case .ethL2: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Babylon_Btcstkconsumer_V1_ConsumerType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Babylon_Btcstkconsumer_V1_ConsumerType] = [
    .cosmos,
    .ethL2,
  ]
}

#endif  // swift(>=4.2)

/// ConsumerRegister is the registration information of a consumer
struct Babylon_Btcstkconsumer_V1_ConsumerRegister {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// consumer_id is the ID of the consumer
  /// - for Cosmos SDK chains, the consumer ID will be the IBC client ID
  /// - for ETH L2 chains, the consumer ID will be the chain ID of the ETH L2
  ///   chain
  var consumerID: String = String()

  /// consumer_name is the name of the consumer
  var consumerName: String = String()

  /// consumer_description is a description for the consumer (can be empty)
  var consumerDescription: String = String()

  /// consumer_metadata is necessary metadata of the consumer, and the data
  /// depends on the type of integration
  var consumerMetadata: Babylon_Btcstkconsumer_V1_ConsumerRegister.OneOf_ConsumerMetadata? = nil

  var cosmosConsumerMetadata: Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata {
    get {
      if case .cosmosConsumerMetadata(let v)? = consumerMetadata {return v}
      return Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata()
    }
    set {consumerMetadata = .cosmosConsumerMetadata(newValue)}
  }

  var ethL2ConsumerMetadata: Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata {
    get {
      if case .ethL2ConsumerMetadata(let v)? = consumerMetadata {return v}
      return Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata()
    }
    set {consumerMetadata = .ethL2ConsumerMetadata(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// consumer_metadata is necessary metadata of the consumer, and the data
  /// depends on the type of integration
  enum OneOf_ConsumerMetadata: Equatable {
    case cosmosConsumerMetadata(Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata)
    case ethL2ConsumerMetadata(Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata)

  #if !swift(>=4.1)
    static func ==(lhs: Babylon_Btcstkconsumer_V1_ConsumerRegister.OneOf_ConsumerMetadata, rhs: Babylon_Btcstkconsumer_V1_ConsumerRegister.OneOf_ConsumerMetadata) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.cosmosConsumerMetadata, .cosmosConsumerMetadata): return {
        guard case .cosmosConsumerMetadata(let l) = lhs, case .cosmosConsumerMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ethL2ConsumerMetadata, .ethL2ConsumerMetadata): return {
        guard case .ethL2ConsumerMetadata(let l) = lhs, case .ethL2ConsumerMetadata(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// CosmosConsumerMetadata is the metadata for the Cosmos integration
struct Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// channel_id defines the IBC channel ID for the consumer chain
  var channelID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ETHL2ConsumerMetadata is the metadata for the ETH L2 integration
struct Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finality_contract_address is the address of the finality contract for
  /// the ETH L2 integration
  var finalityContractAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstkconsumer_V1_ConsumerType: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_ConsumerRegister: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_ConsumerRegister.OneOf_ConsumerMetadata: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstkconsumer.v1"

extension Babylon_Btcstkconsumer_V1_ConsumerType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COSMOS"),
    1: .same(proto: "ETH_L2"),
  ]
}

extension Babylon_Btcstkconsumer_V1_ConsumerRegister: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsumerRegister"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_id"),
    2: .standard(proto: "consumer_name"),
    3: .standard(proto: "consumer_description"),
    4: .standard(proto: "cosmos_consumer_metadata"),
    5: .standard(proto: "eth_l2_consumer_metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.consumerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.consumerName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.consumerDescription) }()
      case 4: try {
        var v: Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata?
        var hadOneofValue = false
        if let current = self.consumerMetadata {
          hadOneofValue = true
          if case .cosmosConsumerMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.consumerMetadata = .cosmosConsumerMetadata(v)
        }
      }()
      case 5: try {
        var v: Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata?
        var hadOneofValue = false
        if let current = self.consumerMetadata {
          hadOneofValue = true
          if case .ethL2ConsumerMetadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.consumerMetadata = .ethL2ConsumerMetadata(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 1)
    }
    if !self.consumerName.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerName, fieldNumber: 2)
    }
    if !self.consumerDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerDescription, fieldNumber: 3)
    }
    switch self.consumerMetadata {
    case .cosmosConsumerMetadata?: try {
      guard case .cosmosConsumerMetadata(let v)? = self.consumerMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .ethL2ConsumerMetadata?: try {
      guard case .ethL2ConsumerMetadata(let v)? = self.consumerMetadata else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_ConsumerRegister, rhs: Babylon_Btcstkconsumer_V1_ConsumerRegister) -> Bool {
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.consumerName != rhs.consumerName {return false}
    if lhs.consumerDescription != rhs.consumerDescription {return false}
    if lhs.consumerMetadata != rhs.consumerMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CosmosConsumerMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.channelID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata, rhs: Babylon_Btcstkconsumer_V1_CosmosConsumerMetadata) -> Bool {
    if lhs.channelID != rhs.channelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ETHL2ConsumerMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finality_contract_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.finalityContractAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.finalityContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.finalityContractAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata, rhs: Babylon_Btcstkconsumer_V1_ETHL2ConsumerMetadata) -> Bool {
    if lhs.finalityContractAddress != rhs.finalityContractAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
