// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quasar/qoracle/osmosis/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enabled: Bool = false

  /// Identifier of the epoch that we trigger the icq request
  var epochIdentifier: String = String()

  /// Identifier of authorized channel that we are allowed to send/receive packets
  var authorizedChannel: String = String()

  /// Timeout height relative to the current block height. The timeout is disabled when set to 0.
  var packetTimeoutHeight: Ibc_Core_Client_V1_Height {
    get {return _packetTimeoutHeight ?? Ibc_Core_Client_V1_Height()}
    set {_packetTimeoutHeight = newValue}
  }
  /// Returns true if `packetTimeoutHeight` has been explicitly set.
  var hasPacketTimeoutHeight: Bool {return self._packetTimeoutHeight != nil}
  /// Clears the value of `packetTimeoutHeight`. Subsequent reads from it will return its default value.
  mutating func clearPacketTimeoutHeight() {self._packetTimeoutHeight = nil}

  /// Timeout timestamp relative to counterparty chain current time. The timeout is disabled when set to 0.
  var packetTimeoutTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packetTimeoutHeight: Ibc_Core_Client_V1_Height? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quasarlabs.quasarnode.qoracle.osmosis"

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "epoch_identifier"),
    3: .standard(proto: "authorized_channel"),
    4: .standard(proto: "packet_timeout_height"),
    5: .standard(proto: "packet_timeout_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.epochIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.authorizedChannel) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._packetTimeoutHeight) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.packetTimeoutTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.epochIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.epochIdentifier, fieldNumber: 2)
    }
    if !self.authorizedChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.authorizedChannel, fieldNumber: 3)
    }
    try { if let v = self._packetTimeoutHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.packetTimeoutTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.packetTimeoutTimestamp, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_Params, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_Params) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.epochIdentifier != rhs.epochIdentifier {return false}
    if lhs.authorizedChannel != rhs.authorizedChannel {return false}
    if lhs._packetTimeoutHeight != rhs._packetTimeoutHeight {return false}
    if lhs.packetTimeoutTimestamp != rhs.packetTimeoutTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
