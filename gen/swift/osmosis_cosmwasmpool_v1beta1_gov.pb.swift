// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/cosmwasmpool/v1beta1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UploadCosmWasmPoolCodeAndWhiteListProposal is a gov Content type for
/// uploading coswasm pool code and adding it to internal whitelist. Only the
/// code ids created by this message are eligible for being x/cosmwasmpool pools.
struct Osmosis_Cosmwasmpool_V1beta1_UploadCosmWasmPoolCodeAndWhiteListProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  /// WASMByteCode can be raw or gzip compressed
  var wasmByteCode: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MigratePoolContractsProposal is a gov Content type for
/// migrating  given pools to the new contract code and adding to internal
/// whitelist if needed. It has two options to perform the migration:
///
/// 1. If the codeID is non-zero, it will migrate the pool contracts to a given
/// codeID assuming that it has already been uploaded. uploadByteCode must be
/// empty in such a case. Fails if codeID does not exist. Fails if uploadByteCode
/// is not empty.
///
/// 2. If the codeID is zero, it will upload the given uploadByteCode and use the
/// new resulting code id to migrate the pool to. Errors if uploadByteCode is
/// empty or invalid.
///
/// In both cases, if one of the pools specified by the given poolID does not
/// exist, the proposal fails.
///
/// The reason for having poolIDs be a slice of ids is to account for the
/// potential need for emergency migration of all old code ids associated with
/// particular pools to new code ids, or simply having the flexibility of
/// migrating multiple older pool contracts to a new one at once when there is a
/// release.
///
/// poolD count to be submitted at once is gated by a governance paramets (20 at
/// launch). The proposal fails if more. Note that 20 was chosen arbitrarily to
/// have a constant bound on the number of pools migrated at once. This size will
/// be configured by a module parameter so it can be changed by a constant.
struct Osmosis_Cosmwasmpool_V1beta1_MigratePoolContractsProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  /// pool_ids are the pool ids of the contracts to be migrated
  /// either to the new_code_id that is already uploaded to chain or to
  /// the given wasm_byte_code.
  var poolIds: [UInt64] = []

  /// new_code_id is the code id of the contract code to migrate to.
  /// Assumes that the code is already uploaded to chain. Only one of
  /// new_code_id and wasm_byte_code should be set.
  var newCodeID: UInt64 = 0

  /// WASMByteCode can be raw or gzip compressed. Assumes that the code id
  /// has not been uploaded yet so uploads the given code and migrates to it.
  /// Only one of new_code_id and wasm_byte_code should be set.
  var wasmByteCode: Data = Data()

  /// MigrateMsg migrate message to be used for migrating the pool contracts.
  var migrateMsg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Cosmwasmpool_V1beta1_UploadCosmWasmPoolCodeAndWhiteListProposal: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_MigratePoolContractsProposal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.cosmwasmpool.v1beta1"

extension Osmosis_Cosmwasmpool_V1beta1_UploadCosmWasmPoolCodeAndWhiteListProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadCosmWasmPoolCodeAndWhiteListProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "wasm_byte_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.wasmByteCode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.wasmByteCode.isEmpty {
      try visitor.visitSingularBytesField(value: self.wasmByteCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_UploadCosmWasmPoolCodeAndWhiteListProposal, rhs: Osmosis_Cosmwasmpool_V1beta1_UploadCosmWasmPoolCodeAndWhiteListProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.wasmByteCode != rhs.wasmByteCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_MigratePoolContractsProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MigratePoolContractsProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "pool_ids"),
    4: .standard(proto: "new_code_id"),
    5: .standard(proto: "wasm_byte_code"),
    6: .standard(proto: "migrate_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.poolIds) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.newCodeID) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.wasmByteCode) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.migrateMsg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.poolIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.poolIds, fieldNumber: 3)
    }
    if self.newCodeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.newCodeID, fieldNumber: 4)
    }
    if !self.wasmByteCode.isEmpty {
      try visitor.visitSingularBytesField(value: self.wasmByteCode, fieldNumber: 5)
    }
    if !self.migrateMsg.isEmpty {
      try visitor.visitSingularBytesField(value: self.migrateMsg, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_MigratePoolContractsProposal, rhs: Osmosis_Cosmwasmpool_V1beta1_MigratePoolContractsProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.poolIds != rhs.poolIds {return false}
    if lhs.newCodeID != rhs.newCodeID {return false}
    if lhs.wasmByteCode != rhs.wasmByteCode {return false}
    if lhs.migrateMsg != rhs.migrateMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
