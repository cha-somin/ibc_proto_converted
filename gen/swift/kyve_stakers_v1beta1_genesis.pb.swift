// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/stakers/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the stakers module's genesis state.
struct Kyve_Stakers_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters of the module.
  var params: Kyve_Stakers_V1beta1_Params {
    get {return _params ?? Kyve_Stakers_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// staker_list ...
  var stakerList: [Kyve_Stakers_V1beta1_Staker] = []

  /// valaccount_list ...
  var valaccountList: [Kyve_Stakers_V1beta1_Valaccount] = []

  /// commission_change_entries ...
  var commissionChangeEntries: [Kyve_Stakers_V1beta1_CommissionChangeEntry] = []

  /// queue_state_commission ...
  var queueStateCommission: Kyve_Stakers_V1beta1_QueueState {
    get {return _queueStateCommission ?? Kyve_Stakers_V1beta1_QueueState()}
    set {_queueStateCommission = newValue}
  }
  /// Returns true if `queueStateCommission` has been explicitly set.
  var hasQueueStateCommission: Bool {return self._queueStateCommission != nil}
  /// Clears the value of `queueStateCommission`. Subsequent reads from it will return its default value.
  mutating func clearQueueStateCommission() {self._queueStateCommission = nil}

  /// leave_pool_entries ...
  var leavePoolEntries: [Kyve_Stakers_V1beta1_LeavePoolEntry] = []

  /// queue_state_leave ...
  var queueStateLeave: Kyve_Stakers_V1beta1_QueueState {
    get {return _queueStateLeave ?? Kyve_Stakers_V1beta1_QueueState()}
    set {_queueStateLeave = newValue}
  }
  /// Returns true if `queueStateLeave` has been explicitly set.
  var hasQueueStateLeave: Bool {return self._queueStateLeave != nil}
  /// Clears the value of `queueStateLeave`. Subsequent reads from it will return its default value.
  mutating func clearQueueStateLeave() {self._queueStateLeave = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Kyve_Stakers_V1beta1_Params? = nil
  fileprivate var _queueStateCommission: Kyve_Stakers_V1beta1_QueueState? = nil
  fileprivate var _queueStateLeave: Kyve_Stakers_V1beta1_QueueState? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Stakers_V1beta1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.stakers.v1beta1"

extension Kyve_Stakers_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "staker_list"),
    3: .standard(proto: "valaccount_list"),
    4: .standard(proto: "commission_change_entries"),
    5: .standard(proto: "queue_state_commission"),
    6: .standard(proto: "leave_pool_entries"),
    7: .standard(proto: "queue_state_leave"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.stakerList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.valaccountList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.commissionChangeEntries) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._queueStateCommission) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.leavePoolEntries) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._queueStateLeave) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.stakerList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stakerList, fieldNumber: 2)
    }
    if !self.valaccountList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.valaccountList, fieldNumber: 3)
    }
    if !self.commissionChangeEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commissionChangeEntries, fieldNumber: 4)
    }
    try { if let v = self._queueStateCommission {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.leavePoolEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leavePoolEntries, fieldNumber: 6)
    }
    try { if let v = self._queueStateLeave {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_GenesisState, rhs: Kyve_Stakers_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.stakerList != rhs.stakerList {return false}
    if lhs.valaccountList != rhs.valaccountList {return false}
    if lhs.commissionChangeEntries != rhs.commissionChangeEntries {return false}
    if lhs._queueStateCommission != rhs._queueStateCommission {return false}
    if lhs.leavePoolEntries != rhs.leavePoolEntries {return false}
    if lhs._queueStateLeave != rhs._queueStateLeave {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
