//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: noble/tokenfactory/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Noble_Tokenfactory_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Noble_Tokenfactory_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? { get }

  func updateMasterMinter(
    _ request: Noble_Tokenfactory_MsgUpdateMasterMinter,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdateMasterMinter, Noble_Tokenfactory_MsgUpdateMasterMinterResponse>

  func updatePauser(
    _ request: Noble_Tokenfactory_MsgUpdatePauser,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdatePauser, Noble_Tokenfactory_MsgUpdatePauserResponse>

  func updateBlacklister(
    _ request: Noble_Tokenfactory_MsgUpdateBlacklister,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdateBlacklister, Noble_Tokenfactory_MsgUpdateBlacklisterResponse>

  func updateOwner(
    _ request: Noble_Tokenfactory_MsgUpdateOwner,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdateOwner, Noble_Tokenfactory_MsgUpdateOwnerResponse>

  func acceptOwner(
    _ request: Noble_Tokenfactory_MsgAcceptOwner,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgAcceptOwner, Noble_Tokenfactory_MsgAcceptOwnerResponse>

  func configureMinter(
    _ request: Noble_Tokenfactory_MsgConfigureMinter,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgConfigureMinter, Noble_Tokenfactory_MsgConfigureMinterResponse>

  func removeMinter(
    _ request: Noble_Tokenfactory_MsgRemoveMinter,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgRemoveMinter, Noble_Tokenfactory_MsgRemoveMinterResponse>

  func mint(
    _ request: Noble_Tokenfactory_MsgMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgMint, Noble_Tokenfactory_MsgMintResponse>

  func burn(
    _ request: Noble_Tokenfactory_MsgBurn,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgBurn, Noble_Tokenfactory_MsgBurnResponse>

  func blacklist(
    _ request: Noble_Tokenfactory_MsgBlacklist,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgBlacklist, Noble_Tokenfactory_MsgBlacklistResponse>

  func unblacklist(
    _ request: Noble_Tokenfactory_MsgUnblacklist,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgUnblacklist, Noble_Tokenfactory_MsgUnblacklistResponse>

  func pause(
    _ request: Noble_Tokenfactory_MsgPause,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgPause, Noble_Tokenfactory_MsgPauseResponse>

  func unpause(
    _ request: Noble_Tokenfactory_MsgUnpause,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgUnpause, Noble_Tokenfactory_MsgUnpauseResponse>

  func configureMinterController(
    _ request: Noble_Tokenfactory_MsgConfigureMinterController,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgConfigureMinterController, Noble_Tokenfactory_MsgConfigureMinterControllerResponse>

  func removeMinterController(
    _ request: Noble_Tokenfactory_MsgRemoveMinterController,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Tokenfactory_MsgRemoveMinterController, Noble_Tokenfactory_MsgRemoveMinterControllerResponse>
}

extension Noble_Tokenfactory_MsgClientProtocol {
  internal var serviceName: String {
    return "noble.tokenfactory.Msg"
  }

  /// Unary call to UpdateMasterMinter
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateMasterMinter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateMasterMinter(
    _ request: Noble_Tokenfactory_MsgUpdateMasterMinter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdateMasterMinter, Noble_Tokenfactory_MsgUpdateMasterMinterResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateMasterMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMasterMinterInterceptors() ?? []
    )
  }

  /// Unary call to UpdatePauser
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePauser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updatePauser(
    _ request: Noble_Tokenfactory_MsgUpdatePauser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdatePauser, Noble_Tokenfactory_MsgUpdatePauserResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updatePauser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePauserInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBlacklister
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBlacklister.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBlacklister(
    _ request: Noble_Tokenfactory_MsgUpdateBlacklister,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdateBlacklister, Noble_Tokenfactory_MsgUpdateBlacklisterResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateBlacklister.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBlacklisterInterceptors() ?? []
    )
  }

  /// Unary call to UpdateOwner
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateOwner(
    _ request: Noble_Tokenfactory_MsgUpdateOwner,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgUpdateOwner, Noble_Tokenfactory_MsgUpdateOwnerResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateOwnerInterceptors() ?? []
    )
  }

  /// Unary call to AcceptOwner
  ///
  /// - Parameters:
  ///   - request: Request to send to AcceptOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func acceptOwner(
    _ request: Noble_Tokenfactory_MsgAcceptOwner,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgAcceptOwner, Noble_Tokenfactory_MsgAcceptOwnerResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.acceptOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptOwnerInterceptors() ?? []
    )
  }

  /// Unary call to ConfigureMinter
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigureMinter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func configureMinter(
    _ request: Noble_Tokenfactory_MsgConfigureMinter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgConfigureMinter, Noble_Tokenfactory_MsgConfigureMinterResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureMinterInterceptors() ?? []
    )
  }

  /// Unary call to RemoveMinter
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveMinter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeMinter(
    _ request: Noble_Tokenfactory_MsgRemoveMinter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgRemoveMinter, Noble_Tokenfactory_MsgRemoveMinterResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMinterInterceptors() ?? []
    )
  }

  /// Unary call to Mint
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mint(
    _ request: Noble_Tokenfactory_MsgMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgMint, Noble_Tokenfactory_MsgMintResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Unary call to Burn
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burn(
    _ request: Noble_Tokenfactory_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgBurn, Noble_Tokenfactory_MsgBurnResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// Unary call to Blacklist
  ///
  /// - Parameters:
  ///   - request: Request to send to Blacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blacklist(
    _ request: Noble_Tokenfactory_MsgBlacklist,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgBlacklist, Noble_Tokenfactory_MsgBlacklistResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.blacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistInterceptors() ?? []
    )
  }

  /// Unary call to Unblacklist
  ///
  /// - Parameters:
  ///   - request: Request to send to Unblacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unblacklist(
    _ request: Noble_Tokenfactory_MsgUnblacklist,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgUnblacklist, Noble_Tokenfactory_MsgUnblacklistResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.unblacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblacklistInterceptors() ?? []
    )
  }

  /// Unary call to Pause
  ///
  /// - Parameters:
  ///   - request: Request to send to Pause.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pause(
    _ request: Noble_Tokenfactory_MsgPause,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgPause, Noble_Tokenfactory_MsgPauseResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.pause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseInterceptors() ?? []
    )
  }

  /// Unary call to Unpause
  ///
  /// - Parameters:
  ///   - request: Request to send to Unpause.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unpause(
    _ request: Noble_Tokenfactory_MsgUnpause,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgUnpause, Noble_Tokenfactory_MsgUnpauseResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.unpause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnpauseInterceptors() ?? []
    )
  }

  /// Unary call to ConfigureMinterController
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigureMinterController.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func configureMinterController(
    _ request: Noble_Tokenfactory_MsgConfigureMinterController,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgConfigureMinterController, Noble_Tokenfactory_MsgConfigureMinterControllerResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureMinterControllerInterceptors() ?? []
    )
  }

  /// this line is used by starport scaffolding # proto/tx/rpc
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveMinterController.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeMinterController(
    _ request: Noble_Tokenfactory_MsgRemoveMinterController,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Tokenfactory_MsgRemoveMinterController, Noble_Tokenfactory_MsgRemoveMinterControllerResponse> {
    return self.makeUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMinterControllerInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Noble_Tokenfactory_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Noble_Tokenfactory_MsgNIOClient")
internal final class Noble_Tokenfactory_MsgClient: Noble_Tokenfactory_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the noble.tokenfactory.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Noble_Tokenfactory_MsgNIOClient: Noble_Tokenfactory_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the noble.tokenfactory.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Noble_Tokenfactory_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? { get }

  func makeUpdateMasterMinterCall(
    _ request: Noble_Tokenfactory_MsgUpdateMasterMinter,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdateMasterMinter, Noble_Tokenfactory_MsgUpdateMasterMinterResponse>

  func makeUpdatePauserCall(
    _ request: Noble_Tokenfactory_MsgUpdatePauser,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdatePauser, Noble_Tokenfactory_MsgUpdatePauserResponse>

  func makeUpdateBlacklisterCall(
    _ request: Noble_Tokenfactory_MsgUpdateBlacklister,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdateBlacklister, Noble_Tokenfactory_MsgUpdateBlacklisterResponse>

  func makeUpdateOwnerCall(
    _ request: Noble_Tokenfactory_MsgUpdateOwner,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdateOwner, Noble_Tokenfactory_MsgUpdateOwnerResponse>

  func makeAcceptOwnerCall(
    _ request: Noble_Tokenfactory_MsgAcceptOwner,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgAcceptOwner, Noble_Tokenfactory_MsgAcceptOwnerResponse>

  func makeConfigureMinterCall(
    _ request: Noble_Tokenfactory_MsgConfigureMinter,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgConfigureMinter, Noble_Tokenfactory_MsgConfigureMinterResponse>

  func makeRemoveMinterCall(
    _ request: Noble_Tokenfactory_MsgRemoveMinter,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgRemoveMinter, Noble_Tokenfactory_MsgRemoveMinterResponse>

  func makeMintCall(
    _ request: Noble_Tokenfactory_MsgMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgMint, Noble_Tokenfactory_MsgMintResponse>

  func makeBurnCall(
    _ request: Noble_Tokenfactory_MsgBurn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgBurn, Noble_Tokenfactory_MsgBurnResponse>

  func makeBlacklistCall(
    _ request: Noble_Tokenfactory_MsgBlacklist,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgBlacklist, Noble_Tokenfactory_MsgBlacklistResponse>

  func makeUnblacklistCall(
    _ request: Noble_Tokenfactory_MsgUnblacklist,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUnblacklist, Noble_Tokenfactory_MsgUnblacklistResponse>

  func makePauseCall(
    _ request: Noble_Tokenfactory_MsgPause,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgPause, Noble_Tokenfactory_MsgPauseResponse>

  func makeUnpauseCall(
    _ request: Noble_Tokenfactory_MsgUnpause,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUnpause, Noble_Tokenfactory_MsgUnpauseResponse>

  func makeConfigureMinterControllerCall(
    _ request: Noble_Tokenfactory_MsgConfigureMinterController,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgConfigureMinterController, Noble_Tokenfactory_MsgConfigureMinterControllerResponse>

  func makeRemoveMinterControllerCall(
    _ request: Noble_Tokenfactory_MsgRemoveMinterController,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgRemoveMinterController, Noble_Tokenfactory_MsgRemoveMinterControllerResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Noble_Tokenfactory_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Noble_Tokenfactory_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateMasterMinterCall(
    _ request: Noble_Tokenfactory_MsgUpdateMasterMinter,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdateMasterMinter, Noble_Tokenfactory_MsgUpdateMasterMinterResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateMasterMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMasterMinterInterceptors() ?? []
    )
  }

  internal func makeUpdatePauserCall(
    _ request: Noble_Tokenfactory_MsgUpdatePauser,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdatePauser, Noble_Tokenfactory_MsgUpdatePauserResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updatePauser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePauserInterceptors() ?? []
    )
  }

  internal func makeUpdateBlacklisterCall(
    _ request: Noble_Tokenfactory_MsgUpdateBlacklister,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdateBlacklister, Noble_Tokenfactory_MsgUpdateBlacklisterResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateBlacklister.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBlacklisterInterceptors() ?? []
    )
  }

  internal func makeUpdateOwnerCall(
    _ request: Noble_Tokenfactory_MsgUpdateOwner,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUpdateOwner, Noble_Tokenfactory_MsgUpdateOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateOwnerInterceptors() ?? []
    )
  }

  internal func makeAcceptOwnerCall(
    _ request: Noble_Tokenfactory_MsgAcceptOwner,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgAcceptOwner, Noble_Tokenfactory_MsgAcceptOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.acceptOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptOwnerInterceptors() ?? []
    )
  }

  internal func makeConfigureMinterCall(
    _ request: Noble_Tokenfactory_MsgConfigureMinter,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgConfigureMinter, Noble_Tokenfactory_MsgConfigureMinterResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureMinterInterceptors() ?? []
    )
  }

  internal func makeRemoveMinterCall(
    _ request: Noble_Tokenfactory_MsgRemoveMinter,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgRemoveMinter, Noble_Tokenfactory_MsgRemoveMinterResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMinterInterceptors() ?? []
    )
  }

  internal func makeMintCall(
    _ request: Noble_Tokenfactory_MsgMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgMint, Noble_Tokenfactory_MsgMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func makeBurnCall(
    _ request: Noble_Tokenfactory_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgBurn, Noble_Tokenfactory_MsgBurnResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func makeBlacklistCall(
    _ request: Noble_Tokenfactory_MsgBlacklist,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgBlacklist, Noble_Tokenfactory_MsgBlacklistResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.blacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistInterceptors() ?? []
    )
  }

  internal func makeUnblacklistCall(
    _ request: Noble_Tokenfactory_MsgUnblacklist,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUnblacklist, Noble_Tokenfactory_MsgUnblacklistResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.unblacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblacklistInterceptors() ?? []
    )
  }

  internal func makePauseCall(
    _ request: Noble_Tokenfactory_MsgPause,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgPause, Noble_Tokenfactory_MsgPauseResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.pause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseInterceptors() ?? []
    )
  }

  internal func makeUnpauseCall(
    _ request: Noble_Tokenfactory_MsgUnpause,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgUnpause, Noble_Tokenfactory_MsgUnpauseResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.unpause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnpauseInterceptors() ?? []
    )
  }

  internal func makeConfigureMinterControllerCall(
    _ request: Noble_Tokenfactory_MsgConfigureMinterController,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgConfigureMinterController, Noble_Tokenfactory_MsgConfigureMinterControllerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureMinterControllerInterceptors() ?? []
    )
  }

  internal func makeRemoveMinterControllerCall(
    _ request: Noble_Tokenfactory_MsgRemoveMinterController,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Tokenfactory_MsgRemoveMinterController, Noble_Tokenfactory_MsgRemoveMinterControllerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMinterControllerInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Noble_Tokenfactory_MsgAsyncClientProtocol {
  internal func updateMasterMinter(
    _ request: Noble_Tokenfactory_MsgUpdateMasterMinter,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgUpdateMasterMinterResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateMasterMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMasterMinterInterceptors() ?? []
    )
  }

  internal func updatePauser(
    _ request: Noble_Tokenfactory_MsgUpdatePauser,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgUpdatePauserResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updatePauser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePauserInterceptors() ?? []
    )
  }

  internal func updateBlacklister(
    _ request: Noble_Tokenfactory_MsgUpdateBlacklister,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgUpdateBlacklisterResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateBlacklister.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBlacklisterInterceptors() ?? []
    )
  }

  internal func updateOwner(
    _ request: Noble_Tokenfactory_MsgUpdateOwner,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgUpdateOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.updateOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateOwnerInterceptors() ?? []
    )
  }

  internal func acceptOwner(
    _ request: Noble_Tokenfactory_MsgAcceptOwner,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgAcceptOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.acceptOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptOwnerInterceptors() ?? []
    )
  }

  internal func configureMinter(
    _ request: Noble_Tokenfactory_MsgConfigureMinter,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgConfigureMinterResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureMinterInterceptors() ?? []
    )
  }

  internal func removeMinter(
    _ request: Noble_Tokenfactory_MsgRemoveMinter,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgRemoveMinterResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMinterInterceptors() ?? []
    )
  }

  internal func mint(
    _ request: Noble_Tokenfactory_MsgMint,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func burn(
    _ request: Noble_Tokenfactory_MsgBurn,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgBurnResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func blacklist(
    _ request: Noble_Tokenfactory_MsgBlacklist,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgBlacklistResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.blacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistInterceptors() ?? []
    )
  }

  internal func unblacklist(
    _ request: Noble_Tokenfactory_MsgUnblacklist,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgUnblacklistResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.unblacklist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblacklistInterceptors() ?? []
    )
  }

  internal func pause(
    _ request: Noble_Tokenfactory_MsgPause,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgPauseResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.pause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseInterceptors() ?? []
    )
  }

  internal func unpause(
    _ request: Noble_Tokenfactory_MsgUnpause,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgUnpauseResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.unpause.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnpauseInterceptors() ?? []
    )
  }

  internal func configureMinterController(
    _ request: Noble_Tokenfactory_MsgConfigureMinterController,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgConfigureMinterControllerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureMinterControllerInterceptors() ?? []
    )
  }

  internal func removeMinterController(
    _ request: Noble_Tokenfactory_MsgRemoveMinterController,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Tokenfactory_MsgRemoveMinterControllerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMinterControllerInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Noble_Tokenfactory_MsgAsyncClient: Noble_Tokenfactory_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Noble_Tokenfactory_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateMasterMinter'.
  func makeUpdateMasterMinterInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgUpdateMasterMinter, Noble_Tokenfactory_MsgUpdateMasterMinterResponse>]

  /// - Returns: Interceptors to use when invoking 'updatePauser'.
  func makeUpdatePauserInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgUpdatePauser, Noble_Tokenfactory_MsgUpdatePauserResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBlacklister'.
  func makeUpdateBlacklisterInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgUpdateBlacklister, Noble_Tokenfactory_MsgUpdateBlacklisterResponse>]

  /// - Returns: Interceptors to use when invoking 'updateOwner'.
  func makeUpdateOwnerInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgUpdateOwner, Noble_Tokenfactory_MsgUpdateOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'acceptOwner'.
  func makeAcceptOwnerInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgAcceptOwner, Noble_Tokenfactory_MsgAcceptOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'configureMinter'.
  func makeConfigureMinterInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgConfigureMinter, Noble_Tokenfactory_MsgConfigureMinterResponse>]

  /// - Returns: Interceptors to use when invoking 'removeMinter'.
  func makeRemoveMinterInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgRemoveMinter, Noble_Tokenfactory_MsgRemoveMinterResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgMint, Noble_Tokenfactory_MsgMintResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgBurn, Noble_Tokenfactory_MsgBurnResponse>]

  /// - Returns: Interceptors to use when invoking 'blacklist'.
  func makeBlacklistInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgBlacklist, Noble_Tokenfactory_MsgBlacklistResponse>]

  /// - Returns: Interceptors to use when invoking 'unblacklist'.
  func makeUnblacklistInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgUnblacklist, Noble_Tokenfactory_MsgUnblacklistResponse>]

  /// - Returns: Interceptors to use when invoking 'pause'.
  func makePauseInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgPause, Noble_Tokenfactory_MsgPauseResponse>]

  /// - Returns: Interceptors to use when invoking 'unpause'.
  func makeUnpauseInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgUnpause, Noble_Tokenfactory_MsgUnpauseResponse>]

  /// - Returns: Interceptors to use when invoking 'configureMinterController'.
  func makeConfigureMinterControllerInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgConfigureMinterController, Noble_Tokenfactory_MsgConfigureMinterControllerResponse>]

  /// - Returns: Interceptors to use when invoking 'removeMinterController'.
  func makeRemoveMinterControllerInterceptors() -> [ClientInterceptor<Noble_Tokenfactory_MsgRemoveMinterController, Noble_Tokenfactory_MsgRemoveMinterControllerResponse>]
}

internal enum Noble_Tokenfactory_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "noble.tokenfactory.Msg",
    methods: [
      Noble_Tokenfactory_MsgClientMetadata.Methods.updateMasterMinter,
      Noble_Tokenfactory_MsgClientMetadata.Methods.updatePauser,
      Noble_Tokenfactory_MsgClientMetadata.Methods.updateBlacklister,
      Noble_Tokenfactory_MsgClientMetadata.Methods.updateOwner,
      Noble_Tokenfactory_MsgClientMetadata.Methods.acceptOwner,
      Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinter,
      Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinter,
      Noble_Tokenfactory_MsgClientMetadata.Methods.mint,
      Noble_Tokenfactory_MsgClientMetadata.Methods.burn,
      Noble_Tokenfactory_MsgClientMetadata.Methods.blacklist,
      Noble_Tokenfactory_MsgClientMetadata.Methods.unblacklist,
      Noble_Tokenfactory_MsgClientMetadata.Methods.pause,
      Noble_Tokenfactory_MsgClientMetadata.Methods.unpause,
      Noble_Tokenfactory_MsgClientMetadata.Methods.configureMinterController,
      Noble_Tokenfactory_MsgClientMetadata.Methods.removeMinterController,
    ]
  )

  internal enum Methods {
    internal static let updateMasterMinter = GRPCMethodDescriptor(
      name: "UpdateMasterMinter",
      path: "/noble.tokenfactory.Msg/UpdateMasterMinter",
      type: GRPCCallType.unary
    )

    internal static let updatePauser = GRPCMethodDescriptor(
      name: "UpdatePauser",
      path: "/noble.tokenfactory.Msg/UpdatePauser",
      type: GRPCCallType.unary
    )

    internal static let updateBlacklister = GRPCMethodDescriptor(
      name: "UpdateBlacklister",
      path: "/noble.tokenfactory.Msg/UpdateBlacklister",
      type: GRPCCallType.unary
    )

    internal static let updateOwner = GRPCMethodDescriptor(
      name: "UpdateOwner",
      path: "/noble.tokenfactory.Msg/UpdateOwner",
      type: GRPCCallType.unary
    )

    internal static let acceptOwner = GRPCMethodDescriptor(
      name: "AcceptOwner",
      path: "/noble.tokenfactory.Msg/AcceptOwner",
      type: GRPCCallType.unary
    )

    internal static let configureMinter = GRPCMethodDescriptor(
      name: "ConfigureMinter",
      path: "/noble.tokenfactory.Msg/ConfigureMinter",
      type: GRPCCallType.unary
    )

    internal static let removeMinter = GRPCMethodDescriptor(
      name: "RemoveMinter",
      path: "/noble.tokenfactory.Msg/RemoveMinter",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/noble.tokenfactory.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/noble.tokenfactory.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let blacklist = GRPCMethodDescriptor(
      name: "Blacklist",
      path: "/noble.tokenfactory.Msg/Blacklist",
      type: GRPCCallType.unary
    )

    internal static let unblacklist = GRPCMethodDescriptor(
      name: "Unblacklist",
      path: "/noble.tokenfactory.Msg/Unblacklist",
      type: GRPCCallType.unary
    )

    internal static let pause = GRPCMethodDescriptor(
      name: "Pause",
      path: "/noble.tokenfactory.Msg/Pause",
      type: GRPCCallType.unary
    )

    internal static let unpause = GRPCMethodDescriptor(
      name: "Unpause",
      path: "/noble.tokenfactory.Msg/Unpause",
      type: GRPCCallType.unary
    )

    internal static let configureMinterController = GRPCMethodDescriptor(
      name: "ConfigureMinterController",
      path: "/noble.tokenfactory.Msg/ConfigureMinterController",
      type: GRPCCallType.unary
    )

    internal static let removeMinterController = GRPCMethodDescriptor(
      name: "RemoveMinterController",
      path: "/noble.tokenfactory.Msg/RemoveMinterController",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Noble_Tokenfactory_MsgProvider: CallHandlerProvider {
  var interceptors: Noble_Tokenfactory_MsgServerInterceptorFactoryProtocol? { get }

  func updateMasterMinter(request: Noble_Tokenfactory_MsgUpdateMasterMinter, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgUpdateMasterMinterResponse>

  func updatePauser(request: Noble_Tokenfactory_MsgUpdatePauser, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgUpdatePauserResponse>

  func updateBlacklister(request: Noble_Tokenfactory_MsgUpdateBlacklister, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgUpdateBlacklisterResponse>

  func updateOwner(request: Noble_Tokenfactory_MsgUpdateOwner, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgUpdateOwnerResponse>

  func acceptOwner(request: Noble_Tokenfactory_MsgAcceptOwner, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgAcceptOwnerResponse>

  func configureMinter(request: Noble_Tokenfactory_MsgConfigureMinter, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgConfigureMinterResponse>

  func removeMinter(request: Noble_Tokenfactory_MsgRemoveMinter, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgRemoveMinterResponse>

  func mint(request: Noble_Tokenfactory_MsgMint, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgMintResponse>

  func burn(request: Noble_Tokenfactory_MsgBurn, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgBurnResponse>

  func blacklist(request: Noble_Tokenfactory_MsgBlacklist, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgBlacklistResponse>

  func unblacklist(request: Noble_Tokenfactory_MsgUnblacklist, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgUnblacklistResponse>

  func pause(request: Noble_Tokenfactory_MsgPause, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgPauseResponse>

  func unpause(request: Noble_Tokenfactory_MsgUnpause, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgUnpauseResponse>

  func configureMinterController(request: Noble_Tokenfactory_MsgConfigureMinterController, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgConfigureMinterControllerResponse>

  /// this line is used by starport scaffolding # proto/tx/rpc
  func removeMinterController(request: Noble_Tokenfactory_MsgRemoveMinterController, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Tokenfactory_MsgRemoveMinterControllerResponse>
}

extension Noble_Tokenfactory_MsgProvider {
  internal var serviceName: Substring {
    return Noble_Tokenfactory_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateMasterMinter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdateMasterMinter>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdateMasterMinterResponse>(),
        interceptors: self.interceptors?.makeUpdateMasterMinterInterceptors() ?? [],
        userFunction: self.updateMasterMinter(request:context:)
      )

    case "UpdatePauser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdatePauser>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdatePauserResponse>(),
        interceptors: self.interceptors?.makeUpdatePauserInterceptors() ?? [],
        userFunction: self.updatePauser(request:context:)
      )

    case "UpdateBlacklister":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdateBlacklister>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdateBlacklisterResponse>(),
        interceptors: self.interceptors?.makeUpdateBlacklisterInterceptors() ?? [],
        userFunction: self.updateBlacklister(request:context:)
      )

    case "UpdateOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdateOwner>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdateOwnerResponse>(),
        interceptors: self.interceptors?.makeUpdateOwnerInterceptors() ?? [],
        userFunction: self.updateOwner(request:context:)
      )

    case "AcceptOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgAcceptOwner>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgAcceptOwnerResponse>(),
        interceptors: self.interceptors?.makeAcceptOwnerInterceptors() ?? [],
        userFunction: self.acceptOwner(request:context:)
      )

    case "ConfigureMinter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgConfigureMinter>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgConfigureMinterResponse>(),
        interceptors: self.interceptors?.makeConfigureMinterInterceptors() ?? [],
        userFunction: self.configureMinter(request:context:)
      )

    case "RemoveMinter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgRemoveMinter>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgRemoveMinterResponse>(),
        interceptors: self.interceptors?.makeRemoveMinterInterceptors() ?? [],
        userFunction: self.removeMinter(request:context:)
      )

    case "Mint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgMint>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        userFunction: self.mint(request:context:)
      )

    case "Burn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        userFunction: self.burn(request:context:)
      )

    case "Blacklist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgBlacklist>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgBlacklistResponse>(),
        interceptors: self.interceptors?.makeBlacklistInterceptors() ?? [],
        userFunction: self.blacklist(request:context:)
      )

    case "Unblacklist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUnblacklist>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUnblacklistResponse>(),
        interceptors: self.interceptors?.makeUnblacklistInterceptors() ?? [],
        userFunction: self.unblacklist(request:context:)
      )

    case "Pause":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgPause>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgPauseResponse>(),
        interceptors: self.interceptors?.makePauseInterceptors() ?? [],
        userFunction: self.pause(request:context:)
      )

    case "Unpause":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUnpause>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUnpauseResponse>(),
        interceptors: self.interceptors?.makeUnpauseInterceptors() ?? [],
        userFunction: self.unpause(request:context:)
      )

    case "ConfigureMinterController":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgConfigureMinterController>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgConfigureMinterControllerResponse>(),
        interceptors: self.interceptors?.makeConfigureMinterControllerInterceptors() ?? [],
        userFunction: self.configureMinterController(request:context:)
      )

    case "RemoveMinterController":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgRemoveMinterController>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgRemoveMinterControllerResponse>(),
        interceptors: self.interceptors?.makeRemoveMinterControllerInterceptors() ?? [],
        userFunction: self.removeMinterController(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Noble_Tokenfactory_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Noble_Tokenfactory_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func updateMasterMinter(
    request: Noble_Tokenfactory_MsgUpdateMasterMinter,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgUpdateMasterMinterResponse

  @Sendable func updatePauser(
    request: Noble_Tokenfactory_MsgUpdatePauser,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgUpdatePauserResponse

  @Sendable func updateBlacklister(
    request: Noble_Tokenfactory_MsgUpdateBlacklister,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgUpdateBlacklisterResponse

  @Sendable func updateOwner(
    request: Noble_Tokenfactory_MsgUpdateOwner,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgUpdateOwnerResponse

  @Sendable func acceptOwner(
    request: Noble_Tokenfactory_MsgAcceptOwner,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgAcceptOwnerResponse

  @Sendable func configureMinter(
    request: Noble_Tokenfactory_MsgConfigureMinter,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgConfigureMinterResponse

  @Sendable func removeMinter(
    request: Noble_Tokenfactory_MsgRemoveMinter,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgRemoveMinterResponse

  @Sendable func mint(
    request: Noble_Tokenfactory_MsgMint,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgMintResponse

  @Sendable func burn(
    request: Noble_Tokenfactory_MsgBurn,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgBurnResponse

  @Sendable func blacklist(
    request: Noble_Tokenfactory_MsgBlacklist,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgBlacklistResponse

  @Sendable func unblacklist(
    request: Noble_Tokenfactory_MsgUnblacklist,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgUnblacklistResponse

  @Sendable func pause(
    request: Noble_Tokenfactory_MsgPause,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgPauseResponse

  @Sendable func unpause(
    request: Noble_Tokenfactory_MsgUnpause,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgUnpauseResponse

  @Sendable func configureMinterController(
    request: Noble_Tokenfactory_MsgConfigureMinterController,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgConfigureMinterControllerResponse

  /// this line is used by starport scaffolding # proto/tx/rpc
  @Sendable func removeMinterController(
    request: Noble_Tokenfactory_MsgRemoveMinterController,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Tokenfactory_MsgRemoveMinterControllerResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Noble_Tokenfactory_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Noble_Tokenfactory_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Noble_Tokenfactory_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Noble_Tokenfactory_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateMasterMinter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdateMasterMinter>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdateMasterMinterResponse>(),
        interceptors: self.interceptors?.makeUpdateMasterMinterInterceptors() ?? [],
        wrapping: self.updateMasterMinter(request:context:)
      )

    case "UpdatePauser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdatePauser>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdatePauserResponse>(),
        interceptors: self.interceptors?.makeUpdatePauserInterceptors() ?? [],
        wrapping: self.updatePauser(request:context:)
      )

    case "UpdateBlacklister":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdateBlacklister>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdateBlacklisterResponse>(),
        interceptors: self.interceptors?.makeUpdateBlacklisterInterceptors() ?? [],
        wrapping: self.updateBlacklister(request:context:)
      )

    case "UpdateOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUpdateOwner>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUpdateOwnerResponse>(),
        interceptors: self.interceptors?.makeUpdateOwnerInterceptors() ?? [],
        wrapping: self.updateOwner(request:context:)
      )

    case "AcceptOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgAcceptOwner>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgAcceptOwnerResponse>(),
        interceptors: self.interceptors?.makeAcceptOwnerInterceptors() ?? [],
        wrapping: self.acceptOwner(request:context:)
      )

    case "ConfigureMinter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgConfigureMinter>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgConfigureMinterResponse>(),
        interceptors: self.interceptors?.makeConfigureMinterInterceptors() ?? [],
        wrapping: self.configureMinter(request:context:)
      )

    case "RemoveMinter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgRemoveMinter>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgRemoveMinterResponse>(),
        interceptors: self.interceptors?.makeRemoveMinterInterceptors() ?? [],
        wrapping: self.removeMinter(request:context:)
      )

    case "Mint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgMint>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        wrapping: self.mint(request:context:)
      )

    case "Burn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        wrapping: self.burn(request:context:)
      )

    case "Blacklist":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgBlacklist>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgBlacklistResponse>(),
        interceptors: self.interceptors?.makeBlacklistInterceptors() ?? [],
        wrapping: self.blacklist(request:context:)
      )

    case "Unblacklist":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUnblacklist>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUnblacklistResponse>(),
        interceptors: self.interceptors?.makeUnblacklistInterceptors() ?? [],
        wrapping: self.unblacklist(request:context:)
      )

    case "Pause":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgPause>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgPauseResponse>(),
        interceptors: self.interceptors?.makePauseInterceptors() ?? [],
        wrapping: self.pause(request:context:)
      )

    case "Unpause":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgUnpause>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgUnpauseResponse>(),
        interceptors: self.interceptors?.makeUnpauseInterceptors() ?? [],
        wrapping: self.unpause(request:context:)
      )

    case "ConfigureMinterController":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgConfigureMinterController>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgConfigureMinterControllerResponse>(),
        interceptors: self.interceptors?.makeConfigureMinterControllerInterceptors() ?? [],
        wrapping: self.configureMinterController(request:context:)
      )

    case "RemoveMinterController":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Tokenfactory_MsgRemoveMinterController>(),
        responseSerializer: ProtobufSerializer<Noble_Tokenfactory_MsgRemoveMinterControllerResponse>(),
        interceptors: self.interceptors?.makeRemoveMinterControllerInterceptors() ?? [],
        wrapping: self.removeMinterController(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Noble_Tokenfactory_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'updateMasterMinter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateMasterMinterInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgUpdateMasterMinter, Noble_Tokenfactory_MsgUpdateMasterMinterResponse>]

  /// - Returns: Interceptors to use when handling 'updatePauser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatePauserInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgUpdatePauser, Noble_Tokenfactory_MsgUpdatePauserResponse>]

  /// - Returns: Interceptors to use when handling 'updateBlacklister'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBlacklisterInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgUpdateBlacklister, Noble_Tokenfactory_MsgUpdateBlacklisterResponse>]

  /// - Returns: Interceptors to use when handling 'updateOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateOwnerInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgUpdateOwner, Noble_Tokenfactory_MsgUpdateOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'acceptOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAcceptOwnerInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgAcceptOwner, Noble_Tokenfactory_MsgAcceptOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'configureMinter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigureMinterInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgConfigureMinter, Noble_Tokenfactory_MsgConfigureMinterResponse>]

  /// - Returns: Interceptors to use when handling 'removeMinter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveMinterInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgRemoveMinter, Noble_Tokenfactory_MsgRemoveMinterResponse>]

  /// - Returns: Interceptors to use when handling 'mint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgMint, Noble_Tokenfactory_MsgMintResponse>]

  /// - Returns: Interceptors to use when handling 'burn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgBurn, Noble_Tokenfactory_MsgBurnResponse>]

  /// - Returns: Interceptors to use when handling 'blacklist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlacklistInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgBlacklist, Noble_Tokenfactory_MsgBlacklistResponse>]

  /// - Returns: Interceptors to use when handling 'unblacklist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnblacklistInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgUnblacklist, Noble_Tokenfactory_MsgUnblacklistResponse>]

  /// - Returns: Interceptors to use when handling 'pause'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgPause, Noble_Tokenfactory_MsgPauseResponse>]

  /// - Returns: Interceptors to use when handling 'unpause'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnpauseInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgUnpause, Noble_Tokenfactory_MsgUnpauseResponse>]

  /// - Returns: Interceptors to use when handling 'configureMinterController'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigureMinterControllerInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgConfigureMinterController, Noble_Tokenfactory_MsgConfigureMinterControllerResponse>]

  /// - Returns: Interceptors to use when handling 'removeMinterController'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveMinterControllerInterceptors() -> [ServerInterceptor<Noble_Tokenfactory_MsgRemoveMinterController, Noble_Tokenfactory_MsgRemoveMinterControllerResponse>]
}

internal enum Noble_Tokenfactory_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "noble.tokenfactory.Msg",
    methods: [
      Noble_Tokenfactory_MsgServerMetadata.Methods.updateMasterMinter,
      Noble_Tokenfactory_MsgServerMetadata.Methods.updatePauser,
      Noble_Tokenfactory_MsgServerMetadata.Methods.updateBlacklister,
      Noble_Tokenfactory_MsgServerMetadata.Methods.updateOwner,
      Noble_Tokenfactory_MsgServerMetadata.Methods.acceptOwner,
      Noble_Tokenfactory_MsgServerMetadata.Methods.configureMinter,
      Noble_Tokenfactory_MsgServerMetadata.Methods.removeMinter,
      Noble_Tokenfactory_MsgServerMetadata.Methods.mint,
      Noble_Tokenfactory_MsgServerMetadata.Methods.burn,
      Noble_Tokenfactory_MsgServerMetadata.Methods.blacklist,
      Noble_Tokenfactory_MsgServerMetadata.Methods.unblacklist,
      Noble_Tokenfactory_MsgServerMetadata.Methods.pause,
      Noble_Tokenfactory_MsgServerMetadata.Methods.unpause,
      Noble_Tokenfactory_MsgServerMetadata.Methods.configureMinterController,
      Noble_Tokenfactory_MsgServerMetadata.Methods.removeMinterController,
    ]
  )

  internal enum Methods {
    internal static let updateMasterMinter = GRPCMethodDescriptor(
      name: "UpdateMasterMinter",
      path: "/noble.tokenfactory.Msg/UpdateMasterMinter",
      type: GRPCCallType.unary
    )

    internal static let updatePauser = GRPCMethodDescriptor(
      name: "UpdatePauser",
      path: "/noble.tokenfactory.Msg/UpdatePauser",
      type: GRPCCallType.unary
    )

    internal static let updateBlacklister = GRPCMethodDescriptor(
      name: "UpdateBlacklister",
      path: "/noble.tokenfactory.Msg/UpdateBlacklister",
      type: GRPCCallType.unary
    )

    internal static let updateOwner = GRPCMethodDescriptor(
      name: "UpdateOwner",
      path: "/noble.tokenfactory.Msg/UpdateOwner",
      type: GRPCCallType.unary
    )

    internal static let acceptOwner = GRPCMethodDescriptor(
      name: "AcceptOwner",
      path: "/noble.tokenfactory.Msg/AcceptOwner",
      type: GRPCCallType.unary
    )

    internal static let configureMinter = GRPCMethodDescriptor(
      name: "ConfigureMinter",
      path: "/noble.tokenfactory.Msg/ConfigureMinter",
      type: GRPCCallType.unary
    )

    internal static let removeMinter = GRPCMethodDescriptor(
      name: "RemoveMinter",
      path: "/noble.tokenfactory.Msg/RemoveMinter",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/noble.tokenfactory.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/noble.tokenfactory.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let blacklist = GRPCMethodDescriptor(
      name: "Blacklist",
      path: "/noble.tokenfactory.Msg/Blacklist",
      type: GRPCCallType.unary
    )

    internal static let unblacklist = GRPCMethodDescriptor(
      name: "Unblacklist",
      path: "/noble.tokenfactory.Msg/Unblacklist",
      type: GRPCCallType.unary
    )

    internal static let pause = GRPCMethodDescriptor(
      name: "Pause",
      path: "/noble.tokenfactory.Msg/Pause",
      type: GRPCCallType.unary
    )

    internal static let unpause = GRPCMethodDescriptor(
      name: "Unpause",
      path: "/noble.tokenfactory.Msg/Unpause",
      type: GRPCCallType.unary
    )

    internal static let configureMinterController = GRPCMethodDescriptor(
      name: "ConfigureMinterController",
      path: "/noble.tokenfactory.Msg/ConfigureMinterController",
      type: GRPCCallType.unary
    )

    internal static let removeMinterController = GRPCMethodDescriptor(
      name: "RemoveMinterController",
      path: "/noble.tokenfactory.Msg/RemoveMinterController",
      type: GRPCCallType.unary
    )
  }
}
