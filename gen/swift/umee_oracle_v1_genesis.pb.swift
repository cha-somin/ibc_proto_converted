// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: umee/oracle/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the oracle module's genesis state.
struct Umee_Oracle_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Umee_Oracle_V1_Params {
    get {return _storage._params ?? Umee_Oracle_V1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var feederDelegations: [Umee_Oracle_V1_FeederDelegation] {
    get {return _storage._feederDelegations}
    set {_uniqueStorage()._feederDelegations = newValue}
  }

  var exchangeRates: [Umee_Oracle_V1_ExchangeRateTuple] {
    get {return _storage._exchangeRates}
    set {_uniqueStorage()._exchangeRates = newValue}
  }

  var missCounters: [Umee_Oracle_V1_MissCounter] {
    get {return _storage._missCounters}
    set {_uniqueStorage()._missCounters = newValue}
  }

  var aggregateExchangeRatePrevotes: [Umee_Oracle_V1_AggregateExchangeRatePrevote] {
    get {return _storage._aggregateExchangeRatePrevotes}
    set {_uniqueStorage()._aggregateExchangeRatePrevotes = newValue}
  }

  var aggregateExchangeRateVotes: [Umee_Oracle_V1_AggregateExchangeRateVote] {
    get {return _storage._aggregateExchangeRateVotes}
    set {_uniqueStorage()._aggregateExchangeRateVotes = newValue}
  }

  var medians: [Umee_Oracle_V1_Price] {
    get {return _storage._medians}
    set {_uniqueStorage()._medians = newValue}
  }

  var historicPrices: [Umee_Oracle_V1_Price] {
    get {return _storage._historicPrices}
    set {_uniqueStorage()._historicPrices = newValue}
  }

  var medianDeviations: [Umee_Oracle_V1_Price] {
    get {return _storage._medianDeviations}
    set {_uniqueStorage()._medianDeviations = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// FeederDelegation is the address for where oracle feeder authority are
/// delegated to. By default this struct is only used at genesis to feed in
/// default feeder addresses.
struct Umee_Oracle_V1_FeederDelegation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feederAddress: String = String()

  var validatorAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MissCounter defines an miss counter and validator address pair used in
/// oracle module's genesis state
struct Umee_Oracle_V1_MissCounter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validatorAddress: String = String()

  var missCounter: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Price is an instance of a price "stamp"
struct Umee_Oracle_V1_Price {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var exchangeRateTuple: Umee_Oracle_V1_ExchangeRateTuple {
    get {return _exchangeRateTuple ?? Umee_Oracle_V1_ExchangeRateTuple()}
    set {_exchangeRateTuple = newValue}
  }
  /// Returns true if `exchangeRateTuple` has been explicitly set.
  var hasExchangeRateTuple: Bool {return self._exchangeRateTuple != nil}
  /// Clears the value of `exchangeRateTuple`. Subsequent reads from it will return its default value.
  mutating func clearExchangeRateTuple() {self._exchangeRateTuple = nil}

  var blockNum: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exchangeRateTuple: Umee_Oracle_V1_ExchangeRateTuple? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Umee_Oracle_V1_GenesisState: @unchecked Sendable {}
extension Umee_Oracle_V1_FeederDelegation: @unchecked Sendable {}
extension Umee_Oracle_V1_MissCounter: @unchecked Sendable {}
extension Umee_Oracle_V1_Price: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "umee.oracle.v1"

extension Umee_Oracle_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "feeder_delegations"),
    3: .standard(proto: "exchange_rates"),
    4: .standard(proto: "miss_counters"),
    5: .standard(proto: "aggregate_exchange_rate_prevotes"),
    6: .standard(proto: "aggregate_exchange_rate_votes"),
    7: .same(proto: "medians"),
    8: .standard(proto: "historic_prices"),
    9: .same(proto: "medianDeviations"),
  ]

  fileprivate class _StorageClass {
    var _params: Umee_Oracle_V1_Params? = nil
    var _feederDelegations: [Umee_Oracle_V1_FeederDelegation] = []
    var _exchangeRates: [Umee_Oracle_V1_ExchangeRateTuple] = []
    var _missCounters: [Umee_Oracle_V1_MissCounter] = []
    var _aggregateExchangeRatePrevotes: [Umee_Oracle_V1_AggregateExchangeRatePrevote] = []
    var _aggregateExchangeRateVotes: [Umee_Oracle_V1_AggregateExchangeRateVote] = []
    var _medians: [Umee_Oracle_V1_Price] = []
    var _historicPrices: [Umee_Oracle_V1_Price] = []
    var _medianDeviations: [Umee_Oracle_V1_Price] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _feederDelegations = source._feederDelegations
      _exchangeRates = source._exchangeRates
      _missCounters = source._missCounters
      _aggregateExchangeRatePrevotes = source._aggregateExchangeRatePrevotes
      _aggregateExchangeRateVotes = source._aggregateExchangeRateVotes
      _medians = source._medians
      _historicPrices = source._historicPrices
      _medianDeviations = source._medianDeviations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._feederDelegations) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._exchangeRates) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._missCounters) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._aggregateExchangeRatePrevotes) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._aggregateExchangeRateVotes) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._medians) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._historicPrices) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._medianDeviations) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._feederDelegations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._feederDelegations, fieldNumber: 2)
      }
      if !_storage._exchangeRates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._exchangeRates, fieldNumber: 3)
      }
      if !_storage._missCounters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._missCounters, fieldNumber: 4)
      }
      if !_storage._aggregateExchangeRatePrevotes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._aggregateExchangeRatePrevotes, fieldNumber: 5)
      }
      if !_storage._aggregateExchangeRateVotes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._aggregateExchangeRateVotes, fieldNumber: 6)
      }
      if !_storage._medians.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._medians, fieldNumber: 7)
      }
      if !_storage._historicPrices.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._historicPrices, fieldNumber: 8)
      }
      if !_storage._medianDeviations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._medianDeviations, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Oracle_V1_GenesisState, rhs: Umee_Oracle_V1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._feederDelegations != rhs_storage._feederDelegations {return false}
        if _storage._exchangeRates != rhs_storage._exchangeRates {return false}
        if _storage._missCounters != rhs_storage._missCounters {return false}
        if _storage._aggregateExchangeRatePrevotes != rhs_storage._aggregateExchangeRatePrevotes {return false}
        if _storage._aggregateExchangeRateVotes != rhs_storage._aggregateExchangeRateVotes {return false}
        if _storage._medians != rhs_storage._medians {return false}
        if _storage._historicPrices != rhs_storage._historicPrices {return false}
        if _storage._medianDeviations != rhs_storage._medianDeviations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Oracle_V1_FeederDelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeederDelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feeder_address"),
    2: .standard(proto: "validator_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feederAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feederAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.feederAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Oracle_V1_FeederDelegation, rhs: Umee_Oracle_V1_FeederDelegation) -> Bool {
    if lhs.feederAddress != rhs.feederAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Oracle_V1_MissCounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissCounter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .standard(proto: "miss_counter"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.missCounter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 1)
    }
    if self.missCounter != 0 {
      try visitor.visitSingularUInt64Field(value: self.missCounter, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Oracle_V1_MissCounter, rhs: Umee_Oracle_V1_MissCounter) -> Bool {
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.missCounter != rhs.missCounter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Oracle_V1_Price: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Price"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "exchange_rate_tuple"),
    2: .standard(proto: "block_num"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._exchangeRateTuple) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.blockNum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._exchangeRateTuple {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.blockNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNum, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Oracle_V1_Price, rhs: Umee_Oracle_V1_Price) -> Bool {
    if lhs._exchangeRateTuple != rhs._exchangeRateTuple {return false}
    if lhs.blockNum != rhs.blockNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
