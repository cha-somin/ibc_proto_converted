// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/finality/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the finality module's genesis state.
struct Babylon_Finality_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params the current params of the state.
  var params: Babylon_Finality_V1_Params {
    get {return _params ?? Babylon_Finality_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// indexed_blocks all the btc blocks and if their status are finalized.
  var indexedBlocks: [Babylon_Finality_V1_IndexedBlock] = []

  /// evidences all the evidences ever registered.
  var evidences: [Babylon_Finality_V1_Evidence] = []

  /// votes_sigs contains all the votes of finality providers ever registered.
  var voteSigs: [Babylon_Finality_V1_VoteSig] = []

  /// public_randomness contains all the public randomness ever commited from the finality providers.
  var publicRandomness: [Babylon_Finality_V1_PublicRandomness] = []

  /// pub_rand_commit contains all the public randomness commitment ever commited from the finality providers.
  var pubRandCommit: [Babylon_Finality_V1_PubRandCommitWithPK] = []

  /// signing_infos represents a map between finality provider public key and their
  /// signing infos.
  var signingInfos: [Babylon_Finality_V1_SigningInfo] = []

  /// missed_blocks represents a map between finality provider public key and their
  /// missed blocks.
  var missedBlocks: [Babylon_Finality_V1_FinalityProviderMissedBlocks] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Finality_V1_Params? = nil
}

/// VoteSig the vote of an finality provider
/// with the block of the vote, the finality provider btc public key and the vote signature.
struct Babylon_Finality_V1_VoteSig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// block_height is the height of the voted block.
  var blockHeight: UInt64 = 0

  /// fp_btc_pk is the BTC PK of the finality provider that casts this vote
  var fpBtcPk: Data = Data()

  /// finality_sig is the finality signature to this block
  /// where finality signature is an EOTS signature, i.e.
  var finalitySig: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PublicRandomness the block height and public randomness that the finality provider has submitted.
struct Babylon_Finality_V1_PublicRandomness {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// block_height is the height of block which the finality provider submited public randomness.
  var blockHeight: UInt64 = 0

  /// fp_btc_pk is the BTC PK of the finality provider that casts this vote.
  var fpBtcPk: Data = Data()

  /// pub_rand is the public randomness the finality provider has committed to.
  var pubRand: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PubRandCommitWithPK is the public randomness commitment with the finality provider's BTC public key
struct Babylon_Finality_V1_PubRandCommitWithPK {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fp_btc_pk is the BTC PK of the finality provider that commits the public randomness
  var fpBtcPk: Data = Data()

  /// pub_rand_commit is the public randomness commitment
  var pubRandCommit: Babylon_Finality_V1_PubRandCommit {
    get {return _pubRandCommit ?? Babylon_Finality_V1_PubRandCommit()}
    set {_pubRandCommit = newValue}
  }
  /// Returns true if `pubRandCommit` has been explicitly set.
  var hasPubRandCommit: Bool {return self._pubRandCommit != nil}
  /// Clears the value of `pubRandCommit`. Subsequent reads from it will return its default value.
  mutating func clearPubRandCommit() {self._pubRandCommit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pubRandCommit: Babylon_Finality_V1_PubRandCommit? = nil
}

/// SigningInfo stores finality provider signing info of corresponding BTC public key.
struct Babylon_Finality_V1_SigningInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fp_btc_pk is the BTC PK of the finality provider
  var fpBtcPk: Data = Data()

  /// fp_signing_info represents the signing info of this finality provider.
  var fpSigningInfo: Babylon_Finality_V1_FinalityProviderSigningInfo {
    get {return _fpSigningInfo ?? Babylon_Finality_V1_FinalityProviderSigningInfo()}
    set {_fpSigningInfo = newValue}
  }
  /// Returns true if `fpSigningInfo` has been explicitly set.
  var hasFpSigningInfo: Bool {return self._fpSigningInfo != nil}
  /// Clears the value of `fpSigningInfo`. Subsequent reads from it will return its default value.
  mutating func clearFpSigningInfo() {self._fpSigningInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fpSigningInfo: Babylon_Finality_V1_FinalityProviderSigningInfo? = nil
}

/// FinalityProviderMissedBlocks contains array of missed blocks of corresponding
/// BTC public key.
struct Babylon_Finality_V1_FinalityProviderMissedBlocks {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fp_btc_pk is the BTC PK of the finality provider
  var fpBtcPk: Data = Data()

  /// missed_blocks is an array of missed blocks by the finality provider.
  var missedBlocks: [Babylon_Finality_V1_MissedBlock] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MissedBlock contains height and missed status as boolean.
struct Babylon_Finality_V1_MissedBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// index is the height at which the block was missed.
  var index: Int64 = 0

  /// missed is the missed status.
  var missed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Finality_V1_GenesisState: @unchecked Sendable {}
extension Babylon_Finality_V1_VoteSig: @unchecked Sendable {}
extension Babylon_Finality_V1_PublicRandomness: @unchecked Sendable {}
extension Babylon_Finality_V1_PubRandCommitWithPK: @unchecked Sendable {}
extension Babylon_Finality_V1_SigningInfo: @unchecked Sendable {}
extension Babylon_Finality_V1_FinalityProviderMissedBlocks: @unchecked Sendable {}
extension Babylon_Finality_V1_MissedBlock: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.finality.v1"

extension Babylon_Finality_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "indexed_blocks"),
    3: .same(proto: "evidences"),
    4: .standard(proto: "vote_sigs"),
    5: .standard(proto: "public_randomness"),
    6: .standard(proto: "pub_rand_commit"),
    7: .standard(proto: "signing_infos"),
    8: .standard(proto: "missed_blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.indexedBlocks) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.evidences) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.voteSigs) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.publicRandomness) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.pubRandCommit) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.signingInfos) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.missedBlocks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.indexedBlocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.indexedBlocks, fieldNumber: 2)
    }
    if !self.evidences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.evidences, fieldNumber: 3)
    }
    if !self.voteSigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.voteSigs, fieldNumber: 4)
    }
    if !self.publicRandomness.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.publicRandomness, fieldNumber: 5)
    }
    if !self.pubRandCommit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pubRandCommit, fieldNumber: 6)
    }
    if !self.signingInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signingInfos, fieldNumber: 7)
    }
    if !self.missedBlocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missedBlocks, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_GenesisState, rhs: Babylon_Finality_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.indexedBlocks != rhs.indexedBlocks {return false}
    if lhs.evidences != rhs.evidences {return false}
    if lhs.voteSigs != rhs.voteSigs {return false}
    if lhs.publicRandomness != rhs.publicRandomness {return false}
    if lhs.pubRandCommit != rhs.pubRandCommit {return false}
    if lhs.signingInfos != rhs.signingInfos {return false}
    if lhs.missedBlocks != rhs.missedBlocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Finality_V1_VoteSig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoteSig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_height"),
    2: .standard(proto: "fp_btc_pk"),
    3: .standard(proto: "finality_sig"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.fpBtcPk) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.finalitySig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 1)
    }
    if !self.fpBtcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.fpBtcPk, fieldNumber: 2)
    }
    if !self.finalitySig.isEmpty {
      try visitor.visitSingularBytesField(value: self.finalitySig, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_VoteSig, rhs: Babylon_Finality_V1_VoteSig) -> Bool {
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.fpBtcPk != rhs.fpBtcPk {return false}
    if lhs.finalitySig != rhs.finalitySig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Finality_V1_PublicRandomness: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicRandomness"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_height"),
    2: .standard(proto: "fp_btc_pk"),
    3: .standard(proto: "pub_rand"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.fpBtcPk) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.pubRand) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 1)
    }
    if !self.fpBtcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.fpBtcPk, fieldNumber: 2)
    }
    if !self.pubRand.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubRand, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_PublicRandomness, rhs: Babylon_Finality_V1_PublicRandomness) -> Bool {
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.fpBtcPk != rhs.fpBtcPk {return false}
    if lhs.pubRand != rhs.pubRand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Finality_V1_PubRandCommitWithPK: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PubRandCommitWithPK"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fp_btc_pk"),
    2: .standard(proto: "pub_rand_commit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fpBtcPk) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pubRandCommit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fpBtcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.fpBtcPk, fieldNumber: 1)
    }
    try { if let v = self._pubRandCommit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_PubRandCommitWithPK, rhs: Babylon_Finality_V1_PubRandCommitWithPK) -> Bool {
    if lhs.fpBtcPk != rhs.fpBtcPk {return false}
    if lhs._pubRandCommit != rhs._pubRandCommit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Finality_V1_SigningInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SigningInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fp_btc_pk"),
    2: .standard(proto: "fp_signing_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fpBtcPk) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fpSigningInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fpBtcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.fpBtcPk, fieldNumber: 1)
    }
    try { if let v = self._fpSigningInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_SigningInfo, rhs: Babylon_Finality_V1_SigningInfo) -> Bool {
    if lhs.fpBtcPk != rhs.fpBtcPk {return false}
    if lhs._fpSigningInfo != rhs._fpSigningInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Finality_V1_FinalityProviderMissedBlocks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalityProviderMissedBlocks"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fp_btc_pk"),
    2: .standard(proto: "missed_blocks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fpBtcPk) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.missedBlocks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fpBtcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.fpBtcPk, fieldNumber: 1)
    }
    if !self.missedBlocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missedBlocks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_FinalityProviderMissedBlocks, rhs: Babylon_Finality_V1_FinalityProviderMissedBlocks) -> Bool {
    if lhs.fpBtcPk != rhs.fpBtcPk {return false}
    if lhs.missedBlocks != rhs.missedBlocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Finality_V1_MissedBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissedBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "missed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.missed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt64Field(value: self.index, fieldNumber: 1)
    }
    if self.missed != false {
      try visitor.visitSingularBoolField(value: self.missed, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_MissedBlock, rhs: Babylon_Finality_V1_MissedBlock) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.missed != rhs.missed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
