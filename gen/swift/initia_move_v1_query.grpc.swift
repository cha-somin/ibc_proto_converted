//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: initia/move/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Initia_Move_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Initia_Move_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? { get }

  func module(
    _ request: Initia_Move_V1_QueryModuleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryModuleRequest, Initia_Move_V1_QueryModuleResponse>

  func modules(
    _ request: Initia_Move_V1_QueryModulesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryModulesRequest, Initia_Move_V1_QueryModulesResponse>

  func resource(
    _ request: Initia_Move_V1_QueryResourceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryResourceRequest, Initia_Move_V1_QueryResourceResponse>

  func resources(
    _ request: Initia_Move_V1_QueryResourcesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryResourcesRequest, Initia_Move_V1_QueryResourcesResponse>

  func tableInfo(
    _ request: Initia_Move_V1_QueryTableInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryTableInfoRequest, Initia_Move_V1_QueryTableInfoResponse>

  func tableEntry(
    _ request: Initia_Move_V1_QueryTableEntryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryTableEntryRequest, Initia_Move_V1_QueryTableEntryResponse>

  func tableEntries(
    _ request: Initia_Move_V1_QueryTableEntriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryTableEntriesRequest, Initia_Move_V1_QueryTableEntriesResponse>

  func legacyView(
    _ request: Initia_Move_V1_QueryLegacyViewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryLegacyViewRequest, Initia_Move_V1_QueryLegacyViewResponse>

  func view(
    _ request: Initia_Move_V1_QueryViewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryViewRequest, Initia_Move_V1_QueryViewResponse>

  func viewBatch(
    _ request: Initia_Move_V1_QueryViewBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryViewBatchRequest, Initia_Move_V1_QueryViewBatchResponse>

  func viewJSON(
    _ request: Initia_Move_V1_QueryViewJSONRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryViewJSONRequest, Initia_Move_V1_QueryViewJSONResponse>

  func viewJSONBatch(
    _ request: Initia_Move_V1_QueryViewJSONBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryViewJSONBatchRequest, Initia_Move_V1_QueryViewJSONBatchResponse>

  func scriptABI(
    _ request: Initia_Move_V1_QueryScriptABIRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryScriptABIRequest, Initia_Move_V1_QueryScriptABIResponse>

  func params(
    _ request: Initia_Move_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryParamsRequest, Initia_Move_V1_QueryParamsResponse>

  func metadata(
    _ request: Initia_Move_V1_QueryMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryMetadataRequest, Initia_Move_V1_QueryMetadataResponse>

  func denom(
    _ request: Initia_Move_V1_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Move_V1_QueryDenomRequest, Initia_Move_V1_QueryDenomResponse>
}

extension Initia_Move_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "initia.move.v1.Query"
  }

  /// Module gets the module info
  ///
  /// - Parameters:
  ///   - request: Request to send to Module.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func module(
    _ request: Initia_Move_V1_QueryModuleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryModuleRequest, Initia_Move_V1_QueryModuleResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.module.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleInterceptors() ?? []
    )
  }

  /// Modules gets the module infos
  ///
  /// - Parameters:
  ///   - request: Request to send to Modules.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func modules(
    _ request: Initia_Move_V1_QueryModulesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryModulesRequest, Initia_Move_V1_QueryModulesResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.modules.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModulesInterceptors() ?? []
    )
  }

  /// Resource gets the module info
  ///
  /// - Parameters:
  ///   - request: Request to send to Resource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resource(
    _ request: Initia_Move_V1_QueryResourceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryResourceRequest, Initia_Move_V1_QueryResourceResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.resource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourceInterceptors() ?? []
    )
  }

  /// Resources gets the module infos
  ///
  /// - Parameters:
  ///   - request: Request to send to Resources.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resources(
    _ request: Initia_Move_V1_QueryResourcesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryResourcesRequest, Initia_Move_V1_QueryResourcesResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.resources.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourcesInterceptors() ?? []
    )
  }

  /// Query table info of the given address
  ///
  /// - Parameters:
  ///   - request: Request to send to TableInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tableInfo(
    _ request: Initia_Move_V1_QueryTableInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryTableInfoRequest, Initia_Move_V1_QueryTableInfoResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableInfoInterceptors() ?? []
    )
  }

  /// Query table entry of the given key
  ///
  /// - Parameters:
  ///   - request: Request to send to TableEntry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tableEntry(
    _ request: Initia_Move_V1_QueryTableEntryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryTableEntryRequest, Initia_Move_V1_QueryTableEntryResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableEntry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableEntryInterceptors() ?? []
    )
  }

  /// Query table entries with pagination
  ///
  /// - Parameters:
  ///   - request: Request to send to TableEntries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tableEntries(
    _ request: Initia_Move_V1_QueryTableEntriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryTableEntriesRequest, Initia_Move_V1_QueryTableEntriesResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableEntries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableEntriesInterceptors() ?? []
    )
  }

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// LegacyView execute view function and return the view result.
  ///
  /// - Parameters:
  ///   - request: Request to send to LegacyView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func legacyView(
    _ request: Initia_Move_V1_QueryLegacyViewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryLegacyViewRequest, Initia_Move_V1_QueryLegacyViewResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.legacyView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLegacyViewInterceptors() ?? []
    )
  }

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// View execute view function and return the view result
  ///
  /// - Parameters:
  ///   - request: Request to send to View.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func view(
    _ request: Initia_Move_V1_QueryViewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryViewRequest, Initia_Move_V1_QueryViewResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.view.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewInterceptors() ?? []
    )
  }

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// ViewBatch execute multiple view functions and return the view results
  ///
  /// - Parameters:
  ///   - request: Request to send to ViewBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func viewBatch(
    _ request: Initia_Move_V1_QueryViewBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryViewBatchRequest, Initia_Move_V1_QueryViewBatchResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewBatchInterceptors() ?? []
    )
  }

  /// ViewJSON execute view function with json arguemtns and return the view result
  ///
  /// - Parameters:
  ///   - request: Request to send to ViewJSON.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func viewJSON(
    _ request: Initia_Move_V1_QueryViewJSONRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryViewJSONRequest, Initia_Move_V1_QueryViewJSONResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewJSON.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewJSONInterceptors() ?? []
    )
  }

  /// ViewJSONBatch execute multiple view functions with json arguemtns and return the view results
  ///
  /// - Parameters:
  ///   - request: Request to send to ViewJSONBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func viewJSONBatch(
    _ request: Initia_Move_V1_QueryViewJSONBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryViewJSONBatchRequest, Initia_Move_V1_QueryViewJSONBatchResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewJSONBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewJSONBatchInterceptors() ?? []
    )
  }

  /// ScriptABI decode script bytes into ABI
  ///
  /// - Parameters:
  ///   - request: Request to send to ScriptABI.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scriptABI(
    _ request: Initia_Move_V1_QueryScriptABIRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryScriptABIRequest, Initia_Move_V1_QueryScriptABIResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.scriptABI.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScriptABIInterceptors() ?? []
    )
  }

  /// Params queries all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Initia_Move_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryParamsRequest, Initia_Move_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Metadata converts metadata to denom
  ///
  /// - Parameters:
  ///   - request: Request to send to Metadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func metadata(
    _ request: Initia_Move_V1_QueryMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryMetadataRequest, Initia_Move_V1_QueryMetadataResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.metadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMetadataInterceptors() ?? []
    )
  }

  /// Denom converts denom to metadata
  ///
  /// - Parameters:
  ///   - request: Request to send to Denom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denom(
    _ request: Initia_Move_V1_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Move_V1_QueryDenomRequest, Initia_Move_V1_QueryDenomResponse> {
    return self.makeUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Initia_Move_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Initia_Move_V1_QueryNIOClient")
internal final class Initia_Move_V1_QueryClient: Initia_Move_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the initia.move.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Initia_Move_V1_QueryNIOClient: Initia_Move_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the initia.move.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Initia_Move_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeModuleCall(
    _ request: Initia_Move_V1_QueryModuleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryModuleRequest, Initia_Move_V1_QueryModuleResponse>

  func makeModulesCall(
    _ request: Initia_Move_V1_QueryModulesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryModulesRequest, Initia_Move_V1_QueryModulesResponse>

  func makeResourceCall(
    _ request: Initia_Move_V1_QueryResourceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryResourceRequest, Initia_Move_V1_QueryResourceResponse>

  func makeResourcesCall(
    _ request: Initia_Move_V1_QueryResourcesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryResourcesRequest, Initia_Move_V1_QueryResourcesResponse>

  func makeTableInfoCall(
    _ request: Initia_Move_V1_QueryTableInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryTableInfoRequest, Initia_Move_V1_QueryTableInfoResponse>

  func makeTableEntryCall(
    _ request: Initia_Move_V1_QueryTableEntryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryTableEntryRequest, Initia_Move_V1_QueryTableEntryResponse>

  func makeTableEntriesCall(
    _ request: Initia_Move_V1_QueryTableEntriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryTableEntriesRequest, Initia_Move_V1_QueryTableEntriesResponse>

  func makeLegacyViewCall(
    _ request: Initia_Move_V1_QueryLegacyViewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryLegacyViewRequest, Initia_Move_V1_QueryLegacyViewResponse>

  func makeViewCall(
    _ request: Initia_Move_V1_QueryViewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewRequest, Initia_Move_V1_QueryViewResponse>

  func makeViewBatchCall(
    _ request: Initia_Move_V1_QueryViewBatchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewBatchRequest, Initia_Move_V1_QueryViewBatchResponse>

  func makeViewJsonCall(
    _ request: Initia_Move_V1_QueryViewJSONRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewJSONRequest, Initia_Move_V1_QueryViewJSONResponse>

  func makeViewJsonbatchCall(
    _ request: Initia_Move_V1_QueryViewJSONBatchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewJSONBatchRequest, Initia_Move_V1_QueryViewJSONBatchResponse>

  func makeScriptAbiCall(
    _ request: Initia_Move_V1_QueryScriptABIRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryScriptABIRequest, Initia_Move_V1_QueryScriptABIResponse>

  func makeParamsCall(
    _ request: Initia_Move_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryParamsRequest, Initia_Move_V1_QueryParamsResponse>

  func makeMetadataCall(
    _ request: Initia_Move_V1_QueryMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryMetadataRequest, Initia_Move_V1_QueryMetadataResponse>

  func makeDenomCall(
    _ request: Initia_Move_V1_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryDenomRequest, Initia_Move_V1_QueryDenomResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Move_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Initia_Move_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeModuleCall(
    _ request: Initia_Move_V1_QueryModuleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryModuleRequest, Initia_Move_V1_QueryModuleResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.module.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleInterceptors() ?? []
    )
  }

  internal func makeModulesCall(
    _ request: Initia_Move_V1_QueryModulesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryModulesRequest, Initia_Move_V1_QueryModulesResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.modules.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModulesInterceptors() ?? []
    )
  }

  internal func makeResourceCall(
    _ request: Initia_Move_V1_QueryResourceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryResourceRequest, Initia_Move_V1_QueryResourceResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.resource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourceInterceptors() ?? []
    )
  }

  internal func makeResourcesCall(
    _ request: Initia_Move_V1_QueryResourcesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryResourcesRequest, Initia_Move_V1_QueryResourcesResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.resources.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourcesInterceptors() ?? []
    )
  }

  internal func makeTableInfoCall(
    _ request: Initia_Move_V1_QueryTableInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryTableInfoRequest, Initia_Move_V1_QueryTableInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableInfoInterceptors() ?? []
    )
  }

  internal func makeTableEntryCall(
    _ request: Initia_Move_V1_QueryTableEntryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryTableEntryRequest, Initia_Move_V1_QueryTableEntryResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableEntry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableEntryInterceptors() ?? []
    )
  }

  internal func makeTableEntriesCall(
    _ request: Initia_Move_V1_QueryTableEntriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryTableEntriesRequest, Initia_Move_V1_QueryTableEntriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableEntries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableEntriesInterceptors() ?? []
    )
  }

  internal func makeLegacyViewCall(
    _ request: Initia_Move_V1_QueryLegacyViewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryLegacyViewRequest, Initia_Move_V1_QueryLegacyViewResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.legacyView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLegacyViewInterceptors() ?? []
    )
  }

  internal func makeViewCall(
    _ request: Initia_Move_V1_QueryViewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewRequest, Initia_Move_V1_QueryViewResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.view.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewInterceptors() ?? []
    )
  }

  internal func makeViewBatchCall(
    _ request: Initia_Move_V1_QueryViewBatchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewBatchRequest, Initia_Move_V1_QueryViewBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewBatchInterceptors() ?? []
    )
  }

  internal func makeViewJsonCall(
    _ request: Initia_Move_V1_QueryViewJSONRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewJSONRequest, Initia_Move_V1_QueryViewJSONResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewJSON.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewJSONInterceptors() ?? []
    )
  }

  internal func makeViewJsonbatchCall(
    _ request: Initia_Move_V1_QueryViewJSONBatchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryViewJSONBatchRequest, Initia_Move_V1_QueryViewJSONBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewJSONBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewJSONBatchInterceptors() ?? []
    )
  }

  internal func makeScriptAbiCall(
    _ request: Initia_Move_V1_QueryScriptABIRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryScriptABIRequest, Initia_Move_V1_QueryScriptABIResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.scriptABI.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScriptABIInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Initia_Move_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryParamsRequest, Initia_Move_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeMetadataCall(
    _ request: Initia_Move_V1_QueryMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryMetadataRequest, Initia_Move_V1_QueryMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.metadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMetadataInterceptors() ?? []
    )
  }

  internal func makeDenomCall(
    _ request: Initia_Move_V1_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Move_V1_QueryDenomRequest, Initia_Move_V1_QueryDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Move_V1_QueryAsyncClientProtocol {
  internal func module(
    _ request: Initia_Move_V1_QueryModuleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryModuleResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.module.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleInterceptors() ?? []
    )
  }

  internal func modules(
    _ request: Initia_Move_V1_QueryModulesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryModulesResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.modules.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModulesInterceptors() ?? []
    )
  }

  internal func resource(
    _ request: Initia_Move_V1_QueryResourceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryResourceResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.resource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourceInterceptors() ?? []
    )
  }

  internal func resources(
    _ request: Initia_Move_V1_QueryResourcesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryResourcesResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.resources.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourcesInterceptors() ?? []
    )
  }

  internal func tableInfo(
    _ request: Initia_Move_V1_QueryTableInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryTableInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableInfoInterceptors() ?? []
    )
  }

  internal func tableEntry(
    _ request: Initia_Move_V1_QueryTableEntryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryTableEntryResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableEntry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableEntryInterceptors() ?? []
    )
  }

  internal func tableEntries(
    _ request: Initia_Move_V1_QueryTableEntriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryTableEntriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.tableEntries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTableEntriesInterceptors() ?? []
    )
  }

  internal func legacyView(
    _ request: Initia_Move_V1_QueryLegacyViewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryLegacyViewResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.legacyView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLegacyViewInterceptors() ?? []
    )
  }

  internal func view(
    _ request: Initia_Move_V1_QueryViewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryViewResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.view.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewInterceptors() ?? []
    )
  }

  internal func viewBatch(
    _ request: Initia_Move_V1_QueryViewBatchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryViewBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewBatchInterceptors() ?? []
    )
  }

  internal func viewJSON(
    _ request: Initia_Move_V1_QueryViewJSONRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryViewJSONResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewJSON.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewJSONInterceptors() ?? []
    )
  }

  internal func viewJSONBatch(
    _ request: Initia_Move_V1_QueryViewJSONBatchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryViewJSONBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.viewJSONBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeViewJSONBatchInterceptors() ?? []
    )
  }

  internal func scriptABI(
    _ request: Initia_Move_V1_QueryScriptABIRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryScriptABIResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.scriptABI.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScriptABIInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Initia_Move_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func metadata(
    _ request: Initia_Move_V1_QueryMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.metadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMetadataInterceptors() ?? []
    )
  }

  internal func denom(
    _ request: Initia_Move_V1_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Move_V1_QueryDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Move_V1_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Initia_Move_V1_QueryAsyncClient: Initia_Move_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Move_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Initia_Move_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'module'.
  func makeModuleInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryModuleRequest, Initia_Move_V1_QueryModuleResponse>]

  /// - Returns: Interceptors to use when invoking 'modules'.
  func makeModulesInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryModulesRequest, Initia_Move_V1_QueryModulesResponse>]

  /// - Returns: Interceptors to use when invoking 'resource'.
  func makeResourceInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryResourceRequest, Initia_Move_V1_QueryResourceResponse>]

  /// - Returns: Interceptors to use when invoking 'resources'.
  func makeResourcesInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryResourcesRequest, Initia_Move_V1_QueryResourcesResponse>]

  /// - Returns: Interceptors to use when invoking 'tableInfo'.
  func makeTableInfoInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryTableInfoRequest, Initia_Move_V1_QueryTableInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'tableEntry'.
  func makeTableEntryInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryTableEntryRequest, Initia_Move_V1_QueryTableEntryResponse>]

  /// - Returns: Interceptors to use when invoking 'tableEntries'.
  func makeTableEntriesInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryTableEntriesRequest, Initia_Move_V1_QueryTableEntriesResponse>]

  /// - Returns: Interceptors to use when invoking 'legacyView'.
  func makeLegacyViewInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryLegacyViewRequest, Initia_Move_V1_QueryLegacyViewResponse>]

  /// - Returns: Interceptors to use when invoking 'view'.
  func makeViewInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryViewRequest, Initia_Move_V1_QueryViewResponse>]

  /// - Returns: Interceptors to use when invoking 'viewBatch'.
  func makeViewBatchInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryViewBatchRequest, Initia_Move_V1_QueryViewBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'viewJSON'.
  func makeViewJSONInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryViewJSONRequest, Initia_Move_V1_QueryViewJSONResponse>]

  /// - Returns: Interceptors to use when invoking 'viewJSONBatch'.
  func makeViewJSONBatchInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryViewJSONBatchRequest, Initia_Move_V1_QueryViewJSONBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'scriptABI'.
  func makeScriptABIInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryScriptABIRequest, Initia_Move_V1_QueryScriptABIResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryParamsRequest, Initia_Move_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'metadata'.
  func makeMetadataInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryMetadataRequest, Initia_Move_V1_QueryMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denom'.
  func makeDenomInterceptors() -> [ClientInterceptor<Initia_Move_V1_QueryDenomRequest, Initia_Move_V1_QueryDenomResponse>]
}

internal enum Initia_Move_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "initia.move.v1.Query",
    methods: [
      Initia_Move_V1_QueryClientMetadata.Methods.module,
      Initia_Move_V1_QueryClientMetadata.Methods.modules,
      Initia_Move_V1_QueryClientMetadata.Methods.resource,
      Initia_Move_V1_QueryClientMetadata.Methods.resources,
      Initia_Move_V1_QueryClientMetadata.Methods.tableInfo,
      Initia_Move_V1_QueryClientMetadata.Methods.tableEntry,
      Initia_Move_V1_QueryClientMetadata.Methods.tableEntries,
      Initia_Move_V1_QueryClientMetadata.Methods.legacyView,
      Initia_Move_V1_QueryClientMetadata.Methods.view,
      Initia_Move_V1_QueryClientMetadata.Methods.viewBatch,
      Initia_Move_V1_QueryClientMetadata.Methods.viewJSON,
      Initia_Move_V1_QueryClientMetadata.Methods.viewJSONBatch,
      Initia_Move_V1_QueryClientMetadata.Methods.scriptABI,
      Initia_Move_V1_QueryClientMetadata.Methods.params,
      Initia_Move_V1_QueryClientMetadata.Methods.metadata,
      Initia_Move_V1_QueryClientMetadata.Methods.denom,
    ]
  )

  internal enum Methods {
    internal static let module = GRPCMethodDescriptor(
      name: "Module",
      path: "/initia.move.v1.Query/Module",
      type: GRPCCallType.unary
    )

    internal static let modules = GRPCMethodDescriptor(
      name: "Modules",
      path: "/initia.move.v1.Query/Modules",
      type: GRPCCallType.unary
    )

    internal static let resource = GRPCMethodDescriptor(
      name: "Resource",
      path: "/initia.move.v1.Query/Resource",
      type: GRPCCallType.unary
    )

    internal static let resources = GRPCMethodDescriptor(
      name: "Resources",
      path: "/initia.move.v1.Query/Resources",
      type: GRPCCallType.unary
    )

    internal static let tableInfo = GRPCMethodDescriptor(
      name: "TableInfo",
      path: "/initia.move.v1.Query/TableInfo",
      type: GRPCCallType.unary
    )

    internal static let tableEntry = GRPCMethodDescriptor(
      name: "TableEntry",
      path: "/initia.move.v1.Query/TableEntry",
      type: GRPCCallType.unary
    )

    internal static let tableEntries = GRPCMethodDescriptor(
      name: "TableEntries",
      path: "/initia.move.v1.Query/TableEntries",
      type: GRPCCallType.unary
    )

    internal static let legacyView = GRPCMethodDescriptor(
      name: "LegacyView",
      path: "/initia.move.v1.Query/LegacyView",
      type: GRPCCallType.unary
    )

    internal static let view = GRPCMethodDescriptor(
      name: "View",
      path: "/initia.move.v1.Query/View",
      type: GRPCCallType.unary
    )

    internal static let viewBatch = GRPCMethodDescriptor(
      name: "ViewBatch",
      path: "/initia.move.v1.Query/ViewBatch",
      type: GRPCCallType.unary
    )

    internal static let viewJSON = GRPCMethodDescriptor(
      name: "ViewJSON",
      path: "/initia.move.v1.Query/ViewJSON",
      type: GRPCCallType.unary
    )

    internal static let viewJSONBatch = GRPCMethodDescriptor(
      name: "ViewJSONBatch",
      path: "/initia.move.v1.Query/ViewJSONBatch",
      type: GRPCCallType.unary
    )

    internal static let scriptABI = GRPCMethodDescriptor(
      name: "ScriptABI",
      path: "/initia.move.v1.Query/ScriptABI",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/initia.move.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let metadata = GRPCMethodDescriptor(
      name: "Metadata",
      path: "/initia.move.v1.Query/Metadata",
      type: GRPCCallType.unary
    )

    internal static let denom = GRPCMethodDescriptor(
      name: "Denom",
      path: "/initia.move.v1.Query/Denom",
      type: GRPCCallType.unary
    )
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Initia_Move_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Initia_Move_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Module gets the module info
  func module(request: Initia_Move_V1_QueryModuleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryModuleResponse>

  /// Modules gets the module infos
  func modules(request: Initia_Move_V1_QueryModulesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryModulesResponse>

  /// Resource gets the module info
  func resource(request: Initia_Move_V1_QueryResourceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryResourceResponse>

  /// Resources gets the module infos
  func resources(request: Initia_Move_V1_QueryResourcesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryResourcesResponse>

  /// Query table info of the given address
  func tableInfo(request: Initia_Move_V1_QueryTableInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryTableInfoResponse>

  /// Query table entry of the given key
  func tableEntry(request: Initia_Move_V1_QueryTableEntryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryTableEntryResponse>

  /// Query table entries with pagination
  func tableEntries(request: Initia_Move_V1_QueryTableEntriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryTableEntriesResponse>

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// LegacyView execute view function and return the view result.
  func legacyView(request: Initia_Move_V1_QueryLegacyViewRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryLegacyViewResponse>

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// View execute view function and return the view result
  func view(request: Initia_Move_V1_QueryViewRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryViewResponse>

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// ViewBatch execute multiple view functions and return the view results
  func viewBatch(request: Initia_Move_V1_QueryViewBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryViewBatchResponse>

  /// ViewJSON execute view function with json arguemtns and return the view result
  func viewJSON(request: Initia_Move_V1_QueryViewJSONRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryViewJSONResponse>

  /// ViewJSONBatch execute multiple view functions with json arguemtns and return the view results
  func viewJSONBatch(request: Initia_Move_V1_QueryViewJSONBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryViewJSONBatchResponse>

  /// ScriptABI decode script bytes into ABI
  func scriptABI(request: Initia_Move_V1_QueryScriptABIRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryScriptABIResponse>

  /// Params queries all parameters.
  func params(request: Initia_Move_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryParamsResponse>

  /// Metadata converts metadata to denom
  func metadata(request: Initia_Move_V1_QueryMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryMetadataResponse>

  /// Denom converts denom to metadata
  func denom(request: Initia_Move_V1_QueryDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Move_V1_QueryDenomResponse>
}

extension Initia_Move_V1_QueryProvider {
  internal var serviceName: Substring {
    return Initia_Move_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Module":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryModuleRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryModuleResponse>(),
        interceptors: self.interceptors?.makeModuleInterceptors() ?? [],
        userFunction: self.module(request:context:)
      )

    case "Modules":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryModulesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryModulesResponse>(),
        interceptors: self.interceptors?.makeModulesInterceptors() ?? [],
        userFunction: self.modules(request:context:)
      )

    case "Resource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryResourceRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryResourceResponse>(),
        interceptors: self.interceptors?.makeResourceInterceptors() ?? [],
        userFunction: self.resource(request:context:)
      )

    case "Resources":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryResourcesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryResourcesResponse>(),
        interceptors: self.interceptors?.makeResourcesInterceptors() ?? [],
        userFunction: self.resources(request:context:)
      )

    case "TableInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryTableInfoRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryTableInfoResponse>(),
        interceptors: self.interceptors?.makeTableInfoInterceptors() ?? [],
        userFunction: self.tableInfo(request:context:)
      )

    case "TableEntry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryTableEntryRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryTableEntryResponse>(),
        interceptors: self.interceptors?.makeTableEntryInterceptors() ?? [],
        userFunction: self.tableEntry(request:context:)
      )

    case "TableEntries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryTableEntriesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryTableEntriesResponse>(),
        interceptors: self.interceptors?.makeTableEntriesInterceptors() ?? [],
        userFunction: self.tableEntries(request:context:)
      )

    case "LegacyView":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryLegacyViewRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryLegacyViewResponse>(),
        interceptors: self.interceptors?.makeLegacyViewInterceptors() ?? [],
        userFunction: self.legacyView(request:context:)
      )

    case "View":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewResponse>(),
        interceptors: self.interceptors?.makeViewInterceptors() ?? [],
        userFunction: self.view(request:context:)
      )

    case "ViewBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewBatchRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewBatchResponse>(),
        interceptors: self.interceptors?.makeViewBatchInterceptors() ?? [],
        userFunction: self.viewBatch(request:context:)
      )

    case "ViewJSON":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewJSONRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewJSONResponse>(),
        interceptors: self.interceptors?.makeViewJSONInterceptors() ?? [],
        userFunction: self.viewJSON(request:context:)
      )

    case "ViewJSONBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewJSONBatchRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewJSONBatchResponse>(),
        interceptors: self.interceptors?.makeViewJSONBatchInterceptors() ?? [],
        userFunction: self.viewJSONBatch(request:context:)
      )

    case "ScriptABI":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryScriptABIRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryScriptABIResponse>(),
        interceptors: self.interceptors?.makeScriptABIInterceptors() ?? [],
        userFunction: self.scriptABI(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Metadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryMetadataResponse>(),
        interceptors: self.interceptors?.makeMetadataInterceptors() ?? [],
        userFunction: self.metadata(request:context:)
      )

    case "Denom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryDenomRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeDenomInterceptors() ?? [],
        userFunction: self.denom(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query provides defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Initia_Move_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Initia_Move_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Module gets the module info
  @Sendable func module(
    request: Initia_Move_V1_QueryModuleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryModuleResponse

  /// Modules gets the module infos
  @Sendable func modules(
    request: Initia_Move_V1_QueryModulesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryModulesResponse

  /// Resource gets the module info
  @Sendable func resource(
    request: Initia_Move_V1_QueryResourceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryResourceResponse

  /// Resources gets the module infos
  @Sendable func resources(
    request: Initia_Move_V1_QueryResourcesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryResourcesResponse

  /// Query table info of the given address
  @Sendable func tableInfo(
    request: Initia_Move_V1_QueryTableInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryTableInfoResponse

  /// Query table entry of the given key
  @Sendable func tableEntry(
    request: Initia_Move_V1_QueryTableEntryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryTableEntryResponse

  /// Query table entries with pagination
  @Sendable func tableEntries(
    request: Initia_Move_V1_QueryTableEntriesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryTableEntriesResponse

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// LegacyView execute view function and return the view result.
  @Sendable func legacyView(
    request: Initia_Move_V1_QueryLegacyViewRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryLegacyViewResponse

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// View execute view function and return the view result
  @Sendable func view(
    request: Initia_Move_V1_QueryViewRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryViewResponse

  /// Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch
  /// ViewBatch execute multiple view functions and return the view results
  @Sendable func viewBatch(
    request: Initia_Move_V1_QueryViewBatchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryViewBatchResponse

  /// ViewJSON execute view function with json arguemtns and return the view result
  @Sendable func viewJSON(
    request: Initia_Move_V1_QueryViewJSONRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryViewJSONResponse

  /// ViewJSONBatch execute multiple view functions with json arguemtns and return the view results
  @Sendable func viewJSONBatch(
    request: Initia_Move_V1_QueryViewJSONBatchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryViewJSONBatchResponse

  /// ScriptABI decode script bytes into ABI
  @Sendable func scriptABI(
    request: Initia_Move_V1_QueryScriptABIRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryScriptABIResponse

  /// Params queries all parameters.
  @Sendable func params(
    request: Initia_Move_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryParamsResponse

  /// Metadata converts metadata to denom
  @Sendable func metadata(
    request: Initia_Move_V1_QueryMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryMetadataResponse

  /// Denom converts denom to metadata
  @Sendable func denom(
    request: Initia_Move_V1_QueryDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Move_V1_QueryDenomResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Move_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Initia_Move_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Initia_Move_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Initia_Move_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Module":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryModuleRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryModuleResponse>(),
        interceptors: self.interceptors?.makeModuleInterceptors() ?? [],
        wrapping: self.module(request:context:)
      )

    case "Modules":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryModulesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryModulesResponse>(),
        interceptors: self.interceptors?.makeModulesInterceptors() ?? [],
        wrapping: self.modules(request:context:)
      )

    case "Resource":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryResourceRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryResourceResponse>(),
        interceptors: self.interceptors?.makeResourceInterceptors() ?? [],
        wrapping: self.resource(request:context:)
      )

    case "Resources":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryResourcesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryResourcesResponse>(),
        interceptors: self.interceptors?.makeResourcesInterceptors() ?? [],
        wrapping: self.resources(request:context:)
      )

    case "TableInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryTableInfoRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryTableInfoResponse>(),
        interceptors: self.interceptors?.makeTableInfoInterceptors() ?? [],
        wrapping: self.tableInfo(request:context:)
      )

    case "TableEntry":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryTableEntryRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryTableEntryResponse>(),
        interceptors: self.interceptors?.makeTableEntryInterceptors() ?? [],
        wrapping: self.tableEntry(request:context:)
      )

    case "TableEntries":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryTableEntriesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryTableEntriesResponse>(),
        interceptors: self.interceptors?.makeTableEntriesInterceptors() ?? [],
        wrapping: self.tableEntries(request:context:)
      )

    case "LegacyView":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryLegacyViewRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryLegacyViewResponse>(),
        interceptors: self.interceptors?.makeLegacyViewInterceptors() ?? [],
        wrapping: self.legacyView(request:context:)
      )

    case "View":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewResponse>(),
        interceptors: self.interceptors?.makeViewInterceptors() ?? [],
        wrapping: self.view(request:context:)
      )

    case "ViewBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewBatchRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewBatchResponse>(),
        interceptors: self.interceptors?.makeViewBatchInterceptors() ?? [],
        wrapping: self.viewBatch(request:context:)
      )

    case "ViewJSON":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewJSONRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewJSONResponse>(),
        interceptors: self.interceptors?.makeViewJSONInterceptors() ?? [],
        wrapping: self.viewJSON(request:context:)
      )

    case "ViewJSONBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryViewJSONBatchRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryViewJSONBatchResponse>(),
        interceptors: self.interceptors?.makeViewJSONBatchInterceptors() ?? [],
        wrapping: self.viewJSONBatch(request:context:)
      )

    case "ScriptABI":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryScriptABIRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryScriptABIResponse>(),
        interceptors: self.interceptors?.makeScriptABIInterceptors() ?? [],
        wrapping: self.scriptABI(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Metadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryMetadataResponse>(),
        interceptors: self.interceptors?.makeMetadataInterceptors() ?? [],
        wrapping: self.metadata(request:context:)
      )

    case "Denom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Move_V1_QueryDenomRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Move_V1_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeDenomInterceptors() ?? [],
        wrapping: self.denom(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Initia_Move_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'module'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModuleInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryModuleRequest, Initia_Move_V1_QueryModuleResponse>]

  /// - Returns: Interceptors to use when handling 'modules'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModulesInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryModulesRequest, Initia_Move_V1_QueryModulesResponse>]

  /// - Returns: Interceptors to use when handling 'resource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResourceInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryResourceRequest, Initia_Move_V1_QueryResourceResponse>]

  /// - Returns: Interceptors to use when handling 'resources'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResourcesInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryResourcesRequest, Initia_Move_V1_QueryResourcesResponse>]

  /// - Returns: Interceptors to use when handling 'tableInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTableInfoInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryTableInfoRequest, Initia_Move_V1_QueryTableInfoResponse>]

  /// - Returns: Interceptors to use when handling 'tableEntry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTableEntryInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryTableEntryRequest, Initia_Move_V1_QueryTableEntryResponse>]

  /// - Returns: Interceptors to use when handling 'tableEntries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTableEntriesInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryTableEntriesRequest, Initia_Move_V1_QueryTableEntriesResponse>]

  /// - Returns: Interceptors to use when handling 'legacyView'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLegacyViewInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryLegacyViewRequest, Initia_Move_V1_QueryLegacyViewResponse>]

  /// - Returns: Interceptors to use when handling 'view'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeViewInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryViewRequest, Initia_Move_V1_QueryViewResponse>]

  /// - Returns: Interceptors to use when handling 'viewBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeViewBatchInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryViewBatchRequest, Initia_Move_V1_QueryViewBatchResponse>]

  /// - Returns: Interceptors to use when handling 'viewJSON'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeViewJSONInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryViewJSONRequest, Initia_Move_V1_QueryViewJSONResponse>]

  /// - Returns: Interceptors to use when handling 'viewJSONBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeViewJSONBatchInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryViewJSONBatchRequest, Initia_Move_V1_QueryViewJSONBatchResponse>]

  /// - Returns: Interceptors to use when handling 'scriptABI'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScriptABIInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryScriptABIRequest, Initia_Move_V1_QueryScriptABIResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryParamsRequest, Initia_Move_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'metadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMetadataInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryMetadataRequest, Initia_Move_V1_QueryMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'denom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomInterceptors() -> [ServerInterceptor<Initia_Move_V1_QueryDenomRequest, Initia_Move_V1_QueryDenomResponse>]
}

internal enum Initia_Move_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "initia.move.v1.Query",
    methods: [
      Initia_Move_V1_QueryServerMetadata.Methods.module,
      Initia_Move_V1_QueryServerMetadata.Methods.modules,
      Initia_Move_V1_QueryServerMetadata.Methods.resource,
      Initia_Move_V1_QueryServerMetadata.Methods.resources,
      Initia_Move_V1_QueryServerMetadata.Methods.tableInfo,
      Initia_Move_V1_QueryServerMetadata.Methods.tableEntry,
      Initia_Move_V1_QueryServerMetadata.Methods.tableEntries,
      Initia_Move_V1_QueryServerMetadata.Methods.legacyView,
      Initia_Move_V1_QueryServerMetadata.Methods.view,
      Initia_Move_V1_QueryServerMetadata.Methods.viewBatch,
      Initia_Move_V1_QueryServerMetadata.Methods.viewJSON,
      Initia_Move_V1_QueryServerMetadata.Methods.viewJSONBatch,
      Initia_Move_V1_QueryServerMetadata.Methods.scriptABI,
      Initia_Move_V1_QueryServerMetadata.Methods.params,
      Initia_Move_V1_QueryServerMetadata.Methods.metadata,
      Initia_Move_V1_QueryServerMetadata.Methods.denom,
    ]
  )

  internal enum Methods {
    internal static let module = GRPCMethodDescriptor(
      name: "Module",
      path: "/initia.move.v1.Query/Module",
      type: GRPCCallType.unary
    )

    internal static let modules = GRPCMethodDescriptor(
      name: "Modules",
      path: "/initia.move.v1.Query/Modules",
      type: GRPCCallType.unary
    )

    internal static let resource = GRPCMethodDescriptor(
      name: "Resource",
      path: "/initia.move.v1.Query/Resource",
      type: GRPCCallType.unary
    )

    internal static let resources = GRPCMethodDescriptor(
      name: "Resources",
      path: "/initia.move.v1.Query/Resources",
      type: GRPCCallType.unary
    )

    internal static let tableInfo = GRPCMethodDescriptor(
      name: "TableInfo",
      path: "/initia.move.v1.Query/TableInfo",
      type: GRPCCallType.unary
    )

    internal static let tableEntry = GRPCMethodDescriptor(
      name: "TableEntry",
      path: "/initia.move.v1.Query/TableEntry",
      type: GRPCCallType.unary
    )

    internal static let tableEntries = GRPCMethodDescriptor(
      name: "TableEntries",
      path: "/initia.move.v1.Query/TableEntries",
      type: GRPCCallType.unary
    )

    internal static let legacyView = GRPCMethodDescriptor(
      name: "LegacyView",
      path: "/initia.move.v1.Query/LegacyView",
      type: GRPCCallType.unary
    )

    internal static let view = GRPCMethodDescriptor(
      name: "View",
      path: "/initia.move.v1.Query/View",
      type: GRPCCallType.unary
    )

    internal static let viewBatch = GRPCMethodDescriptor(
      name: "ViewBatch",
      path: "/initia.move.v1.Query/ViewBatch",
      type: GRPCCallType.unary
    )

    internal static let viewJSON = GRPCMethodDescriptor(
      name: "ViewJSON",
      path: "/initia.move.v1.Query/ViewJSON",
      type: GRPCCallType.unary
    )

    internal static let viewJSONBatch = GRPCMethodDescriptor(
      name: "ViewJSONBatch",
      path: "/initia.move.v1.Query/ViewJSONBatch",
      type: GRPCCallType.unary
    )

    internal static let scriptABI = GRPCMethodDescriptor(
      name: "ScriptABI",
      path: "/initia.move.v1.Query/ScriptABI",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/initia.move.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let metadata = GRPCMethodDescriptor(
      name: "Metadata",
      path: "/initia.move.v1.Query/Metadata",
      type: GRPCCallType.unary
    )

    internal static let denom = GRPCMethodDescriptor(
      name: "Denom",
      path: "/initia.move.v1.Query/Denom",
      type: GRPCCallType.unary
    )
  }
}
