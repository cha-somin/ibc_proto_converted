// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: noble/tokenfactory/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the tokenfactory module's genesis state.
struct Noble_Tokenfactory_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Noble_Tokenfactory_Params {
    get {return _params ?? Noble_Tokenfactory_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var blacklistedList: [Noble_Tokenfactory_Blacklisted] = []

  var paused: Noble_Tokenfactory_Paused {
    get {return _paused ?? Noble_Tokenfactory_Paused()}
    set {_paused = newValue}
  }
  /// Returns true if `paused` has been explicitly set.
  var hasPaused: Bool {return self._paused != nil}
  /// Clears the value of `paused`. Subsequent reads from it will return its default value.
  mutating func clearPaused() {self._paused = nil}

  var masterMinter: Noble_Tokenfactory_MasterMinter {
    get {return _masterMinter ?? Noble_Tokenfactory_MasterMinter()}
    set {_masterMinter = newValue}
  }
  /// Returns true if `masterMinter` has been explicitly set.
  var hasMasterMinter: Bool {return self._masterMinter != nil}
  /// Clears the value of `masterMinter`. Subsequent reads from it will return its default value.
  mutating func clearMasterMinter() {self._masterMinter = nil}

  var mintersList: [Noble_Tokenfactory_Minters] = []

  var pauser: Noble_Tokenfactory_Pauser {
    get {return _pauser ?? Noble_Tokenfactory_Pauser()}
    set {_pauser = newValue}
  }
  /// Returns true if `pauser` has been explicitly set.
  var hasPauser: Bool {return self._pauser != nil}
  /// Clears the value of `pauser`. Subsequent reads from it will return its default value.
  mutating func clearPauser() {self._pauser = nil}

  var blacklister: Noble_Tokenfactory_Blacklister {
    get {return _blacklister ?? Noble_Tokenfactory_Blacklister()}
    set {_blacklister = newValue}
  }
  /// Returns true if `blacklister` has been explicitly set.
  var hasBlacklister: Bool {return self._blacklister != nil}
  /// Clears the value of `blacklister`. Subsequent reads from it will return its default value.
  mutating func clearBlacklister() {self._blacklister = nil}

  var owner: Noble_Tokenfactory_Owner {
    get {return _owner ?? Noble_Tokenfactory_Owner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  mutating func clearOwner() {self._owner = nil}

  var minterControllerList: [Noble_Tokenfactory_MinterController] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var mintingDenom: Noble_Tokenfactory_MintingDenom {
    get {return _mintingDenom ?? Noble_Tokenfactory_MintingDenom()}
    set {_mintingDenom = newValue}
  }
  /// Returns true if `mintingDenom` has been explicitly set.
  var hasMintingDenom: Bool {return self._mintingDenom != nil}
  /// Clears the value of `mintingDenom`. Subsequent reads from it will return its default value.
  mutating func clearMintingDenom() {self._mintingDenom = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Noble_Tokenfactory_Params? = nil
  fileprivate var _paused: Noble_Tokenfactory_Paused? = nil
  fileprivate var _masterMinter: Noble_Tokenfactory_MasterMinter? = nil
  fileprivate var _pauser: Noble_Tokenfactory_Pauser? = nil
  fileprivate var _blacklister: Noble_Tokenfactory_Blacklister? = nil
  fileprivate var _owner: Noble_Tokenfactory_Owner? = nil
  fileprivate var _mintingDenom: Noble_Tokenfactory_MintingDenom? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Noble_Tokenfactory_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "noble.tokenfactory"

extension Noble_Tokenfactory_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "blacklistedList"),
    3: .same(proto: "paused"),
    4: .same(proto: "masterMinter"),
    5: .same(proto: "mintersList"),
    6: .same(proto: "pauser"),
    7: .same(proto: "blacklister"),
    8: .same(proto: "owner"),
    9: .same(proto: "minterControllerList"),
    10: .same(proto: "mintingDenom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.blacklistedList) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._paused) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._masterMinter) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.mintersList) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._pauser) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._blacklister) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.minterControllerList) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._mintingDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.blacklistedList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blacklistedList, fieldNumber: 2)
    }
    try { if let v = self._paused {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._masterMinter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.mintersList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mintersList, fieldNumber: 5)
    }
    try { if let v = self._pauser {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._blacklister {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.minterControllerList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minterControllerList, fieldNumber: 9)
    }
    try { if let v = self._mintingDenom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Noble_Tokenfactory_GenesisState, rhs: Noble_Tokenfactory_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.blacklistedList != rhs.blacklistedList {return false}
    if lhs._paused != rhs._paused {return false}
    if lhs._masterMinter != rhs._masterMinter {return false}
    if lhs.mintersList != rhs.mintersList {return false}
    if lhs._pauser != rhs._pauser {return false}
    if lhs._blacklister != rhs._blacklister {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs.minterControllerList != rhs.minterControllerList {return false}
    if lhs._mintingDenom != rhs._mintingDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
