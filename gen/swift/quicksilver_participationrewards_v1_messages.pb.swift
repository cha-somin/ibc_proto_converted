// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quicksilver/participationrewards/v1/messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgSubmitClaim represents a message type for submitting a participation
/// claim regarding the given zone (chain).
struct Quicksilver_Participationrewards_V1_MsgSubmitClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userAddress: String = String()

  var zone: String = String()

  var srcZone: String = String()

  var claimType: Quicksilver_Claimsmanager_V1_ClaimType = .undefined

  var proofs: [Quicksilver_Claimsmanager_V1_Proof] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSubmitClaimResponse defines the MsgSubmitClaim response type.
struct Quicksilver_Participationrewards_V1_MsgSubmitClaimResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quicksilver_Participationrewards_V1_MsgSubmitClaim: @unchecked Sendable {}
extension Quicksilver_Participationrewards_V1_MsgSubmitClaimResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quicksilver.participationrewards.v1"

extension Quicksilver_Participationrewards_V1_MsgSubmitClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user_address"),
    2: .same(proto: "zone"),
    3: .same(proto: "src_zone"),
    4: .same(proto: "claim_type"),
    5: .same(proto: "proofs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.zone) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.srcZone) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.claimType) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.proofs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.userAddress, fieldNumber: 1)
    }
    if !self.zone.isEmpty {
      try visitor.visitSingularStringField(value: self.zone, fieldNumber: 2)
    }
    if !self.srcZone.isEmpty {
      try visitor.visitSingularStringField(value: self.srcZone, fieldNumber: 3)
    }
    if self.claimType != .undefined {
      try visitor.visitSingularEnumField(value: self.claimType, fieldNumber: 4)
    }
    if !self.proofs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proofs, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_MsgSubmitClaim, rhs: Quicksilver_Participationrewards_V1_MsgSubmitClaim) -> Bool {
    if lhs.userAddress != rhs.userAddress {return false}
    if lhs.zone != rhs.zone {return false}
    if lhs.srcZone != rhs.srcZone {return false}
    if lhs.claimType != rhs.claimType {return false}
    if lhs.proofs != rhs.proofs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Participationrewards_V1_MsgSubmitClaimResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitClaimResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_MsgSubmitClaimResponse, rhs: Quicksilver_Participationrewards_V1_MsgSubmitClaimResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
