//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/lpfarm/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Crescent_Lpfarm_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Lpfarm_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Crescent_Lpfarm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryParamsRequest, Crescent_Lpfarm_V1beta1_QueryParamsResponse>

  func plans(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlansRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPlansRequest, Crescent_Lpfarm_V1beta1_QueryPlansResponse>

  func plan(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPlanRequest, Crescent_Lpfarm_V1beta1_QueryPlanResponse>

  func farm(
    _ request: Crescent_Lpfarm_V1beta1_QueryFarmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryFarmRequest, Crescent_Lpfarm_V1beta1_QueryFarmResponse>

  func positions(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionsRequest, Crescent_Lpfarm_V1beta1_QueryPositionsResponse>

  func position(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionRequest, Crescent_Lpfarm_V1beta1_QueryPositionResponse>

  func historicalRewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>

  func totalRewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>

  func rewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryRewardsRequest, Crescent_Lpfarm_V1beta1_QueryRewardsResponse>
}

extension Crescent_Lpfarm_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "crescent.lpfarm.v1beta1.Query"
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Crescent_Lpfarm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryParamsRequest, Crescent_Lpfarm_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to Plans
  ///
  /// - Parameters:
  ///   - request: Request to send to Plans.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func plans(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPlansRequest, Crescent_Lpfarm_V1beta1_QueryPlansResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlansInterceptors() ?? []
    )
  }

  /// Unary call to Plan
  ///
  /// - Parameters:
  ///   - request: Request to send to Plan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func plan(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPlanRequest, Crescent_Lpfarm_V1beta1_QueryPlanResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlanInterceptors() ?? []
    )
  }

  /// Unary call to Farm
  ///
  /// - Parameters:
  ///   - request: Request to send to Farm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func farm(
    _ request: Crescent_Lpfarm_V1beta1_QueryFarmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryFarmRequest, Crescent_Lpfarm_V1beta1_QueryFarmResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  /// Unary call to Positions
  ///
  /// - Parameters:
  ///   - request: Request to send to Positions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func positions(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionsRequest, Crescent_Lpfarm_V1beta1_QueryPositionsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.positions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  /// Unary call to Position
  ///
  /// - Parameters:
  ///   - request: Request to send to Position.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func position(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionRequest, Crescent_Lpfarm_V1beta1_QueryPositionResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.position.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionInterceptors() ?? []
    )
  }

  /// Unary call to HistoricalRewards
  ///
  /// - Parameters:
  ///   - request: Request to send to HistoricalRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func historicalRewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.historicalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? []
    )
  }

  /// Unary call to TotalRewards
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalRewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.totalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRewardsInterceptors() ?? []
    )
  }

  /// Unary call to Rewards
  ///
  /// - Parameters:
  ///   - request: Request to send to Rewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_QueryRewardsRequest, Crescent_Lpfarm_V1beta1_QueryRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Crescent_Lpfarm_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Crescent_Lpfarm_V1beta1_QueryNIOClient")
internal final class Crescent_Lpfarm_V1beta1_QueryClient: Crescent_Lpfarm_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the crescent.lpfarm.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Crescent_Lpfarm_V1beta1_QueryNIOClient: Crescent_Lpfarm_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.lpfarm.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Lpfarm_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryParamsRequest, Crescent_Lpfarm_V1beta1_QueryParamsResponse>

  func makePlansCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlansRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPlansRequest, Crescent_Lpfarm_V1beta1_QueryPlansResponse>

  func makePlanCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPlanRequest, Crescent_Lpfarm_V1beta1_QueryPlanResponse>

  func makeFarmCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryFarmRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryFarmRequest, Crescent_Lpfarm_V1beta1_QueryFarmResponse>

  func makePositionsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionsRequest, Crescent_Lpfarm_V1beta1_QueryPositionsResponse>

  func makePositionCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionRequest, Crescent_Lpfarm_V1beta1_QueryPositionResponse>

  func makeHistoricalRewardsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>

  func makeTotalRewardsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>

  func makeRewardsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryRewardsRequest, Crescent_Lpfarm_V1beta1_QueryRewardsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Lpfarm_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Lpfarm_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryParamsRequest, Crescent_Lpfarm_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makePlansCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPlansRequest, Crescent_Lpfarm_V1beta1_QueryPlansResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlansInterceptors() ?? []
    )
  }

  internal func makePlanCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPlanRequest, Crescent_Lpfarm_V1beta1_QueryPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlanInterceptors() ?? []
    )
  }

  internal func makeFarmCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryFarmRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryFarmRequest, Crescent_Lpfarm_V1beta1_QueryFarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  internal func makePositionsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionsRequest, Crescent_Lpfarm_V1beta1_QueryPositionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.positions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  internal func makePositionCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryPositionRequest, Crescent_Lpfarm_V1beta1_QueryPositionResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.position.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionInterceptors() ?? []
    )
  }

  internal func makeHistoricalRewardsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.historicalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? []
    )
  }

  internal func makeTotalRewardsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.totalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRewardsInterceptors() ?? []
    )
  }

  internal func makeRewardsCall(
    _ request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_QueryRewardsRequest, Crescent_Lpfarm_V1beta1_QueryRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Lpfarm_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Crescent_Lpfarm_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func plans(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPlansResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlansInterceptors() ?? []
    )
  }

  internal func plan(
    _ request: Crescent_Lpfarm_V1beta1_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlanInterceptors() ?? []
    )
  }

  internal func farm(
    _ request: Crescent_Lpfarm_V1beta1_QueryFarmRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryFarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  internal func positions(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPositionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.positions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  internal func position(
    _ request: Crescent_Lpfarm_V1beta1_QueryPositionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPositionResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.position.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionInterceptors() ?? []
    )
  }

  internal func historicalRewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.historicalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? []
    )
  }

  internal func totalRewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.totalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRewardsInterceptors() ?? []
    )
  }

  internal func rewards(
    _ request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Crescent_Lpfarm_V1beta1_QueryAsyncClient: Crescent_Lpfarm_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Crescent_Lpfarm_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryParamsRequest, Crescent_Lpfarm_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'plans'.
  func makePlansInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryPlansRequest, Crescent_Lpfarm_V1beta1_QueryPlansResponse>]

  /// - Returns: Interceptors to use when invoking 'plan'.
  func makePlanInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryPlanRequest, Crescent_Lpfarm_V1beta1_QueryPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'farm'.
  func makeFarmInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryFarmRequest, Crescent_Lpfarm_V1beta1_QueryFarmResponse>]

  /// - Returns: Interceptors to use when invoking 'positions'.
  func makePositionsInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryPositionsRequest, Crescent_Lpfarm_V1beta1_QueryPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'position'.
  func makePositionInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryPositionRequest, Crescent_Lpfarm_V1beta1_QueryPositionResponse>]

  /// - Returns: Interceptors to use when invoking 'historicalRewards'.
  func makeHistoricalRewardsInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalRewards'.
  func makeTotalRewardsInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'rewards'.
  func makeRewardsInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_QueryRewardsRequest, Crescent_Lpfarm_V1beta1_QueryRewardsResponse>]
}

internal enum Crescent_Lpfarm_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.lpfarm.v1beta1.Query",
    methods: [
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.params,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plans,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.plan,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.farm,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.positions,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.position,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.historicalRewards,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.totalRewards,
      Crescent_Lpfarm_V1beta1_QueryClientMetadata.Methods.rewards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.lpfarm.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let plans = GRPCMethodDescriptor(
      name: "Plans",
      path: "/crescent.lpfarm.v1beta1.Query/Plans",
      type: GRPCCallType.unary
    )

    internal static let plan = GRPCMethodDescriptor(
      name: "Plan",
      path: "/crescent.lpfarm.v1beta1.Query/Plan",
      type: GRPCCallType.unary
    )

    internal static let farm = GRPCMethodDescriptor(
      name: "Farm",
      path: "/crescent.lpfarm.v1beta1.Query/Farm",
      type: GRPCCallType.unary
    )

    internal static let positions = GRPCMethodDescriptor(
      name: "Positions",
      path: "/crescent.lpfarm.v1beta1.Query/Positions",
      type: GRPCCallType.unary
    )

    internal static let position = GRPCMethodDescriptor(
      name: "Position",
      path: "/crescent.lpfarm.v1beta1.Query/Position",
      type: GRPCCallType.unary
    )

    internal static let historicalRewards = GRPCMethodDescriptor(
      name: "HistoricalRewards",
      path: "/crescent.lpfarm.v1beta1.Query/HistoricalRewards",
      type: GRPCCallType.unary
    )

    internal static let totalRewards = GRPCMethodDescriptor(
      name: "TotalRewards",
      path: "/crescent.lpfarm.v1beta1.Query/TotalRewards",
      type: GRPCCallType.unary
    )

    internal static let rewards = GRPCMethodDescriptor(
      name: "Rewards",
      path: "/crescent.lpfarm.v1beta1.Query/Rewards",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Lpfarm_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Crescent_Lpfarm_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  func params(request: Crescent_Lpfarm_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryParamsResponse>

  func plans(request: Crescent_Lpfarm_V1beta1_QueryPlansRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryPlansResponse>

  func plan(request: Crescent_Lpfarm_V1beta1_QueryPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryPlanResponse>

  func farm(request: Crescent_Lpfarm_V1beta1_QueryFarmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryFarmResponse>

  func positions(request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryPositionsResponse>

  func position(request: Crescent_Lpfarm_V1beta1_QueryPositionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryPositionResponse>

  func historicalRewards(request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>

  func totalRewards(request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>

  func rewards(request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_QueryRewardsResponse>
}

extension Crescent_Lpfarm_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Crescent_Lpfarm_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Plans":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPlansRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPlansResponse>(),
        interceptors: self.interceptors?.makePlansInterceptors() ?? [],
        userFunction: self.plans(request:context:)
      )

    case "Plan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPlanRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPlanResponse>(),
        interceptors: self.interceptors?.makePlanInterceptors() ?? [],
        userFunction: self.plan(request:context:)
      )

    case "Farm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryFarmRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryFarmResponse>(),
        interceptors: self.interceptors?.makeFarmInterceptors() ?? [],
        userFunction: self.farm(request:context:)
      )

    case "Positions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPositionsResponse>(),
        interceptors: self.interceptors?.makePositionsInterceptors() ?? [],
        userFunction: self.positions(request:context:)
      )

    case "Position":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPositionRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPositionResponse>(),
        interceptors: self.interceptors?.makePositionInterceptors() ?? [],
        userFunction: self.position(request:context:)
      )

    case "HistoricalRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>(),
        interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? [],
        userFunction: self.historicalRewards(request:context:)
      )

    case "TotalRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>(),
        interceptors: self.interceptors?.makeTotalRewardsInterceptors() ?? [],
        userFunction: self.totalRewards(request:context:)
      )

    case "Rewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeRewardsInterceptors() ?? [],
        userFunction: self.rewards(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Lpfarm_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Lpfarm_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func params(
    request: Crescent_Lpfarm_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryParamsResponse

  @Sendable func plans(
    request: Crescent_Lpfarm_V1beta1_QueryPlansRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPlansResponse

  @Sendable func plan(
    request: Crescent_Lpfarm_V1beta1_QueryPlanRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPlanResponse

  @Sendable func farm(
    request: Crescent_Lpfarm_V1beta1_QueryFarmRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryFarmResponse

  @Sendable func positions(
    request: Crescent_Lpfarm_V1beta1_QueryPositionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPositionsResponse

  @Sendable func position(
    request: Crescent_Lpfarm_V1beta1_QueryPositionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryPositionResponse

  @Sendable func historicalRewards(
    request: Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse

  @Sendable func totalRewards(
    request: Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse

  @Sendable func rewards(
    request: Crescent_Lpfarm_V1beta1_QueryRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_QueryRewardsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Lpfarm_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Lpfarm_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Crescent_Lpfarm_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Crescent_Lpfarm_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Plans":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPlansRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPlansResponse>(),
        interceptors: self.interceptors?.makePlansInterceptors() ?? [],
        wrapping: self.plans(request:context:)
      )

    case "Plan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPlanRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPlanResponse>(),
        interceptors: self.interceptors?.makePlanInterceptors() ?? [],
        wrapping: self.plan(request:context:)
      )

    case "Farm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryFarmRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryFarmResponse>(),
        interceptors: self.interceptors?.makeFarmInterceptors() ?? [],
        wrapping: self.farm(request:context:)
      )

    case "Positions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPositionsResponse>(),
        interceptors: self.interceptors?.makePositionsInterceptors() ?? [],
        wrapping: self.positions(request:context:)
      )

    case "Position":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryPositionRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryPositionResponse>(),
        interceptors: self.interceptors?.makePositionInterceptors() ?? [],
        wrapping: self.position(request:context:)
      )

    case "HistoricalRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>(),
        interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? [],
        wrapping: self.historicalRewards(request:context:)
      )

    case "TotalRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>(),
        interceptors: self.interceptors?.makeTotalRewardsInterceptors() ?? [],
        wrapping: self.totalRewards(request:context:)
      )

    case "Rewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeRewardsInterceptors() ?? [],
        wrapping: self.rewards(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Lpfarm_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryParamsRequest, Crescent_Lpfarm_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'plans'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlansInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryPlansRequest, Crescent_Lpfarm_V1beta1_QueryPlansResponse>]

  /// - Returns: Interceptors to use when handling 'plan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlanInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryPlanRequest, Crescent_Lpfarm_V1beta1_QueryPlanResponse>]

  /// - Returns: Interceptors to use when handling 'farm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFarmInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryFarmRequest, Crescent_Lpfarm_V1beta1_QueryFarmResponse>]

  /// - Returns: Interceptors to use when handling 'positions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePositionsInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryPositionsRequest, Crescent_Lpfarm_V1beta1_QueryPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'position'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePositionInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryPositionRequest, Crescent_Lpfarm_V1beta1_QueryPositionResponse>]

  /// - Returns: Interceptors to use when handling 'historicalRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHistoricalRewardsInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryHistoricalRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'totalRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalRewardsInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryTotalRewardsRequest, Crescent_Lpfarm_V1beta1_QueryTotalRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'rewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_QueryRewardsRequest, Crescent_Lpfarm_V1beta1_QueryRewardsResponse>]
}

internal enum Crescent_Lpfarm_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.lpfarm.v1beta1.Query",
    methods: [
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.params,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.plans,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.plan,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.farm,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.positions,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.position,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.historicalRewards,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.totalRewards,
      Crescent_Lpfarm_V1beta1_QueryServerMetadata.Methods.rewards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.lpfarm.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let plans = GRPCMethodDescriptor(
      name: "Plans",
      path: "/crescent.lpfarm.v1beta1.Query/Plans",
      type: GRPCCallType.unary
    )

    internal static let plan = GRPCMethodDescriptor(
      name: "Plan",
      path: "/crescent.lpfarm.v1beta1.Query/Plan",
      type: GRPCCallType.unary
    )

    internal static let farm = GRPCMethodDescriptor(
      name: "Farm",
      path: "/crescent.lpfarm.v1beta1.Query/Farm",
      type: GRPCCallType.unary
    )

    internal static let positions = GRPCMethodDescriptor(
      name: "Positions",
      path: "/crescent.lpfarm.v1beta1.Query/Positions",
      type: GRPCCallType.unary
    )

    internal static let position = GRPCMethodDescriptor(
      name: "Position",
      path: "/crescent.lpfarm.v1beta1.Query/Position",
      type: GRPCCallType.unary
    )

    internal static let historicalRewards = GRPCMethodDescriptor(
      name: "HistoricalRewards",
      path: "/crescent.lpfarm.v1beta1.Query/HistoricalRewards",
      type: GRPCCallType.unary
    )

    internal static let totalRewards = GRPCMethodDescriptor(
      name: "TotalRewards",
      path: "/crescent.lpfarm.v1beta1.Query/TotalRewards",
      type: GRPCCallType.unary
    )

    internal static let rewards = GRPCMethodDescriptor(
      name: "Rewards",
      path: "/crescent.lpfarm.v1beta1.Query/Rewards",
      type: GRPCCallType.unary
    )
  }
}
