// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/poolmanager/v1beta1/taker_fee_share.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TakerFeeShareAgreement represents the agreement between the Osmosis protocol
/// and a specific denom to share a certain percent of taker fees generated in
/// any route that contains said denom. For example, if the agreement specifies a
/// 10% skim_percent, this means 10% of the taker fees generated in a swap route
/// containing the specified denom will be sent to the address specified
/// in the skim_address field at the end of each epoch. These skim_percents are
/// additive, so if three taker fee agreements have skim percents of 10%, 20%,
/// and 30%, the total skim percent for the route will be 60%.
struct Osmosis_Poolmanager_V1beta1_TakerFeeShareAgreement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// denom is the denom that has the taker fee share agreement.
  var denom: String = String()

  /// skim_percent is the percentage of taker fees that will be skimmed for the
  /// denom, in the event that the denom is included in the swap route.
  var skimPercent: String = String()

  /// skim_address is the address belonging to the respective denom
  /// that the skimmed taker fees will be sent to at the end of each epoch.
  var skimAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TakerFeeSkimAccumulator accumulates the total skimmed taker fees for each
/// denom that has a taker fee share agreement.
struct Osmosis_Poolmanager_V1beta1_TakerFeeSkimAccumulator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// denom is the denom that has the taker fee share agreement.
  var denom: String = String()

  /// skimmed_taker_fees is the total skimmed taker fees for the denom.
  var skimmedTakerFees: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AlloyContractTakerFeeShareState contains the contract address of the alloyed
/// asset pool, along with the adjusted taker fee share agreements for any asset
/// within the alloyed asset pool that has a taker fee share agreement. If for
/// instance there are two denoms, and denomA makes up 50 percent and denomB
/// makes up 50 percent, and denom A has a taker fee share agreement with a skim
/// percent of 10%, then the adjusted taker fee share agreement for denomA will
/// be 5%.
struct Osmosis_Poolmanager_V1beta1_AlloyContractTakerFeeShareState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// contract_address is the address of the alloyed asset pool contract.
  var contractAddress: String = String()

  /// taker_fee_share_agreements is the adjusted taker fee share agreements for
  /// any asset within the alloyed asset pool that has a taker fee share
  /// agreement.
  var takerFeeShareAgreements: [Osmosis_Poolmanager_V1beta1_TakerFeeShareAgreement] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Poolmanager_V1beta1_TakerFeeShareAgreement: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_TakerFeeSkimAccumulator: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_AlloyContractTakerFeeShareState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.poolmanager.v1beta1"

extension Osmosis_Poolmanager_V1beta1_TakerFeeShareAgreement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakerFeeShareAgreement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "skim_percent"),
    3: .standard(proto: "skim_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.skimPercent) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.skimAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.skimPercent.isEmpty {
      try visitor.visitSingularStringField(value: self.skimPercent, fieldNumber: 2)
    }
    if !self.skimAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.skimAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_TakerFeeShareAgreement, rhs: Osmosis_Poolmanager_V1beta1_TakerFeeShareAgreement) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.skimPercent != rhs.skimPercent {return false}
    if lhs.skimAddress != rhs.skimAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_TakerFeeSkimAccumulator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakerFeeSkimAccumulator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "skimmed_taker_fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.skimmedTakerFees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.skimmedTakerFees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.skimmedTakerFees, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_TakerFeeSkimAccumulator, rhs: Osmosis_Poolmanager_V1beta1_TakerFeeSkimAccumulator) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.skimmedTakerFees != rhs.skimmedTakerFees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_AlloyContractTakerFeeShareState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AlloyContractTakerFeeShareState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .standard(proto: "taker_fee_share_agreements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.takerFeeShareAgreements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.takerFeeShareAgreements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.takerFeeShareAgreements, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_AlloyContractTakerFeeShareState, rhs: Osmosis_Poolmanager_V1beta1_AlloyContractTakerFeeShareState) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.takerFeeShareAgreements != rhs.takerFeeShareAgreements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
