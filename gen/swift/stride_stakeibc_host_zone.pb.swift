// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/stakeibc/host_zone.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// next id: 22
struct Stride_Stakeibc_HostZone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  var connectionID: String {
    get {return _storage._connectionID}
    set {_uniqueStorage()._connectionID = newValue}
  }

  var bech32Prefix: String {
    get {return _storage._bech32Prefix}
    set {_uniqueStorage()._bech32Prefix = newValue}
  }

  var transferChannelID: String {
    get {return _storage._transferChannelID}
    set {_uniqueStorage()._transferChannelID = newValue}
  }

  var validators: [Stride_Stakeibc_Validator] {
    get {return _storage._validators}
    set {_uniqueStorage()._validators = newValue}
  }

  var blacklistedValidators: [Stride_Stakeibc_Validator] {
    get {return _storage._blacklistedValidators}
    set {_uniqueStorage()._blacklistedValidators = newValue}
  }

  var withdrawalAccount: Stride_Stakeibc_ICAAccount {
    get {return _storage._withdrawalAccount ?? Stride_Stakeibc_ICAAccount()}
    set {_uniqueStorage()._withdrawalAccount = newValue}
  }
  /// Returns true if `withdrawalAccount` has been explicitly set.
  var hasWithdrawalAccount: Bool {return _storage._withdrawalAccount != nil}
  /// Clears the value of `withdrawalAccount`. Subsequent reads from it will return its default value.
  mutating func clearWithdrawalAccount() {_uniqueStorage()._withdrawalAccount = nil}

  var feeAccount: Stride_Stakeibc_ICAAccount {
    get {return _storage._feeAccount ?? Stride_Stakeibc_ICAAccount()}
    set {_uniqueStorage()._feeAccount = newValue}
  }
  /// Returns true if `feeAccount` has been explicitly set.
  var hasFeeAccount: Bool {return _storage._feeAccount != nil}
  /// Clears the value of `feeAccount`. Subsequent reads from it will return its default value.
  mutating func clearFeeAccount() {_uniqueStorage()._feeAccount = nil}

  var delegationAccount: Stride_Stakeibc_ICAAccount {
    get {return _storage._delegationAccount ?? Stride_Stakeibc_ICAAccount()}
    set {_uniqueStorage()._delegationAccount = newValue}
  }
  /// Returns true if `delegationAccount` has been explicitly set.
  var hasDelegationAccount: Bool {return _storage._delegationAccount != nil}
  /// Clears the value of `delegationAccount`. Subsequent reads from it will return its default value.
  mutating func clearDelegationAccount() {_uniqueStorage()._delegationAccount = nil}

  var redemptionAccount: Stride_Stakeibc_ICAAccount {
    get {return _storage._redemptionAccount ?? Stride_Stakeibc_ICAAccount()}
    set {_uniqueStorage()._redemptionAccount = newValue}
  }
  /// Returns true if `redemptionAccount` has been explicitly set.
  var hasRedemptionAccount: Bool {return _storage._redemptionAccount != nil}
  /// Clears the value of `redemptionAccount`. Subsequent reads from it will return its default value.
  mutating func clearRedemptionAccount() {_uniqueStorage()._redemptionAccount = nil}

  /// ibc denom on stride
  var ibcDenom: String {
    get {return _storage._ibcDenom}
    set {_uniqueStorage()._ibcDenom = newValue}
  }

  /// native denom on host zone
  var hostDenom: String {
    get {return _storage._hostDenom}
    set {_uniqueStorage()._hostDenom = newValue}
  }

  /// TODO(TEST-68): Should we make this an array and store the last n redemption
  /// rates then calculate a TWARR?
  var lastRedemptionRate: String {
    get {return _storage._lastRedemptionRate}
    set {_uniqueStorage()._lastRedemptionRate = newValue}
  }

  var redemptionRate: String {
    get {return _storage._redemptionRate}
    set {_uniqueStorage()._redemptionRate = newValue}
  }

  /// stores how many days we should wait before issuing unbondings
  var unbondingFrequency: UInt64 {
    get {return _storage._unbondingFrequency}
    set {_uniqueStorage()._unbondingFrequency = newValue}
  }

  /// TODO(TEST-101) int to dec
  var stakedBal: String {
    get {return _storage._stakedBal}
    set {_uniqueStorage()._stakedBal = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var halted: Bool {
    get {return _storage._halted}
    set {_uniqueStorage()._halted = newValue}
  }

  var minRedemptionRate: String {
    get {return _storage._minRedemptionRate}
    set {_uniqueStorage()._minRedemptionRate = newValue}
  }

  var maxRedemptionRate: String {
    get {return _storage._maxRedemptionRate}
    set {_uniqueStorage()._maxRedemptionRate = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stride_Stakeibc_HostZone: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.stakeibc"

extension Stride_Stakeibc_HostZone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostZone"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "connection_id"),
    17: .same(proto: "bech32prefix"),
    12: .standard(proto: "transfer_channel_id"),
    3: .same(proto: "validators"),
    4: .standard(proto: "blacklisted_validators"),
    5: .standard(proto: "withdrawal_account"),
    6: .standard(proto: "fee_account"),
    7: .standard(proto: "delegation_account"),
    16: .standard(proto: "redemption_account"),
    8: .standard(proto: "ibc_denom"),
    9: .standard(proto: "host_denom"),
    10: .standard(proto: "last_redemption_rate"),
    11: .standard(proto: "redemption_rate"),
    14: .standard(proto: "unbonding_frequency"),
    13: .standard(proto: "staked_bal"),
    18: .same(proto: "address"),
    19: .same(proto: "halted"),
    20: .standard(proto: "min_redemption_rate"),
    21: .standard(proto: "max_redemption_rate"),
  ]

  fileprivate class _StorageClass {
    var _chainID: String = String()
    var _connectionID: String = String()
    var _bech32Prefix: String = String()
    var _transferChannelID: String = String()
    var _validators: [Stride_Stakeibc_Validator] = []
    var _blacklistedValidators: [Stride_Stakeibc_Validator] = []
    var _withdrawalAccount: Stride_Stakeibc_ICAAccount? = nil
    var _feeAccount: Stride_Stakeibc_ICAAccount? = nil
    var _delegationAccount: Stride_Stakeibc_ICAAccount? = nil
    var _redemptionAccount: Stride_Stakeibc_ICAAccount? = nil
    var _ibcDenom: String = String()
    var _hostDenom: String = String()
    var _lastRedemptionRate: String = String()
    var _redemptionRate: String = String()
    var _unbondingFrequency: UInt64 = 0
    var _stakedBal: String = String()
    var _address: String = String()
    var _halted: Bool = false
    var _minRedemptionRate: String = String()
    var _maxRedemptionRate: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _connectionID = source._connectionID
      _bech32Prefix = source._bech32Prefix
      _transferChannelID = source._transferChannelID
      _validators = source._validators
      _blacklistedValidators = source._blacklistedValidators
      _withdrawalAccount = source._withdrawalAccount
      _feeAccount = source._feeAccount
      _delegationAccount = source._delegationAccount
      _redemptionAccount = source._redemptionAccount
      _ibcDenom = source._ibcDenom
      _hostDenom = source._hostDenom
      _lastRedemptionRate = source._lastRedemptionRate
      _redemptionRate = source._redemptionRate
      _unbondingFrequency = source._unbondingFrequency
      _stakedBal = source._stakedBal
      _address = source._address
      _halted = source._halted
      _minRedemptionRate = source._minRedemptionRate
      _maxRedemptionRate = source._maxRedemptionRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._chainID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._connectionID) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._validators) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._blacklistedValidators) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._withdrawalAccount) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._feeAccount) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._delegationAccount) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._ibcDenom) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._hostDenom) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._lastRedemptionRate) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._redemptionRate) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._transferChannelID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._stakedBal) }()
        case 14: try { try decoder.decodeSingularUInt64Field(value: &_storage._unbondingFrequency) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._redemptionAccount) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._bech32Prefix) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._address) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._halted) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._minRedemptionRate) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._maxRedemptionRate) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._connectionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._connectionID, fieldNumber: 2)
      }
      if !_storage._validators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validators, fieldNumber: 3)
      }
      if !_storage._blacklistedValidators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._blacklistedValidators, fieldNumber: 4)
      }
      try { if let v = _storage._withdrawalAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._feeAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._delegationAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._ibcDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ibcDenom, fieldNumber: 8)
      }
      if !_storage._hostDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hostDenom, fieldNumber: 9)
      }
      if !_storage._lastRedemptionRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastRedemptionRate, fieldNumber: 10)
      }
      if !_storage._redemptionRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._redemptionRate, fieldNumber: 11)
      }
      if !_storage._transferChannelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transferChannelID, fieldNumber: 12)
      }
      if !_storage._stakedBal.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakedBal, fieldNumber: 13)
      }
      if _storage._unbondingFrequency != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._unbondingFrequency, fieldNumber: 14)
      }
      try { if let v = _storage._redemptionAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if !_storage._bech32Prefix.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bech32Prefix, fieldNumber: 17)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 18)
      }
      if _storage._halted != false {
        try visitor.visitSingularBoolField(value: _storage._halted, fieldNumber: 19)
      }
      if !_storage._minRedemptionRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minRedemptionRate, fieldNumber: 20)
      }
      if !_storage._maxRedemptionRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._maxRedemptionRate, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_HostZone, rhs: Stride_Stakeibc_HostZone) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._connectionID != rhs_storage._connectionID {return false}
        if _storage._bech32Prefix != rhs_storage._bech32Prefix {return false}
        if _storage._transferChannelID != rhs_storage._transferChannelID {return false}
        if _storage._validators != rhs_storage._validators {return false}
        if _storage._blacklistedValidators != rhs_storage._blacklistedValidators {return false}
        if _storage._withdrawalAccount != rhs_storage._withdrawalAccount {return false}
        if _storage._feeAccount != rhs_storage._feeAccount {return false}
        if _storage._delegationAccount != rhs_storage._delegationAccount {return false}
        if _storage._redemptionAccount != rhs_storage._redemptionAccount {return false}
        if _storage._ibcDenom != rhs_storage._ibcDenom {return false}
        if _storage._hostDenom != rhs_storage._hostDenom {return false}
        if _storage._lastRedemptionRate != rhs_storage._lastRedemptionRate {return false}
        if _storage._redemptionRate != rhs_storage._redemptionRate {return false}
        if _storage._unbondingFrequency != rhs_storage._unbondingFrequency {return false}
        if _storage._stakedBal != rhs_storage._stakedBal {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._halted != rhs_storage._halted {return false}
        if _storage._minRedemptionRate != rhs_storage._minRedemptionRate {return false}
        if _storage._maxRedemptionRate != rhs_storage._maxRedemptionRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
