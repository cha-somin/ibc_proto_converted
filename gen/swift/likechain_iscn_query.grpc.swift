//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: likechain/iscn/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage:
/// /iscn/api/endpoint?param1=blablabla&param2=blablabla...
/// Example:
/// /iscn/records/id?iscn_id=iscn://likecoin-chain/btC7CJvMm4WLj9Tau9LAPTfGK7sfymTJW7ORcFdruCU&from_version=2
///
/// Usage: instantiate `Likechain_Iscn_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Likechain_Iscn_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? { get }

  func recordsById(
    _ request: Likechain_Iscn_QueryRecordsByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryRecordsByIdRequest, Likechain_Iscn_QueryRecordsByIdResponse>

  func recordsByFingerprint(
    _ request: Likechain_Iscn_QueryRecordsByFingerprintRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryRecordsByFingerprintRequest, Likechain_Iscn_QueryRecordsByFingerprintResponse>

  func recordsByOwner(
    _ request: Likechain_Iscn_QueryRecordsByOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryRecordsByOwnerRequest, Likechain_Iscn_QueryRecordsByOwnerResponse>

  func params(
    _ request: Likechain_Iscn_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryParamsRequest, Likechain_Iscn_QueryParamsResponse>

  func getCid(
    _ request: Likechain_Iscn_QueryGetCidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryGetCidRequest, Likechain_Iscn_QueryGetCidResponse>

  func hasCid(
    _ request: Likechain_Iscn_QueryHasCidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryHasCidRequest, Likechain_Iscn_QueryHasCidResponse>

  func getCidSize(
    _ request: Likechain_Iscn_QueryGetCidSizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Iscn_QueryGetCidSizeRequest, Likechain_Iscn_QueryGetCidSizeResponse>
}

extension Likechain_Iscn_QueryClientProtocol {
  internal var serviceName: String {
    return "likechain.iscn.Query"
  }

  /// Unary call to RecordsById
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordsById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordsById(
    _ request: Likechain_Iscn_QueryRecordsByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryRecordsByIdRequest, Likechain_Iscn_QueryRecordsByIdResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByIdInterceptors() ?? []
    )
  }

  /// Unary call to RecordsByFingerprint
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordsByFingerprint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordsByFingerprint(
    _ request: Likechain_Iscn_QueryRecordsByFingerprintRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryRecordsByFingerprintRequest, Likechain_Iscn_QueryRecordsByFingerprintResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsByFingerprint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByFingerprintInterceptors() ?? []
    )
  }

  /// Unary call to RecordsByOwner
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordsByOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordsByOwner(
    _ request: Likechain_Iscn_QueryRecordsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryRecordsByOwnerRequest, Likechain_Iscn_QueryRecordsByOwnerResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByOwnerInterceptors() ?? []
    )
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Likechain_Iscn_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryParamsRequest, Likechain_Iscn_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to GetCid
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCid(
    _ request: Likechain_Iscn_QueryGetCidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryGetCidRequest, Likechain_Iscn_QueryGetCidResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.getCid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCidInterceptors() ?? []
    )
  }

  /// Unary call to HasCid
  ///
  /// - Parameters:
  ///   - request: Request to send to HasCid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hasCid(
    _ request: Likechain_Iscn_QueryHasCidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryHasCidRequest, Likechain_Iscn_QueryHasCidResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.hasCid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHasCidInterceptors() ?? []
    )
  }

  /// Unary call to GetCidSize
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCidSize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCidSize(
    _ request: Likechain_Iscn_QueryGetCidSizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Iscn_QueryGetCidSizeRequest, Likechain_Iscn_QueryGetCidSizeResponse> {
    return self.makeUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.getCidSize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCidSizeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Likechain_Iscn_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Likechain_Iscn_QueryNIOClient")
internal final class Likechain_Iscn_QueryClient: Likechain_Iscn_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the likechain.iscn.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Likechain_Iscn_QueryNIOClient: Likechain_Iscn_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the likechain.iscn.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage:
/// /iscn/api/endpoint?param1=blablabla&param2=blablabla...
/// Example:
/// /iscn/records/id?iscn_id=iscn://likecoin-chain/btC7CJvMm4WLj9Tau9LAPTfGK7sfymTJW7ORcFdruCU&from_version=2
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Likechain_Iscn_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? { get }

  func makeRecordsByIDCall(
    _ request: Likechain_Iscn_QueryRecordsByIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryRecordsByIdRequest, Likechain_Iscn_QueryRecordsByIdResponse>

  func makeRecordsByFingerprintCall(
    _ request: Likechain_Iscn_QueryRecordsByFingerprintRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryRecordsByFingerprintRequest, Likechain_Iscn_QueryRecordsByFingerprintResponse>

  func makeRecordsByOwnerCall(
    _ request: Likechain_Iscn_QueryRecordsByOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryRecordsByOwnerRequest, Likechain_Iscn_QueryRecordsByOwnerResponse>

  func makeParamsCall(
    _ request: Likechain_Iscn_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryParamsRequest, Likechain_Iscn_QueryParamsResponse>

  func makeGetCidCall(
    _ request: Likechain_Iscn_QueryGetCidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryGetCidRequest, Likechain_Iscn_QueryGetCidResponse>

  func makeHasCidCall(
    _ request: Likechain_Iscn_QueryHasCidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryHasCidRequest, Likechain_Iscn_QueryHasCidResponse>

  func makeGetCidSizeCall(
    _ request: Likechain_Iscn_QueryGetCidSizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryGetCidSizeRequest, Likechain_Iscn_QueryGetCidSizeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Iscn_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Likechain_Iscn_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRecordsByIDCall(
    _ request: Likechain_Iscn_QueryRecordsByIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryRecordsByIdRequest, Likechain_Iscn_QueryRecordsByIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByIdInterceptors() ?? []
    )
  }

  internal func makeRecordsByFingerprintCall(
    _ request: Likechain_Iscn_QueryRecordsByFingerprintRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryRecordsByFingerprintRequest, Likechain_Iscn_QueryRecordsByFingerprintResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsByFingerprint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByFingerprintInterceptors() ?? []
    )
  }

  internal func makeRecordsByOwnerCall(
    _ request: Likechain_Iscn_QueryRecordsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryRecordsByOwnerRequest, Likechain_Iscn_QueryRecordsByOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByOwnerInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Likechain_Iscn_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryParamsRequest, Likechain_Iscn_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeGetCidCall(
    _ request: Likechain_Iscn_QueryGetCidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryGetCidRequest, Likechain_Iscn_QueryGetCidResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.getCid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCidInterceptors() ?? []
    )
  }

  internal func makeHasCidCall(
    _ request: Likechain_Iscn_QueryHasCidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryHasCidRequest, Likechain_Iscn_QueryHasCidResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.hasCid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHasCidInterceptors() ?? []
    )
  }

  internal func makeGetCidSizeCall(
    _ request: Likechain_Iscn_QueryGetCidSizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Iscn_QueryGetCidSizeRequest, Likechain_Iscn_QueryGetCidSizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.getCidSize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCidSizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Iscn_QueryAsyncClientProtocol {
  internal func recordsById(
    _ request: Likechain_Iscn_QueryRecordsByIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryRecordsByIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByIdInterceptors() ?? []
    )
  }

  internal func recordsByFingerprint(
    _ request: Likechain_Iscn_QueryRecordsByFingerprintRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryRecordsByFingerprintResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsByFingerprint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByFingerprintInterceptors() ?? []
    )
  }

  internal func recordsByOwner(
    _ request: Likechain_Iscn_QueryRecordsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryRecordsByOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.recordsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsByOwnerInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Likechain_Iscn_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func getCid(
    _ request: Likechain_Iscn_QueryGetCidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryGetCidResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.getCid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCidInterceptors() ?? []
    )
  }

  internal func hasCid(
    _ request: Likechain_Iscn_QueryHasCidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryHasCidResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.hasCid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHasCidInterceptors() ?? []
    )
  }

  internal func getCidSize(
    _ request: Likechain_Iscn_QueryGetCidSizeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Iscn_QueryGetCidSizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Iscn_QueryClientMetadata.Methods.getCidSize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCidSizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Likechain_Iscn_QueryAsyncClient: Likechain_Iscn_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Iscn_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Likechain_Iscn_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'recordsById'.
  func makeRecordsByIdInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryRecordsByIdRequest, Likechain_Iscn_QueryRecordsByIdResponse>]

  /// - Returns: Interceptors to use when invoking 'recordsByFingerprint'.
  func makeRecordsByFingerprintInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryRecordsByFingerprintRequest, Likechain_Iscn_QueryRecordsByFingerprintResponse>]

  /// - Returns: Interceptors to use when invoking 'recordsByOwner'.
  func makeRecordsByOwnerInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryRecordsByOwnerRequest, Likechain_Iscn_QueryRecordsByOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryParamsRequest, Likechain_Iscn_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'getCid'.
  func makeGetCidInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryGetCidRequest, Likechain_Iscn_QueryGetCidResponse>]

  /// - Returns: Interceptors to use when invoking 'hasCid'.
  func makeHasCidInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryHasCidRequest, Likechain_Iscn_QueryHasCidResponse>]

  /// - Returns: Interceptors to use when invoking 'getCidSize'.
  func makeGetCidSizeInterceptors() -> [ClientInterceptor<Likechain_Iscn_QueryGetCidSizeRequest, Likechain_Iscn_QueryGetCidSizeResponse>]
}

internal enum Likechain_Iscn_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "likechain.iscn.Query",
    methods: [
      Likechain_Iscn_QueryClientMetadata.Methods.recordsById,
      Likechain_Iscn_QueryClientMetadata.Methods.recordsByFingerprint,
      Likechain_Iscn_QueryClientMetadata.Methods.recordsByOwner,
      Likechain_Iscn_QueryClientMetadata.Methods.params,
      Likechain_Iscn_QueryClientMetadata.Methods.getCid,
      Likechain_Iscn_QueryClientMetadata.Methods.hasCid,
      Likechain_Iscn_QueryClientMetadata.Methods.getCidSize,
    ]
  )

  internal enum Methods {
    internal static let recordsById = GRPCMethodDescriptor(
      name: "RecordsById",
      path: "/likechain.iscn.Query/RecordsById",
      type: GRPCCallType.unary
    )

    internal static let recordsByFingerprint = GRPCMethodDescriptor(
      name: "RecordsByFingerprint",
      path: "/likechain.iscn.Query/RecordsByFingerprint",
      type: GRPCCallType.unary
    )

    internal static let recordsByOwner = GRPCMethodDescriptor(
      name: "RecordsByOwner",
      path: "/likechain.iscn.Query/RecordsByOwner",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/likechain.iscn.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let getCid = GRPCMethodDescriptor(
      name: "GetCid",
      path: "/likechain.iscn.Query/GetCid",
      type: GRPCCallType.unary
    )

    internal static let hasCid = GRPCMethodDescriptor(
      name: "HasCid",
      path: "/likechain.iscn.Query/HasCid",
      type: GRPCCallType.unary
    )

    internal static let getCidSize = GRPCMethodDescriptor(
      name: "GetCidSize",
      path: "/likechain.iscn.Query/GetCidSize",
      type: GRPCCallType.unary
    )
  }
}

/// Usage:
/// /iscn/api/endpoint?param1=blablabla&param2=blablabla...
/// Example:
/// /iscn/records/id?iscn_id=iscn://likecoin-chain/btC7CJvMm4WLj9Tau9LAPTfGK7sfymTJW7ORcFdruCU&from_version=2
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Likechain_Iscn_QueryProvider: CallHandlerProvider {
  var interceptors: Likechain_Iscn_QueryServerInterceptorFactoryProtocol? { get }

  func recordsById(request: Likechain_Iscn_QueryRecordsByIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryRecordsByIdResponse>

  func recordsByFingerprint(request: Likechain_Iscn_QueryRecordsByFingerprintRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryRecordsByFingerprintResponse>

  func recordsByOwner(request: Likechain_Iscn_QueryRecordsByOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryRecordsByOwnerResponse>

  func params(request: Likechain_Iscn_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryParamsResponse>

  func getCid(request: Likechain_Iscn_QueryGetCidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryGetCidResponse>

  func hasCid(request: Likechain_Iscn_QueryHasCidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryHasCidResponse>

  func getCidSize(request: Likechain_Iscn_QueryGetCidSizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Iscn_QueryGetCidSizeResponse>
}

extension Likechain_Iscn_QueryProvider {
  internal var serviceName: Substring {
    return Likechain_Iscn_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RecordsById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryRecordsByIdRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryRecordsByIdResponse>(),
        interceptors: self.interceptors?.makeRecordsByIdInterceptors() ?? [],
        userFunction: self.recordsById(request:context:)
      )

    case "RecordsByFingerprint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryRecordsByFingerprintRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryRecordsByFingerprintResponse>(),
        interceptors: self.interceptors?.makeRecordsByFingerprintInterceptors() ?? [],
        userFunction: self.recordsByFingerprint(request:context:)
      )

    case "RecordsByOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryRecordsByOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryRecordsByOwnerResponse>(),
        interceptors: self.interceptors?.makeRecordsByOwnerInterceptors() ?? [],
        userFunction: self.recordsByOwner(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "GetCid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryGetCidRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryGetCidResponse>(),
        interceptors: self.interceptors?.makeGetCidInterceptors() ?? [],
        userFunction: self.getCid(request:context:)
      )

    case "HasCid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryHasCidRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryHasCidResponse>(),
        interceptors: self.interceptors?.makeHasCidInterceptors() ?? [],
        userFunction: self.hasCid(request:context:)
      )

    case "GetCidSize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryGetCidSizeRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryGetCidSizeResponse>(),
        interceptors: self.interceptors?.makeGetCidSizeInterceptors() ?? [],
        userFunction: self.getCidSize(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Usage:
/// /iscn/api/endpoint?param1=blablabla&param2=blablabla...
/// Example:
/// /iscn/records/id?iscn_id=iscn://likecoin-chain/btC7CJvMm4WLj9Tau9LAPTfGK7sfymTJW7ORcFdruCU&from_version=2
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Likechain_Iscn_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Likechain_Iscn_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func recordsById(
    request: Likechain_Iscn_QueryRecordsByIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryRecordsByIdResponse

  @Sendable func recordsByFingerprint(
    request: Likechain_Iscn_QueryRecordsByFingerprintRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryRecordsByFingerprintResponse

  @Sendable func recordsByOwner(
    request: Likechain_Iscn_QueryRecordsByOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryRecordsByOwnerResponse

  @Sendable func params(
    request: Likechain_Iscn_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryParamsResponse

  @Sendable func getCid(
    request: Likechain_Iscn_QueryGetCidRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryGetCidResponse

  @Sendable func hasCid(
    request: Likechain_Iscn_QueryHasCidRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryHasCidResponse

  @Sendable func getCidSize(
    request: Likechain_Iscn_QueryGetCidSizeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Iscn_QueryGetCidSizeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Iscn_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Likechain_Iscn_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Likechain_Iscn_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Likechain_Iscn_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RecordsById":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryRecordsByIdRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryRecordsByIdResponse>(),
        interceptors: self.interceptors?.makeRecordsByIdInterceptors() ?? [],
        wrapping: self.recordsById(request:context:)
      )

    case "RecordsByFingerprint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryRecordsByFingerprintRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryRecordsByFingerprintResponse>(),
        interceptors: self.interceptors?.makeRecordsByFingerprintInterceptors() ?? [],
        wrapping: self.recordsByFingerprint(request:context:)
      )

    case "RecordsByOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryRecordsByOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryRecordsByOwnerResponse>(),
        interceptors: self.interceptors?.makeRecordsByOwnerInterceptors() ?? [],
        wrapping: self.recordsByOwner(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "GetCid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryGetCidRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryGetCidResponse>(),
        interceptors: self.interceptors?.makeGetCidInterceptors() ?? [],
        wrapping: self.getCid(request:context:)
      )

    case "HasCid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryHasCidRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryHasCidResponse>(),
        interceptors: self.interceptors?.makeHasCidInterceptors() ?? [],
        wrapping: self.hasCid(request:context:)
      )

    case "GetCidSize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Iscn_QueryGetCidSizeRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Iscn_QueryGetCidSizeResponse>(),
        interceptors: self.interceptors?.makeGetCidSizeInterceptors() ?? [],
        wrapping: self.getCidSize(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Likechain_Iscn_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'recordsById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordsByIdInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryRecordsByIdRequest, Likechain_Iscn_QueryRecordsByIdResponse>]

  /// - Returns: Interceptors to use when handling 'recordsByFingerprint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordsByFingerprintInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryRecordsByFingerprintRequest, Likechain_Iscn_QueryRecordsByFingerprintResponse>]

  /// - Returns: Interceptors to use when handling 'recordsByOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordsByOwnerInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryRecordsByOwnerRequest, Likechain_Iscn_QueryRecordsByOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryParamsRequest, Likechain_Iscn_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'getCid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCidInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryGetCidRequest, Likechain_Iscn_QueryGetCidResponse>]

  /// - Returns: Interceptors to use when handling 'hasCid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHasCidInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryHasCidRequest, Likechain_Iscn_QueryHasCidResponse>]

  /// - Returns: Interceptors to use when handling 'getCidSize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCidSizeInterceptors() -> [ServerInterceptor<Likechain_Iscn_QueryGetCidSizeRequest, Likechain_Iscn_QueryGetCidSizeResponse>]
}

internal enum Likechain_Iscn_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "likechain.iscn.Query",
    methods: [
      Likechain_Iscn_QueryServerMetadata.Methods.recordsById,
      Likechain_Iscn_QueryServerMetadata.Methods.recordsByFingerprint,
      Likechain_Iscn_QueryServerMetadata.Methods.recordsByOwner,
      Likechain_Iscn_QueryServerMetadata.Methods.params,
      Likechain_Iscn_QueryServerMetadata.Methods.getCid,
      Likechain_Iscn_QueryServerMetadata.Methods.hasCid,
      Likechain_Iscn_QueryServerMetadata.Methods.getCidSize,
    ]
  )

  internal enum Methods {
    internal static let recordsById = GRPCMethodDescriptor(
      name: "RecordsById",
      path: "/likechain.iscn.Query/RecordsById",
      type: GRPCCallType.unary
    )

    internal static let recordsByFingerprint = GRPCMethodDescriptor(
      name: "RecordsByFingerprint",
      path: "/likechain.iscn.Query/RecordsByFingerprint",
      type: GRPCCallType.unary
    )

    internal static let recordsByOwner = GRPCMethodDescriptor(
      name: "RecordsByOwner",
      path: "/likechain.iscn.Query/RecordsByOwner",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/likechain.iscn.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let getCid = GRPCMethodDescriptor(
      name: "GetCid",
      path: "/likechain.iscn.Query/GetCid",
      type: GRPCCallType.unary
    )

    internal static let hasCid = GRPCMethodDescriptor(
      name: "HasCid",
      path: "/likechain.iscn.Query/HasCid",
      type: GRPCCallType.unary
    )

    internal static let getCidSize = GRPCMethodDescriptor(
      name: "GetCidSize",
      path: "/likechain.iscn.Query/GetCidSize",
      type: GRPCCallType.unary
    )
  }
}
