// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/nexus/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Nexus_V1beta1_MaintainerState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: Data = Data()

  var missingVotes: Axelar_Utils_V1beta1_Bitmap {
    get {return _missingVotes ?? Axelar_Utils_V1beta1_Bitmap()}
    set {_missingVotes = newValue}
  }
  /// Returns true if `missingVotes` has been explicitly set.
  var hasMissingVotes: Bool {return self._missingVotes != nil}
  /// Clears the value of `missingVotes`. Subsequent reads from it will return its default value.
  mutating func clearMissingVotes() {self._missingVotes = nil}

  var incorrectVotes: Axelar_Utils_V1beta1_Bitmap {
    get {return _incorrectVotes ?? Axelar_Utils_V1beta1_Bitmap()}
    set {_incorrectVotes = newValue}
  }
  /// Returns true if `incorrectVotes` has been explicitly set.
  var hasIncorrectVotes: Bool {return self._incorrectVotes != nil}
  /// Clears the value of `incorrectVotes`. Subsequent reads from it will return its default value.
  mutating func clearIncorrectVotes() {self._incorrectVotes = nil}

  var chain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _missingVotes: Axelar_Utils_V1beta1_Bitmap? = nil
  fileprivate var _incorrectVotes: Axelar_Utils_V1beta1_Bitmap? = nil
}

/// ChainState represents the state of a registered blockchain
struct Axelar_Nexus_V1beta1_ChainState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: Axelar_Nexus_Exported_V1beta1_Chain {
    get {return _chain ?? Axelar_Nexus_Exported_V1beta1_Chain()}
    set {_chain = newValue}
  }
  /// Returns true if `chain` has been explicitly set.
  var hasChain: Bool {return self._chain != nil}
  /// Clears the value of `chain`. Subsequent reads from it will return its default value.
  mutating func clearChain() {self._chain = nil}

  var activated: Bool = false

  var assets: [Axelar_Nexus_Exported_V1beta1_Asset] = []

  var maintainerStates: [Axelar_Nexus_V1beta1_MaintainerState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chain: Axelar_Nexus_Exported_V1beta1_Chain? = nil
}

struct Axelar_Nexus_V1beta1_LinkedAddresses {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress {
    get {return _depositAddress ?? Axelar_Nexus_Exported_V1beta1_CrossChainAddress()}
    set {_depositAddress = newValue}
  }
  /// Returns true if `depositAddress` has been explicitly set.
  var hasDepositAddress: Bool {return self._depositAddress != nil}
  /// Clears the value of `depositAddress`. Subsequent reads from it will return its default value.
  mutating func clearDepositAddress() {self._depositAddress = nil}

  var recipientAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress {
    get {return _recipientAddress ?? Axelar_Nexus_Exported_V1beta1_CrossChainAddress()}
    set {_recipientAddress = newValue}
  }
  /// Returns true if `recipientAddress` has been explicitly set.
  var hasRecipientAddress: Bool {return self._recipientAddress != nil}
  /// Clears the value of `recipientAddress`. Subsequent reads from it will return its default value.
  mutating func clearRecipientAddress() {self._recipientAddress = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _depositAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress? = nil
  fileprivate var _recipientAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress? = nil
}

struct Axelar_Nexus_V1beta1_RateLimit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String = String()

  var limit: Cosmos_Base_V1beta1_Coin {
    get {return _limit ?? Cosmos_Base_V1beta1_Coin()}
    set {_limit = newValue}
  }
  /// Returns true if `limit` has been explicitly set.
  var hasLimit: Bool {return self._limit != nil}
  /// Clears the value of `limit`. Subsequent reads from it will return its default value.
  mutating func clearLimit() {self._limit = nil}

  var window: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _window ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_window = newValue}
  }
  /// Returns true if `window` has been explicitly set.
  var hasWindow: Bool {return self._window != nil}
  /// Clears the value of `window`. Subsequent reads from it will return its default value.
  mutating func clearWindow() {self._window = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _limit: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _window: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct Axelar_Nexus_V1beta1_TransferEpoch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var epoch: UInt64 = 0

  /// indicates whether the tracking is for transfers outgoing
  var direction: Axelar_Nexus_Exported_V1beta1_TransferDirection = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Axelar_Nexus_V1beta1_MaintainerState: @unchecked Sendable {}
extension Axelar_Nexus_V1beta1_ChainState: @unchecked Sendable {}
extension Axelar_Nexus_V1beta1_LinkedAddresses: @unchecked Sendable {}
extension Axelar_Nexus_V1beta1_RateLimit: @unchecked Sendable {}
extension Axelar_Nexus_V1beta1_TransferEpoch: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.nexus.v1beta1"

extension Axelar_Nexus_V1beta1_MaintainerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MaintainerState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "missing_votes"),
    3: .standard(proto: "incorrect_votes"),
    4: .same(proto: "chain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._missingVotes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._incorrectVotes) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._missingVotes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._incorrectVotes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_MaintainerState, rhs: Axelar_Nexus_V1beta1_MaintainerState) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._missingVotes != rhs._missingVotes {return false}
    if lhs._incorrectVotes != rhs._incorrectVotes {return false}
    if lhs.chain != rhs.chain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_V1beta1_ChainState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChainState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    3: .same(proto: "activated"),
    5: .same(proto: "assets"),
    6: .standard(proto: "maintainer_states"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._chain) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.activated) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.maintainerStates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._chain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.activated != false {
      try visitor.visitSingularBoolField(value: self.activated, fieldNumber: 3)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 5)
    }
    if !self.maintainerStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.maintainerStates, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_ChainState, rhs: Axelar_Nexus_V1beta1_ChainState) -> Bool {
    if lhs._chain != rhs._chain {return false}
    if lhs.activated != rhs.activated {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.maintainerStates != rhs.maintainerStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_V1beta1_LinkedAddresses: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LinkedAddresses"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deposit_address"),
    2: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._depositAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._recipientAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._depositAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._recipientAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_LinkedAddresses, rhs: Axelar_Nexus_V1beta1_LinkedAddresses) -> Bool {
    if lhs._depositAddress != rhs._depositAddress {return false}
    if lhs._recipientAddress != rhs._recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_V1beta1_RateLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RateLimit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "limit"),
    3: .same(proto: "window"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._limit) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._window) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    try { if let v = self._limit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._window {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_RateLimit, rhs: Axelar_Nexus_V1beta1_RateLimit) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs._limit != rhs._limit {return false}
    if lhs._window != rhs._window {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_V1beta1_TransferEpoch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferEpoch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "amount"),
    3: .same(proto: "epoch"),
    4: .same(proto: "direction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.epoch) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.epoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.epoch, fieldNumber: 3)
    }
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_TransferEpoch, rhs: Axelar_Nexus_V1beta1_TransferEpoch) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.epoch != rhs.epoch {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
