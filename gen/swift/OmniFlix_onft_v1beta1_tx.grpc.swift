//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: OmniFlix/onft/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `OmniFlix_Onft_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol OmniFlix_Onft_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgCreateDenom, OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>

  func updateDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateDenom, OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>

  func transferDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgTransferDenom, OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>

  func purgeDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgPurgeDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgPurgeDenom, OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>

  func mintONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgMintONFT,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgMintONFT, OmniFlix_Onft_V1beta1_MsgMintONFTResponse>

  func transferONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferONFT,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgTransferONFT, OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>

  func burnONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgBurnONFT,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgBurnONFT, OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>

  func updateParams(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateParams, OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>
}

extension OmniFlix_Onft_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "OmniFlix.onft.v1beta1.Msg"
  }

  /// Unary call to CreateDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgCreateDenom, OmniFlix_Onft_V1beta1_MsgCreateDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  /// Unary call to UpdateDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateDenom, OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDenomInterceptors() ?? []
    )
  }

  /// Unary call to TransferDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgTransferDenom, OmniFlix_Onft_V1beta1_MsgTransferDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? []
    )
  }

  /// Unary call to PurgeDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to PurgeDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func purgeDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgPurgeDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgPurgeDenom, OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.purgeDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurgeDenomInterceptors() ?? []
    )
  }

  /// Unary call to MintONFT
  ///
  /// - Parameters:
  ///   - request: Request to send to MintONFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgMintONFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgMintONFT, OmniFlix_Onft_V1beta1_MsgMintONFTResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.mintONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintONFTInterceptors() ?? []
    )
  }

  /// Unary call to TransferONFT
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferONFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferONFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgTransferONFT, OmniFlix_Onft_V1beta1_MsgTransferONFTResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferONFTInterceptors() ?? []
    )
  }

  /// Unary call to BurnONFT
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnONFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgBurnONFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgBurnONFT, OmniFlix_Onft_V1beta1_MsgBurnONFTResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.burnONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnONFTInterceptors() ?? []
    )
  }

  /// UpdateParams defines a governance operation for updating the onft module
  /// parameters. The authority is hard-coded to the onft module account.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateParams, OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension OmniFlix_Onft_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "OmniFlix_Onft_V1beta1_MsgNIOClient")
internal final class OmniFlix_Onft_V1beta1_MsgClient: OmniFlix_Onft_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the OmniFlix.onft.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct OmniFlix_Onft_V1beta1_MsgNIOClient: OmniFlix_Onft_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the OmniFlix.onft.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Onft_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgCreateDenom, OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>

  func makeUpdateDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateDenom, OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>

  func makeTransferDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgTransferDenom, OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>

  func makePurgeDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgPurgeDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgPurgeDenom, OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>

  func makeMintOnftCall(
    _ request: OmniFlix_Onft_V1beta1_MsgMintONFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgMintONFT, OmniFlix_Onft_V1beta1_MsgMintONFTResponse>

  func makeTransferOnftCall(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferONFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgTransferONFT, OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>

  func makeBurnOnftCall(
    _ request: OmniFlix_Onft_V1beta1_MsgBurnONFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgBurnONFT, OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>

  func makeUpdateParamsCall(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateParams, OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Onft_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Onft_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgCreateDenom, OmniFlix_Onft_V1beta1_MsgCreateDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  internal func makeUpdateDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateDenom, OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDenomInterceptors() ?? []
    )
  }

  internal func makeTransferDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgTransferDenom, OmniFlix_Onft_V1beta1_MsgTransferDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? []
    )
  }

  internal func makePurgeDenomCall(
    _ request: OmniFlix_Onft_V1beta1_MsgPurgeDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgPurgeDenom, OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.purgeDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurgeDenomInterceptors() ?? []
    )
  }

  internal func makeMintOnftCall(
    _ request: OmniFlix_Onft_V1beta1_MsgMintONFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgMintONFT, OmniFlix_Onft_V1beta1_MsgMintONFTResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.mintONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintONFTInterceptors() ?? []
    )
  }

  internal func makeTransferOnftCall(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferONFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgTransferONFT, OmniFlix_Onft_V1beta1_MsgTransferONFTResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferONFTInterceptors() ?? []
    )
  }

  internal func makeBurnOnftCall(
    _ request: OmniFlix_Onft_V1beta1_MsgBurnONFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgBurnONFT, OmniFlix_Onft_V1beta1_MsgBurnONFTResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.burnONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnONFTInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_MsgUpdateParams, OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Onft_V1beta1_MsgAsyncClientProtocol {
  internal func createDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgCreateDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  internal func updateDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateDenom,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDenomInterceptors() ?? []
    )
  }

  internal func transferDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferDenom,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgTransferDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? []
    )
  }

  internal func purgeDenom(
    _ request: OmniFlix_Onft_V1beta1_MsgPurgeDenom,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.purgeDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurgeDenomInterceptors() ?? []
    )
  }

  internal func mintONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgMintONFT,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgMintONFTResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.mintONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintONFTInterceptors() ?? []
    )
  }

  internal func transferONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgTransferONFT,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgTransferONFTResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferONFTInterceptors() ?? []
    )
  }

  internal func burnONFT(
    _ request: OmniFlix_Onft_V1beta1_MsgBurnONFT,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgBurnONFTResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.burnONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnONFTInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: OmniFlix_Onft_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct OmniFlix_Onft_V1beta1_MsgAsyncClient: OmniFlix_Onft_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol OmniFlix_Onft_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createDenom'.
  func makeCreateDenomInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgCreateDenom, OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDenom'.
  func makeUpdateDenomInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgUpdateDenom, OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'transferDenom'.
  func makeTransferDenomInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgTransferDenom, OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'purgeDenom'.
  func makePurgeDenomInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgPurgeDenom, OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'mintONFT'.
  func makeMintONFTInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgMintONFT, OmniFlix_Onft_V1beta1_MsgMintONFTResponse>]

  /// - Returns: Interceptors to use when invoking 'transferONFT'.
  func makeTransferONFTInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgTransferONFT, OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>]

  /// - Returns: Interceptors to use when invoking 'burnONFT'.
  func makeBurnONFTInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgBurnONFT, OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_MsgUpdateParams, OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>]
}

internal enum OmniFlix_Onft_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "OmniFlix.onft.v1beta1.Msg",
    methods: [
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.createDenom,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateDenom,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferDenom,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.purgeDenom,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.mintONFT,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.transferONFT,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.burnONFT,
      OmniFlix_Onft_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    internal static let updateDenom = GRPCMethodDescriptor(
      name: "UpdateDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/UpdateDenom",
      type: GRPCCallType.unary
    )

    internal static let transferDenom = GRPCMethodDescriptor(
      name: "TransferDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/TransferDenom",
      type: GRPCCallType.unary
    )

    internal static let purgeDenom = GRPCMethodDescriptor(
      name: "PurgeDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/PurgeDenom",
      type: GRPCCallType.unary
    )

    internal static let mintONFT = GRPCMethodDescriptor(
      name: "MintONFT",
      path: "/OmniFlix.onft.v1beta1.Msg/MintONFT",
      type: GRPCCallType.unary
    )

    internal static let transferONFT = GRPCMethodDescriptor(
      name: "TransferONFT",
      path: "/OmniFlix.onft.v1beta1.Msg/TransferONFT",
      type: GRPCCallType.unary
    )

    internal static let burnONFT = GRPCMethodDescriptor(
      name: "BurnONFT",
      path: "/OmniFlix.onft.v1beta1.Msg/BurnONFT",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/OmniFlix.onft.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol OmniFlix_Onft_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: OmniFlix_Onft_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  func createDenom(request: OmniFlix_Onft_V1beta1_MsgCreateDenom, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>

  func updateDenom(request: OmniFlix_Onft_V1beta1_MsgUpdateDenom, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>

  func transferDenom(request: OmniFlix_Onft_V1beta1_MsgTransferDenom, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>

  func purgeDenom(request: OmniFlix_Onft_V1beta1_MsgPurgeDenom, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>

  func mintONFT(request: OmniFlix_Onft_V1beta1_MsgMintONFT, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgMintONFTResponse>

  func transferONFT(request: OmniFlix_Onft_V1beta1_MsgTransferONFT, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>

  func burnONFT(request: OmniFlix_Onft_V1beta1_MsgBurnONFT, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>

  /// UpdateParams defines a governance operation for updating the onft module
  /// parameters. The authority is hard-coded to the onft module account.
  ///
  /// Since: cosmos-sdk 0.47
  func updateParams(request: OmniFlix_Onft_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>
}

extension OmniFlix_Onft_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return OmniFlix_Onft_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgCreateDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>(),
        interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? [],
        userFunction: self.createDenom(request:context:)
      )

    case "UpdateDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgUpdateDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>(),
        interceptors: self.interceptors?.makeUpdateDenomInterceptors() ?? [],
        userFunction: self.updateDenom(request:context:)
      )

    case "TransferDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgTransferDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>(),
        interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? [],
        userFunction: self.transferDenom(request:context:)
      )

    case "PurgeDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgPurgeDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>(),
        interceptors: self.interceptors?.makePurgeDenomInterceptors() ?? [],
        userFunction: self.purgeDenom(request:context:)
      )

    case "MintONFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgMintONFT>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgMintONFTResponse>(),
        interceptors: self.interceptors?.makeMintONFTInterceptors() ?? [],
        userFunction: self.mintONFT(request:context:)
      )

    case "TransferONFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgTransferONFT>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>(),
        interceptors: self.interceptors?.makeTransferONFTInterceptors() ?? [],
        userFunction: self.transferONFT(request:context:)
      )

    case "BurnONFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgBurnONFT>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>(),
        interceptors: self.interceptors?.makeBurnONFTInterceptors() ?? [],
        userFunction: self.burnONFT(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Onft_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Onft_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createDenom(
    request: OmniFlix_Onft_V1beta1_MsgCreateDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgCreateDenomResponse

  @Sendable func updateDenom(
    request: OmniFlix_Onft_V1beta1_MsgUpdateDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse

  @Sendable func transferDenom(
    request: OmniFlix_Onft_V1beta1_MsgTransferDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgTransferDenomResponse

  @Sendable func purgeDenom(
    request: OmniFlix_Onft_V1beta1_MsgPurgeDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse

  @Sendable func mintONFT(
    request: OmniFlix_Onft_V1beta1_MsgMintONFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgMintONFTResponse

  @Sendable func transferONFT(
    request: OmniFlix_Onft_V1beta1_MsgTransferONFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgTransferONFTResponse

  @Sendable func burnONFT(
    request: OmniFlix_Onft_V1beta1_MsgBurnONFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgBurnONFTResponse

  /// UpdateParams defines a governance operation for updating the onft module
  /// parameters. The authority is hard-coded to the onft module account.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func updateParams(
    request: OmniFlix_Onft_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Onft_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Onft_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return OmniFlix_Onft_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: OmniFlix_Onft_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgCreateDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>(),
        interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? [],
        wrapping: self.createDenom(request:context:)
      )

    case "UpdateDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgUpdateDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>(),
        interceptors: self.interceptors?.makeUpdateDenomInterceptors() ?? [],
        wrapping: self.updateDenom(request:context:)
      )

    case "TransferDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgTransferDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>(),
        interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? [],
        wrapping: self.transferDenom(request:context:)
      )

    case "PurgeDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgPurgeDenom>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>(),
        interceptors: self.interceptors?.makePurgeDenomInterceptors() ?? [],
        wrapping: self.purgeDenom(request:context:)
      )

    case "MintONFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgMintONFT>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgMintONFTResponse>(),
        interceptors: self.interceptors?.makeMintONFTInterceptors() ?? [],
        wrapping: self.mintONFT(request:context:)
      )

    case "TransferONFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgTransferONFT>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>(),
        interceptors: self.interceptors?.makeTransferONFTInterceptors() ?? [],
        wrapping: self.transferONFT(request:context:)
      )

    case "BurnONFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgBurnONFT>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>(),
        interceptors: self.interceptors?.makeBurnONFTInterceptors() ?? [],
        wrapping: self.burnONFT(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol OmniFlix_Onft_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDenomInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgCreateDenom, OmniFlix_Onft_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when handling 'updateDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDenomInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgUpdateDenom, OmniFlix_Onft_V1beta1_MsgUpdateDenomResponse>]

  /// - Returns: Interceptors to use when handling 'transferDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferDenomInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgTransferDenom, OmniFlix_Onft_V1beta1_MsgTransferDenomResponse>]

  /// - Returns: Interceptors to use when handling 'purgeDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePurgeDenomInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgPurgeDenom, OmniFlix_Onft_V1beta1_MsgPurgeDenomResponse>]

  /// - Returns: Interceptors to use when handling 'mintONFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintONFTInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgMintONFT, OmniFlix_Onft_V1beta1_MsgMintONFTResponse>]

  /// - Returns: Interceptors to use when handling 'transferONFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferONFTInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgTransferONFT, OmniFlix_Onft_V1beta1_MsgTransferONFTResponse>]

  /// - Returns: Interceptors to use when handling 'burnONFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnONFTInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgBurnONFT, OmniFlix_Onft_V1beta1_MsgBurnONFTResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_MsgUpdateParams, OmniFlix_Onft_V1beta1_MsgUpdateParamsResponse>]
}

internal enum OmniFlix_Onft_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "OmniFlix.onft.v1beta1.Msg",
    methods: [
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.createDenom,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.updateDenom,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.transferDenom,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.purgeDenom,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.mintONFT,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.transferONFT,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.burnONFT,
      OmniFlix_Onft_V1beta1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    internal static let updateDenom = GRPCMethodDescriptor(
      name: "UpdateDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/UpdateDenom",
      type: GRPCCallType.unary
    )

    internal static let transferDenom = GRPCMethodDescriptor(
      name: "TransferDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/TransferDenom",
      type: GRPCCallType.unary
    )

    internal static let purgeDenom = GRPCMethodDescriptor(
      name: "PurgeDenom",
      path: "/OmniFlix.onft.v1beta1.Msg/PurgeDenom",
      type: GRPCCallType.unary
    )

    internal static let mintONFT = GRPCMethodDescriptor(
      name: "MintONFT",
      path: "/OmniFlix.onft.v1beta1.Msg/MintONFT",
      type: GRPCCallType.unary
    )

    internal static let transferONFT = GRPCMethodDescriptor(
      name: "TransferONFT",
      path: "/OmniFlix.onft.v1beta1.Msg/TransferONFT",
      type: GRPCCallType.unary
    )

    internal static let burnONFT = GRPCMethodDescriptor(
      name: "BurnONFT",
      path: "/OmniFlix.onft.v1beta1.Msg/BurnONFT",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/OmniFlix.onft.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
