// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dymension/sequencer/sequencers_by_rollapp.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// SequencersByRollapp defines an map between rollappId to a list of 
/// all sequencers that belongs to it.
struct Dymensionxyz_Dymension_Sequencer_SequencersByRollapp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// rollappId is the unique identifier of the rollapp chain.
  /// The rollappId follows the same standard as cosmos chain_id.
  var rollappID: String = String()

  /// list of sequencers' account address
  /// repeated string sequencers = 2;
  var sequencers: Dymensionxyz_Dymension_Sequencer_Sequencers {
    get {return _sequencers ?? Dymensionxyz_Dymension_Sequencer_Sequencers()}
    set {_sequencers = newValue}
  }
  /// Returns true if `sequencers` has been explicitly set.
  var hasSequencers: Bool {return self._sequencers != nil}
  /// Clears the value of `sequencers`. Subsequent reads from it will return its default value.
  mutating func clearSequencers() {self._sequencers = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sequencers: Dymensionxyz_Dymension_Sequencer_Sequencers? = nil
}

/// Sequencers defines list of sequencers addresses.
struct Dymensionxyz_Dymension_Sequencer_Sequencers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addresses: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dymensionxyz_Dymension_Sequencer_SequencersByRollapp: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Sequencer_Sequencers: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dymensionxyz.dymension.sequencer"

extension Dymensionxyz_Dymension_Sequencer_SequencersByRollapp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SequencersByRollapp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rollappId"),
    2: .same(proto: "sequencers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rollappID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sequencers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rollappID.isEmpty {
      try visitor.visitSingularStringField(value: self.rollappID, fieldNumber: 1)
    }
    try { if let v = self._sequencers {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Sequencer_SequencersByRollapp, rhs: Dymensionxyz_Dymension_Sequencer_SequencersByRollapp) -> Bool {
    if lhs.rollappID != rhs.rollappID {return false}
    if lhs._sequencers != rhs._sequencers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Sequencer_Sequencers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Sequencers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addresses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.addresses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addresses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Sequencer_Sequencers, rhs: Dymensionxyz_Dymension_Sequencer_Sequencers) -> Bool {
    if lhs.addresses != rhs.addresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
