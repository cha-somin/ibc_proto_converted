// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/query/v1beta1/account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryAccountAssetsRequest is the request type for the Query/AccountAssets RPC method.
struct Kyve_Query_V1beta1_QueryAccountAssetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address ...
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
struct Kyve_Query_V1beta1_QueryAccountAssetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// balance ...
  var balance: UInt64 = 0

  /// protocol_staking ...
  var protocolSelfDelegation: UInt64 = 0

  /// protocol_staking_unbonding
  var protocolSelfDelegationUnbonding: UInt64 = 0

  /// protocol_delegation ...
  var protocolDelegation: UInt64 = 0

  /// protocol_delegation_unbonding
  var protocolDelegationUnbonding: UInt64 = 0

  /// protocol_rewards ...
  var protocolRewards: UInt64 = 0

  /// protocol_funding ...
  var protocolFunding: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryAccountFundedListRequest ...
struct Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pagination defines an optional pagination for the request.
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  /// address ...
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
struct Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// balance ...
  var unbondings: [Kyve_Query_V1beta1_DelegationUnbonding] = []

  /// pagination defines the pagination in the response.
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
struct Kyve_Query_V1beta1_DelegationUnbonding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// amount
  var amount: UInt64 = 0

  /// creation_time
  var creationTime: UInt64 = 0

  /// staker
  var staker: Kyve_Query_V1beta1_FullStaker {
    get {return _staker ?? Kyve_Query_V1beta1_FullStaker()}
    set {_staker = newValue}
  }
  /// Returns true if `staker` has been explicitly set.
  var hasStaker: Bool {return self._staker != nil}
  /// Clears the value of `staker`. Subsequent reads from it will return its default value.
  mutating func clearStaker() {self._staker = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _staker: Kyve_Query_V1beta1_FullStaker? = nil
}

/// QueryAccountFundedListRequest is the request type for the account queries with pagination
struct Kyve_Query_V1beta1_QueryAccountFundedListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address ...
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryAccountFundedListResponse is the response type for the Query/AccountFundedList RPC method.
struct Kyve_Query_V1beta1_QueryAccountFundedListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// funded ...
  var funded: [Kyve_Query_V1beta1_Funded] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Funded ...
struct Kyve_Query_V1beta1_Funded {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// amount ...
  var amount: UInt64 = 0

  /// pool ...
  var pool: Kyve_Query_V1beta1_BasicPool {
    get {return _pool ?? Kyve_Query_V1beta1_BasicPool()}
    set {_pool = newValue}
  }
  /// Returns true if `pool` has been explicitly set.
  var hasPool: Bool {return self._pool != nil}
  /// Clears the value of `pool`. Subsequent reads from it will return its default value.
  mutating func clearPool() {self._pool = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pool: Kyve_Query_V1beta1_BasicPool? = nil
}

/// QueryAccountDelegationListRequest ...
struct Kyve_Query_V1beta1_QueryAccountRedelegationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address ...
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method.
struct Kyve_Query_V1beta1_QueryAccountRedelegationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// redelegation_cooldown_entries ...
  var redelegationCooldownEntries: [Kyve_Query_V1beta1_RedelegationEntry] = []

  /// availableSlots ...
  var availableSlots: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// RedelegationEntry ...
struct Kyve_Query_V1beta1_RedelegationEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creation_date ...
  var creationDate: UInt64 = 0

  /// finish_date ...
  var finishDate: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Query_V1beta1_QueryAccountAssetsRequest: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountAssetsResponse: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse: @unchecked Sendable {}
extension Kyve_Query_V1beta1_DelegationUnbonding: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountFundedListRequest: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountFundedListResponse: @unchecked Sendable {}
extension Kyve_Query_V1beta1_Funded: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountRedelegationRequest: @unchecked Sendable {}
extension Kyve_Query_V1beta1_QueryAccountRedelegationResponse: @unchecked Sendable {}
extension Kyve_Query_V1beta1_RedelegationEntry: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.query.v1beta1"

extension Kyve_Query_V1beta1_QueryAccountAssetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountAssetsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountAssetsRequest, rhs: Kyve_Query_V1beta1_QueryAccountAssetsRequest) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountAssetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountAssetsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
    2: .standard(proto: "protocol_self_delegation"),
    3: .standard(proto: "protocol_self_delegation_unbonding"),
    4: .standard(proto: "protocol_delegation"),
    5: .standard(proto: "protocol_delegation_unbonding"),
    6: .standard(proto: "protocol_rewards"),
    7: .standard(proto: "protocol_funding"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.balance) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.protocolSelfDelegation) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.protocolSelfDelegationUnbonding) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.protocolDelegation) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.protocolDelegationUnbonding) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.protocolRewards) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.protocolFunding) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.balance != 0 {
      try visitor.visitSingularUInt64Field(value: self.balance, fieldNumber: 1)
    }
    if self.protocolSelfDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.protocolSelfDelegation, fieldNumber: 2)
    }
    if self.protocolSelfDelegationUnbonding != 0 {
      try visitor.visitSingularUInt64Field(value: self.protocolSelfDelegationUnbonding, fieldNumber: 3)
    }
    if self.protocolDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.protocolDelegation, fieldNumber: 4)
    }
    if self.protocolDelegationUnbonding != 0 {
      try visitor.visitSingularUInt64Field(value: self.protocolDelegationUnbonding, fieldNumber: 5)
    }
    if self.protocolRewards != 0 {
      try visitor.visitSingularUInt64Field(value: self.protocolRewards, fieldNumber: 6)
    }
    if self.protocolFunding != 0 {
      try visitor.visitSingularUInt64Field(value: self.protocolFunding, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountAssetsResponse, rhs: Kyve_Query_V1beta1_QueryAccountAssetsResponse) -> Bool {
    if lhs.balance != rhs.balance {return false}
    if lhs.protocolSelfDelegation != rhs.protocolSelfDelegation {return false}
    if lhs.protocolSelfDelegationUnbonding != rhs.protocolSelfDelegationUnbonding {return false}
    if lhs.protocolDelegation != rhs.protocolDelegation {return false}
    if lhs.protocolDelegationUnbonding != rhs.protocolDelegationUnbonding {return false}
    if lhs.protocolRewards != rhs.protocolRewards {return false}
    if lhs.protocolFunding != rhs.protocolFunding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountDelegationUnbondingsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
    2: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, rhs: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountDelegationUnbondingsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unbondings"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.unbondings) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.unbondings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unbondings, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse, rhs: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse) -> Bool {
    if lhs.unbondings != rhs.unbondings {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_DelegationUnbonding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegationUnbonding"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "creation_time"),
    3: .same(proto: "staker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.creationTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._staker) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 1)
    }
    if self.creationTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.creationTime, fieldNumber: 2)
    }
    try { if let v = self._staker {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_DelegationUnbonding, rhs: Kyve_Query_V1beta1_DelegationUnbonding) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.creationTime != rhs.creationTime {return false}
    if lhs._staker != rhs._staker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountFundedListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountFundedListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountFundedListRequest, rhs: Kyve_Query_V1beta1_QueryAccountFundedListRequest) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountFundedListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountFundedListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "funded"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.funded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.funded.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.funded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountFundedListResponse, rhs: Kyve_Query_V1beta1_QueryAccountFundedListResponse) -> Bool {
    if lhs.funded != rhs.funded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_Funded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Funded"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "pool"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 1)
    }
    try { if let v = self._pool {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_Funded, rhs: Kyve_Query_V1beta1_Funded) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs._pool != rhs._pool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountRedelegationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountRedelegationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountRedelegationRequest, rhs: Kyve_Query_V1beta1_QueryAccountRedelegationRequest) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_QueryAccountRedelegationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryAccountRedelegationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "redelegation_cooldown_entries"),
    2: .standard(proto: "available_slots"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.redelegationCooldownEntries) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.availableSlots) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.redelegationCooldownEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redelegationCooldownEntries, fieldNumber: 1)
    }
    if self.availableSlots != 0 {
      try visitor.visitSingularUInt64Field(value: self.availableSlots, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_QueryAccountRedelegationResponse, rhs: Kyve_Query_V1beta1_QueryAccountRedelegationResponse) -> Bool {
    if lhs.redelegationCooldownEntries != rhs.redelegationCooldownEntries {return false}
    if lhs.availableSlots != rhs.availableSlots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_RedelegationEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedelegationEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "creation_date"),
    2: .standard(proto: "finish_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.creationDate) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.finishDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.creationDate != 0 {
      try visitor.visitSingularUInt64Field(value: self.creationDate, fieldNumber: 1)
    }
    if self.finishDate != 0 {
      try visitor.visitSingularUInt64Field(value: self.finishDate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_RedelegationEntry, rhs: Kyve_Query_V1beta1_RedelegationEntry) -> Bool {
    if lhs.creationDate != rhs.creationDate {return false}
    if lhs.finishDate != rhs.finishDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
