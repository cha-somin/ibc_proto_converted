//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kava/liquid/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for liquid module
///
/// Usage: instantiate `Kava_Liquid_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Kava_Liquid_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func delegatedBalance(
    _ request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>

  func totalSupply(
    _ request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Liquid_V1beta1_QueryTotalSupplyRequest, Kava_Liquid_V1beta1_QueryTotalSupplyResponse>
}

extension Kava_Liquid_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "kava.liquid.v1beta1.Query"
  }

  /// DelegatedBalance returns an account's vesting and vested coins currently delegated to validators.
  /// It ignores coins in unbonding delegations.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatedBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatedBalance(
    _ request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse> {
    return self.makeUnaryCall(
      path: Kava_Liquid_V1beta1_QueryClientMetadata.Methods.delegatedBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatedBalanceInterceptors() ?? []
    )
  }

  /// TotalSupply returns the total sum of all coins currently locked into the liquid module.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalSupply(
    _ request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Liquid_V1beta1_QueryTotalSupplyRequest, Kava_Liquid_V1beta1_QueryTotalSupplyResponse> {
    return self.makeUnaryCall(
      path: Kava_Liquid_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kava_Liquid_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kava_Liquid_V1beta1_QueryNIOClient")
internal final class Kava_Liquid_V1beta1_QueryClient: Kava_Liquid_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kava.liquid.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kava_Liquid_V1beta1_QueryNIOClient: Kava_Liquid_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the kava.liquid.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for liquid module
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kava_Liquid_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeDelegatedBalanceCall(
    _ request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>

  func makeTotalSupplyCall(
    _ request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Liquid_V1beta1_QueryTotalSupplyRequest, Kava_Liquid_V1beta1_QueryTotalSupplyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kava_Liquid_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kava_Liquid_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDelegatedBalanceCall(
    _ request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Liquid_V1beta1_QueryClientMetadata.Methods.delegatedBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatedBalanceInterceptors() ?? []
    )
  }

  internal func makeTotalSupplyCall(
    _ request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Liquid_V1beta1_QueryTotalSupplyRequest, Kava_Liquid_V1beta1_QueryTotalSupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Liquid_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kava_Liquid_V1beta1_QueryAsyncClientProtocol {
  internal func delegatedBalance(
    _ request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Liquid_V1beta1_QueryClientMetadata.Methods.delegatedBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatedBalanceInterceptors() ?? []
    )
  }

  internal func totalSupply(
    _ request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Liquid_V1beta1_QueryTotalSupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Liquid_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kava_Liquid_V1beta1_QueryAsyncClient: Kava_Liquid_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kava_Liquid_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'delegatedBalance'.
  func makeDelegatedBalanceInterceptors() -> [ClientInterceptor<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSupply'.
  func makeTotalSupplyInterceptors() -> [ClientInterceptor<Kava_Liquid_V1beta1_QueryTotalSupplyRequest, Kava_Liquid_V1beta1_QueryTotalSupplyResponse>]
}

internal enum Kava_Liquid_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "kava.liquid.v1beta1.Query",
    methods: [
      Kava_Liquid_V1beta1_QueryClientMetadata.Methods.delegatedBalance,
      Kava_Liquid_V1beta1_QueryClientMetadata.Methods.totalSupply,
    ]
  )

  internal enum Methods {
    internal static let delegatedBalance = GRPCMethodDescriptor(
      name: "DelegatedBalance",
      path: "/kava.liquid.v1beta1.Query/DelegatedBalance",
      type: GRPCCallType.unary
    )

    internal static let totalSupply = GRPCMethodDescriptor(
      name: "TotalSupply",
      path: "/kava.liquid.v1beta1.Query/TotalSupply",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for liquid module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kava_Liquid_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Kava_Liquid_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// DelegatedBalance returns an account's vesting and vested coins currently delegated to validators.
  /// It ignores coins in unbonding delegations.
  func delegatedBalance(request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>

  /// TotalSupply returns the total sum of all coins currently locked into the liquid module.
  func totalSupply(request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Liquid_V1beta1_QueryTotalSupplyResponse>
}

extension Kava_Liquid_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Kava_Liquid_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DelegatedBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>(),
        interceptors: self.interceptors?.makeDelegatedBalanceInterceptors() ?? [],
        userFunction: self.delegatedBalance(request:context:)
      )

    case "TotalSupply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Liquid_V1beta1_QueryTotalSupplyRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Liquid_V1beta1_QueryTotalSupplyResponse>(),
        interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? [],
        userFunction: self.totalSupply(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for liquid module
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kava_Liquid_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kava_Liquid_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// DelegatedBalance returns an account's vesting and vested coins currently delegated to validators.
  /// It ignores coins in unbonding delegations.
  @Sendable func delegatedBalance(
    request: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse

  /// TotalSupply returns the total sum of all coins currently locked into the liquid module.
  @Sendable func totalSupply(
    request: Kava_Liquid_V1beta1_QueryTotalSupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Liquid_V1beta1_QueryTotalSupplyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kava_Liquid_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kava_Liquid_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kava_Liquid_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kava_Liquid_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DelegatedBalance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>(),
        interceptors: self.interceptors?.makeDelegatedBalanceInterceptors() ?? [],
        wrapping: self.delegatedBalance(request:context:)
      )

    case "TotalSupply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Liquid_V1beta1_QueryTotalSupplyRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Liquid_V1beta1_QueryTotalSupplyResponse>(),
        interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? [],
        wrapping: self.totalSupply(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kava_Liquid_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'delegatedBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatedBalanceInterceptors() -> [ServerInterceptor<Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'totalSupply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalSupplyInterceptors() -> [ServerInterceptor<Kava_Liquid_V1beta1_QueryTotalSupplyRequest, Kava_Liquid_V1beta1_QueryTotalSupplyResponse>]
}

internal enum Kava_Liquid_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "kava.liquid.v1beta1.Query",
    methods: [
      Kava_Liquid_V1beta1_QueryServerMetadata.Methods.delegatedBalance,
      Kava_Liquid_V1beta1_QueryServerMetadata.Methods.totalSupply,
    ]
  )

  internal enum Methods {
    internal static let delegatedBalance = GRPCMethodDescriptor(
      name: "DelegatedBalance",
      path: "/kava.liquid.v1beta1.Query/DelegatedBalance",
      type: GRPCCallType.unary
    )

    internal static let totalSupply = GRPCMethodDescriptor(
      name: "TotalSupply",
      path: "/kava.liquid.v1beta1.Query/TotalSupply",
      type: GRPCCallType.unary
    )
  }
}
