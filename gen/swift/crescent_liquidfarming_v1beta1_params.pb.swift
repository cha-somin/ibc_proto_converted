// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/liquidfarming/v1beta1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the module.
struct Crescent_Liquidfarming_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feeCollector: String = String()

  var rewardsAuctionDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _rewardsAuctionDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_rewardsAuctionDuration = newValue}
  }
  /// Returns true if `rewardsAuctionDuration` has been explicitly set.
  var hasRewardsAuctionDuration: Bool {return self._rewardsAuctionDuration != nil}
  /// Clears the value of `rewardsAuctionDuration`. Subsequent reads from it will return its default value.
  mutating func clearRewardsAuctionDuration() {self._rewardsAuctionDuration = nil}

  var liquidFarms: [Crescent_Liquidfarming_V1beta1_LiquidFarm] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rewardsAuctionDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// LiquidFarm defines liquid farm object that provides auto compounding functionality
/// for the liquidity pool and undergoes farming rewards auction process.
/// See the technical spec for more detailed information.
struct Crescent_Liquidfarming_V1beta1_LiquidFarm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var minFarmAmount: String = String()

  var minBidAmount: String = String()

  var feeRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Crescent_Liquidfarming_V1beta1_Params: @unchecked Sendable {}
extension Crescent_Liquidfarming_V1beta1_LiquidFarm: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.liquidfarming.v1beta1"

extension Crescent_Liquidfarming_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fee_collector"),
    2: .standard(proto: "rewards_auction_duration"),
    3: .standard(proto: "liquid_farms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feeCollector) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rewardsAuctionDuration) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.liquidFarms) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.feeCollector.isEmpty {
      try visitor.visitSingularStringField(value: self.feeCollector, fieldNumber: 1)
    }
    try { if let v = self._rewardsAuctionDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.liquidFarms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.liquidFarms, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Liquidfarming_V1beta1_Params, rhs: Crescent_Liquidfarming_V1beta1_Params) -> Bool {
    if lhs.feeCollector != rhs.feeCollector {return false}
    if lhs._rewardsAuctionDuration != rhs._rewardsAuctionDuration {return false}
    if lhs.liquidFarms != rhs.liquidFarms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Liquidfarming_V1beta1_LiquidFarm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiquidFarm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "min_farm_amount"),
    3: .standard(proto: "min_bid_amount"),
    4: .standard(proto: "fee_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.minFarmAmount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.minBidAmount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.feeRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.minFarmAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minFarmAmount, fieldNumber: 2)
    }
    if !self.minBidAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minBidAmount, fieldNumber: 3)
    }
    if !self.feeRate.isEmpty {
      try visitor.visitSingularStringField(value: self.feeRate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Liquidfarming_V1beta1_LiquidFarm, rhs: Crescent_Liquidfarming_V1beta1_LiquidFarm) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.minFarmAmount != rhs.minFarmAmount {return false}
    if lhs.minBidAmount != rhs.minBidAmount {return false}
    if lhs.feeRate != rhs.feeRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
