// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/delegation/v1beta1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the delegation module parameters.
struct Kyve_Delegation_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unbonding_delegation_time ...
  var unbondingDelegationTime: UInt64 = 0

  /// unbonding_delegation_time ...
  var redelegationCooldown: UInt64 = 0

  /// unbonding_delegation_time ...
  var redelegationMaxAmount: UInt64 = 0

  /// vote_slash ...
  var voteSlash: String = String()

  /// upload_slash ...
  var uploadSlash: String = String()

  /// timeout_slash ...
  var timeoutSlash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Delegation_V1beta1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.delegation.v1beta1"

extension Kyve_Delegation_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unbonding_delegation_time"),
    2: .standard(proto: "redelegation_cooldown"),
    3: .standard(proto: "redelegation_max_amount"),
    4: .standard(proto: "vote_slash"),
    5: .standard(proto: "upload_slash"),
    6: .standard(proto: "timeout_slash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.unbondingDelegationTime) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.redelegationCooldown) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.redelegationMaxAmount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.voteSlash) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.uploadSlash) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.timeoutSlash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.unbondingDelegationTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.unbondingDelegationTime, fieldNumber: 1)
    }
    if self.redelegationCooldown != 0 {
      try visitor.visitSingularUInt64Field(value: self.redelegationCooldown, fieldNumber: 2)
    }
    if self.redelegationMaxAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.redelegationMaxAmount, fieldNumber: 3)
    }
    if !self.voteSlash.isEmpty {
      try visitor.visitSingularStringField(value: self.voteSlash, fieldNumber: 4)
    }
    if !self.uploadSlash.isEmpty {
      try visitor.visitSingularStringField(value: self.uploadSlash, fieldNumber: 5)
    }
    if !self.timeoutSlash.isEmpty {
      try visitor.visitSingularStringField(value: self.timeoutSlash, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_Params, rhs: Kyve_Delegation_V1beta1_Params) -> Bool {
    if lhs.unbondingDelegationTime != rhs.unbondingDelegationTime {return false}
    if lhs.redelegationCooldown != rhs.redelegationCooldown {return false}
    if lhs.redelegationMaxAmount != rhs.redelegationMaxAmount {return false}
    if lhs.voteSlash != rhs.voteSlash {return false}
    if lhs.uploadSlash != rhs.uploadSlash {return false}
    if lhs.timeoutSlash != rhs.timeoutSlash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
