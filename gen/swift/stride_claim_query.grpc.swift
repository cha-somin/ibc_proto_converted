//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/claim/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Stride_Claim_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Claim_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? { get }

  func distributorAccountBalance(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>

  func params(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>

  func claimRecord(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>

  func claimableForAction(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>

  func totalClaimable(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>

  func userVestings(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>

  func claimStatus(
    _ request: Stride_Claim_QueryClaimStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryClaimStatusRequest, Stride_Claim_QueryClaimStatusResponse>

  func claimMetadata(
    _ request: Stride_Claim_QueryClaimMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Claim_QueryClaimMetadataRequest, Stride_Claim_QueryClaimMetadataResponse>
}

extension Stride_Claim_QueryClientProtocol {
  internal var serviceName: String {
    return "stride.claim.Query"
  }

  /// Unary call to DistributorAccountBalance
  ///
  /// - Parameters:
  ///   - request: Request to send to DistributorAccountBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func distributorAccountBalance(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.distributorAccountBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? []
    )
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to ClaimRecord
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimRecord(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? []
    )
  }

  /// Unary call to ClaimableForAction
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimableForAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimableForAction(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimableForAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? []
    )
  }

  /// Unary call to TotalClaimable
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalClaimable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalClaimable(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.totalClaimable.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? []
    )
  }

  /// Unary call to UserVestings
  ///
  /// - Parameters:
  ///   - request: Request to send to UserVestings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userVestings(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.userVestings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? []
    )
  }

  /// Unary call to ClaimStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimStatus(
    _ request: Stride_Claim_QueryClaimStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryClaimStatusRequest, Stride_Claim_QueryClaimStatusResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimStatusInterceptors() ?? []
    )
  }

  /// Unary call to ClaimMetadata
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimMetadata(
    _ request: Stride_Claim_QueryClaimMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Claim_QueryClaimMetadataRequest, Stride_Claim_QueryClaimMetadataResponse> {
    return self.makeUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimMetadataInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Stride_Claim_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Stride_Claim_QueryNIOClient")
internal final class Stride_Claim_QueryClient: Stride_Claim_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the stride.claim.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Stride_Claim_QueryNIOClient: Stride_Claim_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.claim.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stride_Claim_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? { get }

  func makeDistributorAccountBalanceCall(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>

  func makeParamsCall(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>

  func makeClaimRecordCall(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>

  func makeClaimableForActionCall(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>

  func makeTotalClaimableCall(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>

  func makeUserVestingsCall(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>

  func makeClaimStatusCall(
    _ request: Stride_Claim_QueryClaimStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimStatusRequest, Stride_Claim_QueryClaimStatusResponse>

  func makeClaimMetadataCall(
    _ request: Stride_Claim_QueryClaimMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimMetadataRequest, Stride_Claim_QueryClaimMetadataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stride_Claim_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stride_Claim_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDistributorAccountBalanceCall(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.distributorAccountBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeClaimRecordCall(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? []
    )
  }

  internal func makeClaimableForActionCall(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimableForAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? []
    )
  }

  internal func makeTotalClaimableCall(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.totalClaimable.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? []
    )
  }

  internal func makeUserVestingsCall(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.userVestings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? []
    )
  }

  internal func makeClaimStatusCall(
    _ request: Stride_Claim_QueryClaimStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimStatusRequest, Stride_Claim_QueryClaimStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimStatusInterceptors() ?? []
    )
  }

  internal func makeClaimMetadataCall(
    _ request: Stride_Claim_QueryClaimMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Claim_QueryClaimMetadataRequest, Stride_Claim_QueryClaimMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stride_Claim_QueryAsyncClientProtocol {
  internal func distributorAccountBalance(
    _ request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryDistributorAccountBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.distributorAccountBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Stride_Claim_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func claimRecord(
    _ request: Stride_Claim_QueryClaimRecordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryClaimRecordResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? []
    )
  }

  internal func claimableForAction(
    _ request: Stride_Claim_QueryClaimableForActionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryClaimableForActionResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimableForAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? []
    )
  }

  internal func totalClaimable(
    _ request: Stride_Claim_QueryTotalClaimableRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryTotalClaimableResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.totalClaimable.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? []
    )
  }

  internal func userVestings(
    _ request: Stride_Claim_QueryUserVestingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryUserVestingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.userVestings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? []
    )
  }

  internal func claimStatus(
    _ request: Stride_Claim_QueryClaimStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryClaimStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimStatusInterceptors() ?? []
    )
  }

  internal func claimMetadata(
    _ request: Stride_Claim_QueryClaimMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Claim_QueryClaimMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Claim_QueryClientMetadata.Methods.claimMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Stride_Claim_QueryAsyncClient: Stride_Claim_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Claim_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Stride_Claim_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'distributorAccountBalance'.
  func makeDistributorAccountBalanceInterceptors() -> [ClientInterceptor<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimRecord'.
  func makeClaimRecordInterceptors() -> [ClientInterceptor<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'claimableForAction'.
  func makeClaimableForActionInterceptors() -> [ClientInterceptor<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>]

  /// - Returns: Interceptors to use when invoking 'totalClaimable'.
  func makeTotalClaimableInterceptors() -> [ClientInterceptor<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>]

  /// - Returns: Interceptors to use when invoking 'userVestings'.
  func makeUserVestingsInterceptors() -> [ClientInterceptor<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimStatus'.
  func makeClaimStatusInterceptors() -> [ClientInterceptor<Stride_Claim_QueryClaimStatusRequest, Stride_Claim_QueryClaimStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'claimMetadata'.
  func makeClaimMetadataInterceptors() -> [ClientInterceptor<Stride_Claim_QueryClaimMetadataRequest, Stride_Claim_QueryClaimMetadataResponse>]
}

internal enum Stride_Claim_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "stride.claim.Query",
    methods: [
      Stride_Claim_QueryClientMetadata.Methods.distributorAccountBalance,
      Stride_Claim_QueryClientMetadata.Methods.params,
      Stride_Claim_QueryClientMetadata.Methods.claimRecord,
      Stride_Claim_QueryClientMetadata.Methods.claimableForAction,
      Stride_Claim_QueryClientMetadata.Methods.totalClaimable,
      Stride_Claim_QueryClientMetadata.Methods.userVestings,
      Stride_Claim_QueryClientMetadata.Methods.claimStatus,
      Stride_Claim_QueryClientMetadata.Methods.claimMetadata,
    ]
  )

  internal enum Methods {
    internal static let distributorAccountBalance = GRPCMethodDescriptor(
      name: "DistributorAccountBalance",
      path: "/stride.claim.Query/DistributorAccountBalance",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/stride.claim.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let claimRecord = GRPCMethodDescriptor(
      name: "ClaimRecord",
      path: "/stride.claim.Query/ClaimRecord",
      type: GRPCCallType.unary
    )

    internal static let claimableForAction = GRPCMethodDescriptor(
      name: "ClaimableForAction",
      path: "/stride.claim.Query/ClaimableForAction",
      type: GRPCCallType.unary
    )

    internal static let totalClaimable = GRPCMethodDescriptor(
      name: "TotalClaimable",
      path: "/stride.claim.Query/TotalClaimable",
      type: GRPCCallType.unary
    )

    internal static let userVestings = GRPCMethodDescriptor(
      name: "UserVestings",
      path: "/stride.claim.Query/UserVestings",
      type: GRPCCallType.unary
    )

    internal static let claimStatus = GRPCMethodDescriptor(
      name: "ClaimStatus",
      path: "/stride.claim.Query/ClaimStatus",
      type: GRPCCallType.unary
    )

    internal static let claimMetadata = GRPCMethodDescriptor(
      name: "ClaimMetadata",
      path: "/stride.claim.Query/ClaimMetadata",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Claim_QueryProvider: CallHandlerProvider {
  var interceptors: Stride_Claim_QueryServerInterceptorFactoryProtocol? { get }

  func distributorAccountBalance(request: Stride_Claim_QueryDistributorAccountBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryDistributorAccountBalanceResponse>

  func params(request: Stride_Claim_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryParamsResponse>

  func claimRecord(request: Stride_Claim_QueryClaimRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryClaimRecordResponse>

  func claimableForAction(request: Stride_Claim_QueryClaimableForActionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryClaimableForActionResponse>

  func totalClaimable(request: Stride_Claim_QueryTotalClaimableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryTotalClaimableResponse>

  func userVestings(request: Stride_Claim_QueryUserVestingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryUserVestingsResponse>

  func claimStatus(request: Stride_Claim_QueryClaimStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryClaimStatusResponse>

  func claimMetadata(request: Stride_Claim_QueryClaimMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Claim_QueryClaimMetadataResponse>
}

extension Stride_Claim_QueryProvider {
  internal var serviceName: Substring {
    return Stride_Claim_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DistributorAccountBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryDistributorAccountBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryDistributorAccountBalanceResponse>(),
        interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? [],
        userFunction: self.distributorAccountBalance(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ClaimRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimRecordResponse>(),
        interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? [],
        userFunction: self.claimRecord(request:context:)
      )

    case "ClaimableForAction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimableForActionRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimableForActionResponse>(),
        interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? [],
        userFunction: self.claimableForAction(request:context:)
      )

    case "TotalClaimable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryTotalClaimableRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryTotalClaimableResponse>(),
        interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? [],
        userFunction: self.totalClaimable(request:context:)
      )

    case "UserVestings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryUserVestingsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryUserVestingsResponse>(),
        interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? [],
        userFunction: self.userVestings(request:context:)
      )

    case "ClaimStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimStatusRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimStatusResponse>(),
        interceptors: self.interceptors?.makeClaimStatusInterceptors() ?? [],
        userFunction: self.claimStatus(request:context:)
      )

    case "ClaimMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimMetadataResponse>(),
        interceptors: self.interceptors?.makeClaimMetadataInterceptors() ?? [],
        userFunction: self.claimMetadata(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stride_Claim_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stride_Claim_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func distributorAccountBalance(
    request: Stride_Claim_QueryDistributorAccountBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryDistributorAccountBalanceResponse

  @Sendable func params(
    request: Stride_Claim_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryParamsResponse

  @Sendable func claimRecord(
    request: Stride_Claim_QueryClaimRecordRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryClaimRecordResponse

  @Sendable func claimableForAction(
    request: Stride_Claim_QueryClaimableForActionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryClaimableForActionResponse

  @Sendable func totalClaimable(
    request: Stride_Claim_QueryTotalClaimableRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryTotalClaimableResponse

  @Sendable func userVestings(
    request: Stride_Claim_QueryUserVestingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryUserVestingsResponse

  @Sendable func claimStatus(
    request: Stride_Claim_QueryClaimStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryClaimStatusResponse

  @Sendable func claimMetadata(
    request: Stride_Claim_QueryClaimMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Claim_QueryClaimMetadataResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stride_Claim_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stride_Claim_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Stride_Claim_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Stride_Claim_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DistributorAccountBalance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryDistributorAccountBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryDistributorAccountBalanceResponse>(),
        interceptors: self.interceptors?.makeDistributorAccountBalanceInterceptors() ?? [],
        wrapping: self.distributorAccountBalance(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ClaimRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimRecordResponse>(),
        interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? [],
        wrapping: self.claimRecord(request:context:)
      )

    case "ClaimableForAction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimableForActionRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimableForActionResponse>(),
        interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? [],
        wrapping: self.claimableForAction(request:context:)
      )

    case "TotalClaimable":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryTotalClaimableRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryTotalClaimableResponse>(),
        interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? [],
        wrapping: self.totalClaimable(request:context:)
      )

    case "UserVestings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryUserVestingsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryUserVestingsResponse>(),
        interceptors: self.interceptors?.makeUserVestingsInterceptors() ?? [],
        wrapping: self.userVestings(request:context:)
      )

    case "ClaimStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimStatusRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimStatusResponse>(),
        interceptors: self.interceptors?.makeClaimStatusInterceptors() ?? [],
        wrapping: self.claimStatus(request:context:)
      )

    case "ClaimMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Claim_QueryClaimMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Claim_QueryClaimMetadataResponse>(),
        interceptors: self.interceptors?.makeClaimMetadataInterceptors() ?? [],
        wrapping: self.claimMetadata(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Claim_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'distributorAccountBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDistributorAccountBalanceInterceptors() -> [ServerInterceptor<Stride_Claim_QueryDistributorAccountBalanceRequest, Stride_Claim_QueryDistributorAccountBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Stride_Claim_QueryParamsRequest, Stride_Claim_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'claimRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimRecordInterceptors() -> [ServerInterceptor<Stride_Claim_QueryClaimRecordRequest, Stride_Claim_QueryClaimRecordResponse>]

  /// - Returns: Interceptors to use when handling 'claimableForAction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimableForActionInterceptors() -> [ServerInterceptor<Stride_Claim_QueryClaimableForActionRequest, Stride_Claim_QueryClaimableForActionResponse>]

  /// - Returns: Interceptors to use when handling 'totalClaimable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalClaimableInterceptors() -> [ServerInterceptor<Stride_Claim_QueryTotalClaimableRequest, Stride_Claim_QueryTotalClaimableResponse>]

  /// - Returns: Interceptors to use when handling 'userVestings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserVestingsInterceptors() -> [ServerInterceptor<Stride_Claim_QueryUserVestingsRequest, Stride_Claim_QueryUserVestingsResponse>]

  /// - Returns: Interceptors to use when handling 'claimStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimStatusInterceptors() -> [ServerInterceptor<Stride_Claim_QueryClaimStatusRequest, Stride_Claim_QueryClaimStatusResponse>]

  /// - Returns: Interceptors to use when handling 'claimMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimMetadataInterceptors() -> [ServerInterceptor<Stride_Claim_QueryClaimMetadataRequest, Stride_Claim_QueryClaimMetadataResponse>]
}

internal enum Stride_Claim_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "stride.claim.Query",
    methods: [
      Stride_Claim_QueryServerMetadata.Methods.distributorAccountBalance,
      Stride_Claim_QueryServerMetadata.Methods.params,
      Stride_Claim_QueryServerMetadata.Methods.claimRecord,
      Stride_Claim_QueryServerMetadata.Methods.claimableForAction,
      Stride_Claim_QueryServerMetadata.Methods.totalClaimable,
      Stride_Claim_QueryServerMetadata.Methods.userVestings,
      Stride_Claim_QueryServerMetadata.Methods.claimStatus,
      Stride_Claim_QueryServerMetadata.Methods.claimMetadata,
    ]
  )

  internal enum Methods {
    internal static let distributorAccountBalance = GRPCMethodDescriptor(
      name: "DistributorAccountBalance",
      path: "/stride.claim.Query/DistributorAccountBalance",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/stride.claim.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let claimRecord = GRPCMethodDescriptor(
      name: "ClaimRecord",
      path: "/stride.claim.Query/ClaimRecord",
      type: GRPCCallType.unary
    )

    internal static let claimableForAction = GRPCMethodDescriptor(
      name: "ClaimableForAction",
      path: "/stride.claim.Query/ClaimableForAction",
      type: GRPCCallType.unary
    )

    internal static let totalClaimable = GRPCMethodDescriptor(
      name: "TotalClaimable",
      path: "/stride.claim.Query/TotalClaimable",
      type: GRPCCallType.unary
    )

    internal static let userVestings = GRPCMethodDescriptor(
      name: "UserVestings",
      path: "/stride.claim.Query/UserVestings",
      type: GRPCCallType.unary
    )

    internal static let claimStatus = GRPCMethodDescriptor(
      name: "ClaimStatus",
      path: "/stride.claim.Query/ClaimStatus",
      type: GRPCCallType.unary
    )

    internal static let claimMetadata = GRPCMethodDescriptor(
      name: "ClaimMetadata",
      path: "/stride.claim.Query/ClaimMetadata",
      type: GRPCCallType.unary
    )
  }
}
