//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: persistence/oracle/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Persistence_Oracle_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Persistence_Oracle_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func allExchangeRates(
    _ request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>

  func exchangeRate(
    _ request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryExchangeRateRequest, Persistence_Oracle_V1beta1_QueryExchangeRateResponse>

  func activeExchangeRates(
    _ request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>

  func feederDelegation(
    _ request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>

  func missCounter(
    _ request: Persistence_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryMissCounterRequest, Persistence_Oracle_V1beta1_QueryMissCounterResponse>

  func aggregatePrevote(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>

  func aggregatePrevotes(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>

  func aggregateVote(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>

  func aggregateVotes(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>

  func params(
    _ request: Persistence_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryParamsRequest, Persistence_Oracle_V1beta1_QueryParamsResponse>

  func queryRewardPoolBalance(
    _ request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>
}

extension Persistence_Oracle_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "persistence.oracle.v1beta1.Query"
  }

  /// ExchangeRates returns exchange rates of all denoms.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllExchangeRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allExchangeRates(
    _ request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.allExchangeRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? []
    )
  }

  /// ExchangeRate returns exchange rates of a specified denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeRate(
    _ request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryExchangeRateRequest, Persistence_Oracle_V1beta1_QueryExchangeRateResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.exchangeRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }

  /// ActiveExchangeRates returns all active denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveExchangeRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activeExchangeRates(
    _ request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.activeExchangeRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveExchangeRatesInterceptors() ?? []
    )
  }

  /// FeederDelegation returns feeder delegation of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to FeederDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feederDelegation(
    _ request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, Persistence_Oracle_V1beta1_QueryFeederDelegationResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.feederDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? []
    )
  }

  /// MissCounter returns oracle miss counter of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to MissCounter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func missCounter(
    _ request: Persistence_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryMissCounterRequest, Persistence_Oracle_V1beta1_QueryMissCounterResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.missCounter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMissCounterInterceptors() ?? []
    )
  }

  /// AggregatePrevote returns an aggregate prevote of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregatePrevote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregatePrevote(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? []
    )
  }

  /// AggregatePrevotes returns aggregate prevotes of all validators
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregatePrevotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregatePrevotes(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? []
    )
  }

  /// AggregateVote returns an aggregate vote of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateVote(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, Persistence_Oracle_V1beta1_QueryAggregateVoteResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? []
    )
  }

  /// AggregateVotes returns aggregate votes of all validators
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateVotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateVotes(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, Persistence_Oracle_V1beta1_QueryAggregateVotesResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? []
    )
  }

  /// Params queries all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Persistence_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryParamsRequest, Persistence_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// QueryRewardPoolBalance queries funds left in the reward pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryRewardPoolBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryRewardPoolBalance(
    _ request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse> {
    return self.makeUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.queryRewardPoolBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardPoolBalanceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Persistence_Oracle_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Persistence_Oracle_V1beta1_QueryNIOClient")
internal final class Persistence_Oracle_V1beta1_QueryClient: Persistence_Oracle_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the persistence.oracle.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Persistence_Oracle_V1beta1_QueryNIOClient: Persistence_Oracle_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the persistence.oracle.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Persistence_Oracle_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeAllExchangeRatesCall(
    _ request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>

  func makeExchangeRateCall(
    _ request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryExchangeRateRequest, Persistence_Oracle_V1beta1_QueryExchangeRateResponse>

  func makeActiveExchangeRatesCall(
    _ request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>

  func makeFeederDelegationCall(
    _ request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>

  func makeMissCounterCall(
    _ request: Persistence_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryMissCounterRequest, Persistence_Oracle_V1beta1_QueryMissCounterResponse>

  func makeAggregatePrevoteCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>

  func makeAggregatePrevotesCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>

  func makeAggregateVoteCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>

  func makeAggregateVotesCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>

  func makeParamsCall(
    _ request: Persistence_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryParamsRequest, Persistence_Oracle_V1beta1_QueryParamsResponse>

  func makeQueryRewardPoolBalanceCall(
    _ request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Persistence_Oracle_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Persistence_Oracle_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAllExchangeRatesCall(
    _ request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.allExchangeRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? []
    )
  }

  internal func makeExchangeRateCall(
    _ request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryExchangeRateRequest, Persistence_Oracle_V1beta1_QueryExchangeRateResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.exchangeRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }

  internal func makeActiveExchangeRatesCall(
    _ request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.activeExchangeRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveExchangeRatesInterceptors() ?? []
    )
  }

  internal func makeFeederDelegationCall(
    _ request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, Persistence_Oracle_V1beta1_QueryFeederDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.feederDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? []
    )
  }

  internal func makeMissCounterCall(
    _ request: Persistence_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryMissCounterRequest, Persistence_Oracle_V1beta1_QueryMissCounterResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.missCounter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMissCounterInterceptors() ?? []
    )
  }

  internal func makeAggregatePrevoteCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? []
    )
  }

  internal func makeAggregatePrevotesCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? []
    )
  }

  internal func makeAggregateVoteCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, Persistence_Oracle_V1beta1_QueryAggregateVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? []
    )
  }

  internal func makeAggregateVotesCall(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, Persistence_Oracle_V1beta1_QueryAggregateVotesResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Persistence_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryParamsRequest, Persistence_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeQueryRewardPoolBalanceCall(
    _ request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.queryRewardPoolBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardPoolBalanceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Persistence_Oracle_V1beta1_QueryAsyncClientProtocol {
  internal func allExchangeRates(
    _ request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.allExchangeRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? []
    )
  }

  internal func exchangeRate(
    _ request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryExchangeRateResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.exchangeRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }

  internal func activeExchangeRates(
    _ request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.activeExchangeRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveExchangeRatesInterceptors() ?? []
    )
  }

  internal func feederDelegation(
    _ request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryFeederDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.feederDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? []
    )
  }

  internal func missCounter(
    _ request: Persistence_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryMissCounterResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.missCounter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMissCounterInterceptors() ?? []
    )
  }

  internal func aggregatePrevote(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? []
    )
  }

  internal func aggregatePrevotes(
    _ request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? []
    )
  }

  internal func aggregateVote(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregateVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? []
    )
  }

  internal func aggregateVotes(
    _ request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregateVotesResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Persistence_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func queryRewardPoolBalance(
    _ request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.queryRewardPoolBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardPoolBalanceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Persistence_Oracle_V1beta1_QueryAsyncClient: Persistence_Oracle_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Persistence_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'allExchangeRates'.
  func makeAllExchangeRatesInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeRate'.
  func makeExchangeRateInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryExchangeRateRequest, Persistence_Oracle_V1beta1_QueryExchangeRateResponse>]

  /// - Returns: Interceptors to use when invoking 'activeExchangeRates'.
  func makeActiveExchangeRatesInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'feederDelegation'.
  func makeFeederDelegationInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'missCounter'.
  func makeMissCounterInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryMissCounterRequest, Persistence_Oracle_V1beta1_QueryMissCounterResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregatePrevote'.
  func makeAggregatePrevoteInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregatePrevotes'.
  func makeAggregatePrevotesInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateVote'.
  func makeAggregateVoteInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateVotes'.
  func makeAggregateVotesInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryParamsRequest, Persistence_Oracle_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryRewardPoolBalance'.
  func makeQueryRewardPoolBalanceInterceptors() -> [ClientInterceptor<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>]
}

internal enum Persistence_Oracle_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "persistence.oracle.v1beta1.Query",
    methods: [
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.allExchangeRates,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.exchangeRate,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.activeExchangeRates,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.feederDelegation,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.missCounter,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevote,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregatePrevotes,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVote,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.aggregateVotes,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.params,
      Persistence_Oracle_V1beta1_QueryClientMetadata.Methods.queryRewardPoolBalance,
    ]
  )

  internal enum Methods {
    internal static let allExchangeRates = GRPCMethodDescriptor(
      name: "AllExchangeRates",
      path: "/persistence.oracle.v1beta1.Query/AllExchangeRates",
      type: GRPCCallType.unary
    )

    internal static let exchangeRate = GRPCMethodDescriptor(
      name: "ExchangeRate",
      path: "/persistence.oracle.v1beta1.Query/ExchangeRate",
      type: GRPCCallType.unary
    )

    internal static let activeExchangeRates = GRPCMethodDescriptor(
      name: "ActiveExchangeRates",
      path: "/persistence.oracle.v1beta1.Query/ActiveExchangeRates",
      type: GRPCCallType.unary
    )

    internal static let feederDelegation = GRPCMethodDescriptor(
      name: "FeederDelegation",
      path: "/persistence.oracle.v1beta1.Query/FeederDelegation",
      type: GRPCCallType.unary
    )

    internal static let missCounter = GRPCMethodDescriptor(
      name: "MissCounter",
      path: "/persistence.oracle.v1beta1.Query/MissCounter",
      type: GRPCCallType.unary
    )

    internal static let aggregatePrevote = GRPCMethodDescriptor(
      name: "AggregatePrevote",
      path: "/persistence.oracle.v1beta1.Query/AggregatePrevote",
      type: GRPCCallType.unary
    )

    internal static let aggregatePrevotes = GRPCMethodDescriptor(
      name: "AggregatePrevotes",
      path: "/persistence.oracle.v1beta1.Query/AggregatePrevotes",
      type: GRPCCallType.unary
    )

    internal static let aggregateVote = GRPCMethodDescriptor(
      name: "AggregateVote",
      path: "/persistence.oracle.v1beta1.Query/AggregateVote",
      type: GRPCCallType.unary
    )

    internal static let aggregateVotes = GRPCMethodDescriptor(
      name: "AggregateVotes",
      path: "/persistence.oracle.v1beta1.Query/AggregateVotes",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/persistence.oracle.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryRewardPoolBalance = GRPCMethodDescriptor(
      name: "QueryRewardPoolBalance",
      path: "/persistence.oracle.v1beta1.Query/QueryRewardPoolBalance",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Persistence_Oracle_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Persistence_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// ExchangeRates returns exchange rates of all denoms.
  func allExchangeRates(request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>

  /// ExchangeRate returns exchange rates of a specified denom.
  func exchangeRate(request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryExchangeRateResponse>

  /// ActiveExchangeRates returns all active denoms
  func activeExchangeRates(request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>

  /// FeederDelegation returns feeder delegation of a validator
  func feederDelegation(request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>

  /// MissCounter returns oracle miss counter of a validator
  func missCounter(request: Persistence_Oracle_V1beta1_QueryMissCounterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryMissCounterResponse>

  /// AggregatePrevote returns an aggregate prevote of a validator
  func aggregatePrevote(request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>

  /// AggregatePrevotes returns aggregate prevotes of all validators
  func aggregatePrevotes(request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>

  /// AggregateVote returns an aggregate vote of a validator
  func aggregateVote(request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>

  /// AggregateVotes returns aggregate votes of all validators
  func aggregateVotes(request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>

  /// Params queries all parameters.
  func params(request: Persistence_Oracle_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryParamsResponse>

  /// QueryRewardPoolBalance queries funds left in the reward pool.
  func queryRewardPoolBalance(request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>
}

extension Persistence_Oracle_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Persistence_Oracle_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AllExchangeRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>(),
        interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? [],
        userFunction: self.allExchangeRates(request:context:)
      )

    case "ExchangeRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryExchangeRateRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryExchangeRateResponse>(),
        interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? [],
        userFunction: self.exchangeRate(request:context:)
      )

    case "ActiveExchangeRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>(),
        interceptors: self.interceptors?.makeActiveExchangeRatesInterceptors() ?? [],
        userFunction: self.activeExchangeRates(request:context:)
      )

    case "FeederDelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>(),
        interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? [],
        userFunction: self.feederDelegation(request:context:)
      )

    case "MissCounter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryMissCounterRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryMissCounterResponse>(),
        interceptors: self.interceptors?.makeMissCounterInterceptors() ?? [],
        userFunction: self.missCounter(request:context:)
      )

    case "AggregatePrevote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>(),
        interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? [],
        userFunction: self.aggregatePrevote(request:context:)
      )

    case "AggregatePrevotes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>(),
        interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? [],
        userFunction: self.aggregatePrevotes(request:context:)
      )

    case "AggregateVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>(),
        interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? [],
        userFunction: self.aggregateVote(request:context:)
      )

    case "AggregateVotes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>(),
        interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? [],
        userFunction: self.aggregateVotes(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "QueryRewardPoolBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>(),
        interceptors: self.interceptors?.makeQueryRewardPoolBalanceInterceptors() ?? [],
        userFunction: self.queryRewardPoolBalance(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Persistence_Oracle_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Persistence_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// ExchangeRates returns exchange rates of all denoms.
  @Sendable func allExchangeRates(
    request: Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse

  /// ExchangeRate returns exchange rates of a specified denom.
  @Sendable func exchangeRate(
    request: Persistence_Oracle_V1beta1_QueryExchangeRateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryExchangeRateResponse

  /// ActiveExchangeRates returns all active denoms
  @Sendable func activeExchangeRates(
    request: Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse

  /// FeederDelegation returns feeder delegation of a validator
  @Sendable func feederDelegation(
    request: Persistence_Oracle_V1beta1_QueryFeederDelegationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryFeederDelegationResponse

  /// MissCounter returns oracle miss counter of a validator
  @Sendable func missCounter(
    request: Persistence_Oracle_V1beta1_QueryMissCounterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryMissCounterResponse

  /// AggregatePrevote returns an aggregate prevote of a validator
  @Sendable func aggregatePrevote(
    request: Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse

  /// AggregatePrevotes returns aggregate prevotes of all validators
  @Sendable func aggregatePrevotes(
    request: Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse

  /// AggregateVote returns an aggregate vote of a validator
  @Sendable func aggregateVote(
    request: Persistence_Oracle_V1beta1_QueryAggregateVoteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregateVoteResponse

  /// AggregateVotes returns aggregate votes of all validators
  @Sendable func aggregateVotes(
    request: Persistence_Oracle_V1beta1_QueryAggregateVotesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryAggregateVotesResponse

  /// Params queries all parameters.
  @Sendable func params(
    request: Persistence_Oracle_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryParamsResponse

  /// QueryRewardPoolBalance queries funds left in the reward pool.
  @Sendable func queryRewardPoolBalance(
    request: Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Persistence_Oracle_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Persistence_Oracle_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Persistence_Oracle_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Persistence_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AllExchangeRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>(),
        interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? [],
        wrapping: self.allExchangeRates(request:context:)
      )

    case "ExchangeRate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryExchangeRateRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryExchangeRateResponse>(),
        interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? [],
        wrapping: self.exchangeRate(request:context:)
      )

    case "ActiveExchangeRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>(),
        interceptors: self.interceptors?.makeActiveExchangeRatesInterceptors() ?? [],
        wrapping: self.activeExchangeRates(request:context:)
      )

    case "FeederDelegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>(),
        interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? [],
        wrapping: self.feederDelegation(request:context:)
      )

    case "MissCounter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryMissCounterRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryMissCounterResponse>(),
        interceptors: self.interceptors?.makeMissCounterInterceptors() ?? [],
        wrapping: self.missCounter(request:context:)
      )

    case "AggregatePrevote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>(),
        interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? [],
        wrapping: self.aggregatePrevote(request:context:)
      )

    case "AggregatePrevotes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>(),
        interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? [],
        wrapping: self.aggregatePrevotes(request:context:)
      )

    case "AggregateVote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>(),
        interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? [],
        wrapping: self.aggregateVote(request:context:)
      )

    case "AggregateVotes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>(),
        interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? [],
        wrapping: self.aggregateVotes(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "QueryRewardPoolBalance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>(),
        interceptors: self.interceptors?.makeQueryRewardPoolBalanceInterceptors() ?? [],
        wrapping: self.queryRewardPoolBalance(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Persistence_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'allExchangeRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllExchangeRatesInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryAllExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryAllExchangeRatesResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeRateInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryExchangeRateRequest, Persistence_Oracle_V1beta1_QueryExchangeRateResponse>]

  /// - Returns: Interceptors to use when handling 'activeExchangeRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActiveExchangeRatesInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryActiveExchangeRatesRequest, Persistence_Oracle_V1beta1_QueryActiveExchangeRatesResponse>]

  /// - Returns: Interceptors to use when handling 'feederDelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeederDelegationInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryFeederDelegationRequest, Persistence_Oracle_V1beta1_QueryFeederDelegationResponse>]

  /// - Returns: Interceptors to use when handling 'missCounter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMissCounterInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryMissCounterRequest, Persistence_Oracle_V1beta1_QueryMissCounterResponse>]

  /// - Returns: Interceptors to use when handling 'aggregatePrevote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregatePrevoteInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryAggregatePrevoteRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevoteResponse>]

  /// - Returns: Interceptors to use when handling 'aggregatePrevotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregatePrevotesInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryAggregatePrevotesRequest, Persistence_Oracle_V1beta1_QueryAggregatePrevotesResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateVoteInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryAggregateVoteRequest, Persistence_Oracle_V1beta1_QueryAggregateVoteResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateVotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateVotesInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryAggregateVotesRequest, Persistence_Oracle_V1beta1_QueryAggregateVotesResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryParamsRequest, Persistence_Oracle_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryRewardPoolBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryRewardPoolBalanceInterceptors() -> [ServerInterceptor<Persistence_Oracle_V1beta1_QueryRewardPoolBalanceRequest, Persistence_Oracle_V1beta1_QueryRewardPoolBalanceResponse>]
}

internal enum Persistence_Oracle_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "persistence.oracle.v1beta1.Query",
    methods: [
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.allExchangeRates,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.exchangeRate,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.activeExchangeRates,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.feederDelegation,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.missCounter,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.aggregatePrevote,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.aggregatePrevotes,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.aggregateVote,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.aggregateVotes,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.params,
      Persistence_Oracle_V1beta1_QueryServerMetadata.Methods.queryRewardPoolBalance,
    ]
  )

  internal enum Methods {
    internal static let allExchangeRates = GRPCMethodDescriptor(
      name: "AllExchangeRates",
      path: "/persistence.oracle.v1beta1.Query/AllExchangeRates",
      type: GRPCCallType.unary
    )

    internal static let exchangeRate = GRPCMethodDescriptor(
      name: "ExchangeRate",
      path: "/persistence.oracle.v1beta1.Query/ExchangeRate",
      type: GRPCCallType.unary
    )

    internal static let activeExchangeRates = GRPCMethodDescriptor(
      name: "ActiveExchangeRates",
      path: "/persistence.oracle.v1beta1.Query/ActiveExchangeRates",
      type: GRPCCallType.unary
    )

    internal static let feederDelegation = GRPCMethodDescriptor(
      name: "FeederDelegation",
      path: "/persistence.oracle.v1beta1.Query/FeederDelegation",
      type: GRPCCallType.unary
    )

    internal static let missCounter = GRPCMethodDescriptor(
      name: "MissCounter",
      path: "/persistence.oracle.v1beta1.Query/MissCounter",
      type: GRPCCallType.unary
    )

    internal static let aggregatePrevote = GRPCMethodDescriptor(
      name: "AggregatePrevote",
      path: "/persistence.oracle.v1beta1.Query/AggregatePrevote",
      type: GRPCCallType.unary
    )

    internal static let aggregatePrevotes = GRPCMethodDescriptor(
      name: "AggregatePrevotes",
      path: "/persistence.oracle.v1beta1.Query/AggregatePrevotes",
      type: GRPCCallType.unary
    )

    internal static let aggregateVote = GRPCMethodDescriptor(
      name: "AggregateVote",
      path: "/persistence.oracle.v1beta1.Query/AggregateVote",
      type: GRPCCallType.unary
    )

    internal static let aggregateVotes = GRPCMethodDescriptor(
      name: "AggregateVotes",
      path: "/persistence.oracle.v1beta1.Query/AggregateVotes",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/persistence.oracle.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryRewardPoolBalance = GRPCMethodDescriptor(
      name: "QueryRewardPoolBalance",
      path: "/persistence.oracle.v1beta1.Query/QueryRewardPoolBalance",
      type: GRPCCallType.unary
    )
  }
}
