// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/bundles/v1beta1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventUpdateParams is an event emitted when the module parameters are updated.
/// emitted_by: MsgUpdateParams
struct Kyve_Bundles_V1beta1_EventUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// old_params is the module's old parameters.
  var oldParams: Kyve_Bundles_V1beta1_Params {
    get {return _oldParams ?? Kyve_Bundles_V1beta1_Params()}
    set {_oldParams = newValue}
  }
  /// Returns true if `oldParams` has been explicitly set.
  var hasOldParams: Bool {return self._oldParams != nil}
  /// Clears the value of `oldParams`. Subsequent reads from it will return its default value.
  mutating func clearOldParams() {self._oldParams = nil}

  /// new_params is the module's new parameters.
  var newParams: Kyve_Bundles_V1beta1_Params {
    get {return _newParams ?? Kyve_Bundles_V1beta1_Params()}
    set {_newParams = newValue}
  }
  /// Returns true if `newParams` has been explicitly set.
  var hasNewParams: Bool {return self._newParams != nil}
  /// Clears the value of `newParams`. Subsequent reads from it will return its default value.
  mutating func clearNewParams() {self._newParams = nil}

  /// payload is the parameter updates that were performed.
  var payload: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _oldParams: Kyve_Bundles_V1beta1_Params? = nil
  fileprivate var _newParams: Kyve_Bundles_V1beta1_Params? = nil
}

/// EventBundleVote is an event emitted when a protocol node votes on a bundle.
/// emitted_by: MsgVoteBundleProposal
struct Kyve_Bundles_V1beta1_EventBundleVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// staker is the account staker of the protocol node.
  var staker: String = String()

  /// storage_id is the unique ID of the bundle.
  var storageID: String = String()

  /// vote is for what the validator voted with
  var vote: Kyve_Bundles_V1beta1_VoteType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventBundleProposed is submitted by the MsgSubmitBundleProposal message
/// emitted_by: MsgSubmitBundleProposal
struct Kyve_Bundles_V1beta1_EventBundleProposed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// internal id for the KYVE-bundle
  var id: UInt64 = 0

  /// storage_id is the ID to retrieve to data item from the configured storage provider
  /// e.g. the ARWEAVE-id
  var storageID: String = String()

  /// Address of the uploader/proposer of the bundle
  var uploader: String = String()

  /// data_size size in bytes of the data
  var dataSize: UInt64 = 0

  /// from_index starting index of the bundle (inclusive)
  var fromIndex: UInt64 = 0

  /// bundle_size amount of data items in the bundle
  var bundleSize: UInt64 = 0

  /// from_key the key of the first data item in the bundle
  var fromKey: String = String()

  /// to_key the key of the last data item in the bundle
  var toKey: String = String()

  /// bundle_summary is a short string holding some useful information of
  /// the bundle which will get stored on-chain
  var bundleSummary: String = String()

  /// data_hash is a sha256 hash of the raw compressed data
  var dataHash: String = String()

  /// proposed_at the unix time when the bundle was proposed
  var proposedAt: UInt64 = 0

  /// storage_provider_id the unique id of the storage provider where
  /// the data of the bundle is tored
  var storageProviderID: UInt32 = 0

  /// compression_id  the unique id of the compression type the data
  /// of the bundle was compressed with
  var compressionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventBundleFinalized is an event emitted when a bundle is finalised.
/// emitted_by: MsgSubmitBundleProposal, EndBlock
struct Kyve_Bundles_V1beta1_EventBundleFinalized {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// internal id for the KYVE-bundle
  var id: UInt64 = 0

  /// total voting power which voted for valid
  var valid: UInt64 = 0

  /// total voting power which voted for invalid
  var invalid: UInt64 = 0

  /// total voting power which voted for abstain
  var abstain: UInt64 = 0

  /// total voting power of the pool
  var total: UInt64 = 0

  /// status of the finalized bundle
  var status: Kyve_Bundles_V1beta1_BundleStatus = .unspecified

  /// rewards transferred to treasury (in ukyve)
  var rewardTreasury: UInt64 = 0

  /// rewardUploader rewards directly transferred to uploader (in ukyve)
  var rewardUploader: UInt64 = 0

  /// rewardDelegation rewards distributed among all delegators (in ukyve)
  var rewardDelegation: UInt64 = 0

  /// rewardTotal the total bundle reward
  var rewardTotal: UInt64 = 0

  /// finalized_at the block height where the bundle got finalized
  var finalizedAt: UInt64 = 0

  /// uploader the address of the uploader of this bundle
  var uploader: String = String()

  /// next_uploader the address of the next uploader after this bundle
  var nextUploader: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventClaimedUploaderRole is an event emitted when an uploader claims the uploader role
/// emitted_by: MsgClaimUploaderRole
struct Kyve_Bundles_V1beta1_EventClaimedUploaderRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// id internal id for the KYVE-bundle
  var id: UInt64 = 0

  /// new_uploader the address of the participant who claimed
  /// the free uploader role
  var newUploader: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventSkippedUploaderRole is an event emitted when an uploader skips the upload
/// emitted_by: MsgSkipUploaderRole
struct Kyve_Bundles_V1beta1_EventSkippedUploaderRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// id internal id for the KYVE-bundle
  var id: UInt64 = 0

  /// previous_uploader is the address of the staker who skipped his uploader role
  var previousUploader: String = String()

  /// new_uploader is the address of the new uploader who got automatically selected
  var newUploader: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventPointIncreased is an event emitted when a staker receives a point
/// emitted_by: MsgSubmitBundleProposal, EndBlock
struct Kyve_Bundles_V1beta1_EventPointIncreased {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// staker is the address of the staker who received the point
  var staker: String = String()

  /// current_points is the amount of points the staker has now
  var currentPoints: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventPointIncreased is an event emitted when a staker receives a point
/// emitted_by: MsgSubmitBundleProposal, EndBlock
struct Kyve_Bundles_V1beta1_EventPointsReset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// staker is the address of the staker who has zero points now
  var staker: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Bundles_V1beta1_EventUpdateParams: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventBundleVote: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventBundleProposed: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventBundleFinalized: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventClaimedUploaderRole: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventSkippedUploaderRole: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventPointIncreased: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_EventPointsReset: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.bundles.v1beta1"

extension Kyve_Bundles_V1beta1_EventUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "old_params"),
    2: .standard(proto: "new_params"),
    3: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._oldParams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._newParams) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._oldParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._newParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventUpdateParams, rhs: Kyve_Bundles_V1beta1_EventUpdateParams) -> Bool {
    if lhs._oldParams != rhs._oldParams {return false}
    if lhs._newParams != rhs._newParams {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventBundleVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBundleVote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
    3: .standard(proto: "storage_id"),
    4: .same(proto: "vote"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.storageID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.vote) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if !self.storageID.isEmpty {
      try visitor.visitSingularStringField(value: self.storageID, fieldNumber: 3)
    }
    if self.vote != .unspecified {
      try visitor.visitSingularEnumField(value: self.vote, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventBundleVote, rhs: Kyve_Bundles_V1beta1_EventBundleVote) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.storageID != rhs.storageID {return false}
    if lhs.vote != rhs.vote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventBundleProposed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBundleProposed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "id"),
    3: .standard(proto: "storage_id"),
    4: .same(proto: "uploader"),
    5: .standard(proto: "data_size"),
    6: .standard(proto: "from_index"),
    7: .standard(proto: "bundle_size"),
    8: .standard(proto: "from_key"),
    9: .standard(proto: "to_key"),
    10: .standard(proto: "bundle_summary"),
    11: .standard(proto: "data_hash"),
    12: .standard(proto: "proposed_at"),
    13: .standard(proto: "storage_provider_id"),
    14: .standard(proto: "compression_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.storageID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.uploader) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.dataSize) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.fromIndex) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.bundleSize) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.fromKey) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.toKey) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.bundleSummary) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.proposedAt) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self.storageProviderID) }()
      case 14: try { try decoder.decodeSingularUInt32Field(value: &self.compressionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if !self.storageID.isEmpty {
      try visitor.visitSingularStringField(value: self.storageID, fieldNumber: 3)
    }
    if !self.uploader.isEmpty {
      try visitor.visitSingularStringField(value: self.uploader, fieldNumber: 4)
    }
    if self.dataSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.dataSize, fieldNumber: 5)
    }
    if self.fromIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.fromIndex, fieldNumber: 6)
    }
    if self.bundleSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.bundleSize, fieldNumber: 7)
    }
    if !self.fromKey.isEmpty {
      try visitor.visitSingularStringField(value: self.fromKey, fieldNumber: 8)
    }
    if !self.toKey.isEmpty {
      try visitor.visitSingularStringField(value: self.toKey, fieldNumber: 9)
    }
    if !self.bundleSummary.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleSummary, fieldNumber: 10)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 11)
    }
    if self.proposedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposedAt, fieldNumber: 12)
    }
    if self.storageProviderID != 0 {
      try visitor.visitSingularUInt32Field(value: self.storageProviderID, fieldNumber: 13)
    }
    if self.compressionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.compressionID, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventBundleProposed, rhs: Kyve_Bundles_V1beta1_EventBundleProposed) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.storageID != rhs.storageID {return false}
    if lhs.uploader != rhs.uploader {return false}
    if lhs.dataSize != rhs.dataSize {return false}
    if lhs.fromIndex != rhs.fromIndex {return false}
    if lhs.bundleSize != rhs.bundleSize {return false}
    if lhs.fromKey != rhs.fromKey {return false}
    if lhs.toKey != rhs.toKey {return false}
    if lhs.bundleSummary != rhs.bundleSummary {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.proposedAt != rhs.proposedAt {return false}
    if lhs.storageProviderID != rhs.storageProviderID {return false}
    if lhs.compressionID != rhs.compressionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventBundleFinalized: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBundleFinalized"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "id"),
    3: .same(proto: "valid"),
    4: .same(proto: "invalid"),
    5: .same(proto: "abstain"),
    6: .same(proto: "total"),
    7: .same(proto: "status"),
    8: .standard(proto: "reward_treasury"),
    9: .standard(proto: "reward_uploader"),
    10: .standard(proto: "reward_delegation"),
    11: .standard(proto: "reward_total"),
    12: .standard(proto: "finalized_at"),
    13: .same(proto: "uploader"),
    14: .standard(proto: "next_uploader"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.valid) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.invalid) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.abstain) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.total) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.rewardTreasury) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.rewardUploader) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.rewardDelegation) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.rewardTotal) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.finalizedAt) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.uploader) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.nextUploader) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if self.valid != 0 {
      try visitor.visitSingularUInt64Field(value: self.valid, fieldNumber: 3)
    }
    if self.invalid != 0 {
      try visitor.visitSingularUInt64Field(value: self.invalid, fieldNumber: 4)
    }
    if self.abstain != 0 {
      try visitor.visitSingularUInt64Field(value: self.abstain, fieldNumber: 5)
    }
    if self.total != 0 {
      try visitor.visitSingularUInt64Field(value: self.total, fieldNumber: 6)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 7)
    }
    if self.rewardTreasury != 0 {
      try visitor.visitSingularUInt64Field(value: self.rewardTreasury, fieldNumber: 8)
    }
    if self.rewardUploader != 0 {
      try visitor.visitSingularUInt64Field(value: self.rewardUploader, fieldNumber: 9)
    }
    if self.rewardDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.rewardDelegation, fieldNumber: 10)
    }
    if self.rewardTotal != 0 {
      try visitor.visitSingularUInt64Field(value: self.rewardTotal, fieldNumber: 11)
    }
    if self.finalizedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.finalizedAt, fieldNumber: 12)
    }
    if !self.uploader.isEmpty {
      try visitor.visitSingularStringField(value: self.uploader, fieldNumber: 13)
    }
    if !self.nextUploader.isEmpty {
      try visitor.visitSingularStringField(value: self.nextUploader, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventBundleFinalized, rhs: Kyve_Bundles_V1beta1_EventBundleFinalized) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.valid != rhs.valid {return false}
    if lhs.invalid != rhs.invalid {return false}
    if lhs.abstain != rhs.abstain {return false}
    if lhs.total != rhs.total {return false}
    if lhs.status != rhs.status {return false}
    if lhs.rewardTreasury != rhs.rewardTreasury {return false}
    if lhs.rewardUploader != rhs.rewardUploader {return false}
    if lhs.rewardDelegation != rhs.rewardDelegation {return false}
    if lhs.rewardTotal != rhs.rewardTotal {return false}
    if lhs.finalizedAt != rhs.finalizedAt {return false}
    if lhs.uploader != rhs.uploader {return false}
    if lhs.nextUploader != rhs.nextUploader {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventClaimedUploaderRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventClaimedUploaderRole"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "id"),
    3: .standard(proto: "new_uploader"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newUploader) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if !self.newUploader.isEmpty {
      try visitor.visitSingularStringField(value: self.newUploader, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventClaimedUploaderRole, rhs: Kyve_Bundles_V1beta1_EventClaimedUploaderRole) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.newUploader != rhs.newUploader {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventSkippedUploaderRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventSkippedUploaderRole"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "id"),
    3: .standard(proto: "previous_uploader"),
    4: .standard(proto: "new_uploader"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.previousUploader) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.newUploader) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if !self.previousUploader.isEmpty {
      try visitor.visitSingularStringField(value: self.previousUploader, fieldNumber: 3)
    }
    if !self.newUploader.isEmpty {
      try visitor.visitSingularStringField(value: self.newUploader, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventSkippedUploaderRole, rhs: Kyve_Bundles_V1beta1_EventSkippedUploaderRole) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.previousUploader != rhs.previousUploader {return false}
    if lhs.newUploader != rhs.newUploader {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventPointIncreased: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPointIncreased"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
    3: .standard(proto: "current_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.currentPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.currentPoints != 0 {
      try visitor.visitSingularUInt64Field(value: self.currentPoints, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventPointIncreased, rhs: Kyve_Bundles_V1beta1_EventPointIncreased) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.currentPoints != rhs.currentPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_EventPointsReset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPointsReset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_EventPointsReset, rhs: Kyve_Bundles_V1beta1_EventPointsReset) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
