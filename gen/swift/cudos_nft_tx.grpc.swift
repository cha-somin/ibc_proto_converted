//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cudos/nft/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the NFT Msg service.
///
/// Usage: instantiate `Cudosnode_Cudosnode_Nft_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Cudosnode_Cudosnode_Nft_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? { get }

  func issueDenom(
    _ request: Cudosnode_Cudosnode_Nft_MsgIssueDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgIssueDenom, Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>

  func mintNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgMintNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgMintNFT, Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>

  func editNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgEditNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgEditNFT, Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>

  func transferNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferNft,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferNft, Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>

  func approveNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveNft,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveNft, Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>

  func approveAllNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveAllNft, Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>

  func revokeNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgRevokeNft,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgRevokeNft, Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>

  func burnNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgBurnNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgBurnNFT, Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>

  func transferDenom(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferDenom, Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>
}

extension Cudosnode_Cudosnode_Nft_MsgClientProtocol {
  internal var serviceName: String {
    return "cudosnode.cudosnode.nft.Msg"
  }

  /// IssueDenom defines a method for issue a denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issueDenom(
    _ request: Cudosnode_Cudosnode_Nft_MsgIssueDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgIssueDenom, Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.issueDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueDenomInterceptors() ?? []
    )
  }

  /// MintNFT defines a method for mint a new nft
  ///
  /// - Parameters:
  ///   - request: Request to send to MintNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgMintNFT, Cudosnode_Cudosnode_Nft_MsgMintNFTResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.mintNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintNFTInterceptors() ?? []
    )
  }

  /// EditNFT defines a method for editing a nft.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgEditNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgEditNFT, Cudosnode_Cudosnode_Nft_MsgEditNFTResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.editNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditNFTInterceptors() ?? []
    )
  }

  /// TransferNft transfers ownership of the token to recipient account.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferNft.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferNft,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferNft, Cudosnode_Cudosnode_Nft_MsgTransferNftResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferNftInterceptors() ?? []
    )
  }

  /// Approve grants permission to spender to transfer or send the given token.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApproveNft.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func approveNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveNft,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveNft, Cudosnode_Cudosnode_Nft_MsgApproveNftResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveNftInterceptors() ?? []
    )
  }

  /// Approve grants permission to spender to transfer or send the given token.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApproveAllNft.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func approveAllNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveAllNft, Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveAllNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveAllNftInterceptors() ?? []
    )
  }

  /// Revokes permission to spender to transfer or send the given token.
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeNft.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgRevokeNft,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgRevokeNft, Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.revokeNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeNftInterceptors() ?? []
    )
  }

  /// BurnNFT defines a method for burning a nft.
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgBurnNFT, Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.burnNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? []
    )
  }

  /// TransferDenom defines a method for transferring a denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferDenom(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferDenom, Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cudosnode_Cudosnode_Nft_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cudosnode_Cudosnode_Nft_MsgNIOClient")
internal final class Cudosnode_Cudosnode_Nft_MsgClient: Cudosnode_Cudosnode_Nft_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cudosnode.cudosnode.nft.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cudosnode_Cudosnode_Nft_MsgNIOClient: Cudosnode_Cudosnode_Nft_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cudosnode.cudosnode.nft.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the NFT Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cudosnode_Cudosnode_Nft_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? { get }

  func makeIssueDenomCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgIssueDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgIssueDenom, Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>

  func makeMintNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgMintNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgMintNFT, Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>

  func makeEditNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgEditNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgEditNFT, Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>

  func makeTransferNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferNft,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferNft, Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>

  func makeApproveNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveNft,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveNft, Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>

  func makeApproveAllNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveAllNft, Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>

  func makeRevokeNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgRevokeNft,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgRevokeNft, Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>

  func makeBurnNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgBurnNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgBurnNFT, Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>

  func makeTransferDenomCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferDenom, Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudosnode_Cudosnode_Nft_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cudosnode_Cudosnode_Nft_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeIssueDenomCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgIssueDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgIssueDenom, Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.issueDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueDenomInterceptors() ?? []
    )
  }

  internal func makeMintNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgMintNFT, Cudosnode_Cudosnode_Nft_MsgMintNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.mintNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintNFTInterceptors() ?? []
    )
  }

  internal func makeEditNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgEditNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgEditNFT, Cudosnode_Cudosnode_Nft_MsgEditNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.editNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditNFTInterceptors() ?? []
    )
  }

  internal func makeTransferNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferNft,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferNft, Cudosnode_Cudosnode_Nft_MsgTransferNftResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferNftInterceptors() ?? []
    )
  }

  internal func makeApproveNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveNft,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveNft, Cudosnode_Cudosnode_Nft_MsgApproveNftResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveNftInterceptors() ?? []
    )
  }

  internal func makeApproveAllNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgApproveAllNft, Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveAllNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveAllNftInterceptors() ?? []
    )
  }

  internal func makeRevokeNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgRevokeNft,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgRevokeNft, Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.revokeNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeNftInterceptors() ?? []
    )
  }

  internal func makeBurnNftCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgBurnNFT, Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.burnNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? []
    )
  }

  internal func makeTransferDenomCall(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_MsgTransferDenom, Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudosnode_Cudosnode_Nft_MsgAsyncClientProtocol {
  internal func issueDenom(
    _ request: Cudosnode_Cudosnode_Nft_MsgIssueDenom,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.issueDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueDenomInterceptors() ?? []
    )
  }

  internal func mintNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgMintNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.mintNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintNFTInterceptors() ?? []
    )
  }

  internal func editNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgEditNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgEditNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.editNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditNFTInterceptors() ?? []
    )
  }

  internal func transferNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferNft,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgTransferNftResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferNftInterceptors() ?? []
    )
  }

  internal func approveNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveNft,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgApproveNftResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveNftInterceptors() ?? []
    )
  }

  internal func approveAllNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveAllNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveAllNftInterceptors() ?? []
    )
  }

  internal func revokeNft(
    _ request: Cudosnode_Cudosnode_Nft_MsgRevokeNft,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.revokeNft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeNftInterceptors() ?? []
    )
  }

  internal func burnNFT(
    _ request: Cudosnode_Cudosnode_Nft_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.burnNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? []
    )
  }

  internal func transferDenom(
    _ request: Cudosnode_Cudosnode_Nft_MsgTransferDenom,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cudosnode_Cudosnode_Nft_MsgAsyncClient: Cudosnode_Cudosnode_Nft_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cudosnode_Cudosnode_Nft_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'issueDenom'.
  func makeIssueDenomInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgIssueDenom, Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'mintNFT'.
  func makeMintNFTInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgMintNFT, Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'editNFT'.
  func makeEditNFTInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgEditNFT, Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'transferNft'.
  func makeTransferNftInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgTransferNft, Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>]

  /// - Returns: Interceptors to use when invoking 'approveNft'.
  func makeApproveNftInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgApproveNft, Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>]

  /// - Returns: Interceptors to use when invoking 'approveAllNft'.
  func makeApproveAllNftInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgApproveAllNft, Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeNft'.
  func makeRevokeNftInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgRevokeNft, Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>]

  /// - Returns: Interceptors to use when invoking 'burnNFT'.
  func makeBurnNFTInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgBurnNFT, Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'transferDenom'.
  func makeTransferDenomInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_MsgTransferDenom, Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>]
}

internal enum Cudosnode_Cudosnode_Nft_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cudosnode.cudosnode.nft.Msg",
    methods: [
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.issueDenom,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.mintNFT,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.editNFT,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferNft,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveNft,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.approveAllNft,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.revokeNft,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.burnNFT,
      Cudosnode_Cudosnode_Nft_MsgClientMetadata.Methods.transferDenom,
    ]
  )

  internal enum Methods {
    internal static let issueDenom = GRPCMethodDescriptor(
      name: "IssueDenom",
      path: "/cudosnode.cudosnode.nft.Msg/IssueDenom",
      type: GRPCCallType.unary
    )

    internal static let mintNFT = GRPCMethodDescriptor(
      name: "MintNFT",
      path: "/cudosnode.cudosnode.nft.Msg/MintNFT",
      type: GRPCCallType.unary
    )

    internal static let editNFT = GRPCMethodDescriptor(
      name: "EditNFT",
      path: "/cudosnode.cudosnode.nft.Msg/EditNFT",
      type: GRPCCallType.unary
    )

    internal static let transferNft = GRPCMethodDescriptor(
      name: "TransferNft",
      path: "/cudosnode.cudosnode.nft.Msg/TransferNft",
      type: GRPCCallType.unary
    )

    internal static let approveNft = GRPCMethodDescriptor(
      name: "ApproveNft",
      path: "/cudosnode.cudosnode.nft.Msg/ApproveNft",
      type: GRPCCallType.unary
    )

    internal static let approveAllNft = GRPCMethodDescriptor(
      name: "ApproveAllNft",
      path: "/cudosnode.cudosnode.nft.Msg/ApproveAllNft",
      type: GRPCCallType.unary
    )

    internal static let revokeNft = GRPCMethodDescriptor(
      name: "RevokeNft",
      path: "/cudosnode.cudosnode.nft.Msg/RevokeNft",
      type: GRPCCallType.unary
    )

    internal static let burnNFT = GRPCMethodDescriptor(
      name: "BurnNFT",
      path: "/cudosnode.cudosnode.nft.Msg/BurnNFT",
      type: GRPCCallType.unary
    )

    internal static let transferDenom = GRPCMethodDescriptor(
      name: "TransferDenom",
      path: "/cudosnode.cudosnode.nft.Msg/TransferDenom",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the NFT Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cudosnode_Cudosnode_Nft_MsgProvider: CallHandlerProvider {
  var interceptors: Cudosnode_Cudosnode_Nft_MsgServerInterceptorFactoryProtocol? { get }

  /// IssueDenom defines a method for issue a denom.
  func issueDenom(request: Cudosnode_Cudosnode_Nft_MsgIssueDenom, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>

  /// MintNFT defines a method for mint a new nft
  func mintNFT(request: Cudosnode_Cudosnode_Nft_MsgMintNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>

  /// EditNFT defines a method for editing a nft.
  func editNFT(request: Cudosnode_Cudosnode_Nft_MsgEditNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>

  /// TransferNft transfers ownership of the token to recipient account.
  func transferNft(request: Cudosnode_Cudosnode_Nft_MsgTransferNft, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>

  /// Approve grants permission to spender to transfer or send the given token.
  func approveNft(request: Cudosnode_Cudosnode_Nft_MsgApproveNft, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>

  /// Approve grants permission to spender to transfer or send the given token.
  func approveAllNft(request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>

  /// Revokes permission to spender to transfer or send the given token.
  func revokeNft(request: Cudosnode_Cudosnode_Nft_MsgRevokeNft, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>

  /// BurnNFT defines a method for burning a nft.
  func burnNFT(request: Cudosnode_Cudosnode_Nft_MsgBurnNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>

  /// TransferDenom defines a method for transferring a denom.
  func transferDenom(request: Cudosnode_Cudosnode_Nft_MsgTransferDenom, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>
}

extension Cudosnode_Cudosnode_Nft_MsgProvider {
  internal var serviceName: Substring {
    return Cudosnode_Cudosnode_Nft_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IssueDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgIssueDenom>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>(),
        interceptors: self.interceptors?.makeIssueDenomInterceptors() ?? [],
        userFunction: self.issueDenom(request:context:)
      )

    case "MintNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgMintNFT>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>(),
        interceptors: self.interceptors?.makeMintNFTInterceptors() ?? [],
        userFunction: self.mintNFT(request:context:)
      )

    case "EditNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgEditNFT>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>(),
        interceptors: self.interceptors?.makeEditNFTInterceptors() ?? [],
        userFunction: self.editNFT(request:context:)
      )

    case "TransferNft":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgTransferNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>(),
        interceptors: self.interceptors?.makeTransferNftInterceptors() ?? [],
        userFunction: self.transferNft(request:context:)
      )

    case "ApproveNft":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgApproveNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>(),
        interceptors: self.interceptors?.makeApproveNftInterceptors() ?? [],
        userFunction: self.approveNft(request:context:)
      )

    case "ApproveAllNft":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgApproveAllNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>(),
        interceptors: self.interceptors?.makeApproveAllNftInterceptors() ?? [],
        userFunction: self.approveAllNft(request:context:)
      )

    case "RevokeNft":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgRevokeNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>(),
        interceptors: self.interceptors?.makeRevokeNftInterceptors() ?? [],
        userFunction: self.revokeNft(request:context:)
      )

    case "BurnNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgBurnNFT>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>(),
        interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? [],
        userFunction: self.burnNFT(request:context:)
      )

    case "TransferDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgTransferDenom>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>(),
        interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? [],
        userFunction: self.transferDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the NFT Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cudosnode_Cudosnode_Nft_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cudosnode_Cudosnode_Nft_MsgServerInterceptorFactoryProtocol? { get }

  /// IssueDenom defines a method for issue a denom.
  @Sendable func issueDenom(
    request: Cudosnode_Cudosnode_Nft_MsgIssueDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse

  /// MintNFT defines a method for mint a new nft
  @Sendable func mintNFT(
    request: Cudosnode_Cudosnode_Nft_MsgMintNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgMintNFTResponse

  /// EditNFT defines a method for editing a nft.
  @Sendable func editNFT(
    request: Cudosnode_Cudosnode_Nft_MsgEditNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgEditNFTResponse

  /// TransferNft transfers ownership of the token to recipient account.
  @Sendable func transferNft(
    request: Cudosnode_Cudosnode_Nft_MsgTransferNft,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgTransferNftResponse

  /// Approve grants permission to spender to transfer or send the given token.
  @Sendable func approveNft(
    request: Cudosnode_Cudosnode_Nft_MsgApproveNft,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgApproveNftResponse

  /// Approve grants permission to spender to transfer or send the given token.
  @Sendable func approveAllNft(
    request: Cudosnode_Cudosnode_Nft_MsgApproveAllNft,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse

  /// Revokes permission to spender to transfer or send the given token.
  @Sendable func revokeNft(
    request: Cudosnode_Cudosnode_Nft_MsgRevokeNft,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse

  /// BurnNFT defines a method for burning a nft.
  @Sendable func burnNFT(
    request: Cudosnode_Cudosnode_Nft_MsgBurnNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse

  /// TransferDenom defines a method for transferring a denom.
  @Sendable func transferDenom(
    request: Cudosnode_Cudosnode_Nft_MsgTransferDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudosnode_Cudosnode_Nft_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cudosnode_Cudosnode_Nft_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cudosnode_Cudosnode_Nft_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cudosnode_Cudosnode_Nft_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IssueDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgIssueDenom>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>(),
        interceptors: self.interceptors?.makeIssueDenomInterceptors() ?? [],
        wrapping: self.issueDenom(request:context:)
      )

    case "MintNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgMintNFT>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>(),
        interceptors: self.interceptors?.makeMintNFTInterceptors() ?? [],
        wrapping: self.mintNFT(request:context:)
      )

    case "EditNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgEditNFT>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>(),
        interceptors: self.interceptors?.makeEditNFTInterceptors() ?? [],
        wrapping: self.editNFT(request:context:)
      )

    case "TransferNft":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgTransferNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>(),
        interceptors: self.interceptors?.makeTransferNftInterceptors() ?? [],
        wrapping: self.transferNft(request:context:)
      )

    case "ApproveNft":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgApproveNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>(),
        interceptors: self.interceptors?.makeApproveNftInterceptors() ?? [],
        wrapping: self.approveNft(request:context:)
      )

    case "ApproveAllNft":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgApproveAllNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>(),
        interceptors: self.interceptors?.makeApproveAllNftInterceptors() ?? [],
        wrapping: self.approveAllNft(request:context:)
      )

    case "RevokeNft":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgRevokeNft>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>(),
        interceptors: self.interceptors?.makeRevokeNftInterceptors() ?? [],
        wrapping: self.revokeNft(request:context:)
      )

    case "BurnNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgBurnNFT>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>(),
        interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? [],
        wrapping: self.burnNFT(request:context:)
      )

    case "TransferDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_MsgTransferDenom>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>(),
        interceptors: self.interceptors?.makeTransferDenomInterceptors() ?? [],
        wrapping: self.transferDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cudosnode_Cudosnode_Nft_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'issueDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueDenomInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgIssueDenom, Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse>]

  /// - Returns: Interceptors to use when handling 'mintNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintNFTInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgMintNFT, Cudosnode_Cudosnode_Nft_MsgMintNFTResponse>]

  /// - Returns: Interceptors to use when handling 'editNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditNFTInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgEditNFT, Cudosnode_Cudosnode_Nft_MsgEditNFTResponse>]

  /// - Returns: Interceptors to use when handling 'transferNft'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferNftInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgTransferNft, Cudosnode_Cudosnode_Nft_MsgTransferNftResponse>]

  /// - Returns: Interceptors to use when handling 'approveNft'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeApproveNftInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgApproveNft, Cudosnode_Cudosnode_Nft_MsgApproveNftResponse>]

  /// - Returns: Interceptors to use when handling 'approveAllNft'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeApproveAllNftInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgApproveAllNft, Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse>]

  /// - Returns: Interceptors to use when handling 'revokeNft'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeNftInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgRevokeNft, Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse>]

  /// - Returns: Interceptors to use when handling 'burnNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnNFTInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgBurnNFT, Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse>]

  /// - Returns: Interceptors to use when handling 'transferDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferDenomInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_MsgTransferDenom, Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse>]
}

internal enum Cudosnode_Cudosnode_Nft_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cudosnode.cudosnode.nft.Msg",
    methods: [
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.issueDenom,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.mintNFT,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.editNFT,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.transferNft,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.approveNft,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.approveAllNft,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.revokeNft,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.burnNFT,
      Cudosnode_Cudosnode_Nft_MsgServerMetadata.Methods.transferDenom,
    ]
  )

  internal enum Methods {
    internal static let issueDenom = GRPCMethodDescriptor(
      name: "IssueDenom",
      path: "/cudosnode.cudosnode.nft.Msg/IssueDenom",
      type: GRPCCallType.unary
    )

    internal static let mintNFT = GRPCMethodDescriptor(
      name: "MintNFT",
      path: "/cudosnode.cudosnode.nft.Msg/MintNFT",
      type: GRPCCallType.unary
    )

    internal static let editNFT = GRPCMethodDescriptor(
      name: "EditNFT",
      path: "/cudosnode.cudosnode.nft.Msg/EditNFT",
      type: GRPCCallType.unary
    )

    internal static let transferNft = GRPCMethodDescriptor(
      name: "TransferNft",
      path: "/cudosnode.cudosnode.nft.Msg/TransferNft",
      type: GRPCCallType.unary
    )

    internal static let approveNft = GRPCMethodDescriptor(
      name: "ApproveNft",
      path: "/cudosnode.cudosnode.nft.Msg/ApproveNft",
      type: GRPCCallType.unary
    )

    internal static let approveAllNft = GRPCMethodDescriptor(
      name: "ApproveAllNft",
      path: "/cudosnode.cudosnode.nft.Msg/ApproveAllNft",
      type: GRPCCallType.unary
    )

    internal static let revokeNft = GRPCMethodDescriptor(
      name: "RevokeNft",
      path: "/cudosnode.cudosnode.nft.Msg/RevokeNft",
      type: GRPCCallType.unary
    )

    internal static let burnNFT = GRPCMethodDescriptor(
      name: "BurnNFT",
      path: "/cudosnode.cudosnode.nft.Msg/BurnNFT",
      type: GRPCCallType.unary
    )

    internal static let transferDenom = GRPCMethodDescriptor(
      name: "TransferDenom",
      path: "/cudosnode.cudosnode.nft.Msg/TransferDenom",
      type: GRPCCallType.unary
    )
  }
}
