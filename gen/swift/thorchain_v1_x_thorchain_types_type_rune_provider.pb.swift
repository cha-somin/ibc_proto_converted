// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_rune_provider.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_RUNEProvider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var runeAddress: Data = Data()

  var depositAmount: String = String()

  var withdrawAmount: String = String()

  var units: String = String()

  var lastDepositHeight: Int64 = 0

  var lastWithdrawHeight: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_RUNEProvider: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_RUNEProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RUNEProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rune_address"),
    2: .standard(proto: "deposit_amount"),
    3: .standard(proto: "withdraw_amount"),
    4: .same(proto: "units"),
    5: .standard(proto: "last_deposit_height"),
    6: .standard(proto: "last_withdraw_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.runeAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.depositAmount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.withdrawAmount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.units) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastDepositHeight) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastWithdrawHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.runeAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.runeAddress, fieldNumber: 1)
    }
    if !self.depositAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.depositAmount, fieldNumber: 2)
    }
    if !self.withdrawAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawAmount, fieldNumber: 3)
    }
    if !self.units.isEmpty {
      try visitor.visitSingularStringField(value: self.units, fieldNumber: 4)
    }
    if self.lastDepositHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.lastDepositHeight, fieldNumber: 5)
    }
    if self.lastWithdrawHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.lastWithdrawHeight, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_RUNEProvider, rhs: Types_RUNEProvider) -> Bool {
    if lhs.runeAddress != rhs.runeAddress {return false}
    if lhs.depositAmount != rhs.depositAmount {return false}
    if lhs.withdrawAmount != rhs.withdrawAmount {return false}
    if lhs.units != rhs.units {return false}
    if lhs.lastDepositHeight != rhs.lastDepositHeight {return false}
    if lhs.lastWithdrawHeight != rhs.lastWithdrawHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
