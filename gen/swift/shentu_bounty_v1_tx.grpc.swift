//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/bounty/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the staking Msg service.
///
/// Usage: instantiate `Shentu_Bounty_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Bounty_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createProgram(
    _ request: Shentu_Bounty_V1_MsgCreateProgram,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgCreateProgram, Shentu_Bounty_V1_MsgCreateProgramResponse>

  func editProgram(
    _ request: Shentu_Bounty_V1_MsgEditProgram,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgEditProgram, Shentu_Bounty_V1_MsgEditProgramResponse>

  func activateProgram(
    _ request: Shentu_Bounty_V1_MsgActivateProgram,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgActivateProgram, Shentu_Bounty_V1_MsgActivateProgramResponse>

  func closeProgram(
    _ request: Shentu_Bounty_V1_MsgCloseProgram,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgCloseProgram, Shentu_Bounty_V1_MsgCloseProgramResponse>

  func submitFinding(
    _ request: Shentu_Bounty_V1_MsgSubmitFinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgSubmitFinding, Shentu_Bounty_V1_MsgSubmitFindingResponse>

  func editFinding(
    _ request: Shentu_Bounty_V1_MsgEditFinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgEditFinding, Shentu_Bounty_V1_MsgEditFindingResponse>

  func activateFinding(
    _ request: Shentu_Bounty_V1_MsgActivateFinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgActivateFinding, Shentu_Bounty_V1_MsgActivateFindingResponse>

  func confirmFinding(
    _ request: Shentu_Bounty_V1_MsgConfirmFinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgConfirmFinding, Shentu_Bounty_V1_MsgConfirmFindingResponse>

  func confirmFindingPaid(
    _ request: Shentu_Bounty_V1_MsgConfirmFindingPaid,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgConfirmFindingPaid, Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>

  func closeFinding(
    _ request: Shentu_Bounty_V1_MsgCloseFinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgCloseFinding, Shentu_Bounty_V1_MsgCloseFindingResponse>

  func publishFinding(
    _ request: Shentu_Bounty_V1_MsgPublishFinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Bounty_V1_MsgPublishFinding, Shentu_Bounty_V1_MsgPublishFindingResponse>
}

extension Shentu_Bounty_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "shentu.bounty.v1.Msg"
  }

  /// CreateProgram defines a method for creating a new program.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createProgram(
    _ request: Shentu_Bounty_V1_MsgCreateProgram,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgCreateProgram, Shentu_Bounty_V1_MsgCreateProgramResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.createProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProgramInterceptors() ?? []
    )
  }

  /// EditProgram defines a method for modifying a program.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editProgram(
    _ request: Shentu_Bounty_V1_MsgEditProgram,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgEditProgram, Shentu_Bounty_V1_MsgEditProgramResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.editProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditProgramInterceptors() ?? []
    )
  }

  /// Activate a program status by program_id
  ///
  /// - Parameters:
  ///   - request: Request to send to ActivateProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activateProgram(
    _ request: Shentu_Bounty_V1_MsgActivateProgram,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgActivateProgram, Shentu_Bounty_V1_MsgActivateProgramResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.activateProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateProgramInterceptors() ?? []
    )
  }

  /// Closed a program status by program_id
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeProgram(
    _ request: Shentu_Bounty_V1_MsgCloseProgram,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgCloseProgram, Shentu_Bounty_V1_MsgCloseProgramResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.closeProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseProgramInterceptors() ?? []
    )
  }

  /// SubmitFinding defines a method for submitting a new finding.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitFinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitFinding(
    _ request: Shentu_Bounty_V1_MsgSubmitFinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgSubmitFinding, Shentu_Bounty_V1_MsgSubmitFindingResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.submitFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitFindingInterceptors() ?? []
    )
  }

  /// EditFinding defines a method for editing a new finding.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditFinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editFinding(
    _ request: Shentu_Bounty_V1_MsgEditFinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgEditFinding, Shentu_Bounty_V1_MsgEditFindingResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.editFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFindingInterceptors() ?? []
    )
  }

  /// ActivateFinding defines a method for activate a new finding.
  ///
  /// - Parameters:
  ///   - request: Request to send to ActivateFinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activateFinding(
    _ request: Shentu_Bounty_V1_MsgActivateFinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgActivateFinding, Shentu_Bounty_V1_MsgActivateFindingResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.activateFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateFindingInterceptors() ?? []
    )
  }

  /// ConfirmFinding defines a method for host confirm a finding.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmFinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmFinding(
    _ request: Shentu_Bounty_V1_MsgConfirmFinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgConfirmFinding, Shentu_Bounty_V1_MsgConfirmFindingResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmFindingInterceptors() ?? []
    )
  }

  /// ConfirmFindingPaid defines a method for submitter confirm a finding paid
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmFindingPaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmFindingPaid(
    _ request: Shentu_Bounty_V1_MsgConfirmFindingPaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgConfirmFindingPaid, Shentu_Bounty_V1_MsgConfirmFindingPaidResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFindingPaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmFindingPaidInterceptors() ?? []
    )
  }

  /// CloseFinding defines a method for submitter or certifier close a finding
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseFinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeFinding(
    _ request: Shentu_Bounty_V1_MsgCloseFinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgCloseFinding, Shentu_Bounty_V1_MsgCloseFindingResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.closeFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseFindingInterceptors() ?? []
    )
  }

  /// PublishFinding defines a method for publish a finding.
  ///
  /// - Parameters:
  ///   - request: Request to send to PublishFinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func publishFinding(
    _ request: Shentu_Bounty_V1_MsgPublishFinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Bounty_V1_MsgPublishFinding, Shentu_Bounty_V1_MsgPublishFindingResponse> {
    return self.makeUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.publishFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishFindingInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Shentu_Bounty_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Shentu_Bounty_V1_MsgNIOClient")
internal final class Shentu_Bounty_V1_MsgClient: Shentu_Bounty_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the shentu.bounty.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Shentu_Bounty_V1_MsgNIOClient: Shentu_Bounty_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.bounty.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the staking Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Bounty_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateProgramCall(
    _ request: Shentu_Bounty_V1_MsgCreateProgram,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgCreateProgram, Shentu_Bounty_V1_MsgCreateProgramResponse>

  func makeEditProgramCall(
    _ request: Shentu_Bounty_V1_MsgEditProgram,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgEditProgram, Shentu_Bounty_V1_MsgEditProgramResponse>

  func makeActivateProgramCall(
    _ request: Shentu_Bounty_V1_MsgActivateProgram,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgActivateProgram, Shentu_Bounty_V1_MsgActivateProgramResponse>

  func makeCloseProgramCall(
    _ request: Shentu_Bounty_V1_MsgCloseProgram,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgCloseProgram, Shentu_Bounty_V1_MsgCloseProgramResponse>

  func makeSubmitFindingCall(
    _ request: Shentu_Bounty_V1_MsgSubmitFinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgSubmitFinding, Shentu_Bounty_V1_MsgSubmitFindingResponse>

  func makeEditFindingCall(
    _ request: Shentu_Bounty_V1_MsgEditFinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgEditFinding, Shentu_Bounty_V1_MsgEditFindingResponse>

  func makeActivateFindingCall(
    _ request: Shentu_Bounty_V1_MsgActivateFinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgActivateFinding, Shentu_Bounty_V1_MsgActivateFindingResponse>

  func makeConfirmFindingCall(
    _ request: Shentu_Bounty_V1_MsgConfirmFinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgConfirmFinding, Shentu_Bounty_V1_MsgConfirmFindingResponse>

  func makeConfirmFindingPaidCall(
    _ request: Shentu_Bounty_V1_MsgConfirmFindingPaid,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgConfirmFindingPaid, Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>

  func makeCloseFindingCall(
    _ request: Shentu_Bounty_V1_MsgCloseFinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgCloseFinding, Shentu_Bounty_V1_MsgCloseFindingResponse>

  func makePublishFindingCall(
    _ request: Shentu_Bounty_V1_MsgPublishFinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgPublishFinding, Shentu_Bounty_V1_MsgPublishFindingResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Bounty_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Bounty_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateProgramCall(
    _ request: Shentu_Bounty_V1_MsgCreateProgram,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgCreateProgram, Shentu_Bounty_V1_MsgCreateProgramResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.createProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProgramInterceptors() ?? []
    )
  }

  internal func makeEditProgramCall(
    _ request: Shentu_Bounty_V1_MsgEditProgram,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgEditProgram, Shentu_Bounty_V1_MsgEditProgramResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.editProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditProgramInterceptors() ?? []
    )
  }

  internal func makeActivateProgramCall(
    _ request: Shentu_Bounty_V1_MsgActivateProgram,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgActivateProgram, Shentu_Bounty_V1_MsgActivateProgramResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.activateProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateProgramInterceptors() ?? []
    )
  }

  internal func makeCloseProgramCall(
    _ request: Shentu_Bounty_V1_MsgCloseProgram,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgCloseProgram, Shentu_Bounty_V1_MsgCloseProgramResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.closeProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseProgramInterceptors() ?? []
    )
  }

  internal func makeSubmitFindingCall(
    _ request: Shentu_Bounty_V1_MsgSubmitFinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgSubmitFinding, Shentu_Bounty_V1_MsgSubmitFindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.submitFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitFindingInterceptors() ?? []
    )
  }

  internal func makeEditFindingCall(
    _ request: Shentu_Bounty_V1_MsgEditFinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgEditFinding, Shentu_Bounty_V1_MsgEditFindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.editFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFindingInterceptors() ?? []
    )
  }

  internal func makeActivateFindingCall(
    _ request: Shentu_Bounty_V1_MsgActivateFinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgActivateFinding, Shentu_Bounty_V1_MsgActivateFindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.activateFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateFindingInterceptors() ?? []
    )
  }

  internal func makeConfirmFindingCall(
    _ request: Shentu_Bounty_V1_MsgConfirmFinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgConfirmFinding, Shentu_Bounty_V1_MsgConfirmFindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmFindingInterceptors() ?? []
    )
  }

  internal func makeConfirmFindingPaidCall(
    _ request: Shentu_Bounty_V1_MsgConfirmFindingPaid,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgConfirmFindingPaid, Shentu_Bounty_V1_MsgConfirmFindingPaidResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFindingPaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmFindingPaidInterceptors() ?? []
    )
  }

  internal func makeCloseFindingCall(
    _ request: Shentu_Bounty_V1_MsgCloseFinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgCloseFinding, Shentu_Bounty_V1_MsgCloseFindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.closeFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseFindingInterceptors() ?? []
    )
  }

  internal func makePublishFindingCall(
    _ request: Shentu_Bounty_V1_MsgPublishFinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Bounty_V1_MsgPublishFinding, Shentu_Bounty_V1_MsgPublishFindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.publishFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishFindingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Bounty_V1_MsgAsyncClientProtocol {
  internal func createProgram(
    _ request: Shentu_Bounty_V1_MsgCreateProgram,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgCreateProgramResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.createProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProgramInterceptors() ?? []
    )
  }

  internal func editProgram(
    _ request: Shentu_Bounty_V1_MsgEditProgram,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgEditProgramResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.editProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditProgramInterceptors() ?? []
    )
  }

  internal func activateProgram(
    _ request: Shentu_Bounty_V1_MsgActivateProgram,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgActivateProgramResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.activateProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateProgramInterceptors() ?? []
    )
  }

  internal func closeProgram(
    _ request: Shentu_Bounty_V1_MsgCloseProgram,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgCloseProgramResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.closeProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseProgramInterceptors() ?? []
    )
  }

  internal func submitFinding(
    _ request: Shentu_Bounty_V1_MsgSubmitFinding,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgSubmitFindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.submitFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitFindingInterceptors() ?? []
    )
  }

  internal func editFinding(
    _ request: Shentu_Bounty_V1_MsgEditFinding,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgEditFindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.editFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFindingInterceptors() ?? []
    )
  }

  internal func activateFinding(
    _ request: Shentu_Bounty_V1_MsgActivateFinding,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgActivateFindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.activateFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateFindingInterceptors() ?? []
    )
  }

  internal func confirmFinding(
    _ request: Shentu_Bounty_V1_MsgConfirmFinding,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgConfirmFindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmFindingInterceptors() ?? []
    )
  }

  internal func confirmFindingPaid(
    _ request: Shentu_Bounty_V1_MsgConfirmFindingPaid,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgConfirmFindingPaidResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFindingPaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmFindingPaidInterceptors() ?? []
    )
  }

  internal func closeFinding(
    _ request: Shentu_Bounty_V1_MsgCloseFinding,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgCloseFindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.closeFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseFindingInterceptors() ?? []
    )
  }

  internal func publishFinding(
    _ request: Shentu_Bounty_V1_MsgPublishFinding,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Bounty_V1_MsgPublishFindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Bounty_V1_MsgClientMetadata.Methods.publishFinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishFindingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Shentu_Bounty_V1_MsgAsyncClient: Shentu_Bounty_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Shentu_Bounty_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createProgram'.
  func makeCreateProgramInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgCreateProgram, Shentu_Bounty_V1_MsgCreateProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'editProgram'.
  func makeEditProgramInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgEditProgram, Shentu_Bounty_V1_MsgEditProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'activateProgram'.
  func makeActivateProgramInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgActivateProgram, Shentu_Bounty_V1_MsgActivateProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'closeProgram'.
  func makeCloseProgramInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgCloseProgram, Shentu_Bounty_V1_MsgCloseProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'submitFinding'.
  func makeSubmitFindingInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgSubmitFinding, Shentu_Bounty_V1_MsgSubmitFindingResponse>]

  /// - Returns: Interceptors to use when invoking 'editFinding'.
  func makeEditFindingInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgEditFinding, Shentu_Bounty_V1_MsgEditFindingResponse>]

  /// - Returns: Interceptors to use when invoking 'activateFinding'.
  func makeActivateFindingInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgActivateFinding, Shentu_Bounty_V1_MsgActivateFindingResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmFinding'.
  func makeConfirmFindingInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgConfirmFinding, Shentu_Bounty_V1_MsgConfirmFindingResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmFindingPaid'.
  func makeConfirmFindingPaidInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgConfirmFindingPaid, Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>]

  /// - Returns: Interceptors to use when invoking 'closeFinding'.
  func makeCloseFindingInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgCloseFinding, Shentu_Bounty_V1_MsgCloseFindingResponse>]

  /// - Returns: Interceptors to use when invoking 'publishFinding'.
  func makePublishFindingInterceptors() -> [ClientInterceptor<Shentu_Bounty_V1_MsgPublishFinding, Shentu_Bounty_V1_MsgPublishFindingResponse>]
}

internal enum Shentu_Bounty_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "shentu.bounty.v1.Msg",
    methods: [
      Shentu_Bounty_V1_MsgClientMetadata.Methods.createProgram,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.editProgram,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.activateProgram,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.closeProgram,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.submitFinding,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.editFinding,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.activateFinding,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFinding,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.confirmFindingPaid,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.closeFinding,
      Shentu_Bounty_V1_MsgClientMetadata.Methods.publishFinding,
    ]
  )

  internal enum Methods {
    internal static let createProgram = GRPCMethodDescriptor(
      name: "CreateProgram",
      path: "/shentu.bounty.v1.Msg/CreateProgram",
      type: GRPCCallType.unary
    )

    internal static let editProgram = GRPCMethodDescriptor(
      name: "EditProgram",
      path: "/shentu.bounty.v1.Msg/EditProgram",
      type: GRPCCallType.unary
    )

    internal static let activateProgram = GRPCMethodDescriptor(
      name: "ActivateProgram",
      path: "/shentu.bounty.v1.Msg/ActivateProgram",
      type: GRPCCallType.unary
    )

    internal static let closeProgram = GRPCMethodDescriptor(
      name: "CloseProgram",
      path: "/shentu.bounty.v1.Msg/CloseProgram",
      type: GRPCCallType.unary
    )

    internal static let submitFinding = GRPCMethodDescriptor(
      name: "SubmitFinding",
      path: "/shentu.bounty.v1.Msg/SubmitFinding",
      type: GRPCCallType.unary
    )

    internal static let editFinding = GRPCMethodDescriptor(
      name: "EditFinding",
      path: "/shentu.bounty.v1.Msg/EditFinding",
      type: GRPCCallType.unary
    )

    internal static let activateFinding = GRPCMethodDescriptor(
      name: "ActivateFinding",
      path: "/shentu.bounty.v1.Msg/ActivateFinding",
      type: GRPCCallType.unary
    )

    internal static let confirmFinding = GRPCMethodDescriptor(
      name: "ConfirmFinding",
      path: "/shentu.bounty.v1.Msg/ConfirmFinding",
      type: GRPCCallType.unary
    )

    internal static let confirmFindingPaid = GRPCMethodDescriptor(
      name: "ConfirmFindingPaid",
      path: "/shentu.bounty.v1.Msg/ConfirmFindingPaid",
      type: GRPCCallType.unary
    )

    internal static let closeFinding = GRPCMethodDescriptor(
      name: "CloseFinding",
      path: "/shentu.bounty.v1.Msg/CloseFinding",
      type: GRPCCallType.unary
    )

    internal static let publishFinding = GRPCMethodDescriptor(
      name: "PublishFinding",
      path: "/shentu.bounty.v1.Msg/PublishFinding",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the staking Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Bounty_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Shentu_Bounty_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateProgram defines a method for creating a new program.
  func createProgram(request: Shentu_Bounty_V1_MsgCreateProgram, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgCreateProgramResponse>

  /// EditProgram defines a method for modifying a program.
  func editProgram(request: Shentu_Bounty_V1_MsgEditProgram, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgEditProgramResponse>

  /// Activate a program status by program_id
  func activateProgram(request: Shentu_Bounty_V1_MsgActivateProgram, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgActivateProgramResponse>

  /// Closed a program status by program_id
  func closeProgram(request: Shentu_Bounty_V1_MsgCloseProgram, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgCloseProgramResponse>

  /// SubmitFinding defines a method for submitting a new finding.
  func submitFinding(request: Shentu_Bounty_V1_MsgSubmitFinding, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgSubmitFindingResponse>

  /// EditFinding defines a method for editing a new finding.
  func editFinding(request: Shentu_Bounty_V1_MsgEditFinding, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgEditFindingResponse>

  /// ActivateFinding defines a method for activate a new finding.
  func activateFinding(request: Shentu_Bounty_V1_MsgActivateFinding, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgActivateFindingResponse>

  /// ConfirmFinding defines a method for host confirm a finding.
  func confirmFinding(request: Shentu_Bounty_V1_MsgConfirmFinding, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgConfirmFindingResponse>

  /// ConfirmFindingPaid defines a method for submitter confirm a finding paid
  func confirmFindingPaid(request: Shentu_Bounty_V1_MsgConfirmFindingPaid, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>

  /// CloseFinding defines a method for submitter or certifier close a finding
  func closeFinding(request: Shentu_Bounty_V1_MsgCloseFinding, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgCloseFindingResponse>

  /// PublishFinding defines a method for publish a finding.
  func publishFinding(request: Shentu_Bounty_V1_MsgPublishFinding, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Bounty_V1_MsgPublishFindingResponse>
}

extension Shentu_Bounty_V1_MsgProvider {
  internal var serviceName: Substring {
    return Shentu_Bounty_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateProgram":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgCreateProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgCreateProgramResponse>(),
        interceptors: self.interceptors?.makeCreateProgramInterceptors() ?? [],
        userFunction: self.createProgram(request:context:)
      )

    case "EditProgram":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgEditProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgEditProgramResponse>(),
        interceptors: self.interceptors?.makeEditProgramInterceptors() ?? [],
        userFunction: self.editProgram(request:context:)
      )

    case "ActivateProgram":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgActivateProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgActivateProgramResponse>(),
        interceptors: self.interceptors?.makeActivateProgramInterceptors() ?? [],
        userFunction: self.activateProgram(request:context:)
      )

    case "CloseProgram":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgCloseProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgCloseProgramResponse>(),
        interceptors: self.interceptors?.makeCloseProgramInterceptors() ?? [],
        userFunction: self.closeProgram(request:context:)
      )

    case "SubmitFinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgSubmitFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgSubmitFindingResponse>(),
        interceptors: self.interceptors?.makeSubmitFindingInterceptors() ?? [],
        userFunction: self.submitFinding(request:context:)
      )

    case "EditFinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgEditFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgEditFindingResponse>(),
        interceptors: self.interceptors?.makeEditFindingInterceptors() ?? [],
        userFunction: self.editFinding(request:context:)
      )

    case "ActivateFinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgActivateFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgActivateFindingResponse>(),
        interceptors: self.interceptors?.makeActivateFindingInterceptors() ?? [],
        userFunction: self.activateFinding(request:context:)
      )

    case "ConfirmFinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgConfirmFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgConfirmFindingResponse>(),
        interceptors: self.interceptors?.makeConfirmFindingInterceptors() ?? [],
        userFunction: self.confirmFinding(request:context:)
      )

    case "ConfirmFindingPaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgConfirmFindingPaid>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>(),
        interceptors: self.interceptors?.makeConfirmFindingPaidInterceptors() ?? [],
        userFunction: self.confirmFindingPaid(request:context:)
      )

    case "CloseFinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgCloseFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgCloseFindingResponse>(),
        interceptors: self.interceptors?.makeCloseFindingInterceptors() ?? [],
        userFunction: self.closeFinding(request:context:)
      )

    case "PublishFinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgPublishFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgPublishFindingResponse>(),
        interceptors: self.interceptors?.makePublishFindingInterceptors() ?? [],
        userFunction: self.publishFinding(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the staking Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Bounty_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Bounty_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateProgram defines a method for creating a new program.
  @Sendable func createProgram(
    request: Shentu_Bounty_V1_MsgCreateProgram,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgCreateProgramResponse

  /// EditProgram defines a method for modifying a program.
  @Sendable func editProgram(
    request: Shentu_Bounty_V1_MsgEditProgram,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgEditProgramResponse

  /// Activate a program status by program_id
  @Sendable func activateProgram(
    request: Shentu_Bounty_V1_MsgActivateProgram,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgActivateProgramResponse

  /// Closed a program status by program_id
  @Sendable func closeProgram(
    request: Shentu_Bounty_V1_MsgCloseProgram,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgCloseProgramResponse

  /// SubmitFinding defines a method for submitting a new finding.
  @Sendable func submitFinding(
    request: Shentu_Bounty_V1_MsgSubmitFinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgSubmitFindingResponse

  /// EditFinding defines a method for editing a new finding.
  @Sendable func editFinding(
    request: Shentu_Bounty_V1_MsgEditFinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgEditFindingResponse

  /// ActivateFinding defines a method for activate a new finding.
  @Sendable func activateFinding(
    request: Shentu_Bounty_V1_MsgActivateFinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgActivateFindingResponse

  /// ConfirmFinding defines a method for host confirm a finding.
  @Sendable func confirmFinding(
    request: Shentu_Bounty_V1_MsgConfirmFinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgConfirmFindingResponse

  /// ConfirmFindingPaid defines a method for submitter confirm a finding paid
  @Sendable func confirmFindingPaid(
    request: Shentu_Bounty_V1_MsgConfirmFindingPaid,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgConfirmFindingPaidResponse

  /// CloseFinding defines a method for submitter or certifier close a finding
  @Sendable func closeFinding(
    request: Shentu_Bounty_V1_MsgCloseFinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgCloseFindingResponse

  /// PublishFinding defines a method for publish a finding.
  @Sendable func publishFinding(
    request: Shentu_Bounty_V1_MsgPublishFinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Bounty_V1_MsgPublishFindingResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Bounty_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Bounty_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Shentu_Bounty_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Shentu_Bounty_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateProgram":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgCreateProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgCreateProgramResponse>(),
        interceptors: self.interceptors?.makeCreateProgramInterceptors() ?? [],
        wrapping: self.createProgram(request:context:)
      )

    case "EditProgram":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgEditProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgEditProgramResponse>(),
        interceptors: self.interceptors?.makeEditProgramInterceptors() ?? [],
        wrapping: self.editProgram(request:context:)
      )

    case "ActivateProgram":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgActivateProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgActivateProgramResponse>(),
        interceptors: self.interceptors?.makeActivateProgramInterceptors() ?? [],
        wrapping: self.activateProgram(request:context:)
      )

    case "CloseProgram":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgCloseProgram>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgCloseProgramResponse>(),
        interceptors: self.interceptors?.makeCloseProgramInterceptors() ?? [],
        wrapping: self.closeProgram(request:context:)
      )

    case "SubmitFinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgSubmitFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgSubmitFindingResponse>(),
        interceptors: self.interceptors?.makeSubmitFindingInterceptors() ?? [],
        wrapping: self.submitFinding(request:context:)
      )

    case "EditFinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgEditFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgEditFindingResponse>(),
        interceptors: self.interceptors?.makeEditFindingInterceptors() ?? [],
        wrapping: self.editFinding(request:context:)
      )

    case "ActivateFinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgActivateFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgActivateFindingResponse>(),
        interceptors: self.interceptors?.makeActivateFindingInterceptors() ?? [],
        wrapping: self.activateFinding(request:context:)
      )

    case "ConfirmFinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgConfirmFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgConfirmFindingResponse>(),
        interceptors: self.interceptors?.makeConfirmFindingInterceptors() ?? [],
        wrapping: self.confirmFinding(request:context:)
      )

    case "ConfirmFindingPaid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgConfirmFindingPaid>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>(),
        interceptors: self.interceptors?.makeConfirmFindingPaidInterceptors() ?? [],
        wrapping: self.confirmFindingPaid(request:context:)
      )

    case "CloseFinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgCloseFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgCloseFindingResponse>(),
        interceptors: self.interceptors?.makeCloseFindingInterceptors() ?? [],
        wrapping: self.closeFinding(request:context:)
      )

    case "PublishFinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Bounty_V1_MsgPublishFinding>(),
        responseSerializer: ProtobufSerializer<Shentu_Bounty_V1_MsgPublishFindingResponse>(),
        interceptors: self.interceptors?.makePublishFindingInterceptors() ?? [],
        wrapping: self.publishFinding(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Bounty_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createProgram'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateProgramInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgCreateProgram, Shentu_Bounty_V1_MsgCreateProgramResponse>]

  /// - Returns: Interceptors to use when handling 'editProgram'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditProgramInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgEditProgram, Shentu_Bounty_V1_MsgEditProgramResponse>]

  /// - Returns: Interceptors to use when handling 'activateProgram'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateProgramInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgActivateProgram, Shentu_Bounty_V1_MsgActivateProgramResponse>]

  /// - Returns: Interceptors to use when handling 'closeProgram'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseProgramInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgCloseProgram, Shentu_Bounty_V1_MsgCloseProgramResponse>]

  /// - Returns: Interceptors to use when handling 'submitFinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitFindingInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgSubmitFinding, Shentu_Bounty_V1_MsgSubmitFindingResponse>]

  /// - Returns: Interceptors to use when handling 'editFinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditFindingInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgEditFinding, Shentu_Bounty_V1_MsgEditFindingResponse>]

  /// - Returns: Interceptors to use when handling 'activateFinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateFindingInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgActivateFinding, Shentu_Bounty_V1_MsgActivateFindingResponse>]

  /// - Returns: Interceptors to use when handling 'confirmFinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmFindingInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgConfirmFinding, Shentu_Bounty_V1_MsgConfirmFindingResponse>]

  /// - Returns: Interceptors to use when handling 'confirmFindingPaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmFindingPaidInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgConfirmFindingPaid, Shentu_Bounty_V1_MsgConfirmFindingPaidResponse>]

  /// - Returns: Interceptors to use when handling 'closeFinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseFindingInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgCloseFinding, Shentu_Bounty_V1_MsgCloseFindingResponse>]

  /// - Returns: Interceptors to use when handling 'publishFinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishFindingInterceptors() -> [ServerInterceptor<Shentu_Bounty_V1_MsgPublishFinding, Shentu_Bounty_V1_MsgPublishFindingResponse>]
}

internal enum Shentu_Bounty_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "shentu.bounty.v1.Msg",
    methods: [
      Shentu_Bounty_V1_MsgServerMetadata.Methods.createProgram,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.editProgram,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.activateProgram,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.closeProgram,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.submitFinding,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.editFinding,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.activateFinding,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.confirmFinding,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.confirmFindingPaid,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.closeFinding,
      Shentu_Bounty_V1_MsgServerMetadata.Methods.publishFinding,
    ]
  )

  internal enum Methods {
    internal static let createProgram = GRPCMethodDescriptor(
      name: "CreateProgram",
      path: "/shentu.bounty.v1.Msg/CreateProgram",
      type: GRPCCallType.unary
    )

    internal static let editProgram = GRPCMethodDescriptor(
      name: "EditProgram",
      path: "/shentu.bounty.v1.Msg/EditProgram",
      type: GRPCCallType.unary
    )

    internal static let activateProgram = GRPCMethodDescriptor(
      name: "ActivateProgram",
      path: "/shentu.bounty.v1.Msg/ActivateProgram",
      type: GRPCCallType.unary
    )

    internal static let closeProgram = GRPCMethodDescriptor(
      name: "CloseProgram",
      path: "/shentu.bounty.v1.Msg/CloseProgram",
      type: GRPCCallType.unary
    )

    internal static let submitFinding = GRPCMethodDescriptor(
      name: "SubmitFinding",
      path: "/shentu.bounty.v1.Msg/SubmitFinding",
      type: GRPCCallType.unary
    )

    internal static let editFinding = GRPCMethodDescriptor(
      name: "EditFinding",
      path: "/shentu.bounty.v1.Msg/EditFinding",
      type: GRPCCallType.unary
    )

    internal static let activateFinding = GRPCMethodDescriptor(
      name: "ActivateFinding",
      path: "/shentu.bounty.v1.Msg/ActivateFinding",
      type: GRPCCallType.unary
    )

    internal static let confirmFinding = GRPCMethodDescriptor(
      name: "ConfirmFinding",
      path: "/shentu.bounty.v1.Msg/ConfirmFinding",
      type: GRPCCallType.unary
    )

    internal static let confirmFindingPaid = GRPCMethodDescriptor(
      name: "ConfirmFindingPaid",
      path: "/shentu.bounty.v1.Msg/ConfirmFindingPaid",
      type: GRPCCallType.unary
    )

    internal static let closeFinding = GRPCMethodDescriptor(
      name: "CloseFinding",
      path: "/shentu.bounty.v1.Msg/CloseFinding",
      type: GRPCCallType.unary
    )

    internal static let publishFinding = GRPCMethodDescriptor(
      name: "PublishFinding",
      path: "/shentu.bounty.v1.Msg/PublishFinding",
      type: GRPCCallType.unary
    )
  }
}
