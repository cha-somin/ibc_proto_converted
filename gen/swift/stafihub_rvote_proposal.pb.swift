// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stafihub/rvote/proposal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ProposalStatus enumerates the valid statuses of a proposal.
enum Stafihub_Stafihub_Rvote_ProposalStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case initiated // = 0
  case approved // = 1
  case expired // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .initiated
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .initiated
    case 1: self = .approved
    case 2: self = .expired
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .initiated: return 0
    case .approved: return 1
    case .expired: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Stafihub_Stafihub_Rvote_ProposalStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Stafihub_Stafihub_Rvote_ProposalStatus] = [
    .initiated,
    .approved,
    .expired,
  ]
}

#endif  // swift(>=4.2)

struct Stafihub_Stafihub_Rvote_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var content: SwiftProtobuf.Google_Protobuf_Any {
    get {return _content ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var status: Stafihub_Stafihub_Rvote_ProposalStatus = .initiated

  var voted: [String] = []

  var startBlock: Int64 = 0

  var expireBlock: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: SwiftProtobuf.Google_Protobuf_Any? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stafihub_Stafihub_Rvote_ProposalStatus: @unchecked Sendable {}
extension Stafihub_Stafihub_Rvote_Proposal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stafihub.stafihub.rvote"

extension Stafihub_Stafihub_Rvote_ProposalStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROPOSAL_STATUS_INITIATED"),
    1: .same(proto: "PROPOSAL_STATUS_APPROVED"),
    2: .same(proto: "PROPOSAL_STATUS_EXPIRED"),
  ]
}

extension Stafihub_Stafihub_Rvote_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .same(proto: "status"),
    3: .same(proto: "voted"),
    4: .same(proto: "startBlock"),
    5: .same(proto: "expireBlock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.voted) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.startBlock) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.expireBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.status != .initiated {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.voted.isEmpty {
      try visitor.visitRepeatedStringField(value: self.voted, fieldNumber: 3)
    }
    if self.startBlock != 0 {
      try visitor.visitSingularInt64Field(value: self.startBlock, fieldNumber: 4)
    }
    if self.expireBlock != 0 {
      try visitor.visitSingularInt64Field(value: self.expireBlock, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rvote_Proposal, rhs: Stafihub_Stafihub_Rvote_Proposal) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs.status != rhs.status {return false}
    if lhs.voted != rhs.voted {return false}
    if lhs.startBlock != rhs.startBlock {return false}
    if lhs.expireBlock != rhs.expireBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
