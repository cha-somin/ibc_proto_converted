//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/liquidity/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Crescent_Liquidity_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Liquidity_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Crescent_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryParamsRequest, Crescent_Liquidity_V1beta1_QueryParamsResponse>

  func pools(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolsRequest, Crescent_Liquidity_V1beta1_QueryPoolsResponse>

  func pool(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>

  func poolByReserveAddress(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>

  func poolByPoolCoinDenom(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>

  func pairs(
    _ request: Crescent_Liquidity_V1beta1_QueryPairsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPairsRequest, Crescent_Liquidity_V1beta1_QueryPairsResponse>

  func pair(
    _ request: Crescent_Liquidity_V1beta1_QueryPairRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPairRequest, Crescent_Liquidity_V1beta1_QueryPairResponse>

  func depositRequests(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>

  func depositRequest(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>

  func withdrawRequests(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>

  func withdrawRequest(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>

  func orders(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>

  func order(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrderRequest, Crescent_Liquidity_V1beta1_QueryOrderResponse>

  func ordersByOrderer(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>

  func orderBooks(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>

  func numMMOrders(
    _ request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>
}

extension Crescent_Liquidity_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "crescent.liquidity.v1beta1.Query"
  }

  /// Params returns parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Crescent_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryParamsRequest, Crescent_Liquidity_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Pools returns all liquidity pools.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pools(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolsRequest, Crescent_Liquidity_V1beta1_QueryPoolsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  /// Pool returns the specific liquidity pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// PoolByReserveAddress returns all pools that correspond to the reserve account.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolByReserveAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolByReserveAddress(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByReserveAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByReserveAddressInterceptors() ?? []
    )
  }

  /// PoolByPoolCoinDenom returns all pools that correspond to the pool coin denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolByPoolCoinDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolByPoolCoinDenom(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByPoolCoinDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByPoolCoinDenomInterceptors() ?? []
    )
  }

  /// Pairs returns all liquidity pairs.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pairs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pairs(
    _ request: Crescent_Liquidity_V1beta1_QueryPairsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPairsRequest, Crescent_Liquidity_V1beta1_QueryPairsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pairs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePairsInterceptors() ?? []
    )
  }

  /// Pair returns the specific pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pair(
    _ request: Crescent_Liquidity_V1beta1_QueryPairRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryPairRequest, Crescent_Liquidity_V1beta1_QueryPairResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePairInterceptors() ?? []
    )
  }

  /// DepositRequests returns all deposit requests.
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositRequests(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRequestsInterceptors() ?? []
    )
  }

  /// DepositRequest returns the specific deposit request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositRequest(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRequestInterceptors() ?? []
    )
  }

  /// WithdrawRequests returns all withdraw requests.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawRequests(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRequestsInterceptors() ?? []
    )
  }

  /// WithdrawRequest returns the specific withdraw request.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawRequest(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRequestInterceptors() ?? []
    )
  }

  /// Orders returns all orders within the pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to Orders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func orders(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  /// Order returns the specific order.
  ///
  /// - Parameters:
  ///   - request: Request to send to Order.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func order(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrderRequest, Crescent_Liquidity_V1beta1_QueryOrderResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.order.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  /// OrdersByOrderer returns orders made by an orderer.
  ///
  /// - Parameters:
  ///   - request: Request to send to OrdersByOrderer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ordersByOrderer(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.ordersByOrderer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersByOrdererInterceptors() ?? []
    )
  }

  /// Unary call to OrderBooks
  ///
  /// - Parameters:
  ///   - request: Request to send to OrderBooks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func orderBooks(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, Crescent_Liquidity_V1beta1_QueryOrderBooksResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orderBooks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderBooksInterceptors() ?? []
    )
  }

  /// Unary call to NumMMOrders
  ///
  /// - Parameters:
  ///   - request: Request to send to NumMMOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func numMMOrders(
    _ request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.numMMOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumMMOrdersInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Crescent_Liquidity_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Crescent_Liquidity_V1beta1_QueryNIOClient")
internal final class Crescent_Liquidity_V1beta1_QueryClient: Crescent_Liquidity_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the crescent.liquidity.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Crescent_Liquidity_V1beta1_QueryNIOClient: Crescent_Liquidity_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.liquidity.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Liquidity_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryParamsRequest, Crescent_Liquidity_V1beta1_QueryParamsResponse>

  func makePoolsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolsRequest, Crescent_Liquidity_V1beta1_QueryPoolsResponse>

  func makePoolCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>

  func makePoolByReserveAddressCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>

  func makePoolByPoolCoinDenomCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>

  func makePairsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPairsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPairsRequest, Crescent_Liquidity_V1beta1_QueryPairsResponse>

  func makePairCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPairRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPairRequest, Crescent_Liquidity_V1beta1_QueryPairResponse>

  func makeDepositRequestsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>

  func makeDepositRequestCall(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>

  func makeWithdrawRequestsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>

  func makeWithdrawRequestCall(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>

  func makeOrdersCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>

  func makeOrderCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrderRequest, Crescent_Liquidity_V1beta1_QueryOrderResponse>

  func makeOrdersByOrdererCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>

  func makeOrderBooksCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>

  func makeNumMmordersCall(
    _ request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Liquidity_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Liquidity_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryParamsRequest, Crescent_Liquidity_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makePoolsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolsRequest, Crescent_Liquidity_V1beta1_QueryPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  internal func makePoolCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func makePoolByReserveAddressCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByReserveAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByReserveAddressInterceptors() ?? []
    )
  }

  internal func makePoolByPoolCoinDenomCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByPoolCoinDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByPoolCoinDenomInterceptors() ?? []
    )
  }

  internal func makePairsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPairsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPairsRequest, Crescent_Liquidity_V1beta1_QueryPairsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pairs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePairsInterceptors() ?? []
    )
  }

  internal func makePairCall(
    _ request: Crescent_Liquidity_V1beta1_QueryPairRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryPairRequest, Crescent_Liquidity_V1beta1_QueryPairResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePairInterceptors() ?? []
    )
  }

  internal func makeDepositRequestsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRequestsInterceptors() ?? []
    )
  }

  internal func makeDepositRequestCall(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRequestInterceptors() ?? []
    )
  }

  internal func makeWithdrawRequestsCall(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRequestsInterceptors() ?? []
    )
  }

  internal func makeWithdrawRequestCall(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRequestInterceptors() ?? []
    )
  }

  internal func makeOrdersCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  internal func makeOrderCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrderRequest, Crescent_Liquidity_V1beta1_QueryOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.order.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  internal func makeOrdersByOrdererCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.ordersByOrderer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersByOrdererInterceptors() ?? []
    )
  }

  internal func makeOrderBooksCall(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, Crescent_Liquidity_V1beta1_QueryOrderBooksResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orderBooks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderBooksInterceptors() ?? []
    )
  }

  internal func makeNumMmordersCall(
    _ request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.numMMOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumMMOrdersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Liquidity_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Crescent_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func pools(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  internal func pool(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func poolByReserveAddress(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByReserveAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByReserveAddressInterceptors() ?? []
    )
  }

  internal func poolByPoolCoinDenom(
    _ request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByPoolCoinDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByPoolCoinDenomInterceptors() ?? []
    )
  }

  internal func pairs(
    _ request: Crescent_Liquidity_V1beta1_QueryPairsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPairsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pairs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePairsInterceptors() ?? []
    )
  }

  internal func pair(
    _ request: Crescent_Liquidity_V1beta1_QueryPairRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPairResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePairInterceptors() ?? []
    )
  }

  internal func depositRequests(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRequestsInterceptors() ?? []
    )
  }

  internal func depositRequest(
    _ request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryDepositRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositRequestInterceptors() ?? []
    )
  }

  internal func withdrawRequests(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRequestsInterceptors() ?? []
    )
  }

  internal func withdrawRequest(
    _ request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRequestInterceptors() ?? []
    )
  }

  internal func orders(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  internal func order(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.order.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  internal func ordersByOrderer(
    _ request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.ordersByOrderer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersByOrdererInterceptors() ?? []
    )
  }

  internal func orderBooks(
    _ request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrderBooksResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orderBooks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderBooksInterceptors() ?? []
    )
  }

  internal func numMMOrders(
    _ request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.numMMOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumMMOrdersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Crescent_Liquidity_V1beta1_QueryAsyncClient: Crescent_Liquidity_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Crescent_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryParamsRequest, Crescent_Liquidity_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'pools'.
  func makePoolsInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryPoolsRequest, Crescent_Liquidity_V1beta1_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryPoolRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'poolByReserveAddress'.
  func makePoolByReserveAddressInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'poolByPoolCoinDenom'.
  func makePoolByPoolCoinDenomInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'pairs'.
  func makePairsInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryPairsRequest, Crescent_Liquidity_V1beta1_QueryPairsResponse>]

  /// - Returns: Interceptors to use when invoking 'pair'.
  func makePairInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryPairRequest, Crescent_Liquidity_V1beta1_QueryPairResponse>]

  /// - Returns: Interceptors to use when invoking 'depositRequests'.
  func makeDepositRequestsInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'depositRequest'.
  func makeDepositRequestInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawRequests'.
  func makeWithdrawRequestsInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawRequest'.
  func makeWithdrawRequestInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'orders'.
  func makeOrdersInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryOrdersRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'order'.
  func makeOrderInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryOrderRequest, Crescent_Liquidity_V1beta1_QueryOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'ordersByOrderer'.
  func makeOrdersByOrdererInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'orderBooks'.
  func makeOrderBooksInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>]

  /// - Returns: Interceptors to use when invoking 'numMMOrders'.
  func makeNumMMOrdersInterceptors() -> [ClientInterceptor<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>]
}

internal enum Crescent_Liquidity_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.liquidity.v1beta1.Query",
    methods: [
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.params,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pools,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pool,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByReserveAddress,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.poolByPoolCoinDenom,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pairs,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.pair,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequests,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.depositRequest,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequests,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.withdrawRequest,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orders,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.order,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.ordersByOrderer,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.orderBooks,
      Crescent_Liquidity_V1beta1_QueryClientMetadata.Methods.numMMOrders,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.liquidity.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/crescent.liquidity.v1beta1.Query/Pools",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/crescent.liquidity.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let poolByReserveAddress = GRPCMethodDescriptor(
      name: "PoolByReserveAddress",
      path: "/crescent.liquidity.v1beta1.Query/PoolByReserveAddress",
      type: GRPCCallType.unary
    )

    internal static let poolByPoolCoinDenom = GRPCMethodDescriptor(
      name: "PoolByPoolCoinDenom",
      path: "/crescent.liquidity.v1beta1.Query/PoolByPoolCoinDenom",
      type: GRPCCallType.unary
    )

    internal static let pairs = GRPCMethodDescriptor(
      name: "Pairs",
      path: "/crescent.liquidity.v1beta1.Query/Pairs",
      type: GRPCCallType.unary
    )

    internal static let pair = GRPCMethodDescriptor(
      name: "Pair",
      path: "/crescent.liquidity.v1beta1.Query/Pair",
      type: GRPCCallType.unary
    )

    internal static let depositRequests = GRPCMethodDescriptor(
      name: "DepositRequests",
      path: "/crescent.liquidity.v1beta1.Query/DepositRequests",
      type: GRPCCallType.unary
    )

    internal static let depositRequest = GRPCMethodDescriptor(
      name: "DepositRequest",
      path: "/crescent.liquidity.v1beta1.Query/DepositRequest",
      type: GRPCCallType.unary
    )

    internal static let withdrawRequests = GRPCMethodDescriptor(
      name: "WithdrawRequests",
      path: "/crescent.liquidity.v1beta1.Query/WithdrawRequests",
      type: GRPCCallType.unary
    )

    internal static let withdrawRequest = GRPCMethodDescriptor(
      name: "WithdrawRequest",
      path: "/crescent.liquidity.v1beta1.Query/WithdrawRequest",
      type: GRPCCallType.unary
    )

    internal static let orders = GRPCMethodDescriptor(
      name: "Orders",
      path: "/crescent.liquidity.v1beta1.Query/Orders",
      type: GRPCCallType.unary
    )

    internal static let order = GRPCMethodDescriptor(
      name: "Order",
      path: "/crescent.liquidity.v1beta1.Query/Order",
      type: GRPCCallType.unary
    )

    internal static let ordersByOrderer = GRPCMethodDescriptor(
      name: "OrdersByOrderer",
      path: "/crescent.liquidity.v1beta1.Query/OrdersByOrderer",
      type: GRPCCallType.unary
    )

    internal static let orderBooks = GRPCMethodDescriptor(
      name: "OrderBooks",
      path: "/crescent.liquidity.v1beta1.Query/OrderBooks",
      type: GRPCCallType.unary
    )

    internal static let numMMOrders = GRPCMethodDescriptor(
      name: "NumMMOrders",
      path: "/crescent.liquidity.v1beta1.Query/NumMMOrders",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Liquidity_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Crescent_Liquidity_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns parameters of the module.
  func params(request: Crescent_Liquidity_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryParamsResponse>

  /// Pools returns all liquidity pools.
  func pools(request: Crescent_Liquidity_V1beta1_QueryPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryPoolsResponse>

  /// Pool returns the specific liquidity pool.
  func pool(request: Crescent_Liquidity_V1beta1_QueryPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryPoolResponse>

  /// PoolByReserveAddress returns all pools that correspond to the reserve account.
  func poolByReserveAddress(request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryPoolResponse>

  /// PoolByPoolCoinDenom returns all pools that correspond to the pool coin denom.
  func poolByPoolCoinDenom(request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryPoolResponse>

  /// Pairs returns all liquidity pairs.
  func pairs(request: Crescent_Liquidity_V1beta1_QueryPairsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryPairsResponse>

  /// Pair returns the specific pair.
  func pair(request: Crescent_Liquidity_V1beta1_QueryPairRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryPairResponse>

  /// DepositRequests returns all deposit requests.
  func depositRequests(request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>

  /// DepositRequest returns the specific deposit request.
  func depositRequest(request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>

  /// WithdrawRequests returns all withdraw requests.
  func withdrawRequests(request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>

  /// WithdrawRequest returns the specific withdraw request.
  func withdrawRequest(request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>

  /// Orders returns all orders within the pair.
  func orders(request: Crescent_Liquidity_V1beta1_QueryOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryOrdersResponse>

  /// Order returns the specific order.
  func order(request: Crescent_Liquidity_V1beta1_QueryOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryOrderResponse>

  /// OrdersByOrderer returns orders made by an orderer.
  func ordersByOrderer(request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryOrdersResponse>

  func orderBooks(request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>

  func numMMOrders(request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>
}

extension Crescent_Liquidity_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Crescent_Liquidity_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Pools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        userFunction: self.pools(request:context:)
      )

    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "PoolByReserveAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolByReserveAddressInterceptors() ?? [],
        userFunction: self.poolByReserveAddress(request:context:)
      )

    case "PoolByPoolCoinDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolByPoolCoinDenomInterceptors() ?? [],
        userFunction: self.poolByPoolCoinDenom(request:context:)
      )

    case "Pairs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPairsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPairsResponse>(),
        interceptors: self.interceptors?.makePairsInterceptors() ?? [],
        userFunction: self.pairs(request:context:)
      )

    case "Pair":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPairRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPairResponse>(),
        interceptors: self.interceptors?.makePairInterceptors() ?? [],
        userFunction: self.pair(request:context:)
      )

    case "DepositRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>(),
        interceptors: self.interceptors?.makeDepositRequestsInterceptors() ?? [],
        userFunction: self.depositRequests(request:context:)
      )

    case "DepositRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>(),
        interceptors: self.interceptors?.makeDepositRequestInterceptors() ?? [],
        userFunction: self.depositRequest(request:context:)
      )

    case "WithdrawRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>(),
        interceptors: self.interceptors?.makeWithdrawRequestsInterceptors() ?? [],
        userFunction: self.withdrawRequests(request:context:)
      )

    case "WithdrawRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>(),
        interceptors: self.interceptors?.makeWithdrawRequestInterceptors() ?? [],
        userFunction: self.withdrawRequest(request:context:)
      )

    case "Orders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersInterceptors() ?? [],
        userFunction: self.orders(request:context:)
      )

    case "Order":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrderRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrderResponse>(),
        interceptors: self.interceptors?.makeOrderInterceptors() ?? [],
        userFunction: self.order(request:context:)
      )

    case "OrdersByOrderer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersByOrdererInterceptors() ?? [],
        userFunction: self.ordersByOrderer(request:context:)
      )

    case "OrderBooks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>(),
        interceptors: self.interceptors?.makeOrderBooksInterceptors() ?? [],
        userFunction: self.orderBooks(request:context:)
      )

    case "NumMMOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>(),
        interceptors: self.interceptors?.makeNumMMOrdersInterceptors() ?? [],
        userFunction: self.numMMOrders(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Liquidity_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Liquidity_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns parameters of the module.
  @Sendable func params(
    request: Crescent_Liquidity_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryParamsResponse

  /// Pools returns all liquidity pools.
  @Sendable func pools(
    request: Crescent_Liquidity_V1beta1_QueryPoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolsResponse

  /// Pool returns the specific liquidity pool.
  @Sendable func pool(
    request: Crescent_Liquidity_V1beta1_QueryPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolResponse

  /// PoolByReserveAddress returns all pools that correspond to the reserve account.
  @Sendable func poolByReserveAddress(
    request: Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolResponse

  /// PoolByPoolCoinDenom returns all pools that correspond to the pool coin denom.
  @Sendable func poolByPoolCoinDenom(
    request: Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPoolResponse

  /// Pairs returns all liquidity pairs.
  @Sendable func pairs(
    request: Crescent_Liquidity_V1beta1_QueryPairsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPairsResponse

  /// Pair returns the specific pair.
  @Sendable func pair(
    request: Crescent_Liquidity_V1beta1_QueryPairRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryPairResponse

  /// DepositRequests returns all deposit requests.
  @Sendable func depositRequests(
    request: Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse

  /// DepositRequest returns the specific deposit request.
  @Sendable func depositRequest(
    request: Crescent_Liquidity_V1beta1_QueryDepositRequestRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryDepositRequestResponse

  /// WithdrawRequests returns all withdraw requests.
  @Sendable func withdrawRequests(
    request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse

  /// WithdrawRequest returns the specific withdraw request.
  @Sendable func withdrawRequest(
    request: Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse

  /// Orders returns all orders within the pair.
  @Sendable func orders(
    request: Crescent_Liquidity_V1beta1_QueryOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrdersResponse

  /// Order returns the specific order.
  @Sendable func order(
    request: Crescent_Liquidity_V1beta1_QueryOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrderResponse

  /// OrdersByOrderer returns orders made by an orderer.
  @Sendable func ordersByOrderer(
    request: Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrdersResponse

  @Sendable func orderBooks(
    request: Crescent_Liquidity_V1beta1_QueryOrderBooksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryOrderBooksResponse

  @Sendable func numMMOrders(
    request: Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Liquidity_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Liquidity_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Crescent_Liquidity_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Crescent_Liquidity_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Pools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        wrapping: self.pools(request:context:)
      )

    case "Pool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        wrapping: self.pool(request:context:)
      )

    case "PoolByReserveAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolByReserveAddressInterceptors() ?? [],
        wrapping: self.poolByReserveAddress(request:context:)
      )

    case "PoolByPoolCoinDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolByPoolCoinDenomInterceptors() ?? [],
        wrapping: self.poolByPoolCoinDenom(request:context:)
      )

    case "Pairs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPairsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPairsResponse>(),
        interceptors: self.interceptors?.makePairsInterceptors() ?? [],
        wrapping: self.pairs(request:context:)
      )

    case "Pair":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryPairRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryPairResponse>(),
        interceptors: self.interceptors?.makePairInterceptors() ?? [],
        wrapping: self.pair(request:context:)
      )

    case "DepositRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>(),
        interceptors: self.interceptors?.makeDepositRequestsInterceptors() ?? [],
        wrapping: self.depositRequests(request:context:)
      )

    case "DepositRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>(),
        interceptors: self.interceptors?.makeDepositRequestInterceptors() ?? [],
        wrapping: self.depositRequest(request:context:)
      )

    case "WithdrawRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>(),
        interceptors: self.interceptors?.makeWithdrawRequestsInterceptors() ?? [],
        wrapping: self.withdrawRequests(request:context:)
      )

    case "WithdrawRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>(),
        interceptors: self.interceptors?.makeWithdrawRequestInterceptors() ?? [],
        wrapping: self.withdrawRequest(request:context:)
      )

    case "Orders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersInterceptors() ?? [],
        wrapping: self.orders(request:context:)
      )

    case "Order":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrderRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrderResponse>(),
        interceptors: self.interceptors?.makeOrderInterceptors() ?? [],
        wrapping: self.order(request:context:)
      )

    case "OrdersByOrderer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersByOrdererInterceptors() ?? [],
        wrapping: self.ordersByOrderer(request:context:)
      )

    case "OrderBooks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>(),
        interceptors: self.interceptors?.makeOrderBooksInterceptors() ?? [],
        wrapping: self.orderBooks(request:context:)
      )

    case "NumMMOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>(),
        interceptors: self.interceptors?.makeNumMMOrdersInterceptors() ?? [],
        wrapping: self.numMMOrders(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Liquidity_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryParamsRequest, Crescent_Liquidity_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'pools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolsInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryPoolsRequest, Crescent_Liquidity_V1beta1_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryPoolRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'poolByReserveAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolByReserveAddressInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryPoolByReserveAddressRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'poolByPoolCoinDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolByPoolCoinDenomInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryPoolByPoolCoinDenomRequest, Crescent_Liquidity_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'pairs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePairsInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryPairsRequest, Crescent_Liquidity_V1beta1_QueryPairsResponse>]

  /// - Returns: Interceptors to use when handling 'pair'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePairInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryPairRequest, Crescent_Liquidity_V1beta1_QueryPairResponse>]

  /// - Returns: Interceptors to use when handling 'depositRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositRequestsInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryDepositRequestsRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'depositRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositRequestInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryDepositRequestRequest, Crescent_Liquidity_V1beta1_QueryDepositRequestResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawRequestsInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryWithdrawRequestsRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawRequestInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryWithdrawRequestRequest, Crescent_Liquidity_V1beta1_QueryWithdrawRequestResponse>]

  /// - Returns: Interceptors to use when handling 'orders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrdersInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryOrdersRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'order'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrderInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryOrderRequest, Crescent_Liquidity_V1beta1_QueryOrderResponse>]

  /// - Returns: Interceptors to use when handling 'ordersByOrderer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrdersByOrdererInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryOrdersByOrdererRequest, Crescent_Liquidity_V1beta1_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'orderBooks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrderBooksInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryOrderBooksRequest, Crescent_Liquidity_V1beta1_QueryOrderBooksResponse>]

  /// - Returns: Interceptors to use when handling 'numMMOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNumMMOrdersInterceptors() -> [ServerInterceptor<Crescent_Liquidity_V1beta1_QueryNumMMOrdersRequest, Crescent_Liquidity_V1beta1_QueryNumMMOrdersResponse>]
}

internal enum Crescent_Liquidity_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.liquidity.v1beta1.Query",
    methods: [
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.params,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.pools,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.pool,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.poolByReserveAddress,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.poolByPoolCoinDenom,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.pairs,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.pair,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.depositRequests,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.depositRequest,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.withdrawRequests,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.withdrawRequest,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.orders,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.order,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.ordersByOrderer,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.orderBooks,
      Crescent_Liquidity_V1beta1_QueryServerMetadata.Methods.numMMOrders,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.liquidity.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/crescent.liquidity.v1beta1.Query/Pools",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/crescent.liquidity.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let poolByReserveAddress = GRPCMethodDescriptor(
      name: "PoolByReserveAddress",
      path: "/crescent.liquidity.v1beta1.Query/PoolByReserveAddress",
      type: GRPCCallType.unary
    )

    internal static let poolByPoolCoinDenom = GRPCMethodDescriptor(
      name: "PoolByPoolCoinDenom",
      path: "/crescent.liquidity.v1beta1.Query/PoolByPoolCoinDenom",
      type: GRPCCallType.unary
    )

    internal static let pairs = GRPCMethodDescriptor(
      name: "Pairs",
      path: "/crescent.liquidity.v1beta1.Query/Pairs",
      type: GRPCCallType.unary
    )

    internal static let pair = GRPCMethodDescriptor(
      name: "Pair",
      path: "/crescent.liquidity.v1beta1.Query/Pair",
      type: GRPCCallType.unary
    )

    internal static let depositRequests = GRPCMethodDescriptor(
      name: "DepositRequests",
      path: "/crescent.liquidity.v1beta1.Query/DepositRequests",
      type: GRPCCallType.unary
    )

    internal static let depositRequest = GRPCMethodDescriptor(
      name: "DepositRequest",
      path: "/crescent.liquidity.v1beta1.Query/DepositRequest",
      type: GRPCCallType.unary
    )

    internal static let withdrawRequests = GRPCMethodDescriptor(
      name: "WithdrawRequests",
      path: "/crescent.liquidity.v1beta1.Query/WithdrawRequests",
      type: GRPCCallType.unary
    )

    internal static let withdrawRequest = GRPCMethodDescriptor(
      name: "WithdrawRequest",
      path: "/crescent.liquidity.v1beta1.Query/WithdrawRequest",
      type: GRPCCallType.unary
    )

    internal static let orders = GRPCMethodDescriptor(
      name: "Orders",
      path: "/crescent.liquidity.v1beta1.Query/Orders",
      type: GRPCCallType.unary
    )

    internal static let order = GRPCMethodDescriptor(
      name: "Order",
      path: "/crescent.liquidity.v1beta1.Query/Order",
      type: GRPCCallType.unary
    )

    internal static let ordersByOrderer = GRPCMethodDescriptor(
      name: "OrdersByOrderer",
      path: "/crescent.liquidity.v1beta1.Query/OrdersByOrderer",
      type: GRPCCallType.unary
    )

    internal static let orderBooks = GRPCMethodDescriptor(
      name: "OrderBooks",
      path: "/crescent.liquidity.v1beta1.Query/OrderBooks",
      type: GRPCCallType.unary
    )

    internal static let numMMOrders = GRPCMethodDescriptor(
      name: "NumMMOrders",
      path: "/crescent.liquidity.v1beta1.Query/NumMMOrders",
      type: GRPCCallType.unary
    )
  }
}
