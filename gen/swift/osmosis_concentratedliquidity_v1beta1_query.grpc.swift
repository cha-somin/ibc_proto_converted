//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/concentratedliquidity/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Concentratedliquidity_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Concentratedliquidity_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func pools(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>

  func params(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>

  func userPositions(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>

  func liquidityPerTickRange(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>

  func liquidityNetInDirection(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>

  func claimableSpreadRewards(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>

  func claimableIncentives(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>

  func positionById(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>

  func poolAccumulatorRewards(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>

  func incentiveRecords(
    _ request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>

  func tickAccumulatorTrackers(
    _ request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>

  func cFMMPoolIdLinkFromConcentratedPoolId(
    _ request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>

  func userUnbondingPositions(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>

  func getTotalLiquidity(
    _ request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>

  func numNextInitializedTicks(
    _ request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>
}

extension Osmosis_Concentratedliquidity_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.concentratedliquidity.v1beta1.Query"
  }

  /// Pools returns all concentrated liquidity pools
  ///
  /// - Parameters:
  ///   - request: Request to send to Pools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pools(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  /// Params returns concentrated liquidity module params.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, Osmosis_Concentratedliquidity_V1beta1_ParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// UserPositions returns all concentrated positions of some address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserPositions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userPositions(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserPositionsInterceptors() ?? []
    )
  }

  /// LiquidityPerTickRange returns the amount of liquidity per every tick range
  /// existing within the given pool
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityPerTickRange.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityPerTickRange(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityPerTickRange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPerTickRangeInterceptors() ?? []
    )
  }

  /// LiquidityNetInDirection returns liquidity net in the direction given.
  /// Uses the bound if specified, if not uses either min tick / max tick
  /// depending on the direction.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityNetInDirection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityNetInDirection(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityNetInDirection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityNetInDirectionInterceptors() ?? []
    )
  }

  /// ClaimableSpreadRewards returns the amount of spread rewards that can be
  /// claimed by a position with the given id.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimableSpreadRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimableSpreadRewards(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableSpreadRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableSpreadRewardsInterceptors() ?? []
    )
  }

  /// ClaimableIncentives returns the amount of incentives that can be claimed
  /// and how many would be forfeited by a position with the given id.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimableIncentives.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimableIncentives(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableIncentives.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableIncentivesInterceptors() ?? []
    )
  }

  /// PositionById returns a position with the given id.
  ///
  /// - Parameters:
  ///   - request: Request to send to PositionById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func positionById(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.positionById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionByIdInterceptors() ?? []
    )
  }

  /// PoolAccumulatorRewards returns the pool-global accumulator rewards.
  /// Contains spread factor rewards and uptime rewards.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolAccumulatorRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolAccumulatorRewards(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.poolAccumulatorRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolAccumulatorRewardsInterceptors() ?? []
    )
  }

  /// IncentiveRecords returns the incentive records for a given poolId
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentiveRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentiveRecords(
    _ request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.incentiveRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveRecordsInterceptors() ?? []
    )
  }

  /// TickAccumulatorTrackers returns the tick accumulator trackers.
  /// Contains spread factor and uptime accumulator trackers.
  ///
  /// - Parameters:
  ///   - request: Request to send to TickAccumulatorTrackers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tickAccumulatorTrackers(
    _ request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.tickAccumulatorTrackers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickAccumulatorTrackersInterceptors() ?? []
    )
  }

  /// CFMMPoolIdLinkFromConcentratedPoolId returns the pool id of the CFMM
  /// pool that is linked with the given concentrated pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to CFMMPoolIdLinkFromConcentratedPoolId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cFMMPoolIdLinkFromConcentratedPoolId(
    _ request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.cFMMPoolIdLinkFromConcentratedPoolId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() ?? []
    )
  }

  /// UserUnbondingPositions returns the position and lock info of unbonding
  /// positions of the given address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserUnbondingPositions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userUnbondingPositions(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userUnbondingPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserUnbondingPositionsInterceptors() ?? []
    )
  }

  /// GetTotalLiquidity returns total liquidity across all cl pools.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTotalLiquidity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTotalLiquidity(
    _ request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.getTotalLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTotalLiquidityInterceptors() ?? []
    )
  }

  /// NumNextInitializedTicks returns the provided number of next initialized
  /// ticks in the direction of swapping the token in denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to NumNextInitializedTicks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func numNextInitializedTicks(
    _ request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.numNextInitializedTicks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumNextInitializedTicksInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Concentratedliquidity_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Concentratedliquidity_V1beta1_QueryNIOClient")
internal final class Osmosis_Concentratedliquidity_V1beta1_QueryClient: Osmosis_Concentratedliquidity_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.concentratedliquidity.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Concentratedliquidity_V1beta1_QueryNIOClient: Osmosis_Concentratedliquidity_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.concentratedliquidity.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Concentratedliquidity_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makePoolsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>

  func makeParamsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>

  func makeUserPositionsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>

  func makeLiquidityPerTickRangeCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>

  func makeLiquidityNetInDirectionCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>

  func makeClaimableSpreadRewardsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>

  func makeClaimableIncentivesCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>

  func makePositionByIDCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>

  func makePoolAccumulatorRewardsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>

  func makeIncentiveRecordsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>

  func makeTickAccumulatorTrackersCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>

  func makeCfmmpoolIDLinkFromConcentratedPoolIDCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>

  func makeUserUnbondingPositionsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>

  func makeGetTotalLiquidityCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>

  func makeNumNextInitializedTicksCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Concentratedliquidity_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makePoolsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, Osmosis_Concentratedliquidity_V1beta1_ParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeUserPositionsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserPositionsInterceptors() ?? []
    )
  }

  internal func makeLiquidityPerTickRangeCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityPerTickRange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPerTickRangeInterceptors() ?? []
    )
  }

  internal func makeLiquidityNetInDirectionCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityNetInDirection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityNetInDirectionInterceptors() ?? []
    )
  }

  internal func makeClaimableSpreadRewardsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableSpreadRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableSpreadRewardsInterceptors() ?? []
    )
  }

  internal func makeClaimableIncentivesCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableIncentives.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableIncentivesInterceptors() ?? []
    )
  }

  internal func makePositionByIDCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.positionById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionByIdInterceptors() ?? []
    )
  }

  internal func makePoolAccumulatorRewardsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.poolAccumulatorRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolAccumulatorRewardsInterceptors() ?? []
    )
  }

  internal func makeIncentiveRecordsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.incentiveRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveRecordsInterceptors() ?? []
    )
  }

  internal func makeTickAccumulatorTrackersCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.tickAccumulatorTrackers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickAccumulatorTrackersInterceptors() ?? []
    )
  }

  internal func makeCfmmpoolIDLinkFromConcentratedPoolIDCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.cFMMPoolIdLinkFromConcentratedPoolId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() ?? []
    )
  }

  internal func makeUserUnbondingPositionsCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userUnbondingPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserUnbondingPositionsInterceptors() ?? []
    )
  }

  internal func makeGetTotalLiquidityCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.getTotalLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTotalLiquidityInterceptors() ?? []
    )
  }

  internal func makeNumNextInitializedTicksCall(
    _ request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.numNextInitializedTicks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumNextInitializedTicksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Concentratedliquidity_V1beta1_QueryAsyncClientProtocol {
  internal func pools(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_PoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_ParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func userPositions(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserPositionsInterceptors() ?? []
    )
  }

  internal func liquidityPerTickRange(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityPerTickRange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPerTickRangeInterceptors() ?? []
    )
  }

  internal func liquidityNetInDirection(
    _ request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityNetInDirection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityNetInDirectionInterceptors() ?? []
    )
  }

  internal func claimableSpreadRewards(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableSpreadRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableSpreadRewardsInterceptors() ?? []
    )
  }

  internal func claimableIncentives(
    _ request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableIncentives.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableIncentivesInterceptors() ?? []
    )
  }

  internal func positionById(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.positionById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionByIdInterceptors() ?? []
    )
  }

  internal func poolAccumulatorRewards(
    _ request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.poolAccumulatorRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolAccumulatorRewardsInterceptors() ?? []
    )
  }

  internal func incentiveRecords(
    _ request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.incentiveRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveRecordsInterceptors() ?? []
    )
  }

  internal func tickAccumulatorTrackers(
    _ request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.tickAccumulatorTrackers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickAccumulatorTrackersInterceptors() ?? []
    )
  }

  internal func cFMMPoolIdLinkFromConcentratedPoolId(
    _ request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.cFMMPoolIdLinkFromConcentratedPoolId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() ?? []
    )
  }

  internal func userUnbondingPositions(
    _ request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userUnbondingPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserUnbondingPositionsInterceptors() ?? []
    )
  }

  internal func getTotalLiquidity(
    _ request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.getTotalLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTotalLiquidityInterceptors() ?? []
    )
  }

  internal func numNextInitializedTicks(
    _ request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.numNextInitializedTicks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumNextInitializedTicksInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Concentratedliquidity_V1beta1_QueryAsyncClient: Osmosis_Concentratedliquidity_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Concentratedliquidity_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'pools'.
  func makePoolsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'userPositions'.
  func makeUserPositionsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidityPerTickRange'.
  func makeLiquidityPerTickRangeInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidityNetInDirection'.
  func makeLiquidityNetInDirectionInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>]

  /// - Returns: Interceptors to use when invoking 'claimableSpreadRewards'.
  func makeClaimableSpreadRewardsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimableIncentives'.
  func makeClaimableIncentivesInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>]

  /// - Returns: Interceptors to use when invoking 'positionById'.
  func makePositionByIdInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>]

  /// - Returns: Interceptors to use when invoking 'poolAccumulatorRewards'.
  func makePoolAccumulatorRewardsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'incentiveRecords'.
  func makeIncentiveRecordsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'tickAccumulatorTrackers'.
  func makeTickAccumulatorTrackersInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>]

  /// - Returns: Interceptors to use when invoking 'cFMMPoolIdLinkFromConcentratedPoolId'.
  func makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>]

  /// - Returns: Interceptors to use when invoking 'userUnbondingPositions'.
  func makeUserUnbondingPositionsInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getTotalLiquidity'.
  func makeGetTotalLiquidityInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>]

  /// - Returns: Interceptors to use when invoking 'numNextInitializedTicks'.
  func makeNumNextInitializedTicksInterceptors() -> [ClientInterceptor<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>]
}

internal enum Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.concentratedliquidity.v1beta1.Query",
    methods: [
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.pools,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.params,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userPositions,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityPerTickRange,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.liquidityNetInDirection,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableSpreadRewards,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.claimableIncentives,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.positionById,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.poolAccumulatorRewards,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.incentiveRecords,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.tickAccumulatorTrackers,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.cFMMPoolIdLinkFromConcentratedPoolId,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.userUnbondingPositions,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.getTotalLiquidity,
      Osmosis_Concentratedliquidity_V1beta1_QueryClientMetadata.Methods.numNextInitializedTicks,
    ]
  )

  internal enum Methods {
    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/Pools",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let userPositions = GRPCMethodDescriptor(
      name: "UserPositions",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/UserPositions",
      type: GRPCCallType.unary
    )

    internal static let liquidityPerTickRange = GRPCMethodDescriptor(
      name: "LiquidityPerTickRange",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityPerTickRange",
      type: GRPCCallType.unary
    )

    internal static let liquidityNetInDirection = GRPCMethodDescriptor(
      name: "LiquidityNetInDirection",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityNetInDirection",
      type: GRPCCallType.unary
    )

    internal static let claimableSpreadRewards = GRPCMethodDescriptor(
      name: "ClaimableSpreadRewards",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableSpreadRewards",
      type: GRPCCallType.unary
    )

    internal static let claimableIncentives = GRPCMethodDescriptor(
      name: "ClaimableIncentives",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableIncentives",
      type: GRPCCallType.unary
    )

    internal static let positionById = GRPCMethodDescriptor(
      name: "PositionById",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/PositionById",
      type: GRPCCallType.unary
    )

    internal static let poolAccumulatorRewards = GRPCMethodDescriptor(
      name: "PoolAccumulatorRewards",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/PoolAccumulatorRewards",
      type: GRPCCallType.unary
    )

    internal static let incentiveRecords = GRPCMethodDescriptor(
      name: "IncentiveRecords",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/IncentiveRecords",
      type: GRPCCallType.unary
    )

    internal static let tickAccumulatorTrackers = GRPCMethodDescriptor(
      name: "TickAccumulatorTrackers",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/TickAccumulatorTrackers",
      type: GRPCCallType.unary
    )

    internal static let cFMMPoolIdLinkFromConcentratedPoolId = GRPCMethodDescriptor(
      name: "CFMMPoolIdLinkFromConcentratedPoolId",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/CFMMPoolIdLinkFromConcentratedPoolId",
      type: GRPCCallType.unary
    )

    internal static let userUnbondingPositions = GRPCMethodDescriptor(
      name: "UserUnbondingPositions",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/UserUnbondingPositions",
      type: GRPCCallType.unary
    )

    internal static let getTotalLiquidity = GRPCMethodDescriptor(
      name: "GetTotalLiquidity",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/GetTotalLiquidity",
      type: GRPCCallType.unary
    )

    internal static let numNextInitializedTicks = GRPCMethodDescriptor(
      name: "NumNextInitializedTicks",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/NumNextInitializedTicks",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Concentratedliquidity_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Pools returns all concentrated liquidity pools
  func pools(request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>

  /// Params returns concentrated liquidity module params.
  func params(request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>

  /// UserPositions returns all concentrated positions of some address.
  func userPositions(request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>

  /// LiquidityPerTickRange returns the amount of liquidity per every tick range
  /// existing within the given pool
  func liquidityPerTickRange(request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>

  /// LiquidityNetInDirection returns liquidity net in the direction given.
  /// Uses the bound if specified, if not uses either min tick / max tick
  /// depending on the direction.
  func liquidityNetInDirection(request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>

  /// ClaimableSpreadRewards returns the amount of spread rewards that can be
  /// claimed by a position with the given id.
  func claimableSpreadRewards(request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>

  /// ClaimableIncentives returns the amount of incentives that can be claimed
  /// and how many would be forfeited by a position with the given id.
  func claimableIncentives(request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>

  /// PositionById returns a position with the given id.
  func positionById(request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>

  /// PoolAccumulatorRewards returns the pool-global accumulator rewards.
  /// Contains spread factor rewards and uptime rewards.
  func poolAccumulatorRewards(request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>

  /// IncentiveRecords returns the incentive records for a given poolId
  func incentiveRecords(request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>

  /// TickAccumulatorTrackers returns the tick accumulator trackers.
  /// Contains spread factor and uptime accumulator trackers.
  func tickAccumulatorTrackers(request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>

  /// CFMMPoolIdLinkFromConcentratedPoolId returns the pool id of the CFMM
  /// pool that is linked with the given concentrated pool.
  func cFMMPoolIdLinkFromConcentratedPoolId(request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>

  /// UserUnbondingPositions returns the position and lock info of unbonding
  /// positions of the given address.
  func userUnbondingPositions(request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>

  /// GetTotalLiquidity returns total liquidity across all cl pools.
  func getTotalLiquidity(request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>

  /// NumNextInitializedTicks returns the provided number of next initialized
  /// ticks in the direction of swapping the token in denom.
  func numNextInitializedTicks(request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>
}

extension Osmosis_Concentratedliquidity_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Pools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        userFunction: self.pools(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "UserPositions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>(),
        interceptors: self.interceptors?.makeUserPositionsInterceptors() ?? [],
        userFunction: self.userPositions(request:context:)
      )

    case "LiquidityPerTickRange":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>(),
        interceptors: self.interceptors?.makeLiquidityPerTickRangeInterceptors() ?? [],
        userFunction: self.liquidityPerTickRange(request:context:)
      )

    case "LiquidityNetInDirection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>(),
        interceptors: self.interceptors?.makeLiquidityNetInDirectionInterceptors() ?? [],
        userFunction: self.liquidityNetInDirection(request:context:)
      )

    case "ClaimableSpreadRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimableSpreadRewardsInterceptors() ?? [],
        userFunction: self.claimableSpreadRewards(request:context:)
      )

    case "ClaimableIncentives":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>(),
        interceptors: self.interceptors?.makeClaimableIncentivesInterceptors() ?? [],
        userFunction: self.claimableIncentives(request:context:)
      )

    case "PositionById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>(),
        interceptors: self.interceptors?.makePositionByIdInterceptors() ?? [],
        userFunction: self.positionById(request:context:)
      )

    case "PoolAccumulatorRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>(),
        interceptors: self.interceptors?.makePoolAccumulatorRewardsInterceptors() ?? [],
        userFunction: self.poolAccumulatorRewards(request:context:)
      )

    case "IncentiveRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>(),
        interceptors: self.interceptors?.makeIncentiveRecordsInterceptors() ?? [],
        userFunction: self.incentiveRecords(request:context:)
      )

    case "TickAccumulatorTrackers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>(),
        interceptors: self.interceptors?.makeTickAccumulatorTrackersInterceptors() ?? [],
        userFunction: self.tickAccumulatorTrackers(request:context:)
      )

    case "CFMMPoolIdLinkFromConcentratedPoolId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>(),
        interceptors: self.interceptors?.makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() ?? [],
        userFunction: self.cFMMPoolIdLinkFromConcentratedPoolId(request:context:)
      )

    case "UserUnbondingPositions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>(),
        interceptors: self.interceptors?.makeUserUnbondingPositionsInterceptors() ?? [],
        userFunction: self.userUnbondingPositions(request:context:)
      )

    case "GetTotalLiquidity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>(),
        interceptors: self.interceptors?.makeGetTotalLiquidityInterceptors() ?? [],
        userFunction: self.getTotalLiquidity(request:context:)
      )

    case "NumNextInitializedTicks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>(),
        interceptors: self.interceptors?.makeNumNextInitializedTicksInterceptors() ?? [],
        userFunction: self.numNextInitializedTicks(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Concentratedliquidity_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Pools returns all concentrated liquidity pools
  @Sendable func pools(
    request: Osmosis_Concentratedliquidity_V1beta1_PoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_PoolsResponse

  /// Params returns concentrated liquidity module params.
  @Sendable func params(
    request: Osmosis_Concentratedliquidity_V1beta1_ParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_ParamsResponse

  /// UserPositions returns all concentrated positions of some address.
  @Sendable func userPositions(
    request: Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse

  /// LiquidityPerTickRange returns the amount of liquidity per every tick range
  /// existing within the given pool
  @Sendable func liquidityPerTickRange(
    request: Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse

  /// LiquidityNetInDirection returns liquidity net in the direction given.
  /// Uses the bound if specified, if not uses either min tick / max tick
  /// depending on the direction.
  @Sendable func liquidityNetInDirection(
    request: Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse

  /// ClaimableSpreadRewards returns the amount of spread rewards that can be
  /// claimed by a position with the given id.
  @Sendable func claimableSpreadRewards(
    request: Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse

  /// ClaimableIncentives returns the amount of incentives that can be claimed
  /// and how many would be forfeited by a position with the given id.
  @Sendable func claimableIncentives(
    request: Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse

  /// PositionById returns a position with the given id.
  @Sendable func positionById(
    request: Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse

  /// PoolAccumulatorRewards returns the pool-global accumulator rewards.
  /// Contains spread factor rewards and uptime rewards.
  @Sendable func poolAccumulatorRewards(
    request: Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse

  /// IncentiveRecords returns the incentive records for a given poolId
  @Sendable func incentiveRecords(
    request: Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse

  /// TickAccumulatorTrackers returns the tick accumulator trackers.
  /// Contains spread factor and uptime accumulator trackers.
  @Sendable func tickAccumulatorTrackers(
    request: Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse

  /// CFMMPoolIdLinkFromConcentratedPoolId returns the pool id of the CFMM
  /// pool that is linked with the given concentrated pool.
  @Sendable func cFMMPoolIdLinkFromConcentratedPoolId(
    request: Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse

  /// UserUnbondingPositions returns the position and lock info of unbonding
  /// positions of the given address.
  @Sendable func userUnbondingPositions(
    request: Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse

  /// GetTotalLiquidity returns total liquidity across all cl pools.
  @Sendable func getTotalLiquidity(
    request: Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse

  /// NumNextInitializedTicks returns the provided number of next initialized
  /// ticks in the direction of swapping the token in denom.
  @Sendable func numNextInitializedTicks(
    request: Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Concentratedliquidity_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Concentratedliquidity_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Pools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        wrapping: self.pools(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "UserPositions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>(),
        interceptors: self.interceptors?.makeUserPositionsInterceptors() ?? [],
        wrapping: self.userPositions(request:context:)
      )

    case "LiquidityPerTickRange":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>(),
        interceptors: self.interceptors?.makeLiquidityPerTickRangeInterceptors() ?? [],
        wrapping: self.liquidityPerTickRange(request:context:)
      )

    case "LiquidityNetInDirection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>(),
        interceptors: self.interceptors?.makeLiquidityNetInDirectionInterceptors() ?? [],
        wrapping: self.liquidityNetInDirection(request:context:)
      )

    case "ClaimableSpreadRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimableSpreadRewardsInterceptors() ?? [],
        wrapping: self.claimableSpreadRewards(request:context:)
      )

    case "ClaimableIncentives":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>(),
        interceptors: self.interceptors?.makeClaimableIncentivesInterceptors() ?? [],
        wrapping: self.claimableIncentives(request:context:)
      )

    case "PositionById":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>(),
        interceptors: self.interceptors?.makePositionByIdInterceptors() ?? [],
        wrapping: self.positionById(request:context:)
      )

    case "PoolAccumulatorRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>(),
        interceptors: self.interceptors?.makePoolAccumulatorRewardsInterceptors() ?? [],
        wrapping: self.poolAccumulatorRewards(request:context:)
      )

    case "IncentiveRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>(),
        interceptors: self.interceptors?.makeIncentiveRecordsInterceptors() ?? [],
        wrapping: self.incentiveRecords(request:context:)
      )

    case "TickAccumulatorTrackers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>(),
        interceptors: self.interceptors?.makeTickAccumulatorTrackersInterceptors() ?? [],
        wrapping: self.tickAccumulatorTrackers(request:context:)
      )

    case "CFMMPoolIdLinkFromConcentratedPoolId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>(),
        interceptors: self.interceptors?.makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() ?? [],
        wrapping: self.cFMMPoolIdLinkFromConcentratedPoolId(request:context:)
      )

    case "UserUnbondingPositions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>(),
        interceptors: self.interceptors?.makeUserUnbondingPositionsInterceptors() ?? [],
        wrapping: self.userUnbondingPositions(request:context:)
      )

    case "GetTotalLiquidity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>(),
        interceptors: self.interceptors?.makeGetTotalLiquidityInterceptors() ?? [],
        wrapping: self.getTotalLiquidity(request:context:)
      )

    case "NumNextInitializedTicks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>(),
        interceptors: self.interceptors?.makeNumNextInitializedTicksInterceptors() ?? [],
        wrapping: self.numNextInitializedTicks(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Concentratedliquidity_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'pools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_PoolsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolsResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_ParamsRequest, Osmosis_Concentratedliquidity_V1beta1_ParamsResponse>]

  /// - Returns: Interceptors to use when handling 'userPositions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserPositionsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_UserPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'liquidityPerTickRange'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityPerTickRangeInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityPerTickRangeResponse>]

  /// - Returns: Interceptors to use when handling 'liquidityNetInDirection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityNetInDirectionInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionRequest, Osmosis_Concentratedliquidity_V1beta1_LiquidityNetInDirectionResponse>]

  /// - Returns: Interceptors to use when handling 'claimableSpreadRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimableSpreadRewardsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableSpreadRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'claimableIncentives'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimableIncentivesInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesRequest, Osmosis_Concentratedliquidity_V1beta1_ClaimableIncentivesResponse>]

  /// - Returns: Interceptors to use when handling 'positionById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePositionByIdInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_PositionByIdRequest, Osmosis_Concentratedliquidity_V1beta1_PositionByIdResponse>]

  /// - Returns: Interceptors to use when handling 'poolAccumulatorRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolAccumulatorRewardsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsRequest, Osmosis_Concentratedliquidity_V1beta1_PoolAccumulatorRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'incentiveRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentiveRecordsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsRequest, Osmosis_Concentratedliquidity_V1beta1_IncentiveRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'tickAccumulatorTrackers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTickAccumulatorTrackersInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersRequest, Osmosis_Concentratedliquidity_V1beta1_TickAccumulatorTrackersResponse>]

  /// - Returns: Interceptors to use when handling 'cFMMPoolIdLinkFromConcentratedPoolId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCFMMPoolIdLinkFromConcentratedPoolIdInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdRequest, Osmosis_Concentratedliquidity_V1beta1_CFMMPoolIdLinkFromConcentratedPoolIdResponse>]

  /// - Returns: Interceptors to use when handling 'userUnbondingPositions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserUnbondingPositionsInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsRequest, Osmosis_Concentratedliquidity_V1beta1_UserUnbondingPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'getTotalLiquidity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTotalLiquidityInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityRequest, Osmosis_Concentratedliquidity_V1beta1_GetTotalLiquidityResponse>]

  /// - Returns: Interceptors to use when handling 'numNextInitializedTicks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNumNextInitializedTicksInterceptors() -> [ServerInterceptor<Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksRequest, Osmosis_Concentratedliquidity_V1beta1_NumNextInitializedTicksResponse>]
}

internal enum Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.concentratedliquidity.v1beta1.Query",
    methods: [
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.pools,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.params,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.userPositions,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.liquidityPerTickRange,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.liquidityNetInDirection,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.claimableSpreadRewards,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.claimableIncentives,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.positionById,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.poolAccumulatorRewards,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.incentiveRecords,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.tickAccumulatorTrackers,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.cFMMPoolIdLinkFromConcentratedPoolId,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.userUnbondingPositions,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.getTotalLiquidity,
      Osmosis_Concentratedliquidity_V1beta1_QueryServerMetadata.Methods.numNextInitializedTicks,
    ]
  )

  internal enum Methods {
    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/Pools",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let userPositions = GRPCMethodDescriptor(
      name: "UserPositions",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/UserPositions",
      type: GRPCCallType.unary
    )

    internal static let liquidityPerTickRange = GRPCMethodDescriptor(
      name: "LiquidityPerTickRange",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityPerTickRange",
      type: GRPCCallType.unary
    )

    internal static let liquidityNetInDirection = GRPCMethodDescriptor(
      name: "LiquidityNetInDirection",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityNetInDirection",
      type: GRPCCallType.unary
    )

    internal static let claimableSpreadRewards = GRPCMethodDescriptor(
      name: "ClaimableSpreadRewards",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableSpreadRewards",
      type: GRPCCallType.unary
    )

    internal static let claimableIncentives = GRPCMethodDescriptor(
      name: "ClaimableIncentives",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableIncentives",
      type: GRPCCallType.unary
    )

    internal static let positionById = GRPCMethodDescriptor(
      name: "PositionById",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/PositionById",
      type: GRPCCallType.unary
    )

    internal static let poolAccumulatorRewards = GRPCMethodDescriptor(
      name: "PoolAccumulatorRewards",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/PoolAccumulatorRewards",
      type: GRPCCallType.unary
    )

    internal static let incentiveRecords = GRPCMethodDescriptor(
      name: "IncentiveRecords",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/IncentiveRecords",
      type: GRPCCallType.unary
    )

    internal static let tickAccumulatorTrackers = GRPCMethodDescriptor(
      name: "TickAccumulatorTrackers",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/TickAccumulatorTrackers",
      type: GRPCCallType.unary
    )

    internal static let cFMMPoolIdLinkFromConcentratedPoolId = GRPCMethodDescriptor(
      name: "CFMMPoolIdLinkFromConcentratedPoolId",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/CFMMPoolIdLinkFromConcentratedPoolId",
      type: GRPCCallType.unary
    )

    internal static let userUnbondingPositions = GRPCMethodDescriptor(
      name: "UserUnbondingPositions",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/UserUnbondingPositions",
      type: GRPCCallType.unary
    )

    internal static let getTotalLiquidity = GRPCMethodDescriptor(
      name: "GetTotalLiquidity",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/GetTotalLiquidity",
      type: GRPCCallType.unary
    )

    internal static let numNextInitializedTicks = GRPCMethodDescriptor(
      name: "NumNextInitializedTicks",
      path: "/osmosis.concentratedliquidity.v1beta1.Query/NumNextInitializedTicks",
      type: GRPCCallType.unary
    )
  }
}
