// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstaking/v1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the module.
struct Babylon_Btcstaking_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// covenant_pks is the list of public keys held by the covenant committee
  /// each PK follows encoding in BIP-340 spec on Bitcoin
  var covenantPks: [Data] = []

  /// covenant_quorum is the minimum number of signatures needed for the covenant
  /// multisignature
  var covenantQuorum: UInt32 = 0

  /// slashing address is the address that the slashed BTC goes to
  /// the address is in string on Bitcoin
  var slashingAddress: String = String()

  /// min_slashing_tx_fee_sat is the minimum amount of tx fee (quantified
  /// in Satoshi) needed for the pre-signed slashing tx
  /// TODO: change to satoshi per byte?
  var minSlashingTxFeeSat: Int64 = 0

  /// min_commission_rate is the chain-wide minimum commission rate that a finality provider can charge their delegators
  var minCommissionRate: String = String()

  /// slashing_rate determines the portion of the staked amount to be slashed,
  /// expressed as a decimal (e.g., 0.5 for 50%).
  var slashingRate: String = String()

  /// max_active_finality_providers is the maximum number of active finality providers in the BTC staking protocol
  var maxActiveFinalityProviders: UInt32 = 0

  /// min_unbonding_time is the minimum time for unbonding transaction timelock in BTC blocks
  var minUnbondingTime: UInt32 = 0

  /// min_unbonding_rate is the minimum amount of BTC that are required in unbonding
  /// output, expressed as a fraction of staking output
  /// example: if min_unbonding_rate=0.9, then the unbonding output value
  /// must be at least 90% of staking output, for staking request to be considered
  /// valid
  var minUnbondingRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StoredParams attach information about the version of stored parameters
struct Babylon_Btcstaking_V1_StoredParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// version of the stored parameters. Each parameters update
  /// increments version number by 1
  var version: UInt32 = 0

  /// NOTE: Parameters must always be provided
  var params: Babylon_Btcstaking_V1_Params {
    get {return _params ?? Babylon_Btcstaking_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Btcstaking_V1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstaking_V1_Params: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_StoredParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstaking.v1"

extension Babylon_Btcstaking_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "covenant_pks"),
    2: .standard(proto: "covenant_quorum"),
    3: .standard(proto: "slashing_address"),
    4: .standard(proto: "min_slashing_tx_fee_sat"),
    5: .standard(proto: "min_commission_rate"),
    6: .standard(proto: "slashing_rate"),
    7: .standard(proto: "max_active_finality_providers"),
    8: .standard(proto: "min_unbonding_time"),
    9: .standard(proto: "min_unbonding_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.covenantPks) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.covenantQuorum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.slashingAddress) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.minSlashingTxFeeSat) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minCommissionRate) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.slashingRate) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.maxActiveFinalityProviders) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.minUnbondingTime) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.minUnbondingRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.covenantPks.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.covenantPks, fieldNumber: 1)
    }
    if self.covenantQuorum != 0 {
      try visitor.visitSingularUInt32Field(value: self.covenantQuorum, fieldNumber: 2)
    }
    if !self.slashingAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.slashingAddress, fieldNumber: 3)
    }
    if self.minSlashingTxFeeSat != 0 {
      try visitor.visitSingularInt64Field(value: self.minSlashingTxFeeSat, fieldNumber: 4)
    }
    if !self.minCommissionRate.isEmpty {
      try visitor.visitSingularStringField(value: self.minCommissionRate, fieldNumber: 5)
    }
    if !self.slashingRate.isEmpty {
      try visitor.visitSingularStringField(value: self.slashingRate, fieldNumber: 6)
    }
    if self.maxActiveFinalityProviders != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxActiveFinalityProviders, fieldNumber: 7)
    }
    if self.minUnbondingTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.minUnbondingTime, fieldNumber: 8)
    }
    if !self.minUnbondingRate.isEmpty {
      try visitor.visitSingularStringField(value: self.minUnbondingRate, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_Params, rhs: Babylon_Btcstaking_V1_Params) -> Bool {
    if lhs.covenantPks != rhs.covenantPks {return false}
    if lhs.covenantQuorum != rhs.covenantQuorum {return false}
    if lhs.slashingAddress != rhs.slashingAddress {return false}
    if lhs.minSlashingTxFeeSat != rhs.minSlashingTxFeeSat {return false}
    if lhs.minCommissionRate != rhs.minCommissionRate {return false}
    if lhs.slashingRate != rhs.slashingRate {return false}
    if lhs.maxActiveFinalityProviders != rhs.maxActiveFinalityProviders {return false}
    if lhs.minUnbondingTime != rhs.minUnbondingTime {return false}
    if lhs.minUnbondingRate != rhs.minUnbondingRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_StoredParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoredParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_StoredParams, rhs: Babylon_Btcstaking_V1_StoredParams) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
