// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstaking/v1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the module.
struct Babylon_Btcstaking_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PARAMETERS COVERING STAKING
  /// covenant_pks is the list of public keys held by the covenant committee
  /// each PK follows encoding in BIP-340 spec on Bitcoin
  var covenantPks: [Data] = []

  /// covenant_quorum is the minimum number of signatures needed for the covenant
  /// multisignature
  var covenantQuorum: UInt32 = 0

  /// min_staking_value_sat is the minimum of satoshis locked in staking output
  var minStakingValueSat: Int64 = 0

  /// max_staking_value_sat is the maximum of satoshis locked in staking output
  var maxStakingValueSat: Int64 = 0

  /// min_staking_time is the minimum lock time specified in staking output script
  var minStakingTimeBlocks: UInt32 = 0

  /// max_staking_time_blocks is the maximum lock time time specified in staking output script
  var maxStakingTimeBlocks: UInt32 = 0

  /// PARAMETERS COVERING SLASHING
  /// slashing_pk_script is the pk_script expected in slashing output ie. the first
  /// output of slashing transaction
  var slashingPkScript: Data = Data()

  /// min_slashing_tx_fee_sat is the minimum amount of tx fee (quantified
  /// in Satoshi) needed for the pre-signed slashing tx. It covers both:
  /// staking slashing transaction and unbonding slashing transaction
  var minSlashingTxFeeSat: Int64 = 0

  /// slashing_rate determines the portion of the staked amount to be slashed,
  /// expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2 decimal
  /// places
  var slashingRate: String = String()

  /// PARAMETERS COVERING UNBONDING
  /// unbonding_time is the exact unbonding time required from unbonding transaction
  /// it must be larger than `checkpoint_finalization_timeout` from `btccheckpoint` module
  var unbondingTimeBlocks: UInt32 = 0

  /// unbonding_fee exact fee required for unbonding transaction
  var unbondingFeeSat: Int64 = 0

  /// PARAMETERS COVERING FINALITY PROVIDERS
  /// min_commission_rate is the chain-wide minimum commission rate that a finality provider
  /// can charge their delegators expressed as a decimal (e.g., 0.5 for 50%). Maximal precion
  /// is 2 decimal places
  var minCommissionRate: String = String()

  /// base gas fee for delegation creation
  var delegationCreationBaseGasFee: UInt64 = 0

  /// allow_list_expiration_height is the height at which the allow list expires
  /// i.e all staking transactions are allowed to enter Babylon chain afterwards
  /// setting it to 0 means allow list is disabled
  var allowListExpirationHeight: UInt64 = 0

  /// btc_activation_height is the btc height from which parameters are activated (inclusive)
  var btcActivationHeight: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// HeightVersionPair pairs a btc height with a version of the parameters
struct Babylon_Btcstaking_V1_HeightVersionPair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// start_height is the height from which the parameters are activated (inclusive)
  var startHeight: UInt64 = 0

  /// version is the version of the parameters
  var version: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// HeightToVersionMap maps a btc height to a version of the parameters
struct Babylon_Btcstaking_V1_HeightToVersionMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Pairs must be sorted by `start_height` in ascending order, without duplicates
  var pairs: [Babylon_Btcstaking_V1_HeightVersionPair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StoredParams attach information about the version of stored parameters
struct Babylon_Btcstaking_V1_StoredParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// version of the stored parameters. Each parameters update
  /// increments version number by 1
  var version: UInt32 = 0

  /// NOTE: Parameters must always be provided
  var params: Babylon_Btcstaking_V1_Params {
    get {return _params ?? Babylon_Btcstaking_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Btcstaking_V1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstaking_V1_Params: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_HeightVersionPair: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_HeightToVersionMap: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_StoredParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstaking.v1"

extension Babylon_Btcstaking_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "covenant_pks"),
    2: .standard(proto: "covenant_quorum"),
    3: .standard(proto: "min_staking_value_sat"),
    4: .standard(proto: "max_staking_value_sat"),
    5: .standard(proto: "min_staking_time_blocks"),
    6: .standard(proto: "max_staking_time_blocks"),
    7: .standard(proto: "slashing_pk_script"),
    8: .standard(proto: "min_slashing_tx_fee_sat"),
    9: .standard(proto: "slashing_rate"),
    10: .standard(proto: "unbonding_time_blocks"),
    11: .standard(proto: "unbonding_fee_sat"),
    12: .standard(proto: "min_commission_rate"),
    13: .standard(proto: "delegation_creation_base_gas_fee"),
    14: .standard(proto: "allow_list_expiration_height"),
    15: .standard(proto: "btc_activation_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.covenantPks) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.covenantQuorum) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.minStakingValueSat) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.maxStakingValueSat) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.minStakingTimeBlocks) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.maxStakingTimeBlocks) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.slashingPkScript) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.minSlashingTxFeeSat) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.slashingRate) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.unbondingTimeBlocks) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.unbondingFeeSat) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.minCommissionRate) }()
      case 13: try { try decoder.decodeSingularUInt64Field(value: &self.delegationCreationBaseGasFee) }()
      case 14: try { try decoder.decodeSingularUInt64Field(value: &self.allowListExpirationHeight) }()
      case 15: try { try decoder.decodeSingularUInt32Field(value: &self.btcActivationHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.covenantPks.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.covenantPks, fieldNumber: 1)
    }
    if self.covenantQuorum != 0 {
      try visitor.visitSingularUInt32Field(value: self.covenantQuorum, fieldNumber: 2)
    }
    if self.minStakingValueSat != 0 {
      try visitor.visitSingularInt64Field(value: self.minStakingValueSat, fieldNumber: 3)
    }
    if self.maxStakingValueSat != 0 {
      try visitor.visitSingularInt64Field(value: self.maxStakingValueSat, fieldNumber: 4)
    }
    if self.minStakingTimeBlocks != 0 {
      try visitor.visitSingularUInt32Field(value: self.minStakingTimeBlocks, fieldNumber: 5)
    }
    if self.maxStakingTimeBlocks != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxStakingTimeBlocks, fieldNumber: 6)
    }
    if !self.slashingPkScript.isEmpty {
      try visitor.visitSingularBytesField(value: self.slashingPkScript, fieldNumber: 7)
    }
    if self.minSlashingTxFeeSat != 0 {
      try visitor.visitSingularInt64Field(value: self.minSlashingTxFeeSat, fieldNumber: 8)
    }
    if !self.slashingRate.isEmpty {
      try visitor.visitSingularStringField(value: self.slashingRate, fieldNumber: 9)
    }
    if self.unbondingTimeBlocks != 0 {
      try visitor.visitSingularUInt32Field(value: self.unbondingTimeBlocks, fieldNumber: 10)
    }
    if self.unbondingFeeSat != 0 {
      try visitor.visitSingularInt64Field(value: self.unbondingFeeSat, fieldNumber: 11)
    }
    if !self.minCommissionRate.isEmpty {
      try visitor.visitSingularStringField(value: self.minCommissionRate, fieldNumber: 12)
    }
    if self.delegationCreationBaseGasFee != 0 {
      try visitor.visitSingularUInt64Field(value: self.delegationCreationBaseGasFee, fieldNumber: 13)
    }
    if self.allowListExpirationHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.allowListExpirationHeight, fieldNumber: 14)
    }
    if self.btcActivationHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.btcActivationHeight, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_Params, rhs: Babylon_Btcstaking_V1_Params) -> Bool {
    if lhs.covenantPks != rhs.covenantPks {return false}
    if lhs.covenantQuorum != rhs.covenantQuorum {return false}
    if lhs.minStakingValueSat != rhs.minStakingValueSat {return false}
    if lhs.maxStakingValueSat != rhs.maxStakingValueSat {return false}
    if lhs.minStakingTimeBlocks != rhs.minStakingTimeBlocks {return false}
    if lhs.maxStakingTimeBlocks != rhs.maxStakingTimeBlocks {return false}
    if lhs.slashingPkScript != rhs.slashingPkScript {return false}
    if lhs.minSlashingTxFeeSat != rhs.minSlashingTxFeeSat {return false}
    if lhs.slashingRate != rhs.slashingRate {return false}
    if lhs.unbondingTimeBlocks != rhs.unbondingTimeBlocks {return false}
    if lhs.unbondingFeeSat != rhs.unbondingFeeSat {return false}
    if lhs.minCommissionRate != rhs.minCommissionRate {return false}
    if lhs.delegationCreationBaseGasFee != rhs.delegationCreationBaseGasFee {return false}
    if lhs.allowListExpirationHeight != rhs.allowListExpirationHeight {return false}
    if lhs.btcActivationHeight != rhs.btcActivationHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_HeightVersionPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeightVersionPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_height"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.startHeight) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.startHeight, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_HeightVersionPair, rhs: Babylon_Btcstaking_V1_HeightVersionPair) -> Bool {
    if lhs.startHeight != rhs.startHeight {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_HeightToVersionMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeightToVersionMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pairs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pairs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_HeightToVersionMap, rhs: Babylon_Btcstaking_V1_HeightToVersionMap) -> Bool {
    if lhs.pairs != rhs.pairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_StoredParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoredParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_StoredParams, rhs: Babylon_Btcstaking_V1_StoredParams) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
