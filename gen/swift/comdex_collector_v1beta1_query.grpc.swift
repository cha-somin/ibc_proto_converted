//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: comdex/collector/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Comdex_Collector_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Comdex_Collector_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Comdex_Collector_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryParamsRequest, Comdex_Collector_V1beta1_QueryParamsResponse>

  func queryCollectorLookupByApp(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>

  func queryCollectorLookupByAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>

  func queryCollectorDataByAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>

  func queryAuctionMappingForAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>

  func queryNetFeeCollectedForAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>
}

extension Comdex_Collector_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "comdex.collector.v1beta1.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Comdex_Collector_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryParamsRequest, Comdex_Collector_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to QueryCollectorLookupByApp
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryCollectorLookupByApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryCollectorLookupByApp(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse> {
    return self.makeUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByApp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorLookupByAppInterceptors() ?? []
    )
  }

  /// Unary call to QueryCollectorLookupByAppAndAsset
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryCollectorLookupByAppAndAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryCollectorLookupByAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse> {
    return self.makeUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorLookupByAppAndAssetInterceptors() ?? []
    )
  }

  /// Unary call to QueryCollectorDataByAppAndAsset
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryCollectorDataByAppAndAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryCollectorDataByAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse> {
    return self.makeUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorDataByAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorDataByAppAndAssetInterceptors() ?? []
    )
  }

  /// Unary call to QueryAuctionMappingForAppAndAsset
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAuctionMappingForAppAndAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAuctionMappingForAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse> {
    return self.makeUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryAuctionMappingForAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAuctionMappingForAppAndAssetInterceptors() ?? []
    )
  }

  /// Unary call to QueryNetFeeCollectedForAppAndAsset
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNetFeeCollectedForAppAndAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNetFeeCollectedForAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse> {
    return self.makeUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryNetFeeCollectedForAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNetFeeCollectedForAppAndAssetInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Comdex_Collector_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Comdex_Collector_V1beta1_QueryNIOClient")
internal final class Comdex_Collector_V1beta1_QueryClient: Comdex_Collector_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the comdex.collector.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Comdex_Collector_V1beta1_QueryNIOClient: Comdex_Collector_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the comdex.collector.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Comdex_Collector_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Comdex_Collector_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryParamsRequest, Comdex_Collector_V1beta1_QueryParamsResponse>

  func makeQueryCollectorLookupByAppCall(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>

  func makeQueryCollectorLookupByAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>

  func makeQueryCollectorDataByAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>

  func makeQueryAuctionMappingForAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>

  func makeQueryNetFeeCollectedForAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Collector_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Comdex_Collector_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Comdex_Collector_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryParamsRequest, Comdex_Collector_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeQueryCollectorLookupByAppCall(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByApp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorLookupByAppInterceptors() ?? []
    )
  }

  internal func makeQueryCollectorLookupByAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorLookupByAppAndAssetInterceptors() ?? []
    )
  }

  internal func makeQueryCollectorDataByAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorDataByAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorDataByAppAndAssetInterceptors() ?? []
    )
  }

  internal func makeQueryAuctionMappingForAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryAuctionMappingForAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAuctionMappingForAppAndAssetInterceptors() ?? []
    )
  }

  internal func makeQueryNetFeeCollectedForAppAndAssetCall(
    _ request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryNetFeeCollectedForAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNetFeeCollectedForAppAndAssetInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Collector_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Comdex_Collector_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Collector_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func queryCollectorLookupByApp(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByApp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorLookupByAppInterceptors() ?? []
    )
  }

  internal func queryCollectorLookupByAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorLookupByAppAndAssetInterceptors() ?? []
    )
  }

  internal func queryCollectorDataByAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorDataByAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCollectorDataByAppAndAssetInterceptors() ?? []
    )
  }

  internal func queryAuctionMappingForAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryAuctionMappingForAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAuctionMappingForAppAndAssetInterceptors() ?? []
    )
  }

  internal func queryNetFeeCollectedForAppAndAsset(
    _ request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryNetFeeCollectedForAppAndAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNetFeeCollectedForAppAndAssetInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Comdex_Collector_V1beta1_QueryAsyncClient: Comdex_Collector_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Comdex_Collector_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Comdex_Collector_V1beta1_QueryParamsRequest, Comdex_Collector_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryCollectorLookupByApp'.
  func makeQueryCollectorLookupByAppInterceptors() -> [ClientInterceptor<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>]

  /// - Returns: Interceptors to use when invoking 'queryCollectorLookupByAppAndAsset'.
  func makeQueryCollectorLookupByAppAndAssetInterceptors() -> [ClientInterceptor<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'queryCollectorDataByAppAndAsset'.
  func makeQueryCollectorDataByAppAndAssetInterceptors() -> [ClientInterceptor<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAuctionMappingForAppAndAsset'.
  func makeQueryAuctionMappingForAppAndAssetInterceptors() -> [ClientInterceptor<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'queryNetFeeCollectedForAppAndAsset'.
  func makeQueryNetFeeCollectedForAppAndAssetInterceptors() -> [ClientInterceptor<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>]
}

internal enum Comdex_Collector_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "comdex.collector.v1beta1.Query",
    methods: [
      Comdex_Collector_V1beta1_QueryClientMetadata.Methods.params,
      Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByApp,
      Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorLookupByAppAndAsset,
      Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryCollectorDataByAppAndAsset,
      Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryAuctionMappingForAppAndAsset,
      Comdex_Collector_V1beta1_QueryClientMetadata.Methods.queryNetFeeCollectedForAppAndAsset,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/comdex.collector.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryCollectorLookupByApp = GRPCMethodDescriptor(
      name: "QueryCollectorLookupByApp",
      path: "/comdex.collector.v1beta1.Query/QueryCollectorLookupByApp",
      type: GRPCCallType.unary
    )

    internal static let queryCollectorLookupByAppAndAsset = GRPCMethodDescriptor(
      name: "QueryCollectorLookupByAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryCollectorLookupByAppAndAsset",
      type: GRPCCallType.unary
    )

    internal static let queryCollectorDataByAppAndAsset = GRPCMethodDescriptor(
      name: "QueryCollectorDataByAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryCollectorDataByAppAndAsset",
      type: GRPCCallType.unary
    )

    internal static let queryAuctionMappingForAppAndAsset = GRPCMethodDescriptor(
      name: "QueryAuctionMappingForAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryAuctionMappingForAppAndAsset",
      type: GRPCCallType.unary
    )

    internal static let queryNetFeeCollectedForAppAndAsset = GRPCMethodDescriptor(
      name: "QueryNetFeeCollectedForAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryNetFeeCollectedForAppAndAsset",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Comdex_Collector_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Comdex_Collector_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Comdex_Collector_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Collector_V1beta1_QueryParamsResponse>

  func queryCollectorLookupByApp(request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>

  func queryCollectorLookupByAppAndAsset(request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>

  func queryCollectorDataByAppAndAsset(request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>

  func queryAuctionMappingForAppAndAsset(request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>

  func queryNetFeeCollectedForAppAndAsset(request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>
}

extension Comdex_Collector_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Comdex_Collector_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "QueryCollectorLookupByApp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>(),
        interceptors: self.interceptors?.makeQueryCollectorLookupByAppInterceptors() ?? [],
        userFunction: self.queryCollectorLookupByApp(request:context:)
      )

    case "QueryCollectorLookupByAppAndAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryCollectorLookupByAppAndAssetInterceptors() ?? [],
        userFunction: self.queryCollectorLookupByAppAndAsset(request:context:)
      )

    case "QueryCollectorDataByAppAndAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryCollectorDataByAppAndAssetInterceptors() ?? [],
        userFunction: self.queryCollectorDataByAppAndAsset(request:context:)
      )

    case "QueryAuctionMappingForAppAndAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryAuctionMappingForAppAndAssetInterceptors() ?? [],
        userFunction: self.queryAuctionMappingForAppAndAsset(request:context:)
      )

    case "QueryNetFeeCollectedForAppAndAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryNetFeeCollectedForAppAndAssetInterceptors() ?? [],
        userFunction: self.queryNetFeeCollectedForAppAndAsset(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Comdex_Collector_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Comdex_Collector_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Comdex_Collector_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Collector_V1beta1_QueryParamsResponse

  @Sendable func queryCollectorLookupByApp(
    request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse

  @Sendable func queryCollectorLookupByAppAndAsset(
    request: Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse

  @Sendable func queryCollectorDataByAppAndAsset(
    request: Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse

  @Sendable func queryAuctionMappingForAppAndAsset(
    request: Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse

  @Sendable func queryNetFeeCollectedForAppAndAsset(
    request: Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Collector_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Comdex_Collector_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Comdex_Collector_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Comdex_Collector_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "QueryCollectorLookupByApp":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>(),
        interceptors: self.interceptors?.makeQueryCollectorLookupByAppInterceptors() ?? [],
        wrapping: self.queryCollectorLookupByApp(request:context:)
      )

    case "QueryCollectorLookupByAppAndAsset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryCollectorLookupByAppAndAssetInterceptors() ?? [],
        wrapping: self.queryCollectorLookupByAppAndAsset(request:context:)
      )

    case "QueryCollectorDataByAppAndAsset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryCollectorDataByAppAndAssetInterceptors() ?? [],
        wrapping: self.queryCollectorDataByAppAndAsset(request:context:)
      )

    case "QueryAuctionMappingForAppAndAsset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryAuctionMappingForAppAndAssetInterceptors() ?? [],
        wrapping: self.queryAuctionMappingForAppAndAsset(request:context:)
      )

    case "QueryNetFeeCollectedForAppAndAsset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>(),
        interceptors: self.interceptors?.makeQueryNetFeeCollectedForAppAndAssetInterceptors() ?? [],
        wrapping: self.queryNetFeeCollectedForAppAndAsset(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Comdex_Collector_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Comdex_Collector_V1beta1_QueryParamsRequest, Comdex_Collector_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryCollectorLookupByApp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryCollectorLookupByAppInterceptors() -> [ServerInterceptor<Comdex_Collector_V1beta1_QueryCollectorLookupByAppRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppResponse>]

  /// - Returns: Interceptors to use when handling 'queryCollectorLookupByAppAndAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryCollectorLookupByAppAndAssetInterceptors() -> [ServerInterceptor<Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorLookupByAppAndAssetResponse>]

  /// - Returns: Interceptors to use when handling 'queryCollectorDataByAppAndAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryCollectorDataByAppAndAssetInterceptors() -> [ServerInterceptor<Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetRequest, Comdex_Collector_V1beta1_QueryCollectorDataByAppAndAssetResponse>]

  /// - Returns: Interceptors to use when handling 'queryAuctionMappingForAppAndAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAuctionMappingForAppAndAssetInterceptors() -> [ServerInterceptor<Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryAuctionMappingForAppAndAssetResponse>]

  /// - Returns: Interceptors to use when handling 'queryNetFeeCollectedForAppAndAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNetFeeCollectedForAppAndAssetInterceptors() -> [ServerInterceptor<Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetRequest, Comdex_Collector_V1beta1_QueryNetFeeCollectedForAppAndAssetResponse>]
}

internal enum Comdex_Collector_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "comdex.collector.v1beta1.Query",
    methods: [
      Comdex_Collector_V1beta1_QueryServerMetadata.Methods.params,
      Comdex_Collector_V1beta1_QueryServerMetadata.Methods.queryCollectorLookupByApp,
      Comdex_Collector_V1beta1_QueryServerMetadata.Methods.queryCollectorLookupByAppAndAsset,
      Comdex_Collector_V1beta1_QueryServerMetadata.Methods.queryCollectorDataByAppAndAsset,
      Comdex_Collector_V1beta1_QueryServerMetadata.Methods.queryAuctionMappingForAppAndAsset,
      Comdex_Collector_V1beta1_QueryServerMetadata.Methods.queryNetFeeCollectedForAppAndAsset,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/comdex.collector.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryCollectorLookupByApp = GRPCMethodDescriptor(
      name: "QueryCollectorLookupByApp",
      path: "/comdex.collector.v1beta1.Query/QueryCollectorLookupByApp",
      type: GRPCCallType.unary
    )

    internal static let queryCollectorLookupByAppAndAsset = GRPCMethodDescriptor(
      name: "QueryCollectorLookupByAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryCollectorLookupByAppAndAsset",
      type: GRPCCallType.unary
    )

    internal static let queryCollectorDataByAppAndAsset = GRPCMethodDescriptor(
      name: "QueryCollectorDataByAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryCollectorDataByAppAndAsset",
      type: GRPCCallType.unary
    )

    internal static let queryAuctionMappingForAppAndAsset = GRPCMethodDescriptor(
      name: "QueryAuctionMappingForAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryAuctionMappingForAppAndAsset",
      type: GRPCCallType.unary
    )

    internal static let queryNetFeeCollectedForAppAndAsset = GRPCMethodDescriptor(
      name: "QueryNetFeeCollectedForAppAndAsset",
      path: "/comdex.collector.v1beta1.Query/QueryNetFeeCollectedForAppAndAsset",
      type: GRPCCallType.unary
    )
  }
}
