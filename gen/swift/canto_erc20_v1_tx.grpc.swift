//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: canto/erc20/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the erc20 Msg service.
///
/// Usage: instantiate `Canto_Erc20_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Canto_Erc20_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? { get }

  func convertCoin(
    _ request: Canto_Erc20_V1_MsgConvertCoin,
    callOptions: CallOptions?
  ) -> UnaryCall<Canto_Erc20_V1_MsgConvertCoin, Canto_Erc20_V1_MsgConvertCoinResponse>

  func convertERC20(
    _ request: Canto_Erc20_V1_MsgConvertERC20,
    callOptions: CallOptions?
  ) -> UnaryCall<Canto_Erc20_V1_MsgConvertERC20, Canto_Erc20_V1_MsgConvertERC20Response>
}

extension Canto_Erc20_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "canto.erc20.v1.Msg"
  }

  /// ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
  /// that is registered on the token mapping.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConvertCoin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func convertCoin(
    _ request: Canto_Erc20_V1_MsgConvertCoin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Canto_Erc20_V1_MsgConvertCoin, Canto_Erc20_V1_MsgConvertCoinResponse> {
    return self.makeUnaryCall(
      path: Canto_Erc20_V1_MsgClientMetadata.Methods.convertCoin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinInterceptors() ?? []
    )
  }

  /// ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  /// contract that is registered on the token mapping.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConvertERC20.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func convertERC20(
    _ request: Canto_Erc20_V1_MsgConvertERC20,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Canto_Erc20_V1_MsgConvertERC20, Canto_Erc20_V1_MsgConvertERC20Response> {
    return self.makeUnaryCall(
      path: Canto_Erc20_V1_MsgClientMetadata.Methods.convertERC20.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertERC20Interceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Canto_Erc20_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Canto_Erc20_V1_MsgNIOClient")
internal final class Canto_Erc20_V1_MsgClient: Canto_Erc20_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the canto.erc20.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Canto_Erc20_V1_MsgNIOClient: Canto_Erc20_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the canto.erc20.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the erc20 Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Canto_Erc20_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeConvertCoinCall(
    _ request: Canto_Erc20_V1_MsgConvertCoin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Canto_Erc20_V1_MsgConvertCoin, Canto_Erc20_V1_MsgConvertCoinResponse>

  func makeConvertErc20Call(
    _ request: Canto_Erc20_V1_MsgConvertERC20,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Canto_Erc20_V1_MsgConvertERC20, Canto_Erc20_V1_MsgConvertERC20Response>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Canto_Erc20_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Canto_Erc20_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeConvertCoinCall(
    _ request: Canto_Erc20_V1_MsgConvertCoin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Canto_Erc20_V1_MsgConvertCoin, Canto_Erc20_V1_MsgConvertCoinResponse> {
    return self.makeAsyncUnaryCall(
      path: Canto_Erc20_V1_MsgClientMetadata.Methods.convertCoin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinInterceptors() ?? []
    )
  }

  internal func makeConvertErc20Call(
    _ request: Canto_Erc20_V1_MsgConvertERC20,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Canto_Erc20_V1_MsgConvertERC20, Canto_Erc20_V1_MsgConvertERC20Response> {
    return self.makeAsyncUnaryCall(
      path: Canto_Erc20_V1_MsgClientMetadata.Methods.convertERC20.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertERC20Interceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Canto_Erc20_V1_MsgAsyncClientProtocol {
  internal func convertCoin(
    _ request: Canto_Erc20_V1_MsgConvertCoin,
    callOptions: CallOptions? = nil
  ) async throws -> Canto_Erc20_V1_MsgConvertCoinResponse {
    return try await self.performAsyncUnaryCall(
      path: Canto_Erc20_V1_MsgClientMetadata.Methods.convertCoin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinInterceptors() ?? []
    )
  }

  internal func convertERC20(
    _ request: Canto_Erc20_V1_MsgConvertERC20,
    callOptions: CallOptions? = nil
  ) async throws -> Canto_Erc20_V1_MsgConvertERC20Response {
    return try await self.performAsyncUnaryCall(
      path: Canto_Erc20_V1_MsgClientMetadata.Methods.convertERC20.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertERC20Interceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Canto_Erc20_V1_MsgAsyncClient: Canto_Erc20_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Canto_Erc20_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'convertCoin'.
  func makeConvertCoinInterceptors() -> [ClientInterceptor<Canto_Erc20_V1_MsgConvertCoin, Canto_Erc20_V1_MsgConvertCoinResponse>]

  /// - Returns: Interceptors to use when invoking 'convertERC20'.
  func makeConvertERC20Interceptors() -> [ClientInterceptor<Canto_Erc20_V1_MsgConvertERC20, Canto_Erc20_V1_MsgConvertERC20Response>]
}

internal enum Canto_Erc20_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "canto.erc20.v1.Msg",
    methods: [
      Canto_Erc20_V1_MsgClientMetadata.Methods.convertCoin,
      Canto_Erc20_V1_MsgClientMetadata.Methods.convertERC20,
    ]
  )

  internal enum Methods {
    internal static let convertCoin = GRPCMethodDescriptor(
      name: "ConvertCoin",
      path: "/canto.erc20.v1.Msg/ConvertCoin",
      type: GRPCCallType.unary
    )

    internal static let convertERC20 = GRPCMethodDescriptor(
      name: "ConvertERC20",
      path: "/canto.erc20.v1.Msg/ConvertERC20",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the erc20 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Canto_Erc20_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Canto_Erc20_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
  /// that is registered on the token mapping.
  func convertCoin(request: Canto_Erc20_V1_MsgConvertCoin, context: StatusOnlyCallContext) -> EventLoopFuture<Canto_Erc20_V1_MsgConvertCoinResponse>

  /// ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  /// contract that is registered on the token mapping.
  func convertERC20(request: Canto_Erc20_V1_MsgConvertERC20, context: StatusOnlyCallContext) -> EventLoopFuture<Canto_Erc20_V1_MsgConvertERC20Response>
}

extension Canto_Erc20_V1_MsgProvider {
  internal var serviceName: Substring {
    return Canto_Erc20_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ConvertCoin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Canto_Erc20_V1_MsgConvertCoin>(),
        responseSerializer: ProtobufSerializer<Canto_Erc20_V1_MsgConvertCoinResponse>(),
        interceptors: self.interceptors?.makeConvertCoinInterceptors() ?? [],
        userFunction: self.convertCoin(request:context:)
      )

    case "ConvertERC20":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Canto_Erc20_V1_MsgConvertERC20>(),
        responseSerializer: ProtobufSerializer<Canto_Erc20_V1_MsgConvertERC20Response>(),
        interceptors: self.interceptors?.makeConvertERC20Interceptors() ?? [],
        userFunction: self.convertERC20(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the erc20 Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Canto_Erc20_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Canto_Erc20_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
  /// that is registered on the token mapping.
  @Sendable func convertCoin(
    request: Canto_Erc20_V1_MsgConvertCoin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Canto_Erc20_V1_MsgConvertCoinResponse

  /// ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  /// contract that is registered on the token mapping.
  @Sendable func convertERC20(
    request: Canto_Erc20_V1_MsgConvertERC20,
    context: GRPCAsyncServerCallContext
  ) async throws -> Canto_Erc20_V1_MsgConvertERC20Response
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Canto_Erc20_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Canto_Erc20_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Canto_Erc20_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Canto_Erc20_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ConvertCoin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Canto_Erc20_V1_MsgConvertCoin>(),
        responseSerializer: ProtobufSerializer<Canto_Erc20_V1_MsgConvertCoinResponse>(),
        interceptors: self.interceptors?.makeConvertCoinInterceptors() ?? [],
        wrapping: self.convertCoin(request:context:)
      )

    case "ConvertERC20":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Canto_Erc20_V1_MsgConvertERC20>(),
        responseSerializer: ProtobufSerializer<Canto_Erc20_V1_MsgConvertERC20Response>(),
        interceptors: self.interceptors?.makeConvertERC20Interceptors() ?? [],
        wrapping: self.convertERC20(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Canto_Erc20_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'convertCoin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConvertCoinInterceptors() -> [ServerInterceptor<Canto_Erc20_V1_MsgConvertCoin, Canto_Erc20_V1_MsgConvertCoinResponse>]

  /// - Returns: Interceptors to use when handling 'convertERC20'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConvertERC20Interceptors() -> [ServerInterceptor<Canto_Erc20_V1_MsgConvertERC20, Canto_Erc20_V1_MsgConvertERC20Response>]
}

internal enum Canto_Erc20_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "canto.erc20.v1.Msg",
    methods: [
      Canto_Erc20_V1_MsgServerMetadata.Methods.convertCoin,
      Canto_Erc20_V1_MsgServerMetadata.Methods.convertERC20,
    ]
  )

  internal enum Methods {
    internal static let convertCoin = GRPCMethodDescriptor(
      name: "ConvertCoin",
      path: "/canto.erc20.v1.Msg/ConvertCoin",
      type: GRPCCallType.unary
    )

    internal static let convertERC20 = GRPCMethodDescriptor(
      name: "ConvertERC20",
      path: "/canto.erc20.v1.Msg/ConvertERC20",
      type: GRPCCallType.unary
    )
  }
}
