//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: regen/ecocredit/v1alpha2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg is the regen.ecocredit.v1alpha2 Query service.
///
/// Usage: instantiate `Regen_Ecocredit_V1alpha2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Regen_Ecocredit_V1alpha2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func classes(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryClassesRequest, Regen_Ecocredit_V1alpha2_QueryClassesResponse>

  func classInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>

  func projects(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectsRequest, Regen_Ecocredit_V1alpha2_QueryProjectsResponse>

  func projectInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>

  func batches(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchesRequest, Regen_Ecocredit_V1alpha2_QueryBatchesResponse>

  func batchInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>

  func balance(
    _ request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBalanceRequest, Regen_Ecocredit_V1alpha2_QueryBalanceResponse>

  func supply(
    _ request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySupplyRequest, Regen_Ecocredit_V1alpha2_QuerySupplyResponse>

  func creditTypes(
    _ request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>

  func params(
    _ request: Regen_Ecocredit_V1alpha2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryParamsRequest, Regen_Ecocredit_V1alpha2_QueryParamsResponse>

  func sellOrder(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>

  func sellOrders(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>

  func sellOrdersByBatchDenom(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>

  func sellOrdersByAddress(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>

  func buyOrder(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>

  func buyOrders(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>

  func buyOrdersByAddress(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>

  func allowedAskDenoms(
    _ request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>

  func basket(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketRequest, Regen_Ecocredit_V1alpha2_QueryBasketResponse>

  func baskets(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketsRequest, Regen_Ecocredit_V1alpha2_QueryBasketsResponse>

  func basketCredits(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>
}

extension Regen_Ecocredit_V1alpha2_QueryClientProtocol {
  internal var serviceName: String {
    return "regen.ecocredit.v1alpha2.Query"
  }

  /// Classes queries for all credit classes with pagination.
  ///
  /// - Parameters:
  ///   - request: Request to send to Classes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classes(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryClassesRequest, Regen_Ecocredit_V1alpha2_QueryClassesResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }

  /// ClassInfo queries for information on a credit class.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClassInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, Regen_Ecocredit_V1alpha2_QueryClassInfoResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInfoInterceptors() ?? []
    )
  }

  /// Projects queries for all projects within a class with pagination.
  ///
  /// - Parameters:
  ///   - request: Request to send to Projects.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func projects(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectsRequest, Regen_Ecocredit_V1alpha2_QueryProjectsResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectsInterceptors() ?? []
    )
  }

  /// ClassInfo queries for information on a project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProjectInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func projectInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projectInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectInfoInterceptors() ?? []
    )
  }

  /// Batches queries for all batches in the given project with pagination.
  ///
  /// - Parameters:
  ///   - request: Request to send to Batches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batches(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchesRequest, Regen_Ecocredit_V1alpha2_QueryBatchesResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchesInterceptors() ?? []
    )
  }

  /// BatchInfo queries for information on a credit batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batchInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchInfoInterceptors() ?? []
    )
  }

  /// Balance queries the balance (both tradable and retired) of a given credit
  /// batch for a given account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBalanceRequest, Regen_Ecocredit_V1alpha2_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// Supply queries the tradable and retired supply of a credit batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySupplyRequest, Regen_Ecocredit_V1alpha2_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// CreditTypes returns the list of allowed types that credit classes can have.
  /// See Types/CreditType for more details.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreditTypes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func creditTypes(
    _ request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.creditTypes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreditTypesInterceptors() ?? []
    )
  }

  /// Params queries the ecocredit module parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Regen_Ecocredit_V1alpha2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryParamsRequest, Regen_Ecocredit_V1alpha2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// SellOrder queries a sell order by its ID
  ///
  /// - Parameters:
  ///   - request: Request to send to SellOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellOrder(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, Regen_Ecocredit_V1alpha2_QuerySellOrderResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrderInterceptors() ?? []
    )
  }

  /// SellOrders queries a paginated list of all sell orders
  ///
  /// - Parameters:
  ///   - request: Request to send to SellOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellOrders(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersInterceptors() ?? []
    )
  }

  /// SellOrdersByDenom queries a paginated list of all sell orders of a specific ecocredit denom
  ///
  /// - Parameters:
  ///   - request: Request to send to SellOrdersByBatchDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellOrdersByBatchDenom(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByBatchDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersByBatchDenomInterceptors() ?? []
    )
  }

  /// SellOrdersByAddress queries a paginated list of all sell orders from a specific address
  ///
  /// - Parameters:
  ///   - request: Request to send to SellOrdersByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellOrdersByAddress(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersByAddressInterceptors() ?? []
    )
  }

  /// BuyOrder queries a buy order by its id
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyOrder(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrderInterceptors() ?? []
    )
  }

  /// BuyOrders queries a paginated list of all buy orders
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyOrders(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrdersInterceptors() ?? []
    )
  }

  /// BuyOrdersByAddress queries a paginated list of buy orders by creator address
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyOrdersByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyOrdersByAddress(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrdersByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrdersByAddressInterceptors() ?? []
    )
  }

  /// AllowedAskDenoms queries all denoms allowed to be set in the AskPrice of a sell order
  ///
  /// - Parameters:
  ///   - request: Request to send to AllowedAskDenoms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allowedAskDenoms(
    _ request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.allowedAskDenoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowedAskDenomsInterceptors() ?? []
    )
  }

  /// Basket queries one basket by denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to Basket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func basket(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketRequest, Regen_Ecocredit_V1alpha2_QueryBasketResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketInterceptors() ?? []
    )
  }

  /// Baskets lists all baskets in the ecocredit module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Baskets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func baskets(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketsRequest, Regen_Ecocredit_V1alpha2_QueryBasketsResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.baskets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketsInterceptors() ?? []
    )
  }

  /// BasketCredits lists all ecocredits inside a given basket.
  ///
  /// - Parameters:
  ///   - request: Request to send to BasketCredits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func basketCredits(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basketCredits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketCreditsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Regen_Ecocredit_V1alpha2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Regen_Ecocredit_V1alpha2_QueryNIOClient")
internal final class Regen_Ecocredit_V1alpha2_QueryClient: Regen_Ecocredit_V1alpha2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the regen.ecocredit.v1alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Regen_Ecocredit_V1alpha2_QueryNIOClient: Regen_Ecocredit_V1alpha2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the regen.ecocredit.v1alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg is the regen.ecocredit.v1alpha2 Query service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Regen_Ecocredit_V1alpha2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func makeClassesCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryClassesRequest, Regen_Ecocredit_V1alpha2_QueryClassesResponse>

  func makeClassInfoCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>

  func makeProjectsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectsRequest, Regen_Ecocredit_V1alpha2_QueryProjectsResponse>

  func makeProjectInfoCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>

  func makeBatchesCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchesRequest, Regen_Ecocredit_V1alpha2_QueryBatchesResponse>

  func makeBatchInfoCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>

  func makeBalanceCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBalanceRequest, Regen_Ecocredit_V1alpha2_QueryBalanceResponse>

  func makeSupplyCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySupplyRequest, Regen_Ecocredit_V1alpha2_QuerySupplyResponse>

  func makeCreditTypesCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>

  func makeParamsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryParamsRequest, Regen_Ecocredit_V1alpha2_QueryParamsResponse>

  func makeSellOrderCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>

  func makeSellOrdersCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>

  func makeSellOrdersByBatchDenomCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>

  func makeSellOrdersByAddressCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>

  func makeBuyOrderCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>

  func makeBuyOrdersCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>

  func makeBuyOrdersByAddressCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>

  func makeAllowedAskDenomsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>

  func makeBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketRequest, Regen_Ecocredit_V1alpha2_QueryBasketResponse>

  func makeBasketsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketsRequest, Regen_Ecocredit_V1alpha2_QueryBasketsResponse>

  func makeBasketCreditsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Ecocredit_V1alpha2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Regen_Ecocredit_V1alpha2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeClassesCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryClassesRequest, Regen_Ecocredit_V1alpha2_QueryClassesResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }

  internal func makeClassInfoCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, Regen_Ecocredit_V1alpha2_QueryClassInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInfoInterceptors() ?? []
    )
  }

  internal func makeProjectsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectsRequest, Regen_Ecocredit_V1alpha2_QueryProjectsResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectsInterceptors() ?? []
    )
  }

  internal func makeProjectInfoCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projectInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectInfoInterceptors() ?? []
    )
  }

  internal func makeBatchesCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchesRequest, Regen_Ecocredit_V1alpha2_QueryBatchesResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchesInterceptors() ?? []
    )
  }

  internal func makeBatchInfoCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batchInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchInfoInterceptors() ?? []
    )
  }

  internal func makeBalanceCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBalanceRequest, Regen_Ecocredit_V1alpha2_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func makeSupplyCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySupplyRequest, Regen_Ecocredit_V1alpha2_QuerySupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func makeCreditTypesCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.creditTypes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreditTypesInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryParamsRequest, Regen_Ecocredit_V1alpha2_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeSellOrderCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, Regen_Ecocredit_V1alpha2_QuerySellOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrderInterceptors() ?? []
    )
  }

  internal func makeSellOrdersCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersInterceptors() ?? []
    )
  }

  internal func makeSellOrdersByBatchDenomCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByBatchDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersByBatchDenomInterceptors() ?? []
    )
  }

  internal func makeSellOrdersByAddressCall(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersByAddressInterceptors() ?? []
    )
  }

  internal func makeBuyOrderCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrderInterceptors() ?? []
    )
  }

  internal func makeBuyOrdersCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrdersInterceptors() ?? []
    )
  }

  internal func makeBuyOrdersByAddressCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrdersByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrdersByAddressInterceptors() ?? []
    )
  }

  internal func makeAllowedAskDenomsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.allowedAskDenoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowedAskDenomsInterceptors() ?? []
    )
  }

  internal func makeBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketRequest, Regen_Ecocredit_V1alpha2_QueryBasketResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketInterceptors() ?? []
    )
  }

  internal func makeBasketsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketsRequest, Regen_Ecocredit_V1alpha2_QueryBasketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.baskets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketsInterceptors() ?? []
    )
  }

  internal func makeBasketCreditsCall(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basketCredits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketCreditsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Ecocredit_V1alpha2_QueryAsyncClientProtocol {
  internal func classes(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryClassesResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }

  internal func classInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryClassInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInfoInterceptors() ?? []
    )
  }

  internal func projects(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryProjectsResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projects.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectsInterceptors() ?? []
    )
  }

  internal func projectInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projectInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectInfoInterceptors() ?? []
    )
  }

  internal func batches(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBatchesResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchesInterceptors() ?? []
    )
  }

  internal func batchInfo(
    _ request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batchInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchInfoInterceptors() ?? []
    )
  }

  internal func balance(
    _ request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func supply(
    _ request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func creditTypes(
    _ request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.creditTypes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreditTypesInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Regen_Ecocredit_V1alpha2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func sellOrder(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrderInterceptors() ?? []
    )
  }

  internal func sellOrders(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersInterceptors() ?? []
    )
  }

  internal func sellOrdersByBatchDenom(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByBatchDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersByBatchDenomInterceptors() ?? []
    )
  }

  internal func sellOrdersByAddress(
    _ request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellOrdersByAddressInterceptors() ?? []
    )
  }

  internal func buyOrder(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrderInterceptors() ?? []
    )
  }

  internal func buyOrders(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrdersInterceptors() ?? []
    )
  }

  internal func buyOrdersByAddress(
    _ request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrdersByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyOrdersByAddressInterceptors() ?? []
    )
  }

  internal func allowedAskDenoms(
    _ request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.allowedAskDenoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowedAskDenomsInterceptors() ?? []
    )
  }

  internal func basket(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBasketResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketInterceptors() ?? []
    )
  }

  internal func baskets(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBasketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.baskets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketsInterceptors() ?? []
    )
  }

  internal func basketCredits(
    _ request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basketCredits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBasketCreditsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Regen_Ecocredit_V1alpha2_QueryAsyncClient: Regen_Ecocredit_V1alpha2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Regen_Ecocredit_V1alpha2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'classes'.
  func makeClassesInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryClassesRequest, Regen_Ecocredit_V1alpha2_QueryClassesResponse>]

  /// - Returns: Interceptors to use when invoking 'classInfo'.
  func makeClassInfoInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'projects'.
  func makeProjectsInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryProjectsRequest, Regen_Ecocredit_V1alpha2_QueryProjectsResponse>]

  /// - Returns: Interceptors to use when invoking 'projectInfo'.
  func makeProjectInfoInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'batches'.
  func makeBatchesInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBatchesRequest, Regen_Ecocredit_V1alpha2_QueryBatchesResponse>]

  /// - Returns: Interceptors to use when invoking 'batchInfo'.
  func makeBatchInfoInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBalanceRequest, Regen_Ecocredit_V1alpha2_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QuerySupplyRequest, Regen_Ecocredit_V1alpha2_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'creditTypes'.
  func makeCreditTypesInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryParamsRequest, Regen_Ecocredit_V1alpha2_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'sellOrder'.
  func makeSellOrderInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'sellOrders'.
  func makeSellOrdersInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'sellOrdersByBatchDenom'.
  func makeSellOrdersByBatchDenomInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'sellOrdersByAddress'.
  func makeSellOrdersByAddressInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'buyOrder'.
  func makeBuyOrderInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'buyOrders'.
  func makeBuyOrdersInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'buyOrdersByAddress'.
  func makeBuyOrdersByAddressInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'allowedAskDenoms'.
  func makeAllowedAskDenomsInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>]

  /// - Returns: Interceptors to use when invoking 'basket'.
  func makeBasketInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBasketRequest, Regen_Ecocredit_V1alpha2_QueryBasketResponse>]

  /// - Returns: Interceptors to use when invoking 'baskets'.
  func makeBasketsInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBasketsRequest, Regen_Ecocredit_V1alpha2_QueryBasketsResponse>]

  /// - Returns: Interceptors to use when invoking 'basketCredits'.
  func makeBasketCreditsInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>]
}

internal enum Regen_Ecocredit_V1alpha2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "regen.ecocredit.v1alpha2.Query",
    methods: [
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classes,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.classInfo,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projects,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.projectInfo,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batches,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.batchInfo,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.balance,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.supply,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.creditTypes,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.params,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrder,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrders,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByBatchDenom,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.sellOrdersByAddress,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrder,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrders,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.buyOrdersByAddress,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.allowedAskDenoms,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basket,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.baskets,
      Regen_Ecocredit_V1alpha2_QueryClientMetadata.Methods.basketCredits,
    ]
  )

  internal enum Methods {
    internal static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/regen.ecocredit.v1alpha2.Query/Classes",
      type: GRPCCallType.unary
    )

    internal static let classInfo = GRPCMethodDescriptor(
      name: "ClassInfo",
      path: "/regen.ecocredit.v1alpha2.Query/ClassInfo",
      type: GRPCCallType.unary
    )

    internal static let projects = GRPCMethodDescriptor(
      name: "Projects",
      path: "/regen.ecocredit.v1alpha2.Query/Projects",
      type: GRPCCallType.unary
    )

    internal static let projectInfo = GRPCMethodDescriptor(
      name: "ProjectInfo",
      path: "/regen.ecocredit.v1alpha2.Query/ProjectInfo",
      type: GRPCCallType.unary
    )

    internal static let batches = GRPCMethodDescriptor(
      name: "Batches",
      path: "/regen.ecocredit.v1alpha2.Query/Batches",
      type: GRPCCallType.unary
    )

    internal static let batchInfo = GRPCMethodDescriptor(
      name: "BatchInfo",
      path: "/regen.ecocredit.v1alpha2.Query/BatchInfo",
      type: GRPCCallType.unary
    )

    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/regen.ecocredit.v1alpha2.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/regen.ecocredit.v1alpha2.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let creditTypes = GRPCMethodDescriptor(
      name: "CreditTypes",
      path: "/regen.ecocredit.v1alpha2.Query/CreditTypes",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/regen.ecocredit.v1alpha2.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let sellOrder = GRPCMethodDescriptor(
      name: "SellOrder",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrder",
      type: GRPCCallType.unary
    )

    internal static let sellOrders = GRPCMethodDescriptor(
      name: "SellOrders",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrders",
      type: GRPCCallType.unary
    )

    internal static let sellOrdersByBatchDenom = GRPCMethodDescriptor(
      name: "SellOrdersByBatchDenom",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrdersByBatchDenom",
      type: GRPCCallType.unary
    )

    internal static let sellOrdersByAddress = GRPCMethodDescriptor(
      name: "SellOrdersByAddress",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrdersByAddress",
      type: GRPCCallType.unary
    )

    internal static let buyOrder = GRPCMethodDescriptor(
      name: "BuyOrder",
      path: "/regen.ecocredit.v1alpha2.Query/BuyOrder",
      type: GRPCCallType.unary
    )

    internal static let buyOrders = GRPCMethodDescriptor(
      name: "BuyOrders",
      path: "/regen.ecocredit.v1alpha2.Query/BuyOrders",
      type: GRPCCallType.unary
    )

    internal static let buyOrdersByAddress = GRPCMethodDescriptor(
      name: "BuyOrdersByAddress",
      path: "/regen.ecocredit.v1alpha2.Query/BuyOrdersByAddress",
      type: GRPCCallType.unary
    )

    internal static let allowedAskDenoms = GRPCMethodDescriptor(
      name: "AllowedAskDenoms",
      path: "/regen.ecocredit.v1alpha2.Query/AllowedAskDenoms",
      type: GRPCCallType.unary
    )

    internal static let basket = GRPCMethodDescriptor(
      name: "Basket",
      path: "/regen.ecocredit.v1alpha2.Query/Basket",
      type: GRPCCallType.unary
    )

    internal static let baskets = GRPCMethodDescriptor(
      name: "Baskets",
      path: "/regen.ecocredit.v1alpha2.Query/Baskets",
      type: GRPCCallType.unary
    )

    internal static let basketCredits = GRPCMethodDescriptor(
      name: "BasketCredits",
      path: "/regen.ecocredit.v1alpha2.Query/BasketCredits",
      type: GRPCCallType.unary
    )
  }
}

/// Msg is the regen.ecocredit.v1alpha2 Query service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Regen_Ecocredit_V1alpha2_QueryProvider: CallHandlerProvider {
  var interceptors: Regen_Ecocredit_V1alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// Classes queries for all credit classes with pagination.
  func classes(request: Regen_Ecocredit_V1alpha2_QueryClassesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryClassesResponse>

  /// ClassInfo queries for information on a credit class.
  func classInfo(request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>

  /// Projects queries for all projects within a class with pagination.
  func projects(request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryProjectsResponse>

  /// ClassInfo queries for information on a project.
  func projectInfo(request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>

  /// Batches queries for all batches in the given project with pagination.
  func batches(request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBatchesResponse>

  /// BatchInfo queries for information on a credit batch.
  func batchInfo(request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>

  /// Balance queries the balance (both tradable and retired) of a given credit
  /// batch for a given account.
  func balance(request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBalanceResponse>

  /// Supply queries the tradable and retired supply of a credit batch.
  func supply(request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QuerySupplyResponse>

  /// CreditTypes returns the list of allowed types that credit classes can have.
  /// See Types/CreditType for more details.
  func creditTypes(request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>

  /// Params queries the ecocredit module parameters.
  func params(request: Regen_Ecocredit_V1alpha2_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryParamsResponse>

  /// SellOrder queries a sell order by its ID
  func sellOrder(request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>

  /// SellOrders queries a paginated list of all sell orders
  func sellOrders(request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>

  /// SellOrdersByDenom queries a paginated list of all sell orders of a specific ecocredit denom
  func sellOrdersByBatchDenom(request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>

  /// SellOrdersByAddress queries a paginated list of all sell orders from a specific address
  func sellOrdersByAddress(request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>

  /// BuyOrder queries a buy order by its id
  func buyOrder(request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>

  /// BuyOrders queries a paginated list of all buy orders
  func buyOrders(request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>

  /// BuyOrdersByAddress queries a paginated list of buy orders by creator address
  func buyOrdersByAddress(request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>

  /// AllowedAskDenoms queries all denoms allowed to be set in the AskPrice of a sell order
  func allowedAskDenoms(request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>

  /// Basket queries one basket by denom.
  func basket(request: Regen_Ecocredit_V1alpha2_QueryBasketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBasketResponse>

  /// Baskets lists all baskets in the ecocredit module.
  func baskets(request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBasketsResponse>

  /// BasketCredits lists all ecocredits inside a given basket.
  func basketCredits(request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>
}

extension Regen_Ecocredit_V1alpha2_QueryProvider {
  internal var serviceName: Substring {
    return Regen_Ecocredit_V1alpha2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Classes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryClassesRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryClassesResponse>(),
        interceptors: self.interceptors?.makeClassesInterceptors() ?? [],
        userFunction: self.classes(request:context:)
      )

    case "ClassInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>(),
        interceptors: self.interceptors?.makeClassInfoInterceptors() ?? [],
        userFunction: self.classInfo(request:context:)
      )

    case "Projects":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryProjectsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryProjectsResponse>(),
        interceptors: self.interceptors?.makeProjectsInterceptors() ?? [],
        userFunction: self.projects(request:context:)
      )

    case "ProjectInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>(),
        interceptors: self.interceptors?.makeProjectInfoInterceptors() ?? [],
        userFunction: self.projectInfo(request:context:)
      )

    case "Batches":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBatchesRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBatchesResponse>(),
        interceptors: self.interceptors?.makeBatchesInterceptors() ?? [],
        userFunction: self.batches(request:context:)
      )

    case "BatchInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>(),
        interceptors: self.interceptors?.makeBatchInfoInterceptors() ?? [],
        userFunction: self.batchInfo(request:context:)
      )

    case "Balance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        userFunction: self.balance(request:context:)
      )

    case "Supply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        userFunction: self.supply(request:context:)
      )

    case "CreditTypes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>(),
        interceptors: self.interceptors?.makeCreditTypesInterceptors() ?? [],
        userFunction: self.creditTypes(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "SellOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>(),
        interceptors: self.interceptors?.makeSellOrderInterceptors() ?? [],
        userFunction: self.sellOrder(request:context:)
      )

    case "SellOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>(),
        interceptors: self.interceptors?.makeSellOrdersInterceptors() ?? [],
        userFunction: self.sellOrders(request:context:)
      )

    case "SellOrdersByBatchDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>(),
        interceptors: self.interceptors?.makeSellOrdersByBatchDenomInterceptors() ?? [],
        userFunction: self.sellOrdersByBatchDenom(request:context:)
      )

    case "SellOrdersByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>(),
        interceptors: self.interceptors?.makeSellOrdersByAddressInterceptors() ?? [],
        userFunction: self.sellOrdersByAddress(request:context:)
      )

    case "BuyOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>(),
        interceptors: self.interceptors?.makeBuyOrderInterceptors() ?? [],
        userFunction: self.buyOrder(request:context:)
      )

    case "BuyOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>(),
        interceptors: self.interceptors?.makeBuyOrdersInterceptors() ?? [],
        userFunction: self.buyOrders(request:context:)
      )

    case "BuyOrdersByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>(),
        interceptors: self.interceptors?.makeBuyOrdersByAddressInterceptors() ?? [],
        userFunction: self.buyOrdersByAddress(request:context:)
      )

    case "AllowedAskDenoms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>(),
        interceptors: self.interceptors?.makeAllowedAskDenomsInterceptors() ?? [],
        userFunction: self.allowedAskDenoms(request:context:)
      )

    case "Basket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBasketRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBasketResponse>(),
        interceptors: self.interceptors?.makeBasketInterceptors() ?? [],
        userFunction: self.basket(request:context:)
      )

    case "Baskets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBasketsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBasketsResponse>(),
        interceptors: self.interceptors?.makeBasketsInterceptors() ?? [],
        userFunction: self.baskets(request:context:)
      )

    case "BasketCredits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>(),
        interceptors: self.interceptors?.makeBasketCreditsInterceptors() ?? [],
        userFunction: self.basketCredits(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg is the regen.ecocredit.v1alpha2 Query service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Regen_Ecocredit_V1alpha2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Regen_Ecocredit_V1alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// Classes queries for all credit classes with pagination.
  @Sendable func classes(
    request: Regen_Ecocredit_V1alpha2_QueryClassesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryClassesResponse

  /// ClassInfo queries for information on a credit class.
  @Sendable func classInfo(
    request: Regen_Ecocredit_V1alpha2_QueryClassInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryClassInfoResponse

  /// Projects queries for all projects within a class with pagination.
  @Sendable func projects(
    request: Regen_Ecocredit_V1alpha2_QueryProjectsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryProjectsResponse

  /// ClassInfo queries for information on a project.
  @Sendable func projectInfo(
    request: Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse

  /// Batches queries for all batches in the given project with pagination.
  @Sendable func batches(
    request: Regen_Ecocredit_V1alpha2_QueryBatchesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBatchesResponse

  /// BatchInfo queries for information on a credit batch.
  @Sendable func batchInfo(
    request: Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse

  /// Balance queries the balance (both tradable and retired) of a given credit
  /// batch for a given account.
  @Sendable func balance(
    request: Regen_Ecocredit_V1alpha2_QueryBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBalanceResponse

  /// Supply queries the tradable and retired supply of a credit batch.
  @Sendable func supply(
    request: Regen_Ecocredit_V1alpha2_QuerySupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySupplyResponse

  /// CreditTypes returns the list of allowed types that credit classes can have.
  /// See Types/CreditType for more details.
  @Sendable func creditTypes(
    request: Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse

  /// Params queries the ecocredit module parameters.
  @Sendable func params(
    request: Regen_Ecocredit_V1alpha2_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryParamsResponse

  /// SellOrder queries a sell order by its ID
  @Sendable func sellOrder(
    request: Regen_Ecocredit_V1alpha2_QuerySellOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrderResponse

  /// SellOrders queries a paginated list of all sell orders
  @Sendable func sellOrders(
    request: Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse

  /// SellOrdersByDenom queries a paginated list of all sell orders of a specific ecocredit denom
  @Sendable func sellOrdersByBatchDenom(
    request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse

  /// SellOrdersByAddress queries a paginated list of all sell orders from a specific address
  @Sendable func sellOrdersByAddress(
    request: Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse

  /// BuyOrder queries a buy order by its id
  @Sendable func buyOrder(
    request: Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse

  /// BuyOrders queries a paginated list of all buy orders
  @Sendable func buyOrders(
    request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse

  /// BuyOrdersByAddress queries a paginated list of buy orders by creator address
  @Sendable func buyOrdersByAddress(
    request: Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse

  /// AllowedAskDenoms queries all denoms allowed to be set in the AskPrice of a sell order
  @Sendable func allowedAskDenoms(
    request: Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse

  /// Basket queries one basket by denom.
  @Sendable func basket(
    request: Regen_Ecocredit_V1alpha2_QueryBasketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBasketResponse

  /// Baskets lists all baskets in the ecocredit module.
  @Sendable func baskets(
    request: Regen_Ecocredit_V1alpha2_QueryBasketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBasketsResponse

  /// BasketCredits lists all ecocredits inside a given basket.
  @Sendable func basketCredits(
    request: Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Ecocredit_V1alpha2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Regen_Ecocredit_V1alpha2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Regen_Ecocredit_V1alpha2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Regen_Ecocredit_V1alpha2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Classes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryClassesRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryClassesResponse>(),
        interceptors: self.interceptors?.makeClassesInterceptors() ?? [],
        wrapping: self.classes(request:context:)
      )

    case "ClassInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>(),
        interceptors: self.interceptors?.makeClassInfoInterceptors() ?? [],
        wrapping: self.classInfo(request:context:)
      )

    case "Projects":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryProjectsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryProjectsResponse>(),
        interceptors: self.interceptors?.makeProjectsInterceptors() ?? [],
        wrapping: self.projects(request:context:)
      )

    case "ProjectInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>(),
        interceptors: self.interceptors?.makeProjectInfoInterceptors() ?? [],
        wrapping: self.projectInfo(request:context:)
      )

    case "Batches":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBatchesRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBatchesResponse>(),
        interceptors: self.interceptors?.makeBatchesInterceptors() ?? [],
        wrapping: self.batches(request:context:)
      )

    case "BatchInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>(),
        interceptors: self.interceptors?.makeBatchInfoInterceptors() ?? [],
        wrapping: self.batchInfo(request:context:)
      )

    case "Balance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        wrapping: self.balance(request:context:)
      )

    case "Supply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        wrapping: self.supply(request:context:)
      )

    case "CreditTypes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>(),
        interceptors: self.interceptors?.makeCreditTypesInterceptors() ?? [],
        wrapping: self.creditTypes(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "SellOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>(),
        interceptors: self.interceptors?.makeSellOrderInterceptors() ?? [],
        wrapping: self.sellOrder(request:context:)
      )

    case "SellOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>(),
        interceptors: self.interceptors?.makeSellOrdersInterceptors() ?? [],
        wrapping: self.sellOrders(request:context:)
      )

    case "SellOrdersByBatchDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>(),
        interceptors: self.interceptors?.makeSellOrdersByBatchDenomInterceptors() ?? [],
        wrapping: self.sellOrdersByBatchDenom(request:context:)
      )

    case "SellOrdersByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>(),
        interceptors: self.interceptors?.makeSellOrdersByAddressInterceptors() ?? [],
        wrapping: self.sellOrdersByAddress(request:context:)
      )

    case "BuyOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>(),
        interceptors: self.interceptors?.makeBuyOrderInterceptors() ?? [],
        wrapping: self.buyOrder(request:context:)
      )

    case "BuyOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>(),
        interceptors: self.interceptors?.makeBuyOrdersInterceptors() ?? [],
        wrapping: self.buyOrders(request:context:)
      )

    case "BuyOrdersByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>(),
        interceptors: self.interceptors?.makeBuyOrdersByAddressInterceptors() ?? [],
        wrapping: self.buyOrdersByAddress(request:context:)
      )

    case "AllowedAskDenoms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>(),
        interceptors: self.interceptors?.makeAllowedAskDenomsInterceptors() ?? [],
        wrapping: self.allowedAskDenoms(request:context:)
      )

    case "Basket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBasketRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBasketResponse>(),
        interceptors: self.interceptors?.makeBasketInterceptors() ?? [],
        wrapping: self.basket(request:context:)
      )

    case "Baskets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBasketsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBasketsResponse>(),
        interceptors: self.interceptors?.makeBasketsInterceptors() ?? [],
        wrapping: self.baskets(request:context:)
      )

    case "BasketCredits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>(),
        interceptors: self.interceptors?.makeBasketCreditsInterceptors() ?? [],
        wrapping: self.basketCredits(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Regen_Ecocredit_V1alpha2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'classes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryClassesRequest, Regen_Ecocredit_V1alpha2_QueryClassesResponse>]

  /// - Returns: Interceptors to use when handling 'classInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassInfoInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryClassInfoRequest, Regen_Ecocredit_V1alpha2_QueryClassInfoResponse>]

  /// - Returns: Interceptors to use when handling 'projects'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProjectsInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryProjectsRequest, Regen_Ecocredit_V1alpha2_QueryProjectsResponse>]

  /// - Returns: Interceptors to use when handling 'projectInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProjectInfoInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryProjectInfoRequest, Regen_Ecocredit_V1alpha2_QueryProjectInfoResponse>]

  /// - Returns: Interceptors to use when handling 'batches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchesInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBatchesRequest, Regen_Ecocredit_V1alpha2_QueryBatchesResponse>]

  /// - Returns: Interceptors to use when handling 'batchInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchInfoInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBatchInfoRequest, Regen_Ecocredit_V1alpha2_QueryBatchInfoResponse>]

  /// - Returns: Interceptors to use when handling 'balance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBalanceRequest, Regen_Ecocredit_V1alpha2_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'supply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QuerySupplyRequest, Regen_Ecocredit_V1alpha2_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when handling 'creditTypes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreditTypesInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryCreditTypesRequest, Regen_Ecocredit_V1alpha2_QueryCreditTypesResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryParamsRequest, Regen_Ecocredit_V1alpha2_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'sellOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellOrderInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrderRequest, Regen_Ecocredit_V1alpha2_QuerySellOrderResponse>]

  /// - Returns: Interceptors to use when handling 'sellOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellOrdersInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrdersRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'sellOrdersByBatchDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellOrdersByBatchDenomInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByBatchDenomResponse>]

  /// - Returns: Interceptors to use when handling 'sellOrdersByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellOrdersByAddressInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QuerySellOrdersByAddressResponse>]

  /// - Returns: Interceptors to use when handling 'buyOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyOrderInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBuyOrderRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrderResponse>]

  /// - Returns: Interceptors to use when handling 'buyOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyOrdersInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBuyOrdersRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'buyOrdersByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyOrdersByAddressInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressRequest, Regen_Ecocredit_V1alpha2_QueryBuyOrdersByAddressResponse>]

  /// - Returns: Interceptors to use when handling 'allowedAskDenoms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllowedAskDenomsInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsRequest, Regen_Ecocredit_V1alpha2_QueryAllowedAskDenomsResponse>]

  /// - Returns: Interceptors to use when handling 'basket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBasketInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBasketRequest, Regen_Ecocredit_V1alpha2_QueryBasketResponse>]

  /// - Returns: Interceptors to use when handling 'baskets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBasketsInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBasketsRequest, Regen_Ecocredit_V1alpha2_QueryBasketsResponse>]

  /// - Returns: Interceptors to use when handling 'basketCredits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBasketCreditsInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_QueryBasketCreditsRequest, Regen_Ecocredit_V1alpha2_QueryBasketCreditsResponse>]
}

internal enum Regen_Ecocredit_V1alpha2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "regen.ecocredit.v1alpha2.Query",
    methods: [
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.classes,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.classInfo,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.projects,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.projectInfo,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.batches,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.batchInfo,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.balance,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.supply,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.creditTypes,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.params,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.sellOrder,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.sellOrders,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.sellOrdersByBatchDenom,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.sellOrdersByAddress,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.buyOrder,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.buyOrders,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.buyOrdersByAddress,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.allowedAskDenoms,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.basket,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.baskets,
      Regen_Ecocredit_V1alpha2_QueryServerMetadata.Methods.basketCredits,
    ]
  )

  internal enum Methods {
    internal static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/regen.ecocredit.v1alpha2.Query/Classes",
      type: GRPCCallType.unary
    )

    internal static let classInfo = GRPCMethodDescriptor(
      name: "ClassInfo",
      path: "/regen.ecocredit.v1alpha2.Query/ClassInfo",
      type: GRPCCallType.unary
    )

    internal static let projects = GRPCMethodDescriptor(
      name: "Projects",
      path: "/regen.ecocredit.v1alpha2.Query/Projects",
      type: GRPCCallType.unary
    )

    internal static let projectInfo = GRPCMethodDescriptor(
      name: "ProjectInfo",
      path: "/regen.ecocredit.v1alpha2.Query/ProjectInfo",
      type: GRPCCallType.unary
    )

    internal static let batches = GRPCMethodDescriptor(
      name: "Batches",
      path: "/regen.ecocredit.v1alpha2.Query/Batches",
      type: GRPCCallType.unary
    )

    internal static let batchInfo = GRPCMethodDescriptor(
      name: "BatchInfo",
      path: "/regen.ecocredit.v1alpha2.Query/BatchInfo",
      type: GRPCCallType.unary
    )

    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/regen.ecocredit.v1alpha2.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/regen.ecocredit.v1alpha2.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let creditTypes = GRPCMethodDescriptor(
      name: "CreditTypes",
      path: "/regen.ecocredit.v1alpha2.Query/CreditTypes",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/regen.ecocredit.v1alpha2.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let sellOrder = GRPCMethodDescriptor(
      name: "SellOrder",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrder",
      type: GRPCCallType.unary
    )

    internal static let sellOrders = GRPCMethodDescriptor(
      name: "SellOrders",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrders",
      type: GRPCCallType.unary
    )

    internal static let sellOrdersByBatchDenom = GRPCMethodDescriptor(
      name: "SellOrdersByBatchDenom",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrdersByBatchDenom",
      type: GRPCCallType.unary
    )

    internal static let sellOrdersByAddress = GRPCMethodDescriptor(
      name: "SellOrdersByAddress",
      path: "/regen.ecocredit.v1alpha2.Query/SellOrdersByAddress",
      type: GRPCCallType.unary
    )

    internal static let buyOrder = GRPCMethodDescriptor(
      name: "BuyOrder",
      path: "/regen.ecocredit.v1alpha2.Query/BuyOrder",
      type: GRPCCallType.unary
    )

    internal static let buyOrders = GRPCMethodDescriptor(
      name: "BuyOrders",
      path: "/regen.ecocredit.v1alpha2.Query/BuyOrders",
      type: GRPCCallType.unary
    )

    internal static let buyOrdersByAddress = GRPCMethodDescriptor(
      name: "BuyOrdersByAddress",
      path: "/regen.ecocredit.v1alpha2.Query/BuyOrdersByAddress",
      type: GRPCCallType.unary
    )

    internal static let allowedAskDenoms = GRPCMethodDescriptor(
      name: "AllowedAskDenoms",
      path: "/regen.ecocredit.v1alpha2.Query/AllowedAskDenoms",
      type: GRPCCallType.unary
    )

    internal static let basket = GRPCMethodDescriptor(
      name: "Basket",
      path: "/regen.ecocredit.v1alpha2.Query/Basket",
      type: GRPCCallType.unary
    )

    internal static let baskets = GRPCMethodDescriptor(
      name: "Baskets",
      path: "/regen.ecocredit.v1alpha2.Query/Baskets",
      type: GRPCCallType.unary
    )

    internal static let basketCredits = GRPCMethodDescriptor(
      name: "BasketCredits",
      path: "/regen.ecocredit.v1alpha2.Query/BasketCredits",
      type: GRPCCallType.unary
    )
  }
}
