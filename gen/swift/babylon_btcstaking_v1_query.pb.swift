// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstaking/v1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryParamsRequest is request type for the Query/Params RPC method.
struct Babylon_Btcstaking_V1_QueryParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is response type for the Query/Params RPC method.
struct Babylon_Btcstaking_V1_QueryParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params holds all the parameters of this module.
  var params: Babylon_Btcstaking_V1_Params {
    get {return _params ?? Babylon_Btcstaking_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Btcstaking_V1_Params? = nil
}

/// QueryParamsRequest is request type for the Query/Params RPC method.
struct Babylon_Btcstaking_V1_QueryParamsByVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is response type for the Query/Params RPC method.
struct Babylon_Btcstaking_V1_QueryParamsByVersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params holds all the parameters of this module.
  var params: Babylon_Btcstaking_V1_Params {
    get {return _params ?? Babylon_Btcstaking_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Btcstaking_V1_Params? = nil
}

/// QueryParamsByBTCHeightRequest is request type for the Query/ParamsByBTCHeight RPC method.
struct Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var btcHeight: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsByBTCHeightResponse is response type for the Query/QueryParamsByBTCHeightResponse RPC method.
struct Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params holds all the parameters of this module.
  var params: Babylon_Btcstaking_V1_Params {
    get {return _params ?? Babylon_Btcstaking_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// version is the version of the params for the given BTC height
  var version: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Btcstaking_V1_Params? = nil
}

/// QueryFinalityProvidersRequest is the request type for the
/// Query/FinalityProviders RPC method.
struct Babylon_Btcstaking_V1_QueryFinalityProvidersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pagination defines an optional pagination for the request.
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryFinalityProvidersResponse is the response type for the
/// Query/FinalityProviders RPC method.
struct Babylon_Btcstaking_V1_QueryFinalityProvidersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finality_providers contains all the finality providers
  var finalityProviders: [Babylon_Btcstaking_V1_FinalityProviderResponse] = []

  /// pagination defines the pagination in the response.
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryFinalityProviderRequest requests information about a finality provider
struct Babylon_Btcstaking_V1_QueryFinalityProviderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
  var fpBtcPkHex: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalityProviderResponse contains information about a finality provider
struct Babylon_Btcstaking_V1_QueryFinalityProviderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finality_provider contains the FinalityProvider
  var finalityProvider: Babylon_Btcstaking_V1_FinalityProviderResponse {
    get {return _finalityProvider ?? Babylon_Btcstaking_V1_FinalityProviderResponse()}
    set {_finalityProvider = newValue}
  }
  /// Returns true if `finalityProvider` has been explicitly set.
  var hasFinalityProvider: Bool {return self._finalityProvider != nil}
  /// Clears the value of `finalityProvider`. Subsequent reads from it will return its default value.
  mutating func clearFinalityProvider() {self._finalityProvider = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _finalityProvider: Babylon_Btcstaking_V1_FinalityProviderResponse? = nil
}

/// QueryBTCDelegationsRequest is the request type for the
/// Query/BTCDelegations RPC method.
struct Babylon_Btcstaking_V1_QueryBTCDelegationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// status is the queried status for BTC delegations
  var status: Babylon_Btcstaking_V1_BTCDelegationStatus = .pending

  /// pagination defines an optional pagination for the request.
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryBTCDelegationsResponse is the response type for the
/// Query/BTCDelegations RPC method.
struct Babylon_Btcstaking_V1_QueryBTCDelegationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// btc_delegations contains all the queried BTC delegations under the given status
  var btcDelegations: [Babylon_Btcstaking_V1_BTCDelegationResponse] = []

  /// pagination defines the pagination in the response.
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryFinalityProviderDelegationsRequest is the request type for the
/// Query/FinalityProviderDelegations RPC method.
struct Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality providerthat
  /// this BTC delegation delegates to
  /// the PK follows encoding in BIP-340 spec
  var fpBtcPkHex: String = String()

  /// pagination defines an optional pagination for the request.
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryFinalityProviderDelegationsResponse is the response type for the
/// Query/FinalityProviderDelegations RPC method.
struct Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// btc_delegator_delegations contains all the queried BTC delegations.
  var btcDelegatorDelegations: [Babylon_Btcstaking_V1_BTCDelegatorDelegationsResponse] = []

  /// pagination defines the pagination in the response.
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryBTCDelegationRequest is the request type to retrieve a BTC delegation by
/// staking tx hash
struct Babylon_Btcstaking_V1_QueryBTCDelegationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hash of staking transaction in btc format
  var stakingTxHashHex: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryBTCDelegationResponse is response type matching QueryBTCDelegationRequest
/// and containing BTC delegation information
struct Babylon_Btcstaking_V1_QueryBTCDelegationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// BTCDelegation represents the client needed information of an BTCDelegation.
  var btcDelegation: Babylon_Btcstaking_V1_BTCDelegationResponse {
    get {return _btcDelegation ?? Babylon_Btcstaking_V1_BTCDelegationResponse()}
    set {_btcDelegation = newValue}
  }
  /// Returns true if `btcDelegation` has been explicitly set.
  var hasBtcDelegation: Bool {return self._btcDelegation != nil}
  /// Clears the value of `btcDelegation`. Subsequent reads from it will return its default value.
  mutating func clearBtcDelegation() {self._btcDelegation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _btcDelegation: Babylon_Btcstaking_V1_BTCDelegationResponse? = nil
}

/// BTCDelegationResponse is the client needed information from a BTCDelegation with the current status based on parameters.
struct Babylon_Btcstaking_V1_BTCDelegationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staker_addr is the address to receive rewards from BTC delegation.
  var stakerAddr: String {
    get {return _storage._stakerAddr}
    set {_uniqueStorage()._stakerAddr = newValue}
  }

  /// btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
  /// the PK follows encoding in BIP-340 spec
  var btcPk: Data {
    get {return _storage._btcPk}
    set {_uniqueStorage()._btcPk = newValue}
  }

  /// fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
  /// this BTC delegation delegates to
  var fpBtcPkList: [Data] {
    get {return _storage._fpBtcPkList}
    set {_uniqueStorage()._fpBtcPkList = newValue}
  }

  /// staking_time is the number of blocks for which the delegation is locked on BTC chain
  var stakingTime: UInt32 {
    get {return _storage._stakingTime}
    set {_uniqueStorage()._stakingTime = newValue}
  }

  /// start_height is the start BTC height of the BTC delegation
  /// it is the start BTC height of the timelock
  var startHeight: UInt32 {
    get {return _storage._startHeight}
    set {_uniqueStorage()._startHeight = newValue}
  }

  /// end_height is the end height of the BTC delegation
  /// it is the end BTC height of the timelock - w
  var endHeight: UInt32 {
    get {return _storage._endHeight}
    set {_uniqueStorage()._endHeight = newValue}
  }

  /// total_sat is the total amount of BTC stakes in this delegation
  /// quantified in satoshi
  var totalSat: UInt64 {
    get {return _storage._totalSat}
    set {_uniqueStorage()._totalSat = newValue}
  }

  /// staking_tx_hex is the hex string of staking tx
  var stakingTxHex: String {
    get {return _storage._stakingTxHex}
    set {_uniqueStorage()._stakingTxHex = newValue}
  }

  /// slashing_tx_hex is the hex string of slashing tx
  var slashingTxHex: String {
    get {return _storage._slashingTxHex}
    set {_uniqueStorage()._slashingTxHex = newValue}
  }

  /// delegator_slash_sig_hex is the signature on the slashing tx
  /// by the delegator (i.e., SK corresponding to btc_pk) as string hex.
  /// It will be a part of the witness for the staking tx output.
  var delegatorSlashSigHex: String {
    get {return _storage._delegatorSlashSigHex}
    set {_uniqueStorage()._delegatorSlashSigHex = newValue}
  }

  /// covenant_sigs is a list of adaptor signatures on the slashing tx
  /// by each covenant member
  /// It will be a part of the witness for the staking tx output.
  var covenantSigs: [Babylon_Btcstaking_V1_CovenantAdaptorSignatures] {
    get {return _storage._covenantSigs}
    set {_uniqueStorage()._covenantSigs = newValue}
  }

  /// staking_output_idx is the index of the staking output in the staking tx
  var stakingOutputIdx: UInt32 {
    get {return _storage._stakingOutputIdx}
    set {_uniqueStorage()._stakingOutputIdx = newValue}
  }

  /// whether this delegation is active
  var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  /// descriptive status of current delegation.
  var statusDesc: String {
    get {return _storage._statusDesc}
    set {_uniqueStorage()._statusDesc = newValue}
  }

  /// unbonding_time used in unbonding output timelock path and in slashing transactions
  /// change outputs
  var unbondingTime: UInt32 {
    get {return _storage._unbondingTime}
    set {_uniqueStorage()._unbondingTime = newValue}
  }

  /// undelegation_response is the undelegation info of this delegation.
  var undelegationResponse: Babylon_Btcstaking_V1_BTCUndelegationResponse {
    get {return _storage._undelegationResponse ?? Babylon_Btcstaking_V1_BTCUndelegationResponse()}
    set {_uniqueStorage()._undelegationResponse = newValue}
  }
  /// Returns true if `undelegationResponse` has been explicitly set.
  var hasUndelegationResponse: Bool {return _storage._undelegationResponse != nil}
  /// Clears the value of `undelegationResponse`. Subsequent reads from it will return its default value.
  mutating func clearUndelegationResponse() {_uniqueStorage()._undelegationResponse = nil}

  /// params version used to validate delegation
  var paramsVersion: UInt32 {
    get {return _storage._paramsVersion}
    set {_uniqueStorage()._paramsVersion = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// DelegatorUnbondingInfoResponse provides all necessary info about transaction
/// which spent the staking output
struct Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// spend_stake_tx_hex is the transaction which spent the staking output. It is
  /// filled only if the spend_stake_tx_hex is different than the unbonding_tx_hex
  var spendStakeTxHex: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BTCUndelegationResponse provides all necessary info about the undeleagation
struct Babylon_Btcstaking_V1_BTCUndelegationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unbonding_tx is the transaction which will transfer the funds from staking
  /// output to unbonding output. Unbonding output will usually have lower timelock
  /// than staking output. The unbonding tx as string hex.
  var unbondingTxHex: String = String()

  /// covenant_unbonding_sig_list is the list of signatures on the unbonding tx
  /// by covenant members
  var covenantUnbondingSigList: [Babylon_Btcstaking_V1_SignatureInfo] = []

  /// slashingTxHex is the hex string of slashing tx
  var slashingTxHex: String = String()

  /// delegator_slashing_sig is the signature on the slashing tx
  /// by the delegator (i.e., SK corresponding to btc_pk).
  /// It will be a part of the witness for the unbonding tx output.
  /// The delegator slashing sig as string hex.
  var delegatorSlashingSigHex: String = String()

  /// covenant_slashing_sigs is a list of adaptor signatures on the
  /// unbonding slashing tx by each covenant member
  /// It will be a part of the witness for the staking tx output.
  var covenantSlashingSigs: [Babylon_Btcstaking_V1_CovenantAdaptorSignatures] = []

  /// btc_undelegation_info contains all necessary info about the transaction
  /// which spent the staking output
  var delegatorUnbondingInfoResponse: Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse {
    get {return _delegatorUnbondingInfoResponse ?? Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse()}
    set {_delegatorUnbondingInfoResponse = newValue}
  }
  /// Returns true if `delegatorUnbondingInfoResponse` has been explicitly set.
  var hasDelegatorUnbondingInfoResponse: Bool {return self._delegatorUnbondingInfoResponse != nil}
  /// Clears the value of `delegatorUnbondingInfoResponse`. Subsequent reads from it will return its default value.
  mutating func clearDelegatorUnbondingInfoResponse() {self._delegatorUnbondingInfoResponse = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _delegatorUnbondingInfoResponse: Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse? = nil
}

/// BTCDelegatorDelegationsResponse is a collection of BTC delegations responses from the same delegator.
struct Babylon_Btcstaking_V1_BTCDelegatorDelegationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dels: [Babylon_Btcstaking_V1_BTCDelegationResponse] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// FinalityProviderResponse defines a finality provider with voting power information.
struct Babylon_Btcstaking_V1_FinalityProviderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// description defines the description terms for the finality provider.
  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  /// commission defines the commission rate of the finality provider.
  var commission: String = String()

  /// addr is the address to receive commission from delegations.
  var addr: String = String()

  /// btc_pk is the Bitcoin secp256k1 PK of this finality provider
  /// the PK follows encoding in BIP-340 spec
  var btcPk: Data = Data()

  /// pop is the proof of possession of the BTC_PK by the fp addr.
  /// Essentially is the signature where the BTC SK sigs the fp addr.
  var pop: Babylon_Btcstaking_V1_ProofOfPossessionBTC {
    get {return _pop ?? Babylon_Btcstaking_V1_ProofOfPossessionBTC()}
    set {_pop = newValue}
  }
  /// Returns true if `pop` has been explicitly set.
  var hasPop: Bool {return self._pop != nil}
  /// Clears the value of `pop`. Subsequent reads from it will return its default value.
  mutating func clearPop() {self._pop = nil}

  /// slashed_babylon_height indicates the Babylon height when
  /// the finality provider is slashed.
  /// if it's 0 then the finality provider is not slashed
  var slashedBabylonHeight: UInt64 = 0

  /// slashed_btc_height indicates the BTC height when
  /// the finality provider is slashed.
  /// if it's 0 then the finality provider is not slashed
  var slashedBtcHeight: UInt32 = 0

  /// height is the queried Babylon height
  var height: UInt64 = 0

  /// jailed defines whether the finality provider is jailed
  var jailed: Bool = false

  /// highest_voted_height is the highest height for which the
  /// finality provider has voted
  var highestVotedHeight: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Cosmos_Staking_V1beta1_Description? = nil
  fileprivate var _pop: Babylon_Btcstaking_V1_ProofOfPossessionBTC? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstaking_V1_QueryParamsRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryParamsResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryParamsByVersionRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryParamsByVersionResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryFinalityProvidersRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryFinalityProvidersResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryFinalityProviderRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryFinalityProviderResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryBTCDelegationsRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryBTCDelegationsResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryBTCDelegationRequest: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_QueryBTCDelegationResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_BTCDelegationResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_BTCUndelegationResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_BTCDelegatorDelegationsResponse: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_FinalityProviderResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstaking.v1"

extension Babylon_Btcstaking_V1_QueryParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryParamsRequest, rhs: Babylon_Btcstaking_V1_QueryParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryParamsResponse, rhs: Babylon_Btcstaking_V1_QueryParamsResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryParamsByVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsByVersionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryParamsByVersionRequest, rhs: Babylon_Btcstaking_V1_QueryParamsByVersionRequest) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryParamsByVersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsByVersionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryParamsByVersionResponse, rhs: Babylon_Btcstaking_V1_QueryParamsByVersionResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsByBTCHeightRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.btcHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.btcHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.btcHeight, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, rhs: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest) -> Bool {
    if lhs.btcHeight != rhs.btcHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsByBTCHeightResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse, rhs: Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryFinalityProvidersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProvidersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, rhs: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryFinalityProvidersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProvidersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finality_providers"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.finalityProviders) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.finalityProviders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.finalityProviders, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryFinalityProvidersResponse, rhs: Babylon_Btcstaking_V1_QueryFinalityProvidersResponse) -> Bool {
    if lhs.finalityProviders != rhs.finalityProviders {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryFinalityProviderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fp_btc_pk_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fpBtcPkHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fpBtcPkHex.isEmpty {
      try visitor.visitSingularStringField(value: self.fpBtcPkHex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryFinalityProviderRequest, rhs: Babylon_Btcstaking_V1_QueryFinalityProviderRequest) -> Bool {
    if lhs.fpBtcPkHex != rhs.fpBtcPkHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryFinalityProviderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finality_provider"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._finalityProvider) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._finalityProvider {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryFinalityProviderResponse, rhs: Babylon_Btcstaking_V1_QueryFinalityProviderResponse) -> Bool {
    if lhs._finalityProvider != rhs._finalityProvider {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryBTCDelegationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryBTCDelegationsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.status != .pending {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, rhs: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryBTCDelegationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryBTCDelegationsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_delegations"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.btcDelegations) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.btcDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.btcDelegations, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryBTCDelegationsResponse, rhs: Babylon_Btcstaking_V1_QueryBTCDelegationsResponse) -> Bool {
    if lhs.btcDelegations != rhs.btcDelegations {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderDelegationsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fp_btc_pk_hex"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fpBtcPkHex) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fpBtcPkHex.isEmpty {
      try visitor.visitSingularStringField(value: self.fpBtcPkHex, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, rhs: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest) -> Bool {
    if lhs.fpBtcPkHex != rhs.fpBtcPkHex {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderDelegationsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_delegator_delegations"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.btcDelegatorDelegations) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.btcDelegatorDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.btcDelegatorDelegations, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse, rhs: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse) -> Bool {
    if lhs.btcDelegatorDelegations != rhs.btcDelegatorDelegations {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryBTCDelegationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryBTCDelegationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staking_tx_hash_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.stakingTxHashHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stakingTxHashHex.isEmpty {
      try visitor.visitSingularStringField(value: self.stakingTxHashHex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryBTCDelegationRequest, rhs: Babylon_Btcstaking_V1_QueryBTCDelegationRequest) -> Bool {
    if lhs.stakingTxHashHex != rhs.stakingTxHashHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_QueryBTCDelegationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryBTCDelegationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_delegation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._btcDelegation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._btcDelegation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_QueryBTCDelegationResponse, rhs: Babylon_Btcstaking_V1_QueryBTCDelegationResponse) -> Bool {
    if lhs._btcDelegation != rhs._btcDelegation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_BTCDelegationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCDelegationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staker_addr"),
    2: .standard(proto: "btc_pk"),
    3: .standard(proto: "fp_btc_pk_list"),
    4: .standard(proto: "staking_time"),
    5: .standard(proto: "start_height"),
    6: .standard(proto: "end_height"),
    7: .standard(proto: "total_sat"),
    8: .standard(proto: "staking_tx_hex"),
    9: .standard(proto: "slashing_tx_hex"),
    10: .standard(proto: "delegator_slash_sig_hex"),
    11: .standard(proto: "covenant_sigs"),
    12: .standard(proto: "staking_output_idx"),
    13: .same(proto: "active"),
    14: .standard(proto: "status_desc"),
    15: .standard(proto: "unbonding_time"),
    16: .standard(proto: "undelegation_response"),
    17: .standard(proto: "params_version"),
  ]

  fileprivate class _StorageClass {
    var _stakerAddr: String = String()
    var _btcPk: Data = Data()
    var _fpBtcPkList: [Data] = []
    var _stakingTime: UInt32 = 0
    var _startHeight: UInt32 = 0
    var _endHeight: UInt32 = 0
    var _totalSat: UInt64 = 0
    var _stakingTxHex: String = String()
    var _slashingTxHex: String = String()
    var _delegatorSlashSigHex: String = String()
    var _covenantSigs: [Babylon_Btcstaking_V1_CovenantAdaptorSignatures] = []
    var _stakingOutputIdx: UInt32 = 0
    var _active: Bool = false
    var _statusDesc: String = String()
    var _unbondingTime: UInt32 = 0
    var _undelegationResponse: Babylon_Btcstaking_V1_BTCUndelegationResponse? = nil
    var _paramsVersion: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stakerAddr = source._stakerAddr
      _btcPk = source._btcPk
      _fpBtcPkList = source._fpBtcPkList
      _stakingTime = source._stakingTime
      _startHeight = source._startHeight
      _endHeight = source._endHeight
      _totalSat = source._totalSat
      _stakingTxHex = source._stakingTxHex
      _slashingTxHex = source._slashingTxHex
      _delegatorSlashSigHex = source._delegatorSlashSigHex
      _covenantSigs = source._covenantSigs
      _stakingOutputIdx = source._stakingOutputIdx
      _active = source._active
      _statusDesc = source._statusDesc
      _unbondingTime = source._unbondingTime
      _undelegationResponse = source._undelegationResponse
      _paramsVersion = source._paramsVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._stakerAddr) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._btcPk) }()
        case 3: try { try decoder.decodeRepeatedBytesField(value: &_storage._fpBtcPkList) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._stakingTime) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._startHeight) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._endHeight) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._totalSat) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._stakingTxHex) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._slashingTxHex) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._delegatorSlashSigHex) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._covenantSigs) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._stakingOutputIdx) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._active) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._statusDesc) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._unbondingTime) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._undelegationResponse) }()
        case 17: try { try decoder.decodeSingularUInt32Field(value: &_storage._paramsVersion) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._stakerAddr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakerAddr, fieldNumber: 1)
      }
      if !_storage._btcPk.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._btcPk, fieldNumber: 2)
      }
      if !_storage._fpBtcPkList.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._fpBtcPkList, fieldNumber: 3)
      }
      if _storage._stakingTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._stakingTime, fieldNumber: 4)
      }
      if _storage._startHeight != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._startHeight, fieldNumber: 5)
      }
      if _storage._endHeight != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._endHeight, fieldNumber: 6)
      }
      if _storage._totalSat != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalSat, fieldNumber: 7)
      }
      if !_storage._stakingTxHex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stakingTxHex, fieldNumber: 8)
      }
      if !_storage._slashingTxHex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slashingTxHex, fieldNumber: 9)
      }
      if !_storage._delegatorSlashSigHex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorSlashSigHex, fieldNumber: 10)
      }
      if !_storage._covenantSigs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._covenantSigs, fieldNumber: 11)
      }
      if _storage._stakingOutputIdx != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._stakingOutputIdx, fieldNumber: 12)
      }
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 13)
      }
      if !_storage._statusDesc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusDesc, fieldNumber: 14)
      }
      if _storage._unbondingTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._unbondingTime, fieldNumber: 15)
      }
      try { if let v = _storage._undelegationResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if _storage._paramsVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._paramsVersion, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_BTCDelegationResponse, rhs: Babylon_Btcstaking_V1_BTCDelegationResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stakerAddr != rhs_storage._stakerAddr {return false}
        if _storage._btcPk != rhs_storage._btcPk {return false}
        if _storage._fpBtcPkList != rhs_storage._fpBtcPkList {return false}
        if _storage._stakingTime != rhs_storage._stakingTime {return false}
        if _storage._startHeight != rhs_storage._startHeight {return false}
        if _storage._endHeight != rhs_storage._endHeight {return false}
        if _storage._totalSat != rhs_storage._totalSat {return false}
        if _storage._stakingTxHex != rhs_storage._stakingTxHex {return false}
        if _storage._slashingTxHex != rhs_storage._slashingTxHex {return false}
        if _storage._delegatorSlashSigHex != rhs_storage._delegatorSlashSigHex {return false}
        if _storage._covenantSigs != rhs_storage._covenantSigs {return false}
        if _storage._stakingOutputIdx != rhs_storage._stakingOutputIdx {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._statusDesc != rhs_storage._statusDesc {return false}
        if _storage._unbondingTime != rhs_storage._unbondingTime {return false}
        if _storage._undelegationResponse != rhs_storage._undelegationResponse {return false}
        if _storage._paramsVersion != rhs_storage._paramsVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegatorUnbondingInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spend_stake_tx_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.spendStakeTxHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spendStakeTxHex.isEmpty {
      try visitor.visitSingularStringField(value: self.spendStakeTxHex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse, rhs: Babylon_Btcstaking_V1_DelegatorUnbondingInfoResponse) -> Bool {
    if lhs.spendStakeTxHex != rhs.spendStakeTxHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_BTCUndelegationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCUndelegationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unbonding_tx_hex"),
    2: .standard(proto: "covenant_unbonding_sig_list"),
    3: .standard(proto: "slashing_tx_hex"),
    4: .standard(proto: "delegator_slashing_sig_hex"),
    5: .standard(proto: "covenant_slashing_sigs"),
    6: .standard(proto: "delegator_unbonding_info_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.unbondingTxHex) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.covenantUnbondingSigList) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.slashingTxHex) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.delegatorSlashingSigHex) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.covenantSlashingSigs) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._delegatorUnbondingInfoResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.unbondingTxHex.isEmpty {
      try visitor.visitSingularStringField(value: self.unbondingTxHex, fieldNumber: 1)
    }
    if !self.covenantUnbondingSigList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.covenantUnbondingSigList, fieldNumber: 2)
    }
    if !self.slashingTxHex.isEmpty {
      try visitor.visitSingularStringField(value: self.slashingTxHex, fieldNumber: 3)
    }
    if !self.delegatorSlashingSigHex.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorSlashingSigHex, fieldNumber: 4)
    }
    if !self.covenantSlashingSigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.covenantSlashingSigs, fieldNumber: 5)
    }
    try { if let v = self._delegatorUnbondingInfoResponse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_BTCUndelegationResponse, rhs: Babylon_Btcstaking_V1_BTCUndelegationResponse) -> Bool {
    if lhs.unbondingTxHex != rhs.unbondingTxHex {return false}
    if lhs.covenantUnbondingSigList != rhs.covenantUnbondingSigList {return false}
    if lhs.slashingTxHex != rhs.slashingTxHex {return false}
    if lhs.delegatorSlashingSigHex != rhs.delegatorSlashingSigHex {return false}
    if lhs.covenantSlashingSigs != rhs.covenantSlashingSigs {return false}
    if lhs._delegatorUnbondingInfoResponse != rhs._delegatorUnbondingInfoResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_BTCDelegatorDelegationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCDelegatorDelegationsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dels"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dels) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dels, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_BTCDelegatorDelegationsResponse, rhs: Babylon_Btcstaking_V1_BTCDelegatorDelegationsResponse) -> Bool {
    if lhs.dels != rhs.dels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_FinalityProviderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalityProviderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "commission"),
    3: .same(proto: "addr"),
    4: .standard(proto: "btc_pk"),
    5: .same(proto: "pop"),
    6: .standard(proto: "slashed_babylon_height"),
    7: .standard(proto: "slashed_btc_height"),
    8: .same(proto: "height"),
    9: .same(proto: "jailed"),
    10: .standard(proto: "highest_voted_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.addr) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.btcPk) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._pop) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.slashedBabylonHeight) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.slashedBtcHeight) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.jailed) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.highestVotedHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 2)
    }
    if !self.addr.isEmpty {
      try visitor.visitSingularStringField(value: self.addr, fieldNumber: 3)
    }
    if !self.btcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.btcPk, fieldNumber: 4)
    }
    try { if let v = self._pop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.slashedBabylonHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.slashedBabylonHeight, fieldNumber: 6)
    }
    if self.slashedBtcHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.slashedBtcHeight, fieldNumber: 7)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 8)
    }
    if self.jailed != false {
      try visitor.visitSingularBoolField(value: self.jailed, fieldNumber: 9)
    }
    if self.highestVotedHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.highestVotedHeight, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_FinalityProviderResponse, rhs: Babylon_Btcstaking_V1_FinalityProviderResponse) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.addr != rhs.addr {return false}
    if lhs.btcPk != rhs.btcPk {return false}
    if lhs._pop != rhs._pop {return false}
    if lhs.slashedBabylonHeight != rhs.slashedBabylonHeight {return false}
    if lhs.slashedBtcHeight != rhs.slashedBtcHeight {return false}
    if lhs.height != rhs.height {return false}
    if lhs.jailed != rhs.jailed {return false}
    if lhs.highestVotedHeight != rhs.highestVotedHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
