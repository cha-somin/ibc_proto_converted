// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/liquidity/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreatePair defines an SDK message for creating a pair.
struct Comdex_Liquidity_V1beta1_MsgCreatePair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator specifies the bech32-encoded address that is the pair creator.
  var creator: String = String()

  /// base_coin_denom specifies the base coin denom of the pair.
  var baseCoinDenom: String = String()

  /// quote_coin_denom specifies the quote coin denom of the pair.
  var quoteCoinDenom: String = String()

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Liquidity_V1beta1_MsgCreatePairResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreatePool defines an SDK message for creating a pool.
struct Comdex_Liquidity_V1beta1_MsgCreatePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator specifies the bech32-encoded address that is the pool creator
  var creator: String = String()

  /// pair_id specifies the pair id.
  var pairID: UInt64 = 0

  /// deposit_coins specifies the amount of coins to deposit.
  var depositCoins: [Cosmos_Base_V1beta1_Coin] = []

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreatePoolResponse defines the Msg/CreatePool response type.
struct Comdex_Liquidity_V1beta1_MsgCreatePoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateRangedPool defines an SDK message for creating a ranged pool.
struct Comdex_Liquidity_V1beta1_MsgCreateRangedPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator specifies the bech32-encoded address that is the pool creator
  var creator: String = String()

  var appID: UInt64 = 0

  /// pair_id specifies the pair id.
  var pairID: UInt64 = 0

  /// deposit_coins specifies the amount of coins to deposit.
  var depositCoins: [Cosmos_Base_V1beta1_Coin] = []

  var minPrice: String = String()

  var maxPrice: String = String()

  var initialPrice: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateRangedPoolResponse defines the Msg/CreateRangedPool response type.
struct Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeposit defines an SDK message for depositing coins to the pool
struct Comdex_Liquidity_V1beta1_MsgDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// depositor specifies the bech32-encoded address that makes a deposit to the pool
  var depositor: String = String()

  /// pool_id specifies the pool id
  var poolID: UInt64 = 0

  /// deposit_coins specifies the amount of coins to deposit.
  var depositCoins: [Cosmos_Base_V1beta1_Coin] = []

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDepositResponse defines the Msg/Deposit response type.
struct Comdex_Liquidity_V1beta1_MsgDepositResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdraw defines an SDK message for withdrawing pool coin from the pool
struct Comdex_Liquidity_V1beta1_MsgWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
  var withdrawer: String = String()

  /// pool_id specifies the pool id
  var poolID: UInt64 = 0

  /// pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
  var poolCoin: Cosmos_Base_V1beta1_Coin {
    get {return _poolCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_poolCoin = newValue}
  }
  /// Returns true if `poolCoin` has been explicitly set.
  var hasPoolCoin: Bool {return self._poolCoin != nil}
  /// Clears the value of `poolCoin`. Subsequent reads from it will return its default value.
  mutating func clearPoolCoin() {self._poolCoin = nil}

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _poolCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgWithdrawResponse defines the Msg/Withdraw response type.
struct Comdex_Liquidity_V1beta1_MsgWithdrawResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgLimitOrder defines an SDK message for making a limit order
struct Comdex_Liquidity_V1beta1_MsgLimitOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// orderer specifies the bech32-encoded address that makes an order
  var orderer: String = String()

  /// pair_id specifies the pair id
  var pairID: UInt64 = 0

  /// direction specifies the order direction(buy or sell)
  var direction: Comdex_Liquidity_V1beta1_OrderDirection = .unspecified

  /// offer_coin specifies the amount of coin the orderer offers
  var offerCoin: Cosmos_Base_V1beta1_Coin {
    get {return _offerCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_offerCoin = newValue}
  }
  /// Returns true if `offerCoin` has been explicitly set.
  var hasOfferCoin: Bool {return self._offerCoin != nil}
  /// Clears the value of `offerCoin`. Subsequent reads from it will return its default value.
  mutating func clearOfferCoin() {self._offerCoin = nil}

  /// demand_coin_denom specifies the demand coin denom
  var demandCoinDenom: String = String()

  /// price specifies the order price
  var price: String = String()

  /// amount specifies the amount of base coin the orderer wants to buy or sell
  var amount: String = String()

  /// order_lifespan specifies the order lifespan
  var orderLifespan: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _orderLifespan ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_orderLifespan = newValue}
  }
  /// Returns true if `orderLifespan` has been explicitly set.
  var hasOrderLifespan: Bool {return self._orderLifespan != nil}
  /// Clears the value of `orderLifespan`. Subsequent reads from it will return its default value.
  mutating func clearOrderLifespan() {self._orderLifespan = nil}

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _offerCoin: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _orderLifespan: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// MsgLimitOrderResponse defines the Msg/LimitOrder response type.
struct Comdex_Liquidity_V1beta1_MsgLimitOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgMarketOrder defines an SDK message for making a market order
struct Comdex_Liquidity_V1beta1_MsgMarketOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// orderer specifies the bech32-encoded address that makes an order
  var orderer: String = String()

  /// pair_id specifies the pair id
  var pairID: UInt64 = 0

  /// direction specifies the order direction(buy or sell)
  var direction: Comdex_Liquidity_V1beta1_OrderDirection = .unspecified

  /// offer_coin specifies the amount of coin the orderer offers
  var offerCoin: Cosmos_Base_V1beta1_Coin {
    get {return _offerCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_offerCoin = newValue}
  }
  /// Returns true if `offerCoin` has been explicitly set.
  var hasOfferCoin: Bool {return self._offerCoin != nil}
  /// Clears the value of `offerCoin`. Subsequent reads from it will return its default value.
  mutating func clearOfferCoin() {self._offerCoin = nil}

  /// demand_coin_denom specifies the demand coin denom
  var demandCoinDenom: String = String()

  /// amount specifies the amount of base coin the orderer wants to buy or sell
  var amount: String = String()

  /// order_lifespan specifies the order lifespan
  var orderLifespan: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _orderLifespan ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_orderLifespan = newValue}
  }
  /// Returns true if `orderLifespan` has been explicitly set.
  var hasOrderLifespan: Bool {return self._orderLifespan != nil}
  /// Clears the value of `orderLifespan`. Subsequent reads from it will return its default value.
  mutating func clearOrderLifespan() {self._orderLifespan = nil}

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _offerCoin: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _orderLifespan: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// MsgMarketOrderResponse defines the Msg/MarketOrder response type.
struct Comdex_Liquidity_V1beta1_MsgMarketOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgMMOrder defines an SDK message for making a MM(market making) order.
struct Comdex_Liquidity_V1beta1_MsgMMOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// orderer specifies the bech32-encoded address that makes an order
  var orderer: String = String()

  var appID: UInt64 = 0

  /// pair_id specifies the pair id
  var pairID: UInt64 = 0

  /// max_sell_price specifies the maximum sell price
  var maxSellPrice: String = String()

  /// min_sell_price specifies the minimum sell price
  var minSellPrice: String = String()

  /// sell_amount specifies the total amount of base coin of sell orders
  var sellAmount: String = String()

  /// max_buy_price specifies the maximum buy price
  var maxBuyPrice: String = String()

  /// min_buy_price specifies the minimum buy price
  var minBuyPrice: String = String()

  /// buy_amount specifies the total amount of base coin of buy orders
  var buyAmount: String = String()

  /// order_lifespan specifies the order lifespan
  var orderLifespan: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _orderLifespan ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_orderLifespan = newValue}
  }
  /// Returns true if `orderLifespan` has been explicitly set.
  var hasOrderLifespan: Bool {return self._orderLifespan != nil}
  /// Clears the value of `orderLifespan`. Subsequent reads from it will return its default value.
  mutating func clearOrderLifespan() {self._orderLifespan = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _orderLifespan: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// MsgMMOrderResponse defines the Msg/MMOrder response type.
struct Comdex_Liquidity_V1beta1_MsgMMOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelOrder defines an SDK message for cancelling an order
struct Comdex_Liquidity_V1beta1_MsgCancelOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// orderer specifies the bech32-encoded address that makes an order
  var orderer: String = String()

  /// pair_id specifies the pair id
  var pairID: UInt64 = 0

  /// order_id specifies the order id
  var orderID: UInt64 = 0

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelOrderResponse defines the Msg/CancelOrder response type.
struct Comdex_Liquidity_V1beta1_MsgCancelOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelAllOrders defines an SDK message for cancelling all orders
struct Comdex_Liquidity_V1beta1_MsgCancelAllOrders {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// orderer specifies the bech32-encoded address that makes an order
  var orderer: String = String()

  /// pair_ids specifies pair ids to cancel orders
  var pairIds: [UInt64] = []

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelAllOrdersResponse defines the Msg/CancelAllOrders response type.
struct Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelMMOrder defines an SDK message for cancelling all market making orders
struct Comdex_Liquidity_V1beta1_MsgCancelMMOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// orderer specifies the bech32-encoded address that makes an order
  var orderer: String = String()

  var appID: UInt64 = 0

  /// pair_id specifies the pair id to cancel orders
  var pairID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelMMOrderResponse defines the Msg/CancelMMOrder response type.
struct Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgFarm defines a SDK message for farming coins (i.e without bonding) for incentivisation.
struct Comdex_Liquidity_V1beta1_MsgFarm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var poolID: UInt64 = 0

  var farmer: String = String()

  var farmingPoolCoin: Cosmos_Base_V1beta1_Coin {
    get {return _farmingPoolCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_farmingPoolCoin = newValue}
  }
  /// Returns true if `farmingPoolCoin` has been explicitly set.
  var hasFarmingPoolCoin: Bool {return self._farmingPoolCoin != nil}
  /// Clears the value of `farmingPoolCoin`. Subsequent reads from it will return its default value.
  mutating func clearFarmingPoolCoin() {self._farmingPoolCoin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _farmingPoolCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgFarmResponse  defines the Msg/MsgFarmResponse response type.
struct Comdex_Liquidity_V1beta1_MsgFarmResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUnfarm defines a SDK message for performing unfarm of the farmed coins
struct Comdex_Liquidity_V1beta1_MsgUnfarm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var poolID: UInt64 = 0

  var farmer: String = String()

  var unfarmingPoolCoin: Cosmos_Base_V1beta1_Coin {
    get {return _unfarmingPoolCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_unfarmingPoolCoin = newValue}
  }
  /// Returns true if `unfarmingPoolCoin` has been explicitly set.
  var hasUnfarmingPoolCoin: Bool {return self._unfarmingPoolCoin != nil}
  /// Clears the value of `unfarmingPoolCoin`. Subsequent reads from it will return its default value.
  mutating func clearUnfarmingPoolCoin() {self._unfarmingPoolCoin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unfarmingPoolCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgUnfarmResponse defines the Msg/MsgUnfarmResponse response type.
struct Comdex_Liquidity_V1beta1_MsgUnfarmResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDepositAndFarm defines an SDK message for depositing coins to the pool and farming the pool coin
struct Comdex_Liquidity_V1beta1_MsgDepositAndFarm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// depositor specifies the bech32-encoded address that makes a deposit to the pool
  var depositor: String = String()

  /// pool_id specifies the pool id
  var poolID: UInt64 = 0

  /// deposit_coins specifies the amount of coins to deposit.
  var depositCoins: [Cosmos_Base_V1beta1_Coin] = []

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUnfarmAndWithdraw defines a SDK message for performing unfarm of the farmed coins and withdrawing liquidity from pool
struct Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var poolID: UInt64 = 0

  var farmer: String = String()

  var unfarmingPoolCoin: Cosmos_Base_V1beta1_Coin {
    get {return _unfarmingPoolCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_unfarmingPoolCoin = newValue}
  }
  /// Returns true if `unfarmingPoolCoin` has been explicitly set.
  var hasUnfarmingPoolCoin: Bool {return self._unfarmingPoolCoin != nil}
  /// Clears the value of `unfarmingPoolCoin`. Subsequent reads from it will return its default value.
  mutating func clearUnfarmingPoolCoin() {self._unfarmingPoolCoin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unfarmingPoolCoin: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Liquidity_V1beta1_MsgCreatePair: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCreatePairResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCreatePool: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCreatePoolResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCreateRangedPool: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgDeposit: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgDepositResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgWithdraw: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgWithdrawResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgLimitOrder: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgLimitOrderResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgMarketOrder: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgMarketOrderResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgMMOrder: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgMMOrderResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCancelOrder: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCancelOrderResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCancelAllOrders: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCancelMMOrder: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgFarm: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgFarmResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgUnfarm: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgUnfarmResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgDepositAndFarm: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.liquidity.v1beta1"

extension Comdex_Liquidity_V1beta1_MsgCreatePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .standard(proto: "base_coin_denom"),
    3: .standard(proto: "quote_coin_denom"),
    4: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.baseCoinDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.quoteCoinDenom) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.baseCoinDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseCoinDenom, fieldNumber: 2)
    }
    if !self.quoteCoinDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.quoteCoinDenom, fieldNumber: 3)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCreatePair, rhs: Comdex_Liquidity_V1beta1_MsgCreatePair) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.baseCoinDenom != rhs.baseCoinDenom {return false}
    if lhs.quoteCoinDenom != rhs.quoteCoinDenom {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCreatePairResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePairResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCreatePairResponse, rhs: Comdex_Liquidity_V1beta1_MsgCreatePairResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCreatePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .standard(proto: "pair_id"),
    3: .standard(proto: "deposit_coins"),
    4: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.depositCoins) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 2)
    }
    if !self.depositCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositCoins, fieldNumber: 3)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCreatePool, rhs: Comdex_Liquidity_V1beta1_MsgCreatePool) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.depositCoins != rhs.depositCoins {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCreatePoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCreatePoolResponse, rhs: Comdex_Liquidity_V1beta1_MsgCreatePoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCreateRangedPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateRangedPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "pair_id"),
    4: .standard(proto: "deposit_coins"),
    5: .standard(proto: "min_price"),
    6: .standard(proto: "max_price"),
    7: .standard(proto: "initial_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.depositCoins) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minPrice) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.maxPrice) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.initialPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 2)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 3)
    }
    if !self.depositCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositCoins, fieldNumber: 4)
    }
    if !self.minPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.minPrice, fieldNumber: 5)
    }
    if !self.maxPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.maxPrice, fieldNumber: 6)
    }
    if !self.initialPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.initialPrice, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCreateRangedPool, rhs: Comdex_Liquidity_V1beta1_MsgCreateRangedPool) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.depositCoins != rhs.depositCoins {return false}
    if lhs.minPrice != rhs.minPrice {return false}
    if lhs.maxPrice != rhs.maxPrice {return false}
    if lhs.initialPrice != rhs.initialPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateRangedPoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse, rhs: Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "deposit_coins"),
    4: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.depositCoins) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.depositCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositCoins, fieldNumber: 3)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgDeposit, rhs: Comdex_Liquidity_V1beta1_MsgDeposit) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.depositCoins != rhs.depositCoins {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgDepositResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDepositResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgDepositResponse, rhs: Comdex_Liquidity_V1beta1_MsgDepositResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "withdrawer"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "pool_coin"),
    4: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.withdrawer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._poolCoin) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.withdrawer.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawer, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    try { if let v = self._poolCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgWithdraw, rhs: Comdex_Liquidity_V1beta1_MsgWithdraw) -> Bool {
    if lhs.withdrawer != rhs.withdrawer {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs._poolCoin != rhs._poolCoin {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgWithdrawResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgWithdrawResponse, rhs: Comdex_Liquidity_V1beta1_MsgWithdrawResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgLimitOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLimitOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderer"),
    2: .standard(proto: "pair_id"),
    3: .same(proto: "direction"),
    4: .standard(proto: "offer_coin"),
    5: .standard(proto: "demand_coin_denom"),
    6: .same(proto: "price"),
    7: .same(proto: "amount"),
    8: .standard(proto: "order_lifespan"),
    9: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._offerCoin) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.demandCoinDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.price) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._orderLifespan) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.orderer.isEmpty {
      try visitor.visitSingularStringField(value: self.orderer, fieldNumber: 1)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 2)
    }
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 3)
    }
    try { if let v = self._offerCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.demandCoinDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.demandCoinDenom, fieldNumber: 5)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 6)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 7)
    }
    try { if let v = self._orderLifespan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgLimitOrder, rhs: Comdex_Liquidity_V1beta1_MsgLimitOrder) -> Bool {
    if lhs.orderer != rhs.orderer {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs._offerCoin != rhs._offerCoin {return false}
    if lhs.demandCoinDenom != rhs.demandCoinDenom {return false}
    if lhs.price != rhs.price {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs._orderLifespan != rhs._orderLifespan {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgLimitOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLimitOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgLimitOrderResponse, rhs: Comdex_Liquidity_V1beta1_MsgLimitOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgMarketOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMarketOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderer"),
    2: .standard(proto: "pair_id"),
    3: .same(proto: "direction"),
    4: .standard(proto: "offer_coin"),
    5: .standard(proto: "demand_coin_denom"),
    6: .same(proto: "amount"),
    7: .standard(proto: "order_lifespan"),
    8: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._offerCoin) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.demandCoinDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._orderLifespan) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.orderer.isEmpty {
      try visitor.visitSingularStringField(value: self.orderer, fieldNumber: 1)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 2)
    }
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 3)
    }
    try { if let v = self._offerCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.demandCoinDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.demandCoinDenom, fieldNumber: 5)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 6)
    }
    try { if let v = self._orderLifespan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgMarketOrder, rhs: Comdex_Liquidity_V1beta1_MsgMarketOrder) -> Bool {
    if lhs.orderer != rhs.orderer {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs._offerCoin != rhs._offerCoin {return false}
    if lhs.demandCoinDenom != rhs.demandCoinDenom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs._orderLifespan != rhs._orderLifespan {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgMarketOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMarketOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgMarketOrderResponse, rhs: Comdex_Liquidity_V1beta1_MsgMarketOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgMMOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMMOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderer"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "pair_id"),
    4: .standard(proto: "max_sell_price"),
    5: .standard(proto: "min_sell_price"),
    6: .standard(proto: "sell_amount"),
    7: .standard(proto: "max_buy_price"),
    8: .standard(proto: "min_buy_price"),
    9: .standard(proto: "buy_amount"),
    10: .standard(proto: "order_lifespan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.maxSellPrice) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minSellPrice) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.sellAmount) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.maxBuyPrice) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.minBuyPrice) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.buyAmount) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._orderLifespan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.orderer.isEmpty {
      try visitor.visitSingularStringField(value: self.orderer, fieldNumber: 1)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 2)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 3)
    }
    if !self.maxSellPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.maxSellPrice, fieldNumber: 4)
    }
    if !self.minSellPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.minSellPrice, fieldNumber: 5)
    }
    if !self.sellAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.sellAmount, fieldNumber: 6)
    }
    if !self.maxBuyPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.maxBuyPrice, fieldNumber: 7)
    }
    if !self.minBuyPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.minBuyPrice, fieldNumber: 8)
    }
    if !self.buyAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.buyAmount, fieldNumber: 9)
    }
    try { if let v = self._orderLifespan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgMMOrder, rhs: Comdex_Liquidity_V1beta1_MsgMMOrder) -> Bool {
    if lhs.orderer != rhs.orderer {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.maxSellPrice != rhs.maxSellPrice {return false}
    if lhs.minSellPrice != rhs.minSellPrice {return false}
    if lhs.sellAmount != rhs.sellAmount {return false}
    if lhs.maxBuyPrice != rhs.maxBuyPrice {return false}
    if lhs.minBuyPrice != rhs.minBuyPrice {return false}
    if lhs.buyAmount != rhs.buyAmount {return false}
    if lhs._orderLifespan != rhs._orderLifespan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgMMOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMMOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgMMOrderResponse, rhs: Comdex_Liquidity_V1beta1_MsgMMOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCancelOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderer"),
    2: .standard(proto: "pair_id"),
    3: .standard(proto: "order_id"),
    4: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.orderID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderer.isEmpty {
      try visitor.visitSingularStringField(value: self.orderer, fieldNumber: 1)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 2)
    }
    if self.orderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.orderID, fieldNumber: 3)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCancelOrder, rhs: Comdex_Liquidity_V1beta1_MsgCancelOrder) -> Bool {
    if lhs.orderer != rhs.orderer {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCancelOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCancelOrderResponse, rhs: Comdex_Liquidity_V1beta1_MsgCancelOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCancelAllOrders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelAllOrders"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderer"),
    2: .standard(proto: "pair_ids"),
    3: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderer) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.pairIds) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderer.isEmpty {
      try visitor.visitSingularStringField(value: self.orderer, fieldNumber: 1)
    }
    if !self.pairIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.pairIds, fieldNumber: 2)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCancelAllOrders, rhs: Comdex_Liquidity_V1beta1_MsgCancelAllOrders) -> Bool {
    if lhs.orderer != rhs.orderer {return false}
    if lhs.pairIds != rhs.pairIds {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelAllOrdersResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse, rhs: Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCancelMMOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelMMOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orderer"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "pair_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderer.isEmpty {
      try visitor.visitSingularStringField(value: self.orderer, fieldNumber: 1)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 2)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCancelMMOrder, rhs: Comdex_Liquidity_V1beta1_MsgCancelMMOrder) -> Bool {
    if lhs.orderer != rhs.orderer {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelMMOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse, rhs: Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgFarm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFarm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "pool_id"),
    3: .same(proto: "farmer"),
    4: .standard(proto: "farming_pool_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.farmer) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._farmingPoolCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.farmer.isEmpty {
      try visitor.visitSingularStringField(value: self.farmer, fieldNumber: 3)
    }
    try { if let v = self._farmingPoolCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgFarm, rhs: Comdex_Liquidity_V1beta1_MsgFarm) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.farmer != rhs.farmer {return false}
    if lhs._farmingPoolCoin != rhs._farmingPoolCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgFarmResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFarmResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgFarmResponse, rhs: Comdex_Liquidity_V1beta1_MsgFarmResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgUnfarm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnfarm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "pool_id"),
    3: .same(proto: "farmer"),
    4: .standard(proto: "unfarming_pool_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.farmer) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._unfarmingPoolCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.farmer.isEmpty {
      try visitor.visitSingularStringField(value: self.farmer, fieldNumber: 3)
    }
    try { if let v = self._unfarmingPoolCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgUnfarm, rhs: Comdex_Liquidity_V1beta1_MsgUnfarm) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.farmer != rhs.farmer {return false}
    if lhs._unfarmingPoolCoin != rhs._unfarmingPoolCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgUnfarmResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnfarmResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgUnfarmResponse, rhs: Comdex_Liquidity_V1beta1_MsgUnfarmResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgDepositAndFarm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDepositAndFarm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "deposit_coins"),
    4: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.depositCoins) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.depositCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositCoins, fieldNumber: 3)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgDepositAndFarm, rhs: Comdex_Liquidity_V1beta1_MsgDepositAndFarm) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.depositCoins != rhs.depositCoins {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDepositAndFarmResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse, rhs: Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnfarmAndWithdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "pool_id"),
    3: .same(proto: "farmer"),
    4: .standard(proto: "unfarming_pool_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.farmer) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._unfarmingPoolCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.farmer.isEmpty {
      try visitor.visitSingularStringField(value: self.farmer, fieldNumber: 3)
    }
    try { if let v = self._unfarmingPoolCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, rhs: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.farmer != rhs.farmer {return false}
    if lhs._unfarmingPoolCoin != rhs._unfarmingPoolCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnfarmAndWithdrawResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse, rhs: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
