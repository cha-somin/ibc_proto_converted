//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/ocr/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the OCR Msg service.
///
/// Usage: instantiate `Injective_Ocr_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Ocr_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createFeed(
    _ request: Injective_Ocr_V1beta1_MsgCreateFeed,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgCreateFeed, Injective_Ocr_V1beta1_MsgCreateFeedResponse>

  func updateFeed(
    _ request: Injective_Ocr_V1beta1_MsgUpdateFeed,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgUpdateFeed, Injective_Ocr_V1beta1_MsgUpdateFeedResponse>

  func transmit(
    _ request: Injective_Ocr_V1beta1_MsgTransmit,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgTransmit, Injective_Ocr_V1beta1_MsgTransmitResponse>

  func fundFeedRewardPool(
    _ request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgFundFeedRewardPool, Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>

  func withdrawFeedRewardPool(
    _ request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>

  func setPayees(
    _ request: Injective_Ocr_V1beta1_MsgSetPayees,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgSetPayees, Injective_Ocr_V1beta1_MsgSetPayeesResponse>

  func transferPayeeship(
    _ request: Injective_Ocr_V1beta1_MsgTransferPayeeship,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgTransferPayeeship, Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>

  func acceptPayeeship(
    _ request: Injective_Ocr_V1beta1_MsgAcceptPayeeship,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgAcceptPayeeship, Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>

  func updateParams(
    _ request: Injective_Ocr_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgUpdateParams, Injective_Ocr_V1beta1_MsgUpdateParamsResponse>
}

extension Injective_Ocr_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "injective.ocr.v1beta1.Msg"
  }

  /// CreateFeed defines a method for creating feed by module admin
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFeed(
    _ request: Injective_Ocr_V1beta1_MsgCreateFeed,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgCreateFeed, Injective_Ocr_V1beta1_MsgCreateFeedResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.createFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? []
    )
  }

  /// CreateFeed defines a method for creating feed by feed admin or feed billing
  /// admin
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateFeed(
    _ request: Injective_Ocr_V1beta1_MsgUpdateFeed,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgUpdateFeed, Injective_Ocr_V1beta1_MsgUpdateFeedResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFeedInterceptors() ?? []
    )
  }

  /// Transmit defines a method for transmitting the feed info by transmitter
  ///
  /// - Parameters:
  ///   - request: Request to send to Transmit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transmit(
    _ request: Injective_Ocr_V1beta1_MsgTransmit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgTransmit, Injective_Ocr_V1beta1_MsgTransmitResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransmitInterceptors() ?? []
    )
  }

  /// FundFeedRewardPool defines a method to put funds into feed reward pool
  ///
  /// - Parameters:
  ///   - request: Request to send to FundFeedRewardPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fundFeedRewardPool(
    _ request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgFundFeedRewardPool, Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.fundFeedRewardPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundFeedRewardPoolInterceptors() ?? []
    )
  }

  /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
  /// admin or billing admin
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawFeedRewardPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawFeedRewardPool(
    _ request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.withdrawFeedRewardPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawFeedRewardPoolInterceptors() ?? []
    )
  }

  /// SetPayees defines a method to set payees for transmitters (batch action)
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPayees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPayees(
    _ request: Injective_Ocr_V1beta1_MsgSetPayees,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgSetPayees, Injective_Ocr_V1beta1_MsgSetPayeesResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.setPayees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPayeesInterceptors() ?? []
    )
  }

  /// TransferPayeeship defines a method for a payee to transfer reward receive
  /// ownership
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferPayeeship.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferPayeeship(
    _ request: Injective_Ocr_V1beta1_MsgTransferPayeeship,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgTransferPayeeship, Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transferPayeeship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferPayeeshipInterceptors() ?? []
    )
  }

  /// AcceptPayeeship defines a method for a new payee to accept reward receive
  /// ownership
  ///
  /// - Parameters:
  ///   - request: Request to send to AcceptPayeeship.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func acceptPayeeship(
    _ request: Injective_Ocr_V1beta1_MsgAcceptPayeeship,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgAcceptPayeeship, Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.acceptPayeeship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptPayeeshipInterceptors() ?? []
    )
  }

  /// Unary call to UpdateParams
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Injective_Ocr_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Ocr_V1beta1_MsgUpdateParams, Injective_Ocr_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Ocr_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Ocr_V1beta1_MsgNIOClient")
internal final class Injective_Ocr_V1beta1_MsgClient: Injective_Ocr_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.ocr.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Ocr_V1beta1_MsgNIOClient: Injective_Ocr_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.ocr.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the OCR Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Ocr_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateFeedCall(
    _ request: Injective_Ocr_V1beta1_MsgCreateFeed,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgCreateFeed, Injective_Ocr_V1beta1_MsgCreateFeedResponse>

  func makeUpdateFeedCall(
    _ request: Injective_Ocr_V1beta1_MsgUpdateFeed,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgUpdateFeed, Injective_Ocr_V1beta1_MsgUpdateFeedResponse>

  func makeTransmitCall(
    _ request: Injective_Ocr_V1beta1_MsgTransmit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgTransmit, Injective_Ocr_V1beta1_MsgTransmitResponse>

  func makeFundFeedRewardPoolCall(
    _ request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgFundFeedRewardPool, Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>

  func makeWithdrawFeedRewardPoolCall(
    _ request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>

  func makeSetPayeesCall(
    _ request: Injective_Ocr_V1beta1_MsgSetPayees,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgSetPayees, Injective_Ocr_V1beta1_MsgSetPayeesResponse>

  func makeTransferPayeeshipCall(
    _ request: Injective_Ocr_V1beta1_MsgTransferPayeeship,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgTransferPayeeship, Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>

  func makeAcceptPayeeshipCall(
    _ request: Injective_Ocr_V1beta1_MsgAcceptPayeeship,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgAcceptPayeeship, Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>

  func makeUpdateParamsCall(
    _ request: Injective_Ocr_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgUpdateParams, Injective_Ocr_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Ocr_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Ocr_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateFeedCall(
    _ request: Injective_Ocr_V1beta1_MsgCreateFeed,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgCreateFeed, Injective_Ocr_V1beta1_MsgCreateFeedResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.createFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? []
    )
  }

  internal func makeUpdateFeedCall(
    _ request: Injective_Ocr_V1beta1_MsgUpdateFeed,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgUpdateFeed, Injective_Ocr_V1beta1_MsgUpdateFeedResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFeedInterceptors() ?? []
    )
  }

  internal func makeTransmitCall(
    _ request: Injective_Ocr_V1beta1_MsgTransmit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgTransmit, Injective_Ocr_V1beta1_MsgTransmitResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransmitInterceptors() ?? []
    )
  }

  internal func makeFundFeedRewardPoolCall(
    _ request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgFundFeedRewardPool, Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.fundFeedRewardPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundFeedRewardPoolInterceptors() ?? []
    )
  }

  internal func makeWithdrawFeedRewardPoolCall(
    _ request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.withdrawFeedRewardPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawFeedRewardPoolInterceptors() ?? []
    )
  }

  internal func makeSetPayeesCall(
    _ request: Injective_Ocr_V1beta1_MsgSetPayees,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgSetPayees, Injective_Ocr_V1beta1_MsgSetPayeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.setPayees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPayeesInterceptors() ?? []
    )
  }

  internal func makeTransferPayeeshipCall(
    _ request: Injective_Ocr_V1beta1_MsgTransferPayeeship,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgTransferPayeeship, Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transferPayeeship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferPayeeshipInterceptors() ?? []
    )
  }

  internal func makeAcceptPayeeshipCall(
    _ request: Injective_Ocr_V1beta1_MsgAcceptPayeeship,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgAcceptPayeeship, Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.acceptPayeeship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptPayeeshipInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Injective_Ocr_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Ocr_V1beta1_MsgUpdateParams, Injective_Ocr_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Ocr_V1beta1_MsgAsyncClientProtocol {
  internal func createFeed(
    _ request: Injective_Ocr_V1beta1_MsgCreateFeed,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgCreateFeedResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.createFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? []
    )
  }

  internal func updateFeed(
    _ request: Injective_Ocr_V1beta1_MsgUpdateFeed,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgUpdateFeedResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateFeed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFeedInterceptors() ?? []
    )
  }

  internal func transmit(
    _ request: Injective_Ocr_V1beta1_MsgTransmit,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgTransmitResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transmit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransmitInterceptors() ?? []
    )
  }

  internal func fundFeedRewardPool(
    _ request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.fundFeedRewardPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundFeedRewardPoolInterceptors() ?? []
    )
  }

  internal func withdrawFeedRewardPool(
    _ request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.withdrawFeedRewardPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawFeedRewardPoolInterceptors() ?? []
    )
  }

  internal func setPayees(
    _ request: Injective_Ocr_V1beta1_MsgSetPayees,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgSetPayeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.setPayees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPayeesInterceptors() ?? []
    )
  }

  internal func transferPayeeship(
    _ request: Injective_Ocr_V1beta1_MsgTransferPayeeship,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transferPayeeship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferPayeeshipInterceptors() ?? []
    )
  }

  internal func acceptPayeeship(
    _ request: Injective_Ocr_V1beta1_MsgAcceptPayeeship,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.acceptPayeeship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcceptPayeeshipInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Injective_Ocr_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Ocr_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Ocr_V1beta1_MsgAsyncClient: Injective_Ocr_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Ocr_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createFeed'.
  func makeCreateFeedInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgCreateFeed, Injective_Ocr_V1beta1_MsgCreateFeedResponse>]

  /// - Returns: Interceptors to use when invoking 'updateFeed'.
  func makeUpdateFeedInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgUpdateFeed, Injective_Ocr_V1beta1_MsgUpdateFeedResponse>]

  /// - Returns: Interceptors to use when invoking 'transmit'.
  func makeTransmitInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgTransmit, Injective_Ocr_V1beta1_MsgTransmitResponse>]

  /// - Returns: Interceptors to use when invoking 'fundFeedRewardPool'.
  func makeFundFeedRewardPoolInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgFundFeedRewardPool, Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawFeedRewardPool'.
  func makeWithdrawFeedRewardPoolInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'setPayees'.
  func makeSetPayeesInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgSetPayees, Injective_Ocr_V1beta1_MsgSetPayeesResponse>]

  /// - Returns: Interceptors to use when invoking 'transferPayeeship'.
  func makeTransferPayeeshipInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgTransferPayeeship, Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>]

  /// - Returns: Interceptors to use when invoking 'acceptPayeeship'.
  func makeAcceptPayeeshipInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgAcceptPayeeship, Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Injective_Ocr_V1beta1_MsgUpdateParams, Injective_Ocr_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Injective_Ocr_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.ocr.v1beta1.Msg",
    methods: [
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.createFeed,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateFeed,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transmit,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.fundFeedRewardPool,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.withdrawFeedRewardPool,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.setPayees,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.transferPayeeship,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.acceptPayeeship,
      Injective_Ocr_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createFeed = GRPCMethodDescriptor(
      name: "CreateFeed",
      path: "/injective.ocr.v1beta1.Msg/CreateFeed",
      type: GRPCCallType.unary
    )

    internal static let updateFeed = GRPCMethodDescriptor(
      name: "UpdateFeed",
      path: "/injective.ocr.v1beta1.Msg/UpdateFeed",
      type: GRPCCallType.unary
    )

    internal static let transmit = GRPCMethodDescriptor(
      name: "Transmit",
      path: "/injective.ocr.v1beta1.Msg/Transmit",
      type: GRPCCallType.unary
    )

    internal static let fundFeedRewardPool = GRPCMethodDescriptor(
      name: "FundFeedRewardPool",
      path: "/injective.ocr.v1beta1.Msg/FundFeedRewardPool",
      type: GRPCCallType.unary
    )

    internal static let withdrawFeedRewardPool = GRPCMethodDescriptor(
      name: "WithdrawFeedRewardPool",
      path: "/injective.ocr.v1beta1.Msg/WithdrawFeedRewardPool",
      type: GRPCCallType.unary
    )

    internal static let setPayees = GRPCMethodDescriptor(
      name: "SetPayees",
      path: "/injective.ocr.v1beta1.Msg/SetPayees",
      type: GRPCCallType.unary
    )

    internal static let transferPayeeship = GRPCMethodDescriptor(
      name: "TransferPayeeship",
      path: "/injective.ocr.v1beta1.Msg/TransferPayeeship",
      type: GRPCCallType.unary
    )

    internal static let acceptPayeeship = GRPCMethodDescriptor(
      name: "AcceptPayeeship",
      path: "/injective.ocr.v1beta1.Msg/AcceptPayeeship",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.ocr.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the OCR Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Ocr_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Injective_Ocr_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateFeed defines a method for creating feed by module admin
  func createFeed(request: Injective_Ocr_V1beta1_MsgCreateFeed, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgCreateFeedResponse>

  /// CreateFeed defines a method for creating feed by feed admin or feed billing
  /// admin
  func updateFeed(request: Injective_Ocr_V1beta1_MsgUpdateFeed, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgUpdateFeedResponse>

  /// Transmit defines a method for transmitting the feed info by transmitter
  func transmit(request: Injective_Ocr_V1beta1_MsgTransmit, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgTransmitResponse>

  /// FundFeedRewardPool defines a method to put funds into feed reward pool
  func fundFeedRewardPool(request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>

  /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
  /// admin or billing admin
  func withdrawFeedRewardPool(request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>

  /// SetPayees defines a method to set payees for transmitters (batch action)
  func setPayees(request: Injective_Ocr_V1beta1_MsgSetPayees, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgSetPayeesResponse>

  /// TransferPayeeship defines a method for a payee to transfer reward receive
  /// ownership
  func transferPayeeship(request: Injective_Ocr_V1beta1_MsgTransferPayeeship, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>

  /// AcceptPayeeship defines a method for a new payee to accept reward receive
  /// ownership
  func acceptPayeeship(request: Injective_Ocr_V1beta1_MsgAcceptPayeeship, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>

  func updateParams(request: Injective_Ocr_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Ocr_V1beta1_MsgUpdateParamsResponse>
}

extension Injective_Ocr_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Injective_Ocr_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateFeed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgCreateFeed>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgCreateFeedResponse>(),
        interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? [],
        userFunction: self.createFeed(request:context:)
      )

    case "UpdateFeed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgUpdateFeed>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgUpdateFeedResponse>(),
        interceptors: self.interceptors?.makeUpdateFeedInterceptors() ?? [],
        userFunction: self.updateFeed(request:context:)
      )

    case "Transmit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgTransmit>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgTransmitResponse>(),
        interceptors: self.interceptors?.makeTransmitInterceptors() ?? [],
        userFunction: self.transmit(request:context:)
      )

    case "FundFeedRewardPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgFundFeedRewardPool>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>(),
        interceptors: self.interceptors?.makeFundFeedRewardPoolInterceptors() ?? [],
        userFunction: self.fundFeedRewardPool(request:context:)
      )

    case "WithdrawFeedRewardPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>(),
        interceptors: self.interceptors?.makeWithdrawFeedRewardPoolInterceptors() ?? [],
        userFunction: self.withdrawFeedRewardPool(request:context:)
      )

    case "SetPayees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgSetPayees>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgSetPayeesResponse>(),
        interceptors: self.interceptors?.makeSetPayeesInterceptors() ?? [],
        userFunction: self.setPayees(request:context:)
      )

    case "TransferPayeeship":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgTransferPayeeship>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>(),
        interceptors: self.interceptors?.makeTransferPayeeshipInterceptors() ?? [],
        userFunction: self.transferPayeeship(request:context:)
      )

    case "AcceptPayeeship":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgAcceptPayeeship>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>(),
        interceptors: self.interceptors?.makeAcceptPayeeshipInterceptors() ?? [],
        userFunction: self.acceptPayeeship(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the OCR Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Ocr_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Ocr_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateFeed defines a method for creating feed by module admin
  @Sendable func createFeed(
    request: Injective_Ocr_V1beta1_MsgCreateFeed,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgCreateFeedResponse

  /// CreateFeed defines a method for creating feed by feed admin or feed billing
  /// admin
  @Sendable func updateFeed(
    request: Injective_Ocr_V1beta1_MsgUpdateFeed,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgUpdateFeedResponse

  /// Transmit defines a method for transmitting the feed info by transmitter
  @Sendable func transmit(
    request: Injective_Ocr_V1beta1_MsgTransmit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgTransmitResponse

  /// FundFeedRewardPool defines a method to put funds into feed reward pool
  @Sendable func fundFeedRewardPool(
    request: Injective_Ocr_V1beta1_MsgFundFeedRewardPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse

  /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
  /// admin or billing admin
  @Sendable func withdrawFeedRewardPool(
    request: Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse

  /// SetPayees defines a method to set payees for transmitters (batch action)
  @Sendable func setPayees(
    request: Injective_Ocr_V1beta1_MsgSetPayees,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgSetPayeesResponse

  /// TransferPayeeship defines a method for a payee to transfer reward receive
  /// ownership
  @Sendable func transferPayeeship(
    request: Injective_Ocr_V1beta1_MsgTransferPayeeship,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse

  /// AcceptPayeeship defines a method for a new payee to accept reward receive
  /// ownership
  @Sendable func acceptPayeeship(
    request: Injective_Ocr_V1beta1_MsgAcceptPayeeship,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse

  @Sendable func updateParams(
    request: Injective_Ocr_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Ocr_V1beta1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Ocr_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Ocr_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Ocr_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Ocr_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgCreateFeed>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgCreateFeedResponse>(),
        interceptors: self.interceptors?.makeCreateFeedInterceptors() ?? [],
        wrapping: self.createFeed(request:context:)
      )

    case "UpdateFeed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgUpdateFeed>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgUpdateFeedResponse>(),
        interceptors: self.interceptors?.makeUpdateFeedInterceptors() ?? [],
        wrapping: self.updateFeed(request:context:)
      )

    case "Transmit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgTransmit>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgTransmitResponse>(),
        interceptors: self.interceptors?.makeTransmitInterceptors() ?? [],
        wrapping: self.transmit(request:context:)
      )

    case "FundFeedRewardPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgFundFeedRewardPool>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>(),
        interceptors: self.interceptors?.makeFundFeedRewardPoolInterceptors() ?? [],
        wrapping: self.fundFeedRewardPool(request:context:)
      )

    case "WithdrawFeedRewardPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>(),
        interceptors: self.interceptors?.makeWithdrawFeedRewardPoolInterceptors() ?? [],
        wrapping: self.withdrawFeedRewardPool(request:context:)
      )

    case "SetPayees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgSetPayees>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgSetPayeesResponse>(),
        interceptors: self.interceptors?.makeSetPayeesInterceptors() ?? [],
        wrapping: self.setPayees(request:context:)
      )

    case "TransferPayeeship":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgTransferPayeeship>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>(),
        interceptors: self.interceptors?.makeTransferPayeeshipInterceptors() ?? [],
        wrapping: self.transferPayeeship(request:context:)
      )

    case "AcceptPayeeship":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgAcceptPayeeship>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>(),
        interceptors: self.interceptors?.makeAcceptPayeeshipInterceptors() ?? [],
        wrapping: self.acceptPayeeship(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Ocr_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Ocr_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Ocr_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFeedInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgCreateFeed, Injective_Ocr_V1beta1_MsgCreateFeedResponse>]

  /// - Returns: Interceptors to use when handling 'updateFeed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateFeedInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgUpdateFeed, Injective_Ocr_V1beta1_MsgUpdateFeedResponse>]

  /// - Returns: Interceptors to use when handling 'transmit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransmitInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgTransmit, Injective_Ocr_V1beta1_MsgTransmitResponse>]

  /// - Returns: Interceptors to use when handling 'fundFeedRewardPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFundFeedRewardPoolInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgFundFeedRewardPool, Injective_Ocr_V1beta1_MsgFundFeedRewardPoolResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawFeedRewardPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawFeedRewardPoolInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPool, Injective_Ocr_V1beta1_MsgWithdrawFeedRewardPoolResponse>]

  /// - Returns: Interceptors to use when handling 'setPayees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPayeesInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgSetPayees, Injective_Ocr_V1beta1_MsgSetPayeesResponse>]

  /// - Returns: Interceptors to use when handling 'transferPayeeship'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferPayeeshipInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgTransferPayeeship, Injective_Ocr_V1beta1_MsgTransferPayeeshipResponse>]

  /// - Returns: Interceptors to use when handling 'acceptPayeeship'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAcceptPayeeshipInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgAcceptPayeeship, Injective_Ocr_V1beta1_MsgAcceptPayeeshipResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Injective_Ocr_V1beta1_MsgUpdateParams, Injective_Ocr_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Injective_Ocr_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.ocr.v1beta1.Msg",
    methods: [
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.createFeed,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.updateFeed,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.transmit,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.fundFeedRewardPool,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.withdrawFeedRewardPool,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.setPayees,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.transferPayeeship,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.acceptPayeeship,
      Injective_Ocr_V1beta1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createFeed = GRPCMethodDescriptor(
      name: "CreateFeed",
      path: "/injective.ocr.v1beta1.Msg/CreateFeed",
      type: GRPCCallType.unary
    )

    internal static let updateFeed = GRPCMethodDescriptor(
      name: "UpdateFeed",
      path: "/injective.ocr.v1beta1.Msg/UpdateFeed",
      type: GRPCCallType.unary
    )

    internal static let transmit = GRPCMethodDescriptor(
      name: "Transmit",
      path: "/injective.ocr.v1beta1.Msg/Transmit",
      type: GRPCCallType.unary
    )

    internal static let fundFeedRewardPool = GRPCMethodDescriptor(
      name: "FundFeedRewardPool",
      path: "/injective.ocr.v1beta1.Msg/FundFeedRewardPool",
      type: GRPCCallType.unary
    )

    internal static let withdrawFeedRewardPool = GRPCMethodDescriptor(
      name: "WithdrawFeedRewardPool",
      path: "/injective.ocr.v1beta1.Msg/WithdrawFeedRewardPool",
      type: GRPCCallType.unary
    )

    internal static let setPayees = GRPCMethodDescriptor(
      name: "SetPayees",
      path: "/injective.ocr.v1beta1.Msg/SetPayees",
      type: GRPCCallType.unary
    )

    internal static let transferPayeeship = GRPCMethodDescriptor(
      name: "TransferPayeeship",
      path: "/injective.ocr.v1beta1.Msg/TransferPayeeship",
      type: GRPCCallType.unary
    )

    internal static let acceptPayeeship = GRPCMethodDescriptor(
      name: "AcceptPayeeship",
      path: "/injective.ocr.v1beta1.Msg/AcceptPayeeship",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.ocr.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
