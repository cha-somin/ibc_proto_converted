//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/btcstaking/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Btcstaking_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Btcstaking_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Babylon_Btcstaking_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryParamsRequest, Babylon_Btcstaking_V1_QueryParamsResponse>

  func paramsByVersion(
    _ request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryParamsByVersionRequest, Babylon_Btcstaking_V1_QueryParamsByVersionResponse>

  func paramsByBTCHeight(
    _ request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>

  func finalityProviders(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>

  func finalityProvider(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderRequest, Babylon_Btcstaking_V1_QueryFinalityProviderResponse>

  func bTCDelegations(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>

  func finalityProviderDelegations(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>

  func bTCDelegation(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationRequest, Babylon_Btcstaking_V1_QueryBTCDelegationResponse>
}

extension Babylon_Btcstaking_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.btcstaking.v1.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Babylon_Btcstaking_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryParamsRequest, Babylon_Btcstaking_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ParamsByVersion queries the parameters of the module for a specific version of past params.
  ///
  /// - Parameters:
  ///   - request: Request to send to ParamsByVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paramsByVersion(
    _ request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryParamsByVersionRequest, Babylon_Btcstaking_V1_QueryParamsByVersionResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsByVersionInterceptors() ?? []
    )
  }

  /// ParamsByBTCHeight queries the parameters of the module for a specific BTC height
  ///
  /// - Parameters:
  ///   - request: Request to send to ParamsByBTCHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paramsByBTCHeight(
    _ request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByBTCHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsByBTCHeightInterceptors() ?? []
    )
  }

  /// FinalityProviders queries all finality providers
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalityProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalityProviders(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, Babylon_Btcstaking_V1_QueryFinalityProvidersResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? []
    )
  }

  /// FinalityProvider info about one finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalityProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalityProvider(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderRequest, Babylon_Btcstaking_V1_QueryFinalityProviderResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? []
    )
  }

  /// BTCDelegations queries all BTC delegations under a given status
  ///
  /// - Parameters:
  ///   - request: Request to send to BTCDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bTCDelegations(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, Babylon_Btcstaking_V1_QueryBTCDelegationsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCDelegationsInterceptors() ?? []
    )
  }

  /// FinalityProviderDelegations queries all BTC delegations of the given finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalityProviderDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalityProviderDelegations(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviderDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderDelegationsInterceptors() ?? []
    )
  }

  /// BTCDelegation retrieves delegation by corresponding staking tx hash
  ///
  /// - Parameters:
  ///   - request: Request to send to BTCDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bTCDelegation(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationRequest, Babylon_Btcstaking_V1_QueryBTCDelegationResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCDelegationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Btcstaking_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Btcstaking_V1_QueryNIOClient")
internal final class Babylon_Btcstaking_V1_QueryClient: Babylon_Btcstaking_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.btcstaking.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Btcstaking_V1_QueryNIOClient: Babylon_Btcstaking_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.btcstaking.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btcstaking_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Babylon_Btcstaking_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryParamsRequest, Babylon_Btcstaking_V1_QueryParamsResponse>

  func makeParamsByVersionCall(
    _ request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryParamsByVersionRequest, Babylon_Btcstaking_V1_QueryParamsByVersionResponse>

  func makeParamsByBtcheightCall(
    _ request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>

  func makeFinalityProvidersCall(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>

  func makeFinalityProviderCall(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderRequest, Babylon_Btcstaking_V1_QueryFinalityProviderResponse>

  func makeBtcdelegationsCall(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>

  func makeFinalityProviderDelegationsCall(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>

  func makeBtcdelegationCall(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationRequest, Babylon_Btcstaking_V1_QueryBTCDelegationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstaking_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btcstaking_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Babylon_Btcstaking_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryParamsRequest, Babylon_Btcstaking_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeParamsByVersionCall(
    _ request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryParamsByVersionRequest, Babylon_Btcstaking_V1_QueryParamsByVersionResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsByVersionInterceptors() ?? []
    )
  }

  internal func makeParamsByBtcheightCall(
    _ request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByBTCHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsByBTCHeightInterceptors() ?? []
    )
  }

  internal func makeFinalityProvidersCall(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, Babylon_Btcstaking_V1_QueryFinalityProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? []
    )
  }

  internal func makeFinalityProviderCall(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderRequest, Babylon_Btcstaking_V1_QueryFinalityProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? []
    )
  }

  internal func makeBtcdelegationsCall(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, Babylon_Btcstaking_V1_QueryBTCDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCDelegationsInterceptors() ?? []
    )
  }

  internal func makeFinalityProviderDelegationsCall(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviderDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderDelegationsInterceptors() ?? []
    )
  }

  internal func makeBtcdelegationCall(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_QueryBTCDelegationRequest, Babylon_Btcstaking_V1_QueryBTCDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCDelegationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstaking_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Babylon_Btcstaking_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func paramsByVersion(
    _ request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryParamsByVersionResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsByVersionInterceptors() ?? []
    )
  }

  internal func paramsByBTCHeight(
    _ request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByBTCHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsByBTCHeightInterceptors() ?? []
    )
  }

  internal func finalityProviders(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryFinalityProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? []
    )
  }

  internal func finalityProvider(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryFinalityProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? []
    )
  }

  internal func bTCDelegations(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryBTCDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCDelegationsInterceptors() ?? []
    )
  }

  internal func finalityProviderDelegations(
    _ request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviderDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderDelegationsInterceptors() ?? []
    )
  }

  internal func bTCDelegation(
    _ request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_QueryBTCDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCDelegationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Btcstaking_V1_QueryAsyncClient: Babylon_Btcstaking_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Btcstaking_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryParamsRequest, Babylon_Btcstaking_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'paramsByVersion'.
  func makeParamsByVersionInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryParamsByVersionRequest, Babylon_Btcstaking_V1_QueryParamsByVersionResponse>]

  /// - Returns: Interceptors to use when invoking 'paramsByBTCHeight'.
  func makeParamsByBTCHeightInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'finalityProviders'.
  func makeFinalityProvidersInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'finalityProvider'.
  func makeFinalityProviderInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryFinalityProviderRequest, Babylon_Btcstaking_V1_QueryFinalityProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'bTCDelegations'.
  func makeBTCDelegationsInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'finalityProviderDelegations'.
  func makeFinalityProviderDelegationsInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'bTCDelegation'.
  func makeBTCDelegationInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_QueryBTCDelegationRequest, Babylon_Btcstaking_V1_QueryBTCDelegationResponse>]
}

internal enum Babylon_Btcstaking_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.btcstaking.v1.Query",
    methods: [
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.params,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByVersion,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.paramsByBTCHeight,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviders,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProvider,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegations,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.finalityProviderDelegations,
      Babylon_Btcstaking_V1_QueryClientMetadata.Methods.bTCDelegation,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.btcstaking.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let paramsByVersion = GRPCMethodDescriptor(
      name: "ParamsByVersion",
      path: "/babylon.btcstaking.v1.Query/ParamsByVersion",
      type: GRPCCallType.unary
    )

    internal static let paramsByBTCHeight = GRPCMethodDescriptor(
      name: "ParamsByBTCHeight",
      path: "/babylon.btcstaking.v1.Query/ParamsByBTCHeight",
      type: GRPCCallType.unary
    )

    internal static let finalityProviders = GRPCMethodDescriptor(
      name: "FinalityProviders",
      path: "/babylon.btcstaking.v1.Query/FinalityProviders",
      type: GRPCCallType.unary
    )

    internal static let finalityProvider = GRPCMethodDescriptor(
      name: "FinalityProvider",
      path: "/babylon.btcstaking.v1.Query/FinalityProvider",
      type: GRPCCallType.unary
    )

    internal static let bTCDelegations = GRPCMethodDescriptor(
      name: "BTCDelegations",
      path: "/babylon.btcstaking.v1.Query/BTCDelegations",
      type: GRPCCallType.unary
    )

    internal static let finalityProviderDelegations = GRPCMethodDescriptor(
      name: "FinalityProviderDelegations",
      path: "/babylon.btcstaking.v1.Query/FinalityProviderDelegations",
      type: GRPCCallType.unary
    )

    internal static let bTCDelegation = GRPCMethodDescriptor(
      name: "BTCDelegation",
      path: "/babylon.btcstaking.v1.Query/BTCDelegation",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Btcstaking_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Btcstaking_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Babylon_Btcstaking_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryParamsResponse>

  /// ParamsByVersion queries the parameters of the module for a specific version of past params.
  func paramsByVersion(request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryParamsByVersionResponse>

  /// ParamsByBTCHeight queries the parameters of the module for a specific BTC height
  func paramsByBTCHeight(request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>

  /// FinalityProviders queries all finality providers
  func finalityProviders(request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>

  /// FinalityProvider info about one finality provider
  func finalityProvider(request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryFinalityProviderResponse>

  /// BTCDelegations queries all BTC delegations under a given status
  func bTCDelegations(request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>

  /// FinalityProviderDelegations queries all BTC delegations of the given finality provider
  func finalityProviderDelegations(request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>

  /// BTCDelegation retrieves delegation by corresponding staking tx hash
  func bTCDelegation(request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_QueryBTCDelegationResponse>
}

extension Babylon_Btcstaking_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Btcstaking_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ParamsByVersion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryParamsByVersionRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryParamsByVersionResponse>(),
        interceptors: self.interceptors?.makeParamsByVersionInterceptors() ?? [],
        userFunction: self.paramsByVersion(request:context:)
      )

    case "ParamsByBTCHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>(),
        interceptors: self.interceptors?.makeParamsByBTCHeightInterceptors() ?? [],
        userFunction: self.paramsByBTCHeight(request:context:)
      )

    case "FinalityProviders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>(),
        interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? [],
        userFunction: self.finalityProviders(request:context:)
      )

    case "FinalityProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryFinalityProviderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? [],
        userFunction: self.finalityProvider(request:context:)
      )

    case "BTCDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>(),
        interceptors: self.interceptors?.makeBTCDelegationsInterceptors() ?? [],
        userFunction: self.bTCDelegations(request:context:)
      )

    case "FinalityProviderDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderDelegationsInterceptors() ?? [],
        userFunction: self.finalityProviderDelegations(request:context:)
      )

    case "BTCDelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryBTCDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryBTCDelegationResponse>(),
        interceptors: self.interceptors?.makeBTCDelegationInterceptors() ?? [],
        userFunction: self.bTCDelegation(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btcstaking_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btcstaking_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Babylon_Btcstaking_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryParamsResponse

  /// ParamsByVersion queries the parameters of the module for a specific version of past params.
  @Sendable func paramsByVersion(
    request: Babylon_Btcstaking_V1_QueryParamsByVersionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryParamsByVersionResponse

  /// ParamsByBTCHeight queries the parameters of the module for a specific BTC height
  @Sendable func paramsByBTCHeight(
    request: Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse

  /// FinalityProviders queries all finality providers
  @Sendable func finalityProviders(
    request: Babylon_Btcstaking_V1_QueryFinalityProvidersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryFinalityProvidersResponse

  /// FinalityProvider info about one finality provider
  @Sendable func finalityProvider(
    request: Babylon_Btcstaking_V1_QueryFinalityProviderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryFinalityProviderResponse

  /// BTCDelegations queries all BTC delegations under a given status
  @Sendable func bTCDelegations(
    request: Babylon_Btcstaking_V1_QueryBTCDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryBTCDelegationsResponse

  /// FinalityProviderDelegations queries all BTC delegations of the given finality provider
  @Sendable func finalityProviderDelegations(
    request: Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse

  /// BTCDelegation retrieves delegation by corresponding staking tx hash
  @Sendable func bTCDelegation(
    request: Babylon_Btcstaking_V1_QueryBTCDelegationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_QueryBTCDelegationResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstaking_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btcstaking_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Btcstaking_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Btcstaking_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ParamsByVersion":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryParamsByVersionRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryParamsByVersionResponse>(),
        interceptors: self.interceptors?.makeParamsByVersionInterceptors() ?? [],
        wrapping: self.paramsByVersion(request:context:)
      )

    case "ParamsByBTCHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>(),
        interceptors: self.interceptors?.makeParamsByBTCHeightInterceptors() ?? [],
        wrapping: self.paramsByBTCHeight(request:context:)
      )

    case "FinalityProviders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>(),
        interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? [],
        wrapping: self.finalityProviders(request:context:)
      )

    case "FinalityProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryFinalityProviderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? [],
        wrapping: self.finalityProvider(request:context:)
      )

    case "BTCDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>(),
        interceptors: self.interceptors?.makeBTCDelegationsInterceptors() ?? [],
        wrapping: self.bTCDelegations(request:context:)
      )

    case "FinalityProviderDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderDelegationsInterceptors() ?? [],
        wrapping: self.finalityProviderDelegations(request:context:)
      )

    case "BTCDelegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_QueryBTCDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_QueryBTCDelegationResponse>(),
        interceptors: self.interceptors?.makeBTCDelegationInterceptors() ?? [],
        wrapping: self.bTCDelegation(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Btcstaking_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryParamsRequest, Babylon_Btcstaking_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'paramsByVersion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsByVersionInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryParamsByVersionRequest, Babylon_Btcstaking_V1_QueryParamsByVersionResponse>]

  /// - Returns: Interceptors to use when handling 'paramsByBTCHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsByBTCHeightInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryParamsByBTCHeightRequest, Babylon_Btcstaking_V1_QueryParamsByBTCHeightResponse>]

  /// - Returns: Interceptors to use when handling 'finalityProviders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalityProvidersInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryFinalityProvidersRequest, Babylon_Btcstaking_V1_QueryFinalityProvidersResponse>]

  /// - Returns: Interceptors to use when handling 'finalityProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalityProviderInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryFinalityProviderRequest, Babylon_Btcstaking_V1_QueryFinalityProviderResponse>]

  /// - Returns: Interceptors to use when handling 'bTCDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBTCDelegationsInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryBTCDelegationsRequest, Babylon_Btcstaking_V1_QueryBTCDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'finalityProviderDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalityProviderDelegationsInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsRequest, Babylon_Btcstaking_V1_QueryFinalityProviderDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'bTCDelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBTCDelegationInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_QueryBTCDelegationRequest, Babylon_Btcstaking_V1_QueryBTCDelegationResponse>]
}

internal enum Babylon_Btcstaking_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.btcstaking.v1.Query",
    methods: [
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.params,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.paramsByVersion,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.paramsByBTCHeight,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.finalityProviders,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.finalityProvider,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.bTCDelegations,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.finalityProviderDelegations,
      Babylon_Btcstaking_V1_QueryServerMetadata.Methods.bTCDelegation,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.btcstaking.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let paramsByVersion = GRPCMethodDescriptor(
      name: "ParamsByVersion",
      path: "/babylon.btcstaking.v1.Query/ParamsByVersion",
      type: GRPCCallType.unary
    )

    internal static let paramsByBTCHeight = GRPCMethodDescriptor(
      name: "ParamsByBTCHeight",
      path: "/babylon.btcstaking.v1.Query/ParamsByBTCHeight",
      type: GRPCCallType.unary
    )

    internal static let finalityProviders = GRPCMethodDescriptor(
      name: "FinalityProviders",
      path: "/babylon.btcstaking.v1.Query/FinalityProviders",
      type: GRPCCallType.unary
    )

    internal static let finalityProvider = GRPCMethodDescriptor(
      name: "FinalityProvider",
      path: "/babylon.btcstaking.v1.Query/FinalityProvider",
      type: GRPCCallType.unary
    )

    internal static let bTCDelegations = GRPCMethodDescriptor(
      name: "BTCDelegations",
      path: "/babylon.btcstaking.v1.Query/BTCDelegations",
      type: GRPCCallType.unary
    )

    internal static let finalityProviderDelegations = GRPCMethodDescriptor(
      name: "FinalityProviderDelegations",
      path: "/babylon.btcstaking.v1.Query/FinalityProviderDelegations",
      type: GRPCCallType.unary
    )

    internal static let bTCDelegation = GRPCMethodDescriptor(
      name: "BTCDelegation",
      path: "/babylon.btcstaking.v1.Query/BTCDelegation",
      type: GRPCCallType.unary
    )
  }
}
