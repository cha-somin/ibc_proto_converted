//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: panacea/oracle/v2alpha2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Panacea_Oracle_V2alpha2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Panacea_Oracle_V2alpha2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func oracles(
    _ request: Panacea_Oracle_V2alpha2_QueryOraclesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOraclesRequest, Panacea_Oracle_V2alpha2_QueryOraclesResponse>

  func oracle(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRequest, Panacea_Oracle_V2alpha2_QueryOracleResponse>

  func oracleRegistration(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>

  func oracleRegistrationVote(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>

  func params(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, Panacea_Oracle_V2alpha2_QueryParamsResponse>

  func oracleUpgradeInfo(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>
}

extension Panacea_Oracle_V2alpha2_QueryClientProtocol {
  internal var serviceName: String {
    return "panacea.oracle.v2alpha2.Query"
  }

  /// Oracles returns a list of oracles.
  ///
  /// - Parameters:
  ///   - request: Request to send to Oracles.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracles(
    _ request: Panacea_Oracle_V2alpha2_QueryOraclesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOraclesRequest, Panacea_Oracle_V2alpha2_QueryOraclesResponse> {
    return self.makeUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOraclesInterceptors() ?? []
    )
  }

  /// Oracle returns a oracle.
  ///
  /// - Parameters:
  ///   - request: Request to send to Oracle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracle(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRequest, Panacea_Oracle_V2alpha2_QueryOracleResponse> {
    return self.makeUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleInterceptors() ?? []
    )
  }

  /// OracleRegistration returns a OracleRegistration details.
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleRegistration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleRegistration(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse> {
    return self.makeUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleRegistrationInterceptors() ?? []
    )
  }

  /// OracleRegistrationVote a OracleRegistrationVote details.
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleRegistrationVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleRegistrationVote(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse> {
    return self.makeUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistrationVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleRegistrationVoteInterceptors() ?? []
    )
  }

  /// Params returns params of oracle module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, Panacea_Oracle_V2alpha2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// OracleUpgradeInfo returns OracleUpgradeInfo of oracle module.
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleUpgradeInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleUpgradeInfo(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse> {
    return self.makeUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleUpgradeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleUpgradeInfoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Panacea_Oracle_V2alpha2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Panacea_Oracle_V2alpha2_QueryNIOClient")
internal final class Panacea_Oracle_V2alpha2_QueryClient: Panacea_Oracle_V2alpha2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the panacea.oracle.v2alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Panacea_Oracle_V2alpha2_QueryNIOClient: Panacea_Oracle_V2alpha2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the panacea.oracle.v2alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Oracle_V2alpha2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func makeOraclesCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOraclesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOraclesRequest, Panacea_Oracle_V2alpha2_QueryOraclesResponse>

  func makeOracleCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRequest, Panacea_Oracle_V2alpha2_QueryOracleResponse>

  func makeOracleRegistrationCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>

  func makeOracleRegistrationVoteCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>

  func makeParamsCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, Panacea_Oracle_V2alpha2_QueryParamsResponse>

  func makeOracleUpgradeInfoCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Oracle_V2alpha2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Oracle_V2alpha2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeOraclesCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOraclesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOraclesRequest, Panacea_Oracle_V2alpha2_QueryOraclesResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOraclesInterceptors() ?? []
    )
  }

  internal func makeOracleCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRequest, Panacea_Oracle_V2alpha2_QueryOracleResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleInterceptors() ?? []
    )
  }

  internal func makeOracleRegistrationCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleRegistrationInterceptors() ?? []
    )
  }

  internal func makeOracleRegistrationVoteCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistrationVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleRegistrationVoteInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, Panacea_Oracle_V2alpha2_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeOracleUpgradeInfoCall(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleUpgradeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleUpgradeInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Oracle_V2alpha2_QueryAsyncClientProtocol {
  internal func oracles(
    _ request: Panacea_Oracle_V2alpha2_QueryOraclesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOraclesResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOraclesInterceptors() ?? []
    )
  }

  internal func oracle(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleInterceptors() ?? []
    )
  }

  internal func oracleRegistration(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleRegistrationInterceptors() ?? []
    )
  }

  internal func oracleRegistrationVote(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistrationVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleRegistrationVoteInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Oracle_V2alpha2_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func oracleUpgradeInfo(
    _ request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleUpgradeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleUpgradeInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Panacea_Oracle_V2alpha2_QueryAsyncClient: Panacea_Oracle_V2alpha2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Panacea_Oracle_V2alpha2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'oracles'.
  func makeOraclesInterceptors() -> [ClientInterceptor<Panacea_Oracle_V2alpha2_QueryOraclesRequest, Panacea_Oracle_V2alpha2_QueryOraclesResponse>]

  /// - Returns: Interceptors to use when invoking 'oracle'.
  func makeOracleInterceptors() -> [ClientInterceptor<Panacea_Oracle_V2alpha2_QueryOracleRequest, Panacea_Oracle_V2alpha2_QueryOracleResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleRegistration'.
  func makeOracleRegistrationInterceptors() -> [ClientInterceptor<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleRegistrationVote'.
  func makeOracleRegistrationVoteInterceptors() -> [ClientInterceptor<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, Panacea_Oracle_V2alpha2_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleUpgradeInfo'.
  func makeOracleUpgradeInfoInterceptors() -> [ClientInterceptor<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>]
}

internal enum Panacea_Oracle_V2alpha2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "panacea.oracle.v2alpha2.Query",
    methods: [
      Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracles,
      Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracle,
      Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistration,
      Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleRegistrationVote,
      Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.params,
      Panacea_Oracle_V2alpha2_QueryClientMetadata.Methods.oracleUpgradeInfo,
    ]
  )

  internal enum Methods {
    internal static let oracles = GRPCMethodDescriptor(
      name: "Oracles",
      path: "/panacea.oracle.v2alpha2.Query/Oracles",
      type: GRPCCallType.unary
    )

    internal static let oracle = GRPCMethodDescriptor(
      name: "Oracle",
      path: "/panacea.oracle.v2alpha2.Query/Oracle",
      type: GRPCCallType.unary
    )

    internal static let oracleRegistration = GRPCMethodDescriptor(
      name: "OracleRegistration",
      path: "/panacea.oracle.v2alpha2.Query/OracleRegistration",
      type: GRPCCallType.unary
    )

    internal static let oracleRegistrationVote = GRPCMethodDescriptor(
      name: "OracleRegistrationVote",
      path: "/panacea.oracle.v2alpha2.Query/OracleRegistrationVote",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/panacea.oracle.v2alpha2.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let oracleUpgradeInfo = GRPCMethodDescriptor(
      name: "OracleUpgradeInfo",
      path: "/panacea.oracle.v2alpha2.Query/OracleUpgradeInfo",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Panacea_Oracle_V2alpha2_QueryProvider: CallHandlerProvider {
  var interceptors: Panacea_Oracle_V2alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// Oracles returns a list of oracles.
  func oracles(request: Panacea_Oracle_V2alpha2_QueryOraclesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Oracle_V2alpha2_QueryOraclesResponse>

  /// Oracle returns a oracle.
  func oracle(request: Panacea_Oracle_V2alpha2_QueryOracleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Oracle_V2alpha2_QueryOracleResponse>

  /// OracleRegistration returns a OracleRegistration details.
  func oracleRegistration(request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>

  /// OracleRegistrationVote a OracleRegistrationVote details.
  func oracleRegistrationVote(request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>

  /// Params returns params of oracle module.
  func params(request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Oracle_V2alpha2_QueryParamsResponse>

  /// OracleUpgradeInfo returns OracleUpgradeInfo of oracle module.
  func oracleUpgradeInfo(request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>
}

extension Panacea_Oracle_V2alpha2_QueryProvider {
  internal var serviceName: Substring {
    return Panacea_Oracle_V2alpha2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Oracles":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOraclesRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOraclesResponse>(),
        interceptors: self.interceptors?.makeOraclesInterceptors() ?? [],
        userFunction: self.oracles(request:context:)
      )

    case "Oracle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleResponse>(),
        interceptors: self.interceptors?.makeOracleInterceptors() ?? [],
        userFunction: self.oracle(request:context:)
      )

    case "OracleRegistration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>(),
        interceptors: self.interceptors?.makeOracleRegistrationInterceptors() ?? [],
        userFunction: self.oracleRegistration(request:context:)
      )

    case "OracleRegistrationVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>(),
        interceptors: self.interceptors?.makeOracleRegistrationVoteInterceptors() ?? [],
        userFunction: self.oracleRegistrationVote(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "OracleUpgradeInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>(),
        interceptors: self.interceptors?.makeOracleUpgradeInfoInterceptors() ?? [],
        userFunction: self.oracleUpgradeInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Oracle_V2alpha2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Oracle_V2alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// Oracles returns a list of oracles.
  @Sendable func oracles(
    request: Panacea_Oracle_V2alpha2_QueryOraclesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOraclesResponse

  /// Oracle returns a oracle.
  @Sendable func oracle(
    request: Panacea_Oracle_V2alpha2_QueryOracleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleResponse

  /// OracleRegistration returns a OracleRegistration details.
  @Sendable func oracleRegistration(
    request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse

  /// OracleRegistrationVote a OracleRegistrationVote details.
  @Sendable func oracleRegistrationVote(
    request: Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse

  /// Params returns params of oracle module.
  @Sendable func params(
    request: Panacea_Oracle_V2alpha2_QueryOracleParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Oracle_V2alpha2_QueryParamsResponse

  /// OracleUpgradeInfo returns OracleUpgradeInfo of oracle module.
  @Sendable func oracleUpgradeInfo(
    request: Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Oracle_V2alpha2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Oracle_V2alpha2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Panacea_Oracle_V2alpha2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Panacea_Oracle_V2alpha2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Oracles":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOraclesRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOraclesResponse>(),
        interceptors: self.interceptors?.makeOraclesInterceptors() ?? [],
        wrapping: self.oracles(request:context:)
      )

    case "Oracle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleResponse>(),
        interceptors: self.interceptors?.makeOracleInterceptors() ?? [],
        wrapping: self.oracle(request:context:)
      )

    case "OracleRegistration":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>(),
        interceptors: self.interceptors?.makeOracleRegistrationInterceptors() ?? [],
        wrapping: self.oracleRegistration(request:context:)
      )

    case "OracleRegistrationVote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>(),
        interceptors: self.interceptors?.makeOracleRegistrationVoteInterceptors() ?? [],
        wrapping: self.oracleRegistrationVote(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "OracleUpgradeInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>(),
        interceptors: self.interceptors?.makeOracleUpgradeInfoInterceptors() ?? [],
        wrapping: self.oracleUpgradeInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Panacea_Oracle_V2alpha2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'oracles'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOraclesInterceptors() -> [ServerInterceptor<Panacea_Oracle_V2alpha2_QueryOraclesRequest, Panacea_Oracle_V2alpha2_QueryOraclesResponse>]

  /// - Returns: Interceptors to use when handling 'oracle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleInterceptors() -> [ServerInterceptor<Panacea_Oracle_V2alpha2_QueryOracleRequest, Panacea_Oracle_V2alpha2_QueryOracleResponse>]

  /// - Returns: Interceptors to use when handling 'oracleRegistration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleRegistrationInterceptors() -> [ServerInterceptor<Panacea_Oracle_V2alpha2_QueryOracleRegistrationRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationResponse>]

  /// - Returns: Interceptors to use when handling 'oracleRegistrationVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleRegistrationVoteInterceptors() -> [ServerInterceptor<Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteRequest, Panacea_Oracle_V2alpha2_QueryOracleRegistrationVoteResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Panacea_Oracle_V2alpha2_QueryOracleParamsRequest, Panacea_Oracle_V2alpha2_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'oracleUpgradeInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleUpgradeInfoInterceptors() -> [ServerInterceptor<Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoRequest, Panacea_Oracle_V2alpha2_QueryOracleUpgradeInfoResponse>]
}

internal enum Panacea_Oracle_V2alpha2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "panacea.oracle.v2alpha2.Query",
    methods: [
      Panacea_Oracle_V2alpha2_QueryServerMetadata.Methods.oracles,
      Panacea_Oracle_V2alpha2_QueryServerMetadata.Methods.oracle,
      Panacea_Oracle_V2alpha2_QueryServerMetadata.Methods.oracleRegistration,
      Panacea_Oracle_V2alpha2_QueryServerMetadata.Methods.oracleRegistrationVote,
      Panacea_Oracle_V2alpha2_QueryServerMetadata.Methods.params,
      Panacea_Oracle_V2alpha2_QueryServerMetadata.Methods.oracleUpgradeInfo,
    ]
  )

  internal enum Methods {
    internal static let oracles = GRPCMethodDescriptor(
      name: "Oracles",
      path: "/panacea.oracle.v2alpha2.Query/Oracles",
      type: GRPCCallType.unary
    )

    internal static let oracle = GRPCMethodDescriptor(
      name: "Oracle",
      path: "/panacea.oracle.v2alpha2.Query/Oracle",
      type: GRPCCallType.unary
    )

    internal static let oracleRegistration = GRPCMethodDescriptor(
      name: "OracleRegistration",
      path: "/panacea.oracle.v2alpha2.Query/OracleRegistration",
      type: GRPCCallType.unary
    )

    internal static let oracleRegistrationVote = GRPCMethodDescriptor(
      name: "OracleRegistrationVote",
      path: "/panacea.oracle.v2alpha2.Query/OracleRegistrationVote",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/panacea.oracle.v2alpha2.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let oracleUpgradeInfo = GRPCMethodDescriptor(
      name: "OracleUpgradeInfo",
      path: "/panacea.oracle.v2alpha2.Query/OracleUpgradeInfo",
      type: GRPCCallType.unary
    )
  }
}
