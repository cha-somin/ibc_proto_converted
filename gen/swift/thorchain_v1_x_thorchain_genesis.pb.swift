// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Thorchain_lastChainHeight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String = String()

  var height: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Thorchain_mimir {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Thorchain_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pools: [Types_Pool] {
    get {return _storage._pools}
    set {_uniqueStorage()._pools = newValue}
  }

  var liquidityProviders: [Types_LiquidityProvider] {
    get {return _storage._liquidityProviders}
    set {_uniqueStorage()._liquidityProviders = newValue}
  }

  var observedTxInVoters: [Types_ObservedTxVoter] {
    get {return _storage._observedTxInVoters}
    set {_uniqueStorage()._observedTxInVoters = newValue}
  }

  var observedTxOutVoters: [Types_ObservedTxVoter] {
    get {return _storage._observedTxOutVoters}
    set {_uniqueStorage()._observedTxOutVoters = newValue}
  }

  var txOuts: [Types_TxOut] {
    get {return _storage._txOuts}
    set {_uniqueStorage()._txOuts = newValue}
  }

  var nodeAccounts: [Types_NodeAccount] {
    get {return _storage._nodeAccounts}
    set {_uniqueStorage()._nodeAccounts = newValue}
  }

  var vaults: [Types_Vault] {
    get {return _storage._vaults}
    set {_uniqueStorage()._vaults = newValue}
  }

  var reserve: UInt64 {
    get {return _storage._reserve}
    set {_uniqueStorage()._reserve = newValue}
  }

  var lastSignedHeight: Int64 {
    get {return _storage._lastSignedHeight}
    set {_uniqueStorage()._lastSignedHeight = newValue}
  }

  var lastChainHeights: [Thorchain_lastChainHeight] {
    get {return _storage._lastChainHeights}
    set {_uniqueStorage()._lastChainHeights = newValue}
  }

  var reserveContributors: [Types_ReserveContributor] {
    get {return _storage._reserveContributors}
    set {_uniqueStorage()._reserveContributors = newValue}
  }

  var network: Types_Network {
    get {return _storage._network ?? Types_Network()}
    set {_uniqueStorage()._network = newValue}
  }
  /// Returns true if `network` has been explicitly set.
  var hasNetwork: Bool {return _storage._network != nil}
  /// Clears the value of `network`. Subsequent reads from it will return its default value.
  mutating func clearNetwork() {_uniqueStorage()._network = nil}

  var orderbookItems: [Types_MsgSwap] {
    get {return _storage._orderbookItems}
    set {_uniqueStorage()._orderbookItems = newValue}
  }

  var networkFees: [Types_NetworkFee] {
    get {return _storage._networkFees}
    set {_uniqueStorage()._networkFees = newValue}
  }

  var chainContracts: [Types_ChainContract] {
    get {return _storage._chainContracts}
    set {_uniqueStorage()._chainContracts = newValue}
  }

  var thornames: [Types_THORName] {
    get {return _storage._thornames}
    set {_uniqueStorage()._thornames = newValue}
  }

  var mimirs: [Thorchain_mimir] {
    get {return _storage._mimirs}
    set {_uniqueStorage()._mimirs = newValue}
  }

  var storeVersion: Int64 {
    get {return _storage._storeVersion}
    set {_uniqueStorage()._storeVersion = newValue}
  }

  var bondProviders: [Types_BondProviders] {
    get {return _storage._bondProviders}
    set {_uniqueStorage()._bondProviders = newValue}
  }

  var pol: Types_ProtocolOwnedLiquidity {
    get {return _storage._pol ?? Types_ProtocolOwnedLiquidity()}
    set {_uniqueStorage()._pol = newValue}
  }
  /// Returns true if `pol` has been explicitly set.
  var hasPol: Bool {return _storage._pol != nil}
  /// Clears the value of `pol`. Subsequent reads from it will return its default value.
  mutating func clearPol() {_uniqueStorage()._pol = nil}

  var loans: [Types_Loan] {
    get {return _storage._loans}
    set {_uniqueStorage()._loans = newValue}
  }

  var streamingSwaps: [Types_StreamingSwap] {
    get {return _storage._streamingSwaps}
    set {_uniqueStorage()._streamingSwaps = newValue}
  }

  var swapQueueItems: [Types_MsgSwap] {
    get {return _storage._swapQueueItems}
    set {_uniqueStorage()._swapQueueItems = newValue}
  }

  var swapperClout: [Types_SwapperClout] {
    get {return _storage._swapperClout}
    set {_uniqueStorage()._swapperClout = newValue}
  }

  var tradeAccounts: [Types_TradeAccount] {
    get {return _storage._tradeAccounts}
    set {_uniqueStorage()._tradeAccounts = newValue}
  }

  var tradeUnits: [Types_TradeUnit] {
    get {return _storage._tradeUnits}
    set {_uniqueStorage()._tradeUnits = newValue}
  }

  var outboundFeeWithheldRune: [Common_Coin] {
    get {return _storage._outboundFeeWithheldRune}
    set {_uniqueStorage()._outboundFeeWithheldRune = newValue}
  }

  var outboundFeeSpentRune: [Common_Coin] {
    get {return _storage._outboundFeeSpentRune}
    set {_uniqueStorage()._outboundFeeSpentRune = newValue}
  }

  var runeProviders: [Types_RUNEProvider] {
    get {return _storage._runeProviders}
    set {_uniqueStorage()._runeProviders = newValue}
  }

  var runePool: Types_RUNEPool {
    get {return _storage._runePool ?? Types_RUNEPool()}
    set {_uniqueStorage()._runePool = newValue}
  }
  /// Returns true if `runePool` has been explicitly set.
  var hasRunePool: Bool {return _storage._runePool != nil}
  /// Clears the value of `runePool`. Subsequent reads from it will return its default value.
  mutating func clearRunePool() {_uniqueStorage()._runePool = nil}

  var nodeMimirs: [Types_NodeMimir] {
    get {return _storage._nodeMimirs}
    set {_uniqueStorage()._nodeMimirs = newValue}
  }

  var affiliateCollectors: [Types_AffiliateFeeCollector] {
    get {return _storage._affiliateCollectors}
    set {_uniqueStorage()._affiliateCollectors = newValue}
  }

  var loanTotalCollateral: [Common_Coin] {
    get {return _storage._loanTotalCollateral}
    set {_uniqueStorage()._loanTotalCollateral = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Thorchain_lastChainHeight: @unchecked Sendable {}
extension Thorchain_mimir: @unchecked Sendable {}
extension Thorchain_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "thorchain"

extension Thorchain_lastChainHeight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".lastChainHeight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Thorchain_lastChainHeight, rhs: Thorchain_lastChainHeight) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Thorchain_mimir: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".mimir"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Thorchain_mimir, rhs: Thorchain_mimir) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Thorchain_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pools"),
    2: .standard(proto: "liquidity_providers"),
    3: .standard(proto: "observed_tx_in_voters"),
    4: .standard(proto: "observed_tx_out_voters"),
    5: .standard(proto: "tx_outs"),
    6: .standard(proto: "node_accounts"),
    7: .same(proto: "vaults"),
    8: .same(proto: "reserve"),
    10: .standard(proto: "last_signed_height"),
    11: .standard(proto: "last_chain_heights"),
    12: .standard(proto: "reserve_contributors"),
    13: .same(proto: "network"),
    19: .standard(proto: "orderbook_items"),
    20: .standard(proto: "network_fees"),
    22: .standard(proto: "chain_contracts"),
    23: .same(proto: "THORNames"),
    24: .same(proto: "mimirs"),
    25: .standard(proto: "store_version"),
    26: .standard(proto: "bond_providers"),
    27: .same(proto: "POL"),
    28: .same(proto: "loans"),
    29: .standard(proto: "streaming_swaps"),
    30: .standard(proto: "swap_queue_items"),
    31: .standard(proto: "swapper_clout"),
    32: .standard(proto: "trade_accounts"),
    33: .standard(proto: "trade_units"),
    34: .standard(proto: "outbound_fee_withheld_rune"),
    35: .standard(proto: "outbound_fee_spent_rune"),
    36: .standard(proto: "rune_providers"),
    37: .standard(proto: "rune_pool"),
    38: .same(proto: "nodeMimirs"),
    39: .standard(proto: "affiliate_collectors"),
    40: .standard(proto: "loan_total_collateral"),
  ]

  fileprivate class _StorageClass {
    var _pools: [Types_Pool] = []
    var _liquidityProviders: [Types_LiquidityProvider] = []
    var _observedTxInVoters: [Types_ObservedTxVoter] = []
    var _observedTxOutVoters: [Types_ObservedTxVoter] = []
    var _txOuts: [Types_TxOut] = []
    var _nodeAccounts: [Types_NodeAccount] = []
    var _vaults: [Types_Vault] = []
    var _reserve: UInt64 = 0
    var _lastSignedHeight: Int64 = 0
    var _lastChainHeights: [Thorchain_lastChainHeight] = []
    var _reserveContributors: [Types_ReserveContributor] = []
    var _network: Types_Network? = nil
    var _orderbookItems: [Types_MsgSwap] = []
    var _networkFees: [Types_NetworkFee] = []
    var _chainContracts: [Types_ChainContract] = []
    var _thornames: [Types_THORName] = []
    var _mimirs: [Thorchain_mimir] = []
    var _storeVersion: Int64 = 0
    var _bondProviders: [Types_BondProviders] = []
    var _pol: Types_ProtocolOwnedLiquidity? = nil
    var _loans: [Types_Loan] = []
    var _streamingSwaps: [Types_StreamingSwap] = []
    var _swapQueueItems: [Types_MsgSwap] = []
    var _swapperClout: [Types_SwapperClout] = []
    var _tradeAccounts: [Types_TradeAccount] = []
    var _tradeUnits: [Types_TradeUnit] = []
    var _outboundFeeWithheldRune: [Common_Coin] = []
    var _outboundFeeSpentRune: [Common_Coin] = []
    var _runeProviders: [Types_RUNEProvider] = []
    var _runePool: Types_RUNEPool? = nil
    var _nodeMimirs: [Types_NodeMimir] = []
    var _affiliateCollectors: [Types_AffiliateFeeCollector] = []
    var _loanTotalCollateral: [Common_Coin] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pools = source._pools
      _liquidityProviders = source._liquidityProviders
      _observedTxInVoters = source._observedTxInVoters
      _observedTxOutVoters = source._observedTxOutVoters
      _txOuts = source._txOuts
      _nodeAccounts = source._nodeAccounts
      _vaults = source._vaults
      _reserve = source._reserve
      _lastSignedHeight = source._lastSignedHeight
      _lastChainHeights = source._lastChainHeights
      _reserveContributors = source._reserveContributors
      _network = source._network
      _orderbookItems = source._orderbookItems
      _networkFees = source._networkFees
      _chainContracts = source._chainContracts
      _thornames = source._thornames
      _mimirs = source._mimirs
      _storeVersion = source._storeVersion
      _bondProviders = source._bondProviders
      _pol = source._pol
      _loans = source._loans
      _streamingSwaps = source._streamingSwaps
      _swapQueueItems = source._swapQueueItems
      _swapperClout = source._swapperClout
      _tradeAccounts = source._tradeAccounts
      _tradeUnits = source._tradeUnits
      _outboundFeeWithheldRune = source._outboundFeeWithheldRune
      _outboundFeeSpentRune = source._outboundFeeSpentRune
      _runeProviders = source._runeProviders
      _runePool = source._runePool
      _nodeMimirs = source._nodeMimirs
      _affiliateCollectors = source._affiliateCollectors
      _loanTotalCollateral = source._loanTotalCollateral
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._pools) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._liquidityProviders) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._observedTxInVoters) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._observedTxOutVoters) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._txOuts) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._nodeAccounts) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._vaults) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._reserve) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._lastSignedHeight) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._lastChainHeights) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._reserveContributors) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._network) }()
        case 19: try { try decoder.decodeRepeatedMessageField(value: &_storage._orderbookItems) }()
        case 20: try { try decoder.decodeRepeatedMessageField(value: &_storage._networkFees) }()
        case 22: try { try decoder.decodeRepeatedMessageField(value: &_storage._chainContracts) }()
        case 23: try { try decoder.decodeRepeatedMessageField(value: &_storage._thornames) }()
        case 24: try { try decoder.decodeRepeatedMessageField(value: &_storage._mimirs) }()
        case 25: try { try decoder.decodeSingularInt64Field(value: &_storage._storeVersion) }()
        case 26: try { try decoder.decodeRepeatedMessageField(value: &_storage._bondProviders) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._pol) }()
        case 28: try { try decoder.decodeRepeatedMessageField(value: &_storage._loans) }()
        case 29: try { try decoder.decodeRepeatedMessageField(value: &_storage._streamingSwaps) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._swapQueueItems) }()
        case 31: try { try decoder.decodeRepeatedMessageField(value: &_storage._swapperClout) }()
        case 32: try { try decoder.decodeRepeatedMessageField(value: &_storage._tradeAccounts) }()
        case 33: try { try decoder.decodeRepeatedMessageField(value: &_storage._tradeUnits) }()
        case 34: try { try decoder.decodeRepeatedMessageField(value: &_storage._outboundFeeWithheldRune) }()
        case 35: try { try decoder.decodeRepeatedMessageField(value: &_storage._outboundFeeSpentRune) }()
        case 36: try { try decoder.decodeRepeatedMessageField(value: &_storage._runeProviders) }()
        case 37: try { try decoder.decodeSingularMessageField(value: &_storage._runePool) }()
        case 38: try { try decoder.decodeRepeatedMessageField(value: &_storage._nodeMimirs) }()
        case 39: try { try decoder.decodeRepeatedMessageField(value: &_storage._affiliateCollectors) }()
        case 40: try { try decoder.decodeRepeatedMessageField(value: &_storage._loanTotalCollateral) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._pools.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pools, fieldNumber: 1)
      }
      if !_storage._liquidityProviders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._liquidityProviders, fieldNumber: 2)
      }
      if !_storage._observedTxInVoters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._observedTxInVoters, fieldNumber: 3)
      }
      if !_storage._observedTxOutVoters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._observedTxOutVoters, fieldNumber: 4)
      }
      if !_storage._txOuts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._txOuts, fieldNumber: 5)
      }
      if !_storage._nodeAccounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._nodeAccounts, fieldNumber: 6)
      }
      if !_storage._vaults.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vaults, fieldNumber: 7)
      }
      if _storage._reserve != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._reserve, fieldNumber: 8)
      }
      if _storage._lastSignedHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastSignedHeight, fieldNumber: 10)
      }
      if !_storage._lastChainHeights.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._lastChainHeights, fieldNumber: 11)
      }
      if !_storage._reserveContributors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._reserveContributors, fieldNumber: 12)
      }
      try { if let v = _storage._network {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if !_storage._orderbookItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._orderbookItems, fieldNumber: 19)
      }
      if !_storage._networkFees.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._networkFees, fieldNumber: 20)
      }
      if !_storage._chainContracts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chainContracts, fieldNumber: 22)
      }
      if !_storage._thornames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thornames, fieldNumber: 23)
      }
      if !_storage._mimirs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._mimirs, fieldNumber: 24)
      }
      if _storage._storeVersion != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storeVersion, fieldNumber: 25)
      }
      if !_storage._bondProviders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bondProviders, fieldNumber: 26)
      }
      try { if let v = _storage._pol {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      if !_storage._loans.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._loans, fieldNumber: 28)
      }
      if !_storage._streamingSwaps.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._streamingSwaps, fieldNumber: 29)
      }
      if !_storage._swapQueueItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._swapQueueItems, fieldNumber: 30)
      }
      if !_storage._swapperClout.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._swapperClout, fieldNumber: 31)
      }
      if !_storage._tradeAccounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tradeAccounts, fieldNumber: 32)
      }
      if !_storage._tradeUnits.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tradeUnits, fieldNumber: 33)
      }
      if !_storage._outboundFeeWithheldRune.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outboundFeeWithheldRune, fieldNumber: 34)
      }
      if !_storage._outboundFeeSpentRune.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outboundFeeSpentRune, fieldNumber: 35)
      }
      if !_storage._runeProviders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._runeProviders, fieldNumber: 36)
      }
      try { if let v = _storage._runePool {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      } }()
      if !_storage._nodeMimirs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._nodeMimirs, fieldNumber: 38)
      }
      if !_storage._affiliateCollectors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._affiliateCollectors, fieldNumber: 39)
      }
      if !_storage._loanTotalCollateral.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._loanTotalCollateral, fieldNumber: 40)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Thorchain_GenesisState, rhs: Thorchain_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pools != rhs_storage._pools {return false}
        if _storage._liquidityProviders != rhs_storage._liquidityProviders {return false}
        if _storage._observedTxInVoters != rhs_storage._observedTxInVoters {return false}
        if _storage._observedTxOutVoters != rhs_storage._observedTxOutVoters {return false}
        if _storage._txOuts != rhs_storage._txOuts {return false}
        if _storage._nodeAccounts != rhs_storage._nodeAccounts {return false}
        if _storage._vaults != rhs_storage._vaults {return false}
        if _storage._reserve != rhs_storage._reserve {return false}
        if _storage._lastSignedHeight != rhs_storage._lastSignedHeight {return false}
        if _storage._lastChainHeights != rhs_storage._lastChainHeights {return false}
        if _storage._reserveContributors != rhs_storage._reserveContributors {return false}
        if _storage._network != rhs_storage._network {return false}
        if _storage._orderbookItems != rhs_storage._orderbookItems {return false}
        if _storage._networkFees != rhs_storage._networkFees {return false}
        if _storage._chainContracts != rhs_storage._chainContracts {return false}
        if _storage._thornames != rhs_storage._thornames {return false}
        if _storage._mimirs != rhs_storage._mimirs {return false}
        if _storage._storeVersion != rhs_storage._storeVersion {return false}
        if _storage._bondProviders != rhs_storage._bondProviders {return false}
        if _storage._pol != rhs_storage._pol {return false}
        if _storage._loans != rhs_storage._loans {return false}
        if _storage._streamingSwaps != rhs_storage._streamingSwaps {return false}
        if _storage._swapQueueItems != rhs_storage._swapQueueItems {return false}
        if _storage._swapperClout != rhs_storage._swapperClout {return false}
        if _storage._tradeAccounts != rhs_storage._tradeAccounts {return false}
        if _storage._tradeUnits != rhs_storage._tradeUnits {return false}
        if _storage._outboundFeeWithheldRune != rhs_storage._outboundFeeWithheldRune {return false}
        if _storage._outboundFeeSpentRune != rhs_storage._outboundFeeSpentRune {return false}
        if _storage._runeProviders != rhs_storage._runeProviders {return false}
        if _storage._runePool != rhs_storage._runePool {return false}
        if _storage._nodeMimirs != rhs_storage._nodeMimirs {return false}
        if _storage._affiliateCollectors != rhs_storage._affiliateCollectors {return false}
        if _storage._loanTotalCollateral != rhs_storage._loanTotalCollateral {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
