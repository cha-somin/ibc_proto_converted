// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/stakeibc/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the stakeibc module's genesis state.
struct Stride_Stakeibc_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stride_Stakeibc_Params {
    get {return _storage._params ?? Stride_Stakeibc_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var portID: String {
    get {return _storage._portID}
    set {_uniqueStorage()._portID = newValue}
  }

  /// list of zones that are registered by the protocol
  var hostZoneList: [Stride_Stakeibc_HostZone] {
    get {return _storage._hostZoneList}
    set {_uniqueStorage()._hostZoneList = newValue}
  }

  var epochTrackerList: [Stride_Stakeibc_EpochTracker] {
    get {return _storage._epochTrackerList}
    set {_uniqueStorage()._epochTrackerList = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stride_Stakeibc_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.stakeibc"

extension Stride_Stakeibc_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "port_id"),
    5: .standard(proto: "host_zone_list"),
    10: .standard(proto: "epoch_tracker_list"),
  ]

  fileprivate class _StorageClass {
    var _params: Stride_Stakeibc_Params? = nil
    var _portID: String = String()
    var _hostZoneList: [Stride_Stakeibc_HostZone] = []
    var _epochTrackerList: [Stride_Stakeibc_EpochTracker] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _portID = source._portID
      _hostZoneList = source._hostZoneList
      _epochTrackerList = source._epochTrackerList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._portID) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._hostZoneList) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._epochTrackerList) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._portID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._portID, fieldNumber: 2)
      }
      if !_storage._hostZoneList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._hostZoneList, fieldNumber: 5)
      }
      if !_storage._epochTrackerList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._epochTrackerList, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_GenesisState, rhs: Stride_Stakeibc_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._portID != rhs_storage._portID {return false}
        if _storage._hostZoneList != rhs_storage._hostZoneList {return false}
        if _storage._epochTrackerList != rhs_storage._epochTrackerList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
