// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quicksilver/airdrop/v1/airdrop.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Action is used as an enum to denote specific actions or tasks.
enum Quicksilver_Airdrop_V1_Action: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Undefined action (per protobuf spec)
  case undefined // = 0

  /// Initial claim action
  case initialClaim // = 1

  /// Deposit tier 1 (e.g. > 5% of base_value)
  case depositT1 // = 2

  /// Deposit tier 2 (e.g. > 10% of base_value)
  case depositT2 // = 3

  /// Deposit tier 3 (e.g. > 15% of base_value)
  case depositT3 // = 4

  /// Deposit tier 4 (e.g. > 22% of base_value)
  case depositT4 // = 5

  /// Deposit tier 5 (e.g. > 30% of base_value)
  case depositT5 // = 6

  /// Active QCK delegation
  case stakeQck // = 7

  /// Intent is set
  case signalIntent // = 8

  /// Cast governance vote on QS
  case qsgov // = 9

  /// Governance By Proxy (GbP): cast vote on remote zone
  case gbP // = 10

  /// Provide liquidity on Osmosis
  case osmosis // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .initialClaim
    case 2: self = .depositT1
    case 3: self = .depositT2
    case 4: self = .depositT3
    case 5: self = .depositT4
    case 6: self = .depositT5
    case 7: self = .stakeQck
    case 8: self = .signalIntent
    case 9: self = .qsgov
    case 10: self = .gbP
    case 11: self = .osmosis
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .initialClaim: return 1
    case .depositT1: return 2
    case .depositT2: return 3
    case .depositT3: return 4
    case .depositT4: return 5
    case .depositT5: return 6
    case .stakeQck: return 7
    case .signalIntent: return 8
    case .qsgov: return 9
    case .gbP: return 10
    case .osmosis: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Quicksilver_Airdrop_V1_Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Quicksilver_Airdrop_V1_Action] = [
    .undefined,
    .initialClaim,
    .depositT1,
    .depositT2,
    .depositT3,
    .depositT4,
    .depositT5,
    .stakeQck,
    .signalIntent,
    .qsgov,
    .gbP,
    .osmosis,
  ]
}

#endif  // swift(>=4.2)

/// Status is used as an enum to denote zone status.
enum Quicksilver_Airdrop_V1_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case active // = 1
  case future // = 2
  case expired // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .active
    case 2: self = .future
    case 3: self = .expired
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .active: return 1
    case .future: return 2
    case .expired: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Quicksilver_Airdrop_V1_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Quicksilver_Airdrop_V1_Status] = [
    .undefined,
    .active,
    .future,
    .expired,
  ]
}

#endif  // swift(>=4.2)

/// ZoneDrop represents an airdrop for a specific zone.
struct Quicksilver_Airdrop_V1_ZoneDrop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var decay: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _decay ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_decay = newValue}
  }
  /// Returns true if `decay` has been explicitly set.
  var hasDecay: Bool {return self._decay != nil}
  /// Clears the value of `decay`. Subsequent reads from it will return its default value.
  mutating func clearDecay() {self._decay = nil}

  var allocation: UInt64 = 0

  var actions: [String] = []

  var isConcluded: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _decay: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// ClaimRecord represents a users' claim (including completed claims) for a
/// given zone.
struct Quicksilver_Airdrop_V1_ClaimRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var address: String = String()

  /// Protobuf3 does not allow enum as map key
  var actionsCompleted: Dictionary<Int32,Quicksilver_Airdrop_V1_CompletedAction> = [:]

  var maxAllocation: UInt64 = 0

  var baseValue: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CompletedAction represents a claim action completed by the user.
struct Quicksilver_Airdrop_V1_CompletedAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var completeTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completeTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completeTime = newValue}
  }
  /// Returns true if `completeTime` has been explicitly set.
  var hasCompleteTime: Bool {return self._completeTime != nil}
  /// Clears the value of `completeTime`. Subsequent reads from it will return its default value.
  mutating func clearCompleteTime() {self._completeTime = nil}

  var claimAmount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _completeTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quicksilver_Airdrop_V1_Action: @unchecked Sendable {}
extension Quicksilver_Airdrop_V1_Status: @unchecked Sendable {}
extension Quicksilver_Airdrop_V1_ZoneDrop: @unchecked Sendable {}
extension Quicksilver_Airdrop_V1_ClaimRecord: @unchecked Sendable {}
extension Quicksilver_Airdrop_V1_CompletedAction: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quicksilver.airdrop.v1"

extension Quicksilver_Airdrop_V1_Action: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ActionUndefined"),
    1: .same(proto: "ActionInitialClaim"),
    2: .same(proto: "ActionDepositT1"),
    3: .same(proto: "ActionDepositT2"),
    4: .same(proto: "ActionDepositT3"),
    5: .same(proto: "ActionDepositT4"),
    6: .same(proto: "ActionDepositT5"),
    7: .same(proto: "ActionStakeQCK"),
    8: .same(proto: "ActionSignalIntent"),
    9: .same(proto: "ActionQSGov"),
    10: .same(proto: "ActionGbP"),
    11: .same(proto: "ActionOsmosis"),
  ]
}

extension Quicksilver_Airdrop_V1_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "StatusUndefined"),
    1: .same(proto: "StatusActive"),
    2: .same(proto: "StatusFuture"),
    3: .same(proto: "StatusExpired"),
  ]
}

extension Quicksilver_Airdrop_V1_ZoneDrop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ZoneDrop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "start_time"),
    3: .same(proto: "duration"),
    4: .same(proto: "decay"),
    5: .same(proto: "allocation"),
    6: .same(proto: "actions"),
    7: .standard(proto: "is_concluded"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._decay) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.allocation) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.actions) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isConcluded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._decay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.allocation != 0 {
      try visitor.visitSingularUInt64Field(value: self.allocation, fieldNumber: 5)
    }
    if !self.actions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.actions, fieldNumber: 6)
    }
    if self.isConcluded != false {
      try visitor.visitSingularBoolField(value: self.isConcluded, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Airdrop_V1_ZoneDrop, rhs: Quicksilver_Airdrop_V1_ZoneDrop) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._decay != rhs._decay {return false}
    if lhs.allocation != rhs.allocation {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.isConcluded != rhs.isConcluded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Airdrop_V1_ClaimRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "address"),
    3: .standard(proto: "actions_completed"),
    4: .standard(proto: "max_allocation"),
    5: .standard(proto: "base_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Quicksilver_Airdrop_V1_CompletedAction>.self, value: &self.actionsCompleted) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.maxAllocation) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.baseValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if !self.actionsCompleted.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Quicksilver_Airdrop_V1_CompletedAction>.self, value: self.actionsCompleted, fieldNumber: 3)
    }
    if self.maxAllocation != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxAllocation, fieldNumber: 4)
    }
    if self.baseValue != 0 {
      try visitor.visitSingularUInt64Field(value: self.baseValue, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Airdrop_V1_ClaimRecord, rhs: Quicksilver_Airdrop_V1_ClaimRecord) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.actionsCompleted != rhs.actionsCompleted {return false}
    if lhs.maxAllocation != rhs.maxAllocation {return false}
    if lhs.baseValue != rhs.baseValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Airdrop_V1_CompletedAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompletedAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "complete_time"),
    2: .standard(proto: "claim_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._completeTime) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.claimAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._completeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.claimAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.claimAmount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Airdrop_V1_CompletedAction, rhs: Quicksilver_Airdrop_V1_CompletedAction) -> Bool {
    if lhs._completeTime != rhs._completeTime {return false}
    if lhs.claimAmount != rhs.claimAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
