// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ixo/claims/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ixo_Claims_V1beta1_MsgCreateCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// entity is the DID of the entity for which the claims are being created
  var entity: String = String()

  /// signer address
  var signer: String = String()

  /// protocol is the DID of the claim protocol
  var `protocol`: String = String()

  /// startDate is the date after which claims may be submitted
  var startDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  var hasStartDate: Bool {return self._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  mutating func clearStartDate() {self._startDate = nil}

  /// endDate is the date after which no more claims may be submitted (no endDate
  /// is allowed)
  var endDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  var hasEndDate: Bool {return self._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  mutating func clearEndDate() {self._endDate = nil}

  /// quota is the maximum number of claims that may be submitted, 0 is unlimited
  var quota: UInt64 = 0

  /// state is the current state of this Collection (open, paused, closed)
  var state: Ixo_Claims_V1beta1_CollectionState = .open

  /// payments is the amount paid for claim submission, evaluation, approval, or
  /// rejection
  var payments: Ixo_Claims_V1beta1_Payments {
    get {return _payments ?? Ixo_Claims_V1beta1_Payments()}
    set {_payments = newValue}
  }
  /// Returns true if `payments` has been explicitly set.
  var hasPayments: Bool {return self._payments != nil}
  /// Clears the value of `payments`. Subsequent reads from it will return its default value.
  mutating func clearPayments() {self._payments = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _payments: Ixo_Claims_V1beta1_Payments? = nil
}

struct Ixo_Claims_V1beta1_MsgCreateCollectionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_MsgSubmitClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// collection_id indicates to which Collection this claim belongs
  var collectionID: String = String()

  /// claimID is the unique identifier of the claim in the cid hash format
  var claimID: String = String()

  /// agent is the DID of the agent submitting the claim
  var agentDid: String = String()

  var agentAddress: String = String()

  /// admin address used to sign this message, validated against Collection Admin
  var adminAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_MsgSubmitClaimResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_MsgEvaluateClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// claimID is the unique identifier of the claim to make evaluation against
  var claimID: String = String()

  /// claimID is the unique identifier of the claim to make evaluation against
  var collectionID: String = String()

  /// oracle is the DID of the Oracle entity that evaluates the claim
  var oracle: String = String()

  /// agent is the DID of the agent that submits the evaluation
  var agentDid: String = String()

  var agentAddress: String = String()

  /// admin address used to sign this message, validated against Collection Admin
  var adminAddress: String = String()

  /// status is the evaluation status expressed as an integer (2=approved,
  /// 3=rejected, ...)
  var status: Ixo_Claims_V1beta1_EvaluationStatus = .pending

  /// reason is the code expressed as an integer, for why the evaluation result
  /// was given (codes defined by evaluator)
  var reason: UInt32 = 0

  /// verificationProof is the cid of the evaluation Verfiable Credential
  var verificationProof: String = String()

  /// custom amount specified by evaluator for claim approval, if empty list then
  /// use default by Collection
  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_MsgEvaluateClaimResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Agent laying dispute must be admin for Collection, or controller on
/// Collection entity, or have authz cap, aka is agent
struct Ixo_Claims_V1beta1_MsgDisputeClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// subject_id for which this dispute is against, for now can only lay disputes
  /// against claims
  var subjectID: String = String()

  /// agent is the DID of the agent disputing the claim, agent detials wont be
  /// saved in kvStore
  var agentDid: String = String()

  var agentAddress: String = String()

  /// type is expressed as an integer, interpreted by the client
  var disputeType: Int32 = 0

  var data: Ixo_Claims_V1beta1_DisputeData {
    get {return _data ?? Ixo_Claims_V1beta1_DisputeData()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Ixo_Claims_V1beta1_DisputeData? = nil
}

struct Ixo_Claims_V1beta1_MsgDisputeClaimResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_MsgWithdrawPayment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// claim_id the withdrawal is for
  var claimID: String = String()

  /// Inputs to the multisend tx to run to withdraw payment
  var inputs: [Ixo_Claims_V1beta1_Input] = []

  /// Outputs for the multisend tx to run to withdraw payment
  var outputs: [Ixo_Claims_V1beta1_Output] = []

  /// payment type to keep track what payment is for and mark claim payment
  /// accordingly
  var paymentType: Ixo_Claims_V1beta1_PaymentType = .submission

  /// if empty(nil) then no contract payment
  var contract1155Payment: Ixo_Claims_V1beta1_Contract1155Payment {
    get {return _contract1155Payment ?? Ixo_Claims_V1beta1_Contract1155Payment()}
    set {_contract1155Payment = newValue}
  }
  /// Returns true if `contract1155Payment` has been explicitly set.
  var hasContract1155Payment: Bool {return self._contract1155Payment != nil}
  /// Clears the value of `contract1155Payment`. Subsequent reads from it will return its default value.
  mutating func clearContract1155Payment() {self._contract1155Payment = nil}

  /// for contract payment
  var toAddress: String = String()

  /// for contract payment
  var fromAddress: String = String()

  /// date that grantee can execute authorization, calculated from created date
  /// plus the timeout on Collection payments
  var releaseDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _releaseDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_releaseDate = newValue}
  }
  /// Returns true if `releaseDate` has been explicitly set.
  var hasReleaseDate: Bool {return self._releaseDate != nil}
  /// Clears the value of `releaseDate`. Subsequent reads from it will return its default value.
  mutating func clearReleaseDate() {self._releaseDate = nil}

  /// admin address used to sign this message, validated against Collection Admin
  var adminAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contract1155Payment: Ixo_Claims_V1beta1_Contract1155Payment? = nil
  fileprivate var _releaseDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Ixo_Claims_V1beta1_MsgWithdrawPaymentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ixo_Claims_V1beta1_MsgCreateCollection: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgCreateCollectionResponse: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgSubmitClaim: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgSubmitClaimResponse: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgEvaluateClaim: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgEvaluateClaimResponse: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgDisputeClaim: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgDisputeClaimResponse: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgWithdrawPayment: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_MsgWithdrawPaymentResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ixo.claims.v1beta1"

extension Ixo_Claims_V1beta1_MsgCreateCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "signer"),
    3: .same(proto: "protocol"),
    4: .standard(proto: "start_date"),
    5: .standard(proto: "end_date"),
    6: .same(proto: "quota"),
    7: .same(proto: "state"),
    8: .same(proto: "payments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entity) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.`protocol`) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._startDate) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._endDate) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.quota) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._payments) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.entity.isEmpty {
      try visitor.visitSingularStringField(value: self.entity, fieldNumber: 1)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 2)
    }
    if !self.`protocol`.isEmpty {
      try visitor.visitSingularStringField(value: self.`protocol`, fieldNumber: 3)
    }
    try { if let v = self._startDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._endDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.quota != 0 {
      try visitor.visitSingularUInt64Field(value: self.quota, fieldNumber: 6)
    }
    if self.state != .open {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 7)
    }
    try { if let v = self._payments {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgCreateCollection, rhs: Ixo_Claims_V1beta1_MsgCreateCollection) -> Bool {
    if lhs.entity != rhs.entity {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs._startDate != rhs._startDate {return false}
    if lhs._endDate != rhs._endDate {return false}
    if lhs.quota != rhs.quota {return false}
    if lhs.state != rhs.state {return false}
    if lhs._payments != rhs._payments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgCreateCollectionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateCollectionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgCreateCollectionResponse, rhs: Ixo_Claims_V1beta1_MsgCreateCollectionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgSubmitClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collection_id"),
    2: .standard(proto: "claim_id"),
    3: .standard(proto: "agent_did"),
    4: .standard(proto: "agent_address"),
    5: .standard(proto: "admin_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.claimID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.agentDid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.agentAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.adminAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 1)
    }
    if !self.claimID.isEmpty {
      try visitor.visitSingularStringField(value: self.claimID, fieldNumber: 2)
    }
    if !self.agentDid.isEmpty {
      try visitor.visitSingularStringField(value: self.agentDid, fieldNumber: 3)
    }
    if !self.agentAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.agentAddress, fieldNumber: 4)
    }
    if !self.adminAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgSubmitClaim, rhs: Ixo_Claims_V1beta1_MsgSubmitClaim) -> Bool {
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.claimID != rhs.claimID {return false}
    if lhs.agentDid != rhs.agentDid {return false}
    if lhs.agentAddress != rhs.agentAddress {return false}
    if lhs.adminAddress != rhs.adminAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgSubmitClaimResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitClaimResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgSubmitClaimResponse, rhs: Ixo_Claims_V1beta1_MsgSubmitClaimResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgEvaluateClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEvaluateClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "claim_id"),
    2: .standard(proto: "collection_id"),
    3: .same(proto: "oracle"),
    4: .standard(proto: "agent_did"),
    5: .standard(proto: "agent_address"),
    6: .standard(proto: "admin_address"),
    7: .same(proto: "status"),
    8: .same(proto: "reason"),
    9: .standard(proto: "verification_proof"),
    10: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.claimID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.oracle) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.agentDid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.agentAddress) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.adminAddress) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.reason) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.verificationProof) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.claimID.isEmpty {
      try visitor.visitSingularStringField(value: self.claimID, fieldNumber: 1)
    }
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 2)
    }
    if !self.oracle.isEmpty {
      try visitor.visitSingularStringField(value: self.oracle, fieldNumber: 3)
    }
    if !self.agentDid.isEmpty {
      try visitor.visitSingularStringField(value: self.agentDid, fieldNumber: 4)
    }
    if !self.agentAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.agentAddress, fieldNumber: 5)
    }
    if !self.adminAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAddress, fieldNumber: 6)
    }
    if self.status != .pending {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 7)
    }
    if self.reason != 0 {
      try visitor.visitSingularUInt32Field(value: self.reason, fieldNumber: 8)
    }
    if !self.verificationProof.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationProof, fieldNumber: 9)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgEvaluateClaim, rhs: Ixo_Claims_V1beta1_MsgEvaluateClaim) -> Bool {
    if lhs.claimID != rhs.claimID {return false}
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.oracle != rhs.oracle {return false}
    if lhs.agentDid != rhs.agentDid {return false}
    if lhs.agentAddress != rhs.agentAddress {return false}
    if lhs.adminAddress != rhs.adminAddress {return false}
    if lhs.status != rhs.status {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.verificationProof != rhs.verificationProof {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgEvaluateClaimResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEvaluateClaimResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgEvaluateClaimResponse, rhs: Ixo_Claims_V1beta1_MsgEvaluateClaimResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgDisputeClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDisputeClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subject_id"),
    2: .standard(proto: "agent_did"),
    3: .standard(proto: "agent_address"),
    4: .standard(proto: "dispute_type"),
    5: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subjectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.agentDid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.agentAddress) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.disputeType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.subjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.subjectID, fieldNumber: 1)
    }
    if !self.agentDid.isEmpty {
      try visitor.visitSingularStringField(value: self.agentDid, fieldNumber: 2)
    }
    if !self.agentAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.agentAddress, fieldNumber: 3)
    }
    if self.disputeType != 0 {
      try visitor.visitSingularInt32Field(value: self.disputeType, fieldNumber: 4)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgDisputeClaim, rhs: Ixo_Claims_V1beta1_MsgDisputeClaim) -> Bool {
    if lhs.subjectID != rhs.subjectID {return false}
    if lhs.agentDid != rhs.agentDid {return false}
    if lhs.agentAddress != rhs.agentAddress {return false}
    if lhs.disputeType != rhs.disputeType {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgDisputeClaimResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDisputeClaimResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgDisputeClaimResponse, rhs: Ixo_Claims_V1beta1_MsgDisputeClaimResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgWithdrawPayment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawPayment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "claim_id"),
    2: .same(proto: "inputs"),
    3: .same(proto: "outputs"),
    4: .standard(proto: "payment_type"),
    5: .standard(proto: "contract_1155_payment"),
    6: .same(proto: "toAddress"),
    7: .same(proto: "fromAddress"),
    8: .standard(proto: "release_date"),
    9: .standard(proto: "admin_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.claimID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.paymentType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._contract1155Payment) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._releaseDate) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.adminAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.claimID.isEmpty {
      try visitor.visitSingularStringField(value: self.claimID, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 3)
    }
    if self.paymentType != .submission {
      try visitor.visitSingularEnumField(value: self.paymentType, fieldNumber: 4)
    }
    try { if let v = self._contract1155Payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 6)
    }
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 7)
    }
    try { if let v = self._releaseDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.adminAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAddress, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgWithdrawPayment, rhs: Ixo_Claims_V1beta1_MsgWithdrawPayment) -> Bool {
    if lhs.claimID != rhs.claimID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.paymentType != rhs.paymentType {return false}
    if lhs._contract1155Payment != rhs._contract1155Payment {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs._releaseDate != rhs._releaseDate {return false}
    if lhs.adminAddress != rhs.adminAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_MsgWithdrawPaymentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawPaymentResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_MsgWithdrawPaymentResponse, rhs: Ixo_Claims_V1beta1_MsgWithdrawPaymentResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
