// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/permission/exported/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Permission_Exported_V1beta1_Role: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case unrestricted // = 1
  case chainManagement // = 2
  case accessControl // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .unrestricted
    case 2: self = .chainManagement
    case 3: self = .accessControl
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .unrestricted: return 1
    case .chainManagement: return 2
    case .accessControl: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Permission_Exported_V1beta1_Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Permission_Exported_V1beta1_Role] = [
    .unspecified,
    .unrestricted,
    .chainManagement,
    .accessControl,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Axelar_Permission_Exported_V1beta1_Role: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in types.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  /// 50000-99999 reserved for use withing individual organizations
  var Axelar_Permission_Exported_V1beta1_permissionRole: Axelar_Permission_Exported_V1beta1_Role {
    get {return getExtensionValue(ext: Axelar_Permission_Exported_V1beta1_Extensions_permission_role) ?? .unspecified}
    set {setExtensionValue(ext: Axelar_Permission_Exported_V1beta1_Extensions_permission_role, value: newValue)}
  }
  /// Returns true if extension `Axelar_Permission_Exported_V1beta1_Extensions_permission_role`
  /// has been explicitly set.
  var hasAxelar_Permission_Exported_V1beta1_permissionRole: Bool {
    return hasExtensionValue(ext: Axelar_Permission_Exported_V1beta1_Extensions_permission_role)
  }
  /// Clears the value of extension `Axelar_Permission_Exported_V1beta1_Extensions_permission_role`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAxelar_Permission_Exported_V1beta1_permissionRole() {
    clearExtensionValue(ext: Axelar_Permission_Exported_V1beta1_Extensions_permission_role)
  }

}

// MARK: - File's ExtensionMap: Axelar_Permission_Exported_V1beta1_Types_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Axelar_Permission_Exported_V1beta1_Types_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Axelar_Permission_Exported_V1beta1_Extensions_permission_role
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// 50000-99999 reserved for use withing individual organizations
let Axelar_Permission_Exported_V1beta1_Extensions_permission_role = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<Axelar_Permission_Exported_V1beta1_Role>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 50000,
  fieldName: "axelar.permission.exported.v1beta1.permission_role"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Axelar_Permission_Exported_V1beta1_Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLE_UNSPECIFIED"),
    1: .same(proto: "ROLE_UNRESTRICTED"),
    2: .same(proto: "ROLE_CHAIN_MANAGEMENT"),
    3: .same(proto: "ROLE_ACCESS_CONTROL"),
  ]
}
