// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/checkpointing/v1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventCheckpointAccumulating is emitted when a checkpoint reaches the
/// `Accumulating` state.
struct Babylon_Checkpointing_V1_EventCheckpointAccumulating {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _checkpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_checkpoint = newValue}
  }
  /// Returns true if `checkpoint` has been explicitly set.
  var hasCheckpoint: Bool {return self._checkpoint != nil}
  /// Clears the value of `checkpoint`. Subsequent reads from it will return its default value.
  mutating func clearCheckpoint() {self._checkpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

/// EventCheckpointSealed is emitted when a checkpoint reaches the `Sealed`
/// state.
struct Babylon_Checkpointing_V1_EventCheckpointSealed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _checkpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_checkpoint = newValue}
  }
  /// Returns true if `checkpoint` has been explicitly set.
  var hasCheckpoint: Bool {return self._checkpoint != nil}
  /// Clears the value of `checkpoint`. Subsequent reads from it will return its default value.
  mutating func clearCheckpoint() {self._checkpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

/// EventCheckpointSubmitted is emitted when a checkpoint reaches the `Submitted`
/// state.
struct Babylon_Checkpointing_V1_EventCheckpointSubmitted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _checkpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_checkpoint = newValue}
  }
  /// Returns true if `checkpoint` has been explicitly set.
  var hasCheckpoint: Bool {return self._checkpoint != nil}
  /// Clears the value of `checkpoint`. Subsequent reads from it will return its default value.
  mutating func clearCheckpoint() {self._checkpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

/// EventCheckpointConfirmed is emitted when a checkpoint reaches the `Confirmed`
/// state.
struct Babylon_Checkpointing_V1_EventCheckpointConfirmed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _checkpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_checkpoint = newValue}
  }
  /// Returns true if `checkpoint` has been explicitly set.
  var hasCheckpoint: Bool {return self._checkpoint != nil}
  /// Clears the value of `checkpoint`. Subsequent reads from it will return its default value.
  mutating func clearCheckpoint() {self._checkpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

/// EventCheckpointFinalized is emitted when a checkpoint reaches the `Finalized`
/// state.
struct Babylon_Checkpointing_V1_EventCheckpointFinalized {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _checkpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_checkpoint = newValue}
  }
  /// Returns true if `checkpoint` has been explicitly set.
  var hasCheckpoint: Bool {return self._checkpoint != nil}
  /// Clears the value of `checkpoint`. Subsequent reads from it will return its default value.
  mutating func clearCheckpoint() {self._checkpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

/// EventCheckpointForgotten is emitted when a checkpoint switches to a
/// `Forgotten` state.
struct Babylon_Checkpointing_V1_EventCheckpointForgotten {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _checkpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_checkpoint = newValue}
  }
  /// Returns true if `checkpoint` has been explicitly set.
  var hasCheckpoint: Bool {return self._checkpoint != nil}
  /// Clears the value of `checkpoint`. Subsequent reads from it will return its default value.
  mutating func clearCheckpoint() {self._checkpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _checkpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

/// EventConflictingCheckpoint is emitted when two conflicting checkpoints are
/// found.
struct Babylon_Checkpointing_V1_EventConflictingCheckpoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var conflictingCheckpoint: Babylon_Checkpointing_V1_RawCheckpoint {
    get {return _conflictingCheckpoint ?? Babylon_Checkpointing_V1_RawCheckpoint()}
    set {_conflictingCheckpoint = newValue}
  }
  /// Returns true if `conflictingCheckpoint` has been explicitly set.
  var hasConflictingCheckpoint: Bool {return self._conflictingCheckpoint != nil}
  /// Clears the value of `conflictingCheckpoint`. Subsequent reads from it will return its default value.
  mutating func clearConflictingCheckpoint() {self._conflictingCheckpoint = nil}

  var localCheckpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta {
    get {return _localCheckpoint ?? Babylon_Checkpointing_V1_RawCheckpointWithMeta()}
    set {_localCheckpoint = newValue}
  }
  /// Returns true if `localCheckpoint` has been explicitly set.
  var hasLocalCheckpoint: Bool {return self._localCheckpoint != nil}
  /// Clears the value of `localCheckpoint`. Subsequent reads from it will return its default value.
  mutating func clearLocalCheckpoint() {self._localCheckpoint = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _conflictingCheckpoint: Babylon_Checkpointing_V1_RawCheckpoint? = nil
  fileprivate var _localCheckpoint: Babylon_Checkpointing_V1_RawCheckpointWithMeta? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Checkpointing_V1_EventCheckpointAccumulating: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_EventCheckpointSealed: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_EventCheckpointSubmitted: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_EventCheckpointConfirmed: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_EventCheckpointFinalized: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_EventCheckpointForgotten: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_EventConflictingCheckpoint: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.checkpointing.v1"

extension Babylon_Checkpointing_V1_EventCheckpointAccumulating: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCheckpointAccumulating"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._checkpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventCheckpointAccumulating, rhs: Babylon_Checkpointing_V1_EventCheckpointAccumulating) -> Bool {
    if lhs._checkpoint != rhs._checkpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_EventCheckpointSealed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCheckpointSealed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._checkpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventCheckpointSealed, rhs: Babylon_Checkpointing_V1_EventCheckpointSealed) -> Bool {
    if lhs._checkpoint != rhs._checkpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_EventCheckpointSubmitted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCheckpointSubmitted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._checkpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventCheckpointSubmitted, rhs: Babylon_Checkpointing_V1_EventCheckpointSubmitted) -> Bool {
    if lhs._checkpoint != rhs._checkpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_EventCheckpointConfirmed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCheckpointConfirmed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._checkpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventCheckpointConfirmed, rhs: Babylon_Checkpointing_V1_EventCheckpointConfirmed) -> Bool {
    if lhs._checkpoint != rhs._checkpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_EventCheckpointFinalized: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCheckpointFinalized"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._checkpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventCheckpointFinalized, rhs: Babylon_Checkpointing_V1_EventCheckpointFinalized) -> Bool {
    if lhs._checkpoint != rhs._checkpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_EventCheckpointForgotten: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCheckpointForgotten"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._checkpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._checkpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventCheckpointForgotten, rhs: Babylon_Checkpointing_V1_EventCheckpointForgotten) -> Bool {
    if lhs._checkpoint != rhs._checkpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_EventConflictingCheckpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventConflictingCheckpoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conflicting_checkpoint"),
    2: .standard(proto: "local_checkpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._conflictingCheckpoint) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._localCheckpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._conflictingCheckpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._localCheckpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_EventConflictingCheckpoint, rhs: Babylon_Checkpointing_V1_EventConflictingCheckpoint) -> Bool {
    if lhs._conflictingCheckpoint != rhs._conflictingCheckpoint {return false}
    if lhs._localCheckpoint != rhs._localCheckpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
