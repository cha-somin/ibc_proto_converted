//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/epoching/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Epoching_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Epoching_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Babylon_Epoching_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryParamsRequest, Babylon_Epoching_V1_QueryParamsResponse>

  func epochInfo(
    _ request: Babylon_Epoching_V1_QueryEpochInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochInfoRequest, Babylon_Epoching_V1_QueryEpochInfoResponse>

  func epochsInfo(
    _ request: Babylon_Epoching_V1_QueryEpochsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochsInfoRequest, Babylon_Epoching_V1_QueryEpochsInfoResponse>

  func currentEpoch(
    _ request: Babylon_Epoching_V1_QueryCurrentEpochRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryCurrentEpochRequest, Babylon_Epoching_V1_QueryCurrentEpochResponse>

  func epochMsgs(
    _ request: Babylon_Epoching_V1_QueryEpochMsgsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochMsgsRequest, Babylon_Epoching_V1_QueryEpochMsgsResponse>

  func latestEpochMsgs(
    _ request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>

  func validatorLifecycle(
    _ request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryValidatorLifecycleRequest, Babylon_Epoching_V1_QueryValidatorLifecycleResponse>

  func delegationLifecycle(
    _ request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryDelegationLifecycleRequest, Babylon_Epoching_V1_QueryDelegationLifecycleResponse>

  func epochValSet(
    _ request: Babylon_Epoching_V1_QueryEpochValSetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochValSetRequest, Babylon_Epoching_V1_QueryEpochValSetResponse>
}

extension Babylon_Epoching_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.epoching.v1.Query"
  }

  /// Params queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Babylon_Epoching_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryParamsRequest, Babylon_Epoching_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// EpochInfo queries the information of a given epoch
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochInfo(
    _ request: Babylon_Epoching_V1_QueryEpochInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochInfoRequest, Babylon_Epoching_V1_QueryEpochInfoResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochInfoInterceptors() ?? []
    )
  }

  /// EpochsInfo queries the metadata of epochs in a given range, depending on
  /// the parameters in the pagination request. Th main use case will be querying
  /// the latest epochs in time order.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochsInfo(
    _ request: Babylon_Epoching_V1_QueryEpochsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochsInfoRequest, Babylon_Epoching_V1_QueryEpochsInfoResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochsInfoInterceptors() ?? []
    )
  }

  /// CurrentEpoch queries the current epoch
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentEpoch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentEpoch(
    _ request: Babylon_Epoching_V1_QueryCurrentEpochRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryCurrentEpochRequest, Babylon_Epoching_V1_QueryCurrentEpochResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.currentEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentEpochInterceptors() ?? []
    )
  }

  /// EpochMsgs queries the messages of a given epoch
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochMsgs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochMsgs(
    _ request: Babylon_Epoching_V1_QueryEpochMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochMsgsRequest, Babylon_Epoching_V1_QueryEpochMsgsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochMsgs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochMsgsInterceptors() ?? []
    )
  }

  /// LatestEpochMsgs queries the messages within a given number of most recent
  /// epochs
  ///
  /// - Parameters:
  ///   - request: Request to send to LatestEpochMsgs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func latestEpochMsgs(
    _ request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, Babylon_Epoching_V1_QueryLatestEpochMsgsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.latestEpochMsgs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestEpochMsgsInterceptors() ?? []
    )
  }

  /// ValidatorLifecycle queries the lifecycle of a given validator
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorLifecycle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorLifecycle(
    _ request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryValidatorLifecycleRequest, Babylon_Epoching_V1_QueryValidatorLifecycleResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.validatorLifecycle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorLifecycleInterceptors() ?? []
    )
  }

  /// DelegationLifecycle queries the lifecycle of a given delegation
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationLifecycle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegationLifecycle(
    _ request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryDelegationLifecycleRequest, Babylon_Epoching_V1_QueryDelegationLifecycleResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.delegationLifecycle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationLifecycleInterceptors() ?? []
    )
  }

  /// EpochValSet queries the validator set of a given epoch
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochValSet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochValSet(
    _ request: Babylon_Epoching_V1_QueryEpochValSetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Epoching_V1_QueryEpochValSetRequest, Babylon_Epoching_V1_QueryEpochValSetResponse> {
    return self.makeUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochValSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochValSetInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Epoching_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Epoching_V1_QueryNIOClient")
internal final class Babylon_Epoching_V1_QueryClient: Babylon_Epoching_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.epoching.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Epoching_V1_QueryNIOClient: Babylon_Epoching_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.epoching.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Epoching_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Babylon_Epoching_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryParamsRequest, Babylon_Epoching_V1_QueryParamsResponse>

  func makeEpochInfoCall(
    _ request: Babylon_Epoching_V1_QueryEpochInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochInfoRequest, Babylon_Epoching_V1_QueryEpochInfoResponse>

  func makeEpochsInfoCall(
    _ request: Babylon_Epoching_V1_QueryEpochsInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochsInfoRequest, Babylon_Epoching_V1_QueryEpochsInfoResponse>

  func makeCurrentEpochCall(
    _ request: Babylon_Epoching_V1_QueryCurrentEpochRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryCurrentEpochRequest, Babylon_Epoching_V1_QueryCurrentEpochResponse>

  func makeEpochMsgsCall(
    _ request: Babylon_Epoching_V1_QueryEpochMsgsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochMsgsRequest, Babylon_Epoching_V1_QueryEpochMsgsResponse>

  func makeLatestEpochMsgsCall(
    _ request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>

  func makeValidatorLifecycleCall(
    _ request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryValidatorLifecycleRequest, Babylon_Epoching_V1_QueryValidatorLifecycleResponse>

  func makeDelegationLifecycleCall(
    _ request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryDelegationLifecycleRequest, Babylon_Epoching_V1_QueryDelegationLifecycleResponse>

  func makeEpochValSetCall(
    _ request: Babylon_Epoching_V1_QueryEpochValSetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochValSetRequest, Babylon_Epoching_V1_QueryEpochValSetResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Epoching_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Epoching_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Babylon_Epoching_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryParamsRequest, Babylon_Epoching_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeEpochInfoCall(
    _ request: Babylon_Epoching_V1_QueryEpochInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochInfoRequest, Babylon_Epoching_V1_QueryEpochInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochInfoInterceptors() ?? []
    )
  }

  internal func makeEpochsInfoCall(
    _ request: Babylon_Epoching_V1_QueryEpochsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochsInfoRequest, Babylon_Epoching_V1_QueryEpochsInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochsInfoInterceptors() ?? []
    )
  }

  internal func makeCurrentEpochCall(
    _ request: Babylon_Epoching_V1_QueryCurrentEpochRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryCurrentEpochRequest, Babylon_Epoching_V1_QueryCurrentEpochResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.currentEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentEpochInterceptors() ?? []
    )
  }

  internal func makeEpochMsgsCall(
    _ request: Babylon_Epoching_V1_QueryEpochMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochMsgsRequest, Babylon_Epoching_V1_QueryEpochMsgsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochMsgs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochMsgsInterceptors() ?? []
    )
  }

  internal func makeLatestEpochMsgsCall(
    _ request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, Babylon_Epoching_V1_QueryLatestEpochMsgsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.latestEpochMsgs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestEpochMsgsInterceptors() ?? []
    )
  }

  internal func makeValidatorLifecycleCall(
    _ request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryValidatorLifecycleRequest, Babylon_Epoching_V1_QueryValidatorLifecycleResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.validatorLifecycle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorLifecycleInterceptors() ?? []
    )
  }

  internal func makeDelegationLifecycleCall(
    _ request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryDelegationLifecycleRequest, Babylon_Epoching_V1_QueryDelegationLifecycleResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.delegationLifecycle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationLifecycleInterceptors() ?? []
    )
  }

  internal func makeEpochValSetCall(
    _ request: Babylon_Epoching_V1_QueryEpochValSetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Epoching_V1_QueryEpochValSetRequest, Babylon_Epoching_V1_QueryEpochValSetResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochValSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochValSetInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Epoching_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Babylon_Epoching_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func epochInfo(
    _ request: Babylon_Epoching_V1_QueryEpochInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryEpochInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochInfoInterceptors() ?? []
    )
  }

  internal func epochsInfo(
    _ request: Babylon_Epoching_V1_QueryEpochsInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryEpochsInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochsInfoInterceptors() ?? []
    )
  }

  internal func currentEpoch(
    _ request: Babylon_Epoching_V1_QueryCurrentEpochRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryCurrentEpochResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.currentEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentEpochInterceptors() ?? []
    )
  }

  internal func epochMsgs(
    _ request: Babylon_Epoching_V1_QueryEpochMsgsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryEpochMsgsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochMsgs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochMsgsInterceptors() ?? []
    )
  }

  internal func latestEpochMsgs(
    _ request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryLatestEpochMsgsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.latestEpochMsgs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestEpochMsgsInterceptors() ?? []
    )
  }

  internal func validatorLifecycle(
    _ request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryValidatorLifecycleResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.validatorLifecycle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorLifecycleInterceptors() ?? []
    )
  }

  internal func delegationLifecycle(
    _ request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryDelegationLifecycleResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.delegationLifecycle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationLifecycleInterceptors() ?? []
    )
  }

  internal func epochValSet(
    _ request: Babylon_Epoching_V1_QueryEpochValSetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Epoching_V1_QueryEpochValSetResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Epoching_V1_QueryClientMetadata.Methods.epochValSet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochValSetInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Epoching_V1_QueryAsyncClient: Babylon_Epoching_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Epoching_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryParamsRequest, Babylon_Epoching_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'epochInfo'.
  func makeEpochInfoInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryEpochInfoRequest, Babylon_Epoching_V1_QueryEpochInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'epochsInfo'.
  func makeEpochsInfoInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryEpochsInfoRequest, Babylon_Epoching_V1_QueryEpochsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'currentEpoch'.
  func makeCurrentEpochInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryCurrentEpochRequest, Babylon_Epoching_V1_QueryCurrentEpochResponse>]

  /// - Returns: Interceptors to use when invoking 'epochMsgs'.
  func makeEpochMsgsInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryEpochMsgsRequest, Babylon_Epoching_V1_QueryEpochMsgsResponse>]

  /// - Returns: Interceptors to use when invoking 'latestEpochMsgs'.
  func makeLatestEpochMsgsInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorLifecycle'.
  func makeValidatorLifecycleInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryValidatorLifecycleRequest, Babylon_Epoching_V1_QueryValidatorLifecycleResponse>]

  /// - Returns: Interceptors to use when invoking 'delegationLifecycle'.
  func makeDelegationLifecycleInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryDelegationLifecycleRequest, Babylon_Epoching_V1_QueryDelegationLifecycleResponse>]

  /// - Returns: Interceptors to use when invoking 'epochValSet'.
  func makeEpochValSetInterceptors() -> [ClientInterceptor<Babylon_Epoching_V1_QueryEpochValSetRequest, Babylon_Epoching_V1_QueryEpochValSetResponse>]
}

internal enum Babylon_Epoching_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.epoching.v1.Query",
    methods: [
      Babylon_Epoching_V1_QueryClientMetadata.Methods.params,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.epochInfo,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.epochsInfo,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.currentEpoch,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.epochMsgs,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.latestEpochMsgs,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.validatorLifecycle,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.delegationLifecycle,
      Babylon_Epoching_V1_QueryClientMetadata.Methods.epochValSet,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.epoching.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let epochInfo = GRPCMethodDescriptor(
      name: "EpochInfo",
      path: "/babylon.epoching.v1.Query/EpochInfo",
      type: GRPCCallType.unary
    )

    internal static let epochsInfo = GRPCMethodDescriptor(
      name: "EpochsInfo",
      path: "/babylon.epoching.v1.Query/EpochsInfo",
      type: GRPCCallType.unary
    )

    internal static let currentEpoch = GRPCMethodDescriptor(
      name: "CurrentEpoch",
      path: "/babylon.epoching.v1.Query/CurrentEpoch",
      type: GRPCCallType.unary
    )

    internal static let epochMsgs = GRPCMethodDescriptor(
      name: "EpochMsgs",
      path: "/babylon.epoching.v1.Query/EpochMsgs",
      type: GRPCCallType.unary
    )

    internal static let latestEpochMsgs = GRPCMethodDescriptor(
      name: "LatestEpochMsgs",
      path: "/babylon.epoching.v1.Query/LatestEpochMsgs",
      type: GRPCCallType.unary
    )

    internal static let validatorLifecycle = GRPCMethodDescriptor(
      name: "ValidatorLifecycle",
      path: "/babylon.epoching.v1.Query/ValidatorLifecycle",
      type: GRPCCallType.unary
    )

    internal static let delegationLifecycle = GRPCMethodDescriptor(
      name: "DelegationLifecycle",
      path: "/babylon.epoching.v1.Query/DelegationLifecycle",
      type: GRPCCallType.unary
    )

    internal static let epochValSet = GRPCMethodDescriptor(
      name: "EpochValSet",
      path: "/babylon.epoching.v1.Query/EpochValSet",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Epoching_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Epoching_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  func params(request: Babylon_Epoching_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryParamsResponse>

  /// EpochInfo queries the information of a given epoch
  func epochInfo(request: Babylon_Epoching_V1_QueryEpochInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryEpochInfoResponse>

  /// EpochsInfo queries the metadata of epochs in a given range, depending on
  /// the parameters in the pagination request. Th main use case will be querying
  /// the latest epochs in time order.
  func epochsInfo(request: Babylon_Epoching_V1_QueryEpochsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryEpochsInfoResponse>

  /// CurrentEpoch queries the current epoch
  func currentEpoch(request: Babylon_Epoching_V1_QueryCurrentEpochRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryCurrentEpochResponse>

  /// EpochMsgs queries the messages of a given epoch
  func epochMsgs(request: Babylon_Epoching_V1_QueryEpochMsgsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryEpochMsgsResponse>

  /// LatestEpochMsgs queries the messages within a given number of most recent
  /// epochs
  func latestEpochMsgs(request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>

  /// ValidatorLifecycle queries the lifecycle of a given validator
  func validatorLifecycle(request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryValidatorLifecycleResponse>

  /// DelegationLifecycle queries the lifecycle of a given delegation
  func delegationLifecycle(request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryDelegationLifecycleResponse>

  /// EpochValSet queries the validator set of a given epoch
  func epochValSet(request: Babylon_Epoching_V1_QueryEpochValSetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Epoching_V1_QueryEpochValSetResponse>
}

extension Babylon_Epoching_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Epoching_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "EpochInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochInfoResponse>(),
        interceptors: self.interceptors?.makeEpochInfoInterceptors() ?? [],
        userFunction: self.epochInfo(request:context:)
      )

    case "EpochsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochsInfoResponse>(),
        interceptors: self.interceptors?.makeEpochsInfoInterceptors() ?? [],
        userFunction: self.epochsInfo(request:context:)
      )

    case "CurrentEpoch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryCurrentEpochRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryCurrentEpochResponse>(),
        interceptors: self.interceptors?.makeCurrentEpochInterceptors() ?? [],
        userFunction: self.currentEpoch(request:context:)
      )

    case "EpochMsgs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochMsgsResponse>(),
        interceptors: self.interceptors?.makeEpochMsgsInterceptors() ?? [],
        userFunction: self.epochMsgs(request:context:)
      )

    case "LatestEpochMsgs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>(),
        interceptors: self.interceptors?.makeLatestEpochMsgsInterceptors() ?? [],
        userFunction: self.latestEpochMsgs(request:context:)
      )

    case "ValidatorLifecycle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryValidatorLifecycleRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryValidatorLifecycleResponse>(),
        interceptors: self.interceptors?.makeValidatorLifecycleInterceptors() ?? [],
        userFunction: self.validatorLifecycle(request:context:)
      )

    case "DelegationLifecycle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryDelegationLifecycleRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryDelegationLifecycleResponse>(),
        interceptors: self.interceptors?.makeDelegationLifecycleInterceptors() ?? [],
        userFunction: self.delegationLifecycle(request:context:)
      )

    case "EpochValSet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochValSetRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochValSetResponse>(),
        interceptors: self.interceptors?.makeEpochValSetInterceptors() ?? [],
        userFunction: self.epochValSet(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Epoching_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Epoching_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  @Sendable func params(
    request: Babylon_Epoching_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryParamsResponse

  /// EpochInfo queries the information of a given epoch
  @Sendable func epochInfo(
    request: Babylon_Epoching_V1_QueryEpochInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryEpochInfoResponse

  /// EpochsInfo queries the metadata of epochs in a given range, depending on
  /// the parameters in the pagination request. Th main use case will be querying
  /// the latest epochs in time order.
  @Sendable func epochsInfo(
    request: Babylon_Epoching_V1_QueryEpochsInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryEpochsInfoResponse

  /// CurrentEpoch queries the current epoch
  @Sendable func currentEpoch(
    request: Babylon_Epoching_V1_QueryCurrentEpochRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryCurrentEpochResponse

  /// EpochMsgs queries the messages of a given epoch
  @Sendable func epochMsgs(
    request: Babylon_Epoching_V1_QueryEpochMsgsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryEpochMsgsResponse

  /// LatestEpochMsgs queries the messages within a given number of most recent
  /// epochs
  @Sendable func latestEpochMsgs(
    request: Babylon_Epoching_V1_QueryLatestEpochMsgsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryLatestEpochMsgsResponse

  /// ValidatorLifecycle queries the lifecycle of a given validator
  @Sendable func validatorLifecycle(
    request: Babylon_Epoching_V1_QueryValidatorLifecycleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryValidatorLifecycleResponse

  /// DelegationLifecycle queries the lifecycle of a given delegation
  @Sendable func delegationLifecycle(
    request: Babylon_Epoching_V1_QueryDelegationLifecycleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryDelegationLifecycleResponse

  /// EpochValSet queries the validator set of a given epoch
  @Sendable func epochValSet(
    request: Babylon_Epoching_V1_QueryEpochValSetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Epoching_V1_QueryEpochValSetResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Epoching_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Epoching_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Epoching_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Epoching_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "EpochInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochInfoResponse>(),
        interceptors: self.interceptors?.makeEpochInfoInterceptors() ?? [],
        wrapping: self.epochInfo(request:context:)
      )

    case "EpochsInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochsInfoResponse>(),
        interceptors: self.interceptors?.makeEpochsInfoInterceptors() ?? [],
        wrapping: self.epochsInfo(request:context:)
      )

    case "CurrentEpoch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryCurrentEpochRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryCurrentEpochResponse>(),
        interceptors: self.interceptors?.makeCurrentEpochInterceptors() ?? [],
        wrapping: self.currentEpoch(request:context:)
      )

    case "EpochMsgs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochMsgsResponse>(),
        interceptors: self.interceptors?.makeEpochMsgsInterceptors() ?? [],
        wrapping: self.epochMsgs(request:context:)
      )

    case "LatestEpochMsgs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>(),
        interceptors: self.interceptors?.makeLatestEpochMsgsInterceptors() ?? [],
        wrapping: self.latestEpochMsgs(request:context:)
      )

    case "ValidatorLifecycle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryValidatorLifecycleRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryValidatorLifecycleResponse>(),
        interceptors: self.interceptors?.makeValidatorLifecycleInterceptors() ?? [],
        wrapping: self.validatorLifecycle(request:context:)
      )

    case "DelegationLifecycle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryDelegationLifecycleRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryDelegationLifecycleResponse>(),
        interceptors: self.interceptors?.makeDelegationLifecycleInterceptors() ?? [],
        wrapping: self.delegationLifecycle(request:context:)
      )

    case "EpochValSet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Epoching_V1_QueryEpochValSetRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Epoching_V1_QueryEpochValSetResponse>(),
        interceptors: self.interceptors?.makeEpochValSetInterceptors() ?? [],
        wrapping: self.epochValSet(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Epoching_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryParamsRequest, Babylon_Epoching_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'epochInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochInfoInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryEpochInfoRequest, Babylon_Epoching_V1_QueryEpochInfoResponse>]

  /// - Returns: Interceptors to use when handling 'epochsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochsInfoInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryEpochsInfoRequest, Babylon_Epoching_V1_QueryEpochsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'currentEpoch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentEpochInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryCurrentEpochRequest, Babylon_Epoching_V1_QueryCurrentEpochResponse>]

  /// - Returns: Interceptors to use when handling 'epochMsgs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochMsgsInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryEpochMsgsRequest, Babylon_Epoching_V1_QueryEpochMsgsResponse>]

  /// - Returns: Interceptors to use when handling 'latestEpochMsgs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLatestEpochMsgsInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryLatestEpochMsgsRequest, Babylon_Epoching_V1_QueryLatestEpochMsgsResponse>]

  /// - Returns: Interceptors to use when handling 'validatorLifecycle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorLifecycleInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryValidatorLifecycleRequest, Babylon_Epoching_V1_QueryValidatorLifecycleResponse>]

  /// - Returns: Interceptors to use when handling 'delegationLifecycle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegationLifecycleInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryDelegationLifecycleRequest, Babylon_Epoching_V1_QueryDelegationLifecycleResponse>]

  /// - Returns: Interceptors to use when handling 'epochValSet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochValSetInterceptors() -> [ServerInterceptor<Babylon_Epoching_V1_QueryEpochValSetRequest, Babylon_Epoching_V1_QueryEpochValSetResponse>]
}

internal enum Babylon_Epoching_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.epoching.v1.Query",
    methods: [
      Babylon_Epoching_V1_QueryServerMetadata.Methods.params,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.epochInfo,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.epochsInfo,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.currentEpoch,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.epochMsgs,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.latestEpochMsgs,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.validatorLifecycle,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.delegationLifecycle,
      Babylon_Epoching_V1_QueryServerMetadata.Methods.epochValSet,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.epoching.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let epochInfo = GRPCMethodDescriptor(
      name: "EpochInfo",
      path: "/babylon.epoching.v1.Query/EpochInfo",
      type: GRPCCallType.unary
    )

    internal static let epochsInfo = GRPCMethodDescriptor(
      name: "EpochsInfo",
      path: "/babylon.epoching.v1.Query/EpochsInfo",
      type: GRPCCallType.unary
    )

    internal static let currentEpoch = GRPCMethodDescriptor(
      name: "CurrentEpoch",
      path: "/babylon.epoching.v1.Query/CurrentEpoch",
      type: GRPCCallType.unary
    )

    internal static let epochMsgs = GRPCMethodDescriptor(
      name: "EpochMsgs",
      path: "/babylon.epoching.v1.Query/EpochMsgs",
      type: GRPCCallType.unary
    )

    internal static let latestEpochMsgs = GRPCMethodDescriptor(
      name: "LatestEpochMsgs",
      path: "/babylon.epoching.v1.Query/LatestEpochMsgs",
      type: GRPCCallType.unary
    )

    internal static let validatorLifecycle = GRPCMethodDescriptor(
      name: "ValidatorLifecycle",
      path: "/babylon.epoching.v1.Query/ValidatorLifecycle",
      type: GRPCCallType.unary
    )

    internal static let delegationLifecycle = GRPCMethodDescriptor(
      name: "DelegationLifecycle",
      path: "/babylon.epoching.v1.Query/DelegationLifecycle",
      type: GRPCCallType.unary
    )

    internal static let epochValSet = GRPCMethodDescriptor(
      name: "EpochValSet",
      path: "/babylon.epoching.v1.Query/EpochValSet",
      type: GRPCCallType.unary
    )
  }
}
