//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/deployment/v1beta3/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the deployment Msg service.
///
/// Usage: instantiate `Akash_Deployment_V1beta3_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Deployment_V1beta3_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? { get }

  func createDeployment(
    _ request: Akash_Deployment_V1beta3_MsgCreateDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgCreateDeployment, Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>

  func depositDeployment(
    _ request: Akash_Deployment_V1beta3_MsgDepositDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgDepositDeployment, Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>

  func updateDeployment(
    _ request: Akash_Deployment_V1beta3_MsgUpdateDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgUpdateDeployment, Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>

  func closeDeployment(
    _ request: Akash_Deployment_V1beta3_MsgCloseDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgCloseDeployment, Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>

  func closeGroup(
    _ request: Akash_Deployment_V1beta3_MsgCloseGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgCloseGroup, Akash_Deployment_V1beta3_MsgCloseGroupResponse>

  func pauseGroup(
    _ request: Akash_Deployment_V1beta3_MsgPauseGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgPauseGroup, Akash_Deployment_V1beta3_MsgPauseGroupResponse>

  func startGroup(
    _ request: Akash_Deployment_V1beta3_MsgStartGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgStartGroup, Akash_Deployment_V1beta3_MsgStartGroupResponse>
}

extension Akash_Deployment_V1beta3_MsgClientProtocol {
  internal var serviceName: String {
    return "akash.deployment.v1beta3.Msg"
  }

  /// CreateDeployment defines a method to create new deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDeployment(
    _ request: Akash_Deployment_V1beta3_MsgCreateDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgCreateDeployment, Akash_Deployment_V1beta3_MsgCreateDeploymentResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.createDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  /// DepositDeployment deposits more funds into the deployment account
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositDeployment(
    _ request: Akash_Deployment_V1beta3_MsgDepositDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgDepositDeployment, Akash_Deployment_V1beta3_MsgDepositDeploymentResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.depositDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? []
    )
  }

  /// UpdateDeployment defines a method to update a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDeployment(
    _ request: Akash_Deployment_V1beta3_MsgUpdateDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgUpdateDeployment, Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.updateDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? []
    )
  }

  /// CloseDeployment defines a method to close a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeDeployment(
    _ request: Akash_Deployment_V1beta3_MsgCloseDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgCloseDeployment, Akash_Deployment_V1beta3_MsgCloseDeploymentResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? []
    )
  }

  /// CloseGroup defines a method to close a group of a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeGroup(
    _ request: Akash_Deployment_V1beta3_MsgCloseGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgCloseGroup, Akash_Deployment_V1beta3_MsgCloseGroupResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? []
    )
  }

  /// PauseGroup defines a method to close a group of a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pauseGroup(
    _ request: Akash_Deployment_V1beta3_MsgPauseGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgPauseGroup, Akash_Deployment_V1beta3_MsgPauseGroupResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.pauseGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseGroupInterceptors() ?? []
    )
  }

  /// StartGroup defines a method to close a group of a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startGroup(
    _ request: Akash_Deployment_V1beta3_MsgStartGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta3_MsgStartGroup, Akash_Deployment_V1beta3_MsgStartGroupResponse> {
    return self.makeUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.startGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartGroupInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Akash_Deployment_V1beta3_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Akash_Deployment_V1beta3_MsgNIOClient")
internal final class Akash_Deployment_V1beta3_MsgClient: Akash_Deployment_V1beta3_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the akash.deployment.v1beta3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Akash_Deployment_V1beta3_MsgNIOClient: Akash_Deployment_V1beta3_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.deployment.v1beta3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the deployment Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Deployment_V1beta3_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgCreateDeployment,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgCreateDeployment, Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>

  func makeDepositDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgDepositDeployment,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgDepositDeployment, Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>

  func makeUpdateDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgUpdateDeployment,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgUpdateDeployment, Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>

  func makeCloseDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgCloseDeployment,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgCloseDeployment, Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>

  func makeCloseGroupCall(
    _ request: Akash_Deployment_V1beta3_MsgCloseGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgCloseGroup, Akash_Deployment_V1beta3_MsgCloseGroupResponse>

  func makePauseGroupCall(
    _ request: Akash_Deployment_V1beta3_MsgPauseGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgPauseGroup, Akash_Deployment_V1beta3_MsgPauseGroupResponse>

  func makeStartGroupCall(
    _ request: Akash_Deployment_V1beta3_MsgStartGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgStartGroup, Akash_Deployment_V1beta3_MsgStartGroupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Deployment_V1beta3_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Deployment_V1beta3_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgCreateDeployment,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgCreateDeployment, Akash_Deployment_V1beta3_MsgCreateDeploymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.createDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  internal func makeDepositDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgDepositDeployment,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgDepositDeployment, Akash_Deployment_V1beta3_MsgDepositDeploymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.depositDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? []
    )
  }

  internal func makeUpdateDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgUpdateDeployment,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgUpdateDeployment, Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.updateDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? []
    )
  }

  internal func makeCloseDeploymentCall(
    _ request: Akash_Deployment_V1beta3_MsgCloseDeployment,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgCloseDeployment, Akash_Deployment_V1beta3_MsgCloseDeploymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? []
    )
  }

  internal func makeCloseGroupCall(
    _ request: Akash_Deployment_V1beta3_MsgCloseGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgCloseGroup, Akash_Deployment_V1beta3_MsgCloseGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? []
    )
  }

  internal func makePauseGroupCall(
    _ request: Akash_Deployment_V1beta3_MsgPauseGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgPauseGroup, Akash_Deployment_V1beta3_MsgPauseGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.pauseGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseGroupInterceptors() ?? []
    )
  }

  internal func makeStartGroupCall(
    _ request: Akash_Deployment_V1beta3_MsgStartGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Deployment_V1beta3_MsgStartGroup, Akash_Deployment_V1beta3_MsgStartGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.startGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Deployment_V1beta3_MsgAsyncClientProtocol {
  internal func createDeployment(
    _ request: Akash_Deployment_V1beta3_MsgCreateDeployment,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgCreateDeploymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.createDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  internal func depositDeployment(
    _ request: Akash_Deployment_V1beta3_MsgDepositDeployment,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgDepositDeploymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.depositDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? []
    )
  }

  internal func updateDeployment(
    _ request: Akash_Deployment_V1beta3_MsgUpdateDeployment,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.updateDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? []
    )
  }

  internal func closeDeployment(
    _ request: Akash_Deployment_V1beta3_MsgCloseDeployment,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgCloseDeploymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeDeployment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? []
    )
  }

  internal func closeGroup(
    _ request: Akash_Deployment_V1beta3_MsgCloseGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgCloseGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? []
    )
  }

  internal func pauseGroup(
    _ request: Akash_Deployment_V1beta3_MsgPauseGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgPauseGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.pauseGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseGroupInterceptors() ?? []
    )
  }

  internal func startGroup(
    _ request: Akash_Deployment_V1beta3_MsgStartGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Deployment_V1beta3_MsgStartGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Deployment_V1beta3_MsgClientMetadata.Methods.startGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Akash_Deployment_V1beta3_MsgAsyncClient: Akash_Deployment_V1beta3_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Akash_Deployment_V1beta3_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createDeployment'.
  func makeCreateDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgCreateDeployment, Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'depositDeployment'.
  func makeDepositDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgDepositDeployment, Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDeployment'.
  func makeUpdateDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgUpdateDeployment, Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'closeDeployment'.
  func makeCloseDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgCloseDeployment, Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'closeGroup'.
  func makeCloseGroupInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgCloseGroup, Akash_Deployment_V1beta3_MsgCloseGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'pauseGroup'.
  func makePauseGroupInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgPauseGroup, Akash_Deployment_V1beta3_MsgPauseGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'startGroup'.
  func makeStartGroupInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta3_MsgStartGroup, Akash_Deployment_V1beta3_MsgStartGroupResponse>]
}

internal enum Akash_Deployment_V1beta3_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "akash.deployment.v1beta3.Msg",
    methods: [
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.createDeployment,
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.depositDeployment,
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.updateDeployment,
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeDeployment,
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.closeGroup,
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.pauseGroup,
      Akash_Deployment_V1beta3_MsgClientMetadata.Methods.startGroup,
    ]
  )

  internal enum Methods {
    internal static let createDeployment = GRPCMethodDescriptor(
      name: "CreateDeployment",
      path: "/akash.deployment.v1beta3.Msg/CreateDeployment",
      type: GRPCCallType.unary
    )

    internal static let depositDeployment = GRPCMethodDescriptor(
      name: "DepositDeployment",
      path: "/akash.deployment.v1beta3.Msg/DepositDeployment",
      type: GRPCCallType.unary
    )

    internal static let updateDeployment = GRPCMethodDescriptor(
      name: "UpdateDeployment",
      path: "/akash.deployment.v1beta3.Msg/UpdateDeployment",
      type: GRPCCallType.unary
    )

    internal static let closeDeployment = GRPCMethodDescriptor(
      name: "CloseDeployment",
      path: "/akash.deployment.v1beta3.Msg/CloseDeployment",
      type: GRPCCallType.unary
    )

    internal static let closeGroup = GRPCMethodDescriptor(
      name: "CloseGroup",
      path: "/akash.deployment.v1beta3.Msg/CloseGroup",
      type: GRPCCallType.unary
    )

    internal static let pauseGroup = GRPCMethodDescriptor(
      name: "PauseGroup",
      path: "/akash.deployment.v1beta3.Msg/PauseGroup",
      type: GRPCCallType.unary
    )

    internal static let startGroup = GRPCMethodDescriptor(
      name: "StartGroup",
      path: "/akash.deployment.v1beta3.Msg/StartGroup",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the deployment Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Deployment_V1beta3_MsgProvider: CallHandlerProvider {
  var interceptors: Akash_Deployment_V1beta3_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateDeployment defines a method to create new deployment given proper inputs.
  func createDeployment(request: Akash_Deployment_V1beta3_MsgCreateDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>

  /// DepositDeployment deposits more funds into the deployment account
  func depositDeployment(request: Akash_Deployment_V1beta3_MsgDepositDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>

  /// UpdateDeployment defines a method to update a deployment given proper inputs.
  func updateDeployment(request: Akash_Deployment_V1beta3_MsgUpdateDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>

  /// CloseDeployment defines a method to close a deployment given proper inputs.
  func closeDeployment(request: Akash_Deployment_V1beta3_MsgCloseDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>

  /// CloseGroup defines a method to close a group of a deployment given proper inputs.
  func closeGroup(request: Akash_Deployment_V1beta3_MsgCloseGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgCloseGroupResponse>

  /// PauseGroup defines a method to close a group of a deployment given proper inputs.
  func pauseGroup(request: Akash_Deployment_V1beta3_MsgPauseGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgPauseGroupResponse>

  /// StartGroup defines a method to close a group of a deployment given proper inputs.
  func startGroup(request: Akash_Deployment_V1beta3_MsgStartGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta3_MsgStartGroupResponse>
}

extension Akash_Deployment_V1beta3_MsgProvider {
  internal var serviceName: Substring {
    return Akash_Deployment_V1beta3_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgCreateDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>(),
        interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? [],
        userFunction: self.createDeployment(request:context:)
      )

    case "DepositDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgDepositDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>(),
        interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? [],
        userFunction: self.depositDeployment(request:context:)
      )

    case "UpdateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgUpdateDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>(),
        interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? [],
        userFunction: self.updateDeployment(request:context:)
      )

    case "CloseDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgCloseDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>(),
        interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? [],
        userFunction: self.closeDeployment(request:context:)
      )

    case "CloseGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgCloseGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgCloseGroupResponse>(),
        interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? [],
        userFunction: self.closeGroup(request:context:)
      )

    case "PauseGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgPauseGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgPauseGroupResponse>(),
        interceptors: self.interceptors?.makePauseGroupInterceptors() ?? [],
        userFunction: self.pauseGroup(request:context:)
      )

    case "StartGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgStartGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgStartGroupResponse>(),
        interceptors: self.interceptors?.makeStartGroupInterceptors() ?? [],
        userFunction: self.startGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the deployment Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Deployment_V1beta3_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Deployment_V1beta3_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateDeployment defines a method to create new deployment given proper inputs.
  @Sendable func createDeployment(
    request: Akash_Deployment_V1beta3_MsgCreateDeployment,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgCreateDeploymentResponse

  /// DepositDeployment deposits more funds into the deployment account
  @Sendable func depositDeployment(
    request: Akash_Deployment_V1beta3_MsgDepositDeployment,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgDepositDeploymentResponse

  /// UpdateDeployment defines a method to update a deployment given proper inputs.
  @Sendable func updateDeployment(
    request: Akash_Deployment_V1beta3_MsgUpdateDeployment,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse

  /// CloseDeployment defines a method to close a deployment given proper inputs.
  @Sendable func closeDeployment(
    request: Akash_Deployment_V1beta3_MsgCloseDeployment,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgCloseDeploymentResponse

  /// CloseGroup defines a method to close a group of a deployment given proper inputs.
  @Sendable func closeGroup(
    request: Akash_Deployment_V1beta3_MsgCloseGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgCloseGroupResponse

  /// PauseGroup defines a method to close a group of a deployment given proper inputs.
  @Sendable func pauseGroup(
    request: Akash_Deployment_V1beta3_MsgPauseGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgPauseGroupResponse

  /// StartGroup defines a method to close a group of a deployment given proper inputs.
  @Sendable func startGroup(
    request: Akash_Deployment_V1beta3_MsgStartGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Deployment_V1beta3_MsgStartGroupResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Deployment_V1beta3_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Deployment_V1beta3_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Akash_Deployment_V1beta3_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Akash_Deployment_V1beta3_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDeployment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgCreateDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>(),
        interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? [],
        wrapping: self.createDeployment(request:context:)
      )

    case "DepositDeployment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgDepositDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>(),
        interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? [],
        wrapping: self.depositDeployment(request:context:)
      )

    case "UpdateDeployment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgUpdateDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>(),
        interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? [],
        wrapping: self.updateDeployment(request:context:)
      )

    case "CloseDeployment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgCloseDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>(),
        interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? [],
        wrapping: self.closeDeployment(request:context:)
      )

    case "CloseGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgCloseGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgCloseGroupResponse>(),
        interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? [],
        wrapping: self.closeGroup(request:context:)
      )

    case "PauseGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgPauseGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgPauseGroupResponse>(),
        interceptors: self.interceptors?.makePauseGroupInterceptors() ?? [],
        wrapping: self.pauseGroup(request:context:)
      )

    case "StartGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta3_MsgStartGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta3_MsgStartGroupResponse>(),
        interceptors: self.interceptors?.makeStartGroupInterceptors() ?? [],
        wrapping: self.startGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Deployment_V1beta3_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgCreateDeployment, Akash_Deployment_V1beta3_MsgCreateDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'depositDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgDepositDeployment, Akash_Deployment_V1beta3_MsgDepositDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'updateDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgUpdateDeployment, Akash_Deployment_V1beta3_MsgUpdateDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'closeDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgCloseDeployment, Akash_Deployment_V1beta3_MsgCloseDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'closeGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseGroupInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgCloseGroup, Akash_Deployment_V1beta3_MsgCloseGroupResponse>]

  /// - Returns: Interceptors to use when handling 'pauseGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseGroupInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgPauseGroup, Akash_Deployment_V1beta3_MsgPauseGroupResponse>]

  /// - Returns: Interceptors to use when handling 'startGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartGroupInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta3_MsgStartGroup, Akash_Deployment_V1beta3_MsgStartGroupResponse>]
}

internal enum Akash_Deployment_V1beta3_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "akash.deployment.v1beta3.Msg",
    methods: [
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.createDeployment,
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.depositDeployment,
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.updateDeployment,
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.closeDeployment,
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.closeGroup,
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.pauseGroup,
      Akash_Deployment_V1beta3_MsgServerMetadata.Methods.startGroup,
    ]
  )

  internal enum Methods {
    internal static let createDeployment = GRPCMethodDescriptor(
      name: "CreateDeployment",
      path: "/akash.deployment.v1beta3.Msg/CreateDeployment",
      type: GRPCCallType.unary
    )

    internal static let depositDeployment = GRPCMethodDescriptor(
      name: "DepositDeployment",
      path: "/akash.deployment.v1beta3.Msg/DepositDeployment",
      type: GRPCCallType.unary
    )

    internal static let updateDeployment = GRPCMethodDescriptor(
      name: "UpdateDeployment",
      path: "/akash.deployment.v1beta3.Msg/UpdateDeployment",
      type: GRPCCallType.unary
    )

    internal static let closeDeployment = GRPCMethodDescriptor(
      name: "CloseDeployment",
      path: "/akash.deployment.v1beta3.Msg/CloseDeployment",
      type: GRPCCallType.unary
    )

    internal static let closeGroup = GRPCMethodDescriptor(
      name: "CloseGroup",
      path: "/akash.deployment.v1beta3.Msg/CloseGroup",
      type: GRPCCallType.unary
    )

    internal static let pauseGroup = GRPCMethodDescriptor(
      name: "PauseGroup",
      path: "/akash.deployment.v1beta3.Msg/PauseGroup",
      type: GRPCCallType.unary
    )

    internal static let startGroup = GRPCMethodDescriptor(
      name: "StartGroup",
      path: "/akash.deployment.v1beta3.Msg/StartGroup",
      type: GRPCCallType.unary
    )
  }
}
