//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/oracle/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Injective_Oracle_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Oracle_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>

  func bandRelayers(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>

  func bandPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>

  func bandIBCPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>

  func priceFeedPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>

  func coinbasePriceStates(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>

  func pythPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>

  func providerPriceState(
    _ request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>

  func oracleModuleState(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>

  func historicalPriceRecords(
    _ request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>

  func oracleVolatility(
    _ request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>

  func oracleProvidersInfo(
    _ request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>

  func oracleProviderPrices(
    _ request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>

  func oraclePrice(
    _ request: Injective_Oracle_V1beta1_QueryOraclePriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOraclePriceRequest, Injective_Oracle_V1beta1_QueryOraclePriceResponse>

  func pythPrice(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPythPriceRequest, Injective_Oracle_V1beta1_QueryPythPriceResponse>
}

extension Injective_Oracle_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "injective.oracle.v1beta1.Query"
  }

  /// Retrieves oracle params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Retrieves the band relayers
  ///
  /// - Parameters:
  ///   - request: Request to send to BandRelayers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bandRelayers(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandRelayers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? []
    )
  }

  /// Retrieves the state for all band price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to BandPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bandPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all band ibc price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to BandIBCPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bandIBCPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandIBCPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to PriceFeedPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func priceFeedPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.priceFeedPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all coinbase price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to CoinbasePriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func coinbasePriceStates(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.coinbasePriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all pyth price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to PythPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pythPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, Injective_Oracle_V1beta1_QueryPythPriceStatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePythPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all provider price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to ProviderPriceState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func providerPriceState(
    _ request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, Injective_Oracle_V1beta1_QueryProviderPriceStateResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.providerPriceState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderPriceStateInterceptors() ?? []
    )
  }

  /// Retrieves the entire oracle module's state
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleModuleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleModuleState(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleModuleState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? []
    )
  }

  /// Retrieves historical price records for a given OracleType and Symbol
  ///
  /// - Parameters:
  ///   - request: Request to send to HistoricalPriceRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func historicalPriceRecords(
    _ request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.historicalPriceRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalPriceRecordsInterceptors() ?? []
    )
  }

  /// Retrieves mixed volatility value for the specified pair of base/quote
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleVolatility.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleVolatility(
    _ request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, Injective_Oracle_V1beta1_QueryOracleVolatilityResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleVolatility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleVolatilityInterceptors() ?? []
    )
  }

  /// Unary call to OracleProvidersInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleProvidersInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleProvidersInfo(
    _ request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProvidersInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleProvidersInfoInterceptors() ?? []
    )
  }

  /// Unary call to OracleProviderPrices
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleProviderPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleProviderPrices(
    _ request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProviderPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleProviderPricesInterceptors() ?? []
    )
  }

  /// Unary call to OraclePrice
  ///
  /// - Parameters:
  ///   - request: Request to send to OraclePrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oraclePrice(
    _ request: Injective_Oracle_V1beta1_QueryOraclePriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryOraclePriceRequest, Injective_Oracle_V1beta1_QueryOraclePriceResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oraclePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOraclePriceInterceptors() ?? []
    )
  }

  /// Unary call to PythPrice
  ///
  /// - Parameters:
  ///   - request: Request to send to PythPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pythPrice(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPythPriceRequest, Injective_Oracle_V1beta1_QueryPythPriceResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePythPriceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Oracle_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Oracle_V1beta1_QueryNIOClient")
internal final class Injective_Oracle_V1beta1_QueryClient: Injective_Oracle_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.oracle.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Oracle_V1beta1_QueryNIOClient: Injective_Oracle_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.oracle.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Oracle_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>

  func makeBandRelayersCall(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>

  func makeBandPriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>

  func makeBandIbcpriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>

  func makePriceFeedPriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>

  func makeCoinbasePriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>

  func makePythPriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>

  func makeProviderPriceStateCall(
    _ request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>

  func makeOracleModuleStateCall(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>

  func makeHistoricalPriceRecordsCall(
    _ request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>

  func makeOracleVolatilityCall(
    _ request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>

  func makeOracleProvidersInfoCall(
    _ request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>

  func makeOracleProviderPricesCall(
    _ request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>

  func makeOraclePriceCall(
    _ request: Injective_Oracle_V1beta1_QueryOraclePriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOraclePriceRequest, Injective_Oracle_V1beta1_QueryOraclePriceResponse>

  func makePythPriceCall(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryPythPriceRequest, Injective_Oracle_V1beta1_QueryPythPriceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Oracle_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Oracle_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeBandRelayersCall(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandRelayers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? []
    )
  }

  internal func makeBandPriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? []
    )
  }

  internal func makeBandIbcpriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandIBCPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? []
    )
  }

  internal func makePriceFeedPriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.priceFeedPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? []
    )
  }

  internal func makeCoinbasePriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.coinbasePriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? []
    )
  }

  internal func makePythPriceStatesCall(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, Injective_Oracle_V1beta1_QueryPythPriceStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePythPriceStatesInterceptors() ?? []
    )
  }

  internal func makeProviderPriceStateCall(
    _ request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, Injective_Oracle_V1beta1_QueryProviderPriceStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.providerPriceState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderPriceStateInterceptors() ?? []
    )
  }

  internal func makeOracleModuleStateCall(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleModuleState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? []
    )
  }

  internal func makeHistoricalPriceRecordsCall(
    _ request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.historicalPriceRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalPriceRecordsInterceptors() ?? []
    )
  }

  internal func makeOracleVolatilityCall(
    _ request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, Injective_Oracle_V1beta1_QueryOracleVolatilityResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleVolatility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleVolatilityInterceptors() ?? []
    )
  }

  internal func makeOracleProvidersInfoCall(
    _ request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProvidersInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleProvidersInfoInterceptors() ?? []
    )
  }

  internal func makeOracleProviderPricesCall(
    _ request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProviderPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleProviderPricesInterceptors() ?? []
    )
  }

  internal func makeOraclePriceCall(
    _ request: Injective_Oracle_V1beta1_QueryOraclePriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryOraclePriceRequest, Injective_Oracle_V1beta1_QueryOraclePriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oraclePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOraclePriceInterceptors() ?? []
    )
  }

  internal func makePythPriceCall(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_QueryPythPriceRequest, Injective_Oracle_V1beta1_QueryPythPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePythPriceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Oracle_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func bandRelayers(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryBandRelayersResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandRelayers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? []
    )
  }

  internal func bandPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryBandPriceStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? []
    )
  }

  internal func bandIBCPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandIBCPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? []
    )
  }

  internal func priceFeedPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.priceFeedPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? []
    )
  }

  internal func coinbasePriceStates(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.coinbasePriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? []
    )
  }

  internal func pythPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryPythPriceStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPriceStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePythPriceStatesInterceptors() ?? []
    )
  }

  internal func providerPriceState(
    _ request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryProviderPriceStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.providerPriceState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderPriceStateInterceptors() ?? []
    )
  }

  internal func oracleModuleState(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryModuleStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleModuleState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? []
    )
  }

  internal func historicalPriceRecords(
    _ request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.historicalPriceRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalPriceRecordsInterceptors() ?? []
    )
  }

  internal func oracleVolatility(
    _ request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryOracleVolatilityResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleVolatility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleVolatilityInterceptors() ?? []
    )
  }

  internal func oracleProvidersInfo(
    _ request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProvidersInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleProvidersInfoInterceptors() ?? []
    )
  }

  internal func oracleProviderPrices(
    _ request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProviderPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleProviderPricesInterceptors() ?? []
    )
  }

  internal func oraclePrice(
    _ request: Injective_Oracle_V1beta1_QueryOraclePriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryOraclePriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oraclePrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOraclePriceInterceptors() ?? []
    )
  }

  internal func pythPrice(
    _ request: Injective_Oracle_V1beta1_QueryPythPriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_QueryPythPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePythPriceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Oracle_V1beta1_QueryAsyncClient: Injective_Oracle_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'bandRelayers'.
  func makeBandRelayersInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>]

  /// - Returns: Interceptors to use when invoking 'bandPriceStates'.
  func makeBandPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'bandIBCPriceStates'.
  func makeBandIBCPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'priceFeedPriceStates'.
  func makePriceFeedPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'coinbasePriceStates'.
  func makeCoinbasePriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'pythPriceStates'.
  func makePythPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'providerPriceState'.
  func makeProviderPriceStateInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleModuleState'.
  func makeOracleModuleStateInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>]

  /// - Returns: Interceptors to use when invoking 'historicalPriceRecords'.
  func makeHistoricalPriceRecordsInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleVolatility'.
  func makeOracleVolatilityInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleProvidersInfo'.
  func makeOracleProvidersInfoInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleProviderPrices'.
  func makeOracleProviderPricesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'oraclePrice'.
  func makeOraclePriceInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryOraclePriceRequest, Injective_Oracle_V1beta1_QueryOraclePriceResponse>]

  /// - Returns: Interceptors to use when invoking 'pythPrice'.
  func makePythPriceInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryPythPriceRequest, Injective_Oracle_V1beta1_QueryPythPriceResponse>]
}

internal enum Injective_Oracle_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "injective.oracle.v1beta1.Query",
    methods: [
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.params,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandRelayers,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandPriceStates,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.bandIBCPriceStates,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.priceFeedPriceStates,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.coinbasePriceStates,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPriceStates,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.providerPriceState,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleModuleState,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.historicalPriceRecords,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleVolatility,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProvidersInfo,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oracleProviderPrices,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.oraclePrice,
      Injective_Oracle_V1beta1_QueryClientMetadata.Methods.pythPrice,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/injective.oracle.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let bandRelayers = GRPCMethodDescriptor(
      name: "BandRelayers",
      path: "/injective.oracle.v1beta1.Query/BandRelayers",
      type: GRPCCallType.unary
    )

    internal static let bandPriceStates = GRPCMethodDescriptor(
      name: "BandPriceStates",
      path: "/injective.oracle.v1beta1.Query/BandPriceStates",
      type: GRPCCallType.unary
    )

    internal static let bandIBCPriceStates = GRPCMethodDescriptor(
      name: "BandIBCPriceStates",
      path: "/injective.oracle.v1beta1.Query/BandIBCPriceStates",
      type: GRPCCallType.unary
    )

    internal static let priceFeedPriceStates = GRPCMethodDescriptor(
      name: "PriceFeedPriceStates",
      path: "/injective.oracle.v1beta1.Query/PriceFeedPriceStates",
      type: GRPCCallType.unary
    )

    internal static let coinbasePriceStates = GRPCMethodDescriptor(
      name: "CoinbasePriceStates",
      path: "/injective.oracle.v1beta1.Query/CoinbasePriceStates",
      type: GRPCCallType.unary
    )

    internal static let pythPriceStates = GRPCMethodDescriptor(
      name: "PythPriceStates",
      path: "/injective.oracle.v1beta1.Query/PythPriceStates",
      type: GRPCCallType.unary
    )

    internal static let providerPriceState = GRPCMethodDescriptor(
      name: "ProviderPriceState",
      path: "/injective.oracle.v1beta1.Query/ProviderPriceState",
      type: GRPCCallType.unary
    )

    internal static let oracleModuleState = GRPCMethodDescriptor(
      name: "OracleModuleState",
      path: "/injective.oracle.v1beta1.Query/OracleModuleState",
      type: GRPCCallType.unary
    )

    internal static let historicalPriceRecords = GRPCMethodDescriptor(
      name: "HistoricalPriceRecords",
      path: "/injective.oracle.v1beta1.Query/HistoricalPriceRecords",
      type: GRPCCallType.unary
    )

    internal static let oracleVolatility = GRPCMethodDescriptor(
      name: "OracleVolatility",
      path: "/injective.oracle.v1beta1.Query/OracleVolatility",
      type: GRPCCallType.unary
    )

    internal static let oracleProvidersInfo = GRPCMethodDescriptor(
      name: "OracleProvidersInfo",
      path: "/injective.oracle.v1beta1.Query/OracleProvidersInfo",
      type: GRPCCallType.unary
    )

    internal static let oracleProviderPrices = GRPCMethodDescriptor(
      name: "OracleProviderPrices",
      path: "/injective.oracle.v1beta1.Query/OracleProviderPrices",
      type: GRPCCallType.unary
    )

    internal static let oraclePrice = GRPCMethodDescriptor(
      name: "OraclePrice",
      path: "/injective.oracle.v1beta1.Query/OraclePrice",
      type: GRPCCallType.unary
    )

    internal static let pythPrice = GRPCMethodDescriptor(
      name: "PythPrice",
      path: "/injective.oracle.v1beta1.Query/PythPrice",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Oracle_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Injective_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Retrieves oracle params
  func params(request: Injective_Oracle_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryParamsResponse>

  /// Retrieves the band relayers
  func bandRelayers(request: Injective_Oracle_V1beta1_QueryBandRelayersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryBandRelayersResponse>

  /// Retrieves the state for all band price feeds
  func bandPriceStates(request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>

  /// Retrieves the state for all band ibc price feeds
  func bandIBCPriceStates(request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>

  /// Retrieves the state for all price feeds
  func priceFeedPriceStates(request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>

  /// Retrieves the state for all coinbase price feeds
  func coinbasePriceStates(request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>

  /// Retrieves the state for all pyth price feeds
  func pythPriceStates(request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>

  /// Retrieves the state for all provider price feeds
  func providerPriceState(request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>

  /// Retrieves the entire oracle module's state
  func oracleModuleState(request: Injective_Oracle_V1beta1_QueryModuleStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryModuleStateResponse>

  /// Retrieves historical price records for a given OracleType and Symbol
  func historicalPriceRecords(request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>

  /// Retrieves mixed volatility value for the specified pair of base/quote
  func oracleVolatility(request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>

  func oracleProvidersInfo(request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>

  func oracleProviderPrices(request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>

  func oraclePrice(request: Injective_Oracle_V1beta1_QueryOraclePriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryOraclePriceResponse>

  func pythPrice(request: Injective_Oracle_V1beta1_QueryPythPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryPythPriceResponse>
}

extension Injective_Oracle_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Injective_Oracle_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "BandRelayers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandRelayersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandRelayersResponse>(),
        interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? [],
        userFunction: self.bandRelayers(request:context:)
      )

    case "BandPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>(),
        interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? [],
        userFunction: self.bandPriceStates(request:context:)
      )

    case "BandIBCPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>(),
        interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? [],
        userFunction: self.bandIBCPriceStates(request:context:)
      )

    case "PriceFeedPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>(),
        interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? [],
        userFunction: self.priceFeedPriceStates(request:context:)
      )

    case "CoinbasePriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>(),
        interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? [],
        userFunction: self.coinbasePriceStates(request:context:)
      )

    case "PythPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>(),
        interceptors: self.interceptors?.makePythPriceStatesInterceptors() ?? [],
        userFunction: self.pythPriceStates(request:context:)
      )

    case "ProviderPriceState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>(),
        interceptors: self.interceptors?.makeProviderPriceStateInterceptors() ?? [],
        userFunction: self.providerPriceState(request:context:)
      )

    case "OracleModuleState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? [],
        userFunction: self.oracleModuleState(request:context:)
      )

    case "HistoricalPriceRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>(),
        interceptors: self.interceptors?.makeHistoricalPriceRecordsInterceptors() ?? [],
        userFunction: self.historicalPriceRecords(request:context:)
      )

    case "OracleVolatility":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>(),
        interceptors: self.interceptors?.makeOracleVolatilityInterceptors() ?? [],
        userFunction: self.oracleVolatility(request:context:)
      )

    case "OracleProvidersInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>(),
        interceptors: self.interceptors?.makeOracleProvidersInfoInterceptors() ?? [],
        userFunction: self.oracleProvidersInfo(request:context:)
      )

    case "OracleProviderPrices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>(),
        interceptors: self.interceptors?.makeOracleProviderPricesInterceptors() ?? [],
        userFunction: self.oracleProviderPrices(request:context:)
      )

    case "OraclePrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOraclePriceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOraclePriceResponse>(),
        interceptors: self.interceptors?.makeOraclePriceInterceptors() ?? [],
        userFunction: self.oraclePrice(request:context:)
      )

    case "PythPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPythPriceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPythPriceResponse>(),
        interceptors: self.interceptors?.makePythPriceInterceptors() ?? [],
        userFunction: self.pythPrice(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Oracle_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Retrieves oracle params
  @Sendable func params(
    request: Injective_Oracle_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryParamsResponse

  /// Retrieves the band relayers
  @Sendable func bandRelayers(
    request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryBandRelayersResponse

  /// Retrieves the state for all band price feeds
  @Sendable func bandPriceStates(
    request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryBandPriceStatesResponse

  /// Retrieves the state for all band ibc price feeds
  @Sendable func bandIBCPriceStates(
    request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse

  /// Retrieves the state for all price feeds
  @Sendable func priceFeedPriceStates(
    request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse

  /// Retrieves the state for all coinbase price feeds
  @Sendable func coinbasePriceStates(
    request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse

  /// Retrieves the state for all pyth price feeds
  @Sendable func pythPriceStates(
    request: Injective_Oracle_V1beta1_QueryPythPriceStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryPythPriceStatesResponse

  /// Retrieves the state for all provider price feeds
  @Sendable func providerPriceState(
    request: Injective_Oracle_V1beta1_QueryProviderPriceStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryProviderPriceStateResponse

  /// Retrieves the entire oracle module's state
  @Sendable func oracleModuleState(
    request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryModuleStateResponse

  /// Retrieves historical price records for a given OracleType and Symbol
  @Sendable func historicalPriceRecords(
    request: Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse

  /// Retrieves mixed volatility value for the specified pair of base/quote
  @Sendable func oracleVolatility(
    request: Injective_Oracle_V1beta1_QueryOracleVolatilityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryOracleVolatilityResponse

  @Sendable func oracleProvidersInfo(
    request: Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse

  @Sendable func oracleProviderPrices(
    request: Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse

  @Sendable func oraclePrice(
    request: Injective_Oracle_V1beta1_QueryOraclePriceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryOraclePriceResponse

  @Sendable func pythPrice(
    request: Injective_Oracle_V1beta1_QueryPythPriceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_QueryPythPriceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Oracle_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Oracle_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Oracle_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "BandRelayers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandRelayersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandRelayersResponse>(),
        interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? [],
        wrapping: self.bandRelayers(request:context:)
      )

    case "BandPriceStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>(),
        interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? [],
        wrapping: self.bandPriceStates(request:context:)
      )

    case "BandIBCPriceStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>(),
        interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? [],
        wrapping: self.bandIBCPriceStates(request:context:)
      )

    case "PriceFeedPriceStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>(),
        interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? [],
        wrapping: self.priceFeedPriceStates(request:context:)
      )

    case "CoinbasePriceStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>(),
        interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? [],
        wrapping: self.coinbasePriceStates(request:context:)
      )

    case "PythPriceStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>(),
        interceptors: self.interceptors?.makePythPriceStatesInterceptors() ?? [],
        wrapping: self.pythPriceStates(request:context:)
      )

    case "ProviderPriceState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>(),
        interceptors: self.interceptors?.makeProviderPriceStateInterceptors() ?? [],
        wrapping: self.providerPriceState(request:context:)
      )

    case "OracleModuleState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? [],
        wrapping: self.oracleModuleState(request:context:)
      )

    case "HistoricalPriceRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>(),
        interceptors: self.interceptors?.makeHistoricalPriceRecordsInterceptors() ?? [],
        wrapping: self.historicalPriceRecords(request:context:)
      )

    case "OracleVolatility":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>(),
        interceptors: self.interceptors?.makeOracleVolatilityInterceptors() ?? [],
        wrapping: self.oracleVolatility(request:context:)
      )

    case "OracleProvidersInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>(),
        interceptors: self.interceptors?.makeOracleProvidersInfoInterceptors() ?? [],
        wrapping: self.oracleProvidersInfo(request:context:)
      )

    case "OracleProviderPrices":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>(),
        interceptors: self.interceptors?.makeOracleProviderPricesInterceptors() ?? [],
        wrapping: self.oracleProviderPrices(request:context:)
      )

    case "OraclePrice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryOraclePriceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryOraclePriceResponse>(),
        interceptors: self.interceptors?.makeOraclePriceInterceptors() ?? [],
        wrapping: self.oraclePrice(request:context:)
      )

    case "PythPrice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPythPriceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPythPriceResponse>(),
        interceptors: self.interceptors?.makePythPriceInterceptors() ?? [],
        wrapping: self.pythPrice(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'bandRelayers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBandRelayersInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>]

  /// - Returns: Interceptors to use when handling 'bandPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBandPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'bandIBCPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBandIBCPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'priceFeedPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePriceFeedPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'coinbasePriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCoinbasePriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'pythPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePythPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryPythPriceStatesRequest, Injective_Oracle_V1beta1_QueryPythPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'providerPriceState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProviderPriceStateInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryProviderPriceStateRequest, Injective_Oracle_V1beta1_QueryProviderPriceStateResponse>]

  /// - Returns: Interceptors to use when handling 'oracleModuleState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleModuleStateInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>]

  /// - Returns: Interceptors to use when handling 'historicalPriceRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHistoricalPriceRecordsInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsRequest, Injective_Oracle_V1beta1_QueryHistoricalPriceRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'oracleVolatility'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleVolatilityInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryOracleVolatilityRequest, Injective_Oracle_V1beta1_QueryOracleVolatilityResponse>]

  /// - Returns: Interceptors to use when handling 'oracleProvidersInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleProvidersInfoInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryOracleProvidersInfoRequest, Injective_Oracle_V1beta1_QueryOracleProvidersInfoResponse>]

  /// - Returns: Interceptors to use when handling 'oracleProviderPrices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleProviderPricesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryOracleProviderPricesRequest, Injective_Oracle_V1beta1_QueryOracleProviderPricesResponse>]

  /// - Returns: Interceptors to use when handling 'oraclePrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOraclePriceInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryOraclePriceRequest, Injective_Oracle_V1beta1_QueryOraclePriceResponse>]

  /// - Returns: Interceptors to use when handling 'pythPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePythPriceInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryPythPriceRequest, Injective_Oracle_V1beta1_QueryPythPriceResponse>]
}

internal enum Injective_Oracle_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "injective.oracle.v1beta1.Query",
    methods: [
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.params,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.bandRelayers,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.bandPriceStates,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.bandIBCPriceStates,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.priceFeedPriceStates,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.coinbasePriceStates,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.pythPriceStates,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.providerPriceState,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.oracleModuleState,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.historicalPriceRecords,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.oracleVolatility,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.oracleProvidersInfo,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.oracleProviderPrices,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.oraclePrice,
      Injective_Oracle_V1beta1_QueryServerMetadata.Methods.pythPrice,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/injective.oracle.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let bandRelayers = GRPCMethodDescriptor(
      name: "BandRelayers",
      path: "/injective.oracle.v1beta1.Query/BandRelayers",
      type: GRPCCallType.unary
    )

    internal static let bandPriceStates = GRPCMethodDescriptor(
      name: "BandPriceStates",
      path: "/injective.oracle.v1beta1.Query/BandPriceStates",
      type: GRPCCallType.unary
    )

    internal static let bandIBCPriceStates = GRPCMethodDescriptor(
      name: "BandIBCPriceStates",
      path: "/injective.oracle.v1beta1.Query/BandIBCPriceStates",
      type: GRPCCallType.unary
    )

    internal static let priceFeedPriceStates = GRPCMethodDescriptor(
      name: "PriceFeedPriceStates",
      path: "/injective.oracle.v1beta1.Query/PriceFeedPriceStates",
      type: GRPCCallType.unary
    )

    internal static let coinbasePriceStates = GRPCMethodDescriptor(
      name: "CoinbasePriceStates",
      path: "/injective.oracle.v1beta1.Query/CoinbasePriceStates",
      type: GRPCCallType.unary
    )

    internal static let pythPriceStates = GRPCMethodDescriptor(
      name: "PythPriceStates",
      path: "/injective.oracle.v1beta1.Query/PythPriceStates",
      type: GRPCCallType.unary
    )

    internal static let providerPriceState = GRPCMethodDescriptor(
      name: "ProviderPriceState",
      path: "/injective.oracle.v1beta1.Query/ProviderPriceState",
      type: GRPCCallType.unary
    )

    internal static let oracleModuleState = GRPCMethodDescriptor(
      name: "OracleModuleState",
      path: "/injective.oracle.v1beta1.Query/OracleModuleState",
      type: GRPCCallType.unary
    )

    internal static let historicalPriceRecords = GRPCMethodDescriptor(
      name: "HistoricalPriceRecords",
      path: "/injective.oracle.v1beta1.Query/HistoricalPriceRecords",
      type: GRPCCallType.unary
    )

    internal static let oracleVolatility = GRPCMethodDescriptor(
      name: "OracleVolatility",
      path: "/injective.oracle.v1beta1.Query/OracleVolatility",
      type: GRPCCallType.unary
    )

    internal static let oracleProvidersInfo = GRPCMethodDescriptor(
      name: "OracleProvidersInfo",
      path: "/injective.oracle.v1beta1.Query/OracleProvidersInfo",
      type: GRPCCallType.unary
    )

    internal static let oracleProviderPrices = GRPCMethodDescriptor(
      name: "OracleProviderPrices",
      path: "/injective.oracle.v1beta1.Query/OracleProviderPrices",
      type: GRPCCallType.unary
    )

    internal static let oraclePrice = GRPCMethodDescriptor(
      name: "OraclePrice",
      path: "/injective.oracle.v1beta1.Query/OraclePrice",
      type: GRPCCallType.unary
    )

    internal static let pythPrice = GRPCMethodDescriptor(
      name: "PythPrice",
      path: "/injective.oracle.v1beta1.Query/PythPrice",
      type: GRPCCallType.unary
    )
  }
}
