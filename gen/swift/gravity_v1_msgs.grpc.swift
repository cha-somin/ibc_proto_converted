//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gravity/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the state transitions possible within gravity
///
/// Usage: instantiate `Gravity_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Gravity_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? { get }

  func valsetConfirm(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>

  func sendToEth(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>

  func requestBatch(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>

  func confirmBatch(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>

  func confirmLogicCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>

  func sendToCosmosClaim(
    _ request: Gravity_V1_MsgSendToCosmosClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSendToCosmosClaim, Gravity_V1_MsgSendToCosmosClaimResponse>

  func executeIbcAutoForwards(
    _ request: Gravity_V1_MsgExecuteIbcAutoForwards,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgExecuteIbcAutoForwards, Gravity_V1_MsgExecuteIbcAutoForwardsResponse>

  func batchSendToEthClaim(
    _ request: Gravity_V1_MsgBatchSendToEthClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgBatchSendToEthClaim, Gravity_V1_MsgBatchSendToEthClaimResponse>

  func valsetUpdateClaim(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>

  func eRC20DeployedClaim(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>

  func logicCallExecutedClaim(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>

  func setOrchestratorAddress(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>

  func cancelSendToEth(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>

  func submitBadSignatureEvidence(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>
}

extension Gravity_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "gravity.v1.Msg"
  }

  /// Unary call to ValsetConfirm
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirm(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  /// Unary call to SendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendToEth(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.sendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to RequestBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestBatch(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.requestBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmBatch(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.confirmBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmLogicCall
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmLogicCall.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmLogicCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.confirmLogicCall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? []
    )
  }

  /// Unary call to SendToCosmosClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToCosmosClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendToCosmosClaim(
    _ request: Gravity_V1_MsgSendToCosmosClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSendToCosmosClaim, Gravity_V1_MsgSendToCosmosClaimResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.sendToCosmosClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToCosmosClaimInterceptors() ?? []
    )
  }

  /// Unary call to ExecuteIbcAutoForwards
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecuteIbcAutoForwards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func executeIbcAutoForwards(
    _ request: Gravity_V1_MsgExecuteIbcAutoForwards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgExecuteIbcAutoForwards, Gravity_V1_MsgExecuteIbcAutoForwardsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.executeIbcAutoForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteIbcAutoForwardsInterceptors() ?? []
    )
  }

  /// Unary call to BatchSendToEthClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchSendToEthClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchSendToEthClaim(
    _ request: Gravity_V1_MsgBatchSendToEthClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgBatchSendToEthClaim, Gravity_V1_MsgBatchSendToEthClaimResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.batchSendToEthClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchSendToEthClaimInterceptors() ?? []
    )
  }

  /// Unary call to ValsetUpdateClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetUpdateClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetUpdateClaim(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.valsetUpdateClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  /// Unary call to ERC20DeployedClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20DeployedClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20DeployedClaim(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.eRC20DeployedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  /// Unary call to LogicCallExecutedClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to LogicCallExecutedClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logicCallExecutedClaim(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.logicCallExecutedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? []
    )
  }

  /// Unary call to SetOrchestratorAddress
  ///
  /// - Parameters:
  ///   - request: Request to send to SetOrchestratorAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setOrchestratorAddress(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.setOrchestratorAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? []
    )
  }

  /// Unary call to CancelSendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelSendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelSendToEth(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.cancelSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to SubmitBadSignatureEvidence
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitBadSignatureEvidence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitBadSignatureEvidence(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Gravity_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Gravity_V1_MsgNIOClient")
internal final class Gravity_V1_MsgClient: Gravity_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the gravity.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Gravity_V1_MsgNIOClient: Gravity_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the gravity.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the state transitions possible within gravity
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gravity_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeValsetConfirmCall(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>

  func makeSendToEthCall(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>

  func makeRequestBatchCall(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>

  func makeConfirmBatchCall(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>

  func makeConfirmLogicCallCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>

  func makeSendToCosmosClaimCall(
    _ request: Gravity_V1_MsgSendToCosmosClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSendToCosmosClaim, Gravity_V1_MsgSendToCosmosClaimResponse>

  func makeExecuteIbcAutoForwardsCall(
    _ request: Gravity_V1_MsgExecuteIbcAutoForwards,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgExecuteIbcAutoForwards, Gravity_V1_MsgExecuteIbcAutoForwardsResponse>

  func makeBatchSendToEthClaimCall(
    _ request: Gravity_V1_MsgBatchSendToEthClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgBatchSendToEthClaim, Gravity_V1_MsgBatchSendToEthClaimResponse>

  func makeValsetUpdateClaimCall(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>

  func makeErc20DeployedClaimCall(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>

  func makeLogicCallExecutedClaimCall(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>

  func makeSetOrchestratorAddressCall(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>

  func makeCancelSendToEthCall(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>

  func makeSubmitBadSignatureEvidenceCall(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gravity_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gravity_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeValsetConfirmCall(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  internal func makeSendToEthCall(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.sendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  internal func makeRequestBatchCall(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.requestBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  internal func makeConfirmBatchCall(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.confirmBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  internal func makeConfirmLogicCallCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.confirmLogicCall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? []
    )
  }

  internal func makeSendToCosmosClaimCall(
    _ request: Gravity_V1_MsgSendToCosmosClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSendToCosmosClaim, Gravity_V1_MsgSendToCosmosClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.sendToCosmosClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToCosmosClaimInterceptors() ?? []
    )
  }

  internal func makeExecuteIbcAutoForwardsCall(
    _ request: Gravity_V1_MsgExecuteIbcAutoForwards,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgExecuteIbcAutoForwards, Gravity_V1_MsgExecuteIbcAutoForwardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.executeIbcAutoForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteIbcAutoForwardsInterceptors() ?? []
    )
  }

  internal func makeBatchSendToEthClaimCall(
    _ request: Gravity_V1_MsgBatchSendToEthClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgBatchSendToEthClaim, Gravity_V1_MsgBatchSendToEthClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.batchSendToEthClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchSendToEthClaimInterceptors() ?? []
    )
  }

  internal func makeValsetUpdateClaimCall(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.valsetUpdateClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  internal func makeErc20DeployedClaimCall(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.eRC20DeployedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  internal func makeLogicCallExecutedClaimCall(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.logicCallExecutedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? []
    )
  }

  internal func makeSetOrchestratorAddressCall(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.setOrchestratorAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? []
    )
  }

  internal func makeCancelSendToEthCall(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.cancelSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  internal func makeSubmitBadSignatureEvidenceCall(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gravity_V1_MsgAsyncClientProtocol {
  internal func valsetConfirm(
    _ request: Gravity_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgValsetConfirmResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  internal func sendToEth(
    _ request: Gravity_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgSendToEthResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.sendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  internal func requestBatch(
    _ request: Gravity_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgRequestBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.requestBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  internal func confirmBatch(
    _ request: Gravity_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgConfirmBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.confirmBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  internal func confirmLogicCall(
    _ request: Gravity_V1_MsgConfirmLogicCall,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgConfirmLogicCallResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.confirmLogicCall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? []
    )
  }

  internal func sendToCosmosClaim(
    _ request: Gravity_V1_MsgSendToCosmosClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgSendToCosmosClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.sendToCosmosClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToCosmosClaimInterceptors() ?? []
    )
  }

  internal func executeIbcAutoForwards(
    _ request: Gravity_V1_MsgExecuteIbcAutoForwards,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgExecuteIbcAutoForwardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.executeIbcAutoForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteIbcAutoForwardsInterceptors() ?? []
    )
  }

  internal func batchSendToEthClaim(
    _ request: Gravity_V1_MsgBatchSendToEthClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgBatchSendToEthClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.batchSendToEthClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchSendToEthClaimInterceptors() ?? []
    )
  }

  internal func valsetUpdateClaim(
    _ request: Gravity_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgValsetUpdatedClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.valsetUpdateClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  internal func eRC20DeployedClaim(
    _ request: Gravity_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgERC20DeployedClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.eRC20DeployedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  internal func logicCallExecutedClaim(
    _ request: Gravity_V1_MsgLogicCallExecutedClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgLogicCallExecutedClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.logicCallExecutedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? []
    )
  }

  internal func setOrchestratorAddress(
    _ request: Gravity_V1_MsgSetOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgSetOrchestratorAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.setOrchestratorAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? []
    )
  }

  internal func cancelSendToEth(
    _ request: Gravity_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgCancelSendToEthResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.cancelSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  internal func submitBadSignatureEvidence(
    _ request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_MsgSubmitBadSignatureEvidenceResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Gravity_V1_MsgAsyncClient: Gravity_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Gravity_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'valsetConfirm'.
  func makeValsetConfirmInterceptors() -> [ClientInterceptor<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'sendToEth'.
  func makeSendToEthInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'requestBatch'.
  func makeRequestBatchInterceptors() -> [ClientInterceptor<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmBatch'.
  func makeConfirmBatchInterceptors() -> [ClientInterceptor<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmLogicCall'.
  func makeConfirmLogicCallInterceptors() -> [ClientInterceptor<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>]

  /// - Returns: Interceptors to use when invoking 'sendToCosmosClaim'.
  func makeSendToCosmosClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSendToCosmosClaim, Gravity_V1_MsgSendToCosmosClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'executeIbcAutoForwards'.
  func makeExecuteIbcAutoForwardsInterceptors() -> [ClientInterceptor<Gravity_V1_MsgExecuteIbcAutoForwards, Gravity_V1_MsgExecuteIbcAutoForwardsResponse>]

  /// - Returns: Interceptors to use when invoking 'batchSendToEthClaim'.
  func makeBatchSendToEthClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgBatchSendToEthClaim, Gravity_V1_MsgBatchSendToEthClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetUpdateClaim'.
  func makeValsetUpdateClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20DeployedClaim'.
  func makeERC20DeployedClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'logicCallExecutedClaim'.
  func makeLogicCallExecutedClaimInterceptors() -> [ClientInterceptor<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'setOrchestratorAddress'.
  func makeSetOrchestratorAddressInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelSendToEth'.
  func makeCancelSendToEthInterceptors() -> [ClientInterceptor<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'submitBadSignatureEvidence'.
  func makeSubmitBadSignatureEvidenceInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>]
}

internal enum Gravity_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "gravity.v1.Msg",
    methods: [
      Gravity_V1_MsgClientMetadata.Methods.valsetConfirm,
      Gravity_V1_MsgClientMetadata.Methods.sendToEth,
      Gravity_V1_MsgClientMetadata.Methods.requestBatch,
      Gravity_V1_MsgClientMetadata.Methods.confirmBatch,
      Gravity_V1_MsgClientMetadata.Methods.confirmLogicCall,
      Gravity_V1_MsgClientMetadata.Methods.sendToCosmosClaim,
      Gravity_V1_MsgClientMetadata.Methods.executeIbcAutoForwards,
      Gravity_V1_MsgClientMetadata.Methods.batchSendToEthClaim,
      Gravity_V1_MsgClientMetadata.Methods.valsetUpdateClaim,
      Gravity_V1_MsgClientMetadata.Methods.eRC20DeployedClaim,
      Gravity_V1_MsgClientMetadata.Methods.logicCallExecutedClaim,
      Gravity_V1_MsgClientMetadata.Methods.setOrchestratorAddress,
      Gravity_V1_MsgClientMetadata.Methods.cancelSendToEth,
      Gravity_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence,
    ]
  )

  internal enum Methods {
    internal static let valsetConfirm = GRPCMethodDescriptor(
      name: "ValsetConfirm",
      path: "/gravity.v1.Msg/ValsetConfirm",
      type: GRPCCallType.unary
    )

    internal static let sendToEth = GRPCMethodDescriptor(
      name: "SendToEth",
      path: "/gravity.v1.Msg/SendToEth",
      type: GRPCCallType.unary
    )

    internal static let requestBatch = GRPCMethodDescriptor(
      name: "RequestBatch",
      path: "/gravity.v1.Msg/RequestBatch",
      type: GRPCCallType.unary
    )

    internal static let confirmBatch = GRPCMethodDescriptor(
      name: "ConfirmBatch",
      path: "/gravity.v1.Msg/ConfirmBatch",
      type: GRPCCallType.unary
    )

    internal static let confirmLogicCall = GRPCMethodDescriptor(
      name: "ConfirmLogicCall",
      path: "/gravity.v1.Msg/ConfirmLogicCall",
      type: GRPCCallType.unary
    )

    internal static let sendToCosmosClaim = GRPCMethodDescriptor(
      name: "SendToCosmosClaim",
      path: "/gravity.v1.Msg/SendToCosmosClaim",
      type: GRPCCallType.unary
    )

    internal static let executeIbcAutoForwards = GRPCMethodDescriptor(
      name: "ExecuteIbcAutoForwards",
      path: "/gravity.v1.Msg/ExecuteIbcAutoForwards",
      type: GRPCCallType.unary
    )

    internal static let batchSendToEthClaim = GRPCMethodDescriptor(
      name: "BatchSendToEthClaim",
      path: "/gravity.v1.Msg/BatchSendToEthClaim",
      type: GRPCCallType.unary
    )

    internal static let valsetUpdateClaim = GRPCMethodDescriptor(
      name: "ValsetUpdateClaim",
      path: "/gravity.v1.Msg/ValsetUpdateClaim",
      type: GRPCCallType.unary
    )

    internal static let eRC20DeployedClaim = GRPCMethodDescriptor(
      name: "ERC20DeployedClaim",
      path: "/gravity.v1.Msg/ERC20DeployedClaim",
      type: GRPCCallType.unary
    )

    internal static let logicCallExecutedClaim = GRPCMethodDescriptor(
      name: "LogicCallExecutedClaim",
      path: "/gravity.v1.Msg/LogicCallExecutedClaim",
      type: GRPCCallType.unary
    )

    internal static let setOrchestratorAddress = GRPCMethodDescriptor(
      name: "SetOrchestratorAddress",
      path: "/gravity.v1.Msg/SetOrchestratorAddress",
      type: GRPCCallType.unary
    )

    internal static let cancelSendToEth = GRPCMethodDescriptor(
      name: "CancelSendToEth",
      path: "/gravity.v1.Msg/CancelSendToEth",
      type: GRPCCallType.unary
    )

    internal static let submitBadSignatureEvidence = GRPCMethodDescriptor(
      name: "SubmitBadSignatureEvidence",
      path: "/gravity.v1.Msg/SubmitBadSignatureEvidence",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the state transitions possible within gravity
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Gravity_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Gravity_V1_MsgServerInterceptorFactoryProtocol? { get }

  func valsetConfirm(request: Gravity_V1_MsgValsetConfirm, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgValsetConfirmResponse>

  func sendToEth(request: Gravity_V1_MsgSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSendToEthResponse>

  func requestBatch(request: Gravity_V1_MsgRequestBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgRequestBatchResponse>

  func confirmBatch(request: Gravity_V1_MsgConfirmBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgConfirmBatchResponse>

  func confirmLogicCall(request: Gravity_V1_MsgConfirmLogicCall, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgConfirmLogicCallResponse>

  func sendToCosmosClaim(request: Gravity_V1_MsgSendToCosmosClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSendToCosmosClaimResponse>

  func executeIbcAutoForwards(request: Gravity_V1_MsgExecuteIbcAutoForwards, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgExecuteIbcAutoForwardsResponse>

  func batchSendToEthClaim(request: Gravity_V1_MsgBatchSendToEthClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgBatchSendToEthClaimResponse>

  func valsetUpdateClaim(request: Gravity_V1_MsgValsetUpdatedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgValsetUpdatedClaimResponse>

  func eRC20DeployedClaim(request: Gravity_V1_MsgERC20DeployedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgERC20DeployedClaimResponse>

  func logicCallExecutedClaim(request: Gravity_V1_MsgLogicCallExecutedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgLogicCallExecutedClaimResponse>

  func setOrchestratorAddress(request: Gravity_V1_MsgSetOrchestratorAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSetOrchestratorAddressResponse>

  func cancelSendToEth(request: Gravity_V1_MsgCancelSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgCancelSendToEthResponse>

  func submitBadSignatureEvidence(request: Gravity_V1_MsgSubmitBadSignatureEvidence, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>
}

extension Gravity_V1_MsgProvider {
  internal var serviceName: Substring {
    return Gravity_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValsetConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgValsetConfirm>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        userFunction: self.valsetConfirm(request:context:)
      )

    case "SendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSendToEthResponse>(),
        interceptors: self.interceptors?.makeSendToEthInterceptors() ?? [],
        userFunction: self.sendToEth(request:context:)
      )

    case "RequestBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgRequestBatch>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgRequestBatchResponse>(),
        interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? [],
        userFunction: self.requestBatch(request:context:)
      )

    case "ConfirmBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgConfirmBatch>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgConfirmBatchResponse>(),
        interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? [],
        userFunction: self.confirmBatch(request:context:)
      )

    case "ConfirmLogicCall":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgConfirmLogicCall>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgConfirmLogicCallResponse>(),
        interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? [],
        userFunction: self.confirmLogicCall(request:context:)
      )

    case "SendToCosmosClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSendToCosmosClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSendToCosmosClaimResponse>(),
        interceptors: self.interceptors?.makeSendToCosmosClaimInterceptors() ?? [],
        userFunction: self.sendToCosmosClaim(request:context:)
      )

    case "ExecuteIbcAutoForwards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgExecuteIbcAutoForwards>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgExecuteIbcAutoForwardsResponse>(),
        interceptors: self.interceptors?.makeExecuteIbcAutoForwardsInterceptors() ?? [],
        userFunction: self.executeIbcAutoForwards(request:context:)
      )

    case "BatchSendToEthClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgBatchSendToEthClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgBatchSendToEthClaimResponse>(),
        interceptors: self.interceptors?.makeBatchSendToEthClaimInterceptors() ?? [],
        userFunction: self.batchSendToEthClaim(request:context:)
      )

    case "ValsetUpdateClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgValsetUpdatedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgValsetUpdatedClaimResponse>(),
        interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? [],
        userFunction: self.valsetUpdateClaim(request:context:)
      )

    case "ERC20DeployedClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgERC20DeployedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgERC20DeployedClaimResponse>(),
        interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? [],
        userFunction: self.eRC20DeployedClaim(request:context:)
      )

    case "LogicCallExecutedClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgLogicCallExecutedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgLogicCallExecutedClaimResponse>(),
        interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? [],
        userFunction: self.logicCallExecutedClaim(request:context:)
      )

    case "SetOrchestratorAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSetOrchestratorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSetOrchestratorAddressResponse>(),
        interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? [],
        userFunction: self.setOrchestratorAddress(request:context:)
      )

    case "CancelSendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgCancelSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgCancelSendToEthResponse>(),
        interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? [],
        userFunction: self.cancelSendToEth(request:context:)
      )

    case "SubmitBadSignatureEvidence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSubmitBadSignatureEvidence>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>(),
        interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? [],
        userFunction: self.submitBadSignatureEvidence(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the state transitions possible within gravity
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gravity_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gravity_V1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func valsetConfirm(
    request: Gravity_V1_MsgValsetConfirm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgValsetConfirmResponse

  @Sendable func sendToEth(
    request: Gravity_V1_MsgSendToEth,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgSendToEthResponse

  @Sendable func requestBatch(
    request: Gravity_V1_MsgRequestBatch,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgRequestBatchResponse

  @Sendable func confirmBatch(
    request: Gravity_V1_MsgConfirmBatch,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgConfirmBatchResponse

  @Sendable func confirmLogicCall(
    request: Gravity_V1_MsgConfirmLogicCall,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgConfirmLogicCallResponse

  @Sendable func sendToCosmosClaim(
    request: Gravity_V1_MsgSendToCosmosClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgSendToCosmosClaimResponse

  @Sendable func executeIbcAutoForwards(
    request: Gravity_V1_MsgExecuteIbcAutoForwards,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgExecuteIbcAutoForwardsResponse

  @Sendable func batchSendToEthClaim(
    request: Gravity_V1_MsgBatchSendToEthClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgBatchSendToEthClaimResponse

  @Sendable func valsetUpdateClaim(
    request: Gravity_V1_MsgValsetUpdatedClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgValsetUpdatedClaimResponse

  @Sendable func eRC20DeployedClaim(
    request: Gravity_V1_MsgERC20DeployedClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgERC20DeployedClaimResponse

  @Sendable func logicCallExecutedClaim(
    request: Gravity_V1_MsgLogicCallExecutedClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgLogicCallExecutedClaimResponse

  @Sendable func setOrchestratorAddress(
    request: Gravity_V1_MsgSetOrchestratorAddress,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgSetOrchestratorAddressResponse

  @Sendable func cancelSendToEth(
    request: Gravity_V1_MsgCancelSendToEth,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgCancelSendToEthResponse

  @Sendable func submitBadSignatureEvidence(
    request: Gravity_V1_MsgSubmitBadSignatureEvidence,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_MsgSubmitBadSignatureEvidenceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gravity_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gravity_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Gravity_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Gravity_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValsetConfirm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgValsetConfirm>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        wrapping: self.valsetConfirm(request:context:)
      )

    case "SendToEth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSendToEthResponse>(),
        interceptors: self.interceptors?.makeSendToEthInterceptors() ?? [],
        wrapping: self.sendToEth(request:context:)
      )

    case "RequestBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgRequestBatch>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgRequestBatchResponse>(),
        interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? [],
        wrapping: self.requestBatch(request:context:)
      )

    case "ConfirmBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgConfirmBatch>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgConfirmBatchResponse>(),
        interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? [],
        wrapping: self.confirmBatch(request:context:)
      )

    case "ConfirmLogicCall":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgConfirmLogicCall>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgConfirmLogicCallResponse>(),
        interceptors: self.interceptors?.makeConfirmLogicCallInterceptors() ?? [],
        wrapping: self.confirmLogicCall(request:context:)
      )

    case "SendToCosmosClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSendToCosmosClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSendToCosmosClaimResponse>(),
        interceptors: self.interceptors?.makeSendToCosmosClaimInterceptors() ?? [],
        wrapping: self.sendToCosmosClaim(request:context:)
      )

    case "ExecuteIbcAutoForwards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgExecuteIbcAutoForwards>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgExecuteIbcAutoForwardsResponse>(),
        interceptors: self.interceptors?.makeExecuteIbcAutoForwardsInterceptors() ?? [],
        wrapping: self.executeIbcAutoForwards(request:context:)
      )

    case "BatchSendToEthClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgBatchSendToEthClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgBatchSendToEthClaimResponse>(),
        interceptors: self.interceptors?.makeBatchSendToEthClaimInterceptors() ?? [],
        wrapping: self.batchSendToEthClaim(request:context:)
      )

    case "ValsetUpdateClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgValsetUpdatedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgValsetUpdatedClaimResponse>(),
        interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? [],
        wrapping: self.valsetUpdateClaim(request:context:)
      )

    case "ERC20DeployedClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgERC20DeployedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgERC20DeployedClaimResponse>(),
        interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? [],
        wrapping: self.eRC20DeployedClaim(request:context:)
      )

    case "LogicCallExecutedClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgLogicCallExecutedClaim>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgLogicCallExecutedClaimResponse>(),
        interceptors: self.interceptors?.makeLogicCallExecutedClaimInterceptors() ?? [],
        wrapping: self.logicCallExecutedClaim(request:context:)
      )

    case "SetOrchestratorAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSetOrchestratorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSetOrchestratorAddressResponse>(),
        interceptors: self.interceptors?.makeSetOrchestratorAddressInterceptors() ?? [],
        wrapping: self.setOrchestratorAddress(request:context:)
      )

    case "CancelSendToEth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgCancelSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgCancelSendToEthResponse>(),
        interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? [],
        wrapping: self.cancelSendToEth(request:context:)
      )

    case "SubmitBadSignatureEvidence":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSubmitBadSignatureEvidence>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>(),
        interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? [],
        wrapping: self.submitBadSignatureEvidence(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Gravity_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'valsetConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmInterceptors() -> [ServerInterceptor<Gravity_V1_MsgValsetConfirm, Gravity_V1_MsgValsetConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'sendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendToEthInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSendToEth, Gravity_V1_MsgSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'requestBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestBatchInterceptors() -> [ServerInterceptor<Gravity_V1_MsgRequestBatch, Gravity_V1_MsgRequestBatchResponse>]

  /// - Returns: Interceptors to use when handling 'confirmBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmBatchInterceptors() -> [ServerInterceptor<Gravity_V1_MsgConfirmBatch, Gravity_V1_MsgConfirmBatchResponse>]

  /// - Returns: Interceptors to use when handling 'confirmLogicCall'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmLogicCallInterceptors() -> [ServerInterceptor<Gravity_V1_MsgConfirmLogicCall, Gravity_V1_MsgConfirmLogicCallResponse>]

  /// - Returns: Interceptors to use when handling 'sendToCosmosClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendToCosmosClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSendToCosmosClaim, Gravity_V1_MsgSendToCosmosClaimResponse>]

  /// - Returns: Interceptors to use when handling 'executeIbcAutoForwards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteIbcAutoForwardsInterceptors() -> [ServerInterceptor<Gravity_V1_MsgExecuteIbcAutoForwards, Gravity_V1_MsgExecuteIbcAutoForwardsResponse>]

  /// - Returns: Interceptors to use when handling 'batchSendToEthClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchSendToEthClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgBatchSendToEthClaim, Gravity_V1_MsgBatchSendToEthClaimResponse>]

  /// - Returns: Interceptors to use when handling 'valsetUpdateClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetUpdateClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgValsetUpdatedClaim, Gravity_V1_MsgValsetUpdatedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20DeployedClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20DeployedClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgERC20DeployedClaim, Gravity_V1_MsgERC20DeployedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'logicCallExecutedClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogicCallExecutedClaimInterceptors() -> [ServerInterceptor<Gravity_V1_MsgLogicCallExecutedClaim, Gravity_V1_MsgLogicCallExecutedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'setOrchestratorAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetOrchestratorAddressInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSetOrchestratorAddress, Gravity_V1_MsgSetOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when handling 'cancelSendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelSendToEthInterceptors() -> [ServerInterceptor<Gravity_V1_MsgCancelSendToEth, Gravity_V1_MsgCancelSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'submitBadSignatureEvidence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitBadSignatureEvidenceInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSubmitBadSignatureEvidence, Gravity_V1_MsgSubmitBadSignatureEvidenceResponse>]
}

internal enum Gravity_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "gravity.v1.Msg",
    methods: [
      Gravity_V1_MsgServerMetadata.Methods.valsetConfirm,
      Gravity_V1_MsgServerMetadata.Methods.sendToEth,
      Gravity_V1_MsgServerMetadata.Methods.requestBatch,
      Gravity_V1_MsgServerMetadata.Methods.confirmBatch,
      Gravity_V1_MsgServerMetadata.Methods.confirmLogicCall,
      Gravity_V1_MsgServerMetadata.Methods.sendToCosmosClaim,
      Gravity_V1_MsgServerMetadata.Methods.executeIbcAutoForwards,
      Gravity_V1_MsgServerMetadata.Methods.batchSendToEthClaim,
      Gravity_V1_MsgServerMetadata.Methods.valsetUpdateClaim,
      Gravity_V1_MsgServerMetadata.Methods.eRC20DeployedClaim,
      Gravity_V1_MsgServerMetadata.Methods.logicCallExecutedClaim,
      Gravity_V1_MsgServerMetadata.Methods.setOrchestratorAddress,
      Gravity_V1_MsgServerMetadata.Methods.cancelSendToEth,
      Gravity_V1_MsgServerMetadata.Methods.submitBadSignatureEvidence,
    ]
  )

  internal enum Methods {
    internal static let valsetConfirm = GRPCMethodDescriptor(
      name: "ValsetConfirm",
      path: "/gravity.v1.Msg/ValsetConfirm",
      type: GRPCCallType.unary
    )

    internal static let sendToEth = GRPCMethodDescriptor(
      name: "SendToEth",
      path: "/gravity.v1.Msg/SendToEth",
      type: GRPCCallType.unary
    )

    internal static let requestBatch = GRPCMethodDescriptor(
      name: "RequestBatch",
      path: "/gravity.v1.Msg/RequestBatch",
      type: GRPCCallType.unary
    )

    internal static let confirmBatch = GRPCMethodDescriptor(
      name: "ConfirmBatch",
      path: "/gravity.v1.Msg/ConfirmBatch",
      type: GRPCCallType.unary
    )

    internal static let confirmLogicCall = GRPCMethodDescriptor(
      name: "ConfirmLogicCall",
      path: "/gravity.v1.Msg/ConfirmLogicCall",
      type: GRPCCallType.unary
    )

    internal static let sendToCosmosClaim = GRPCMethodDescriptor(
      name: "SendToCosmosClaim",
      path: "/gravity.v1.Msg/SendToCosmosClaim",
      type: GRPCCallType.unary
    )

    internal static let executeIbcAutoForwards = GRPCMethodDescriptor(
      name: "ExecuteIbcAutoForwards",
      path: "/gravity.v1.Msg/ExecuteIbcAutoForwards",
      type: GRPCCallType.unary
    )

    internal static let batchSendToEthClaim = GRPCMethodDescriptor(
      name: "BatchSendToEthClaim",
      path: "/gravity.v1.Msg/BatchSendToEthClaim",
      type: GRPCCallType.unary
    )

    internal static let valsetUpdateClaim = GRPCMethodDescriptor(
      name: "ValsetUpdateClaim",
      path: "/gravity.v1.Msg/ValsetUpdateClaim",
      type: GRPCCallType.unary
    )

    internal static let eRC20DeployedClaim = GRPCMethodDescriptor(
      name: "ERC20DeployedClaim",
      path: "/gravity.v1.Msg/ERC20DeployedClaim",
      type: GRPCCallType.unary
    )

    internal static let logicCallExecutedClaim = GRPCMethodDescriptor(
      name: "LogicCallExecutedClaim",
      path: "/gravity.v1.Msg/LogicCallExecutedClaim",
      type: GRPCCallType.unary
    )

    internal static let setOrchestratorAddress = GRPCMethodDescriptor(
      name: "SetOrchestratorAddress",
      path: "/gravity.v1.Msg/SetOrchestratorAddress",
      type: GRPCCallType.unary
    )

    internal static let cancelSendToEth = GRPCMethodDescriptor(
      name: "CancelSendToEth",
      path: "/gravity.v1.Msg/CancelSendToEth",
      type: GRPCCallType.unary
    )

    internal static let submitBadSignatureEvidence = GRPCMethodDescriptor(
      name: "SubmitBadSignatureEvidence",
      path: "/gravity.v1.Msg/SubmitBadSignatureEvidence",
      type: GRPCCallType.unary
    )
  }
}
