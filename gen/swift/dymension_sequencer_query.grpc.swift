//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: dymension/sequencer/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Dymensionxyz_Dymension_Sequencer_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Dymensionxyz_Dymension_Sequencer_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>

  func sequencer(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>

  func sequencerAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>

  func sequencersByRollapp(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>

  func sequencersByRollappAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>

  func scheduler(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>

  func schedulerAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>
}

extension Dymensionxyz_Dymension_Sequencer_QueryClientProtocol {
  internal var serviceName: String {
    return "dymensionxyz.dymension.sequencer.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, Dymensionxyz_Dymension_Sequencer_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a Sequencer by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Sequencer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sequencer(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencerInterceptors() ?? []
    )
  }

  /// Queries a list of Sequencer items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SequencerAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sequencerAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencerAllInterceptors() ?? []
    )
  }

  /// Queries a SequencersByRollapp by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to SequencersByRollapp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sequencersByRollapp(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollapp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencersByRollappInterceptors() ?? []
    )
  }

  /// Queries a list of SequencersByRollapp items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SequencersByRollappAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sequencersByRollappAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollappAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencersByRollappAllInterceptors() ?? []
    )
  }

  /// Queries a Scheduler by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Scheduler.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scheduler(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.scheduler.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulerInterceptors() ?? []
    )
  }

  /// Queries a list of Scheduler items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SchedulerAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func schedulerAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.schedulerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulerAllInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Dymensionxyz_Dymension_Sequencer_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Dymensionxyz_Dymension_Sequencer_QueryNIOClient")
internal final class Dymensionxyz_Dymension_Sequencer_QueryClient: Dymensionxyz_Dymension_Sequencer_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the dymensionxyz.dymension.sequencer.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Dymensionxyz_Dymension_Sequencer_QueryNIOClient: Dymensionxyz_Dymension_Sequencer_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the dymensionxyz.dymension.sequencer.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Dymensionxyz_Dymension_Sequencer_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>

  func makeSequencerCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>

  func makeSequencerAllCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>

  func makeSequencersByRollappCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>

  func makeSequencersByRollappAllCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>

  func makeSchedulerCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>

  func makeSchedulerAllCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dymensionxyz_Dymension_Sequencer_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, Dymensionxyz_Dymension_Sequencer_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeSequencerCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencerInterceptors() ?? []
    )
  }

  internal func makeSequencerAllCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencerAllInterceptors() ?? []
    )
  }

  internal func makeSequencersByRollappCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollapp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencersByRollappInterceptors() ?? []
    )
  }

  internal func makeSequencersByRollappAllCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollappAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencersByRollappAllInterceptors() ?? []
    )
  }

  internal func makeSchedulerCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.scheduler.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulerInterceptors() ?? []
    )
  }

  internal func makeSchedulerAllCall(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.schedulerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulerAllInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dymensionxyz_Dymension_Sequencer_QueryAsyncClientProtocol {
  internal func params(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func sequencer(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencerInterceptors() ?? []
    )
  }

  internal func sequencerAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencerAllInterceptors() ?? []
    )
  }

  internal func sequencersByRollapp(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollapp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencersByRollappInterceptors() ?? []
    )
  }

  internal func sequencersByRollappAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollappAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSequencersByRollappAllInterceptors() ?? []
    )
  }

  internal func scheduler(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.scheduler.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulerInterceptors() ?? []
    )
  }

  internal func schedulerAll(
    _ request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.schedulerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulerAllInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Dymensionxyz_Dymension_Sequencer_QueryAsyncClient: Dymensionxyz_Dymension_Sequencer_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Dymensionxyz_Dymension_Sequencer_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'sequencer'.
  func makeSequencerInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>]

  /// - Returns: Interceptors to use when invoking 'sequencerAll'.
  func makeSequencerAllInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>]

  /// - Returns: Interceptors to use when invoking 'sequencersByRollapp'.
  func makeSequencersByRollappInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>]

  /// - Returns: Interceptors to use when invoking 'sequencersByRollappAll'.
  func makeSequencersByRollappAllInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>]

  /// - Returns: Interceptors to use when invoking 'scheduler'.
  func makeSchedulerInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>]

  /// - Returns: Interceptors to use when invoking 'schedulerAll'.
  func makeSchedulerAllInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>]
}

internal enum Dymensionxyz_Dymension_Sequencer_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "dymensionxyz.dymension.sequencer.Query",
    methods: [
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.params,
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencer,
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencerAll,
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollapp,
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.sequencersByRollappAll,
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.scheduler,
      Dymensionxyz_Dymension_Sequencer_QueryClientMetadata.Methods.schedulerAll,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/dymensionxyz.dymension.sequencer.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let sequencer = GRPCMethodDescriptor(
      name: "Sequencer",
      path: "/dymensionxyz.dymension.sequencer.Query/Sequencer",
      type: GRPCCallType.unary
    )

    internal static let sequencerAll = GRPCMethodDescriptor(
      name: "SequencerAll",
      path: "/dymensionxyz.dymension.sequencer.Query/SequencerAll",
      type: GRPCCallType.unary
    )

    internal static let sequencersByRollapp = GRPCMethodDescriptor(
      name: "SequencersByRollapp",
      path: "/dymensionxyz.dymension.sequencer.Query/SequencersByRollapp",
      type: GRPCCallType.unary
    )

    internal static let sequencersByRollappAll = GRPCMethodDescriptor(
      name: "SequencersByRollappAll",
      path: "/dymensionxyz.dymension.sequencer.Query/SequencersByRollappAll",
      type: GRPCCallType.unary
    )

    internal static let scheduler = GRPCMethodDescriptor(
      name: "Scheduler",
      path: "/dymensionxyz.dymension.sequencer.Query/Scheduler",
      type: GRPCCallType.unary
    )

    internal static let schedulerAll = GRPCMethodDescriptor(
      name: "SchedulerAll",
      path: "/dymensionxyz.dymension.sequencer.Query/SchedulerAll",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Dymensionxyz_Dymension_Sequencer_QueryProvider: CallHandlerProvider {
  var interceptors: Dymensionxyz_Dymension_Sequencer_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>

  /// Queries a Sequencer by index.
  func sequencer(request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>

  /// Queries a list of Sequencer items.
  func sequencerAll(request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>

  /// Queries a SequencersByRollapp by index.
  func sequencersByRollapp(request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>

  /// Queries a list of SequencersByRollapp items.
  func sequencersByRollappAll(request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>

  /// Queries a Scheduler by index.
  func scheduler(request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>

  /// Queries a list of Scheduler items.
  func schedulerAll(request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>
}

extension Dymensionxyz_Dymension_Sequencer_QueryProvider {
  internal var serviceName: Substring {
    return Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Sequencer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>(),
        interceptors: self.interceptors?.makeSequencerInterceptors() ?? [],
        userFunction: self.sequencer(request:context:)
      )

    case "SequencerAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>(),
        interceptors: self.interceptors?.makeSequencerAllInterceptors() ?? [],
        userFunction: self.sequencerAll(request:context:)
      )

    case "SequencersByRollapp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>(),
        interceptors: self.interceptors?.makeSequencersByRollappInterceptors() ?? [],
        userFunction: self.sequencersByRollapp(request:context:)
      )

    case "SequencersByRollappAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>(),
        interceptors: self.interceptors?.makeSequencersByRollappAllInterceptors() ?? [],
        userFunction: self.sequencersByRollappAll(request:context:)
      )

    case "Scheduler":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>(),
        interceptors: self.interceptors?.makeSchedulerInterceptors() ?? [],
        userFunction: self.scheduler(request:context:)
      )

    case "SchedulerAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>(),
        interceptors: self.interceptors?.makeSchedulerAllInterceptors() ?? [],
        userFunction: self.schedulerAll(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Dymensionxyz_Dymension_Sequencer_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Dymensionxyz_Dymension_Sequencer_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Dymensionxyz_Dymension_Sequencer_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryParamsResponse

  /// Queries a Sequencer by index.
  @Sendable func sequencer(
    request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse

  /// Queries a list of Sequencer items.
  @Sendable func sequencerAll(
    request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse

  /// Queries a SequencersByRollapp by index.
  @Sendable func sequencersByRollapp(
    request: Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse

  /// Queries a list of SequencersByRollapp items.
  @Sendable func sequencersByRollappAll(
    request: Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse

  /// Queries a Scheduler by index.
  @Sendable func scheduler(
    request: Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse

  /// Queries a list of Scheduler items.
  @Sendable func schedulerAll(
    request: Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dymensionxyz_Dymension_Sequencer_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Dymensionxyz_Dymension_Sequencer_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Sequencer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>(),
        interceptors: self.interceptors?.makeSequencerInterceptors() ?? [],
        wrapping: self.sequencer(request:context:)
      )

    case "SequencerAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>(),
        interceptors: self.interceptors?.makeSequencerAllInterceptors() ?? [],
        wrapping: self.sequencerAll(request:context:)
      )

    case "SequencersByRollapp":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>(),
        interceptors: self.interceptors?.makeSequencersByRollappInterceptors() ?? [],
        wrapping: self.sequencersByRollapp(request:context:)
      )

    case "SequencersByRollappAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>(),
        interceptors: self.interceptors?.makeSequencersByRollappAllInterceptors() ?? [],
        wrapping: self.sequencersByRollappAll(request:context:)
      )

    case "Scheduler":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>(),
        interceptors: self.interceptors?.makeSchedulerInterceptors() ?? [],
        wrapping: self.scheduler(request:context:)
      )

    case "SchedulerAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>(),
        interceptors: self.interceptors?.makeSchedulerAllInterceptors() ?? [],
        wrapping: self.schedulerAll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Dymensionxyz_Dymension_Sequencer_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryParamsRequest, Dymensionxyz_Dymension_Sequencer_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'sequencer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSequencerInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryGetSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencerResponse>]

  /// - Returns: Interceptors to use when handling 'sequencerAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSequencerAllInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryAllSequencerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencerResponse>]

  /// - Returns: Interceptors to use when handling 'sequencersByRollapp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSequencersByRollappInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSequencersByRollappResponse>]

  /// - Returns: Interceptors to use when handling 'sequencersByRollappAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSequencersByRollappAllInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSequencersByRollappResponse>]

  /// - Returns: Interceptors to use when handling 'scheduler'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSchedulerInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryGetSchedulerResponse>]

  /// - Returns: Interceptors to use when handling 'schedulerAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSchedulerAllInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerRequest, Dymensionxyz_Dymension_Sequencer_QueryAllSchedulerResponse>]
}

internal enum Dymensionxyz_Dymension_Sequencer_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "dymensionxyz.dymension.sequencer.Query",
    methods: [
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.params,
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.sequencer,
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.sequencerAll,
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.sequencersByRollapp,
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.sequencersByRollappAll,
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.scheduler,
      Dymensionxyz_Dymension_Sequencer_QueryServerMetadata.Methods.schedulerAll,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/dymensionxyz.dymension.sequencer.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let sequencer = GRPCMethodDescriptor(
      name: "Sequencer",
      path: "/dymensionxyz.dymension.sequencer.Query/Sequencer",
      type: GRPCCallType.unary
    )

    internal static let sequencerAll = GRPCMethodDescriptor(
      name: "SequencerAll",
      path: "/dymensionxyz.dymension.sequencer.Query/SequencerAll",
      type: GRPCCallType.unary
    )

    internal static let sequencersByRollapp = GRPCMethodDescriptor(
      name: "SequencersByRollapp",
      path: "/dymensionxyz.dymension.sequencer.Query/SequencersByRollapp",
      type: GRPCCallType.unary
    )

    internal static let sequencersByRollappAll = GRPCMethodDescriptor(
      name: "SequencersByRollappAll",
      path: "/dymensionxyz.dymension.sequencer.Query/SequencersByRollappAll",
      type: GRPCCallType.unary
    )

    internal static let scheduler = GRPCMethodDescriptor(
      name: "Scheduler",
      path: "/dymensionxyz.dymension.sequencer.Query/Scheduler",
      type: GRPCCallType.unary
    )

    internal static let schedulerAll = GRPCMethodDescriptor(
      name: "SchedulerAll",
      path: "/dymensionxyz.dymension.sequencer.Query/SchedulerAll",
      type: GRPCCallType.unary
    )
  }
}
