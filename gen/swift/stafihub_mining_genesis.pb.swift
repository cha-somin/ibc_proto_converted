// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stafihub/mining/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the mining module's genesis state.
struct Stafihub_Stafihub_Mining_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stafihub_Stafihub_Mining_Params {
    get {return _params ?? Stafihub_Stafihub_Mining_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var stakePoolList: [Stafihub_Stafihub_Mining_StakePool] = []

  var stakeItemList: [Stafihub_Stafihub_Mining_StakeItem] = []

  var userStakeRecordList: [Stafihub_Stafihub_Mining_UserStakeRecord] = []

  var miningProviderList: [String] = []

  var rewardTokenList: [Stafihub_Stafihub_Mining_RewardToken] = []

  var maxRewardPoolNumber: UInt32 = 0

  var miningProviderSwitch: Bool = false

  var maxStakeItemNumber: UInt32 = 0

  var stakeTokenList: [String] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var stakeItemLimit: Stafihub_Stafihub_Mining_StakeItemLimit {
    get {return _stakeItemLimit ?? Stafihub_Stafihub_Mining_StakeItemLimit()}
    set {_stakeItemLimit = newValue}
  }
  /// Returns true if `stakeItemLimit` has been explicitly set.
  var hasStakeItemLimit: Bool {return self._stakeItemLimit != nil}
  /// Clears the value of `stakeItemLimit`. Subsequent reads from it will return its default value.
  mutating func clearStakeItemLimit() {self._stakeItemLimit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stafihub_Stafihub_Mining_Params? = nil
  fileprivate var _stakeItemLimit: Stafihub_Stafihub_Mining_StakeItemLimit? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stafihub_Stafihub_Mining_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stafihub.stafihub.mining"

extension Stafihub_Stafihub_Mining_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "stakePoolList"),
    3: .same(proto: "stakeItemList"),
    4: .same(proto: "userStakeRecordList"),
    5: .same(proto: "miningProviderList"),
    6: .same(proto: "rewardTokenList"),
    7: .same(proto: "maxRewardPoolNumber"),
    8: .same(proto: "miningProviderSwitch"),
    9: .same(proto: "maxStakeItemNumber"),
    10: .same(proto: "stakeTokenList"),
    11: .same(proto: "stakeItemLimit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.stakePoolList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.stakeItemList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.userStakeRecordList) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.miningProviderList) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.rewardTokenList) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.maxRewardPoolNumber) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.miningProviderSwitch) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.maxStakeItemNumber) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.stakeTokenList) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._stakeItemLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.stakePoolList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stakePoolList, fieldNumber: 2)
    }
    if !self.stakeItemList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stakeItemList, fieldNumber: 3)
    }
    if !self.userStakeRecordList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userStakeRecordList, fieldNumber: 4)
    }
    if !self.miningProviderList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.miningProviderList, fieldNumber: 5)
    }
    if !self.rewardTokenList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardTokenList, fieldNumber: 6)
    }
    if self.maxRewardPoolNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxRewardPoolNumber, fieldNumber: 7)
    }
    if self.miningProviderSwitch != false {
      try visitor.visitSingularBoolField(value: self.miningProviderSwitch, fieldNumber: 8)
    }
    if self.maxStakeItemNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxStakeItemNumber, fieldNumber: 9)
    }
    if !self.stakeTokenList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.stakeTokenList, fieldNumber: 10)
    }
    try { if let v = self._stakeItemLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Mining_GenesisState, rhs: Stafihub_Stafihub_Mining_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.stakePoolList != rhs.stakePoolList {return false}
    if lhs.stakeItemList != rhs.stakeItemList {return false}
    if lhs.userStakeRecordList != rhs.userStakeRecordList {return false}
    if lhs.miningProviderList != rhs.miningProviderList {return false}
    if lhs.rewardTokenList != rhs.rewardTokenList {return false}
    if lhs.maxRewardPoolNumber != rhs.maxRewardPoolNumber {return false}
    if lhs.miningProviderSwitch != rhs.miningProviderSwitch {return false}
    if lhs.maxStakeItemNumber != rhs.maxStakeItemNumber {return false}
    if lhs.stakeTokenList != rhs.stakeTokenList {return false}
    if lhs._stakeItemLimit != rhs._stakeItemLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
