// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/stakeibc/callbacks.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ---------------------- Delegation Callbacks ---------------------- //
struct Stride_Stakeibc_SplitDelegation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validator: String = String()

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Stakeibc_DelegateCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hostZoneID: String = String()

  var depositRecordID: UInt64 = 0

  var splitDelegations: [Stride_Stakeibc_SplitDelegation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Stakeibc_ClaimCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userRedemptionRecordID: String = String()

  var chainID: String = String()

  var epochNumber: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ---------------------- Reinvest Callback ---------------------- //
struct Stride_Stakeibc_ReinvestCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reinvestAmount: Cosmos_Base_V1beta1_Coin {
    get {return _reinvestAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_reinvestAmount = newValue}
  }
  /// Returns true if `reinvestAmount` has been explicitly set.
  var hasReinvestAmount: Bool {return self._reinvestAmount != nil}
  /// Clears the value of `reinvestAmount`. Subsequent reads from it will return its default value.
  mutating func clearReinvestAmount() {self._reinvestAmount = nil}

  var hostZoneID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reinvestAmount: Cosmos_Base_V1beta1_Coin? = nil
}

/// ---------------------- Undelegation Callbacks ---------------------- //
struct Stride_Stakeibc_UndelegateCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hostZoneID: String = String()

  var splitDelegations: [Stride_Stakeibc_SplitDelegation] = []

  var epochUnbondingRecordIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ---------------------- Redemption Callbacks ---------------------- //
struct Stride_Stakeibc_RedemptionCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hostZoneID: String = String()

  var epochUnbondingRecordIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Stakeibc_Rebalancing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var srcValidator: String = String()

  var dstValidator: String = String()

  var amt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Stakeibc_RebalanceCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hostZoneID: String = String()

  var rebalancings: [Stride_Stakeibc_Rebalancing] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stride_Stakeibc_SplitDelegation: @unchecked Sendable {}
extension Stride_Stakeibc_DelegateCallback: @unchecked Sendable {}
extension Stride_Stakeibc_ClaimCallback: @unchecked Sendable {}
extension Stride_Stakeibc_ReinvestCallback: @unchecked Sendable {}
extension Stride_Stakeibc_UndelegateCallback: @unchecked Sendable {}
extension Stride_Stakeibc_RedemptionCallback: @unchecked Sendable {}
extension Stride_Stakeibc_Rebalancing: @unchecked Sendable {}
extension Stride_Stakeibc_RebalanceCallback: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.stakeibc"

extension Stride_Stakeibc_SplitDelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SplitDelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validator"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validator.isEmpty {
      try visitor.visitSingularStringField(value: self.validator, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_SplitDelegation, rhs: Stride_Stakeibc_SplitDelegation) -> Bool {
    if lhs.validator != rhs.validator {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_DelegateCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegateCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_zone_id"),
    2: .standard(proto: "deposit_record_id"),
    3: .standard(proto: "split_delegations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hostZoneID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.depositRecordID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.splitDelegations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.hostZoneID, fieldNumber: 1)
    }
    if self.depositRecordID != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositRecordID, fieldNumber: 2)
    }
    if !self.splitDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.splitDelegations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_DelegateCallback, rhs: Stride_Stakeibc_DelegateCallback) -> Bool {
    if lhs.hostZoneID != rhs.hostZoneID {return false}
    if lhs.depositRecordID != rhs.depositRecordID {return false}
    if lhs.splitDelegations != rhs.splitDelegations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_ClaimCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_redemption_record_id"),
    2: .standard(proto: "chain_id"),
    3: .standard(proto: "epoch_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userRedemptionRecordID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.epochNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userRedemptionRecordID.isEmpty {
      try visitor.visitSingularStringField(value: self.userRedemptionRecordID, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    if self.epochNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.epochNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_ClaimCallback, rhs: Stride_Stakeibc_ClaimCallback) -> Bool {
    if lhs.userRedemptionRecordID != rhs.userRedemptionRecordID {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.epochNumber != rhs.epochNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_ReinvestCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReinvestCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reinvest_amount"),
    3: .standard(proto: "host_zone_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reinvestAmount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hostZoneID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._reinvestAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.hostZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.hostZoneID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_ReinvestCallback, rhs: Stride_Stakeibc_ReinvestCallback) -> Bool {
    if lhs._reinvestAmount != rhs._reinvestAmount {return false}
    if lhs.hostZoneID != rhs.hostZoneID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_UndelegateCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UndelegateCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_zone_id"),
    2: .standard(proto: "split_delegations"),
    3: .standard(proto: "epoch_unbonding_record_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hostZoneID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.splitDelegations) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.epochUnbondingRecordIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.hostZoneID, fieldNumber: 1)
    }
    if !self.splitDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.splitDelegations, fieldNumber: 2)
    }
    if !self.epochUnbondingRecordIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.epochUnbondingRecordIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_UndelegateCallback, rhs: Stride_Stakeibc_UndelegateCallback) -> Bool {
    if lhs.hostZoneID != rhs.hostZoneID {return false}
    if lhs.splitDelegations != rhs.splitDelegations {return false}
    if lhs.epochUnbondingRecordIds != rhs.epochUnbondingRecordIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_RedemptionCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedemptionCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_zone_id"),
    2: .standard(proto: "epoch_unbonding_record_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hostZoneID) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.epochUnbondingRecordIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.hostZoneID, fieldNumber: 1)
    }
    if !self.epochUnbondingRecordIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.epochUnbondingRecordIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_RedemptionCallback, rhs: Stride_Stakeibc_RedemptionCallback) -> Bool {
    if lhs.hostZoneID != rhs.hostZoneID {return false}
    if lhs.epochUnbondingRecordIds != rhs.epochUnbondingRecordIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_Rebalancing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Rebalancing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "src_validator"),
    2: .standard(proto: "dst_validator"),
    3: .same(proto: "amt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.srcValidator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dstValidator) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.srcValidator.isEmpty {
      try visitor.visitSingularStringField(value: self.srcValidator, fieldNumber: 1)
    }
    if !self.dstValidator.isEmpty {
      try visitor.visitSingularStringField(value: self.dstValidator, fieldNumber: 2)
    }
    if !self.amt.isEmpty {
      try visitor.visitSingularStringField(value: self.amt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_Rebalancing, rhs: Stride_Stakeibc_Rebalancing) -> Bool {
    if lhs.srcValidator != rhs.srcValidator {return false}
    if lhs.dstValidator != rhs.dstValidator {return false}
    if lhs.amt != rhs.amt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Stakeibc_RebalanceCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RebalanceCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_zone_id"),
    2: .same(proto: "rebalancings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hostZoneID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rebalancings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostZoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.hostZoneID, fieldNumber: 1)
    }
    if !self.rebalancings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rebalancings, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_RebalanceCallback, rhs: Stride_Stakeibc_RebalanceCallback) -> Bool {
    if lhs.hostZoneID != rhs.hostZoneID {return false}
    if lhs.rebalancings != rhs.rebalancings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
