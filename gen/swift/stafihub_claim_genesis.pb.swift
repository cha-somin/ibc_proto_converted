// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stafihub/claim/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the claim module's genesis state.
struct Stafihub_Stafihub_Claim_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stafihub_Stafihub_Claim_Params {
    get {return _params ?? Stafihub_Stafihub_Claim_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var merkleRootList: [Stafihub_Stafihub_Claim_MerkleRoot] = []

  var claimBitMapList: [Stafihub_Stafihub_Claim_ClaimBitMap] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var claimSwitchList: [Stafihub_Stafihub_Claim_ClaimSwitch] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stafihub_Stafihub_Claim_Params? = nil
}

struct Stafihub_Stafihub_Claim_MerkleRoot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var round: UInt64 = 0

  var rootHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stafihub_Stafihub_Claim_ClaimBitMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var round: UInt64 = 0

  var wordIndex: UInt64 = 0

  var bits: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stafihub_Stafihub_Claim_ClaimSwitch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var round: UInt64 = 0

  var isOpen: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stafihub_Stafihub_Claim_GenesisState: @unchecked Sendable {}
extension Stafihub_Stafihub_Claim_MerkleRoot: @unchecked Sendable {}
extension Stafihub_Stafihub_Claim_ClaimBitMap: @unchecked Sendable {}
extension Stafihub_Stafihub_Claim_ClaimSwitch: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stafihub.stafihub.claim"

extension Stafihub_Stafihub_Claim_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "merkleRootList"),
    3: .same(proto: "claimBitMapList"),
    4: .same(proto: "claimSwitchList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.merkleRootList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.claimBitMapList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.claimSwitchList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.merkleRootList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.merkleRootList, fieldNumber: 2)
    }
    if !self.claimBitMapList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimBitMapList, fieldNumber: 3)
    }
    if !self.claimSwitchList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimSwitchList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Claim_GenesisState, rhs: Stafihub_Stafihub_Claim_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.merkleRootList != rhs.merkleRootList {return false}
    if lhs.claimBitMapList != rhs.claimBitMapList {return false}
    if lhs.claimSwitchList != rhs.claimSwitchList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Claim_MerkleRoot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MerkleRoot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "round"),
    2: .same(proto: "rootHash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rootHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 1)
    }
    if !self.rootHash.isEmpty {
      try visitor.visitSingularStringField(value: self.rootHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Claim_MerkleRoot, rhs: Stafihub_Stafihub_Claim_MerkleRoot) -> Bool {
    if lhs.round != rhs.round {return false}
    if lhs.rootHash != rhs.rootHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Claim_ClaimBitMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimBitMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "round"),
    2: .same(proto: "wordIndex"),
    3: .same(proto: "bits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.wordIndex) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.bits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 1)
    }
    if self.wordIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.wordIndex, fieldNumber: 2)
    }
    if self.bits != 0 {
      try visitor.visitSingularUInt64Field(value: self.bits, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Claim_ClaimBitMap, rhs: Stafihub_Stafihub_Claim_ClaimBitMap) -> Bool {
    if lhs.round != rhs.round {return false}
    if lhs.wordIndex != rhs.wordIndex {return false}
    if lhs.bits != rhs.bits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Claim_ClaimSwitch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimSwitch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "round"),
    2: .same(proto: "isOpen"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isOpen) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 1)
    }
    if self.isOpen != false {
      try visitor.visitSingularBoolField(value: self.isOpen, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Claim_ClaimSwitch, rhs: Stafihub_Stafihub_Claim_ClaimSwitch) -> Bool {
    if lhs.round != rhs.round {return false}
    if lhs.isOpen != rhs.isOpen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
