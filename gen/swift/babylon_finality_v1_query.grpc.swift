//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/finality/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Finality_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Finality_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Babylon_Finality_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryParamsRequest, Babylon_Finality_V1_QueryParamsResponse>

  func listPublicRandomness(
    _ request: Babylon_Finality_V1_QueryListPublicRandomnessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryListPublicRandomnessRequest, Babylon_Finality_V1_QueryListPublicRandomnessResponse>

  func listPubRandCommit(
    _ request: Babylon_Finality_V1_QueryListPubRandCommitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryListPubRandCommitRequest, Babylon_Finality_V1_QueryListPubRandCommitResponse>

  func block(
    _ request: Babylon_Finality_V1_QueryBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryBlockRequest, Babylon_Finality_V1_QueryBlockResponse>

  func listBlocks(
    _ request: Babylon_Finality_V1_QueryListBlocksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryListBlocksRequest, Babylon_Finality_V1_QueryListBlocksResponse>

  func votesAtHeight(
    _ request: Babylon_Finality_V1_QueryVotesAtHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryVotesAtHeightRequest, Babylon_Finality_V1_QueryVotesAtHeightResponse>

  func evidence(
    _ request: Babylon_Finality_V1_QueryEvidenceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryEvidenceRequest, Babylon_Finality_V1_QueryEvidenceResponse>

  func listEvidences(
    _ request: Babylon_Finality_V1_QueryListEvidencesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QueryListEvidencesRequest, Babylon_Finality_V1_QueryListEvidencesResponse>

  func signingInfo(
    _ request: Babylon_Finality_V1_QuerySigningInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QuerySigningInfoRequest, Babylon_Finality_V1_QuerySigningInfoResponse>

  func signingInfos(
    _ request: Babylon_Finality_V1_QuerySigningInfosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Finality_V1_QuerySigningInfosRequest, Babylon_Finality_V1_QuerySigningInfosResponse>
}

extension Babylon_Finality_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.finality.v1.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Babylon_Finality_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryParamsRequest, Babylon_Finality_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ListPublicRandomness is a range query for public randomness of a given finality provider
  /// NOTE: Babylon only has the knowledge of public randomness that is already revealed by
  /// finality providers, i.e., the finality provider alreayd provides a finality signature
  /// at the corresponding height
  /// TODO: remove public randomness storage?
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPublicRandomness.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPublicRandomness(
    _ request: Babylon_Finality_V1_QueryListPublicRandomnessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryListPublicRandomnessRequest, Babylon_Finality_V1_QueryListPublicRandomnessResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listPublicRandomness.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPublicRandomnessInterceptors() ?? []
    )
  }

  /// ListPubRandCommit is a range query for public randomness commitments of a given finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPubRandCommit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listPubRandCommit(
    _ request: Babylon_Finality_V1_QueryListPubRandCommitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryListPubRandCommitRequest, Babylon_Finality_V1_QueryListPubRandCommitResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listPubRandCommit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPubRandCommitInterceptors() ?? []
    )
  }

  /// Block queries a block at a given height
  ///
  /// - Parameters:
  ///   - request: Request to send to Block.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func block(
    _ request: Babylon_Finality_V1_QueryBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryBlockRequest, Babylon_Finality_V1_QueryBlockResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.block.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockInterceptors() ?? []
    )
  }

  /// ListBlocks is a range query for blocks at a given status
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBlocks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listBlocks(
    _ request: Babylon_Finality_V1_QueryListBlocksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryListBlocksRequest, Babylon_Finality_V1_QueryListBlocksResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBlocksInterceptors() ?? []
    )
  }

  /// VotesAtHeight queries finality providers who have signed the block at given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesAtHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesAtHeight(
    _ request: Babylon_Finality_V1_QueryVotesAtHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryVotesAtHeightRequest, Babylon_Finality_V1_QueryVotesAtHeightResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.votesAtHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesAtHeightInterceptors() ?? []
    )
  }

  /// Evidence queries the first evidence which can be used for extracting the BTC SK
  ///
  /// - Parameters:
  ///   - request: Request to send to Evidence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func evidence(
    _ request: Babylon_Finality_V1_QueryEvidenceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryEvidenceRequest, Babylon_Finality_V1_QueryEvidenceResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.evidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEvidenceInterceptors() ?? []
    )
  }

  /// ListEvidences queries is a range query for evidences
  ///
  /// - Parameters:
  ///   - request: Request to send to ListEvidences.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listEvidences(
    _ request: Babylon_Finality_V1_QueryListEvidencesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QueryListEvidencesRequest, Babylon_Finality_V1_QueryListEvidencesResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listEvidences.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEvidencesInterceptors() ?? []
    )
  }

  /// SigningInfo queries the signing info of given finality provider BTC public key
  ///
  /// - Parameters:
  ///   - request: Request to send to SigningInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signingInfo(
    _ request: Babylon_Finality_V1_QuerySigningInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QuerySigningInfoRequest, Babylon_Finality_V1_QuerySigningInfoResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSigningInfoInterceptors() ?? []
    )
  }

  /// SigningInfos queries the signing info of all the active finality providers
  ///
  /// - Parameters:
  ///   - request: Request to send to SigningInfos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signingInfos(
    _ request: Babylon_Finality_V1_QuerySigningInfosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Finality_V1_QuerySigningInfosRequest, Babylon_Finality_V1_QuerySigningInfosResponse> {
    return self.makeUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSigningInfosInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Finality_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Finality_V1_QueryNIOClient")
internal final class Babylon_Finality_V1_QueryClient: Babylon_Finality_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.finality.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Finality_V1_QueryNIOClient: Babylon_Finality_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.finality.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Finality_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Babylon_Finality_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryParamsRequest, Babylon_Finality_V1_QueryParamsResponse>

  func makeListPublicRandomnessCall(
    _ request: Babylon_Finality_V1_QueryListPublicRandomnessRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListPublicRandomnessRequest, Babylon_Finality_V1_QueryListPublicRandomnessResponse>

  func makeListPubRandCommitCall(
    _ request: Babylon_Finality_V1_QueryListPubRandCommitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListPubRandCommitRequest, Babylon_Finality_V1_QueryListPubRandCommitResponse>

  func makeBlockCall(
    _ request: Babylon_Finality_V1_QueryBlockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryBlockRequest, Babylon_Finality_V1_QueryBlockResponse>

  func makeListBlocksCall(
    _ request: Babylon_Finality_V1_QueryListBlocksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListBlocksRequest, Babylon_Finality_V1_QueryListBlocksResponse>

  func makeVotesAtHeightCall(
    _ request: Babylon_Finality_V1_QueryVotesAtHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryVotesAtHeightRequest, Babylon_Finality_V1_QueryVotesAtHeightResponse>

  func makeEvidenceCall(
    _ request: Babylon_Finality_V1_QueryEvidenceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryEvidenceRequest, Babylon_Finality_V1_QueryEvidenceResponse>

  func makeListEvidencesCall(
    _ request: Babylon_Finality_V1_QueryListEvidencesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListEvidencesRequest, Babylon_Finality_V1_QueryListEvidencesResponse>

  func makeSigningInfoCall(
    _ request: Babylon_Finality_V1_QuerySigningInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QuerySigningInfoRequest, Babylon_Finality_V1_QuerySigningInfoResponse>

  func makeSigningInfosCall(
    _ request: Babylon_Finality_V1_QuerySigningInfosRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QuerySigningInfosRequest, Babylon_Finality_V1_QuerySigningInfosResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Finality_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Finality_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Babylon_Finality_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryParamsRequest, Babylon_Finality_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeListPublicRandomnessCall(
    _ request: Babylon_Finality_V1_QueryListPublicRandomnessRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListPublicRandomnessRequest, Babylon_Finality_V1_QueryListPublicRandomnessResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listPublicRandomness.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPublicRandomnessInterceptors() ?? []
    )
  }

  internal func makeListPubRandCommitCall(
    _ request: Babylon_Finality_V1_QueryListPubRandCommitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListPubRandCommitRequest, Babylon_Finality_V1_QueryListPubRandCommitResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listPubRandCommit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPubRandCommitInterceptors() ?? []
    )
  }

  internal func makeBlockCall(
    _ request: Babylon_Finality_V1_QueryBlockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryBlockRequest, Babylon_Finality_V1_QueryBlockResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.block.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockInterceptors() ?? []
    )
  }

  internal func makeListBlocksCall(
    _ request: Babylon_Finality_V1_QueryListBlocksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListBlocksRequest, Babylon_Finality_V1_QueryListBlocksResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBlocksInterceptors() ?? []
    )
  }

  internal func makeVotesAtHeightCall(
    _ request: Babylon_Finality_V1_QueryVotesAtHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryVotesAtHeightRequest, Babylon_Finality_V1_QueryVotesAtHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.votesAtHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesAtHeightInterceptors() ?? []
    )
  }

  internal func makeEvidenceCall(
    _ request: Babylon_Finality_V1_QueryEvidenceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryEvidenceRequest, Babylon_Finality_V1_QueryEvidenceResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.evidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEvidenceInterceptors() ?? []
    )
  }

  internal func makeListEvidencesCall(
    _ request: Babylon_Finality_V1_QueryListEvidencesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QueryListEvidencesRequest, Babylon_Finality_V1_QueryListEvidencesResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listEvidences.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEvidencesInterceptors() ?? []
    )
  }

  internal func makeSigningInfoCall(
    _ request: Babylon_Finality_V1_QuerySigningInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QuerySigningInfoRequest, Babylon_Finality_V1_QuerySigningInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSigningInfoInterceptors() ?? []
    )
  }

  internal func makeSigningInfosCall(
    _ request: Babylon_Finality_V1_QuerySigningInfosRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Finality_V1_QuerySigningInfosRequest, Babylon_Finality_V1_QuerySigningInfosResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSigningInfosInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Finality_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Babylon_Finality_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func listPublicRandomness(
    _ request: Babylon_Finality_V1_QueryListPublicRandomnessRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryListPublicRandomnessResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listPublicRandomness.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPublicRandomnessInterceptors() ?? []
    )
  }

  internal func listPubRandCommit(
    _ request: Babylon_Finality_V1_QueryListPubRandCommitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryListPubRandCommitResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listPubRandCommit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPubRandCommitInterceptors() ?? []
    )
  }

  internal func block(
    _ request: Babylon_Finality_V1_QueryBlockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryBlockResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.block.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockInterceptors() ?? []
    )
  }

  internal func listBlocks(
    _ request: Babylon_Finality_V1_QueryListBlocksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryListBlocksResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBlocksInterceptors() ?? []
    )
  }

  internal func votesAtHeight(
    _ request: Babylon_Finality_V1_QueryVotesAtHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryVotesAtHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.votesAtHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesAtHeightInterceptors() ?? []
    )
  }

  internal func evidence(
    _ request: Babylon_Finality_V1_QueryEvidenceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryEvidenceResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.evidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEvidenceInterceptors() ?? []
    )
  }

  internal func listEvidences(
    _ request: Babylon_Finality_V1_QueryListEvidencesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QueryListEvidencesResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.listEvidences.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEvidencesInterceptors() ?? []
    )
  }

  internal func signingInfo(
    _ request: Babylon_Finality_V1_QuerySigningInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QuerySigningInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSigningInfoInterceptors() ?? []
    )
  }

  internal func signingInfos(
    _ request: Babylon_Finality_V1_QuerySigningInfosRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Finality_V1_QuerySigningInfosResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSigningInfosInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Finality_V1_QueryAsyncClient: Babylon_Finality_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Finality_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryParamsRequest, Babylon_Finality_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'listPublicRandomness'.
  func makeListPublicRandomnessInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryListPublicRandomnessRequest, Babylon_Finality_V1_QueryListPublicRandomnessResponse>]

  /// - Returns: Interceptors to use when invoking 'listPubRandCommit'.
  func makeListPubRandCommitInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryListPubRandCommitRequest, Babylon_Finality_V1_QueryListPubRandCommitResponse>]

  /// - Returns: Interceptors to use when invoking 'block'.
  func makeBlockInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryBlockRequest, Babylon_Finality_V1_QueryBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'listBlocks'.
  func makeListBlocksInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryListBlocksRequest, Babylon_Finality_V1_QueryListBlocksResponse>]

  /// - Returns: Interceptors to use when invoking 'votesAtHeight'.
  func makeVotesAtHeightInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryVotesAtHeightRequest, Babylon_Finality_V1_QueryVotesAtHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'evidence'.
  func makeEvidenceInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryEvidenceRequest, Babylon_Finality_V1_QueryEvidenceResponse>]

  /// - Returns: Interceptors to use when invoking 'listEvidences'.
  func makeListEvidencesInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QueryListEvidencesRequest, Babylon_Finality_V1_QueryListEvidencesResponse>]

  /// - Returns: Interceptors to use when invoking 'signingInfo'.
  func makeSigningInfoInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QuerySigningInfoRequest, Babylon_Finality_V1_QuerySigningInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'signingInfos'.
  func makeSigningInfosInterceptors() -> [ClientInterceptor<Babylon_Finality_V1_QuerySigningInfosRequest, Babylon_Finality_V1_QuerySigningInfosResponse>]
}

internal enum Babylon_Finality_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.finality.v1.Query",
    methods: [
      Babylon_Finality_V1_QueryClientMetadata.Methods.params,
      Babylon_Finality_V1_QueryClientMetadata.Methods.listPublicRandomness,
      Babylon_Finality_V1_QueryClientMetadata.Methods.listPubRandCommit,
      Babylon_Finality_V1_QueryClientMetadata.Methods.block,
      Babylon_Finality_V1_QueryClientMetadata.Methods.listBlocks,
      Babylon_Finality_V1_QueryClientMetadata.Methods.votesAtHeight,
      Babylon_Finality_V1_QueryClientMetadata.Methods.evidence,
      Babylon_Finality_V1_QueryClientMetadata.Methods.listEvidences,
      Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfo,
      Babylon_Finality_V1_QueryClientMetadata.Methods.signingInfos,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.finality.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let listPublicRandomness = GRPCMethodDescriptor(
      name: "ListPublicRandomness",
      path: "/babylon.finality.v1.Query/ListPublicRandomness",
      type: GRPCCallType.unary
    )

    internal static let listPubRandCommit = GRPCMethodDescriptor(
      name: "ListPubRandCommit",
      path: "/babylon.finality.v1.Query/ListPubRandCommit",
      type: GRPCCallType.unary
    )

    internal static let block = GRPCMethodDescriptor(
      name: "Block",
      path: "/babylon.finality.v1.Query/Block",
      type: GRPCCallType.unary
    )

    internal static let listBlocks = GRPCMethodDescriptor(
      name: "ListBlocks",
      path: "/babylon.finality.v1.Query/ListBlocks",
      type: GRPCCallType.unary
    )

    internal static let votesAtHeight = GRPCMethodDescriptor(
      name: "VotesAtHeight",
      path: "/babylon.finality.v1.Query/VotesAtHeight",
      type: GRPCCallType.unary
    )

    internal static let evidence = GRPCMethodDescriptor(
      name: "Evidence",
      path: "/babylon.finality.v1.Query/Evidence",
      type: GRPCCallType.unary
    )

    internal static let listEvidences = GRPCMethodDescriptor(
      name: "ListEvidences",
      path: "/babylon.finality.v1.Query/ListEvidences",
      type: GRPCCallType.unary
    )

    internal static let signingInfo = GRPCMethodDescriptor(
      name: "SigningInfo",
      path: "/babylon.finality.v1.Query/SigningInfo",
      type: GRPCCallType.unary
    )

    internal static let signingInfos = GRPCMethodDescriptor(
      name: "SigningInfos",
      path: "/babylon.finality.v1.Query/SigningInfos",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Finality_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Finality_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Babylon_Finality_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryParamsResponse>

  /// ListPublicRandomness is a range query for public randomness of a given finality provider
  /// NOTE: Babylon only has the knowledge of public randomness that is already revealed by
  /// finality providers, i.e., the finality provider alreayd provides a finality signature
  /// at the corresponding height
  /// TODO: remove public randomness storage?
  func listPublicRandomness(request: Babylon_Finality_V1_QueryListPublicRandomnessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryListPublicRandomnessResponse>

  /// ListPubRandCommit is a range query for public randomness commitments of a given finality provider
  func listPubRandCommit(request: Babylon_Finality_V1_QueryListPubRandCommitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryListPubRandCommitResponse>

  /// Block queries a block at a given height
  func block(request: Babylon_Finality_V1_QueryBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryBlockResponse>

  /// ListBlocks is a range query for blocks at a given status
  func listBlocks(request: Babylon_Finality_V1_QueryListBlocksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryListBlocksResponse>

  /// VotesAtHeight queries finality providers who have signed the block at given height.
  func votesAtHeight(request: Babylon_Finality_V1_QueryVotesAtHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryVotesAtHeightResponse>

  /// Evidence queries the first evidence which can be used for extracting the BTC SK
  func evidence(request: Babylon_Finality_V1_QueryEvidenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryEvidenceResponse>

  /// ListEvidences queries is a range query for evidences
  func listEvidences(request: Babylon_Finality_V1_QueryListEvidencesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QueryListEvidencesResponse>

  /// SigningInfo queries the signing info of given finality provider BTC public key
  func signingInfo(request: Babylon_Finality_V1_QuerySigningInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QuerySigningInfoResponse>

  /// SigningInfos queries the signing info of all the active finality providers
  func signingInfos(request: Babylon_Finality_V1_QuerySigningInfosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Finality_V1_QuerySigningInfosResponse>
}

extension Babylon_Finality_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Finality_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ListPublicRandomness":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListPublicRandomnessRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListPublicRandomnessResponse>(),
        interceptors: self.interceptors?.makeListPublicRandomnessInterceptors() ?? [],
        userFunction: self.listPublicRandomness(request:context:)
      )

    case "ListPubRandCommit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListPubRandCommitRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListPubRandCommitResponse>(),
        interceptors: self.interceptors?.makeListPubRandCommitInterceptors() ?? [],
        userFunction: self.listPubRandCommit(request:context:)
      )

    case "Block":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryBlockRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryBlockResponse>(),
        interceptors: self.interceptors?.makeBlockInterceptors() ?? [],
        userFunction: self.block(request:context:)
      )

    case "ListBlocks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListBlocksRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListBlocksResponse>(),
        interceptors: self.interceptors?.makeListBlocksInterceptors() ?? [],
        userFunction: self.listBlocks(request:context:)
      )

    case "VotesAtHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryVotesAtHeightRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryVotesAtHeightResponse>(),
        interceptors: self.interceptors?.makeVotesAtHeightInterceptors() ?? [],
        userFunction: self.votesAtHeight(request:context:)
      )

    case "Evidence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryEvidenceRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryEvidenceResponse>(),
        interceptors: self.interceptors?.makeEvidenceInterceptors() ?? [],
        userFunction: self.evidence(request:context:)
      )

    case "ListEvidences":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListEvidencesRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListEvidencesResponse>(),
        interceptors: self.interceptors?.makeListEvidencesInterceptors() ?? [],
        userFunction: self.listEvidences(request:context:)
      )

    case "SigningInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QuerySigningInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QuerySigningInfoResponse>(),
        interceptors: self.interceptors?.makeSigningInfoInterceptors() ?? [],
        userFunction: self.signingInfo(request:context:)
      )

    case "SigningInfos":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QuerySigningInfosRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QuerySigningInfosResponse>(),
        interceptors: self.interceptors?.makeSigningInfosInterceptors() ?? [],
        userFunction: self.signingInfos(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Finality_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Finality_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Babylon_Finality_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryParamsResponse

  /// ListPublicRandomness is a range query for public randomness of a given finality provider
  /// NOTE: Babylon only has the knowledge of public randomness that is already revealed by
  /// finality providers, i.e., the finality provider alreayd provides a finality signature
  /// at the corresponding height
  /// TODO: remove public randomness storage?
  @Sendable func listPublicRandomness(
    request: Babylon_Finality_V1_QueryListPublicRandomnessRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryListPublicRandomnessResponse

  /// ListPubRandCommit is a range query for public randomness commitments of a given finality provider
  @Sendable func listPubRandCommit(
    request: Babylon_Finality_V1_QueryListPubRandCommitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryListPubRandCommitResponse

  /// Block queries a block at a given height
  @Sendable func block(
    request: Babylon_Finality_V1_QueryBlockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryBlockResponse

  /// ListBlocks is a range query for blocks at a given status
  @Sendable func listBlocks(
    request: Babylon_Finality_V1_QueryListBlocksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryListBlocksResponse

  /// VotesAtHeight queries finality providers who have signed the block at given height.
  @Sendable func votesAtHeight(
    request: Babylon_Finality_V1_QueryVotesAtHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryVotesAtHeightResponse

  /// Evidence queries the first evidence which can be used for extracting the BTC SK
  @Sendable func evidence(
    request: Babylon_Finality_V1_QueryEvidenceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryEvidenceResponse

  /// ListEvidences queries is a range query for evidences
  @Sendable func listEvidences(
    request: Babylon_Finality_V1_QueryListEvidencesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QueryListEvidencesResponse

  /// SigningInfo queries the signing info of given finality provider BTC public key
  @Sendable func signingInfo(
    request: Babylon_Finality_V1_QuerySigningInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QuerySigningInfoResponse

  /// SigningInfos queries the signing info of all the active finality providers
  @Sendable func signingInfos(
    request: Babylon_Finality_V1_QuerySigningInfosRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Finality_V1_QuerySigningInfosResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Finality_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Finality_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Finality_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Finality_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ListPublicRandomness":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListPublicRandomnessRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListPublicRandomnessResponse>(),
        interceptors: self.interceptors?.makeListPublicRandomnessInterceptors() ?? [],
        wrapping: self.listPublicRandomness(request:context:)
      )

    case "ListPubRandCommit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListPubRandCommitRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListPubRandCommitResponse>(),
        interceptors: self.interceptors?.makeListPubRandCommitInterceptors() ?? [],
        wrapping: self.listPubRandCommit(request:context:)
      )

    case "Block":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryBlockRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryBlockResponse>(),
        interceptors: self.interceptors?.makeBlockInterceptors() ?? [],
        wrapping: self.block(request:context:)
      )

    case "ListBlocks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListBlocksRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListBlocksResponse>(),
        interceptors: self.interceptors?.makeListBlocksInterceptors() ?? [],
        wrapping: self.listBlocks(request:context:)
      )

    case "VotesAtHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryVotesAtHeightRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryVotesAtHeightResponse>(),
        interceptors: self.interceptors?.makeVotesAtHeightInterceptors() ?? [],
        wrapping: self.votesAtHeight(request:context:)
      )

    case "Evidence":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryEvidenceRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryEvidenceResponse>(),
        interceptors: self.interceptors?.makeEvidenceInterceptors() ?? [],
        wrapping: self.evidence(request:context:)
      )

    case "ListEvidences":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QueryListEvidencesRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QueryListEvidencesResponse>(),
        interceptors: self.interceptors?.makeListEvidencesInterceptors() ?? [],
        wrapping: self.listEvidences(request:context:)
      )

    case "SigningInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QuerySigningInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QuerySigningInfoResponse>(),
        interceptors: self.interceptors?.makeSigningInfoInterceptors() ?? [],
        wrapping: self.signingInfo(request:context:)
      )

    case "SigningInfos":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Finality_V1_QuerySigningInfosRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Finality_V1_QuerySigningInfosResponse>(),
        interceptors: self.interceptors?.makeSigningInfosInterceptors() ?? [],
        wrapping: self.signingInfos(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Finality_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryParamsRequest, Babylon_Finality_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'listPublicRandomness'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPublicRandomnessInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryListPublicRandomnessRequest, Babylon_Finality_V1_QueryListPublicRandomnessResponse>]

  /// - Returns: Interceptors to use when handling 'listPubRandCommit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPubRandCommitInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryListPubRandCommitRequest, Babylon_Finality_V1_QueryListPubRandCommitResponse>]

  /// - Returns: Interceptors to use when handling 'block'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryBlockRequest, Babylon_Finality_V1_QueryBlockResponse>]

  /// - Returns: Interceptors to use when handling 'listBlocks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListBlocksInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryListBlocksRequest, Babylon_Finality_V1_QueryListBlocksResponse>]

  /// - Returns: Interceptors to use when handling 'votesAtHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesAtHeightInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryVotesAtHeightRequest, Babylon_Finality_V1_QueryVotesAtHeightResponse>]

  /// - Returns: Interceptors to use when handling 'evidence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEvidenceInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryEvidenceRequest, Babylon_Finality_V1_QueryEvidenceResponse>]

  /// - Returns: Interceptors to use when handling 'listEvidences'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListEvidencesInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QueryListEvidencesRequest, Babylon_Finality_V1_QueryListEvidencesResponse>]

  /// - Returns: Interceptors to use when handling 'signingInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSigningInfoInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QuerySigningInfoRequest, Babylon_Finality_V1_QuerySigningInfoResponse>]

  /// - Returns: Interceptors to use when handling 'signingInfos'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSigningInfosInterceptors() -> [ServerInterceptor<Babylon_Finality_V1_QuerySigningInfosRequest, Babylon_Finality_V1_QuerySigningInfosResponse>]
}

internal enum Babylon_Finality_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.finality.v1.Query",
    methods: [
      Babylon_Finality_V1_QueryServerMetadata.Methods.params,
      Babylon_Finality_V1_QueryServerMetadata.Methods.listPublicRandomness,
      Babylon_Finality_V1_QueryServerMetadata.Methods.listPubRandCommit,
      Babylon_Finality_V1_QueryServerMetadata.Methods.block,
      Babylon_Finality_V1_QueryServerMetadata.Methods.listBlocks,
      Babylon_Finality_V1_QueryServerMetadata.Methods.votesAtHeight,
      Babylon_Finality_V1_QueryServerMetadata.Methods.evidence,
      Babylon_Finality_V1_QueryServerMetadata.Methods.listEvidences,
      Babylon_Finality_V1_QueryServerMetadata.Methods.signingInfo,
      Babylon_Finality_V1_QueryServerMetadata.Methods.signingInfos,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.finality.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let listPublicRandomness = GRPCMethodDescriptor(
      name: "ListPublicRandomness",
      path: "/babylon.finality.v1.Query/ListPublicRandomness",
      type: GRPCCallType.unary
    )

    internal static let listPubRandCommit = GRPCMethodDescriptor(
      name: "ListPubRandCommit",
      path: "/babylon.finality.v1.Query/ListPubRandCommit",
      type: GRPCCallType.unary
    )

    internal static let block = GRPCMethodDescriptor(
      name: "Block",
      path: "/babylon.finality.v1.Query/Block",
      type: GRPCCallType.unary
    )

    internal static let listBlocks = GRPCMethodDescriptor(
      name: "ListBlocks",
      path: "/babylon.finality.v1.Query/ListBlocks",
      type: GRPCCallType.unary
    )

    internal static let votesAtHeight = GRPCMethodDescriptor(
      name: "VotesAtHeight",
      path: "/babylon.finality.v1.Query/VotesAtHeight",
      type: GRPCCallType.unary
    )

    internal static let evidence = GRPCMethodDescriptor(
      name: "Evidence",
      path: "/babylon.finality.v1.Query/Evidence",
      type: GRPCCallType.unary
    )

    internal static let listEvidences = GRPCMethodDescriptor(
      name: "ListEvidences",
      path: "/babylon.finality.v1.Query/ListEvidences",
      type: GRPCCallType.unary
    )

    internal static let signingInfo = GRPCMethodDescriptor(
      name: "SigningInfo",
      path: "/babylon.finality.v1.Query/SigningInfo",
      type: GRPCCallType.unary
    )

    internal static let signingInfos = GRPCMethodDescriptor(
      name: "SigningInfos",
      path: "/babylon.finality.v1.Query/SigningInfos",
      type: GRPCCallType.unary
    )
  }
}
