// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstaking/v1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventNewFinalityProvider is the event emitted when a finality provider is created
struct Babylon_Btcstaking_V1_EventNewFinalityProvider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fp: Babylon_Btcstaking_V1_FinalityProvider {
    get {return _fp ?? Babylon_Btcstaking_V1_FinalityProvider()}
    set {_fp = newValue}
  }
  /// Returns true if `fp` has been explicitly set.
  var hasFp: Bool {return self._fp != nil}
  /// Clears the value of `fp`. Subsequent reads from it will return its default value.
  mutating func clearFp() {self._fp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fp: Babylon_Btcstaking_V1_FinalityProvider? = nil
}

/// EventBTCDelegationStateUpdate is the event emitted when a BTC delegation's state is
/// updated. There are the following possible state transitions:
/// - non-existing -> pending, which happens upon `MsgCreateBTCDelegation`
/// - pending -> active, which happens upon `MsgAddCovenantSigs`
/// - active -> unbonded, which happens upon `MsgBTCUndelegate` or upon staking tx timelock expires
struct Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staking_tx_hash is the hash of the staking tx.
  /// It uniquely identifies a BTC delegation
  var stakingTxHash: String = String()

  /// new_state is the new state of this BTC delegation
  var newState: Babylon_Btcstaking_V1_BTCDelegationStatus = .pending

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventSelectiveSlashing is the event emitted when an adversarial
/// finality provider selectively slashes a BTC delegation. This will
/// result in slashing of all BTC delegations under this finality provider.
struct Babylon_Btcstaking_V1_EventSelectiveSlashing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// evidence is the evidence of selective slashing
  var evidence: Babylon_Btcstaking_V1_SelectiveSlashingEvidence {
    get {return _evidence ?? Babylon_Btcstaking_V1_SelectiveSlashingEvidence()}
    set {_evidence = newValue}
  }
  /// Returns true if `evidence` has been explicitly set.
  var hasEvidence: Bool {return self._evidence != nil}
  /// Clears the value of `evidence`. Subsequent reads from it will return its default value.
  mutating func clearEvidence() {self._evidence = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _evidence: Babylon_Btcstaking_V1_SelectiveSlashingEvidence? = nil
}

/// EventPowerDistUpdate is an event that affects voting power distirbution
/// of BTC staking protocol
struct Babylon_Btcstaking_V1_EventPowerDistUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ev is the event that affects voting power distribution
  var ev: Babylon_Btcstaking_V1_EventPowerDistUpdate.OneOf_Ev? = nil

  /// slashed_fp means a finality provider is slashed
  var slashedFp: Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider {
    get {
      if case .slashedFp(let v)? = ev {return v}
      return Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider()
    }
    set {ev = .slashedFp(newValue)}
  }

  /// btc_del_state_update means a BTC delegation's state is updated
  var btcDelStateUpdate: Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate {
    get {
      if case .btcDelStateUpdate(let v)? = ev {return v}
      return Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate()
    }
    set {ev = .btcDelStateUpdate(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// ev is the event that affects voting power distribution
  enum OneOf_Ev: Equatable {
    /// slashed_fp means a finality provider is slashed
    case slashedFp(Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider)
    /// btc_del_state_update means a BTC delegation's state is updated
    case btcDelStateUpdate(Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate)

  #if !swift(>=4.1)
    static func ==(lhs: Babylon_Btcstaking_V1_EventPowerDistUpdate.OneOf_Ev, rhs: Babylon_Btcstaking_V1_EventPowerDistUpdate.OneOf_Ev) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.slashedFp, .slashedFp): return {
        guard case .slashedFp(let l) = lhs, case .slashedFp(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.btcDelStateUpdate, .btcDelStateUpdate): return {
        guard case .btcDelStateUpdate(let l) = lhs, case .btcDelStateUpdate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// EventSlashedFinalityProvider defines an event that a finality provider
  /// is slashed
  /// TODO: unify with existing slashing events
  struct EventSlashedFinalityProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pk: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstaking_V1_EventNewFinalityProvider: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_EventSelectiveSlashing: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_EventPowerDistUpdate: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_EventPowerDistUpdate.OneOf_Ev: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstaking.v1"

extension Babylon_Btcstaking_V1_EventNewFinalityProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventNewFinalityProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_EventNewFinalityProvider, rhs: Babylon_Btcstaking_V1_EventNewFinalityProvider) -> Bool {
    if lhs._fp != rhs._fp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBTCDelegationStateUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staking_tx_hash"),
    2: .standard(proto: "new_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.stakingTxHash) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.newState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stakingTxHash.isEmpty {
      try visitor.visitSingularStringField(value: self.stakingTxHash, fieldNumber: 1)
    }
    if self.newState != .pending {
      try visitor.visitSingularEnumField(value: self.newState, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate, rhs: Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate) -> Bool {
    if lhs.stakingTxHash != rhs.stakingTxHash {return false}
    if lhs.newState != rhs.newState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_EventSelectiveSlashing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventSelectiveSlashing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "evidence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._evidence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._evidence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_EventSelectiveSlashing, rhs: Babylon_Btcstaking_V1_EventSelectiveSlashing) -> Bool {
    if lhs._evidence != rhs._evidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_EventPowerDistUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventPowerDistUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "slashed_fp"),
    2: .standard(proto: "btc_del_state_update"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider?
        var hadOneofValue = false
        if let current = self.ev {
          hadOneofValue = true
          if case .slashedFp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ev = .slashedFp(v)
        }
      }()
      case 2: try {
        var v: Babylon_Btcstaking_V1_EventBTCDelegationStateUpdate?
        var hadOneofValue = false
        if let current = self.ev {
          hadOneofValue = true
          if case .btcDelStateUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.ev = .btcDelStateUpdate(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.ev {
    case .slashedFp?: try {
      guard case .slashedFp(let v)? = self.ev else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .btcDelStateUpdate?: try {
      guard case .btcDelStateUpdate(let v)? = self.ev else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_EventPowerDistUpdate, rhs: Babylon_Btcstaking_V1_EventPowerDistUpdate) -> Bool {
    if lhs.ev != rhs.ev {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Babylon_Btcstaking_V1_EventPowerDistUpdate.protoMessageName + ".EventSlashedFinalityProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.pk) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pk.isEmpty {
      try visitor.visitSingularBytesField(value: self.pk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider, rhs: Babylon_Btcstaking_V1_EventPowerDistUpdate.EventSlashedFinalityProvider) -> Bool {
    if lhs.pk != rhs.pk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
