// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quicksilver/interchainstaking/v1/proposals.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Quicksilver_Interchainstaking_V1_RegisterZoneProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var connectionID: String = String()

  var baseDenom: String = String()

  var localDenom: String = String()

  var accountPrefix: String = String()

  /// deprecated
  var multiSend: Bool = false

  var liquidityModule: Bool = false

  var messagesPerTx: Int64 = 0

  var returnToSender: Bool = false

  var depositsEnabled: Bool = false

  var unbondingEnabled: Bool = false

  var decimals: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_RegisterZoneProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var connectionID: String = String()

  var baseDenom: String = String()

  var localDenom: String = String()

  var accountPrefix: String = String()

  var multiSend: Bool = false

  var liquidityModule: Bool = false

  var deposit: String = String()

  var messagesPerTx: Int64 = 0

  var returnToSender: Bool = false

  var depositsEnabled: Bool = false

  var unbondingEnabled: Bool = false

  var decimals: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_UpdateZoneProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var chainID: String = String()

  var changes: [Quicksilver_Interchainstaking_V1_UpdateZoneValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_UpdateZoneProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var chainID: String = String()

  var changes: [Quicksilver_Interchainstaking_V1_UpdateZoneValue] = []

  var deposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UpdateZoneValue defines an individual parameter change, for use in
/// UpdateZoneProposal.
struct Quicksilver_Interchainstaking_V1_UpdateZoneValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_MsgGovReopenChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var connectionID: String = String()

  var portID: String = String()

  var authority: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgGovReopenChannelResponse defines the MsgGovReopenChannel response type.
struct Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_MsgGovCloseChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var channelID: String = String()

  var portID: String = String()

  var authority: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgGovCloseChannelResponse defines the MsgGovCloseChannel response type.
struct Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quicksilver_Interchainstaking_V1_RegisterZoneProposal: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_RegisterZoneProposalWithDeposit: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_UpdateZoneProposal: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_UpdateZoneProposalWithDeposit: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_UpdateZoneValue: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_MsgGovReopenChannel: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_MsgGovCloseChannel: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quicksilver.interchainstaking.v1"

extension Quicksilver_Interchainstaking_V1_RegisterZoneProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisterZoneProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "connection_id"),
    4: .standard(proto: "base_denom"),
    5: .standard(proto: "local_denom"),
    6: .standard(proto: "account_prefix"),
    7: .standard(proto: "multi_send"),
    8: .standard(proto: "liquidity_module"),
    9: .standard(proto: "messages_per_tx"),
    10: .standard(proto: "return_to_sender"),
    11: .standard(proto: "deposits_enabled"),
    12: .standard(proto: "unbonding_enabled"),
    13: .same(proto: "decimals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.baseDenom) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.localDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.accountPrefix) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.multiSend) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.liquidityModule) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.messagesPerTx) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.returnToSender) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.depositsEnabled) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.unbondingEnabled) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.decimals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 3)
    }
    if !self.baseDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseDenom, fieldNumber: 4)
    }
    if !self.localDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.localDenom, fieldNumber: 5)
    }
    if !self.accountPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.accountPrefix, fieldNumber: 6)
    }
    if self.multiSend != false {
      try visitor.visitSingularBoolField(value: self.multiSend, fieldNumber: 7)
    }
    if self.liquidityModule != false {
      try visitor.visitSingularBoolField(value: self.liquidityModule, fieldNumber: 8)
    }
    if self.messagesPerTx != 0 {
      try visitor.visitSingularInt64Field(value: self.messagesPerTx, fieldNumber: 9)
    }
    if self.returnToSender != false {
      try visitor.visitSingularBoolField(value: self.returnToSender, fieldNumber: 10)
    }
    if self.depositsEnabled != false {
      try visitor.visitSingularBoolField(value: self.depositsEnabled, fieldNumber: 11)
    }
    if self.unbondingEnabled != false {
      try visitor.visitSingularBoolField(value: self.unbondingEnabled, fieldNumber: 12)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt64Field(value: self.decimals, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_RegisterZoneProposal, rhs: Quicksilver_Interchainstaking_V1_RegisterZoneProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.baseDenom != rhs.baseDenom {return false}
    if lhs.localDenom != rhs.localDenom {return false}
    if lhs.accountPrefix != rhs.accountPrefix {return false}
    if lhs.multiSend != rhs.multiSend {return false}
    if lhs.liquidityModule != rhs.liquidityModule {return false}
    if lhs.messagesPerTx != rhs.messagesPerTx {return false}
    if lhs.returnToSender != rhs.returnToSender {return false}
    if lhs.depositsEnabled != rhs.depositsEnabled {return false}
    if lhs.unbondingEnabled != rhs.unbondingEnabled {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_RegisterZoneProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisterZoneProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "connection_id"),
    4: .standard(proto: "base_denom"),
    5: .standard(proto: "local_denom"),
    6: .standard(proto: "account_prefix"),
    7: .standard(proto: "multi_send"),
    8: .standard(proto: "liquidity_module"),
    9: .same(proto: "deposit"),
    10: .standard(proto: "messages_per_tx"),
    11: .standard(proto: "return_to_sender"),
    12: .standard(proto: "deposits_enabled"),
    13: .standard(proto: "unbonding_enabled"),
    14: .same(proto: "decimals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.baseDenom) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.localDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.accountPrefix) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.multiSend) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.liquidityModule) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.messagesPerTx) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.returnToSender) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.depositsEnabled) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.unbondingEnabled) }()
      case 14: try { try decoder.decodeSingularInt64Field(value: &self.decimals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 3)
    }
    if !self.baseDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseDenom, fieldNumber: 4)
    }
    if !self.localDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.localDenom, fieldNumber: 5)
    }
    if !self.accountPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.accountPrefix, fieldNumber: 6)
    }
    if self.multiSend != false {
      try visitor.visitSingularBoolField(value: self.multiSend, fieldNumber: 7)
    }
    if self.liquidityModule != false {
      try visitor.visitSingularBoolField(value: self.liquidityModule, fieldNumber: 8)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 9)
    }
    if self.messagesPerTx != 0 {
      try visitor.visitSingularInt64Field(value: self.messagesPerTx, fieldNumber: 10)
    }
    if self.returnToSender != false {
      try visitor.visitSingularBoolField(value: self.returnToSender, fieldNumber: 11)
    }
    if self.depositsEnabled != false {
      try visitor.visitSingularBoolField(value: self.depositsEnabled, fieldNumber: 12)
    }
    if self.unbondingEnabled != false {
      try visitor.visitSingularBoolField(value: self.unbondingEnabled, fieldNumber: 13)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt64Field(value: self.decimals, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_RegisterZoneProposalWithDeposit, rhs: Quicksilver_Interchainstaking_V1_RegisterZoneProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.baseDenom != rhs.baseDenom {return false}
    if lhs.localDenom != rhs.localDenom {return false}
    if lhs.accountPrefix != rhs.accountPrefix {return false}
    if lhs.multiSend != rhs.multiSend {return false}
    if lhs.liquidityModule != rhs.liquidityModule {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.messagesPerTx != rhs.messagesPerTx {return false}
    if lhs.returnToSender != rhs.returnToSender {return false}
    if lhs.depositsEnabled != rhs.depositsEnabled {return false}
    if lhs.unbondingEnabled != rhs.unbondingEnabled {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_UpdateZoneProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateZoneProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "chain_id"),
    4: .same(proto: "changes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.changes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 3)
    }
    if !self.changes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.changes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_UpdateZoneProposal, rhs: Quicksilver_Interchainstaking_V1_UpdateZoneProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.changes != rhs.changes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_UpdateZoneProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateZoneProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "chain_id"),
    4: .same(proto: "changes"),
    5: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.changes) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 3)
    }
    if !self.changes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.changes, fieldNumber: 4)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_UpdateZoneProposalWithDeposit, rhs: Quicksilver_Interchainstaking_V1_UpdateZoneProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.changes != rhs.changes {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_UpdateZoneValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateZoneValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_UpdateZoneValue, rhs: Quicksilver_Interchainstaking_V1_UpdateZoneValue) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_MsgGovReopenChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgGovReopenChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "connection_id"),
    4: .standard(proto: "port_id"),
    5: .same(proto: "authority"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.portID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 3)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 4)
    }
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, rhs: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs.authority != rhs.authority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgGovReopenChannelResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse, rhs: Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_MsgGovCloseChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgGovCloseChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "channel_id"),
    4: .standard(proto: "port_id"),
    5: .same(proto: "authority"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.channelID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.portID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 3)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 4)
    }
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, rhs: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs.authority != rhs.authority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgGovCloseChannelResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse, rhs: Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
