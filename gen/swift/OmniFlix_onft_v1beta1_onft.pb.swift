// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: OmniFlix/onft/v1beta1/onft.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Collection
struct OmniFlix_Onft_V1beta1_Collection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: OmniFlix_Onft_V1beta1_Denom {
    get {return _denom ?? OmniFlix_Onft_V1beta1_Denom()}
    set {_denom = newValue}
  }
  /// Returns true if `denom` has been explicitly set.
  var hasDenom: Bool {return self._denom != nil}
  /// Clears the value of `denom`. Subsequent reads from it will return its default value.
  mutating func clearDenom() {self._denom = nil}

  var onfts: [OmniFlix_Onft_V1beta1_ONFT] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _denom: OmniFlix_Onft_V1beta1_Denom? = nil
}

struct OmniFlix_Onft_V1beta1_IDCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denomID: String = String()

  var onftIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OmniFlix_Onft_V1beta1_Denom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var symbol: String = String()

  var name: String = String()

  var schema: String = String()

  var creator: String = String()

  var description_p: String = String()

  var previewUri: String = String()

  var uri: String = String()

  var uriHash: String = String()

  var data: String = String()

  var royaltyReceivers: [OmniFlix_Onft_V1beta1_WeightedAddress] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OmniFlix_Onft_V1beta1_DenomMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var creator: String = String()

  var schema: String = String()

  var description_p: String = String()

  var previewUri: String = String()

  var data: String = String()

  var uriHash: String = String()

  var royaltyReceivers: [OmniFlix_Onft_V1beta1_WeightedAddress] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///ASSET or ONFT
struct OmniFlix_Onft_V1beta1_ONFT {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var metadata: OmniFlix_Onft_V1beta1_Metadata {
    get {return _metadata ?? OmniFlix_Onft_V1beta1_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  var data: String = String()

  var owner: String = String()

  var transferable: Bool = false

  var extensible: Bool = false

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var nsfw: Bool = false

  var royaltyShare: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _metadata: OmniFlix_Onft_V1beta1_Metadata? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct OmniFlix_Onft_V1beta1_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var description_p: String = String()

  var mediaUri: String = String()

  var previewUri: String = String()

  var uriHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OmniFlix_Onft_V1beta1_ONFTMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var description_p: String = String()

  var previewUri: String = String()

  var data: String = String()

  var transferable: Bool = false

  var extensible: Bool = false

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var nsfw: Bool = false

  var royaltyShare: String = String()

  var uriHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct OmniFlix_Onft_V1beta1_Owner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var idCollections: [OmniFlix_Onft_V1beta1_IDCollection] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct OmniFlix_Onft_V1beta1_WeightedAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var weight: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension OmniFlix_Onft_V1beta1_Collection: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_IDCollection: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_Denom: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_DenomMetadata: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_ONFT: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_Metadata: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_ONFTMetadata: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_Owner: @unchecked Sendable {}
extension OmniFlix_Onft_V1beta1_WeightedAddress: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "OmniFlix.onft.v1beta1"

extension OmniFlix_Onft_V1beta1_Collection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Collection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "onfts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._denom) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.onfts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._denom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.onfts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.onfts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_Collection, rhs: OmniFlix_Onft_V1beta1_Collection) -> Bool {
    if lhs._denom != rhs._denom {return false}
    if lhs.onfts != rhs.onfts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_IDCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IDCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "denom_id"),
    2: .standard(proto: "onft_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.onftIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 1)
    }
    if !self.onftIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.onftIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_IDCollection, rhs: OmniFlix_Onft_V1beta1_IDCollection) -> Bool {
    if lhs.denomID != rhs.denomID {return false}
    if lhs.onftIds != rhs.onftIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_Denom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Denom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "symbol"),
    3: .same(proto: "name"),
    4: .same(proto: "schema"),
    5: .same(proto: "creator"),
    6: .same(proto: "description"),
    7: .standard(proto: "preview_uri"),
    8: .same(proto: "uri"),
    9: .standard(proto: "uri_hash"),
    10: .same(proto: "data"),
    11: .standard(proto: "royalty_receivers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.schema) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.previewUri) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.uriHash) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.royaltyReceivers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.schema.isEmpty {
      try visitor.visitSingularStringField(value: self.schema, fieldNumber: 4)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.previewUri.isEmpty {
      try visitor.visitSingularStringField(value: self.previewUri, fieldNumber: 7)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 8)
    }
    if !self.uriHash.isEmpty {
      try visitor.visitSingularStringField(value: self.uriHash, fieldNumber: 9)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 10)
    }
    if !self.royaltyReceivers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.royaltyReceivers, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_Denom, rhs: OmniFlix_Onft_V1beta1_Denom) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.name != rhs.name {return false}
    if lhs.schema != rhs.schema {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.previewUri != rhs.previewUri {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.uriHash != rhs.uriHash {return false}
    if lhs.data != rhs.data {return false}
    if lhs.royaltyReceivers != rhs.royaltyReceivers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_DenomMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DenomMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "schema"),
    3: .same(proto: "description"),
    4: .standard(proto: "preview_uri"),
    5: .same(proto: "data"),
    6: .standard(proto: "uri_hash"),
    7: .standard(proto: "royalty_receivers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.schema) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.previewUri) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.uriHash) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.royaltyReceivers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.schema.isEmpty {
      try visitor.visitSingularStringField(value: self.schema, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.previewUri.isEmpty {
      try visitor.visitSingularStringField(value: self.previewUri, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 5)
    }
    if !self.uriHash.isEmpty {
      try visitor.visitSingularStringField(value: self.uriHash, fieldNumber: 6)
    }
    if !self.royaltyReceivers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.royaltyReceivers, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_DenomMetadata, rhs: OmniFlix_Onft_V1beta1_DenomMetadata) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.schema != rhs.schema {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.previewUri != rhs.previewUri {return false}
    if lhs.data != rhs.data {return false}
    if lhs.uriHash != rhs.uriHash {return false}
    if lhs.royaltyReceivers != rhs.royaltyReceivers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_ONFT: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ONFT"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "metadata"),
    3: .same(proto: "data"),
    4: .same(proto: "owner"),
    5: .same(proto: "transferable"),
    6: .same(proto: "extensible"),
    7: .standard(proto: "created_at"),
    8: .same(proto: "nsfw"),
    9: .standard(proto: "royalty_share"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.transferable) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.extensible) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.nsfw) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.royaltyShare) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 3)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 4)
    }
    if self.transferable != false {
      try visitor.visitSingularBoolField(value: self.transferable, fieldNumber: 5)
    }
    if self.extensible != false {
      try visitor.visitSingularBoolField(value: self.extensible, fieldNumber: 6)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.nsfw != false {
      try visitor.visitSingularBoolField(value: self.nsfw, fieldNumber: 8)
    }
    if !self.royaltyShare.isEmpty {
      try visitor.visitSingularStringField(value: self.royaltyShare, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_ONFT, rhs: OmniFlix_Onft_V1beta1_ONFT) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.data != rhs.data {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.transferable != rhs.transferable {return false}
    if lhs.extensible != rhs.extensible {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.nsfw != rhs.nsfw {return false}
    if lhs.royaltyShare != rhs.royaltyShare {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "media_uri"),
    4: .standard(proto: "preview_uri"),
    5: .standard(proto: "uri_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mediaUri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.previewUri) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.uriHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.mediaUri.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaUri, fieldNumber: 3)
    }
    if !self.previewUri.isEmpty {
      try visitor.visitSingularStringField(value: self.previewUri, fieldNumber: 4)
    }
    if !self.uriHash.isEmpty {
      try visitor.visitSingularStringField(value: self.uriHash, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_Metadata, rhs: OmniFlix_Onft_V1beta1_Metadata) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.mediaUri != rhs.mediaUri {return false}
    if lhs.previewUri != rhs.previewUri {return false}
    if lhs.uriHash != rhs.uriHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_ONFTMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ONFTMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "preview_uri"),
    4: .same(proto: "data"),
    5: .same(proto: "transferable"),
    6: .same(proto: "extensible"),
    7: .standard(proto: "created_at"),
    8: .same(proto: "nsfw"),
    9: .standard(proto: "royalty_share"),
    10: .standard(proto: "uri_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.previewUri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.transferable) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.extensible) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.nsfw) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.royaltyShare) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.uriHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.previewUri.isEmpty {
      try visitor.visitSingularStringField(value: self.previewUri, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 4)
    }
    if self.transferable != false {
      try visitor.visitSingularBoolField(value: self.transferable, fieldNumber: 5)
    }
    if self.extensible != false {
      try visitor.visitSingularBoolField(value: self.extensible, fieldNumber: 6)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.nsfw != false {
      try visitor.visitSingularBoolField(value: self.nsfw, fieldNumber: 8)
    }
    if !self.royaltyShare.isEmpty {
      try visitor.visitSingularStringField(value: self.royaltyShare, fieldNumber: 9)
    }
    if !self.uriHash.isEmpty {
      try visitor.visitSingularStringField(value: self.uriHash, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_ONFTMetadata, rhs: OmniFlix_Onft_V1beta1_ONFTMetadata) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.previewUri != rhs.previewUri {return false}
    if lhs.data != rhs.data {return false}
    if lhs.transferable != rhs.transferable {return false}
    if lhs.extensible != rhs.extensible {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.nsfw != rhs.nsfw {return false}
    if lhs.royaltyShare != rhs.royaltyShare {return false}
    if lhs.uriHash != rhs.uriHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_Owner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Owner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "id_collections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.idCollections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.idCollections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.idCollections, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_Owner, rhs: OmniFlix_Onft_V1beta1_Owner) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.idCollections != rhs.idCollections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Onft_V1beta1_WeightedAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightedAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.weight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.weight.isEmpty {
      try visitor.visitSingularStringField(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Onft_V1beta1_WeightedAddress, rhs: OmniFlix_Onft_V1beta1_WeightedAddress) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
