// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: archway/rewards/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgSetContractMetadata is the request for Msg.SetContractMetadata.
struct Archway_Rewards_V1_MsgSetContractMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender_address is the msg sender address (bech32 encoded).
  var senderAddress: String = String()

  /// metadata is the contract metadata to set / update.
  /// If metadata exists, non-empty fields will be updated.
  var metadata: Archway_Rewards_V1_ContractMetadata {
    get {return _metadata ?? Archway_Rewards_V1_ContractMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _metadata: Archway_Rewards_V1_ContractMetadata? = nil
}

/// MsgSetContractMetadataResponse is the response for Msg.SetContractMetadata.
struct Archway_Rewards_V1_MsgSetContractMetadataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdrawRewards is the request for Msg.WithdrawRewards.
struct Archway_Rewards_V1_MsgWithdrawRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// rewards_address is the address to distribute rewards to (bech32 encoded).
  var rewardsAddress: String = String()

  /// mode defines the operation type.
  var mode: Archway_Rewards_V1_MsgWithdrawRewards.OneOf_Mode? = nil

  /// records_limit defines the maximum number of RewardsRecord objects to
  /// process. If provided limit is 0, the default limit is used.
  var recordsLimit: Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit {
    get {
      if case .recordsLimit(let v)? = mode {return v}
      return Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit()
    }
    set {mode = .recordsLimit(newValue)}
  }

  /// record_ids defines specific RewardsRecord object IDs to process.
  var recordIds: Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs {
    get {
      if case .recordIds(let v)? = mode {return v}
      return Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs()
    }
    set {mode = .recordIds(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// mode defines the operation type.
  enum OneOf_Mode: Equatable {
    /// records_limit defines the maximum number of RewardsRecord objects to
    /// process. If provided limit is 0, the default limit is used.
    case recordsLimit(Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit)
    /// record_ids defines specific RewardsRecord object IDs to process.
    case recordIds(Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs)

  #if !swift(>=4.1)
    static func ==(lhs: Archway_Rewards_V1_MsgWithdrawRewards.OneOf_Mode, rhs: Archway_Rewards_V1_MsgWithdrawRewards.OneOf_Mode) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.recordsLimit, .recordsLimit): return {
        guard case .recordsLimit(let l) = lhs, case .recordsLimit(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.recordIds, .recordIds): return {
        guard case .recordIds(let l) = lhs, case .recordIds(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct RecordsLimit {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var limit: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct RecordIDs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ids: [UInt64] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

/// MsgWithdrawRewardsResponse is the response for Msg.WithdrawRewards.
struct Archway_Rewards_V1_MsgWithdrawRewardsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// records_num is the number of RewardsRecord objects processed.
  var recordsNum: UInt64 = 0

  /// rewards are the total rewards transferred.
  var totalRewards: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetFlatFee is the request for Msg.SetFlatFee.
struct Archway_Rewards_V1_MsgSetFlatFee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender_address is the msg sender address (bech32 encoded).
  var senderAddress: String = String()

  /// contract_address is the contract address (bech32 encoded).
  var contractAddress: String = String()

  /// flat_fee_amount defines the minimum flat fee set by the contract_owner
  var flatFeeAmount: Cosmos_Base_V1beta1_Coin {
    get {return _flatFeeAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_flatFeeAmount = newValue}
  }
  /// Returns true if `flatFeeAmount` has been explicitly set.
  var hasFlatFeeAmount: Bool {return self._flatFeeAmount != nil}
  /// Clears the value of `flatFeeAmount`. Subsequent reads from it will return its default value.
  mutating func clearFlatFeeAmount() {self._flatFeeAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _flatFeeAmount: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgSetFlatFeeResponse is the response for Msg.SetFlatFee.
struct Archway_Rewards_V1_MsgSetFlatFeeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Archway_Rewards_V1_MsgSetContractMetadata: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgSetContractMetadataResponse: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgWithdrawRewards: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgWithdrawRewards.OneOf_Mode: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgWithdrawRewardsResponse: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgSetFlatFee: @unchecked Sendable {}
extension Archway_Rewards_V1_MsgSetFlatFeeResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "archway.rewards.v1"

extension Archway_Rewards_V1_MsgSetContractMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetContractMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgSetContractMetadata, rhs: Archway_Rewards_V1_MsgSetContractMetadata) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgSetContractMetadataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetContractMetadataResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgSetContractMetadataResponse, rhs: Archway_Rewards_V1_MsgSetContractMetadataResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgWithdrawRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rewards_address"),
    2: .standard(proto: "records_limit"),
    3: .standard(proto: "record_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rewardsAddress) }()
      case 2: try {
        var v: Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit?
        var hadOneofValue = false
        if let current = self.mode {
          hadOneofValue = true
          if case .recordsLimit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.mode = .recordsLimit(v)
        }
      }()
      case 3: try {
        var v: Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs?
        var hadOneofValue = false
        if let current = self.mode {
          hadOneofValue = true
          if case .recordIds(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.mode = .recordIds(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rewardsAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardsAddress, fieldNumber: 1)
    }
    switch self.mode {
    case .recordsLimit?: try {
      guard case .recordsLimit(let v)? = self.mode else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .recordIds?: try {
      guard case .recordIds(let v)? = self.mode else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgWithdrawRewards, rhs: Archway_Rewards_V1_MsgWithdrawRewards) -> Bool {
    if lhs.rewardsAddress != rhs.rewardsAddress {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Archway_Rewards_V1_MsgWithdrawRewards.protoMessageName + ".RecordsLimit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.limit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limit != 0 {
      try visitor.visitSingularUInt64Field(value: self.limit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit, rhs: Archway_Rewards_V1_MsgWithdrawRewards.RecordsLimit) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Archway_Rewards_V1_MsgWithdrawRewards.protoMessageName + ".RecordIDs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.ids) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs, rhs: Archway_Rewards_V1_MsgWithdrawRewards.RecordIDs) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgWithdrawRewardsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawRewardsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "records_num"),
    2: .standard(proto: "total_rewards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.recordsNum) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.totalRewards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recordsNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.recordsNum, fieldNumber: 1)
    }
    if !self.totalRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalRewards, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgWithdrawRewardsResponse, rhs: Archway_Rewards_V1_MsgWithdrawRewardsResponse) -> Bool {
    if lhs.recordsNum != rhs.recordsNum {return false}
    if lhs.totalRewards != rhs.totalRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgSetFlatFee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetFlatFee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .standard(proto: "flat_fee_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._flatFeeAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    try { if let v = self._flatFeeAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgSetFlatFee, rhs: Archway_Rewards_V1_MsgSetFlatFee) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs._flatFeeAmount != rhs._flatFeeAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Archway_Rewards_V1_MsgSetFlatFeeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetFlatFeeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Rewards_V1_MsgSetFlatFeeResponse, rhs: Archway_Rewards_V1_MsgSetFlatFeeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
