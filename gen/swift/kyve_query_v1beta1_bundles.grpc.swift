//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/query/v1beta1/bundles.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// Usage: instantiate `Kyve_Query_V1beta1_QueryBundlesClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Query_V1beta1_QueryBundlesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? { get }

  func finalizedBundles(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>

  func finalizedBundle(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundleRequest, Kyve_Query_V1beta1_QueryFinalizedBundleResponse>

  func finalizedBundlesByHeight(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>

  func currentVoteStatus(
    _ request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>

  func canValidate(
    _ request: Kyve_Query_V1beta1_QueryCanValidateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCanValidateRequest, Kyve_Query_V1beta1_QueryCanValidateResponse>

  func canPropose(
    _ request: Kyve_Query_V1beta1_QueryCanProposeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCanProposeRequest, Kyve_Query_V1beta1_QueryCanProposeResponse>

  func canVote(
    _ request: Kyve_Query_V1beta1_QueryCanVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCanVoteRequest, Kyve_Query_V1beta1_QueryCanVoteResponse>
}

extension Kyve_Query_V1beta1_QueryBundlesClientProtocol {
  internal var serviceName: String {
    return "kyve.query.v1beta1.QueryBundles"
  }

  /// FinalizedBundles ...
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizedBundles.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalizedBundles(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundlesInterceptors() ?? []
    )
  }

  /// FinalizedBundle ...
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizedBundle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalizedBundle(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundleRequest, Kyve_Query_V1beta1_QueryFinalizedBundleResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundleInterceptors() ?? []
    )
  }

  /// Queries the bundle which contains the data given height
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizedBundlesByHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalizedBundlesByHeight(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundlesByHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundlesByHeightInterceptors() ?? []
    )
  }

  /// CurrentVoteStatus ...
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentVoteStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentVoteStatus(
    _ request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.currentVoteStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentVoteStatusInterceptors() ?? []
    )
  }

  /// CanValidate ...
  ///
  /// - Parameters:
  ///   - request: Request to send to CanValidate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func canValidate(
    _ request: Kyve_Query_V1beta1_QueryCanValidateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCanValidateRequest, Kyve_Query_V1beta1_QueryCanValidateResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canValidate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanValidateInterceptors() ?? []
    )
  }

  /// CanPropose ...
  ///
  /// - Parameters:
  ///   - request: Request to send to CanPropose.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func canPropose(
    _ request: Kyve_Query_V1beta1_QueryCanProposeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCanProposeRequest, Kyve_Query_V1beta1_QueryCanProposeResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canPropose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanProposeInterceptors() ?? []
    )
  }

  /// CanVote checks if voter on pool can still vote for the given bundle
  ///
  /// - Parameters:
  ///   - request: Request to send to CanVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func canVote(
    _ request: Kyve_Query_V1beta1_QueryCanVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryCanVoteRequest, Kyve_Query_V1beta1_QueryCanVoteResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanVoteInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Query_V1beta1_QueryBundlesClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Query_V1beta1_QueryBundlesNIOClient")
internal final class Kyve_Query_V1beta1_QueryBundlesClient: Kyve_Query_V1beta1_QueryBundlesClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.query.v1beta1.QueryBundles service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Query_V1beta1_QueryBundlesNIOClient: Kyve_Query_V1beta1_QueryBundlesClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.query.v1beta1.QueryBundles service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryBundlesAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? { get }

  func makeFinalizedBundlesCall(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>

  func makeFinalizedBundleCall(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundleRequest, Kyve_Query_V1beta1_QueryFinalizedBundleResponse>

  func makeFinalizedBundlesByHeightCall(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>

  func makeCurrentVoteStatusCall(
    _ request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>

  func makeCanValidateCall(
    _ request: Kyve_Query_V1beta1_QueryCanValidateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCanValidateRequest, Kyve_Query_V1beta1_QueryCanValidateResponse>

  func makeCanProposeCall(
    _ request: Kyve_Query_V1beta1_QueryCanProposeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCanProposeRequest, Kyve_Query_V1beta1_QueryCanProposeResponse>

  func makeCanVoteCall(
    _ request: Kyve_Query_V1beta1_QueryCanVoteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCanVoteRequest, Kyve_Query_V1beta1_QueryCanVoteResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryBundlesAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryBundlesClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeFinalizedBundlesCall(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundlesInterceptors() ?? []
    )
  }

  internal func makeFinalizedBundleCall(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundleRequest, Kyve_Query_V1beta1_QueryFinalizedBundleResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundleInterceptors() ?? []
    )
  }

  internal func makeFinalizedBundlesByHeightCall(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundlesByHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundlesByHeightInterceptors() ?? []
    )
  }

  internal func makeCurrentVoteStatusCall(
    _ request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.currentVoteStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentVoteStatusInterceptors() ?? []
    )
  }

  internal func makeCanValidateCall(
    _ request: Kyve_Query_V1beta1_QueryCanValidateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCanValidateRequest, Kyve_Query_V1beta1_QueryCanValidateResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canValidate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanValidateInterceptors() ?? []
    )
  }

  internal func makeCanProposeCall(
    _ request: Kyve_Query_V1beta1_QueryCanProposeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCanProposeRequest, Kyve_Query_V1beta1_QueryCanProposeResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canPropose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanProposeInterceptors() ?? []
    )
  }

  internal func makeCanVoteCall(
    _ request: Kyve_Query_V1beta1_QueryCanVoteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryCanVoteRequest, Kyve_Query_V1beta1_QueryCanVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanVoteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryBundlesAsyncClientProtocol {
  internal func finalizedBundles(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryFinalizedBundlesResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundles.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundlesInterceptors() ?? []
    )
  }

  internal func finalizedBundle(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryFinalizedBundleResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundleInterceptors() ?? []
    )
  }

  internal func finalizedBundlesByHeight(
    _ request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundlesByHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedBundlesByHeightInterceptors() ?? []
    )
  }

  internal func currentVoteStatus(
    _ request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.currentVoteStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentVoteStatusInterceptors() ?? []
    )
  }

  internal func canValidate(
    _ request: Kyve_Query_V1beta1_QueryCanValidateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryCanValidateResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canValidate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanValidateInterceptors() ?? []
    )
  }

  internal func canPropose(
    _ request: Kyve_Query_V1beta1_QueryCanProposeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryCanProposeResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canPropose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanProposeInterceptors() ?? []
    )
  }

  internal func canVote(
    _ request: Kyve_Query_V1beta1_QueryCanVoteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryCanVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanVoteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Query_V1beta1_QueryBundlesAsyncClient: Kyve_Query_V1beta1_QueryBundlesAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Query_V1beta1_QueryBundlesClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'finalizedBundles'.
  func makeFinalizedBundlesInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>]

  /// - Returns: Interceptors to use when invoking 'finalizedBundle'.
  func makeFinalizedBundleInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryFinalizedBundleRequest, Kyve_Query_V1beta1_QueryFinalizedBundleResponse>]

  /// - Returns: Interceptors to use when invoking 'finalizedBundlesByHeight'.
  func makeFinalizedBundlesByHeightInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'currentVoteStatus'.
  func makeCurrentVoteStatusInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'canValidate'.
  func makeCanValidateInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryCanValidateRequest, Kyve_Query_V1beta1_QueryCanValidateResponse>]

  /// - Returns: Interceptors to use when invoking 'canPropose'.
  func makeCanProposeInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryCanProposeRequest, Kyve_Query_V1beta1_QueryCanProposeResponse>]

  /// - Returns: Interceptors to use when invoking 'canVote'.
  func makeCanVoteInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryCanVoteRequest, Kyve_Query_V1beta1_QueryCanVoteResponse>]
}

internal enum Kyve_Query_V1beta1_QueryBundlesClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryBundles",
    fullName: "kyve.query.v1beta1.QueryBundles",
    methods: [
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundles,
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundle,
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.finalizedBundlesByHeight,
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.currentVoteStatus,
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canValidate,
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canPropose,
      Kyve_Query_V1beta1_QueryBundlesClientMetadata.Methods.canVote,
    ]
  )

  internal enum Methods {
    internal static let finalizedBundles = GRPCMethodDescriptor(
      name: "FinalizedBundles",
      path: "/kyve.query.v1beta1.QueryBundles/FinalizedBundles",
      type: GRPCCallType.unary
    )

    internal static let finalizedBundle = GRPCMethodDescriptor(
      name: "FinalizedBundle",
      path: "/kyve.query.v1beta1.QueryBundles/FinalizedBundle",
      type: GRPCCallType.unary
    )

    internal static let finalizedBundlesByHeight = GRPCMethodDescriptor(
      name: "FinalizedBundlesByHeight",
      path: "/kyve.query.v1beta1.QueryBundles/FinalizedBundlesByHeight",
      type: GRPCCallType.unary
    )

    internal static let currentVoteStatus = GRPCMethodDescriptor(
      name: "CurrentVoteStatus",
      path: "/kyve.query.v1beta1.QueryBundles/CurrentVoteStatus",
      type: GRPCCallType.unary
    )

    internal static let canValidate = GRPCMethodDescriptor(
      name: "CanValidate",
      path: "/kyve.query.v1beta1.QueryBundles/CanValidate",
      type: GRPCCallType.unary
    )

    internal static let canPropose = GRPCMethodDescriptor(
      name: "CanPropose",
      path: "/kyve.query.v1beta1.QueryBundles/CanPropose",
      type: GRPCCallType.unary
    )

    internal static let canVote = GRPCMethodDescriptor(
      name: "CanVote",
      path: "/kyve.query.v1beta1.QueryBundles/CanVote",
      type: GRPCCallType.unary
    )
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Query_V1beta1_QueryBundlesProvider: CallHandlerProvider {
  var interceptors: Kyve_Query_V1beta1_QueryBundlesServerInterceptorFactoryProtocol? { get }

  /// FinalizedBundles ...
  func finalizedBundles(request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>

  /// FinalizedBundle ...
  func finalizedBundle(request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryFinalizedBundleResponse>

  /// Queries the bundle which contains the data given height
  func finalizedBundlesByHeight(request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>

  /// CurrentVoteStatus ...
  func currentVoteStatus(request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>

  /// CanValidate ...
  func canValidate(request: Kyve_Query_V1beta1_QueryCanValidateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryCanValidateResponse>

  /// CanPropose ...
  func canPropose(request: Kyve_Query_V1beta1_QueryCanProposeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryCanProposeResponse>

  /// CanVote checks if voter on pool can still vote for the given bundle
  func canVote(request: Kyve_Query_V1beta1_QueryCanVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryCanVoteResponse>
}

extension Kyve_Query_V1beta1_QueryBundlesProvider {
  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryBundlesServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FinalizedBundles":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>(),
        interceptors: self.interceptors?.makeFinalizedBundlesInterceptors() ?? [],
        userFunction: self.finalizedBundles(request:context:)
      )

    case "FinalizedBundle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryFinalizedBundleRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryFinalizedBundleResponse>(),
        interceptors: self.interceptors?.makeFinalizedBundleInterceptors() ?? [],
        userFunction: self.finalizedBundle(request:context:)
      )

    case "FinalizedBundlesByHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>(),
        interceptors: self.interceptors?.makeFinalizedBundlesByHeightInterceptors() ?? [],
        userFunction: self.finalizedBundlesByHeight(request:context:)
      )

    case "CurrentVoteStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>(),
        interceptors: self.interceptors?.makeCurrentVoteStatusInterceptors() ?? [],
        userFunction: self.currentVoteStatus(request:context:)
      )

    case "CanValidate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCanValidateRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCanValidateResponse>(),
        interceptors: self.interceptors?.makeCanValidateInterceptors() ?? [],
        userFunction: self.canValidate(request:context:)
      )

    case "CanPropose":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCanProposeRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCanProposeResponse>(),
        interceptors: self.interceptors?.makeCanProposeInterceptors() ?? [],
        userFunction: self.canPropose(request:context:)
      )

    case "CanVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCanVoteRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCanVoteResponse>(),
        interceptors: self.interceptors?.makeCanVoteInterceptors() ?? [],
        userFunction: self.canVote(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryBundlesAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryBundlesServerInterceptorFactoryProtocol? { get }

  /// FinalizedBundles ...
  @Sendable func finalizedBundles(
    request: Kyve_Query_V1beta1_QueryFinalizedBundlesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryFinalizedBundlesResponse

  /// FinalizedBundle ...
  @Sendable func finalizedBundle(
    request: Kyve_Query_V1beta1_QueryFinalizedBundleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryFinalizedBundleResponse

  /// Queries the bundle which contains the data given height
  @Sendable func finalizedBundlesByHeight(
    request: Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse

  /// CurrentVoteStatus ...
  @Sendable func currentVoteStatus(
    request: Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse

  /// CanValidate ...
  @Sendable func canValidate(
    request: Kyve_Query_V1beta1_QueryCanValidateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryCanValidateResponse

  /// CanPropose ...
  @Sendable func canPropose(
    request: Kyve_Query_V1beta1_QueryCanProposeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryCanProposeResponse

  /// CanVote checks if voter on pool can still vote for the given bundle
  @Sendable func canVote(
    request: Kyve_Query_V1beta1_QueryCanVoteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryCanVoteResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryBundlesAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryBundlesServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryBundlesServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryBundlesServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FinalizedBundles":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>(),
        interceptors: self.interceptors?.makeFinalizedBundlesInterceptors() ?? [],
        wrapping: self.finalizedBundles(request:context:)
      )

    case "FinalizedBundle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryFinalizedBundleRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryFinalizedBundleResponse>(),
        interceptors: self.interceptors?.makeFinalizedBundleInterceptors() ?? [],
        wrapping: self.finalizedBundle(request:context:)
      )

    case "FinalizedBundlesByHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>(),
        interceptors: self.interceptors?.makeFinalizedBundlesByHeightInterceptors() ?? [],
        wrapping: self.finalizedBundlesByHeight(request:context:)
      )

    case "CurrentVoteStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>(),
        interceptors: self.interceptors?.makeCurrentVoteStatusInterceptors() ?? [],
        wrapping: self.currentVoteStatus(request:context:)
      )

    case "CanValidate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCanValidateRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCanValidateResponse>(),
        interceptors: self.interceptors?.makeCanValidateInterceptors() ?? [],
        wrapping: self.canValidate(request:context:)
      )

    case "CanPropose":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCanProposeRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCanProposeResponse>(),
        interceptors: self.interceptors?.makeCanProposeInterceptors() ?? [],
        wrapping: self.canPropose(request:context:)
      )

    case "CanVote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryCanVoteRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryCanVoteResponse>(),
        interceptors: self.interceptors?.makeCanVoteInterceptors() ?? [],
        wrapping: self.canVote(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Query_V1beta1_QueryBundlesServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'finalizedBundles'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizedBundlesInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryFinalizedBundlesRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesResponse>]

  /// - Returns: Interceptors to use when handling 'finalizedBundle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizedBundleInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryFinalizedBundleRequest, Kyve_Query_V1beta1_QueryFinalizedBundleResponse>]

  /// - Returns: Interceptors to use when handling 'finalizedBundlesByHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizedBundlesByHeightInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightRequest, Kyve_Query_V1beta1_QueryFinalizedBundlesByHeightResponse>]

  /// - Returns: Interceptors to use when handling 'currentVoteStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentVoteStatusInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryCurrentVoteStatusRequest, Kyve_Query_V1beta1_QueryCurrentVoteStatusResponse>]

  /// - Returns: Interceptors to use when handling 'canValidate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCanValidateInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryCanValidateRequest, Kyve_Query_V1beta1_QueryCanValidateResponse>]

  /// - Returns: Interceptors to use when handling 'canPropose'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCanProposeInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryCanProposeRequest, Kyve_Query_V1beta1_QueryCanProposeResponse>]

  /// - Returns: Interceptors to use when handling 'canVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCanVoteInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryCanVoteRequest, Kyve_Query_V1beta1_QueryCanVoteResponse>]
}

internal enum Kyve_Query_V1beta1_QueryBundlesServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryBundles",
    fullName: "kyve.query.v1beta1.QueryBundles",
    methods: [
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.finalizedBundles,
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.finalizedBundle,
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.finalizedBundlesByHeight,
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.currentVoteStatus,
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.canValidate,
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.canPropose,
      Kyve_Query_V1beta1_QueryBundlesServerMetadata.Methods.canVote,
    ]
  )

  internal enum Methods {
    internal static let finalizedBundles = GRPCMethodDescriptor(
      name: "FinalizedBundles",
      path: "/kyve.query.v1beta1.QueryBundles/FinalizedBundles",
      type: GRPCCallType.unary
    )

    internal static let finalizedBundle = GRPCMethodDescriptor(
      name: "FinalizedBundle",
      path: "/kyve.query.v1beta1.QueryBundles/FinalizedBundle",
      type: GRPCCallType.unary
    )

    internal static let finalizedBundlesByHeight = GRPCMethodDescriptor(
      name: "FinalizedBundlesByHeight",
      path: "/kyve.query.v1beta1.QueryBundles/FinalizedBundlesByHeight",
      type: GRPCCallType.unary
    )

    internal static let currentVoteStatus = GRPCMethodDescriptor(
      name: "CurrentVoteStatus",
      path: "/kyve.query.v1beta1.QueryBundles/CurrentVoteStatus",
      type: GRPCCallType.unary
    )

    internal static let canValidate = GRPCMethodDescriptor(
      name: "CanValidate",
      path: "/kyve.query.v1beta1.QueryBundles/CanValidate",
      type: GRPCCallType.unary
    )

    internal static let canPropose = GRPCMethodDescriptor(
      name: "CanPropose",
      path: "/kyve.query.v1beta1.QueryBundles/CanPropose",
      type: GRPCCallType.unary
    )

    internal static let canVote = GRPCMethodDescriptor(
      name: "CanVote",
      path: "/kyve.query.v1beta1.QueryBundles/CanVote",
      type: GRPCCallType.unary
    )
  }
}
