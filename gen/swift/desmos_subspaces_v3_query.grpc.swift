//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/subspaces/v3/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Desmos_Subspaces_V3_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Subspaces_V3_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? { get }

  func subspaces(
    _ request: Desmos_Subspaces_V3_QuerySubspacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySubspacesRequest, Desmos_Subspaces_V3_QuerySubspacesResponse>

  func subspace(
    _ request: Desmos_Subspaces_V3_QuerySubspaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySubspaceRequest, Desmos_Subspaces_V3_QuerySubspaceResponse>

  func sections(
    _ request: Desmos_Subspaces_V3_QuerySectionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySectionsRequest, Desmos_Subspaces_V3_QuerySectionsResponse>

  func section(
    _ request: Desmos_Subspaces_V3_QuerySectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySectionRequest, Desmos_Subspaces_V3_QuerySectionResponse>

  func userGroups(
    _ request: Desmos_Subspaces_V3_QueryUserGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserGroupsRequest, Desmos_Subspaces_V3_QueryUserGroupsResponse>

  func userGroup(
    _ request: Desmos_Subspaces_V3_QueryUserGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserGroupRequest, Desmos_Subspaces_V3_QueryUserGroupResponse>

  func userGroupMembers(
    _ request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserGroupMembersRequest, Desmos_Subspaces_V3_QueryUserGroupMembersResponse>

  func userPermissions(
    _ request: Desmos_Subspaces_V3_QueryUserPermissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserPermissionsRequest, Desmos_Subspaces_V3_QueryUserPermissionsResponse>

  func userAllowances(
    _ request: Desmos_Subspaces_V3_QueryUserAllowancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserAllowancesRequest, Desmos_Subspaces_V3_QueryUserAllowancesResponse>

  func groupAllowances(
    _ request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryGroupAllowancesRequest, Desmos_Subspaces_V3_QueryGroupAllowancesResponse>
}

extension Desmos_Subspaces_V3_QueryClientProtocol {
  internal var serviceName: String {
    return "desmos.subspaces.v3.Query"
  }

  /// Subspaces queries all the subspaces inside Desmos
  ///
  /// - Parameters:
  ///   - request: Request to send to Subspaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subspaces(
    _ request: Desmos_Subspaces_V3_QuerySubspacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySubspacesRequest, Desmos_Subspaces_V3_QuerySubspacesResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacesInterceptors() ?? []
    )
  }

  /// Subspace queries all the information about the subspace with the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to Subspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subspace(
    _ request: Desmos_Subspaces_V3_QuerySubspaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySubspaceRequest, Desmos_Subspaces_V3_QuerySubspaceResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspaceInterceptors() ?? []
    )
  }

  /// Sections allows to query for the sections of a specific subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to Sections.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sections(
    _ request: Desmos_Subspaces_V3_QuerySectionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySectionsRequest, Desmos_Subspaces_V3_QuerySectionsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.sections.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionsInterceptors() ?? []
    )
  }

  /// Section queries all the information about the section with the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to Section.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func section(
    _ request: Desmos_Subspaces_V3_QuerySectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QuerySectionRequest, Desmos_Subspaces_V3_QuerySectionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.section.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionInterceptors() ?? []
    )
  }

  /// UserGroups queries all the groups that are present inside the subspace with
  /// the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userGroups(
    _ request: Desmos_Subspaces_V3_QueryUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserGroupsRequest, Desmos_Subspaces_V3_QueryUserGroupsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupsInterceptors() ?? []
    )
  }

  /// UserGroup queries the user group having the given id inside the specific
  /// subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userGroup(
    _ request: Desmos_Subspaces_V3_QueryUserGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserGroupRequest, Desmos_Subspaces_V3_QueryUserGroupResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupInterceptors() ?? []
    )
  }

  /// UserGroupMembers queries all the members of a given user group
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userGroupMembers(
    _ request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserGroupMembersRequest, Desmos_Subspaces_V3_QueryUserGroupMembersResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupMembersInterceptors() ?? []
    )
  }

  /// UserPermissions queries the permissions for the given user
  ///
  /// - Parameters:
  ///   - request: Request to send to UserPermissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userPermissions(
    _ request: Desmos_Subspaces_V3_QueryUserPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserPermissionsRequest, Desmos_Subspaces_V3_QueryUserPermissionsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserPermissionsInterceptors() ?? []
    )
  }

  /// UserAllowances returns all the grants for users.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserAllowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userAllowances(
    _ request: Desmos_Subspaces_V3_QueryUserAllowancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryUserAllowancesRequest, Desmos_Subspaces_V3_QueryUserAllowancesResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAllowancesInterceptors() ?? []
    )
  }

  /// GroupAllowances returns all the grants for groups.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupAllowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupAllowances(
    _ request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V3_QueryGroupAllowancesRequest, Desmos_Subspaces_V3_QueryGroupAllowancesResponse> {
    return self.makeUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.groupAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupAllowancesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Desmos_Subspaces_V3_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Desmos_Subspaces_V3_QueryNIOClient")
internal final class Desmos_Subspaces_V3_QueryClient: Desmos_Subspaces_V3_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the desmos.subspaces.v3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Desmos_Subspaces_V3_QueryNIOClient: Desmos_Subspaces_V3_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.subspaces.v3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Subspaces_V3_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? { get }

  func makeSubspacesCall(
    _ request: Desmos_Subspaces_V3_QuerySubspacesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySubspacesRequest, Desmos_Subspaces_V3_QuerySubspacesResponse>

  func makeSubspaceCall(
    _ request: Desmos_Subspaces_V3_QuerySubspaceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySubspaceRequest, Desmos_Subspaces_V3_QuerySubspaceResponse>

  func makeSectionsCall(
    _ request: Desmos_Subspaces_V3_QuerySectionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySectionsRequest, Desmos_Subspaces_V3_QuerySectionsResponse>

  func makeSectionCall(
    _ request: Desmos_Subspaces_V3_QuerySectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySectionRequest, Desmos_Subspaces_V3_QuerySectionResponse>

  func makeUserGroupsCall(
    _ request: Desmos_Subspaces_V3_QueryUserGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserGroupsRequest, Desmos_Subspaces_V3_QueryUserGroupsResponse>

  func makeUserGroupCall(
    _ request: Desmos_Subspaces_V3_QueryUserGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserGroupRequest, Desmos_Subspaces_V3_QueryUserGroupResponse>

  func makeUserGroupMembersCall(
    _ request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserGroupMembersRequest, Desmos_Subspaces_V3_QueryUserGroupMembersResponse>

  func makeUserPermissionsCall(
    _ request: Desmos_Subspaces_V3_QueryUserPermissionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserPermissionsRequest, Desmos_Subspaces_V3_QueryUserPermissionsResponse>

  func makeUserAllowancesCall(
    _ request: Desmos_Subspaces_V3_QueryUserAllowancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserAllowancesRequest, Desmos_Subspaces_V3_QueryUserAllowancesResponse>

  func makeGroupAllowancesCall(
    _ request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryGroupAllowancesRequest, Desmos_Subspaces_V3_QueryGroupAllowancesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Subspaces_V3_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Subspaces_V3_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSubspacesCall(
    _ request: Desmos_Subspaces_V3_QuerySubspacesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySubspacesRequest, Desmos_Subspaces_V3_QuerySubspacesResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacesInterceptors() ?? []
    )
  }

  internal func makeSubspaceCall(
    _ request: Desmos_Subspaces_V3_QuerySubspaceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySubspaceRequest, Desmos_Subspaces_V3_QuerySubspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspaceInterceptors() ?? []
    )
  }

  internal func makeSectionsCall(
    _ request: Desmos_Subspaces_V3_QuerySectionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySectionsRequest, Desmos_Subspaces_V3_QuerySectionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.sections.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionsInterceptors() ?? []
    )
  }

  internal func makeSectionCall(
    _ request: Desmos_Subspaces_V3_QuerySectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QuerySectionRequest, Desmos_Subspaces_V3_QuerySectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.section.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionInterceptors() ?? []
    )
  }

  internal func makeUserGroupsCall(
    _ request: Desmos_Subspaces_V3_QueryUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserGroupsRequest, Desmos_Subspaces_V3_QueryUserGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupsInterceptors() ?? []
    )
  }

  internal func makeUserGroupCall(
    _ request: Desmos_Subspaces_V3_QueryUserGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserGroupRequest, Desmos_Subspaces_V3_QueryUserGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupInterceptors() ?? []
    )
  }

  internal func makeUserGroupMembersCall(
    _ request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserGroupMembersRequest, Desmos_Subspaces_V3_QueryUserGroupMembersResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupMembersInterceptors() ?? []
    )
  }

  internal func makeUserPermissionsCall(
    _ request: Desmos_Subspaces_V3_QueryUserPermissionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserPermissionsRequest, Desmos_Subspaces_V3_QueryUserPermissionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserPermissionsInterceptors() ?? []
    )
  }

  internal func makeUserAllowancesCall(
    _ request: Desmos_Subspaces_V3_QueryUserAllowancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryUserAllowancesRequest, Desmos_Subspaces_V3_QueryUserAllowancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAllowancesInterceptors() ?? []
    )
  }

  internal func makeGroupAllowancesCall(
    _ request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Subspaces_V3_QueryGroupAllowancesRequest, Desmos_Subspaces_V3_QueryGroupAllowancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.groupAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupAllowancesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Subspaces_V3_QueryAsyncClientProtocol {
  internal func subspaces(
    _ request: Desmos_Subspaces_V3_QuerySubspacesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QuerySubspacesResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacesInterceptors() ?? []
    )
  }

  internal func subspace(
    _ request: Desmos_Subspaces_V3_QuerySubspaceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QuerySubspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspaceInterceptors() ?? []
    )
  }

  internal func sections(
    _ request: Desmos_Subspaces_V3_QuerySectionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QuerySectionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.sections.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionsInterceptors() ?? []
    )
  }

  internal func section(
    _ request: Desmos_Subspaces_V3_QuerySectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QuerySectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.section.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionInterceptors() ?? []
    )
  }

  internal func userGroups(
    _ request: Desmos_Subspaces_V3_QueryUserGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QueryUserGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupsInterceptors() ?? []
    )
  }

  internal func userGroup(
    _ request: Desmos_Subspaces_V3_QueryUserGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QueryUserGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupInterceptors() ?? []
    )
  }

  internal func userGroupMembers(
    _ request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QueryUserGroupMembersResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGroupMembersInterceptors() ?? []
    )
  }

  internal func userPermissions(
    _ request: Desmos_Subspaces_V3_QueryUserPermissionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QueryUserPermissionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userPermissions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserPermissionsInterceptors() ?? []
    )
  }

  internal func userAllowances(
    _ request: Desmos_Subspaces_V3_QueryUserAllowancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QueryUserAllowancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.userAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAllowancesInterceptors() ?? []
    )
  }

  internal func groupAllowances(
    _ request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Subspaces_V3_QueryGroupAllowancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Subspaces_V3_QueryClientMetadata.Methods.groupAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupAllowancesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Desmos_Subspaces_V3_QueryAsyncClient: Desmos_Subspaces_V3_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Desmos_Subspaces_V3_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'subspaces'.
  func makeSubspacesInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QuerySubspacesRequest, Desmos_Subspaces_V3_QuerySubspacesResponse>]

  /// - Returns: Interceptors to use when invoking 'subspace'.
  func makeSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QuerySubspaceRequest, Desmos_Subspaces_V3_QuerySubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'sections'.
  func makeSectionsInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QuerySectionsRequest, Desmos_Subspaces_V3_QuerySectionsResponse>]

  /// - Returns: Interceptors to use when invoking 'section'.
  func makeSectionInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QuerySectionRequest, Desmos_Subspaces_V3_QuerySectionResponse>]

  /// - Returns: Interceptors to use when invoking 'userGroups'.
  func makeUserGroupsInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QueryUserGroupsRequest, Desmos_Subspaces_V3_QueryUserGroupsResponse>]

  /// - Returns: Interceptors to use when invoking 'userGroup'.
  func makeUserGroupInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QueryUserGroupRequest, Desmos_Subspaces_V3_QueryUserGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'userGroupMembers'.
  func makeUserGroupMembersInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QueryUserGroupMembersRequest, Desmos_Subspaces_V3_QueryUserGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'userPermissions'.
  func makeUserPermissionsInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QueryUserPermissionsRequest, Desmos_Subspaces_V3_QueryUserPermissionsResponse>]

  /// - Returns: Interceptors to use when invoking 'userAllowances'.
  func makeUserAllowancesInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QueryUserAllowancesRequest, Desmos_Subspaces_V3_QueryUserAllowancesResponse>]

  /// - Returns: Interceptors to use when invoking 'groupAllowances'.
  func makeGroupAllowancesInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V3_QueryGroupAllowancesRequest, Desmos_Subspaces_V3_QueryGroupAllowancesResponse>]
}

internal enum Desmos_Subspaces_V3_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "desmos.subspaces.v3.Query",
    methods: [
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspaces,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.subspace,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.sections,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.section,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroups,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroup,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.userGroupMembers,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.userPermissions,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.userAllowances,
      Desmos_Subspaces_V3_QueryClientMetadata.Methods.groupAllowances,
    ]
  )

  internal enum Methods {
    internal static let subspaces = GRPCMethodDescriptor(
      name: "Subspaces",
      path: "/desmos.subspaces.v3.Query/Subspaces",
      type: GRPCCallType.unary
    )

    internal static let subspace = GRPCMethodDescriptor(
      name: "Subspace",
      path: "/desmos.subspaces.v3.Query/Subspace",
      type: GRPCCallType.unary
    )

    internal static let sections = GRPCMethodDescriptor(
      name: "Sections",
      path: "/desmos.subspaces.v3.Query/Sections",
      type: GRPCCallType.unary
    )

    internal static let section = GRPCMethodDescriptor(
      name: "Section",
      path: "/desmos.subspaces.v3.Query/Section",
      type: GRPCCallType.unary
    )

    internal static let userGroups = GRPCMethodDescriptor(
      name: "UserGroups",
      path: "/desmos.subspaces.v3.Query/UserGroups",
      type: GRPCCallType.unary
    )

    internal static let userGroup = GRPCMethodDescriptor(
      name: "UserGroup",
      path: "/desmos.subspaces.v3.Query/UserGroup",
      type: GRPCCallType.unary
    )

    internal static let userGroupMembers = GRPCMethodDescriptor(
      name: "UserGroupMembers",
      path: "/desmos.subspaces.v3.Query/UserGroupMembers",
      type: GRPCCallType.unary
    )

    internal static let userPermissions = GRPCMethodDescriptor(
      name: "UserPermissions",
      path: "/desmos.subspaces.v3.Query/UserPermissions",
      type: GRPCCallType.unary
    )

    internal static let userAllowances = GRPCMethodDescriptor(
      name: "UserAllowances",
      path: "/desmos.subspaces.v3.Query/UserAllowances",
      type: GRPCCallType.unary
    )

    internal static let groupAllowances = GRPCMethodDescriptor(
      name: "GroupAllowances",
      path: "/desmos.subspaces.v3.Query/GroupAllowances",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Subspaces_V3_QueryProvider: CallHandlerProvider {
  var interceptors: Desmos_Subspaces_V3_QueryServerInterceptorFactoryProtocol? { get }

  /// Subspaces queries all the subspaces inside Desmos
  func subspaces(request: Desmos_Subspaces_V3_QuerySubspacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QuerySubspacesResponse>

  /// Subspace queries all the information about the subspace with the given id
  func subspace(request: Desmos_Subspaces_V3_QuerySubspaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QuerySubspaceResponse>

  /// Sections allows to query for the sections of a specific subspace
  func sections(request: Desmos_Subspaces_V3_QuerySectionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QuerySectionsResponse>

  /// Section queries all the information about the section with the given id
  func section(request: Desmos_Subspaces_V3_QuerySectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QuerySectionResponse>

  /// UserGroups queries all the groups that are present inside the subspace with
  /// the given id
  func userGroups(request: Desmos_Subspaces_V3_QueryUserGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QueryUserGroupsResponse>

  /// UserGroup queries the user group having the given id inside the specific
  /// subspace
  func userGroup(request: Desmos_Subspaces_V3_QueryUserGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QueryUserGroupResponse>

  /// UserGroupMembers queries all the members of a given user group
  func userGroupMembers(request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QueryUserGroupMembersResponse>

  /// UserPermissions queries the permissions for the given user
  func userPermissions(request: Desmos_Subspaces_V3_QueryUserPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QueryUserPermissionsResponse>

  /// UserAllowances returns all the grants for users.
  func userAllowances(request: Desmos_Subspaces_V3_QueryUserAllowancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QueryUserAllowancesResponse>

  /// GroupAllowances returns all the grants for groups.
  func groupAllowances(request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V3_QueryGroupAllowancesResponse>
}

extension Desmos_Subspaces_V3_QueryProvider {
  internal var serviceName: Substring {
    return Desmos_Subspaces_V3_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subspaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySubspacesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySubspacesResponse>(),
        interceptors: self.interceptors?.makeSubspacesInterceptors() ?? [],
        userFunction: self.subspaces(request:context:)
      )

    case "Subspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySubspaceRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySubspaceResponse>(),
        interceptors: self.interceptors?.makeSubspaceInterceptors() ?? [],
        userFunction: self.subspace(request:context:)
      )

    case "Sections":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySectionsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySectionsResponse>(),
        interceptors: self.interceptors?.makeSectionsInterceptors() ?? [],
        userFunction: self.sections(request:context:)
      )

    case "Section":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySectionRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySectionResponse>(),
        interceptors: self.interceptors?.makeSectionInterceptors() ?? [],
        userFunction: self.section(request:context:)
      )

    case "UserGroups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserGroupsResponse>(),
        interceptors: self.interceptors?.makeUserGroupsInterceptors() ?? [],
        userFunction: self.userGroups(request:context:)
      )

    case "UserGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserGroupRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserGroupResponse>(),
        interceptors: self.interceptors?.makeUserGroupInterceptors() ?? [],
        userFunction: self.userGroup(request:context:)
      )

    case "UserGroupMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserGroupMembersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUserGroupMembersInterceptors() ?? [],
        userFunction: self.userGroupMembers(request:context:)
      )

    case "UserPermissions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserPermissionsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserPermissionsResponse>(),
        interceptors: self.interceptors?.makeUserPermissionsInterceptors() ?? [],
        userFunction: self.userPermissions(request:context:)
      )

    case "UserAllowances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserAllowancesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserAllowancesResponse>(),
        interceptors: self.interceptors?.makeUserAllowancesInterceptors() ?? [],
        userFunction: self.userAllowances(request:context:)
      )

    case "GroupAllowances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryGroupAllowancesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryGroupAllowancesResponse>(),
        interceptors: self.interceptors?.makeGroupAllowancesInterceptors() ?? [],
        userFunction: self.groupAllowances(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Subspaces_V3_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Subspaces_V3_QueryServerInterceptorFactoryProtocol? { get }

  /// Subspaces queries all the subspaces inside Desmos
  @Sendable func subspaces(
    request: Desmos_Subspaces_V3_QuerySubspacesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QuerySubspacesResponse

  /// Subspace queries all the information about the subspace with the given id
  @Sendable func subspace(
    request: Desmos_Subspaces_V3_QuerySubspaceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QuerySubspaceResponse

  /// Sections allows to query for the sections of a specific subspace
  @Sendable func sections(
    request: Desmos_Subspaces_V3_QuerySectionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QuerySectionsResponse

  /// Section queries all the information about the section with the given id
  @Sendable func section(
    request: Desmos_Subspaces_V3_QuerySectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QuerySectionResponse

  /// UserGroups queries all the groups that are present inside the subspace with
  /// the given id
  @Sendable func userGroups(
    request: Desmos_Subspaces_V3_QueryUserGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QueryUserGroupsResponse

  /// UserGroup queries the user group having the given id inside the specific
  /// subspace
  @Sendable func userGroup(
    request: Desmos_Subspaces_V3_QueryUserGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QueryUserGroupResponse

  /// UserGroupMembers queries all the members of a given user group
  @Sendable func userGroupMembers(
    request: Desmos_Subspaces_V3_QueryUserGroupMembersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QueryUserGroupMembersResponse

  /// UserPermissions queries the permissions for the given user
  @Sendable func userPermissions(
    request: Desmos_Subspaces_V3_QueryUserPermissionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QueryUserPermissionsResponse

  /// UserAllowances returns all the grants for users.
  @Sendable func userAllowances(
    request: Desmos_Subspaces_V3_QueryUserAllowancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QueryUserAllowancesResponse

  /// GroupAllowances returns all the grants for groups.
  @Sendable func groupAllowances(
    request: Desmos_Subspaces_V3_QueryGroupAllowancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Subspaces_V3_QueryGroupAllowancesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Subspaces_V3_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Subspaces_V3_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Desmos_Subspaces_V3_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Desmos_Subspaces_V3_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subspaces":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySubspacesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySubspacesResponse>(),
        interceptors: self.interceptors?.makeSubspacesInterceptors() ?? [],
        wrapping: self.subspaces(request:context:)
      )

    case "Subspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySubspaceRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySubspaceResponse>(),
        interceptors: self.interceptors?.makeSubspaceInterceptors() ?? [],
        wrapping: self.subspace(request:context:)
      )

    case "Sections":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySectionsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySectionsResponse>(),
        interceptors: self.interceptors?.makeSectionsInterceptors() ?? [],
        wrapping: self.sections(request:context:)
      )

    case "Section":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QuerySectionRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QuerySectionResponse>(),
        interceptors: self.interceptors?.makeSectionInterceptors() ?? [],
        wrapping: self.section(request:context:)
      )

    case "UserGroups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserGroupsResponse>(),
        interceptors: self.interceptors?.makeUserGroupsInterceptors() ?? [],
        wrapping: self.userGroups(request:context:)
      )

    case "UserGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserGroupRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserGroupResponse>(),
        interceptors: self.interceptors?.makeUserGroupInterceptors() ?? [],
        wrapping: self.userGroup(request:context:)
      )

    case "UserGroupMembers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserGroupMembersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUserGroupMembersInterceptors() ?? [],
        wrapping: self.userGroupMembers(request:context:)
      )

    case "UserPermissions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserPermissionsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserPermissionsResponse>(),
        interceptors: self.interceptors?.makeUserPermissionsInterceptors() ?? [],
        wrapping: self.userPermissions(request:context:)
      )

    case "UserAllowances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryUserAllowancesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryUserAllowancesResponse>(),
        interceptors: self.interceptors?.makeUserAllowancesInterceptors() ?? [],
        wrapping: self.userAllowances(request:context:)
      )

    case "GroupAllowances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V3_QueryGroupAllowancesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V3_QueryGroupAllowancesResponse>(),
        interceptors: self.interceptors?.makeGroupAllowancesInterceptors() ?? [],
        wrapping: self.groupAllowances(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Subspaces_V3_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subspaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubspacesInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QuerySubspacesRequest, Desmos_Subspaces_V3_QuerySubspacesResponse>]

  /// - Returns: Interceptors to use when handling 'subspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QuerySubspaceRequest, Desmos_Subspaces_V3_QuerySubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'sections'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSectionsInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QuerySectionsRequest, Desmos_Subspaces_V3_QuerySectionsResponse>]

  /// - Returns: Interceptors to use when handling 'section'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSectionInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QuerySectionRequest, Desmos_Subspaces_V3_QuerySectionResponse>]

  /// - Returns: Interceptors to use when handling 'userGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserGroupsInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QueryUserGroupsRequest, Desmos_Subspaces_V3_QueryUserGroupsResponse>]

  /// - Returns: Interceptors to use when handling 'userGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserGroupInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QueryUserGroupRequest, Desmos_Subspaces_V3_QueryUserGroupResponse>]

  /// - Returns: Interceptors to use when handling 'userGroupMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserGroupMembersInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QueryUserGroupMembersRequest, Desmos_Subspaces_V3_QueryUserGroupMembersResponse>]

  /// - Returns: Interceptors to use when handling 'userPermissions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserPermissionsInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QueryUserPermissionsRequest, Desmos_Subspaces_V3_QueryUserPermissionsResponse>]

  /// - Returns: Interceptors to use when handling 'userAllowances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserAllowancesInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QueryUserAllowancesRequest, Desmos_Subspaces_V3_QueryUserAllowancesResponse>]

  /// - Returns: Interceptors to use when handling 'groupAllowances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupAllowancesInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V3_QueryGroupAllowancesRequest, Desmos_Subspaces_V3_QueryGroupAllowancesResponse>]
}

internal enum Desmos_Subspaces_V3_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "desmos.subspaces.v3.Query",
    methods: [
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.subspaces,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.subspace,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.sections,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.section,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.userGroups,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.userGroup,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.userGroupMembers,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.userPermissions,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.userAllowances,
      Desmos_Subspaces_V3_QueryServerMetadata.Methods.groupAllowances,
    ]
  )

  internal enum Methods {
    internal static let subspaces = GRPCMethodDescriptor(
      name: "Subspaces",
      path: "/desmos.subspaces.v3.Query/Subspaces",
      type: GRPCCallType.unary
    )

    internal static let subspace = GRPCMethodDescriptor(
      name: "Subspace",
      path: "/desmos.subspaces.v3.Query/Subspace",
      type: GRPCCallType.unary
    )

    internal static let sections = GRPCMethodDescriptor(
      name: "Sections",
      path: "/desmos.subspaces.v3.Query/Sections",
      type: GRPCCallType.unary
    )

    internal static let section = GRPCMethodDescriptor(
      name: "Section",
      path: "/desmos.subspaces.v3.Query/Section",
      type: GRPCCallType.unary
    )

    internal static let userGroups = GRPCMethodDescriptor(
      name: "UserGroups",
      path: "/desmos.subspaces.v3.Query/UserGroups",
      type: GRPCCallType.unary
    )

    internal static let userGroup = GRPCMethodDescriptor(
      name: "UserGroup",
      path: "/desmos.subspaces.v3.Query/UserGroup",
      type: GRPCCallType.unary
    )

    internal static let userGroupMembers = GRPCMethodDescriptor(
      name: "UserGroupMembers",
      path: "/desmos.subspaces.v3.Query/UserGroupMembers",
      type: GRPCCallType.unary
    )

    internal static let userPermissions = GRPCMethodDescriptor(
      name: "UserPermissions",
      path: "/desmos.subspaces.v3.Query/UserPermissions",
      type: GRPCCallType.unary
    )

    internal static let userAllowances = GRPCMethodDescriptor(
      name: "UserAllowances",
      path: "/desmos.subspaces.v3.Query/UserAllowances",
      type: GRPCCallType.unary
    )

    internal static let groupAllowances = GRPCMethodDescriptor(
      name: "GroupAllowances",
      path: "/desmos.subspaces.v3.Query/GroupAllowances",
      type: GRPCCallType.unary
    )
  }
}
