//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: zrchain/policy/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Zrchain_Policy_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Zrchain_Policy_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Zrchain_Policy_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QueryParamsRequest, Zrchain_Policy_QueryParamsResponse>

  func actions(
    _ request: Zrchain_Policy_QueryActionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QueryActionsRequest, Zrchain_Policy_QueryActionsResponse>

  func policies(
    _ request: Zrchain_Policy_QueryPoliciesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QueryPoliciesRequest, Zrchain_Policy_QueryPoliciesResponse>

  func policyById(
    _ request: Zrchain_Policy_QueryPolicyByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QueryPolicyByIdRequest, Zrchain_Policy_QueryPolicyByIdResponse>

  func signMethodsByAddress(
    _ request: Zrchain_Policy_QuerySignMethodsByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QuerySignMethodsByAddressRequest, Zrchain_Policy_QuerySignMethodsByAddressResponse>

  func policiesByCreator(
    _ request: Zrchain_Policy_QueryPoliciesByCreatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QueryPoliciesByCreatorRequest, Zrchain_Policy_QueryPoliciesByCreatorResponse>

  func actionDetailsById(
    _ request: Zrchain_Policy_QueryActionDetailsByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_QueryActionDetailsByIdRequest, Zrchain_Policy_QueryActionDetailsByIdResponse>
}

extension Zrchain_Policy_QueryClientProtocol {
  internal var serviceName: String {
    return "zrchain.policy.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Zrchain_Policy_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QueryParamsRequest, Zrchain_Policy_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a list of Actions items.
  ///
  /// - Parameters:
  ///   - request: Request to send to Actions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func actions(
    _ request: Zrchain_Policy_QueryActionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QueryActionsRequest, Zrchain_Policy_QueryActionsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.actions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActionsInterceptors() ?? []
    )
  }

  /// Queries a list of Policies items.
  ///
  /// - Parameters:
  ///   - request: Request to send to Policies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func policies(
    _ request: Zrchain_Policy_QueryPoliciesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QueryPoliciesRequest, Zrchain_Policy_QueryPoliciesResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoliciesInterceptors() ?? []
    )
  }

  /// Queries a list of PolicyById items.
  ///
  /// - Parameters:
  ///   - request: Request to send to PolicyById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func policyById(
    _ request: Zrchain_Policy_QueryPolicyByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QueryPolicyByIdRequest, Zrchain_Policy_QueryPolicyByIdResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policyById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePolicyByIdInterceptors() ?? []
    )
  }

  /// Queries a list of SignMethodsByAddress items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignMethodsByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signMethodsByAddress(
    _ request: Zrchain_Policy_QuerySignMethodsByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QuerySignMethodsByAddressRequest, Zrchain_Policy_QuerySignMethodsByAddressResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.signMethodsByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignMethodsByAddressInterceptors() ?? []
    )
  }

  /// Queries a list of PoliciesByCreator items.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoliciesByCreator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func policiesByCreator(
    _ request: Zrchain_Policy_QueryPoliciesByCreatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QueryPoliciesByCreatorRequest, Zrchain_Policy_QueryPoliciesByCreatorResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policiesByCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoliciesByCreatorInterceptors() ?? []
    )
  }

  /// Queries a list of ActionDetailsById items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ActionDetailsById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func actionDetailsById(
    _ request: Zrchain_Policy_QueryActionDetailsByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_QueryActionDetailsByIdRequest, Zrchain_Policy_QueryActionDetailsByIdResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.actionDetailsById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActionDetailsByIdInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Zrchain_Policy_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Zrchain_Policy_QueryNIOClient")
internal final class Zrchain_Policy_QueryClient: Zrchain_Policy_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the zrchain.policy.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Zrchain_Policy_QueryNIOClient: Zrchain_Policy_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the zrchain.policy.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Policy_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Zrchain_Policy_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryParamsRequest, Zrchain_Policy_QueryParamsResponse>

  func makeActionsCall(
    _ request: Zrchain_Policy_QueryActionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryActionsRequest, Zrchain_Policy_QueryActionsResponse>

  func makePoliciesCall(
    _ request: Zrchain_Policy_QueryPoliciesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryPoliciesRequest, Zrchain_Policy_QueryPoliciesResponse>

  func makePolicyByIDCall(
    _ request: Zrchain_Policy_QueryPolicyByIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryPolicyByIdRequest, Zrchain_Policy_QueryPolicyByIdResponse>

  func makeSignMethodsByAddressCall(
    _ request: Zrchain_Policy_QuerySignMethodsByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QuerySignMethodsByAddressRequest, Zrchain_Policy_QuerySignMethodsByAddressResponse>

  func makePoliciesByCreatorCall(
    _ request: Zrchain_Policy_QueryPoliciesByCreatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryPoliciesByCreatorRequest, Zrchain_Policy_QueryPoliciesByCreatorResponse>

  func makeActionDetailsByIDCall(
    _ request: Zrchain_Policy_QueryActionDetailsByIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryActionDetailsByIdRequest, Zrchain_Policy_QueryActionDetailsByIdResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Policy_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Policy_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Zrchain_Policy_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryParamsRequest, Zrchain_Policy_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeActionsCall(
    _ request: Zrchain_Policy_QueryActionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryActionsRequest, Zrchain_Policy_QueryActionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.actions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActionsInterceptors() ?? []
    )
  }

  internal func makePoliciesCall(
    _ request: Zrchain_Policy_QueryPoliciesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryPoliciesRequest, Zrchain_Policy_QueryPoliciesResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoliciesInterceptors() ?? []
    )
  }

  internal func makePolicyByIDCall(
    _ request: Zrchain_Policy_QueryPolicyByIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryPolicyByIdRequest, Zrchain_Policy_QueryPolicyByIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policyById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePolicyByIdInterceptors() ?? []
    )
  }

  internal func makeSignMethodsByAddressCall(
    _ request: Zrchain_Policy_QuerySignMethodsByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QuerySignMethodsByAddressRequest, Zrchain_Policy_QuerySignMethodsByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.signMethodsByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignMethodsByAddressInterceptors() ?? []
    )
  }

  internal func makePoliciesByCreatorCall(
    _ request: Zrchain_Policy_QueryPoliciesByCreatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryPoliciesByCreatorRequest, Zrchain_Policy_QueryPoliciesByCreatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policiesByCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoliciesByCreatorInterceptors() ?? []
    )
  }

  internal func makeActionDetailsByIDCall(
    _ request: Zrchain_Policy_QueryActionDetailsByIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_QueryActionDetailsByIdRequest, Zrchain_Policy_QueryActionDetailsByIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.actionDetailsById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActionDetailsByIdInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Policy_QueryAsyncClientProtocol {
  internal func params(
    _ request: Zrchain_Policy_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func actions(
    _ request: Zrchain_Policy_QueryActionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QueryActionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.actions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActionsInterceptors() ?? []
    )
  }

  internal func policies(
    _ request: Zrchain_Policy_QueryPoliciesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QueryPoliciesResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoliciesInterceptors() ?? []
    )
  }

  internal func policyById(
    _ request: Zrchain_Policy_QueryPolicyByIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QueryPolicyByIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policyById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePolicyByIdInterceptors() ?? []
    )
  }

  internal func signMethodsByAddress(
    _ request: Zrchain_Policy_QuerySignMethodsByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QuerySignMethodsByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.signMethodsByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignMethodsByAddressInterceptors() ?? []
    )
  }

  internal func policiesByCreator(
    _ request: Zrchain_Policy_QueryPoliciesByCreatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QueryPoliciesByCreatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.policiesByCreator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoliciesByCreatorInterceptors() ?? []
    )
  }

  internal func actionDetailsById(
    _ request: Zrchain_Policy_QueryActionDetailsByIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_QueryActionDetailsByIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_QueryClientMetadata.Methods.actionDetailsById.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActionDetailsByIdInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Zrchain_Policy_QueryAsyncClient: Zrchain_Policy_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Policy_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Zrchain_Policy_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Zrchain_Policy_QueryParamsRequest, Zrchain_Policy_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'actions'.
  func makeActionsInterceptors() -> [ClientInterceptor<Zrchain_Policy_QueryActionsRequest, Zrchain_Policy_QueryActionsResponse>]

  /// - Returns: Interceptors to use when invoking 'policies'.
  func makePoliciesInterceptors() -> [ClientInterceptor<Zrchain_Policy_QueryPoliciesRequest, Zrchain_Policy_QueryPoliciesResponse>]

  /// - Returns: Interceptors to use when invoking 'policyById'.
  func makePolicyByIdInterceptors() -> [ClientInterceptor<Zrchain_Policy_QueryPolicyByIdRequest, Zrchain_Policy_QueryPolicyByIdResponse>]

  /// - Returns: Interceptors to use when invoking 'signMethodsByAddress'.
  func makeSignMethodsByAddressInterceptors() -> [ClientInterceptor<Zrchain_Policy_QuerySignMethodsByAddressRequest, Zrchain_Policy_QuerySignMethodsByAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'policiesByCreator'.
  func makePoliciesByCreatorInterceptors() -> [ClientInterceptor<Zrchain_Policy_QueryPoliciesByCreatorRequest, Zrchain_Policy_QueryPoliciesByCreatorResponse>]

  /// - Returns: Interceptors to use when invoking 'actionDetailsById'.
  func makeActionDetailsByIdInterceptors() -> [ClientInterceptor<Zrchain_Policy_QueryActionDetailsByIdRequest, Zrchain_Policy_QueryActionDetailsByIdResponse>]
}

internal enum Zrchain_Policy_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "zrchain.policy.Query",
    methods: [
      Zrchain_Policy_QueryClientMetadata.Methods.params,
      Zrchain_Policy_QueryClientMetadata.Methods.actions,
      Zrchain_Policy_QueryClientMetadata.Methods.policies,
      Zrchain_Policy_QueryClientMetadata.Methods.policyById,
      Zrchain_Policy_QueryClientMetadata.Methods.signMethodsByAddress,
      Zrchain_Policy_QueryClientMetadata.Methods.policiesByCreator,
      Zrchain_Policy_QueryClientMetadata.Methods.actionDetailsById,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/zrchain.policy.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let actions = GRPCMethodDescriptor(
      name: "Actions",
      path: "/zrchain.policy.Query/Actions",
      type: GRPCCallType.unary
    )

    internal static let policies = GRPCMethodDescriptor(
      name: "Policies",
      path: "/zrchain.policy.Query/Policies",
      type: GRPCCallType.unary
    )

    internal static let policyById = GRPCMethodDescriptor(
      name: "PolicyById",
      path: "/zrchain.policy.Query/PolicyById",
      type: GRPCCallType.unary
    )

    internal static let signMethodsByAddress = GRPCMethodDescriptor(
      name: "SignMethodsByAddress",
      path: "/zrchain.policy.Query/SignMethodsByAddress",
      type: GRPCCallType.unary
    )

    internal static let policiesByCreator = GRPCMethodDescriptor(
      name: "PoliciesByCreator",
      path: "/zrchain.policy.Query/PoliciesByCreator",
      type: GRPCCallType.unary
    )

    internal static let actionDetailsById = GRPCMethodDescriptor(
      name: "ActionDetailsById",
      path: "/zrchain.policy.Query/ActionDetailsById",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Zrchain_Policy_QueryProvider: CallHandlerProvider {
  var interceptors: Zrchain_Policy_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Zrchain_Policy_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QueryParamsResponse>

  /// Queries a list of Actions items.
  func actions(request: Zrchain_Policy_QueryActionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QueryActionsResponse>

  /// Queries a list of Policies items.
  func policies(request: Zrchain_Policy_QueryPoliciesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QueryPoliciesResponse>

  /// Queries a list of PolicyById items.
  func policyById(request: Zrchain_Policy_QueryPolicyByIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QueryPolicyByIdResponse>

  /// Queries a list of SignMethodsByAddress items.
  func signMethodsByAddress(request: Zrchain_Policy_QuerySignMethodsByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QuerySignMethodsByAddressResponse>

  /// Queries a list of PoliciesByCreator items.
  func policiesByCreator(request: Zrchain_Policy_QueryPoliciesByCreatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QueryPoliciesByCreatorResponse>

  /// Queries a list of ActionDetailsById items.
  func actionDetailsById(request: Zrchain_Policy_QueryActionDetailsByIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_QueryActionDetailsByIdResponse>
}

extension Zrchain_Policy_QueryProvider {
  internal var serviceName: Substring {
    return Zrchain_Policy_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Actions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryActionsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryActionsResponse>(),
        interceptors: self.interceptors?.makeActionsInterceptors() ?? [],
        userFunction: self.actions(request:context:)
      )

    case "Policies":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryPoliciesRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryPoliciesResponse>(),
        interceptors: self.interceptors?.makePoliciesInterceptors() ?? [],
        userFunction: self.policies(request:context:)
      )

    case "PolicyById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryPolicyByIdRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryPolicyByIdResponse>(),
        interceptors: self.interceptors?.makePolicyByIdInterceptors() ?? [],
        userFunction: self.policyById(request:context:)
      )

    case "SignMethodsByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QuerySignMethodsByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QuerySignMethodsByAddressResponse>(),
        interceptors: self.interceptors?.makeSignMethodsByAddressInterceptors() ?? [],
        userFunction: self.signMethodsByAddress(request:context:)
      )

    case "PoliciesByCreator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryPoliciesByCreatorRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryPoliciesByCreatorResponse>(),
        interceptors: self.interceptors?.makePoliciesByCreatorInterceptors() ?? [],
        userFunction: self.policiesByCreator(request:context:)
      )

    case "ActionDetailsById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryActionDetailsByIdRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryActionDetailsByIdResponse>(),
        interceptors: self.interceptors?.makeActionDetailsByIdInterceptors() ?? [],
        userFunction: self.actionDetailsById(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Policy_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Policy_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Zrchain_Policy_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QueryParamsResponse

  /// Queries a list of Actions items.
  @Sendable func actions(
    request: Zrchain_Policy_QueryActionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QueryActionsResponse

  /// Queries a list of Policies items.
  @Sendable func policies(
    request: Zrchain_Policy_QueryPoliciesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QueryPoliciesResponse

  /// Queries a list of PolicyById items.
  @Sendable func policyById(
    request: Zrchain_Policy_QueryPolicyByIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QueryPolicyByIdResponse

  /// Queries a list of SignMethodsByAddress items.
  @Sendable func signMethodsByAddress(
    request: Zrchain_Policy_QuerySignMethodsByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QuerySignMethodsByAddressResponse

  /// Queries a list of PoliciesByCreator items.
  @Sendable func policiesByCreator(
    request: Zrchain_Policy_QueryPoliciesByCreatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QueryPoliciesByCreatorResponse

  /// Queries a list of ActionDetailsById items.
  @Sendable func actionDetailsById(
    request: Zrchain_Policy_QueryActionDetailsByIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_QueryActionDetailsByIdResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Policy_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Policy_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Zrchain_Policy_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Zrchain_Policy_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Actions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryActionsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryActionsResponse>(),
        interceptors: self.interceptors?.makeActionsInterceptors() ?? [],
        wrapping: self.actions(request:context:)
      )

    case "Policies":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryPoliciesRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryPoliciesResponse>(),
        interceptors: self.interceptors?.makePoliciesInterceptors() ?? [],
        wrapping: self.policies(request:context:)
      )

    case "PolicyById":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryPolicyByIdRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryPolicyByIdResponse>(),
        interceptors: self.interceptors?.makePolicyByIdInterceptors() ?? [],
        wrapping: self.policyById(request:context:)
      )

    case "SignMethodsByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QuerySignMethodsByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QuerySignMethodsByAddressResponse>(),
        interceptors: self.interceptors?.makeSignMethodsByAddressInterceptors() ?? [],
        wrapping: self.signMethodsByAddress(request:context:)
      )

    case "PoliciesByCreator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryPoliciesByCreatorRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryPoliciesByCreatorResponse>(),
        interceptors: self.interceptors?.makePoliciesByCreatorInterceptors() ?? [],
        wrapping: self.policiesByCreator(request:context:)
      )

    case "ActionDetailsById":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_QueryActionDetailsByIdRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_QueryActionDetailsByIdResponse>(),
        interceptors: self.interceptors?.makeActionDetailsByIdInterceptors() ?? [],
        wrapping: self.actionDetailsById(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Zrchain_Policy_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Zrchain_Policy_QueryParamsRequest, Zrchain_Policy_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'actions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActionsInterceptors() -> [ServerInterceptor<Zrchain_Policy_QueryActionsRequest, Zrchain_Policy_QueryActionsResponse>]

  /// - Returns: Interceptors to use when handling 'policies'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoliciesInterceptors() -> [ServerInterceptor<Zrchain_Policy_QueryPoliciesRequest, Zrchain_Policy_QueryPoliciesResponse>]

  /// - Returns: Interceptors to use when handling 'policyById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePolicyByIdInterceptors() -> [ServerInterceptor<Zrchain_Policy_QueryPolicyByIdRequest, Zrchain_Policy_QueryPolicyByIdResponse>]

  /// - Returns: Interceptors to use when handling 'signMethodsByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignMethodsByAddressInterceptors() -> [ServerInterceptor<Zrchain_Policy_QuerySignMethodsByAddressRequest, Zrchain_Policy_QuerySignMethodsByAddressResponse>]

  /// - Returns: Interceptors to use when handling 'policiesByCreator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoliciesByCreatorInterceptors() -> [ServerInterceptor<Zrchain_Policy_QueryPoliciesByCreatorRequest, Zrchain_Policy_QueryPoliciesByCreatorResponse>]

  /// - Returns: Interceptors to use when handling 'actionDetailsById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActionDetailsByIdInterceptors() -> [ServerInterceptor<Zrchain_Policy_QueryActionDetailsByIdRequest, Zrchain_Policy_QueryActionDetailsByIdResponse>]
}

internal enum Zrchain_Policy_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "zrchain.policy.Query",
    methods: [
      Zrchain_Policy_QueryServerMetadata.Methods.params,
      Zrchain_Policy_QueryServerMetadata.Methods.actions,
      Zrchain_Policy_QueryServerMetadata.Methods.policies,
      Zrchain_Policy_QueryServerMetadata.Methods.policyById,
      Zrchain_Policy_QueryServerMetadata.Methods.signMethodsByAddress,
      Zrchain_Policy_QueryServerMetadata.Methods.policiesByCreator,
      Zrchain_Policy_QueryServerMetadata.Methods.actionDetailsById,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/zrchain.policy.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let actions = GRPCMethodDescriptor(
      name: "Actions",
      path: "/zrchain.policy.Query/Actions",
      type: GRPCCallType.unary
    )

    internal static let policies = GRPCMethodDescriptor(
      name: "Policies",
      path: "/zrchain.policy.Query/Policies",
      type: GRPCCallType.unary
    )

    internal static let policyById = GRPCMethodDescriptor(
      name: "PolicyById",
      path: "/zrchain.policy.Query/PolicyById",
      type: GRPCCallType.unary
    )

    internal static let signMethodsByAddress = GRPCMethodDescriptor(
      name: "SignMethodsByAddress",
      path: "/zrchain.policy.Query/SignMethodsByAddress",
      type: GRPCCallType.unary
    )

    internal static let policiesByCreator = GRPCMethodDescriptor(
      name: "PoliciesByCreator",
      path: "/zrchain.policy.Query/PoliciesByCreator",
      type: GRPCCallType.unary
    )

    internal static let actionDetailsById = GRPCMethodDescriptor(
      name: "ActionDetailsById",
      path: "/zrchain.policy.Query/ActionDetailsById",
      type: GRPCCallType.unary
    )
  }
}
