// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/finality/v1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the module.
struct Babylon_Finality_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// signed_blocks_window defines the size of the sliding window for tracking finality provider liveness
  var signedBlocksWindow: Int64 = 0

  /// finality_sig_timeout defines how much time (in terms of blocks) finality providers have to cast a finality
  /// vote before being judged as missing their voting turn on the given block
  var finalitySigTimeout: Int64 = 0

  /// min_signed_per_window defines the minimum number of blocks that a finality provider is required to sign
  /// within the sliding window to avoid being detected as sluggish
  var minSignedPerWindow: Data = Data()

  /// min_pub_rand is the minimum number of public randomness each
  /// message should commit
  var minPubRand: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Finality_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.finality.v1"

extension Babylon_Finality_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_blocks_window"),
    2: .standard(proto: "finality_sig_timeout"),
    3: .standard(proto: "min_signed_per_window"),
    4: .standard(proto: "min_pub_rand"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.signedBlocksWindow) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.finalitySigTimeout) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.minSignedPerWindow) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.minPubRand) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.signedBlocksWindow != 0 {
      try visitor.visitSingularInt64Field(value: self.signedBlocksWindow, fieldNumber: 1)
    }
    if self.finalitySigTimeout != 0 {
      try visitor.visitSingularInt64Field(value: self.finalitySigTimeout, fieldNumber: 2)
    }
    if !self.minSignedPerWindow.isEmpty {
      try visitor.visitSingularBytesField(value: self.minSignedPerWindow, fieldNumber: 3)
    }
    if self.minPubRand != 0 {
      try visitor.visitSingularUInt64Field(value: self.minPubRand, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Finality_V1_Params, rhs: Babylon_Finality_V1_Params) -> Bool {
    if lhs.signedBlocksWindow != rhs.signedBlocksWindow {return false}
    if lhs.finalitySigTimeout != rhs.finalitySigTimeout {return false}
    if lhs.minSignedPerWindow != rhs.minSignedPerWindow {return false}
    if lhs.minPubRand != rhs.minPubRand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
