// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dymension/rollapp/rollapp.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Rollapp defines a rollapp object. First the RollApp is created and then
/// sequencers can be created and attached. The RollApp is identified by rollappId
struct Dymensionxyz_Dymension_Rollapp_Rollapp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the rollapp chain.
  /// The rollappId follows the same standard as cosmos chain_id.
  var rollappID: String = String()

  /// creator is the bech32-encoded address of the rollapp creator.
  var creator: String = String()

  /// version is the software and configuration version.
  /// starts from 1 and increases by one on every MsgUpdateState
  var version: UInt64 = 0

  /// codeStamp is a generated hash for unique identification of the rollapp code.
  var codeStamp: String = String()

  /// genesisPath is the description of the genesis file location on the DA.
  var genesisPath: String = String()

  /// maxWithholdingBlocks is the maximum number of blocks for
  /// an active sequencer to send a state update (MsgUpdateState). 
  var maxWithholdingBlocks: UInt64 = 0

  /// maxSequencers is the maximum number of sequencers.
  var maxSequencers: UInt64 = 0

  /// permissionedAddresses is a bech32-encoded address list of the sequencers that are allowed to serve this rollappId.
  /// In the case of an empty list, the rollapp is considered permissionless.
  var permissionedAddresses: [String] = []

  /// tokenMetadata is a list of TokenMetadata that are registered on this rollapp
  var tokenMetadata: [Dymensionxyz_Dymension_Rollapp_TokenMetadata] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Rollapp summary is a compact representation of Rollapp
struct Dymensionxyz_Dymension_Rollapp_RollappSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique identifier of the rollapp chain.
  /// The rollappId follows the same standard as cosmos chain_id.
  var rollappID: String = String()

  /// Defines the index of the last rollapp UpdateState.
  var latestStateIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex {
    get {return _latestStateIndex ?? Dymensionxyz_Dymension_Rollapp_StateInfoIndex()}
    set {_latestStateIndex = newValue}
  }
  /// Returns true if `latestStateIndex` has been explicitly set.
  var hasLatestStateIndex: Bool {return self._latestStateIndex != nil}
  /// Clears the value of `latestStateIndex`. Subsequent reads from it will return its default value.
  mutating func clearLatestStateIndex() {self._latestStateIndex = nil}

  /// Defines the index of the last rollapp UpdateState that was finalized.
  var latestFinalizedStateIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex {
    get {return _latestFinalizedStateIndex ?? Dymensionxyz_Dymension_Rollapp_StateInfoIndex()}
    set {_latestFinalizedStateIndex = newValue}
  }
  /// Returns true if `latestFinalizedStateIndex` has been explicitly set.
  var hasLatestFinalizedStateIndex: Bool {return self._latestFinalizedStateIndex != nil}
  /// Clears the value of `latestFinalizedStateIndex`. Subsequent reads from it will return its default value.
  mutating func clearLatestFinalizedStateIndex() {self._latestFinalizedStateIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _latestStateIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex? = nil
  fileprivate var _latestFinalizedStateIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dymensionxyz_Dymension_Rollapp_Rollapp: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Rollapp_RollappSummary: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dymensionxyz.dymension.rollapp"

extension Dymensionxyz_Dymension_Rollapp_Rollapp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Rollapp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rollappId"),
    2: .same(proto: "creator"),
    3: .same(proto: "version"),
    4: .same(proto: "codeStamp"),
    5: .same(proto: "genesisPath"),
    6: .same(proto: "maxWithholdingBlocks"),
    7: .same(proto: "maxSequencers"),
    8: .same(proto: "permissionedAddresses"),
    9: .same(proto: "tokenMetadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rollappID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.version) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.codeStamp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.genesisPath) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.maxWithholdingBlocks) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.maxSequencers) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.permissionedAddresses) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.tokenMetadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rollappID.isEmpty {
      try visitor.visitSingularStringField(value: self.rollappID, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 2)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 3)
    }
    if !self.codeStamp.isEmpty {
      try visitor.visitSingularStringField(value: self.codeStamp, fieldNumber: 4)
    }
    if !self.genesisPath.isEmpty {
      try visitor.visitSingularStringField(value: self.genesisPath, fieldNumber: 5)
    }
    if self.maxWithholdingBlocks != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxWithholdingBlocks, fieldNumber: 6)
    }
    if self.maxSequencers != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxSequencers, fieldNumber: 7)
    }
    if !self.permissionedAddresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.permissionedAddresses, fieldNumber: 8)
    }
    if !self.tokenMetadata.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenMetadata, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_Rollapp, rhs: Dymensionxyz_Dymension_Rollapp_Rollapp) -> Bool {
    if lhs.rollappID != rhs.rollappID {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.version != rhs.version {return false}
    if lhs.codeStamp != rhs.codeStamp {return false}
    if lhs.genesisPath != rhs.genesisPath {return false}
    if lhs.maxWithholdingBlocks != rhs.maxWithholdingBlocks {return false}
    if lhs.maxSequencers != rhs.maxSequencers {return false}
    if lhs.permissionedAddresses != rhs.permissionedAddresses {return false}
    if lhs.tokenMetadata != rhs.tokenMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Rollapp_RollappSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RollappSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rollappId"),
    2: .same(proto: "latestStateIndex"),
    3: .same(proto: "latestFinalizedStateIndex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rollappID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._latestStateIndex) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._latestFinalizedStateIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rollappID.isEmpty {
      try visitor.visitSingularStringField(value: self.rollappID, fieldNumber: 1)
    }
    try { if let v = self._latestStateIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._latestFinalizedStateIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_RollappSummary, rhs: Dymensionxyz_Dymension_Rollapp_RollappSummary) -> Bool {
    if lhs.rollappID != rhs.rollappID {return false}
    if lhs._latestStateIndex != rhs._latestStateIndex {return false}
    if lhs._latestFinalizedStateIndex != rhs._latestFinalizedStateIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
