// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/reactions/v1/client/cli.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// SetReactionsParamsJSON contains the data that can be specified when setting a
/// subspace reactions params using the CLI command
struct Desmos_Reactions_V1_Client_SetReactionsParamsJSON {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Params related to RegisteredReactionValue reactions
  var registeredReactionParams: Desmos_Reactions_V1_RegisteredReactionValueParams {
    get {return _registeredReactionParams ?? Desmos_Reactions_V1_RegisteredReactionValueParams()}
    set {_registeredReactionParams = newValue}
  }
  /// Returns true if `registeredReactionParams` has been explicitly set.
  var hasRegisteredReactionParams: Bool {return self._registeredReactionParams != nil}
  /// Clears the value of `registeredReactionParams`. Subsequent reads from it will return its default value.
  mutating func clearRegisteredReactionParams() {self._registeredReactionParams = nil}

  /// Params related to FreeTextValue reactions
  var freeTextParams: Desmos_Reactions_V1_FreeTextValueParams {
    get {return _freeTextParams ?? Desmos_Reactions_V1_FreeTextValueParams()}
    set {_freeTextParams = newValue}
  }
  /// Returns true if `freeTextParams` has been explicitly set.
  var hasFreeTextParams: Bool {return self._freeTextParams != nil}
  /// Clears the value of `freeTextParams`. Subsequent reads from it will return its default value.
  mutating func clearFreeTextParams() {self._freeTextParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _registeredReactionParams: Desmos_Reactions_V1_RegisteredReactionValueParams? = nil
  fileprivate var _freeTextParams: Desmos_Reactions_V1_FreeTextValueParams? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Desmos_Reactions_V1_Client_SetReactionsParamsJSON: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.reactions.v1.client"

extension Desmos_Reactions_V1_Client_SetReactionsParamsJSON: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetReactionsParamsJSON"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "registered_reaction_params"),
    2: .standard(proto: "free_text_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registeredReactionParams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._freeTextParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registeredReactionParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._freeTextParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_Client_SetReactionsParamsJSON, rhs: Desmos_Reactions_V1_Client_SetReactionsParamsJSON) -> Bool {
    if lhs._registeredReactionParams != rhs._registeredReactionParams {return false}
    if lhs._freeTextParams != rhs._freeTextParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
