//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: band/bandchain/v1/node/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service defines the gRPC querier service.
///
/// Usage: instantiate `Bandchain_V1_Node_ServiceClient`, then call methods of this protocol to make API calls.
internal protocol Bandchain_V1_Node_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? { get }

  func chainID(
    _ request: Bandchain_V1_Node_QueryChainIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bandchain_V1_Node_QueryChainIDRequest, Bandchain_V1_Node_QueryChainIDResponse>

  func eVMValidators(
    _ request: Bandchain_V1_Node_QueryEVMValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bandchain_V1_Node_QueryEVMValidatorsRequest, Bandchain_V1_Node_QueryEVMValidatorsResponse>
}

extension Bandchain_V1_Node_ServiceClientProtocol {
  internal var serviceName: String {
    return "bandchain.v1.node.Service"
  }

  /// ChainID queries the chain ID of this node
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainID(
    _ request: Bandchain_V1_Node_QueryChainIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bandchain_V1_Node_QueryChainIDRequest, Bandchain_V1_Node_QueryChainIDResponse> {
    return self.makeUnaryCall(
      path: Bandchain_V1_Node_ServiceClientMetadata.Methods.chainID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainIDInterceptors() ?? []
    )
  }

  /// EVMValidators queries current list of validator's address and power
  ///
  /// - Parameters:
  ///   - request: Request to send to EVMValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eVMValidators(
    _ request: Bandchain_V1_Node_QueryEVMValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bandchain_V1_Node_QueryEVMValidatorsRequest, Bandchain_V1_Node_QueryEVMValidatorsResponse> {
    return self.makeUnaryCall(
      path: Bandchain_V1_Node_ServiceClientMetadata.Methods.eVMValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEVMValidatorsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Bandchain_V1_Node_ServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Bandchain_V1_Node_ServiceNIOClient")
internal final class Bandchain_V1_Node_ServiceClient: Bandchain_V1_Node_ServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bandchain.v1.node.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Bandchain_V1_Node_ServiceNIOClient: Bandchain_V1_Node_ServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bandchain.v1.node.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bandchain_V1_Node_ServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? { get }

  func makeChainIDCall(
    _ request: Bandchain_V1_Node_QueryChainIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bandchain_V1_Node_QueryChainIDRequest, Bandchain_V1_Node_QueryChainIDResponse>

  func makeEvmvalidatorsCall(
    _ request: Bandchain_V1_Node_QueryEVMValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bandchain_V1_Node_QueryEVMValidatorsRequest, Bandchain_V1_Node_QueryEVMValidatorsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bandchain_V1_Node_ServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bandchain_V1_Node_ServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeChainIDCall(
    _ request: Bandchain_V1_Node_QueryChainIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bandchain_V1_Node_QueryChainIDRequest, Bandchain_V1_Node_QueryChainIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Bandchain_V1_Node_ServiceClientMetadata.Methods.chainID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainIDInterceptors() ?? []
    )
  }

  internal func makeEvmvalidatorsCall(
    _ request: Bandchain_V1_Node_QueryEVMValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bandchain_V1_Node_QueryEVMValidatorsRequest, Bandchain_V1_Node_QueryEVMValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Bandchain_V1_Node_ServiceClientMetadata.Methods.eVMValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEVMValidatorsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bandchain_V1_Node_ServiceAsyncClientProtocol {
  internal func chainID(
    _ request: Bandchain_V1_Node_QueryChainIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Bandchain_V1_Node_QueryChainIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Bandchain_V1_Node_ServiceClientMetadata.Methods.chainID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainIDInterceptors() ?? []
    )
  }

  internal func eVMValidators(
    _ request: Bandchain_V1_Node_QueryEVMValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Bandchain_V1_Node_QueryEVMValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Bandchain_V1_Node_ServiceClientMetadata.Methods.eVMValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEVMValidatorsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Bandchain_V1_Node_ServiceAsyncClient: Bandchain_V1_Node_ServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Bandchain_V1_Node_ServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'chainID'.
  func makeChainIDInterceptors() -> [ClientInterceptor<Bandchain_V1_Node_QueryChainIDRequest, Bandchain_V1_Node_QueryChainIDResponse>]

  /// - Returns: Interceptors to use when invoking 'eVMValidators'.
  func makeEVMValidatorsInterceptors() -> [ClientInterceptor<Bandchain_V1_Node_QueryEVMValidatorsRequest, Bandchain_V1_Node_QueryEVMValidatorsResponse>]
}

internal enum Bandchain_V1_Node_ServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Service",
    fullName: "bandchain.v1.node.Service",
    methods: [
      Bandchain_V1_Node_ServiceClientMetadata.Methods.chainID,
      Bandchain_V1_Node_ServiceClientMetadata.Methods.eVMValidators,
    ]
  )

  internal enum Methods {
    internal static let chainID = GRPCMethodDescriptor(
      name: "ChainID",
      path: "/bandchain.v1.node.Service/ChainID",
      type: GRPCCallType.unary
    )

    internal static let eVMValidators = GRPCMethodDescriptor(
      name: "EVMValidators",
      path: "/bandchain.v1.node.Service/EVMValidators",
      type: GRPCCallType.unary
    )
  }
}

/// Service defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bandchain_V1_Node_ServiceProvider: CallHandlerProvider {
  var interceptors: Bandchain_V1_Node_ServiceServerInterceptorFactoryProtocol? { get }

  /// ChainID queries the chain ID of this node
  func chainID(request: Bandchain_V1_Node_QueryChainIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bandchain_V1_Node_QueryChainIDResponse>

  /// EVMValidators queries current list of validator's address and power
  func eVMValidators(request: Bandchain_V1_Node_QueryEVMValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bandchain_V1_Node_QueryEVMValidatorsResponse>
}

extension Bandchain_V1_Node_ServiceProvider {
  internal var serviceName: Substring {
    return Bandchain_V1_Node_ServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ChainID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bandchain_V1_Node_QueryChainIDRequest>(),
        responseSerializer: ProtobufSerializer<Bandchain_V1_Node_QueryChainIDResponse>(),
        interceptors: self.interceptors?.makeChainIDInterceptors() ?? [],
        userFunction: self.chainID(request:context:)
      )

    case "EVMValidators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bandchain_V1_Node_QueryEVMValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Bandchain_V1_Node_QueryEVMValidatorsResponse>(),
        interceptors: self.interceptors?.makeEVMValidatorsInterceptors() ?? [],
        userFunction: self.eVMValidators(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bandchain_V1_Node_ServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bandchain_V1_Node_ServiceServerInterceptorFactoryProtocol? { get }

  /// ChainID queries the chain ID of this node
  @Sendable func chainID(
    request: Bandchain_V1_Node_QueryChainIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bandchain_V1_Node_QueryChainIDResponse

  /// EVMValidators queries current list of validator's address and power
  @Sendable func eVMValidators(
    request: Bandchain_V1_Node_QueryEVMValidatorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bandchain_V1_Node_QueryEVMValidatorsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bandchain_V1_Node_ServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bandchain_V1_Node_ServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Bandchain_V1_Node_ServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Bandchain_V1_Node_ServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ChainID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bandchain_V1_Node_QueryChainIDRequest>(),
        responseSerializer: ProtobufSerializer<Bandchain_V1_Node_QueryChainIDResponse>(),
        interceptors: self.interceptors?.makeChainIDInterceptors() ?? [],
        wrapping: self.chainID(request:context:)
      )

    case "EVMValidators":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bandchain_V1_Node_QueryEVMValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Bandchain_V1_Node_QueryEVMValidatorsResponse>(),
        interceptors: self.interceptors?.makeEVMValidatorsInterceptors() ?? [],
        wrapping: self.eVMValidators(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bandchain_V1_Node_ServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'chainID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainIDInterceptors() -> [ServerInterceptor<Bandchain_V1_Node_QueryChainIDRequest, Bandchain_V1_Node_QueryChainIDResponse>]

  /// - Returns: Interceptors to use when handling 'eVMValidators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEVMValidatorsInterceptors() -> [ServerInterceptor<Bandchain_V1_Node_QueryEVMValidatorsRequest, Bandchain_V1_Node_QueryEVMValidatorsResponse>]
}

internal enum Bandchain_V1_Node_ServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Service",
    fullName: "bandchain.v1.node.Service",
    methods: [
      Bandchain_V1_Node_ServiceServerMetadata.Methods.chainID,
      Bandchain_V1_Node_ServiceServerMetadata.Methods.eVMValidators,
    ]
  )

  internal enum Methods {
    internal static let chainID = GRPCMethodDescriptor(
      name: "ChainID",
      path: "/bandchain.v1.node.Service/ChainID",
      type: GRPCCallType.unary
    )

    internal static let eVMValidators = GRPCMethodDescriptor(
      name: "EVMValidators",
      path: "/bandchain.v1.node.Service/EVMValidators",
      type: GRPCCallType.unary
    )
  }
}
