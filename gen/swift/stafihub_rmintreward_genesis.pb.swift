// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stafihub/rmintreward/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the rmintreward module's genesis state.
struct Stafihub_Stafihub_Rmintreward_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stafihub_Stafihub_Rmintreward_Params {
    get {return _params ?? Stafihub_Stafihub_Rmintreward_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var actLatestCycleList: [Stafihub_Stafihub_Rmintreward_ActLatestCycle] = []

  var actCurrentCycleList: [Stafihub_Stafihub_Rmintreward_ActCurrentCycle] = []

  var mintrewardActList: [Stafihub_Stafihub_Rmintreward_GenesisMintRewardAct] = []

  var userClaimInfoList: [Stafihub_Stafihub_Rmintreward_GenesisUserClaimInfo] = []

  var userActList: [Stafihub_Stafihub_Rmintreward_GenesisUserAct] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var userMintCountList: [Stafihub_Stafihub_Rmintreward_UserMintCount] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stafihub_Stafihub_Rmintreward_Params? = nil
}

struct Stafihub_Stafihub_Rmintreward_ActLatestCycle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var cycle: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stafihub_Stafihub_Rmintreward_ActCurrentCycle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var cycle: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stafihub_Stafihub_Rmintreward_GenesisMintRewardAct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var cycle: UInt64 = 0

  var mintRewardAct: Stafihub_Stafihub_Rmintreward_MintRewardAct {
    get {return _mintRewardAct ?? Stafihub_Stafihub_Rmintreward_MintRewardAct()}
    set {_mintRewardAct = newValue}
  }
  /// Returns true if `mintRewardAct` has been explicitly set.
  var hasMintRewardAct: Bool {return self._mintRewardAct != nil}
  /// Clears the value of `mintRewardAct`. Subsequent reads from it will return its default value.
  mutating func clearMintRewardAct() {self._mintRewardAct = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mintRewardAct: Stafihub_Stafihub_Rmintreward_MintRewardAct? = nil
}

struct Stafihub_Stafihub_Rmintreward_GenesisUserClaimInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: String = String()

  var denom: String = String()

  var cycle: UInt64 = 0

  var mintIndex: UInt64 = 0

  var userClaimInfo: Stafihub_Stafihub_Rmintreward_UserClaimInfo {
    get {return _userClaimInfo ?? Stafihub_Stafihub_Rmintreward_UserClaimInfo()}
    set {_userClaimInfo = newValue}
  }
  /// Returns true if `userClaimInfo` has been explicitly set.
  var hasUserClaimInfo: Bool {return self._userClaimInfo != nil}
  /// Clears the value of `userClaimInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserClaimInfo() {self._userClaimInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userClaimInfo: Stafihub_Stafihub_Rmintreward_UserClaimInfo? = nil
}

struct Stafihub_Stafihub_Rmintreward_GenesisUserAct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: String = String()

  var denom: String = String()

  var acts: Stafihub_Stafihub_Rmintreward_Acts {
    get {return _acts ?? Stafihub_Stafihub_Rmintreward_Acts()}
    set {_acts = newValue}
  }
  /// Returns true if `acts` has been explicitly set.
  var hasActs: Bool {return self._acts != nil}
  /// Clears the value of `acts`. Subsequent reads from it will return its default value.
  mutating func clearActs() {self._acts = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _acts: Stafihub_Stafihub_Rmintreward_Acts? = nil
}

struct Stafihub_Stafihub_Rmintreward_UserMintCount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var account: String = String()

  var denom: String = String()

  var cycle: UInt64 = 0

  var count: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stafihub_Stafihub_Rmintreward_GenesisState: @unchecked Sendable {}
extension Stafihub_Stafihub_Rmintreward_ActLatestCycle: @unchecked Sendable {}
extension Stafihub_Stafihub_Rmintreward_ActCurrentCycle: @unchecked Sendable {}
extension Stafihub_Stafihub_Rmintreward_GenesisMintRewardAct: @unchecked Sendable {}
extension Stafihub_Stafihub_Rmintreward_GenesisUserClaimInfo: @unchecked Sendable {}
extension Stafihub_Stafihub_Rmintreward_GenesisUserAct: @unchecked Sendable {}
extension Stafihub_Stafihub_Rmintreward_UserMintCount: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stafihub.stafihub.rmintreward"

extension Stafihub_Stafihub_Rmintreward_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "actLatestCycleList"),
    3: .same(proto: "actCurrentCycleList"),
    4: .same(proto: "mintrewardActList"),
    5: .same(proto: "userClaimInfoList"),
    6: .same(proto: "userActList"),
    7: .same(proto: "userMintCountList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.actLatestCycleList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.actCurrentCycleList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.mintrewardActList) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.userClaimInfoList) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.userActList) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.userMintCountList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.actLatestCycleList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actLatestCycleList, fieldNumber: 2)
    }
    if !self.actCurrentCycleList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actCurrentCycleList, fieldNumber: 3)
    }
    if !self.mintrewardActList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mintrewardActList, fieldNumber: 4)
    }
    if !self.userClaimInfoList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userClaimInfoList, fieldNumber: 5)
    }
    if !self.userActList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userActList, fieldNumber: 6)
    }
    if !self.userMintCountList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userMintCountList, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_GenesisState, rhs: Stafihub_Stafihub_Rmintreward_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.actLatestCycleList != rhs.actLatestCycleList {return false}
    if lhs.actCurrentCycleList != rhs.actCurrentCycleList {return false}
    if lhs.mintrewardActList != rhs.mintrewardActList {return false}
    if lhs.userClaimInfoList != rhs.userClaimInfoList {return false}
    if lhs.userActList != rhs.userActList {return false}
    if lhs.userMintCountList != rhs.userMintCountList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Rmintreward_ActLatestCycle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActLatestCycle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "cycle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cycle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.cycle != 0 {
      try visitor.visitSingularUInt64Field(value: self.cycle, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_ActLatestCycle, rhs: Stafihub_Stafihub_Rmintreward_ActLatestCycle) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.cycle != rhs.cycle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Rmintreward_ActCurrentCycle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActCurrentCycle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "cycle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cycle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.cycle != 0 {
      try visitor.visitSingularUInt64Field(value: self.cycle, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_ActCurrentCycle, rhs: Stafihub_Stafihub_Rmintreward_ActCurrentCycle) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.cycle != rhs.cycle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Rmintreward_GenesisMintRewardAct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisMintRewardAct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "cycle"),
    3: .same(proto: "mintRewardAct"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cycle) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._mintRewardAct) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.cycle != 0 {
      try visitor.visitSingularUInt64Field(value: self.cycle, fieldNumber: 2)
    }
    try { if let v = self._mintRewardAct {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_GenesisMintRewardAct, rhs: Stafihub_Stafihub_Rmintreward_GenesisMintRewardAct) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.cycle != rhs.cycle {return false}
    if lhs._mintRewardAct != rhs._mintRewardAct {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Rmintreward_GenesisUserClaimInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisUserClaimInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "denom"),
    3: .same(proto: "cycle"),
    4: .same(proto: "mintIndex"),
    5: .same(proto: "userClaimInfo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.cycle) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.mintIndex) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._userClaimInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 1)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 2)
    }
    if self.cycle != 0 {
      try visitor.visitSingularUInt64Field(value: self.cycle, fieldNumber: 3)
    }
    if self.mintIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.mintIndex, fieldNumber: 4)
    }
    try { if let v = self._userClaimInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_GenesisUserClaimInfo, rhs: Stafihub_Stafihub_Rmintreward_GenesisUserClaimInfo) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.cycle != rhs.cycle {return false}
    if lhs.mintIndex != rhs.mintIndex {return false}
    if lhs._userClaimInfo != rhs._userClaimInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Rmintreward_GenesisUserAct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisUserAct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "denom"),
    3: .same(proto: "acts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._acts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 1)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 2)
    }
    try { if let v = self._acts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_GenesisUserAct, rhs: Stafihub_Stafihub_Rmintreward_GenesisUserAct) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs._acts != rhs._acts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Rmintreward_UserMintCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserMintCount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "denom"),
    3: .same(proto: "cycle"),
    4: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.account) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.cycle) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 1)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 2)
    }
    if self.cycle != 0 {
      try visitor.visitSingularUInt64Field(value: self.cycle, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt64Field(value: self.count, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rmintreward_UserMintCount, rhs: Stafihub_Stafihub_Rmintreward_UserMintCount) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.cycle != rhs.cycle {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
