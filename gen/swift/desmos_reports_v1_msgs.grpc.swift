//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/reports/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the reports Msg service.
///
/// Usage: instantiate `Desmos_Reports_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Reports_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createReport(
    _ request: Desmos_Reports_V1_MsgCreateReport,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reports_V1_MsgCreateReport, Desmos_Reports_V1_MsgCreateReportResponse>

  func deleteReport(
    _ request: Desmos_Reports_V1_MsgDeleteReport,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reports_V1_MsgDeleteReport, Desmos_Reports_V1_MsgDeleteReportResponse>

  func supportStandardReason(
    _ request: Desmos_Reports_V1_MsgSupportStandardReason,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reports_V1_MsgSupportStandardReason, Desmos_Reports_V1_MsgSupportStandardReasonResponse>

  func addReason(
    _ request: Desmos_Reports_V1_MsgAddReason,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reports_V1_MsgAddReason, Desmos_Reports_V1_MsgAddReasonResponse>

  func removeReason(
    _ request: Desmos_Reports_V1_MsgRemoveReason,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reports_V1_MsgRemoveReason, Desmos_Reports_V1_MsgRemoveReasonResponse>

  func updateParams(
    _ request: Desmos_Reports_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reports_V1_MsgUpdateParams, Desmos_Reports_V1_MsgUpdateParamsResponse>
}

extension Desmos_Reports_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.reports.v1.Msg"
  }

  /// CreateReport allows to create a new report
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createReport(
    _ request: Desmos_Reports_V1_MsgCreateReport,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reports_V1_MsgCreateReport, Desmos_Reports_V1_MsgCreateReportResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.createReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateReportInterceptors() ?? []
    )
  }

  /// DeleteReport allows to delete an existing report
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteReport.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteReport(
    _ request: Desmos_Reports_V1_MsgDeleteReport,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reports_V1_MsgDeleteReport, Desmos_Reports_V1_MsgDeleteReportResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.deleteReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? []
    )
  }

  /// SupportStandardReason allows to support one of the reasons present inside
  /// the module params
  ///
  /// - Parameters:
  ///   - request: Request to send to SupportStandardReason.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supportStandardReason(
    _ request: Desmos_Reports_V1_MsgSupportStandardReason,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reports_V1_MsgSupportStandardReason, Desmos_Reports_V1_MsgSupportStandardReasonResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.supportStandardReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupportStandardReasonInterceptors() ?? []
    )
  }

  /// AddReason allows to add a new supported reporting reason
  ///
  /// - Parameters:
  ///   - request: Request to send to AddReason.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addReason(
    _ request: Desmos_Reports_V1_MsgAddReason,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reports_V1_MsgAddReason, Desmos_Reports_V1_MsgAddReasonResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.addReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddReasonInterceptors() ?? []
    )
  }

  /// RemoveReason allows to remove a supported reporting reason
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveReason.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeReason(
    _ request: Desmos_Reports_V1_MsgRemoveReason,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reports_V1_MsgRemoveReason, Desmos_Reports_V1_MsgRemoveReasonResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.removeReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveReasonInterceptors() ?? []
    )
  }

  /// UpdateParams defines a (governance) operation for updating the module
  /// parameters.
  /// The authority defaults to the x/gov module account.
  ///
  /// Since: Desmos 5.0.0
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Desmos_Reports_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reports_V1_MsgUpdateParams, Desmos_Reports_V1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Desmos_Reports_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Desmos_Reports_V1_MsgNIOClient")
internal final class Desmos_Reports_V1_MsgClient: Desmos_Reports_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the desmos.reports.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Desmos_Reports_V1_MsgNIOClient: Desmos_Reports_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.reports.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the reports Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Reports_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateReportCall(
    _ request: Desmos_Reports_V1_MsgCreateReport,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgCreateReport, Desmos_Reports_V1_MsgCreateReportResponse>

  func makeDeleteReportCall(
    _ request: Desmos_Reports_V1_MsgDeleteReport,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgDeleteReport, Desmos_Reports_V1_MsgDeleteReportResponse>

  func makeSupportStandardReasonCall(
    _ request: Desmos_Reports_V1_MsgSupportStandardReason,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgSupportStandardReason, Desmos_Reports_V1_MsgSupportStandardReasonResponse>

  func makeAddReasonCall(
    _ request: Desmos_Reports_V1_MsgAddReason,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgAddReason, Desmos_Reports_V1_MsgAddReasonResponse>

  func makeRemoveReasonCall(
    _ request: Desmos_Reports_V1_MsgRemoveReason,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgRemoveReason, Desmos_Reports_V1_MsgRemoveReasonResponse>

  func makeUpdateParamsCall(
    _ request: Desmos_Reports_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgUpdateParams, Desmos_Reports_V1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Reports_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Reports_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateReportCall(
    _ request: Desmos_Reports_V1_MsgCreateReport,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgCreateReport, Desmos_Reports_V1_MsgCreateReportResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.createReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateReportInterceptors() ?? []
    )
  }

  internal func makeDeleteReportCall(
    _ request: Desmos_Reports_V1_MsgDeleteReport,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgDeleteReport, Desmos_Reports_V1_MsgDeleteReportResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.deleteReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? []
    )
  }

  internal func makeSupportStandardReasonCall(
    _ request: Desmos_Reports_V1_MsgSupportStandardReason,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgSupportStandardReason, Desmos_Reports_V1_MsgSupportStandardReasonResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.supportStandardReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupportStandardReasonInterceptors() ?? []
    )
  }

  internal func makeAddReasonCall(
    _ request: Desmos_Reports_V1_MsgAddReason,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgAddReason, Desmos_Reports_V1_MsgAddReasonResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.addReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddReasonInterceptors() ?? []
    )
  }

  internal func makeRemoveReasonCall(
    _ request: Desmos_Reports_V1_MsgRemoveReason,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgRemoveReason, Desmos_Reports_V1_MsgRemoveReasonResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.removeReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveReasonInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Desmos_Reports_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reports_V1_MsgUpdateParams, Desmos_Reports_V1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Reports_V1_MsgAsyncClientProtocol {
  internal func createReport(
    _ request: Desmos_Reports_V1_MsgCreateReport,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reports_V1_MsgCreateReportResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.createReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateReportInterceptors() ?? []
    )
  }

  internal func deleteReport(
    _ request: Desmos_Reports_V1_MsgDeleteReport,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reports_V1_MsgDeleteReportResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.deleteReport.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? []
    )
  }

  internal func supportStandardReason(
    _ request: Desmos_Reports_V1_MsgSupportStandardReason,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reports_V1_MsgSupportStandardReasonResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.supportStandardReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupportStandardReasonInterceptors() ?? []
    )
  }

  internal func addReason(
    _ request: Desmos_Reports_V1_MsgAddReason,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reports_V1_MsgAddReasonResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.addReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddReasonInterceptors() ?? []
    )
  }

  internal func removeReason(
    _ request: Desmos_Reports_V1_MsgRemoveReason,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reports_V1_MsgRemoveReasonResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.removeReason.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveReasonInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Desmos_Reports_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reports_V1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reports_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Desmos_Reports_V1_MsgAsyncClient: Desmos_Reports_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Desmos_Reports_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createReport'.
  func makeCreateReportInterceptors() -> [ClientInterceptor<Desmos_Reports_V1_MsgCreateReport, Desmos_Reports_V1_MsgCreateReportResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteReport'.
  func makeDeleteReportInterceptors() -> [ClientInterceptor<Desmos_Reports_V1_MsgDeleteReport, Desmos_Reports_V1_MsgDeleteReportResponse>]

  /// - Returns: Interceptors to use when invoking 'supportStandardReason'.
  func makeSupportStandardReasonInterceptors() -> [ClientInterceptor<Desmos_Reports_V1_MsgSupportStandardReason, Desmos_Reports_V1_MsgSupportStandardReasonResponse>]

  /// - Returns: Interceptors to use when invoking 'addReason'.
  func makeAddReasonInterceptors() -> [ClientInterceptor<Desmos_Reports_V1_MsgAddReason, Desmos_Reports_V1_MsgAddReasonResponse>]

  /// - Returns: Interceptors to use when invoking 'removeReason'.
  func makeRemoveReasonInterceptors() -> [ClientInterceptor<Desmos_Reports_V1_MsgRemoveReason, Desmos_Reports_V1_MsgRemoveReasonResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Desmos_Reports_V1_MsgUpdateParams, Desmos_Reports_V1_MsgUpdateParamsResponse>]
}

internal enum Desmos_Reports_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.reports.v1.Msg",
    methods: [
      Desmos_Reports_V1_MsgClientMetadata.Methods.createReport,
      Desmos_Reports_V1_MsgClientMetadata.Methods.deleteReport,
      Desmos_Reports_V1_MsgClientMetadata.Methods.supportStandardReason,
      Desmos_Reports_V1_MsgClientMetadata.Methods.addReason,
      Desmos_Reports_V1_MsgClientMetadata.Methods.removeReason,
      Desmos_Reports_V1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createReport = GRPCMethodDescriptor(
      name: "CreateReport",
      path: "/desmos.reports.v1.Msg/CreateReport",
      type: GRPCCallType.unary
    )

    internal static let deleteReport = GRPCMethodDescriptor(
      name: "DeleteReport",
      path: "/desmos.reports.v1.Msg/DeleteReport",
      type: GRPCCallType.unary
    )

    internal static let supportStandardReason = GRPCMethodDescriptor(
      name: "SupportStandardReason",
      path: "/desmos.reports.v1.Msg/SupportStandardReason",
      type: GRPCCallType.unary
    )

    internal static let addReason = GRPCMethodDescriptor(
      name: "AddReason",
      path: "/desmos.reports.v1.Msg/AddReason",
      type: GRPCCallType.unary
    )

    internal static let removeReason = GRPCMethodDescriptor(
      name: "RemoveReason",
      path: "/desmos.reports.v1.Msg/RemoveReason",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/desmos.reports.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the reports Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Reports_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Reports_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateReport allows to create a new report
  func createReport(request: Desmos_Reports_V1_MsgCreateReport, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reports_V1_MsgCreateReportResponse>

  /// DeleteReport allows to delete an existing report
  func deleteReport(request: Desmos_Reports_V1_MsgDeleteReport, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reports_V1_MsgDeleteReportResponse>

  /// SupportStandardReason allows to support one of the reasons present inside
  /// the module params
  func supportStandardReason(request: Desmos_Reports_V1_MsgSupportStandardReason, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reports_V1_MsgSupportStandardReasonResponse>

  /// AddReason allows to add a new supported reporting reason
  func addReason(request: Desmos_Reports_V1_MsgAddReason, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reports_V1_MsgAddReasonResponse>

  /// RemoveReason allows to remove a supported reporting reason
  func removeReason(request: Desmos_Reports_V1_MsgRemoveReason, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reports_V1_MsgRemoveReasonResponse>

  /// UpdateParams defines a (governance) operation for updating the module
  /// parameters.
  /// The authority defaults to the x/gov module account.
  ///
  /// Since: Desmos 5.0.0
  func updateParams(request: Desmos_Reports_V1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reports_V1_MsgUpdateParamsResponse>
}

extension Desmos_Reports_V1_MsgProvider {
  internal var serviceName: Substring {
    return Desmos_Reports_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgCreateReport>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgCreateReportResponse>(),
        interceptors: self.interceptors?.makeCreateReportInterceptors() ?? [],
        userFunction: self.createReport(request:context:)
      )

    case "DeleteReport":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgDeleteReport>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgDeleteReportResponse>(),
        interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? [],
        userFunction: self.deleteReport(request:context:)
      )

    case "SupportStandardReason":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgSupportStandardReason>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgSupportStandardReasonResponse>(),
        interceptors: self.interceptors?.makeSupportStandardReasonInterceptors() ?? [],
        userFunction: self.supportStandardReason(request:context:)
      )

    case "AddReason":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgAddReason>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgAddReasonResponse>(),
        interceptors: self.interceptors?.makeAddReasonInterceptors() ?? [],
        userFunction: self.addReason(request:context:)
      )

    case "RemoveReason":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgRemoveReason>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgRemoveReasonResponse>(),
        interceptors: self.interceptors?.makeRemoveReasonInterceptors() ?? [],
        userFunction: self.removeReason(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the reports Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Reports_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Reports_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateReport allows to create a new report
  @Sendable func createReport(
    request: Desmos_Reports_V1_MsgCreateReport,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reports_V1_MsgCreateReportResponse

  /// DeleteReport allows to delete an existing report
  @Sendable func deleteReport(
    request: Desmos_Reports_V1_MsgDeleteReport,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reports_V1_MsgDeleteReportResponse

  /// SupportStandardReason allows to support one of the reasons present inside
  /// the module params
  @Sendable func supportStandardReason(
    request: Desmos_Reports_V1_MsgSupportStandardReason,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reports_V1_MsgSupportStandardReasonResponse

  /// AddReason allows to add a new supported reporting reason
  @Sendable func addReason(
    request: Desmos_Reports_V1_MsgAddReason,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reports_V1_MsgAddReasonResponse

  /// RemoveReason allows to remove a supported reporting reason
  @Sendable func removeReason(
    request: Desmos_Reports_V1_MsgRemoveReason,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reports_V1_MsgRemoveReasonResponse

  /// UpdateParams defines a (governance) operation for updating the module
  /// parameters.
  /// The authority defaults to the x/gov module account.
  ///
  /// Since: Desmos 5.0.0
  @Sendable func updateParams(
    request: Desmos_Reports_V1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reports_V1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Reports_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Reports_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Desmos_Reports_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Desmos_Reports_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateReport":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgCreateReport>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgCreateReportResponse>(),
        interceptors: self.interceptors?.makeCreateReportInterceptors() ?? [],
        wrapping: self.createReport(request:context:)
      )

    case "DeleteReport":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgDeleteReport>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgDeleteReportResponse>(),
        interceptors: self.interceptors?.makeDeleteReportInterceptors() ?? [],
        wrapping: self.deleteReport(request:context:)
      )

    case "SupportStandardReason":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgSupportStandardReason>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgSupportStandardReasonResponse>(),
        interceptors: self.interceptors?.makeSupportStandardReasonInterceptors() ?? [],
        wrapping: self.supportStandardReason(request:context:)
      )

    case "AddReason":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgAddReason>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgAddReasonResponse>(),
        interceptors: self.interceptors?.makeAddReasonInterceptors() ?? [],
        wrapping: self.addReason(request:context:)
      )

    case "RemoveReason":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgRemoveReason>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgRemoveReasonResponse>(),
        interceptors: self.interceptors?.makeRemoveReasonInterceptors() ?? [],
        wrapping: self.removeReason(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reports_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Desmos_Reports_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Reports_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateReportInterceptors() -> [ServerInterceptor<Desmos_Reports_V1_MsgCreateReport, Desmos_Reports_V1_MsgCreateReportResponse>]

  /// - Returns: Interceptors to use when handling 'deleteReport'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteReportInterceptors() -> [ServerInterceptor<Desmos_Reports_V1_MsgDeleteReport, Desmos_Reports_V1_MsgDeleteReportResponse>]

  /// - Returns: Interceptors to use when handling 'supportStandardReason'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupportStandardReasonInterceptors() -> [ServerInterceptor<Desmos_Reports_V1_MsgSupportStandardReason, Desmos_Reports_V1_MsgSupportStandardReasonResponse>]

  /// - Returns: Interceptors to use when handling 'addReason'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddReasonInterceptors() -> [ServerInterceptor<Desmos_Reports_V1_MsgAddReason, Desmos_Reports_V1_MsgAddReasonResponse>]

  /// - Returns: Interceptors to use when handling 'removeReason'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveReasonInterceptors() -> [ServerInterceptor<Desmos_Reports_V1_MsgRemoveReason, Desmos_Reports_V1_MsgRemoveReasonResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Desmos_Reports_V1_MsgUpdateParams, Desmos_Reports_V1_MsgUpdateParamsResponse>]
}

internal enum Desmos_Reports_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.reports.v1.Msg",
    methods: [
      Desmos_Reports_V1_MsgServerMetadata.Methods.createReport,
      Desmos_Reports_V1_MsgServerMetadata.Methods.deleteReport,
      Desmos_Reports_V1_MsgServerMetadata.Methods.supportStandardReason,
      Desmos_Reports_V1_MsgServerMetadata.Methods.addReason,
      Desmos_Reports_V1_MsgServerMetadata.Methods.removeReason,
      Desmos_Reports_V1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createReport = GRPCMethodDescriptor(
      name: "CreateReport",
      path: "/desmos.reports.v1.Msg/CreateReport",
      type: GRPCCallType.unary
    )

    internal static let deleteReport = GRPCMethodDescriptor(
      name: "DeleteReport",
      path: "/desmos.reports.v1.Msg/DeleteReport",
      type: GRPCCallType.unary
    )

    internal static let supportStandardReason = GRPCMethodDescriptor(
      name: "SupportStandardReason",
      path: "/desmos.reports.v1.Msg/SupportStandardReason",
      type: GRPCCallType.unary
    )

    internal static let addReason = GRPCMethodDescriptor(
      name: "AddReason",
      path: "/desmos.reports.v1.Msg/AddReason",
      type: GRPCCallType.unary
    )

    internal static let removeReason = GRPCMethodDescriptor(
      name: "RemoveReason",
      path: "/desmos.reports.v1.Msg/RemoveReason",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/desmos.reports.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
