//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/zoneconcierge/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Zoneconcierge_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Zoneconcierge_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Babylon_Zoneconcierge_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryParamsRequest, Babylon_Zoneconcierge_V1_QueryParamsResponse>

  func header(
    _ request: Babylon_Zoneconcierge_V1_QueryHeaderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryHeaderRequest, Babylon_Zoneconcierge_V1_QueryHeaderResponse>

  func chainList(
    _ request: Babylon_Zoneconcierge_V1_QueryChainListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryChainListRequest, Babylon_Zoneconcierge_V1_QueryChainListResponse>

  func chainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>

  func epochChainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>

  func listHeaders(
    _ request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryListHeadersRequest, Babylon_Zoneconcierge_V1_QueryListHeadersResponse>

  func listEpochHeaders(
    _ request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>

  func finalizedChainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>

  func finalizedChainInfoUntilHeight(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>
}

extension Babylon_Zoneconcierge_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.zoneconcierge.v1.Query"
  }

  /// Params queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Babylon_Zoneconcierge_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryParamsRequest, Babylon_Zoneconcierge_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Header queries the CZ header and fork headers at a given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to Header.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func header(
    _ request: Babylon_Zoneconcierge_V1_QueryHeaderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryHeaderRequest, Babylon_Zoneconcierge_V1_QueryHeaderResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.header.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeaderInterceptors() ?? []
    )
  }

  /// ChainList queries the list of chains that checkpoint to Babylon
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainList(
    _ request: Babylon_Zoneconcierge_V1_QueryChainListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryChainListRequest, Babylon_Zoneconcierge_V1_QueryChainListResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainListInterceptors() ?? []
    )
  }

  /// ChainsInfo queries the latest info for a given list of chains in Babylon's view
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryChainsInfoResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInfoInterceptors() ?? []
    )
  }

  /// EpochChainsInfo queries the latest info for a list of chains
  /// in a given epoch in Babylon's view
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochChainsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochChainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.epochChainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochChainsInfoInterceptors() ?? []
    )
  }

  /// ListHeaders queries the headers of a chain in Babylon's view, with
  /// pagination support
  ///
  /// - Parameters:
  ///   - request: Request to send to ListHeaders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listHeaders(
    _ request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryListHeadersRequest, Babylon_Zoneconcierge_V1_QueryListHeadersResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listHeaders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHeadersInterceptors() ?? []
    )
  }

  /// ListEpochHeaders queries the headers of a chain timestamped in a given
  /// epoch of Babylon, with pagination support
  ///
  /// - Parameters:
  ///   - request: Request to send to ListEpochHeaders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listEpochHeaders(
    _ request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listEpochHeaders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEpochHeadersInterceptors() ?? []
    )
  }

  /// FinalizedChainsInfo queries the BTC-finalised info of chains with given IDs, with proofs
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizedChainsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalizedChainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedChainsInfoInterceptors() ?? []
    )
  }

  /// FinalizedChainInfoUntilHeight queries the BTC-finalised info no later than
  /// the provided CZ height, with proofs
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalizedChainInfoUntilHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalizedChainInfoUntilHeight(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse> {
    return self.makeUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainInfoUntilHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedChainInfoUntilHeightInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Zoneconcierge_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Zoneconcierge_V1_QueryNIOClient")
internal final class Babylon_Zoneconcierge_V1_QueryClient: Babylon_Zoneconcierge_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.zoneconcierge.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Zoneconcierge_V1_QueryNIOClient: Babylon_Zoneconcierge_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.zoneconcierge.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Zoneconcierge_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Babylon_Zoneconcierge_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryParamsRequest, Babylon_Zoneconcierge_V1_QueryParamsResponse>

  func makeHeaderCall(
    _ request: Babylon_Zoneconcierge_V1_QueryHeaderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryHeaderRequest, Babylon_Zoneconcierge_V1_QueryHeaderResponse>

  func makeChainListCall(
    _ request: Babylon_Zoneconcierge_V1_QueryChainListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryChainListRequest, Babylon_Zoneconcierge_V1_QueryChainListResponse>

  func makeChainsInfoCall(
    _ request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>

  func makeEpochChainsInfoCall(
    _ request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>

  func makeListHeadersCall(
    _ request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryListHeadersRequest, Babylon_Zoneconcierge_V1_QueryListHeadersResponse>

  func makeListEpochHeadersCall(
    _ request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>

  func makeFinalizedChainsInfoCall(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>

  func makeFinalizedChainInfoUntilHeightCall(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Zoneconcierge_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Zoneconcierge_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Babylon_Zoneconcierge_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryParamsRequest, Babylon_Zoneconcierge_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeHeaderCall(
    _ request: Babylon_Zoneconcierge_V1_QueryHeaderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryHeaderRequest, Babylon_Zoneconcierge_V1_QueryHeaderResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.header.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeaderInterceptors() ?? []
    )
  }

  internal func makeChainListCall(
    _ request: Babylon_Zoneconcierge_V1_QueryChainListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryChainListRequest, Babylon_Zoneconcierge_V1_QueryChainListResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainListInterceptors() ?? []
    )
  }

  internal func makeChainsInfoCall(
    _ request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryChainsInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInfoInterceptors() ?? []
    )
  }

  internal func makeEpochChainsInfoCall(
    _ request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.epochChainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochChainsInfoInterceptors() ?? []
    )
  }

  internal func makeListHeadersCall(
    _ request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryListHeadersRequest, Babylon_Zoneconcierge_V1_QueryListHeadersResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listHeaders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHeadersInterceptors() ?? []
    )
  }

  internal func makeListEpochHeadersCall(
    _ request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listEpochHeaders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEpochHeadersInterceptors() ?? []
    )
  }

  internal func makeFinalizedChainsInfoCall(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedChainsInfoInterceptors() ?? []
    )
  }

  internal func makeFinalizedChainInfoUntilHeightCall(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainInfoUntilHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedChainInfoUntilHeightInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Zoneconcierge_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Babylon_Zoneconcierge_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func header(
    _ request: Babylon_Zoneconcierge_V1_QueryHeaderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryHeaderResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.header.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeaderInterceptors() ?? []
    )
  }

  internal func chainList(
    _ request: Babylon_Zoneconcierge_V1_QueryChainListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryChainListResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainListInterceptors() ?? []
    )
  }

  internal func chainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryChainsInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInfoInterceptors() ?? []
    )
  }

  internal func epochChainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.epochChainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochChainsInfoInterceptors() ?? []
    )
  }

  internal func listHeaders(
    _ request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryListHeadersResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listHeaders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHeadersInterceptors() ?? []
    )
  }

  internal func listEpochHeaders(
    _ request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listEpochHeaders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEpochHeadersInterceptors() ?? []
    )
  }

  internal func finalizedChainsInfo(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedChainsInfoInterceptors() ?? []
    )
  }

  internal func finalizedChainInfoUntilHeight(
    _ request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainInfoUntilHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizedChainInfoUntilHeightInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Zoneconcierge_V1_QueryAsyncClient: Babylon_Zoneconcierge_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Zoneconcierge_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryParamsRequest, Babylon_Zoneconcierge_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'header'.
  func makeHeaderInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryHeaderRequest, Babylon_Zoneconcierge_V1_QueryHeaderResponse>]

  /// - Returns: Interceptors to use when invoking 'chainList'.
  func makeChainListInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryChainListRequest, Babylon_Zoneconcierge_V1_QueryChainListResponse>]

  /// - Returns: Interceptors to use when invoking 'chainsInfo'.
  func makeChainsInfoInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'epochChainsInfo'.
  func makeEpochChainsInfoInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'listHeaders'.
  func makeListHeadersInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryListHeadersRequest, Babylon_Zoneconcierge_V1_QueryListHeadersResponse>]

  /// - Returns: Interceptors to use when invoking 'listEpochHeaders'.
  func makeListEpochHeadersInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>]

  /// - Returns: Interceptors to use when invoking 'finalizedChainsInfo'.
  func makeFinalizedChainsInfoInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'finalizedChainInfoUntilHeight'.
  func makeFinalizedChainInfoUntilHeightInterceptors() -> [ClientInterceptor<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>]
}

internal enum Babylon_Zoneconcierge_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.zoneconcierge.v1.Query",
    methods: [
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.params,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.header,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainList,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.chainsInfo,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.epochChainsInfo,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listHeaders,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.listEpochHeaders,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainsInfo,
      Babylon_Zoneconcierge_V1_QueryClientMetadata.Methods.finalizedChainInfoUntilHeight,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.zoneconcierge.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let header = GRPCMethodDescriptor(
      name: "Header",
      path: "/babylon.zoneconcierge.v1.Query/Header",
      type: GRPCCallType.unary
    )

    internal static let chainList = GRPCMethodDescriptor(
      name: "ChainList",
      path: "/babylon.zoneconcierge.v1.Query/ChainList",
      type: GRPCCallType.unary
    )

    internal static let chainsInfo = GRPCMethodDescriptor(
      name: "ChainsInfo",
      path: "/babylon.zoneconcierge.v1.Query/ChainsInfo",
      type: GRPCCallType.unary
    )

    internal static let epochChainsInfo = GRPCMethodDescriptor(
      name: "EpochChainsInfo",
      path: "/babylon.zoneconcierge.v1.Query/EpochChainsInfo",
      type: GRPCCallType.unary
    )

    internal static let listHeaders = GRPCMethodDescriptor(
      name: "ListHeaders",
      path: "/babylon.zoneconcierge.v1.Query/ListHeaders",
      type: GRPCCallType.unary
    )

    internal static let listEpochHeaders = GRPCMethodDescriptor(
      name: "ListEpochHeaders",
      path: "/babylon.zoneconcierge.v1.Query/ListEpochHeaders",
      type: GRPCCallType.unary
    )

    internal static let finalizedChainsInfo = GRPCMethodDescriptor(
      name: "FinalizedChainsInfo",
      path: "/babylon.zoneconcierge.v1.Query/FinalizedChainsInfo",
      type: GRPCCallType.unary
    )

    internal static let finalizedChainInfoUntilHeight = GRPCMethodDescriptor(
      name: "FinalizedChainInfoUntilHeight",
      path: "/babylon.zoneconcierge.v1.Query/FinalizedChainInfoUntilHeight",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Zoneconcierge_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Zoneconcierge_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  func params(request: Babylon_Zoneconcierge_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryParamsResponse>

  /// Header queries the CZ header and fork headers at a given height.
  func header(request: Babylon_Zoneconcierge_V1_QueryHeaderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryHeaderResponse>

  /// ChainList queries the list of chains that checkpoint to Babylon
  func chainList(request: Babylon_Zoneconcierge_V1_QueryChainListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryChainListResponse>

  /// ChainsInfo queries the latest info for a given list of chains in Babylon's view
  func chainsInfo(request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>

  /// EpochChainsInfo queries the latest info for a list of chains
  /// in a given epoch in Babylon's view
  func epochChainsInfo(request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>

  /// ListHeaders queries the headers of a chain in Babylon's view, with
  /// pagination support
  func listHeaders(request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryListHeadersResponse>

  /// ListEpochHeaders queries the headers of a chain timestamped in a given
  /// epoch of Babylon, with pagination support
  func listEpochHeaders(request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>

  /// FinalizedChainsInfo queries the BTC-finalised info of chains with given IDs, with proofs
  func finalizedChainsInfo(request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>

  /// FinalizedChainInfoUntilHeight queries the BTC-finalised info no later than
  /// the provided CZ height, with proofs
  func finalizedChainInfoUntilHeight(request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>
}

extension Babylon_Zoneconcierge_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Zoneconcierge_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Header":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryHeaderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryHeaderResponse>(),
        interceptors: self.interceptors?.makeHeaderInterceptors() ?? [],
        userFunction: self.header(request:context:)
      )

    case "ChainList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryChainListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryChainListResponse>(),
        interceptors: self.interceptors?.makeChainListInterceptors() ?? [],
        userFunction: self.chainList(request:context:)
      )

    case "ChainsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>(),
        interceptors: self.interceptors?.makeChainsInfoInterceptors() ?? [],
        userFunction: self.chainsInfo(request:context:)
      )

    case "EpochChainsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>(),
        interceptors: self.interceptors?.makeEpochChainsInfoInterceptors() ?? [],
        userFunction: self.epochChainsInfo(request:context:)
      )

    case "ListHeaders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryListHeadersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryListHeadersResponse>(),
        interceptors: self.interceptors?.makeListHeadersInterceptors() ?? [],
        userFunction: self.listHeaders(request:context:)
      )

    case "ListEpochHeaders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>(),
        interceptors: self.interceptors?.makeListEpochHeadersInterceptors() ?? [],
        userFunction: self.listEpochHeaders(request:context:)
      )

    case "FinalizedChainsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>(),
        interceptors: self.interceptors?.makeFinalizedChainsInfoInterceptors() ?? [],
        userFunction: self.finalizedChainsInfo(request:context:)
      )

    case "FinalizedChainInfoUntilHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>(),
        interceptors: self.interceptors?.makeFinalizedChainInfoUntilHeightInterceptors() ?? [],
        userFunction: self.finalizedChainInfoUntilHeight(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Zoneconcierge_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Zoneconcierge_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  @Sendable func params(
    request: Babylon_Zoneconcierge_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryParamsResponse

  /// Header queries the CZ header and fork headers at a given height.
  @Sendable func header(
    request: Babylon_Zoneconcierge_V1_QueryHeaderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryHeaderResponse

  /// ChainList queries the list of chains that checkpoint to Babylon
  @Sendable func chainList(
    request: Babylon_Zoneconcierge_V1_QueryChainListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryChainListResponse

  /// ChainsInfo queries the latest info for a given list of chains in Babylon's view
  @Sendable func chainsInfo(
    request: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryChainsInfoResponse

  /// EpochChainsInfo queries the latest info for a list of chains
  /// in a given epoch in Babylon's view
  @Sendable func epochChainsInfo(
    request: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse

  /// ListHeaders queries the headers of a chain in Babylon's view, with
  /// pagination support
  @Sendable func listHeaders(
    request: Babylon_Zoneconcierge_V1_QueryListHeadersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryListHeadersResponse

  /// ListEpochHeaders queries the headers of a chain timestamped in a given
  /// epoch of Babylon, with pagination support
  @Sendable func listEpochHeaders(
    request: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse

  /// FinalizedChainsInfo queries the BTC-finalised info of chains with given IDs, with proofs
  @Sendable func finalizedChainsInfo(
    request: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse

  /// FinalizedChainInfoUntilHeight queries the BTC-finalised info no later than
  /// the provided CZ height, with proofs
  @Sendable func finalizedChainInfoUntilHeight(
    request: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Zoneconcierge_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Zoneconcierge_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Zoneconcierge_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Zoneconcierge_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Header":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryHeaderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryHeaderResponse>(),
        interceptors: self.interceptors?.makeHeaderInterceptors() ?? [],
        wrapping: self.header(request:context:)
      )

    case "ChainList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryChainListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryChainListResponse>(),
        interceptors: self.interceptors?.makeChainListInterceptors() ?? [],
        wrapping: self.chainList(request:context:)
      )

    case "ChainsInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>(),
        interceptors: self.interceptors?.makeChainsInfoInterceptors() ?? [],
        wrapping: self.chainsInfo(request:context:)
      )

    case "EpochChainsInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>(),
        interceptors: self.interceptors?.makeEpochChainsInfoInterceptors() ?? [],
        wrapping: self.epochChainsInfo(request:context:)
      )

    case "ListHeaders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryListHeadersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryListHeadersResponse>(),
        interceptors: self.interceptors?.makeListHeadersInterceptors() ?? [],
        wrapping: self.listHeaders(request:context:)
      )

    case "ListEpochHeaders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>(),
        interceptors: self.interceptors?.makeListEpochHeadersInterceptors() ?? [],
        wrapping: self.listEpochHeaders(request:context:)
      )

    case "FinalizedChainsInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>(),
        interceptors: self.interceptors?.makeFinalizedChainsInfoInterceptors() ?? [],
        wrapping: self.finalizedChainsInfo(request:context:)
      )

    case "FinalizedChainInfoUntilHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>(),
        interceptors: self.interceptors?.makeFinalizedChainInfoUntilHeightInterceptors() ?? [],
        wrapping: self.finalizedChainInfoUntilHeight(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Zoneconcierge_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryParamsRequest, Babylon_Zoneconcierge_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'header'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHeaderInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryHeaderRequest, Babylon_Zoneconcierge_V1_QueryHeaderResponse>]

  /// - Returns: Interceptors to use when handling 'chainList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainListInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryChainListRequest, Babylon_Zoneconcierge_V1_QueryChainListResponse>]

  /// - Returns: Interceptors to use when handling 'chainsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainsInfoInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryChainsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'epochChainsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochChainsInfoInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'listHeaders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListHeadersInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryListHeadersRequest, Babylon_Zoneconcierge_V1_QueryListHeadersResponse>]

  /// - Returns: Interceptors to use when handling 'listEpochHeaders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListEpochHeadersInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse>]

  /// - Returns: Interceptors to use when handling 'finalizedChainsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizedChainsInfoInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'finalizedChainInfoUntilHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizedChainInfoUntilHeightInterceptors() -> [ServerInterceptor<Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse>]
}

internal enum Babylon_Zoneconcierge_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.zoneconcierge.v1.Query",
    methods: [
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.params,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.header,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.chainList,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.chainsInfo,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.epochChainsInfo,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.listHeaders,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.listEpochHeaders,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.finalizedChainsInfo,
      Babylon_Zoneconcierge_V1_QueryServerMetadata.Methods.finalizedChainInfoUntilHeight,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.zoneconcierge.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let header = GRPCMethodDescriptor(
      name: "Header",
      path: "/babylon.zoneconcierge.v1.Query/Header",
      type: GRPCCallType.unary
    )

    internal static let chainList = GRPCMethodDescriptor(
      name: "ChainList",
      path: "/babylon.zoneconcierge.v1.Query/ChainList",
      type: GRPCCallType.unary
    )

    internal static let chainsInfo = GRPCMethodDescriptor(
      name: "ChainsInfo",
      path: "/babylon.zoneconcierge.v1.Query/ChainsInfo",
      type: GRPCCallType.unary
    )

    internal static let epochChainsInfo = GRPCMethodDescriptor(
      name: "EpochChainsInfo",
      path: "/babylon.zoneconcierge.v1.Query/EpochChainsInfo",
      type: GRPCCallType.unary
    )

    internal static let listHeaders = GRPCMethodDescriptor(
      name: "ListHeaders",
      path: "/babylon.zoneconcierge.v1.Query/ListHeaders",
      type: GRPCCallType.unary
    )

    internal static let listEpochHeaders = GRPCMethodDescriptor(
      name: "ListEpochHeaders",
      path: "/babylon.zoneconcierge.v1.Query/ListEpochHeaders",
      type: GRPCCallType.unary
    )

    internal static let finalizedChainsInfo = GRPCMethodDescriptor(
      name: "FinalizedChainsInfo",
      path: "/babylon.zoneconcierge.v1.Query/FinalizedChainsInfo",
      type: GRPCCallType.unary
    )

    internal static let finalizedChainInfoUntilHeight = GRPCMethodDescriptor(
      name: "FinalizedChainInfoUntilHeight",
      path: "/babylon.zoneconcierge.v1.Query/FinalizedChainInfoUntilHeight",
      type: GRPCCallType.unary
    )
  }
}
