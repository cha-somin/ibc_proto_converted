// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_streaming_swap.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_StreamingSwap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txID: String = String()

  var interval: UInt64 = 0

  var quantity: UInt64 = 0

  var count: UInt64 = 0

  var lastHeight: Int64 = 0

  var tradeTarget: String = String()

  var deposit: String = String()

  var `in`: String = String()

  var out: String = String()

  var failedSwaps: [UInt64] = []

  var failedSwapReasons: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_StreamingSwap: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_StreamingSwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamingSwap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tx_id"),
    2: .same(proto: "interval"),
    3: .same(proto: "quantity"),
    4: .same(proto: "count"),
    5: .standard(proto: "last_height"),
    6: .standard(proto: "trade_target"),
    7: .same(proto: "deposit"),
    8: .same(proto: "in"),
    9: .same(proto: "out"),
    10: .standard(proto: "failed_swaps"),
    11: .standard(proto: "failed_swap_reasons"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.txID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.interval) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.quantity) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.count) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastHeight) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.tradeTarget) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.`in`) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.out) }()
      case 10: try { try decoder.decodeRepeatedUInt64Field(value: &self.failedSwaps) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.failedSwapReasons) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txID.isEmpty {
      try visitor.visitSingularStringField(value: self.txID, fieldNumber: 1)
    }
    if self.interval != 0 {
      try visitor.visitSingularUInt64Field(value: self.interval, fieldNumber: 2)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt64Field(value: self.quantity, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt64Field(value: self.count, fieldNumber: 4)
    }
    if self.lastHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.lastHeight, fieldNumber: 5)
    }
    if !self.tradeTarget.isEmpty {
      try visitor.visitSingularStringField(value: self.tradeTarget, fieldNumber: 6)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 7)
    }
    if !self.`in`.isEmpty {
      try visitor.visitSingularStringField(value: self.`in`, fieldNumber: 8)
    }
    if !self.out.isEmpty {
      try visitor.visitSingularStringField(value: self.out, fieldNumber: 9)
    }
    if !self.failedSwaps.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.failedSwaps, fieldNumber: 10)
    }
    if !self.failedSwapReasons.isEmpty {
      try visitor.visitRepeatedStringField(value: self.failedSwapReasons, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_StreamingSwap, rhs: Types_StreamingSwap) -> Bool {
    if lhs.txID != rhs.txID {return false}
    if lhs.interval != rhs.interval {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.count != rhs.count {return false}
    if lhs.lastHeight != rhs.lastHeight {return false}
    if lhs.tradeTarget != rhs.tradeTarget {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.`in` != rhs.`in` {return false}
    if lhs.out != rhs.out {return false}
    if lhs.failedSwaps != rhs.failedSwaps {return false}
    if lhs.failedSwapReasons != rhs.failedSwapReasons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
