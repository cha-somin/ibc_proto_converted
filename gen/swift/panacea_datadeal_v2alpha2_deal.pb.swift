// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/datadeal/v2alpha2/deal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DealStatus enumerates the status of deal.
enum Panacea_Datadeal_V2alpha2_DealStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// DEAL_STATUS_UNSPECIFIED 
  case unspecified // = 0

  /// DEAL_STATUS_ACTIVE defines the deal status that is active.
  case active // = 1

  /// DEAL_STATUS_INACTIVE defines the deal status in the process of deactivate.
  case deactivating // = 2

  /// DEAL_STATUS_DEACTIVATED defines the deal status that is deactivate has been processed.
  case deactivated // = 3

  /// DEAL_STATUS_COMPLETED defines the deal status that is completed.
  case completed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .active
    case 2: self = .deactivating
    case 3: self = .deactivated
    case 4: self = .completed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .active: return 1
    case .deactivating: return 2
    case .deactivated: return 3
    case .completed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Panacea_Datadeal_V2alpha2_DealStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Panacea_Datadeal_V2alpha2_DealStatus] = [
    .unspecified,
    .active,
    .deactivating,
    .deactivated,
    .completed,
  ]
}

#endif  // swift(>=4.2)

/// Deal defines a deal.
struct Panacea_Datadeal_V2alpha2_Deal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var address: String = String()

  var dataSchema: [String] = []

  var budget: Cosmos_Base_V1beta1_Coin {
    get {return _budget ?? Cosmos_Base_V1beta1_Coin()}
    set {_budget = newValue}
  }
  /// Returns true if `budget` has been explicitly set.
  var hasBudget: Bool {return self._budget != nil}
  /// Clears the value of `budget`. Subsequent reads from it will return its default value.
  mutating func clearBudget() {self._budget = nil}

  var maxNumData: UInt64 = 0

  var curNumData: UInt64 = 0

  var buyerAddress: String = String()

  var status: Panacea_Datadeal_V2alpha2_DealStatus = .unspecified

  var nonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _budget: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Datadeal_V2alpha2_DealStatus: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_Deal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.datadeal.v2alpha2"

extension Panacea_Datadeal_V2alpha2_DealStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEAL_STATUS_UNSPECIFIED"),
    1: .same(proto: "DEAL_STATUS_ACTIVE"),
    2: .same(proto: "DEAL_STATUS_DEACTIVATING"),
    3: .same(proto: "DEAL_STATUS_DEACTIVATED"),
    4: .same(proto: "DEAL_STATUS_COMPLETED"),
  ]
}

extension Panacea_Datadeal_V2alpha2_Deal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "address"),
    3: .standard(proto: "data_schema"),
    4: .same(proto: "budget"),
    5: .standard(proto: "max_num_data"),
    6: .standard(proto: "cur_num_data"),
    7: .standard(proto: "buyer_address"),
    8: .same(proto: "status"),
    9: .same(proto: "nonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.dataSchema) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._budget) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.maxNumData) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.curNumData) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.buyerAddress) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if !self.dataSchema.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataSchema, fieldNumber: 3)
    }
    try { if let v = self._budget {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.maxNumData != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxNumData, fieldNumber: 5)
    }
    if self.curNumData != 0 {
      try visitor.visitSingularUInt64Field(value: self.curNumData, fieldNumber: 6)
    }
    if !self.buyerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.buyerAddress, fieldNumber: 7)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 8)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_Deal, rhs: Panacea_Datadeal_V2alpha2_Deal) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.address != rhs.address {return false}
    if lhs.dataSchema != rhs.dataSchema {return false}
    if lhs._budget != rhs._budget {return false}
    if lhs.maxNumData != rhs.maxNumData {return false}
    if lhs.curNumData != rhs.curNumData {return false}
    if lhs.buyerAddress != rhs.buyerAddress {return false}
    if lhs.status != rhs.status {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
