// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: artela/types/v1/indexer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TxResult is the value stored in eth tx indexer
struct Artela_Types_V1_TxResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// height of the blockchain
  var height: Int64 = 0

  /// tx_index of the cosmos transaction
  var txIndex: UInt32 = 0

  /// msg_index in a batch transaction
  var msgIndex: UInt32 = 0

  /// eth_tx_index is the index in the list of valid eth tx in the block,
  /// aka. the transaction list returned by eth_getBlock api.
  var ethTxIndex: Int32 = 0

  /// failed is true if the eth transaction did not go succeed
  var failed: Bool = false

  /// gas_used by the transaction. If it exceeds the block gas limit,
  /// it's set to gas limit, which is what's actually deducted by ante handler.
  var gasUsed: UInt64 = 0

  /// cumulative_gas_used specifies the cumulated amount of gas used for all
  /// processed messages within the current batch transaction.
  var cumulativeGasUsed: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Artela_Types_V1_TxResult: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "artela.types.v1"

extension Artela_Types_V1_TxResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .standard(proto: "tx_index"),
    3: .standard(proto: "msg_index"),
    4: .standard(proto: "eth_tx_index"),
    5: .same(proto: "failed"),
    6: .standard(proto: "gas_used"),
    7: .standard(proto: "cumulative_gas_used"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.txIndex) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.msgIndex) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.ethTxIndex) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.failed) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.gasUsed) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.cumulativeGasUsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    if self.txIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.txIndex, fieldNumber: 2)
    }
    if self.msgIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.msgIndex, fieldNumber: 3)
    }
    if self.ethTxIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.ethTxIndex, fieldNumber: 4)
    }
    if self.failed != false {
      try visitor.visitSingularBoolField(value: self.failed, fieldNumber: 5)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasUsed, fieldNumber: 6)
    }
    if self.cumulativeGasUsed != 0 {
      try visitor.visitSingularUInt64Field(value: self.cumulativeGasUsed, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Artela_Types_V1_TxResult, rhs: Artela_Types_V1_TxResult) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.txIndex != rhs.txIndex {return false}
    if lhs.msgIndex != rhs.msgIndex {return false}
    if lhs.ethTxIndex != rhs.ethTxIndex {return false}
    if lhs.failed != rhs.failed {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.cumulativeGasUsed != rhs.cumulativeGasUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
