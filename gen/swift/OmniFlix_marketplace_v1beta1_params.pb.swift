// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: OmniFlix/marketplace/v1beta1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct OmniFlix_Marketplace_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var saleCommission: String = String()

  var distribution: OmniFlix_Marketplace_V1beta1_Distribution {
    get {return _distribution ?? OmniFlix_Marketplace_V1beta1_Distribution()}
    set {_distribution = newValue}
  }
  /// Returns true if `distribution` has been explicitly set.
  var hasDistribution: Bool {return self._distribution != nil}
  /// Clears the value of `distribution`. Subsequent reads from it will return its default value.
  mutating func clearDistribution() {self._distribution = nil}

  var bidCloseDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _bidCloseDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_bidCloseDuration = newValue}
  }
  /// Returns true if `bidCloseDuration` has been explicitly set.
  var hasBidCloseDuration: Bool {return self._bidCloseDuration != nil}
  /// Clears the value of `bidCloseDuration`. Subsequent reads from it will return its default value.
  mutating func clearBidCloseDuration() {self._bidCloseDuration = nil}

  var maxAuctionDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxAuctionDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxAuctionDuration = newValue}
  }
  /// Returns true if `maxAuctionDuration` has been explicitly set.
  var hasMaxAuctionDuration: Bool {return self._maxAuctionDuration != nil}
  /// Clears the value of `maxAuctionDuration`. Subsequent reads from it will return its default value.
  mutating func clearMaxAuctionDuration() {self._maxAuctionDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _distribution: OmniFlix_Marketplace_V1beta1_Distribution? = nil
  fileprivate var _bidCloseDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _maxAuctionDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct OmniFlix_Marketplace_V1beta1_Distribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var staking: String = String()

  var communityPool: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension OmniFlix_Marketplace_V1beta1_Params: @unchecked Sendable {}
extension OmniFlix_Marketplace_V1beta1_Distribution: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "OmniFlix.marketplace.v1beta1"

extension OmniFlix_Marketplace_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sale_commission"),
    2: .same(proto: "distribution"),
    3: .standard(proto: "bid_close_duration"),
    4: .standard(proto: "max_auction_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.saleCommission) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._distribution) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._bidCloseDuration) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._maxAuctionDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.saleCommission.isEmpty {
      try visitor.visitSingularStringField(value: self.saleCommission, fieldNumber: 1)
    }
    try { if let v = self._distribution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bidCloseDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._maxAuctionDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Marketplace_V1beta1_Params, rhs: OmniFlix_Marketplace_V1beta1_Params) -> Bool {
    if lhs.saleCommission != rhs.saleCommission {return false}
    if lhs._distribution != rhs._distribution {return false}
    if lhs._bidCloseDuration != rhs._bidCloseDuration {return false}
    if lhs._maxAuctionDuration != rhs._maxAuctionDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OmniFlix_Marketplace_V1beta1_Distribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Distribution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "staking"),
    2: .standard(proto: "community_pool"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.staking) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.communityPool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staking.isEmpty {
      try visitor.visitSingularStringField(value: self.staking, fieldNumber: 1)
    }
    if !self.communityPool.isEmpty {
      try visitor.visitSingularStringField(value: self.communityPool, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: OmniFlix_Marketplace_V1beta1_Distribution, rhs: OmniFlix_Marketplace_V1beta1_Distribution) -> Bool {
    if lhs.staking != rhs.staking {return false}
    if lhs.communityPool != rhs.communityPool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
