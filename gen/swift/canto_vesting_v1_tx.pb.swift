// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: canto/vesting/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateClawbackVestingAccount defines a message that enables creating a
/// ClawbackVestingAccount.
struct Canto_Vesting_V1_MsgCreateClawbackVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// from_address specifies the account to provide the funds and sign the
  /// clawback request
  var fromAddress: String = String()

  /// to_address specifies the account to receive the funds
  var toAddress: String = String()

  /// start_time defines the time at which the vesting period begins
  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  /// lockup_periods defines the unlocking schedule relative to the start_time
  var lockupPeriods: [Cosmos_Vesting_V1beta1_Period] = []

  /// vesting_periods defines thevesting schedule relative to the start_time
  var vestingPeriods: [Cosmos_Vesting_V1beta1_Period] = []

  /// merge specifies a the creation mechanism for existing
  /// ClawbackVestingAccounts. If true, merge this new grant into an existing
  /// ClawbackVestingAccount, or create it if it does not exist. If false,
  /// creates a new account. New grants to an existing account must be from the
  /// same from_address.
  var merge: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// MsgCreateClawbackVestingAccountResponse defines the
/// MsgCreateClawbackVestingAccount response type.
struct Canto_Vesting_V1_MsgCreateClawbackVestingAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClawback defines a message that removes unvested tokens from a
/// ClawbackVestingAccount.
struct Canto_Vesting_V1_MsgClawback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// funder_address is the address which funded the account
  var funderAddress: String = String()

  /// account_address is the address of the ClawbackVestingAccount to claw back
  /// from.
  var accountAddress: String = String()

  /// dest_address specifies where the clawed-back tokens should be transferred
  /// to. If empty, the tokens will be transferred back to the original funder of
  /// the account.
  var destAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClawbackResponse defines the MsgClawback response type.
struct Canto_Vesting_V1_MsgClawbackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Canto_Vesting_V1_MsgCreateClawbackVestingAccount: @unchecked Sendable {}
extension Canto_Vesting_V1_MsgCreateClawbackVestingAccountResponse: @unchecked Sendable {}
extension Canto_Vesting_V1_MsgClawback: @unchecked Sendable {}
extension Canto_Vesting_V1_MsgClawbackResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "canto.vesting.v1"

extension Canto_Vesting_V1_MsgCreateClawbackVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateClawbackVestingAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .standard(proto: "start_time"),
    4: .standard(proto: "lockup_periods"),
    5: .standard(proto: "vesting_periods"),
    6: .same(proto: "merge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.lockupPeriods) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.vestingPeriods) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.merge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.lockupPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lockupPeriods, fieldNumber: 4)
    }
    if !self.vestingPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vestingPeriods, fieldNumber: 5)
    }
    if self.merge != false {
      try visitor.visitSingularBoolField(value: self.merge, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Canto_Vesting_V1_MsgCreateClawbackVestingAccount, rhs: Canto_Vesting_V1_MsgCreateClawbackVestingAccount) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.lockupPeriods != rhs.lockupPeriods {return false}
    if lhs.vestingPeriods != rhs.vestingPeriods {return false}
    if lhs.merge != rhs.merge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Canto_Vesting_V1_MsgCreateClawbackVestingAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateClawbackVestingAccountResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Canto_Vesting_V1_MsgCreateClawbackVestingAccountResponse, rhs: Canto_Vesting_V1_MsgCreateClawbackVestingAccountResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Canto_Vesting_V1_MsgClawback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClawback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "funder_address"),
    2: .standard(proto: "account_address"),
    3: .standard(proto: "dest_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.funderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.funderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.funderAddress, fieldNumber: 1)
    }
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 2)
    }
    if !self.destAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.destAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Canto_Vesting_V1_MsgClawback, rhs: Canto_Vesting_V1_MsgClawback) -> Bool {
    if lhs.funderAddress != rhs.funderAddress {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.destAddress != rhs.destAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Canto_Vesting_V1_MsgClawbackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClawbackResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Canto_Vesting_V1_MsgClawbackResponse, rhs: Canto_Vesting_V1_MsgClawbackResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
