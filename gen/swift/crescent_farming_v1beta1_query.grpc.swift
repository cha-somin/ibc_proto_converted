//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/farming/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC query service for the farming module.
///
/// Usage: instantiate `Crescent_Farming_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Farming_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Crescent_Farming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryParamsRequest, Crescent_Farming_V1beta1_QueryParamsResponse>

  func plans(
    _ request: Crescent_Farming_V1beta1_QueryPlansRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryPlansRequest, Crescent_Farming_V1beta1_QueryPlansResponse>

  func plan(
    _ request: Crescent_Farming_V1beta1_QueryPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryPlanRequest, Crescent_Farming_V1beta1_QueryPlanResponse>

  func position(
    _ request: Crescent_Farming_V1beta1_QueryPositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryPositionRequest, Crescent_Farming_V1beta1_QueryPositionResponse>

  func stakings(
    _ request: Crescent_Farming_V1beta1_QueryStakingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryStakingsRequest, Crescent_Farming_V1beta1_QueryStakingsResponse>

  func queuedStakings(
    _ request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>

  func totalStakings(
    _ request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryTotalStakingsRequest, Crescent_Farming_V1beta1_QueryTotalStakingsResponse>

  func rewards(
    _ request: Crescent_Farming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryRewardsRequest, Crescent_Farming_V1beta1_QueryRewardsResponse>

  func unharvestedRewards(
    _ request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>

  func currentEpochDays(
    _ request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>

  func historicalRewards(
    _ request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>
}

extension Crescent_Farming_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "crescent.farming.v1beta1.Query"
  }

  /// Params returns parameters of the farming module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Crescent_Farming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryParamsRequest, Crescent_Farming_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Plans returns all plans.
  ///
  /// - Parameters:
  ///   - request: Request to send to Plans.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func plans(
    _ request: Crescent_Farming_V1beta1_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryPlansRequest, Crescent_Farming_V1beta1_QueryPlansResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlansInterceptors() ?? []
    )
  }

  /// Plan returns a specific plan.
  ///
  /// - Parameters:
  ///   - request: Request to send to Plan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func plan(
    _ request: Crescent_Farming_V1beta1_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryPlanRequest, Crescent_Farming_V1beta1_QueryPlanResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlanInterceptors() ?? []
    )
  }

  /// Unary call to Position
  ///
  /// - Parameters:
  ///   - request: Request to send to Position.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func position(
    _ request: Crescent_Farming_V1beta1_QueryPositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryPositionRequest, Crescent_Farming_V1beta1_QueryPositionResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.position.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionInterceptors() ?? []
    )
  }

  /// Stakings returns all stakings by a farmer.
  ///
  /// - Parameters:
  ///   - request: Request to send to Stakings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakings(
    _ request: Crescent_Farming_V1beta1_QueryStakingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryStakingsRequest, Crescent_Farming_V1beta1_QueryStakingsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.stakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakingsInterceptors() ?? []
    )
  }

  /// QueryStakings returns all queued stakings by a farmer.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueuedStakings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queuedStakings(
    _ request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, Crescent_Farming_V1beta1_QueryQueuedStakingsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.queuedStakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueuedStakingsInterceptors() ?? []
    )
  }

  /// TotalStakings returns total staking amount for a staking coin denom
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalStakings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalStakings(
    _ request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryTotalStakingsRequest, Crescent_Farming_V1beta1_QueryTotalStakingsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.totalStakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalStakingsInterceptors() ?? []
    )
  }

  /// Rewards returns rewards for a farmer
  ///
  /// - Parameters:
  ///   - request: Request to send to Rewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewards(
    _ request: Crescent_Farming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryRewardsRequest, Crescent_Farming_V1beta1_QueryRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }

  /// UnharvestedRewards returns unharvested rewards for a farmer
  ///
  /// - Parameters:
  ///   - request: Request to send to UnharvestedRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unharvestedRewards(
    _ request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.unharvestedRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnharvestedRewardsInterceptors() ?? []
    )
  }

  /// CurrentEpochDays returns current epoch days.
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentEpochDays.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentEpochDays(
    _ request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.currentEpochDays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentEpochDaysInterceptors() ?? []
    )
  }

  /// HistoricalRewards returns HistoricalRewards records for a staking coin denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to HistoricalRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func historicalRewards(
    _ request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.historicalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Crescent_Farming_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Crescent_Farming_V1beta1_QueryNIOClient")
internal final class Crescent_Farming_V1beta1_QueryClient: Crescent_Farming_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the crescent.farming.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Crescent_Farming_V1beta1_QueryNIOClient: Crescent_Farming_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.farming.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC query service for the farming module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Farming_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Crescent_Farming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryParamsRequest, Crescent_Farming_V1beta1_QueryParamsResponse>

  func makePlansCall(
    _ request: Crescent_Farming_V1beta1_QueryPlansRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryPlansRequest, Crescent_Farming_V1beta1_QueryPlansResponse>

  func makePlanCall(
    _ request: Crescent_Farming_V1beta1_QueryPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryPlanRequest, Crescent_Farming_V1beta1_QueryPlanResponse>

  func makePositionCall(
    _ request: Crescent_Farming_V1beta1_QueryPositionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryPositionRequest, Crescent_Farming_V1beta1_QueryPositionResponse>

  func makeStakingsCall(
    _ request: Crescent_Farming_V1beta1_QueryStakingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryStakingsRequest, Crescent_Farming_V1beta1_QueryStakingsResponse>

  func makeQueuedStakingsCall(
    _ request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>

  func makeTotalStakingsCall(
    _ request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryTotalStakingsRequest, Crescent_Farming_V1beta1_QueryTotalStakingsResponse>

  func makeRewardsCall(
    _ request: Crescent_Farming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryRewardsRequest, Crescent_Farming_V1beta1_QueryRewardsResponse>

  func makeUnharvestedRewardsCall(
    _ request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>

  func makeCurrentEpochDaysCall(
    _ request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>

  func makeHistoricalRewardsCall(
    _ request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Farming_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Farming_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Crescent_Farming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryParamsRequest, Crescent_Farming_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makePlansCall(
    _ request: Crescent_Farming_V1beta1_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryPlansRequest, Crescent_Farming_V1beta1_QueryPlansResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlansInterceptors() ?? []
    )
  }

  internal func makePlanCall(
    _ request: Crescent_Farming_V1beta1_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryPlanRequest, Crescent_Farming_V1beta1_QueryPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlanInterceptors() ?? []
    )
  }

  internal func makePositionCall(
    _ request: Crescent_Farming_V1beta1_QueryPositionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryPositionRequest, Crescent_Farming_V1beta1_QueryPositionResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.position.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionInterceptors() ?? []
    )
  }

  internal func makeStakingsCall(
    _ request: Crescent_Farming_V1beta1_QueryStakingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryStakingsRequest, Crescent_Farming_V1beta1_QueryStakingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.stakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakingsInterceptors() ?? []
    )
  }

  internal func makeQueuedStakingsCall(
    _ request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, Crescent_Farming_V1beta1_QueryQueuedStakingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.queuedStakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueuedStakingsInterceptors() ?? []
    )
  }

  internal func makeTotalStakingsCall(
    _ request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryTotalStakingsRequest, Crescent_Farming_V1beta1_QueryTotalStakingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.totalStakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalStakingsInterceptors() ?? []
    )
  }

  internal func makeRewardsCall(
    _ request: Crescent_Farming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryRewardsRequest, Crescent_Farming_V1beta1_QueryRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }

  internal func makeUnharvestedRewardsCall(
    _ request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.unharvestedRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnharvestedRewardsInterceptors() ?? []
    )
  }

  internal func makeCurrentEpochDaysCall(
    _ request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.currentEpochDays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentEpochDaysInterceptors() ?? []
    )
  }

  internal func makeHistoricalRewardsCall(
    _ request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.historicalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Farming_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Crescent_Farming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func plans(
    _ request: Crescent_Farming_V1beta1_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryPlansResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlansInterceptors() ?? []
    )
  }

  internal func plan(
    _ request: Crescent_Farming_V1beta1_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlanInterceptors() ?? []
    )
  }

  internal func position(
    _ request: Crescent_Farming_V1beta1_QueryPositionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryPositionResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.position.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionInterceptors() ?? []
    )
  }

  internal func stakings(
    _ request: Crescent_Farming_V1beta1_QueryStakingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryStakingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.stakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakingsInterceptors() ?? []
    )
  }

  internal func queuedStakings(
    _ request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryQueuedStakingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.queuedStakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueuedStakingsInterceptors() ?? []
    )
  }

  internal func totalStakings(
    _ request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryTotalStakingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.totalStakings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalStakingsInterceptors() ?? []
    )
  }

  internal func rewards(
    _ request: Crescent_Farming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }

  internal func unharvestedRewards(
    _ request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.unharvestedRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnharvestedRewardsInterceptors() ?? []
    )
  }

  internal func currentEpochDays(
    _ request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.currentEpochDays.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentEpochDaysInterceptors() ?? []
    )
  }

  internal func historicalRewards(
    _ request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Farming_V1beta1_QueryClientMetadata.Methods.historicalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Crescent_Farming_V1beta1_QueryAsyncClient: Crescent_Farming_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Crescent_Farming_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryParamsRequest, Crescent_Farming_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'plans'.
  func makePlansInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryPlansRequest, Crescent_Farming_V1beta1_QueryPlansResponse>]

  /// - Returns: Interceptors to use when invoking 'plan'.
  func makePlanInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryPlanRequest, Crescent_Farming_V1beta1_QueryPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'position'.
  func makePositionInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryPositionRequest, Crescent_Farming_V1beta1_QueryPositionResponse>]

  /// - Returns: Interceptors to use when invoking 'stakings'.
  func makeStakingsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryStakingsRequest, Crescent_Farming_V1beta1_QueryStakingsResponse>]

  /// - Returns: Interceptors to use when invoking 'queuedStakings'.
  func makeQueuedStakingsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalStakings'.
  func makeTotalStakingsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryTotalStakingsRequest, Crescent_Farming_V1beta1_QueryTotalStakingsResponse>]

  /// - Returns: Interceptors to use when invoking 'rewards'.
  func makeRewardsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryRewardsRequest, Crescent_Farming_V1beta1_QueryRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'unharvestedRewards'.
  func makeUnharvestedRewardsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'currentEpochDays'.
  func makeCurrentEpochDaysInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>]

  /// - Returns: Interceptors to use when invoking 'historicalRewards'.
  func makeHistoricalRewardsInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>]
}

internal enum Crescent_Farming_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.farming.v1beta1.Query",
    methods: [
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.params,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plans,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.plan,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.position,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.stakings,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.queuedStakings,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.totalStakings,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.rewards,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.unharvestedRewards,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.currentEpochDays,
      Crescent_Farming_V1beta1_QueryClientMetadata.Methods.historicalRewards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.farming.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let plans = GRPCMethodDescriptor(
      name: "Plans",
      path: "/crescent.farming.v1beta1.Query/Plans",
      type: GRPCCallType.unary
    )

    internal static let plan = GRPCMethodDescriptor(
      name: "Plan",
      path: "/crescent.farming.v1beta1.Query/Plan",
      type: GRPCCallType.unary
    )

    internal static let position = GRPCMethodDescriptor(
      name: "Position",
      path: "/crescent.farming.v1beta1.Query/Position",
      type: GRPCCallType.unary
    )

    internal static let stakings = GRPCMethodDescriptor(
      name: "Stakings",
      path: "/crescent.farming.v1beta1.Query/Stakings",
      type: GRPCCallType.unary
    )

    internal static let queuedStakings = GRPCMethodDescriptor(
      name: "QueuedStakings",
      path: "/crescent.farming.v1beta1.Query/QueuedStakings",
      type: GRPCCallType.unary
    )

    internal static let totalStakings = GRPCMethodDescriptor(
      name: "TotalStakings",
      path: "/crescent.farming.v1beta1.Query/TotalStakings",
      type: GRPCCallType.unary
    )

    internal static let rewards = GRPCMethodDescriptor(
      name: "Rewards",
      path: "/crescent.farming.v1beta1.Query/Rewards",
      type: GRPCCallType.unary
    )

    internal static let unharvestedRewards = GRPCMethodDescriptor(
      name: "UnharvestedRewards",
      path: "/crescent.farming.v1beta1.Query/UnharvestedRewards",
      type: GRPCCallType.unary
    )

    internal static let currentEpochDays = GRPCMethodDescriptor(
      name: "CurrentEpochDays",
      path: "/crescent.farming.v1beta1.Query/CurrentEpochDays",
      type: GRPCCallType.unary
    )

    internal static let historicalRewards = GRPCMethodDescriptor(
      name: "HistoricalRewards",
      path: "/crescent.farming.v1beta1.Query/HistoricalRewards",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC query service for the farming module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Farming_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Crescent_Farming_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns parameters of the farming module.
  func params(request: Crescent_Farming_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryParamsResponse>

  /// Plans returns all plans.
  func plans(request: Crescent_Farming_V1beta1_QueryPlansRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryPlansResponse>

  /// Plan returns a specific plan.
  func plan(request: Crescent_Farming_V1beta1_QueryPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryPlanResponse>

  func position(request: Crescent_Farming_V1beta1_QueryPositionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryPositionResponse>

  /// Stakings returns all stakings by a farmer.
  func stakings(request: Crescent_Farming_V1beta1_QueryStakingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryStakingsResponse>

  /// QueryStakings returns all queued stakings by a farmer.
  func queuedStakings(request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>

  /// TotalStakings returns total staking amount for a staking coin denom
  func totalStakings(request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryTotalStakingsResponse>

  /// Rewards returns rewards for a farmer
  func rewards(request: Crescent_Farming_V1beta1_QueryRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryRewardsResponse>

  /// UnharvestedRewards returns unharvested rewards for a farmer
  func unharvestedRewards(request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>

  /// CurrentEpochDays returns current epoch days.
  func currentEpochDays(request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>

  /// HistoricalRewards returns HistoricalRewards records for a staking coin denom.
  func historicalRewards(request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>
}

extension Crescent_Farming_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Crescent_Farming_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Plans":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryPlansRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryPlansResponse>(),
        interceptors: self.interceptors?.makePlansInterceptors() ?? [],
        userFunction: self.plans(request:context:)
      )

    case "Plan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryPlanRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryPlanResponse>(),
        interceptors: self.interceptors?.makePlanInterceptors() ?? [],
        userFunction: self.plan(request:context:)
      )

    case "Position":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryPositionRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryPositionResponse>(),
        interceptors: self.interceptors?.makePositionInterceptors() ?? [],
        userFunction: self.position(request:context:)
      )

    case "Stakings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryStakingsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryStakingsResponse>(),
        interceptors: self.interceptors?.makeStakingsInterceptors() ?? [],
        userFunction: self.stakings(request:context:)
      )

    case "QueuedStakings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>(),
        interceptors: self.interceptors?.makeQueuedStakingsInterceptors() ?? [],
        userFunction: self.queuedStakings(request:context:)
      )

    case "TotalStakings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryTotalStakingsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryTotalStakingsResponse>(),
        interceptors: self.interceptors?.makeTotalStakingsInterceptors() ?? [],
        userFunction: self.totalStakings(request:context:)
      )

    case "Rewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeRewardsInterceptors() ?? [],
        userFunction: self.rewards(request:context:)
      )

    case "UnharvestedRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>(),
        interceptors: self.interceptors?.makeUnharvestedRewardsInterceptors() ?? [],
        userFunction: self.unharvestedRewards(request:context:)
      )

    case "CurrentEpochDays":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>(),
        interceptors: self.interceptors?.makeCurrentEpochDaysInterceptors() ?? [],
        userFunction: self.currentEpochDays(request:context:)
      )

    case "HistoricalRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>(),
        interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? [],
        userFunction: self.historicalRewards(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC query service for the farming module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Farming_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Farming_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns parameters of the farming module.
  @Sendable func params(
    request: Crescent_Farming_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryParamsResponse

  /// Plans returns all plans.
  @Sendable func plans(
    request: Crescent_Farming_V1beta1_QueryPlansRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryPlansResponse

  /// Plan returns a specific plan.
  @Sendable func plan(
    request: Crescent_Farming_V1beta1_QueryPlanRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryPlanResponse

  @Sendable func position(
    request: Crescent_Farming_V1beta1_QueryPositionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryPositionResponse

  /// Stakings returns all stakings by a farmer.
  @Sendable func stakings(
    request: Crescent_Farming_V1beta1_QueryStakingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryStakingsResponse

  /// QueryStakings returns all queued stakings by a farmer.
  @Sendable func queuedStakings(
    request: Crescent_Farming_V1beta1_QueryQueuedStakingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryQueuedStakingsResponse

  /// TotalStakings returns total staking amount for a staking coin denom
  @Sendable func totalStakings(
    request: Crescent_Farming_V1beta1_QueryTotalStakingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryTotalStakingsResponse

  /// Rewards returns rewards for a farmer
  @Sendable func rewards(
    request: Crescent_Farming_V1beta1_QueryRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryRewardsResponse

  /// UnharvestedRewards returns unharvested rewards for a farmer
  @Sendable func unharvestedRewards(
    request: Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse

  /// CurrentEpochDays returns current epoch days.
  @Sendable func currentEpochDays(
    request: Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse

  /// HistoricalRewards returns HistoricalRewards records for a staking coin denom.
  @Sendable func historicalRewards(
    request: Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Farming_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Farming_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Crescent_Farming_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Crescent_Farming_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Plans":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryPlansRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryPlansResponse>(),
        interceptors: self.interceptors?.makePlansInterceptors() ?? [],
        wrapping: self.plans(request:context:)
      )

    case "Plan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryPlanRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryPlanResponse>(),
        interceptors: self.interceptors?.makePlanInterceptors() ?? [],
        wrapping: self.plan(request:context:)
      )

    case "Position":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryPositionRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryPositionResponse>(),
        interceptors: self.interceptors?.makePositionInterceptors() ?? [],
        wrapping: self.position(request:context:)
      )

    case "Stakings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryStakingsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryStakingsResponse>(),
        interceptors: self.interceptors?.makeStakingsInterceptors() ?? [],
        wrapping: self.stakings(request:context:)
      )

    case "QueuedStakings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>(),
        interceptors: self.interceptors?.makeQueuedStakingsInterceptors() ?? [],
        wrapping: self.queuedStakings(request:context:)
      )

    case "TotalStakings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryTotalStakingsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryTotalStakingsResponse>(),
        interceptors: self.interceptors?.makeTotalStakingsInterceptors() ?? [],
        wrapping: self.totalStakings(request:context:)
      )

    case "Rewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeRewardsInterceptors() ?? [],
        wrapping: self.rewards(request:context:)
      )

    case "UnharvestedRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>(),
        interceptors: self.interceptors?.makeUnharvestedRewardsInterceptors() ?? [],
        wrapping: self.unharvestedRewards(request:context:)
      )

    case "CurrentEpochDays":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>(),
        interceptors: self.interceptors?.makeCurrentEpochDaysInterceptors() ?? [],
        wrapping: self.currentEpochDays(request:context:)
      )

    case "HistoricalRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>(),
        interceptors: self.interceptors?.makeHistoricalRewardsInterceptors() ?? [],
        wrapping: self.historicalRewards(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Farming_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryParamsRequest, Crescent_Farming_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'plans'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlansInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryPlansRequest, Crescent_Farming_V1beta1_QueryPlansResponse>]

  /// - Returns: Interceptors to use when handling 'plan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlanInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryPlanRequest, Crescent_Farming_V1beta1_QueryPlanResponse>]

  /// - Returns: Interceptors to use when handling 'position'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePositionInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryPositionRequest, Crescent_Farming_V1beta1_QueryPositionResponse>]

  /// - Returns: Interceptors to use when handling 'stakings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakingsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryStakingsRequest, Crescent_Farming_V1beta1_QueryStakingsResponse>]

  /// - Returns: Interceptors to use when handling 'queuedStakings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueuedStakingsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryQueuedStakingsRequest, Crescent_Farming_V1beta1_QueryQueuedStakingsResponse>]

  /// - Returns: Interceptors to use when handling 'totalStakings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalStakingsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryTotalStakingsRequest, Crescent_Farming_V1beta1_QueryTotalStakingsResponse>]

  /// - Returns: Interceptors to use when handling 'rewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryRewardsRequest, Crescent_Farming_V1beta1_QueryRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'unharvestedRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnharvestedRewardsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryUnharvestedRewardsRequest, Crescent_Farming_V1beta1_QueryUnharvestedRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'currentEpochDays'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentEpochDaysInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryCurrentEpochDaysRequest, Crescent_Farming_V1beta1_QueryCurrentEpochDaysResponse>]

  /// - Returns: Interceptors to use when handling 'historicalRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHistoricalRewardsInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_QueryHistoricalRewardsRequest, Crescent_Farming_V1beta1_QueryHistoricalRewardsResponse>]
}

internal enum Crescent_Farming_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.farming.v1beta1.Query",
    methods: [
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.params,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.plans,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.plan,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.position,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.stakings,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.queuedStakings,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.totalStakings,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.rewards,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.unharvestedRewards,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.currentEpochDays,
      Crescent_Farming_V1beta1_QueryServerMetadata.Methods.historicalRewards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.farming.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let plans = GRPCMethodDescriptor(
      name: "Plans",
      path: "/crescent.farming.v1beta1.Query/Plans",
      type: GRPCCallType.unary
    )

    internal static let plan = GRPCMethodDescriptor(
      name: "Plan",
      path: "/crescent.farming.v1beta1.Query/Plan",
      type: GRPCCallType.unary
    )

    internal static let position = GRPCMethodDescriptor(
      name: "Position",
      path: "/crescent.farming.v1beta1.Query/Position",
      type: GRPCCallType.unary
    )

    internal static let stakings = GRPCMethodDescriptor(
      name: "Stakings",
      path: "/crescent.farming.v1beta1.Query/Stakings",
      type: GRPCCallType.unary
    )

    internal static let queuedStakings = GRPCMethodDescriptor(
      name: "QueuedStakings",
      path: "/crescent.farming.v1beta1.Query/QueuedStakings",
      type: GRPCCallType.unary
    )

    internal static let totalStakings = GRPCMethodDescriptor(
      name: "TotalStakings",
      path: "/crescent.farming.v1beta1.Query/TotalStakings",
      type: GRPCCallType.unary
    )

    internal static let rewards = GRPCMethodDescriptor(
      name: "Rewards",
      path: "/crescent.farming.v1beta1.Query/Rewards",
      type: GRPCCallType.unary
    )

    internal static let unharvestedRewards = GRPCMethodDescriptor(
      name: "UnharvestedRewards",
      path: "/crescent.farming.v1beta1.Query/UnharvestedRewards",
      type: GRPCCallType.unary
    )

    internal static let currentEpochDays = GRPCMethodDescriptor(
      name: "CurrentEpochDays",
      path: "/crescent.farming.v1beta1.Query/CurrentEpochDays",
      type: GRPCCallType.unary
    )

    internal static let historicalRewards = GRPCMethodDescriptor(
      name: "HistoricalRewards",
      path: "/crescent.farming.v1beta1.Query/HistoricalRewards",
      type: GRPCCallType.unary
    )
  }
}
