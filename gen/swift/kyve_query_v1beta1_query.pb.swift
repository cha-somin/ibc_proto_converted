// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/query/v1beta1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BasicPool contains the necessary properties need for a pool
/// to be displayed in the UI
struct Kyve_Query_V1beta1_BasicPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the ID of the pool
  var id: UInt64 = 0

  /// name of the pool
  var name: String = String()

  /// runtime for the protocol nodes
  /// like evm, bitcoin, etc.
  var runtime: String = String()

  /// logo of the pool
  var logo: String = String()

  /// operating_cost is the base payout for each bundle reward
  var operatingCost: UInt64 = 0

  /// upload_interval is the interval bundles get created
  var uploadInterval: UInt64 = 0

  /// total_funds of the pool. If the pool runs
  /// out of funds no more bundles will be produced
  var totalFunds: UInt64 = 0

  /// total_delegation of the pool
  var totalDelegation: UInt64 = 0

  /// status of the pool if pool is able
  /// to produce bundles, etc.
  var status: Kyve_Pool_V1beta1_PoolStatus = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// FullStaker aggregates information from the staker and its delegators
/// as well as pending queue entries into one object.
/// It contains almost all needed information for a convenient usage
struct Kyve_Query_V1beta1_FullStaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of the staker
  var address: String = String()

  /// metadata as logo, moniker, etc.
  var metadata: Kyve_Query_V1beta1_StakerMetadata {
    get {return _metadata ?? Kyve_Query_V1beta1_StakerMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  /// amount the staker has delegated to himself
  var selfDelegation: UInt64 = 0

  /// unbonding_amount is the amount the staker is currently unbonding
  /// from the self-delegation.
  /// This amount can be larger than `amount` when the staker
  /// got slashed during unbonding. However, at the end of
  /// the unbonding period this amount is double checked with the
  /// remaining amount.
  var selfDelegationUnbonding: UInt64 = 0

  /// total_delegation returns the sum of all $KYVE users
  /// have delegated to this staker
  var totalDelegation: UInt64 = 0

  /// delegator_count is the total number of individual
  /// delegator addresses for that user.
  var delegatorCount: UInt64 = 0

  /// pools is a list of all pools the staker is currently
  /// participating, i.e. allowed to vote and upload data.
  var pools: [Kyve_Query_V1beta1_PoolMembership] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _metadata: Kyve_Query_V1beta1_StakerMetadata? = nil
}

/// StakerMetadata contains static information for a staker
struct Kyve_Query_V1beta1_StakerMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// commission is the percentage of the rewards that will
  /// get transferred to the staker before the remaining
  /// rewards are split across all delegators
  var commission: String = String()

  /// moniker is a human-readable name for displaying
  /// the staker in the UI
  var moniker: String = String()

  /// website is a https-link to the website of the staker
  var website: String = String()

  /// identity from keybase.io
  var identity: String = String()

  /// security_contact ...
  var securityContact: String = String()

  /// details ...
  var details: String = String()

  /// pending_commission_change shows if the staker plans
  /// to change its commission. Delegators will see a warning in
  /// the UI. A Commission change takes some time until
  /// the commission is applied. Users have time to redelegate
  /// if they not agree with the new commission.
  var pendingCommissionChange: Kyve_Query_V1beta1_CommissionChangeEntry {
    get {return _pendingCommissionChange ?? Kyve_Query_V1beta1_CommissionChangeEntry()}
    set {_pendingCommissionChange = newValue}
  }
  /// Returns true if `pendingCommissionChange` has been explicitly set.
  var hasPendingCommissionChange: Bool {return self._pendingCommissionChange != nil}
  /// Clears the value of `pendingCommissionChange`. Subsequent reads from it will return its default value.
  mutating func clearPendingCommissionChange() {self._pendingCommissionChange = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pendingCommissionChange: Kyve_Query_V1beta1_CommissionChangeEntry? = nil
}

/// CommissionChangeEntry shows when the old commission
/// of a staker will change to the new commission
struct Kyve_Query_V1beta1_CommissionChangeEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// commission is the new commission that will
  /// become active once the change-time is over
  var commission: String = String()

  /// creation_date is the UNIX-timestamp (in seconds)
  /// of when the entry was created.
  var creationDate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PoolMembership shows in which pool the staker
/// is participating
struct Kyve_Query_V1beta1_PoolMembership {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool contains useful information about the pool
  var pool: Kyve_Query_V1beta1_BasicPool {
    get {return _pool ?? Kyve_Query_V1beta1_BasicPool()}
    set {_pool = newValue}
  }
  /// Returns true if `pool` has been explicitly set.
  var hasPool: Bool {return self._pool != nil}
  /// Clears the value of `pool`. Subsequent reads from it will return its default value.
  mutating func clearPool() {self._pool = nil}

  /// points indicates if the staker is inactive
  /// If the staker misses a vote, a point is added.
  /// After 5 points the staker is removed from
  /// the stakers set.
  var points: UInt64 = 0

  /// is_leaving indicates if a user has scheduled a
  /// a PoolLeave entry. After the leave-time is over
  /// the staker will no longer participate in that pool
  var isLeaving: Bool = false

  /// Valaddress is the address which is authorized to vote
  /// and submit bundles. If the server gets compromised
  /// the staker can just change the valaddress.
  var valaddress: String = String()

  /// balance is the valaddress account balance and indicates
  /// whether or not the valaccount needs additional funds to
  /// pay for gas fees
  var balance: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pool: Kyve_Query_V1beta1_BasicPool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Query_V1beta1_BasicPool: @unchecked Sendable {}
extension Kyve_Query_V1beta1_FullStaker: @unchecked Sendable {}
extension Kyve_Query_V1beta1_StakerMetadata: @unchecked Sendable {}
extension Kyve_Query_V1beta1_CommissionChangeEntry: @unchecked Sendable {}
extension Kyve_Query_V1beta1_PoolMembership: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.query.v1beta1"

extension Kyve_Query_V1beta1_BasicPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BasicPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "runtime"),
    4: .same(proto: "logo"),
    5: .standard(proto: "operating_cost"),
    6: .standard(proto: "upload_interval"),
    7: .standard(proto: "total_funds"),
    8: .standard(proto: "total_delegation"),
    9: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.logo) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.operatingCost) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.uploadInterval) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.totalFunds) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.totalDelegation) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 3)
    }
    if !self.logo.isEmpty {
      try visitor.visitSingularStringField(value: self.logo, fieldNumber: 4)
    }
    if self.operatingCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.operatingCost, fieldNumber: 5)
    }
    if self.uploadInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.uploadInterval, fieldNumber: 6)
    }
    if self.totalFunds != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalFunds, fieldNumber: 7)
    }
    if self.totalDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalDelegation, fieldNumber: 8)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_BasicPool, rhs: Kyve_Query_V1beta1_BasicPool) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs.logo != rhs.logo {return false}
    if lhs.operatingCost != rhs.operatingCost {return false}
    if lhs.uploadInterval != rhs.uploadInterval {return false}
    if lhs.totalFunds != rhs.totalFunds {return false}
    if lhs.totalDelegation != rhs.totalDelegation {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_FullStaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FullStaker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "metadata"),
    3: .standard(proto: "self_delegation"),
    4: .standard(proto: "self_delegation_unbonding"),
    5: .standard(proto: "total_delegation"),
    6: .standard(proto: "delegator_count"),
    7: .same(proto: "pools"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.selfDelegation) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.selfDelegationUnbonding) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.totalDelegation) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.delegatorCount) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.pools) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.selfDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.selfDelegation, fieldNumber: 3)
    }
    if self.selfDelegationUnbonding != 0 {
      try visitor.visitSingularUInt64Field(value: self.selfDelegationUnbonding, fieldNumber: 4)
    }
    if self.totalDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalDelegation, fieldNumber: 5)
    }
    if self.delegatorCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.delegatorCount, fieldNumber: 6)
    }
    if !self.pools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pools, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_FullStaker, rhs: Kyve_Query_V1beta1_FullStaker) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.selfDelegation != rhs.selfDelegation {return false}
    if lhs.selfDelegationUnbonding != rhs.selfDelegationUnbonding {return false}
    if lhs.totalDelegation != rhs.totalDelegation {return false}
    if lhs.delegatorCount != rhs.delegatorCount {return false}
    if lhs.pools != rhs.pools {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_StakerMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StakerMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commission"),
    2: .same(proto: "moniker"),
    3: .same(proto: "website"),
    4: .same(proto: "identity"),
    5: .standard(proto: "security_contact"),
    6: .same(proto: "details"),
    7: .standard(proto: "pending_commission_change"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.website) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.securityContact) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.details) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._pendingCommissionChange) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 1)
    }
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 2)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 3)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 4)
    }
    if !self.securityContact.isEmpty {
      try visitor.visitSingularStringField(value: self.securityContact, fieldNumber: 5)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 6)
    }
    try { if let v = self._pendingCommissionChange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_StakerMetadata, rhs: Kyve_Query_V1beta1_StakerMetadata) -> Bool {
    if lhs.commission != rhs.commission {return false}
    if lhs.moniker != rhs.moniker {return false}
    if lhs.website != rhs.website {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.securityContact != rhs.securityContact {return false}
    if lhs.details != rhs.details {return false}
    if lhs._pendingCommissionChange != rhs._pendingCommissionChange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_CommissionChangeEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommissionChangeEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commission"),
    2: .standard(proto: "creation_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.creationDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 1)
    }
    if self.creationDate != 0 {
      try visitor.visitSingularInt64Field(value: self.creationDate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_CommissionChangeEntry, rhs: Kyve_Query_V1beta1_CommissionChangeEntry) -> Bool {
    if lhs.commission != rhs.commission {return false}
    if lhs.creationDate != rhs.creationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Query_V1beta1_PoolMembership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolMembership"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pool"),
    2: .same(proto: "points"),
    3: .standard(proto: "is_leaving"),
    4: .same(proto: "valaddress"),
    5: .same(proto: "balance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pool) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.points) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isLeaving) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.valaddress) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.balance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pool {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.points != 0 {
      try visitor.visitSingularUInt64Field(value: self.points, fieldNumber: 2)
    }
    if self.isLeaving != false {
      try visitor.visitSingularBoolField(value: self.isLeaving, fieldNumber: 3)
    }
    if !self.valaddress.isEmpty {
      try visitor.visitSingularStringField(value: self.valaddress, fieldNumber: 4)
    }
    if self.balance != 0 {
      try visitor.visitSingularUInt64Field(value: self.balance, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Query_V1beta1_PoolMembership, rhs: Kyve_Query_V1beta1_PoolMembership) -> Bool {
    if lhs._pool != rhs._pool {return false}
    if lhs.points != rhs.points {return false}
    if lhs.isLeaving != rhs.isLeaving {return false}
    if lhs.valaddress != rhs.valaddress {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
