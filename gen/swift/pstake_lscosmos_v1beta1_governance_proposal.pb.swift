// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pstake/lscosmos/v1beta1/governance_proposal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pstake_Lscosmos_V1beta1_MinDepositAndFeeChangeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var minDeposit: String = String()

  var pstakeDepositFee: String = String()

  var pstakeRestakeFee: String = String()

  var pstakeUnstakeFee: String = String()

  var pstakeRedemptionFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_PstakeFeeAddressChangeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var pstakeFeeAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_AllowListedValidatorSetChangeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var allowListedValidators: Pstake_Lscosmos_V1beta1_AllowListedValidators {
    get {return _allowListedValidators ?? Pstake_Lscosmos_V1beta1_AllowListedValidators()}
    set {_allowListedValidators = newValue}
  }
  /// Returns true if `allowListedValidators` has been explicitly set.
  var hasAllowListedValidators: Bool {return self._allowListedValidators != nil}
  /// Clears the value of `allowListedValidators`. Subsequent reads from it will return its default value.
  mutating func clearAllowListedValidators() {self._allowListedValidators = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _allowListedValidators: Pstake_Lscosmos_V1beta1_AllowListedValidators? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pstake_Lscosmos_V1beta1_MinDepositAndFeeChangeProposal: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_PstakeFeeAddressChangeProposal: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_AllowListedValidatorSetChangeProposal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pstake.lscosmos.v1beta1"

extension Pstake_Lscosmos_V1beta1_MinDepositAndFeeChangeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MinDepositAndFeeChangeProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "min_deposit"),
    4: .standard(proto: "pstake_deposit_fee"),
    5: .standard(proto: "pstake_restake_fee"),
    6: .standard(proto: "pstake_unstake_fee"),
    7: .standard(proto: "pstake_redemption_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.minDeposit) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pstakeDepositFee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pstakeRestakeFee) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.pstakeUnstakeFee) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.pstakeRedemptionFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.minDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minDeposit, fieldNumber: 3)
    }
    if !self.pstakeDepositFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeDepositFee, fieldNumber: 4)
    }
    if !self.pstakeRestakeFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeRestakeFee, fieldNumber: 5)
    }
    if !self.pstakeUnstakeFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeUnstakeFee, fieldNumber: 6)
    }
    if !self.pstakeRedemptionFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeRedemptionFee, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MinDepositAndFeeChangeProposal, rhs: Pstake_Lscosmos_V1beta1_MinDepositAndFeeChangeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.minDeposit != rhs.minDeposit {return false}
    if lhs.pstakeDepositFee != rhs.pstakeDepositFee {return false}
    if lhs.pstakeRestakeFee != rhs.pstakeRestakeFee {return false}
    if lhs.pstakeUnstakeFee != rhs.pstakeUnstakeFee {return false}
    if lhs.pstakeRedemptionFee != rhs.pstakeRedemptionFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_PstakeFeeAddressChangeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PstakeFeeAddressChangeProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "pstake_fee_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pstakeFeeAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.pstakeFeeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeFeeAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_PstakeFeeAddressChangeProposal, rhs: Pstake_Lscosmos_V1beta1_PstakeFeeAddressChangeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.pstakeFeeAddress != rhs.pstakeFeeAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_AllowListedValidatorSetChangeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllowListedValidatorSetChangeProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "allow_listed_validators"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._allowListedValidators) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._allowListedValidators {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_AllowListedValidatorSetChangeProposal, rhs: Pstake_Lscosmos_V1beta1_AllowListedValidatorSetChangeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._allowListedValidators != rhs._allowListedValidators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
