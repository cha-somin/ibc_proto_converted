// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/lend/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Lend_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var borrowAsset: [Comdex_Lend_V1beta1_BorrowAsset] = []

  var borrowInterestTracker: [Comdex_Lend_V1beta1_Borrow_interest_tracker] = []

  var lendAsset: [Comdex_Lend_V1beta1_LendAsset] = []

  var pool: [Comdex_Lend_V1beta1_Pool] = []

  var assetToPairMapping: [Comdex_Lend_V1beta1_AssetToPairMapping] = []

  var poolAssetLbmapping: [Comdex_Lend_V1beta1_PoolAssetLBMapping] = []

  var lendRewardsTracker: [Comdex_Lend_V1beta1_Lend_rewards_tracker] = []

  var userAssetLendBorrowMapping: [Comdex_Lend_V1beta1_UserAssetLendBorrowMapping] = []

  var reserveBuybackAssetData: [Comdex_Lend_V1beta1_ReserveBuybackAssetData] = []

  var extendedPair: [Comdex_Lend_V1beta1_Extended_Pair] = []

  var auctionParams: [Comdex_Lend_V1beta1_AuctionParams] = []

  var assetRatesParams: [Comdex_Lend_V1beta1_AssetRatesParams] = []

  var modBal: Comdex_Lend_V1beta1_ModBal {
    get {return _modBal ?? Comdex_Lend_V1beta1_ModBal()}
    set {_modBal = newValue}
  }
  /// Returns true if `modBal` has been explicitly set.
  var hasModBal: Bool {return self._modBal != nil}
  /// Clears the value of `modBal`. Subsequent reads from it will return its default value.
  mutating func clearModBal() {self._modBal = nil}

  var reserveBal: Comdex_Lend_V1beta1_ReserveBal {
    get {return _reserveBal ?? Comdex_Lend_V1beta1_ReserveBal()}
    set {_reserveBal = newValue}
  }
  /// Returns true if `reserveBal` has been explicitly set.
  var hasReserveBal: Bool {return self._reserveBal != nil}
  /// Clears the value of `reserveBal`. Subsequent reads from it will return its default value.
  mutating func clearReserveBal() {self._reserveBal = nil}

  var allReserveStats: [Comdex_Lend_V1beta1_AllReserveStats] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _modBal: Comdex_Lend_V1beta1_ModBal? = nil
  fileprivate var _reserveBal: Comdex_Lend_V1beta1_ReserveBal? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Lend_V1beta1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.lend.v1beta1"

extension Comdex_Lend_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrowAsset"),
    2: .same(proto: "borrowInterestTracker"),
    3: .same(proto: "lendAsset"),
    4: .same(proto: "pool"),
    5: .same(proto: "assetToPairMapping"),
    6: .same(proto: "poolAssetLBMapping"),
    7: .same(proto: "lendRewardsTracker"),
    8: .same(proto: "userAssetLendBorrowMapping"),
    9: .same(proto: "reserveBuybackAssetData"),
    10: .standard(proto: "extended_Pair"),
    11: .same(proto: "auctionParams"),
    12: .same(proto: "assetRatesParams"),
    13: .same(proto: "modBal"),
    14: .same(proto: "reserveBal"),
    15: .same(proto: "allReserveStats"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.borrowAsset) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.borrowInterestTracker) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.lendAsset) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.pool) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.assetToPairMapping) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.poolAssetLbmapping) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.lendRewardsTracker) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.userAssetLendBorrowMapping) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.reserveBuybackAssetData) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.extendedPair) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.auctionParams) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.assetRatesParams) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._modBal) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._reserveBal) }()
      case 15: try { try decoder.decodeRepeatedMessageField(value: &self.allReserveStats) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrowAsset.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.borrowAsset, fieldNumber: 1)
    }
    if !self.borrowInterestTracker.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.borrowInterestTracker, fieldNumber: 2)
    }
    if !self.lendAsset.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lendAsset, fieldNumber: 3)
    }
    if !self.pool.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pool, fieldNumber: 4)
    }
    if !self.assetToPairMapping.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetToPairMapping, fieldNumber: 5)
    }
    if !self.poolAssetLbmapping.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poolAssetLbmapping, fieldNumber: 6)
    }
    if !self.lendRewardsTracker.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lendRewardsTracker, fieldNumber: 7)
    }
    if !self.userAssetLendBorrowMapping.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userAssetLendBorrowMapping, fieldNumber: 8)
    }
    if !self.reserveBuybackAssetData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reserveBuybackAssetData, fieldNumber: 9)
    }
    if !self.extendedPair.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extendedPair, fieldNumber: 10)
    }
    if !self.auctionParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.auctionParams, fieldNumber: 11)
    }
    if !self.assetRatesParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetRatesParams, fieldNumber: 12)
    }
    try { if let v = self._modBal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._reserveBal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    if !self.allReserveStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.allReserveStats, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Lend_V1beta1_GenesisState, rhs: Comdex_Lend_V1beta1_GenesisState) -> Bool {
    if lhs.borrowAsset != rhs.borrowAsset {return false}
    if lhs.borrowInterestTracker != rhs.borrowInterestTracker {return false}
    if lhs.lendAsset != rhs.lendAsset {return false}
    if lhs.pool != rhs.pool {return false}
    if lhs.assetToPairMapping != rhs.assetToPairMapping {return false}
    if lhs.poolAssetLbmapping != rhs.poolAssetLbmapping {return false}
    if lhs.lendRewardsTracker != rhs.lendRewardsTracker {return false}
    if lhs.userAssetLendBorrowMapping != rhs.userAssetLendBorrowMapping {return false}
    if lhs.reserveBuybackAssetData != rhs.reserveBuybackAssetData {return false}
    if lhs.extendedPair != rhs.extendedPair {return false}
    if lhs.auctionParams != rhs.auctionParams {return false}
    if lhs.assetRatesParams != rhs.assetRatesParams {return false}
    if lhs._modBal != rhs._modBal {return false}
    if lhs._reserveBal != rhs._reserveBal {return false}
    if lhs.allReserveStats != rhs.allReserveStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
