// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/msg_withdraw_liquidity.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_MsgWithdrawLiquidity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tx: Common_Tx {
    get {return _storage._tx ?? Common_Tx()}
    set {_uniqueStorage()._tx = newValue}
  }
  /// Returns true if `tx` has been explicitly set.
  var hasTx: Bool {return _storage._tx != nil}
  /// Clears the value of `tx`. Subsequent reads from it will return its default value.
  mutating func clearTx() {_uniqueStorage()._tx = nil}

  var withdrawAddress: String {
    get {return _storage._withdrawAddress}
    set {_uniqueStorage()._withdrawAddress = newValue}
  }

  var basisPoints: String {
    get {return _storage._basisPoints}
    set {_uniqueStorage()._basisPoints = newValue}
  }

  var asset: Common_Asset {
    get {return _storage._asset ?? Common_Asset()}
    set {_uniqueStorage()._asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return _storage._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {_uniqueStorage()._asset = nil}

  var withdrawalAsset: Common_Asset {
    get {return _storage._withdrawalAsset ?? Common_Asset()}
    set {_uniqueStorage()._withdrawalAsset = newValue}
  }
  /// Returns true if `withdrawalAsset` has been explicitly set.
  var hasWithdrawalAsset: Bool {return _storage._withdrawalAsset != nil}
  /// Clears the value of `withdrawalAsset`. Subsequent reads from it will return its default value.
  mutating func clearWithdrawalAsset() {_uniqueStorage()._withdrawalAsset = nil}

  var signer: Data {
    get {return _storage._signer}
    set {_uniqueStorage()._signer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_MsgWithdrawLiquidity: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_MsgWithdrawLiquidity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawLiquidity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tx"),
    2: .standard(proto: "withdraw_address"),
    3: .standard(proto: "basis_points"),
    4: .same(proto: "asset"),
    5: .standard(proto: "withdrawal_asset"),
    6: .same(proto: "signer"),
  ]

  fileprivate class _StorageClass {
    var _tx: Common_Tx? = nil
    var _withdrawAddress: String = String()
    var _basisPoints: String = String()
    var _asset: Common_Asset? = nil
    var _withdrawalAsset: Common_Asset? = nil
    var _signer: Data = Data()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tx = source._tx
      _withdrawAddress = source._withdrawAddress
      _basisPoints = source._basisPoints
      _asset = source._asset
      _withdrawalAsset = source._withdrawalAsset
      _signer = source._signer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._tx) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._withdrawAddress) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._basisPoints) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._asset) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._withdrawalAsset) }()
        case 6: try { try decoder.decodeSingularBytesField(value: &_storage._signer) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._tx {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._withdrawAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._withdrawAddress, fieldNumber: 2)
      }
      if !_storage._basisPoints.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basisPoints, fieldNumber: 3)
      }
      try { if let v = _storage._asset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._withdrawalAsset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._signer.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._signer, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_MsgWithdrawLiquidity, rhs: Types_MsgWithdrawLiquidity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tx != rhs_storage._tx {return false}
        if _storage._withdrawAddress != rhs_storage._withdrawAddress {return false}
        if _storage._basisPoints != rhs_storage._basisPoints {return false}
        if _storage._asset != rhs_storage._asset {return false}
        if _storage._withdrawalAsset != rhs_storage._withdrawalAsset {return false}
        if _storage._signer != rhs_storage._signer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
