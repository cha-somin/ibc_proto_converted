// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/vote/exported/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Vote_Exported_V1beta1_PollState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case pending // = 1
  case completed // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .completed
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .completed: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Vote_Exported_V1beta1_PollState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Vote_Exported_V1beta1_PollState] = [
    .unspecified,
    .pending,
    .completed,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// PollMetadata represents a poll with write-in voting, i.e. the result of the
/// vote can have any data type
struct Axelar_Vote_Exported_V1beta1_PollMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var expiresAt: Int64 {
    get {return _storage._expiresAt}
    set {_uniqueStorage()._expiresAt = newValue}
  }

  var result: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._result ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return _storage._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {_uniqueStorage()._result = nil}

  var votingThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _storage._votingThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_uniqueStorage()._votingThreshold = newValue}
  }
  /// Returns true if `votingThreshold` has been explicitly set.
  var hasVotingThreshold: Bool {return _storage._votingThreshold != nil}
  /// Clears the value of `votingThreshold`. Subsequent reads from it will return its default value.
  mutating func clearVotingThreshold() {_uniqueStorage()._votingThreshold = nil}

  var state: Axelar_Vote_Exported_V1beta1_PollState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var minVoterCount: Int64 {
    get {return _storage._minVoterCount}
    set {_uniqueStorage()._minVoterCount = newValue}
  }

  var rewardPoolName: String {
    get {return _storage._rewardPoolName}
    set {_uniqueStorage()._rewardPoolName = newValue}
  }

  var gracePeriod: Int64 {
    get {return _storage._gracePeriod}
    set {_uniqueStorage()._gracePeriod = newValue}
  }

  var completedAt: Int64 {
    get {return _storage._completedAt}
    set {_uniqueStorage()._completedAt = newValue}
  }

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var snapshot: Axelar_Snapshot_Exported_V1beta1_Snapshot {
    get {return _storage._snapshot ?? Axelar_Snapshot_Exported_V1beta1_Snapshot()}
    set {_uniqueStorage()._snapshot = newValue}
  }
  /// Returns true if `snapshot` has been explicitly set.
  var hasSnapshot: Bool {return _storage._snapshot != nil}
  /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
  mutating func clearSnapshot() {_uniqueStorage()._snapshot = nil}

  var module: String {
    get {return _storage._module}
    set {_uniqueStorage()._module = newValue}
  }

  var moduleMetadata: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._moduleMetadata ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._moduleMetadata = newValue}
  }
  /// Returns true if `moduleMetadata` has been explicitly set.
  var hasModuleMetadata: Bool {return _storage._moduleMetadata != nil}
  /// Clears the value of `moduleMetadata`. Subsequent reads from it will return its default value.
  mutating func clearModuleMetadata() {_uniqueStorage()._moduleMetadata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// PollKey represents the key data for a poll
struct Axelar_Vote_Exported_V1beta1_PollKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var module: String = String()

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PollParticipants should be embedded in poll events in other modules
struct Axelar_Vote_Exported_V1beta1_PollParticipants {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pollID: UInt64 = 0

  var participants: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Axelar_Vote_Exported_V1beta1_PollState: @unchecked Sendable {}
extension Axelar_Vote_Exported_V1beta1_PollMetadata: @unchecked Sendable {}
extension Axelar_Vote_Exported_V1beta1_PollKey: @unchecked Sendable {}
extension Axelar_Vote_Exported_V1beta1_PollParticipants: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.vote.exported.v1beta1"

extension Axelar_Vote_Exported_V1beta1_PollState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POLL_STATE_UNSPECIFIED"),
    1: .same(proto: "POLL_STATE_PENDING"),
    2: .same(proto: "POLL_STATE_COMPLETED"),
    3: .same(proto: "POLL_STATE_FAILED"),
  ]
}

extension Axelar_Vote_Exported_V1beta1_PollMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PollMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "expires_at"),
    4: .same(proto: "result"),
    5: .standard(proto: "voting_threshold"),
    6: .same(proto: "state"),
    7: .standard(proto: "min_voter_count"),
    10: .standard(proto: "reward_pool_name"),
    11: .standard(proto: "grace_period"),
    12: .standard(proto: "completed_at"),
    13: .same(proto: "id"),
    15: .same(proto: "snapshot"),
    16: .same(proto: "module"),
    17: .standard(proto: "module_metadata"),
  ]

  fileprivate class _StorageClass {
    var _expiresAt: Int64 = 0
    var _result: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _votingThreshold: Axelar_Utils_V1beta1_Threshold? = nil
    var _state: Axelar_Vote_Exported_V1beta1_PollState = .unspecified
    var _minVoterCount: Int64 = 0
    var _rewardPoolName: String = String()
    var _gracePeriod: Int64 = 0
    var _completedAt: Int64 = 0
    var _id: UInt64 = 0
    var _snapshot: Axelar_Snapshot_Exported_V1beta1_Snapshot? = nil
    var _module: String = String()
    var _moduleMetadata: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _expiresAt = source._expiresAt
      _result = source._result
      _votingThreshold = source._votingThreshold
      _state = source._state
      _minVoterCount = source._minVoterCount
      _rewardPoolName = source._rewardPoolName
      _gracePeriod = source._gracePeriod
      _completedAt = source._completedAt
      _id = source._id
      _snapshot = source._snapshot
      _module = source._module
      _moduleMetadata = source._moduleMetadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._expiresAt) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._result) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._votingThreshold) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._minVoterCount) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._rewardPoolName) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._gracePeriod) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._completedAt) }()
        case 13: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._snapshot) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._module) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._moduleMetadata) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._expiresAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expiresAt, fieldNumber: 3)
      }
      try { if let v = _storage._result {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._votingThreshold {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 6)
      }
      if _storage._minVoterCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minVoterCount, fieldNumber: 7)
      }
      if !_storage._rewardPoolName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rewardPoolName, fieldNumber: 10)
      }
      if _storage._gracePeriod != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gracePeriod, fieldNumber: 11)
      }
      if _storage._completedAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._completedAt, fieldNumber: 12)
      }
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 13)
      }
      try { if let v = _storage._snapshot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._module.isEmpty {
        try visitor.visitSingularStringField(value: _storage._module, fieldNumber: 16)
      }
      try { if let v = _storage._moduleMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Vote_Exported_V1beta1_PollMetadata, rhs: Axelar_Vote_Exported_V1beta1_PollMetadata) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._expiresAt != rhs_storage._expiresAt {return false}
        if _storage._result != rhs_storage._result {return false}
        if _storage._votingThreshold != rhs_storage._votingThreshold {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._minVoterCount != rhs_storage._minVoterCount {return false}
        if _storage._rewardPoolName != rhs_storage._rewardPoolName {return false}
        if _storage._gracePeriod != rhs_storage._gracePeriod {return false}
        if _storage._completedAt != rhs_storage._completedAt {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._snapshot != rhs_storage._snapshot {return false}
        if _storage._module != rhs_storage._module {return false}
        if _storage._moduleMetadata != rhs_storage._moduleMetadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Vote_Exported_V1beta1_PollKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PollKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.module) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.module.isEmpty {
      try visitor.visitSingularStringField(value: self.module, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Vote_Exported_V1beta1_PollKey, rhs: Axelar_Vote_Exported_V1beta1_PollKey) -> Bool {
    if lhs.module != rhs.module {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Vote_Exported_V1beta1_PollParticipants: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PollParticipants"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "poll_id"),
    2: .same(proto: "participants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.pollID) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.participants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pollID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pollID, fieldNumber: 1)
    }
    if !self.participants.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.participants, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Vote_Exported_V1beta1_PollParticipants, rhs: Axelar_Vote_Exported_V1beta1_PollParticipants) -> Bool {
    if lhs.pollID != rhs.pollID {return false}
    if lhs.participants != rhs.participants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
