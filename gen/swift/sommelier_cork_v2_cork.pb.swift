// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sommelier/cork/v2/cork.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Cork_V2_Cork {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// call body containing the ABI encoded bytes to send to the contract
  var encodedContractCall: Data = Data()

  /// address of the contract to send the call
  var targetContractAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cork_V2_ScheduledCork {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cork: Cork_V2_Cork {
    get {return _cork ?? Cork_V2_Cork()}
    set {_cork = newValue}
  }
  /// Returns true if `cork` has been explicitly set.
  var hasCork: Bool {return self._cork != nil}
  /// Clears the value of `cork`. Subsequent reads from it will return its default value.
  mutating func clearCork() {self._cork = nil}

  var blockHeight: UInt64 = 0

  var validator: String = String()

  var id: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cork: Cork_V2_Cork? = nil
}

struct Cork_V2_CorkResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cork: Cork_V2_Cork {
    get {return _cork ?? Cork_V2_Cork()}
    set {_cork = newValue}
  }
  /// Returns true if `cork` has been explicitly set.
  var hasCork: Bool {return self._cork != nil}
  /// Clears the value of `cork`. Subsequent reads from it will return its default value.
  mutating func clearCork() {self._cork = nil}

  var blockHeight: UInt64 = 0

  var approved: Bool = false

  var approvalPercentage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cork: Cork_V2_Cork? = nil
}

struct Cork_V2_CellarIDSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ids: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cork_V2_Cork: @unchecked Sendable {}
extension Cork_V2_ScheduledCork: @unchecked Sendable {}
extension Cork_V2_CorkResult: @unchecked Sendable {}
extension Cork_V2_CellarIDSet: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cork.v2"

extension Cork_V2_Cork: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Cork"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encoded_contract_call"),
    2: .standard(proto: "target_contract_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.encodedContractCall) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.targetContractAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encodedContractCall.isEmpty {
      try visitor.visitSingularBytesField(value: self.encodedContractCall, fieldNumber: 1)
    }
    if !self.targetContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.targetContractAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cork_V2_Cork, rhs: Cork_V2_Cork) -> Bool {
    if lhs.encodedContractCall != rhs.encodedContractCall {return false}
    if lhs.targetContractAddress != rhs.targetContractAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cork_V2_ScheduledCork: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScheduledCork"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cork"),
    2: .standard(proto: "block_height"),
    3: .same(proto: "validator"),
    4: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._cork) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.validator) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cork {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 2)
    }
    if !self.validator.isEmpty {
      try visitor.visitSingularStringField(value: self.validator, fieldNumber: 3)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cork_V2_ScheduledCork, rhs: Cork_V2_ScheduledCork) -> Bool {
    if lhs._cork != rhs._cork {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.validator != rhs.validator {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cork_V2_CorkResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CorkResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cork"),
    2: .standard(proto: "block_height"),
    3: .same(proto: "approved"),
    4: .standard(proto: "approval_percentage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._cork) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.approved) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.approvalPercentage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cork {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 2)
    }
    if self.approved != false {
      try visitor.visitSingularBoolField(value: self.approved, fieldNumber: 3)
    }
    if !self.approvalPercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.approvalPercentage, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cork_V2_CorkResult, rhs: Cork_V2_CorkResult) -> Bool {
    if lhs._cork != rhs._cork {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.approved != rhs.approved {return false}
    if lhs.approvalPercentage != rhs.approvalPercentage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cork_V2_CellarIDSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CellarIDSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cork_V2_CellarIDSet, rhs: Cork_V2_CellarIDSet) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
