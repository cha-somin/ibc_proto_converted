//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/liquidfarming/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Crescent_Liquidfarming_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Liquidfarming_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryParamsRequest, Crescent_Liquidfarming_V1beta1_QueryParamsResponse>

  func liquidFarms(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>

  func liquidFarm(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>

  func rewardsAuctions(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>

  func rewardsAuction(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>

  func bids(
    _ request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryBidsRequest, Crescent_Liquidfarming_V1beta1_QueryBidsResponse>

  func rewards(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>

  func exchangeRate(
    _ request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>
}

extension Crescent_Liquidfarming_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "crescent.liquidfarming.v1beta1.Query"
  }

  /// Params returns parameters of the module
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryParamsRequest, Crescent_Liquidfarming_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// LiquidFarms returns all liquid farms registered in params
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidFarms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidFarms(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidFarmsInterceptors() ?? []
    )
  }

  /// LiquidFarm returns the specific liquid farm
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidFarm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidFarm(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidFarmInterceptors() ?? []
    )
  }

  /// RewardsAuctions returns all rewards auctions that correspond to the given pool id
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardsAuctions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardsAuctions(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsAuctionsInterceptors() ?? []
    )
  }

  /// RewardsAuction returns the specific rewards auction
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardsAuction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardsAuction(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsAuctionInterceptors() ?? []
    )
  }

  /// Bids returns all bids for the liquid farm
  ///
  /// - Parameters:
  ///   - request: Request to send to Bids.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bids(
    _ request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryBidsRequest, Crescent_Liquidfarming_V1beta1_QueryBidsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  /// Rewards returns all accumulated farming rewards for the liquid farm
  ///
  /// - Parameters:
  ///   - request: Request to send to Rewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewards(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }

  /// ExchangeRate returns exchange rates (mint rate and burn rate) for the liquid farm
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeRate(
    _ request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse> {
    return self.makeUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.exchangeRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Crescent_Liquidfarming_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Crescent_Liquidfarming_V1beta1_QueryNIOClient")
internal final class Crescent_Liquidfarming_V1beta1_QueryClient: Crescent_Liquidfarming_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the crescent.liquidfarming.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Crescent_Liquidfarming_V1beta1_QueryNIOClient: Crescent_Liquidfarming_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.liquidfarming.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Liquidfarming_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryParamsRequest, Crescent_Liquidfarming_V1beta1_QueryParamsResponse>

  func makeLiquidFarmsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>

  func makeLiquidFarmCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>

  func makeRewardsAuctionsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>

  func makeRewardsAuctionCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>

  func makeBidsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryBidsRequest, Crescent_Liquidfarming_V1beta1_QueryBidsResponse>

  func makeRewardsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>

  func makeExchangeRateCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Liquidfarming_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Liquidfarming_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryParamsRequest, Crescent_Liquidfarming_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeLiquidFarmsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidFarmsInterceptors() ?? []
    )
  }

  internal func makeLiquidFarmCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidFarmInterceptors() ?? []
    )
  }

  internal func makeRewardsAuctionsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsAuctionsInterceptors() ?? []
    )
  }

  internal func makeRewardsAuctionCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsAuctionInterceptors() ?? []
    )
  }

  internal func makeBidsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryBidsRequest, Crescent_Liquidfarming_V1beta1_QueryBidsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  internal func makeRewardsCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }

  internal func makeExchangeRateCall(
    _ request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.exchangeRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Liquidfarming_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func liquidFarms(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidFarmsInterceptors() ?? []
    )
  }

  internal func liquidFarm(
    _ request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidFarmInterceptors() ?? []
    )
  }

  internal func rewardsAuctions(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsAuctionsInterceptors() ?? []
    )
  }

  internal func rewardsAuction(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsAuctionInterceptors() ?? []
    )
  }

  internal func bids(
    _ request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryBidsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  internal func rewards(
    _ request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsInterceptors() ?? []
    )
  }

  internal func exchangeRate(
    _ request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.exchangeRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Crescent_Liquidfarming_V1beta1_QueryAsyncClient: Crescent_Liquidfarming_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Crescent_Liquidfarming_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryParamsRequest, Crescent_Liquidfarming_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidFarms'.
  func makeLiquidFarmsInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidFarm'.
  func makeLiquidFarmInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardsAuctions'.
  func makeRewardsAuctionsInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardsAuction'.
  func makeRewardsAuctionInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>]

  /// - Returns: Interceptors to use when invoking 'bids'.
  func makeBidsInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryBidsRequest, Crescent_Liquidfarming_V1beta1_QueryBidsResponse>]

  /// - Returns: Interceptors to use when invoking 'rewards'.
  func makeRewardsInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeRate'.
  func makeExchangeRateInterceptors() -> [ClientInterceptor<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>]
}

internal enum Crescent_Liquidfarming_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.liquidfarming.v1beta1.Query",
    methods: [
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.params,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarms,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.liquidFarm,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuctions,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewardsAuction,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.bids,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.rewards,
      Crescent_Liquidfarming_V1beta1_QueryClientMetadata.Methods.exchangeRate,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.liquidfarming.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let liquidFarms = GRPCMethodDescriptor(
      name: "LiquidFarms",
      path: "/crescent.liquidfarming.v1beta1.Query/LiquidFarms",
      type: GRPCCallType.unary
    )

    internal static let liquidFarm = GRPCMethodDescriptor(
      name: "LiquidFarm",
      path: "/crescent.liquidfarming.v1beta1.Query/LiquidFarm",
      type: GRPCCallType.unary
    )

    internal static let rewardsAuctions = GRPCMethodDescriptor(
      name: "RewardsAuctions",
      path: "/crescent.liquidfarming.v1beta1.Query/RewardsAuctions",
      type: GRPCCallType.unary
    )

    internal static let rewardsAuction = GRPCMethodDescriptor(
      name: "RewardsAuction",
      path: "/crescent.liquidfarming.v1beta1.Query/RewardsAuction",
      type: GRPCCallType.unary
    )

    internal static let bids = GRPCMethodDescriptor(
      name: "Bids",
      path: "/crescent.liquidfarming.v1beta1.Query/Bids",
      type: GRPCCallType.unary
    )

    internal static let rewards = GRPCMethodDescriptor(
      name: "Rewards",
      path: "/crescent.liquidfarming.v1beta1.Query/Rewards",
      type: GRPCCallType.unary
    )

    internal static let exchangeRate = GRPCMethodDescriptor(
      name: "ExchangeRate",
      path: "/crescent.liquidfarming.v1beta1.Query/ExchangeRate",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Liquidfarming_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Crescent_Liquidfarming_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns parameters of the module
  func params(request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryParamsResponse>

  /// LiquidFarms returns all liquid farms registered in params
  func liquidFarms(request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>

  /// LiquidFarm returns the specific liquid farm
  func liquidFarm(request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>

  /// RewardsAuctions returns all rewards auctions that correspond to the given pool id
  func rewardsAuctions(request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>

  /// RewardsAuction returns the specific rewards auction
  func rewardsAuction(request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>

  /// Bids returns all bids for the liquid farm
  func bids(request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryBidsResponse>

  /// Rewards returns all accumulated farming rewards for the liquid farm
  func rewards(request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>

  /// ExchangeRate returns exchange rates (mint rate and burn rate) for the liquid farm
  func exchangeRate(request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>
}

extension Crescent_Liquidfarming_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Crescent_Liquidfarming_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "LiquidFarms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>(),
        interceptors: self.interceptors?.makeLiquidFarmsInterceptors() ?? [],
        userFunction: self.liquidFarms(request:context:)
      )

    case "LiquidFarm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>(),
        interceptors: self.interceptors?.makeLiquidFarmInterceptors() ?? [],
        userFunction: self.liquidFarm(request:context:)
      )

    case "RewardsAuctions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>(),
        interceptors: self.interceptors?.makeRewardsAuctionsInterceptors() ?? [],
        userFunction: self.rewardsAuctions(request:context:)
      )

    case "RewardsAuction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>(),
        interceptors: self.interceptors?.makeRewardsAuctionInterceptors() ?? [],
        userFunction: self.rewardsAuction(request:context:)
      )

    case "Bids":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        userFunction: self.bids(request:context:)
      )

    case "Rewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeRewardsInterceptors() ?? [],
        userFunction: self.rewards(request:context:)
      )

    case "ExchangeRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>(),
        interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? [],
        userFunction: self.exchangeRate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Liquidfarming_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Liquidfarming_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns parameters of the module
  @Sendable func params(
    request: Crescent_Liquidfarming_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryParamsResponse

  /// LiquidFarms returns all liquid farms registered in params
  @Sendable func liquidFarms(
    request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse

  /// LiquidFarm returns the specific liquid farm
  @Sendable func liquidFarm(
    request: Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse

  /// RewardsAuctions returns all rewards auctions that correspond to the given pool id
  @Sendable func rewardsAuctions(
    request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse

  /// RewardsAuction returns the specific rewards auction
  @Sendable func rewardsAuction(
    request: Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse

  /// Bids returns all bids for the liquid farm
  @Sendable func bids(
    request: Crescent_Liquidfarming_V1beta1_QueryBidsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryBidsResponse

  /// Rewards returns all accumulated farming rewards for the liquid farm
  @Sendable func rewards(
    request: Crescent_Liquidfarming_V1beta1_QueryRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryRewardsResponse

  /// ExchangeRate returns exchange rates (mint rate and burn rate) for the liquid farm
  @Sendable func exchangeRate(
    request: Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Liquidfarming_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Liquidfarming_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Crescent_Liquidfarming_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Crescent_Liquidfarming_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "LiquidFarms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>(),
        interceptors: self.interceptors?.makeLiquidFarmsInterceptors() ?? [],
        wrapping: self.liquidFarms(request:context:)
      )

    case "LiquidFarm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>(),
        interceptors: self.interceptors?.makeLiquidFarmInterceptors() ?? [],
        wrapping: self.liquidFarm(request:context:)
      )

    case "RewardsAuctions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>(),
        interceptors: self.interceptors?.makeRewardsAuctionsInterceptors() ?? [],
        wrapping: self.rewardsAuctions(request:context:)
      )

    case "RewardsAuction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>(),
        interceptors: self.interceptors?.makeRewardsAuctionInterceptors() ?? [],
        wrapping: self.rewardsAuction(request:context:)
      )

    case "Bids":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        wrapping: self.bids(request:context:)
      )

    case "Rewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeRewardsInterceptors() ?? [],
        wrapping: self.rewards(request:context:)
      )

    case "ExchangeRate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>(),
        interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? [],
        wrapping: self.exchangeRate(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Liquidfarming_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryParamsRequest, Crescent_Liquidfarming_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'liquidFarms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidFarmsInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmsResponse>]

  /// - Returns: Interceptors to use when handling 'liquidFarm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidFarmInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryLiquidFarmRequest, Crescent_Liquidfarming_V1beta1_QueryLiquidFarmResponse>]

  /// - Returns: Interceptors to use when handling 'rewardsAuctions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsAuctionsInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionsResponse>]

  /// - Returns: Interceptors to use when handling 'rewardsAuction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsAuctionInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsAuctionResponse>]

  /// - Returns: Interceptors to use when handling 'bids'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidsInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryBidsRequest, Crescent_Liquidfarming_V1beta1_QueryBidsResponse>]

  /// - Returns: Interceptors to use when handling 'rewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryRewardsRequest, Crescent_Liquidfarming_V1beta1_QueryRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeRateInterceptors() -> [ServerInterceptor<Crescent_Liquidfarming_V1beta1_QueryExchangeRateRequest, Crescent_Liquidfarming_V1beta1_QueryExchangeRateResponse>]
}

internal enum Crescent_Liquidfarming_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "crescent.liquidfarming.v1beta1.Query",
    methods: [
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.params,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.liquidFarms,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.liquidFarm,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.rewardsAuctions,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.rewardsAuction,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.bids,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.rewards,
      Crescent_Liquidfarming_V1beta1_QueryServerMetadata.Methods.exchangeRate,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/crescent.liquidfarming.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let liquidFarms = GRPCMethodDescriptor(
      name: "LiquidFarms",
      path: "/crescent.liquidfarming.v1beta1.Query/LiquidFarms",
      type: GRPCCallType.unary
    )

    internal static let liquidFarm = GRPCMethodDescriptor(
      name: "LiquidFarm",
      path: "/crescent.liquidfarming.v1beta1.Query/LiquidFarm",
      type: GRPCCallType.unary
    )

    internal static let rewardsAuctions = GRPCMethodDescriptor(
      name: "RewardsAuctions",
      path: "/crescent.liquidfarming.v1beta1.Query/RewardsAuctions",
      type: GRPCCallType.unary
    )

    internal static let rewardsAuction = GRPCMethodDescriptor(
      name: "RewardsAuction",
      path: "/crescent.liquidfarming.v1beta1.Query/RewardsAuction",
      type: GRPCCallType.unary
    )

    internal static let bids = GRPCMethodDescriptor(
      name: "Bids",
      path: "/crescent.liquidfarming.v1beta1.Query/Bids",
      type: GRPCCallType.unary
    )

    internal static let rewards = GRPCMethodDescriptor(
      name: "Rewards",
      path: "/crescent.liquidfarming.v1beta1.Query/Rewards",
      type: GRPCCallType.unary
    )

    internal static let exchangeRate = GRPCMethodDescriptor(
      name: "ExchangeRate",
      path: "/crescent.liquidfarming.v1beta1.Query/ExchangeRate",
      type: GRPCCallType.unary
    )
  }
}
