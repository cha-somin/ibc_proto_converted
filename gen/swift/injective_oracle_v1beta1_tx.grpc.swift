//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/oracle/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the oracle Msg service.
///
/// Usage: instantiate `Injective_Oracle_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Oracle_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func relayProviderPrices(
    _ request: Injective_Oracle_V1beta1_MsgRelayProviderPrices,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayProviderPrices, Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>

  func relayPriceFeedPrice(
    _ request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>

  func relayBandRates(
    _ request: Injective_Oracle_V1beta1_MsgRelayBandRates,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayBandRates, Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>

  func requestBandIBCRates(
    _ request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRequestBandIBCRates, Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>

  func relayCoinbaseMessages(
    _ request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>

  func relayPythPrices(
    _ request: Injective_Oracle_V1beta1_MsgRelayPythPrices,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayPythPrices, Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>

  func updateParams(
    _ request: Injective_Oracle_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgUpdateParams, Injective_Oracle_V1beta1_MsgUpdateParamsResponse>
}

extension Injective_Oracle_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "injective.oracle.v1beta1.Msg"
  }

  /// RelayProviderPrice defines a method for relaying a price for a
  /// provider-based oracle
  ///
  /// - Parameters:
  ///   - request: Request to send to RelayProviderPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func relayProviderPrices(
    _ request: Injective_Oracle_V1beta1_MsgRelayProviderPrices,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayProviderPrices, Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayProviderPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayProviderPricesInterceptors() ?? []
    )
  }

  /// RelayPriceFeedPrice defines a method for relaying a price for a price
  /// feeder-based oracle
  ///
  /// - Parameters:
  ///   - request: Request to send to RelayPriceFeedPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func relayPriceFeedPrice(
    _ request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPriceFeedPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayPriceFeedPriceInterceptors() ?? []
    )
  }

  /// RelayBandRates defines a method for relaying rates from Band
  ///
  /// - Parameters:
  ///   - request: Request to send to RelayBandRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func relayBandRates(
    _ request: Injective_Oracle_V1beta1_MsgRelayBandRates,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayBandRates, Injective_Oracle_V1beta1_MsgRelayBandRatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayBandRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayBandRatesInterceptors() ?? []
    )
  }

  /// RequestBandIBCRates defines a method for fetching rates from Band ibc
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestBandIBCRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestBandIBCRates(
    _ request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRequestBandIBCRates, Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.requestBandIBCRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBandIBCRatesInterceptors() ?? []
    )
  }

  /// RelayCoinbaseMessages defines a method for relaying price messages from
  /// Coinbase API
  ///
  /// - Parameters:
  ///   - request: Request to send to RelayCoinbaseMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func relayCoinbaseMessages(
    _ request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayCoinbaseMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayCoinbaseMessagesInterceptors() ?? []
    )
  }

  /// RelayPythPrices defines a method for relaying rates from the Pyth contract
  ///
  /// - Parameters:
  ///   - request: Request to send to RelayPythPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func relayPythPrices(
    _ request: Injective_Oracle_V1beta1_MsgRelayPythPrices,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgRelayPythPrices, Injective_Oracle_V1beta1_MsgRelayPythPricesResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPythPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayPythPricesInterceptors() ?? []
    )
  }

  ///  UpdateParams enables updating oracle module's params via governance
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Injective_Oracle_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_MsgUpdateParams, Injective_Oracle_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Oracle_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Oracle_V1beta1_MsgNIOClient")
internal final class Injective_Oracle_V1beta1_MsgClient: Injective_Oracle_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.oracle.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Oracle_V1beta1_MsgNIOClient: Injective_Oracle_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.oracle.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the oracle Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Oracle_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeRelayProviderPricesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayProviderPrices,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayProviderPrices, Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>

  func makeRelayPriceFeedPriceCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>

  func makeRelayBandRatesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayBandRates,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayBandRates, Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>

  func makeRequestBandIbcratesCall(
    _ request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRequestBandIBCRates, Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>

  func makeRelayCoinbaseMessagesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>

  func makeRelayPythPricesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayPythPrices,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayPythPrices, Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>

  func makeUpdateParamsCall(
    _ request: Injective_Oracle_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgUpdateParams, Injective_Oracle_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Oracle_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Oracle_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRelayProviderPricesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayProviderPrices,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayProviderPrices, Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayProviderPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayProviderPricesInterceptors() ?? []
    )
  }

  internal func makeRelayPriceFeedPriceCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPriceFeedPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayPriceFeedPriceInterceptors() ?? []
    )
  }

  internal func makeRelayBandRatesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayBandRates,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayBandRates, Injective_Oracle_V1beta1_MsgRelayBandRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayBandRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayBandRatesInterceptors() ?? []
    )
  }

  internal func makeRequestBandIbcratesCall(
    _ request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRequestBandIBCRates, Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.requestBandIBCRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBandIBCRatesInterceptors() ?? []
    )
  }

  internal func makeRelayCoinbaseMessagesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayCoinbaseMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayCoinbaseMessagesInterceptors() ?? []
    )
  }

  internal func makeRelayPythPricesCall(
    _ request: Injective_Oracle_V1beta1_MsgRelayPythPrices,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgRelayPythPrices, Injective_Oracle_V1beta1_MsgRelayPythPricesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPythPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayPythPricesInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Injective_Oracle_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Oracle_V1beta1_MsgUpdateParams, Injective_Oracle_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Oracle_V1beta1_MsgAsyncClientProtocol {
  internal func relayProviderPrices(
    _ request: Injective_Oracle_V1beta1_MsgRelayProviderPrices,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayProviderPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayProviderPricesInterceptors() ?? []
    )
  }

  internal func relayPriceFeedPrice(
    _ request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPriceFeedPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayPriceFeedPriceInterceptors() ?? []
    )
  }

  internal func relayBandRates(
    _ request: Injective_Oracle_V1beta1_MsgRelayBandRates,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayBandRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayBandRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayBandRatesInterceptors() ?? []
    )
  }

  internal func requestBandIBCRates(
    _ request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.requestBandIBCRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBandIBCRatesInterceptors() ?? []
    )
  }

  internal func relayCoinbaseMessages(
    _ request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayCoinbaseMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayCoinbaseMessagesInterceptors() ?? []
    )
  }

  internal func relayPythPrices(
    _ request: Injective_Oracle_V1beta1_MsgRelayPythPrices,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayPythPricesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPythPrices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRelayPythPricesInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Injective_Oracle_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Oracle_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Oracle_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Oracle_V1beta1_MsgAsyncClient: Injective_Oracle_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Oracle_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'relayProviderPrices'.
  func makeRelayProviderPricesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgRelayProviderPrices, Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'relayPriceFeedPrice'.
  func makeRelayPriceFeedPriceInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'relayBandRates'.
  func makeRelayBandRatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgRelayBandRates, Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'requestBandIBCRates'.
  func makeRequestBandIBCRatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgRequestBandIBCRates, Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'relayCoinbaseMessages'.
  func makeRelayCoinbaseMessagesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'relayPythPrices'.
  func makeRelayPythPricesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgRelayPythPrices, Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_MsgUpdateParams, Injective_Oracle_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Injective_Oracle_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.oracle.v1beta1.Msg",
    methods: [
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayProviderPrices,
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPriceFeedPrice,
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayBandRates,
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.requestBandIBCRates,
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayCoinbaseMessages,
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.relayPythPrices,
      Injective_Oracle_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let relayProviderPrices = GRPCMethodDescriptor(
      name: "RelayProviderPrices",
      path: "/injective.oracle.v1beta1.Msg/RelayProviderPrices",
      type: GRPCCallType.unary
    )

    internal static let relayPriceFeedPrice = GRPCMethodDescriptor(
      name: "RelayPriceFeedPrice",
      path: "/injective.oracle.v1beta1.Msg/RelayPriceFeedPrice",
      type: GRPCCallType.unary
    )

    internal static let relayBandRates = GRPCMethodDescriptor(
      name: "RelayBandRates",
      path: "/injective.oracle.v1beta1.Msg/RelayBandRates",
      type: GRPCCallType.unary
    )

    internal static let requestBandIBCRates = GRPCMethodDescriptor(
      name: "RequestBandIBCRates",
      path: "/injective.oracle.v1beta1.Msg/RequestBandIBCRates",
      type: GRPCCallType.unary
    )

    internal static let relayCoinbaseMessages = GRPCMethodDescriptor(
      name: "RelayCoinbaseMessages",
      path: "/injective.oracle.v1beta1.Msg/RelayCoinbaseMessages",
      type: GRPCCallType.unary
    )

    internal static let relayPythPrices = GRPCMethodDescriptor(
      name: "RelayPythPrices",
      path: "/injective.oracle.v1beta1.Msg/RelayPythPrices",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.oracle.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the oracle Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Oracle_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Injective_Oracle_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// RelayProviderPrice defines a method for relaying a price for a
  /// provider-based oracle
  func relayProviderPrices(request: Injective_Oracle_V1beta1_MsgRelayProviderPrices, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>

  /// RelayPriceFeedPrice defines a method for relaying a price for a price
  /// feeder-based oracle
  func relayPriceFeedPrice(request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>

  /// RelayBandRates defines a method for relaying rates from Band
  func relayBandRates(request: Injective_Oracle_V1beta1_MsgRelayBandRates, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>

  /// RequestBandIBCRates defines a method for fetching rates from Band ibc
  func requestBandIBCRates(request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>

  /// RelayCoinbaseMessages defines a method for relaying price messages from
  /// Coinbase API
  func relayCoinbaseMessages(request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>

  /// RelayPythPrices defines a method for relaying rates from the Pyth contract
  func relayPythPrices(request: Injective_Oracle_V1beta1_MsgRelayPythPrices, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>

  ///  UpdateParams enables updating oracle module's params via governance
  func updateParams(request: Injective_Oracle_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_MsgUpdateParamsResponse>
}

extension Injective_Oracle_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Injective_Oracle_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RelayProviderPrices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayProviderPrices>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>(),
        interceptors: self.interceptors?.makeRelayProviderPricesInterceptors() ?? [],
        userFunction: self.relayProviderPrices(request:context:)
      )

    case "RelayPriceFeedPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>(),
        interceptors: self.interceptors?.makeRelayPriceFeedPriceInterceptors() ?? [],
        userFunction: self.relayPriceFeedPrice(request:context:)
      )

    case "RelayBandRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayBandRates>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>(),
        interceptors: self.interceptors?.makeRelayBandRatesInterceptors() ?? [],
        userFunction: self.relayBandRates(request:context:)
      )

    case "RequestBandIBCRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRequestBandIBCRates>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>(),
        interceptors: self.interceptors?.makeRequestBandIBCRatesInterceptors() ?? [],
        userFunction: self.requestBandIBCRates(request:context:)
      )

    case "RelayCoinbaseMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>(),
        interceptors: self.interceptors?.makeRelayCoinbaseMessagesInterceptors() ?? [],
        userFunction: self.relayCoinbaseMessages(request:context:)
      )

    case "RelayPythPrices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayPythPrices>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>(),
        interceptors: self.interceptors?.makeRelayPythPricesInterceptors() ?? [],
        userFunction: self.relayPythPrices(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the oracle Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Oracle_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Oracle_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// RelayProviderPrice defines a method for relaying a price for a
  /// provider-based oracle
  @Sendable func relayProviderPrices(
    request: Injective_Oracle_V1beta1_MsgRelayProviderPrices,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse

  /// RelayPriceFeedPrice defines a method for relaying a price for a price
  /// feeder-based oracle
  @Sendable func relayPriceFeedPrice(
    request: Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse

  /// RelayBandRates defines a method for relaying rates from Band
  @Sendable func relayBandRates(
    request: Injective_Oracle_V1beta1_MsgRelayBandRates,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayBandRatesResponse

  /// RequestBandIBCRates defines a method for fetching rates from Band ibc
  @Sendable func requestBandIBCRates(
    request: Injective_Oracle_V1beta1_MsgRequestBandIBCRates,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse

  /// RelayCoinbaseMessages defines a method for relaying price messages from
  /// Coinbase API
  @Sendable func relayCoinbaseMessages(
    request: Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse

  /// RelayPythPrices defines a method for relaying rates from the Pyth contract
  @Sendable func relayPythPrices(
    request: Injective_Oracle_V1beta1_MsgRelayPythPrices,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgRelayPythPricesResponse

  ///  UpdateParams enables updating oracle module's params via governance
  @Sendable func updateParams(
    request: Injective_Oracle_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Oracle_V1beta1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Oracle_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Oracle_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Oracle_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Oracle_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RelayProviderPrices":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayProviderPrices>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>(),
        interceptors: self.interceptors?.makeRelayProviderPricesInterceptors() ?? [],
        wrapping: self.relayProviderPrices(request:context:)
      )

    case "RelayPriceFeedPrice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>(),
        interceptors: self.interceptors?.makeRelayPriceFeedPriceInterceptors() ?? [],
        wrapping: self.relayPriceFeedPrice(request:context:)
      )

    case "RelayBandRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayBandRates>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>(),
        interceptors: self.interceptors?.makeRelayBandRatesInterceptors() ?? [],
        wrapping: self.relayBandRates(request:context:)
      )

    case "RequestBandIBCRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRequestBandIBCRates>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>(),
        interceptors: self.interceptors?.makeRequestBandIBCRatesInterceptors() ?? [],
        wrapping: self.requestBandIBCRates(request:context:)
      )

    case "RelayCoinbaseMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>(),
        interceptors: self.interceptors?.makeRelayCoinbaseMessagesInterceptors() ?? [],
        wrapping: self.relayCoinbaseMessages(request:context:)
      )

    case "RelayPythPrices":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgRelayPythPrices>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>(),
        interceptors: self.interceptors?.makeRelayPythPricesInterceptors() ?? [],
        wrapping: self.relayPythPrices(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Oracle_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'relayProviderPrices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRelayProviderPricesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgRelayProviderPrices, Injective_Oracle_V1beta1_MsgRelayProviderPricesResponse>]

  /// - Returns: Interceptors to use when handling 'relayPriceFeedPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRelayPriceFeedPriceInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgRelayPriceFeedPrice, Injective_Oracle_V1beta1_MsgRelayPriceFeedPriceResponse>]

  /// - Returns: Interceptors to use when handling 'relayBandRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRelayBandRatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgRelayBandRates, Injective_Oracle_V1beta1_MsgRelayBandRatesResponse>]

  /// - Returns: Interceptors to use when handling 'requestBandIBCRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestBandIBCRatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgRequestBandIBCRates, Injective_Oracle_V1beta1_MsgRequestBandIBCRatesResponse>]

  /// - Returns: Interceptors to use when handling 'relayCoinbaseMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRelayCoinbaseMessagesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgRelayCoinbaseMessages, Injective_Oracle_V1beta1_MsgRelayCoinbaseMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'relayPythPrices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRelayPythPricesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgRelayPythPrices, Injective_Oracle_V1beta1_MsgRelayPythPricesResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_MsgUpdateParams, Injective_Oracle_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Injective_Oracle_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.oracle.v1beta1.Msg",
    methods: [
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.relayProviderPrices,
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.relayPriceFeedPrice,
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.relayBandRates,
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.requestBandIBCRates,
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.relayCoinbaseMessages,
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.relayPythPrices,
      Injective_Oracle_V1beta1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let relayProviderPrices = GRPCMethodDescriptor(
      name: "RelayProviderPrices",
      path: "/injective.oracle.v1beta1.Msg/RelayProviderPrices",
      type: GRPCCallType.unary
    )

    internal static let relayPriceFeedPrice = GRPCMethodDescriptor(
      name: "RelayPriceFeedPrice",
      path: "/injective.oracle.v1beta1.Msg/RelayPriceFeedPrice",
      type: GRPCCallType.unary
    )

    internal static let relayBandRates = GRPCMethodDescriptor(
      name: "RelayBandRates",
      path: "/injective.oracle.v1beta1.Msg/RelayBandRates",
      type: GRPCCallType.unary
    )

    internal static let requestBandIBCRates = GRPCMethodDescriptor(
      name: "RequestBandIBCRates",
      path: "/injective.oracle.v1beta1.Msg/RequestBandIBCRates",
      type: GRPCCallType.unary
    )

    internal static let relayCoinbaseMessages = GRPCMethodDescriptor(
      name: "RelayCoinbaseMessages",
      path: "/injective.oracle.v1beta1.Msg/RelayCoinbaseMessages",
      type: GRPCCallType.unary
    )

    internal static let relayPythPrices = GRPCMethodDescriptor(
      name: "RelayPythPrices",
      path: "/injective.oracle.v1beta1.Msg/RelayPythPrices",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.oracle.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
