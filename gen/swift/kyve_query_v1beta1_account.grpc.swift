//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/query/v1beta1/account.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// Usage: instantiate `Kyve_Query_V1beta1_QueryAccountClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Query_V1beta1_QueryAccountClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? { get }

  func accountAssets(
    _ request: Kyve_Query_V1beta1_QueryAccountAssetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountAssetsRequest, Kyve_Query_V1beta1_QueryAccountAssetsResponse>

  func accountDelegationUnbondings(
    _ request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>

  func accountFundedList(
    _ request: Kyve_Query_V1beta1_QueryAccountFundedListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountFundedListRequest, Kyve_Query_V1beta1_QueryAccountFundedListResponse>

  func accountRedelegation(
    _ request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountRedelegationRequest, Kyve_Query_V1beta1_QueryAccountRedelegationResponse>
}

extension Kyve_Query_V1beta1_QueryAccountClientProtocol {
  internal var serviceName: String {
    return "kyve.query.v1beta1.QueryAccount"
  }

  /// AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountAssets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountAssets(
    _ request: Kyve_Query_V1beta1_QueryAccountAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountAssetsRequest, Kyve_Query_V1beta1_QueryAccountAssetsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAssetsInterceptors() ?? []
    )
  }

  /// AccountDelegationUnbondings ...
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountDelegationUnbondings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountDelegationUnbondings(
    _ request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountDelegationUnbondings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountDelegationUnbondingsInterceptors() ?? []
    )
  }

  /// AccountFundedList returns all pools the given user has funded into.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountFundedList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountFundedList(
    _ request: Kyve_Query_V1beta1_QueryAccountFundedListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountFundedListRequest, Kyve_Query_V1beta1_QueryAccountFundedListResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountFundedList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountFundedListInterceptors() ?? []
    )
  }

  /// AccountRedelegation ...
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountRedelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountRedelegation(
    _ request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryAccountRedelegationRequest, Kyve_Query_V1beta1_QueryAccountRedelegationResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountRedelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountRedelegationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Query_V1beta1_QueryAccountClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Query_V1beta1_QueryAccountNIOClient")
internal final class Kyve_Query_V1beta1_QueryAccountClient: Kyve_Query_V1beta1_QueryAccountClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.query.v1beta1.QueryAccount service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Query_V1beta1_QueryAccountNIOClient: Kyve_Query_V1beta1_QueryAccountClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.query.v1beta1.QueryAccount service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryAccountAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? { get }

  func makeAccountAssetsCall(
    _ request: Kyve_Query_V1beta1_QueryAccountAssetsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountAssetsRequest, Kyve_Query_V1beta1_QueryAccountAssetsResponse>

  func makeAccountDelegationUnbondingsCall(
    _ request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>

  func makeAccountFundedListCall(
    _ request: Kyve_Query_V1beta1_QueryAccountFundedListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountFundedListRequest, Kyve_Query_V1beta1_QueryAccountFundedListResponse>

  func makeAccountRedelegationCall(
    _ request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountRedelegationRequest, Kyve_Query_V1beta1_QueryAccountRedelegationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryAccountAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryAccountClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAccountAssetsCall(
    _ request: Kyve_Query_V1beta1_QueryAccountAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountAssetsRequest, Kyve_Query_V1beta1_QueryAccountAssetsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAssetsInterceptors() ?? []
    )
  }

  internal func makeAccountDelegationUnbondingsCall(
    _ request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountDelegationUnbondings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountDelegationUnbondingsInterceptors() ?? []
    )
  }

  internal func makeAccountFundedListCall(
    _ request: Kyve_Query_V1beta1_QueryAccountFundedListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountFundedListRequest, Kyve_Query_V1beta1_QueryAccountFundedListResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountFundedList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountFundedListInterceptors() ?? []
    )
  }

  internal func makeAccountRedelegationCall(
    _ request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryAccountRedelegationRequest, Kyve_Query_V1beta1_QueryAccountRedelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountRedelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountRedelegationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryAccountAsyncClientProtocol {
  internal func accountAssets(
    _ request: Kyve_Query_V1beta1_QueryAccountAssetsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryAccountAssetsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountAssetsInterceptors() ?? []
    )
  }

  internal func accountDelegationUnbondings(
    _ request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountDelegationUnbondings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountDelegationUnbondingsInterceptors() ?? []
    )
  }

  internal func accountFundedList(
    _ request: Kyve_Query_V1beta1_QueryAccountFundedListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryAccountFundedListResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountFundedList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountFundedListInterceptors() ?? []
    )
  }

  internal func accountRedelegation(
    _ request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryAccountRedelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountRedelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountRedelegationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Query_V1beta1_QueryAccountAsyncClient: Kyve_Query_V1beta1_QueryAccountAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Query_V1beta1_QueryAccountClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'accountAssets'.
  func makeAccountAssetsInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryAccountAssetsRequest, Kyve_Query_V1beta1_QueryAccountAssetsResponse>]

  /// - Returns: Interceptors to use when invoking 'accountDelegationUnbondings'.
  func makeAccountDelegationUnbondingsInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>]

  /// - Returns: Interceptors to use when invoking 'accountFundedList'.
  func makeAccountFundedListInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryAccountFundedListRequest, Kyve_Query_V1beta1_QueryAccountFundedListResponse>]

  /// - Returns: Interceptors to use when invoking 'accountRedelegation'.
  func makeAccountRedelegationInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryAccountRedelegationRequest, Kyve_Query_V1beta1_QueryAccountRedelegationResponse>]
}

internal enum Kyve_Query_V1beta1_QueryAccountClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryAccount",
    fullName: "kyve.query.v1beta1.QueryAccount",
    methods: [
      Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountAssets,
      Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountDelegationUnbondings,
      Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountFundedList,
      Kyve_Query_V1beta1_QueryAccountClientMetadata.Methods.accountRedelegation,
    ]
  )

  internal enum Methods {
    internal static let accountAssets = GRPCMethodDescriptor(
      name: "AccountAssets",
      path: "/kyve.query.v1beta1.QueryAccount/AccountAssets",
      type: GRPCCallType.unary
    )

    internal static let accountDelegationUnbondings = GRPCMethodDescriptor(
      name: "AccountDelegationUnbondings",
      path: "/kyve.query.v1beta1.QueryAccount/AccountDelegationUnbondings",
      type: GRPCCallType.unary
    )

    internal static let accountFundedList = GRPCMethodDescriptor(
      name: "AccountFundedList",
      path: "/kyve.query.v1beta1.QueryAccount/AccountFundedList",
      type: GRPCCallType.unary
    )

    internal static let accountRedelegation = GRPCMethodDescriptor(
      name: "AccountRedelegation",
      path: "/kyve.query.v1beta1.QueryAccount/AccountRedelegation",
      type: GRPCCallType.unary
    )
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Query_V1beta1_QueryAccountProvider: CallHandlerProvider {
  var interceptors: Kyve_Query_V1beta1_QueryAccountServerInterceptorFactoryProtocol? { get }

  /// AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc.
  func accountAssets(request: Kyve_Query_V1beta1_QueryAccountAssetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryAccountAssetsResponse>

  /// AccountDelegationUnbondings ...
  func accountDelegationUnbondings(request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>

  /// AccountFundedList returns all pools the given user has funded into.
  func accountFundedList(request: Kyve_Query_V1beta1_QueryAccountFundedListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryAccountFundedListResponse>

  /// AccountRedelegation ...
  func accountRedelegation(request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryAccountRedelegationResponse>
}

extension Kyve_Query_V1beta1_QueryAccountProvider {
  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryAccountServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AccountAssets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountAssetsRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountAssetsResponse>(),
        interceptors: self.interceptors?.makeAccountAssetsInterceptors() ?? [],
        userFunction: self.accountAssets(request:context:)
      )

    case "AccountDelegationUnbondings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>(),
        interceptors: self.interceptors?.makeAccountDelegationUnbondingsInterceptors() ?? [],
        userFunction: self.accountDelegationUnbondings(request:context:)
      )

    case "AccountFundedList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountFundedListRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountFundedListResponse>(),
        interceptors: self.interceptors?.makeAccountFundedListInterceptors() ?? [],
        userFunction: self.accountFundedList(request:context:)
      )

    case "AccountRedelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountRedelegationRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountRedelegationResponse>(),
        interceptors: self.interceptors?.makeAccountRedelegationInterceptors() ?? [],
        userFunction: self.accountRedelegation(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryAccountAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryAccountServerInterceptorFactoryProtocol? { get }

  /// AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc.
  @Sendable func accountAssets(
    request: Kyve_Query_V1beta1_QueryAccountAssetsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryAccountAssetsResponse

  /// AccountDelegationUnbondings ...
  @Sendable func accountDelegationUnbondings(
    request: Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse

  /// AccountFundedList returns all pools the given user has funded into.
  @Sendable func accountFundedList(
    request: Kyve_Query_V1beta1_QueryAccountFundedListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryAccountFundedListResponse

  /// AccountRedelegation ...
  @Sendable func accountRedelegation(
    request: Kyve_Query_V1beta1_QueryAccountRedelegationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryAccountRedelegationResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryAccountAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryAccountServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryAccountServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryAccountServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AccountAssets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountAssetsRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountAssetsResponse>(),
        interceptors: self.interceptors?.makeAccountAssetsInterceptors() ?? [],
        wrapping: self.accountAssets(request:context:)
      )

    case "AccountDelegationUnbondings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>(),
        interceptors: self.interceptors?.makeAccountDelegationUnbondingsInterceptors() ?? [],
        wrapping: self.accountDelegationUnbondings(request:context:)
      )

    case "AccountFundedList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountFundedListRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountFundedListResponse>(),
        interceptors: self.interceptors?.makeAccountFundedListInterceptors() ?? [],
        wrapping: self.accountFundedList(request:context:)
      )

    case "AccountRedelegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryAccountRedelegationRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryAccountRedelegationResponse>(),
        interceptors: self.interceptors?.makeAccountRedelegationInterceptors() ?? [],
        wrapping: self.accountRedelegation(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Query_V1beta1_QueryAccountServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'accountAssets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountAssetsInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryAccountAssetsRequest, Kyve_Query_V1beta1_QueryAccountAssetsResponse>]

  /// - Returns: Interceptors to use when handling 'accountDelegationUnbondings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountDelegationUnbondingsInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsRequest, Kyve_Query_V1beta1_QueryAccountDelegationUnbondingsResponse>]

  /// - Returns: Interceptors to use when handling 'accountFundedList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountFundedListInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryAccountFundedListRequest, Kyve_Query_V1beta1_QueryAccountFundedListResponse>]

  /// - Returns: Interceptors to use when handling 'accountRedelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountRedelegationInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryAccountRedelegationRequest, Kyve_Query_V1beta1_QueryAccountRedelegationResponse>]
}

internal enum Kyve_Query_V1beta1_QueryAccountServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryAccount",
    fullName: "kyve.query.v1beta1.QueryAccount",
    methods: [
      Kyve_Query_V1beta1_QueryAccountServerMetadata.Methods.accountAssets,
      Kyve_Query_V1beta1_QueryAccountServerMetadata.Methods.accountDelegationUnbondings,
      Kyve_Query_V1beta1_QueryAccountServerMetadata.Methods.accountFundedList,
      Kyve_Query_V1beta1_QueryAccountServerMetadata.Methods.accountRedelegation,
    ]
  )

  internal enum Methods {
    internal static let accountAssets = GRPCMethodDescriptor(
      name: "AccountAssets",
      path: "/kyve.query.v1beta1.QueryAccount/AccountAssets",
      type: GRPCCallType.unary
    )

    internal static let accountDelegationUnbondings = GRPCMethodDescriptor(
      name: "AccountDelegationUnbondings",
      path: "/kyve.query.v1beta1.QueryAccount/AccountDelegationUnbondings",
      type: GRPCCallType.unary
    )

    internal static let accountFundedList = GRPCMethodDescriptor(
      name: "AccountFundedList",
      path: "/kyve.query.v1beta1.QueryAccount/AccountFundedList",
      type: GRPCCallType.unary
    )

    internal static let accountRedelegation = GRPCMethodDescriptor(
      name: "AccountRedelegation",
      path: "/kyve.query.v1beta1.QueryAccount/AccountRedelegation",
      type: GRPCCallType.unary
    )
  }
}
