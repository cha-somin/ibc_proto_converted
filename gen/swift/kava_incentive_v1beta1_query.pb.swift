// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/incentive/v1beta1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryParamsRequest is the request type for the Query/Params RPC method.
struct Kava_Incentive_V1beta1_QueryParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is the response type for the Query/Params RPC method.
struct Kava_Incentive_V1beta1_QueryParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Kava_Incentive_V1beta1_Params {
    get {return _params ?? Kava_Incentive_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Kava_Incentive_V1beta1_Params? = nil
}

/// QueryRewardsRequest is the request type for the Query/Rewards RPC method.
struct Kava_Incentive_V1beta1_QueryRewardsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// owner is the address of the user to query rewards for.
  var owner: String = String()

  /// reward_type is the type of reward to query rewards for, e.g. hard, earn,
  /// swap.
  var rewardType: String = String()

  /// unsynchronized is a flag to query rewards that are not simulated for reward
  /// synchronized for the current block.
  var unsynchronized: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryRewardsResponse is the response type for the Query/Rewards RPC method.
struct Kava_Incentive_V1beta1_QueryRewardsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var usdxMintingClaims: [Kava_Incentive_V1beta1_USDXMintingClaim] = []

  var hardLiquidityProviderClaims: [Kava_Incentive_V1beta1_HardLiquidityProviderClaim] = []

  var delegatorClaims: [Kava_Incentive_V1beta1_DelegatorClaim] = []

  var swapClaims: [Kava_Incentive_V1beta1_SwapClaim] = []

  var savingsClaims: [Kava_Incentive_V1beta1_SavingsClaim] = []

  var earnClaims: [Kava_Incentive_V1beta1_EarnClaim] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryRewardFactorsRequest is the request type for the Query/RewardFactors RPC method.
struct Kava_Incentive_V1beta1_QueryRewardFactorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryRewardFactorsResponse is the response type for the Query/RewardFactors RPC method.
struct Kava_Incentive_V1beta1_QueryRewardFactorsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var usdxMintingRewardFactors: [Kava_Incentive_V1beta1_RewardIndex] = []

  var hardSupplyRewardFactors: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var hardBorrowRewardFactors: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var delegatorRewardFactors: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var swapRewardFactors: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var savingsRewardFactors: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var earnRewardFactors: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryApysRequest is the request type for the Query/Apys RPC method.
struct Kava_Incentive_V1beta1_QueryApyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryApysResponse is the response type for the Query/Apys RPC method.
struct Kava_Incentive_V1beta1_QueryApyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var earn: [Kava_Incentive_V1beta1_Apy] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kava_Incentive_V1beta1_QueryParamsRequest: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryParamsResponse: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryRewardsRequest: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryRewardsResponse: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryRewardFactorsRequest: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryRewardFactorsResponse: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryApyRequest: @unchecked Sendable {}
extension Kava_Incentive_V1beta1_QueryApyResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.incentive.v1beta1"

extension Kava_Incentive_V1beta1_QueryParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryParamsRequest, rhs: Kava_Incentive_V1beta1_QueryParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryParamsResponse, rhs: Kava_Incentive_V1beta1_QueryParamsResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryRewardsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryRewardsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "reward_type"),
    3: .same(proto: "unsynchronized"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rewardType) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.unsynchronized) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.rewardType.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardType, fieldNumber: 2)
    }
    if self.unsynchronized != false {
      try visitor.visitSingularBoolField(value: self.unsynchronized, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryRewardsRequest, rhs: Kava_Incentive_V1beta1_QueryRewardsRequest) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.rewardType != rhs.rewardType {return false}
    if lhs.unsynchronized != rhs.unsynchronized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryRewardsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryRewardsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "usdx_minting_claims"),
    2: .standard(proto: "hard_liquidity_provider_claims"),
    3: .standard(proto: "delegator_claims"),
    4: .standard(proto: "swap_claims"),
    5: .standard(proto: "savings_claims"),
    6: .standard(proto: "earn_claims"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.usdxMintingClaims) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.hardLiquidityProviderClaims) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.delegatorClaims) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.swapClaims) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.savingsClaims) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.earnClaims) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.usdxMintingClaims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.usdxMintingClaims, fieldNumber: 1)
    }
    if !self.hardLiquidityProviderClaims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hardLiquidityProviderClaims, fieldNumber: 2)
    }
    if !self.delegatorClaims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegatorClaims, fieldNumber: 3)
    }
    if !self.swapClaims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.swapClaims, fieldNumber: 4)
    }
    if !self.savingsClaims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.savingsClaims, fieldNumber: 5)
    }
    if !self.earnClaims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.earnClaims, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryRewardsResponse, rhs: Kava_Incentive_V1beta1_QueryRewardsResponse) -> Bool {
    if lhs.usdxMintingClaims != rhs.usdxMintingClaims {return false}
    if lhs.hardLiquidityProviderClaims != rhs.hardLiquidityProviderClaims {return false}
    if lhs.delegatorClaims != rhs.delegatorClaims {return false}
    if lhs.swapClaims != rhs.swapClaims {return false}
    if lhs.savingsClaims != rhs.savingsClaims {return false}
    if lhs.earnClaims != rhs.earnClaims {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryRewardFactorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryRewardFactorsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryRewardFactorsRequest, rhs: Kava_Incentive_V1beta1_QueryRewardFactorsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryRewardFactorsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryRewardFactorsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "usdx_minting_reward_factors"),
    2: .standard(proto: "hard_supply_reward_factors"),
    3: .standard(proto: "hard_borrow_reward_factors"),
    4: .standard(proto: "delegator_reward_factors"),
    5: .standard(proto: "swap_reward_factors"),
    6: .standard(proto: "savings_reward_factors"),
    7: .standard(proto: "earn_reward_factors"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.usdxMintingRewardFactors) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.hardSupplyRewardFactors) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.hardBorrowRewardFactors) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.delegatorRewardFactors) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.swapRewardFactors) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.savingsRewardFactors) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.earnRewardFactors) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.usdxMintingRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.usdxMintingRewardFactors, fieldNumber: 1)
    }
    if !self.hardSupplyRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hardSupplyRewardFactors, fieldNumber: 2)
    }
    if !self.hardBorrowRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hardBorrowRewardFactors, fieldNumber: 3)
    }
    if !self.delegatorRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegatorRewardFactors, fieldNumber: 4)
    }
    if !self.swapRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.swapRewardFactors, fieldNumber: 5)
    }
    if !self.savingsRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.savingsRewardFactors, fieldNumber: 6)
    }
    if !self.earnRewardFactors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.earnRewardFactors, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryRewardFactorsResponse, rhs: Kava_Incentive_V1beta1_QueryRewardFactorsResponse) -> Bool {
    if lhs.usdxMintingRewardFactors != rhs.usdxMintingRewardFactors {return false}
    if lhs.hardSupplyRewardFactors != rhs.hardSupplyRewardFactors {return false}
    if lhs.hardBorrowRewardFactors != rhs.hardBorrowRewardFactors {return false}
    if lhs.delegatorRewardFactors != rhs.delegatorRewardFactors {return false}
    if lhs.swapRewardFactors != rhs.swapRewardFactors {return false}
    if lhs.savingsRewardFactors != rhs.savingsRewardFactors {return false}
    if lhs.earnRewardFactors != rhs.earnRewardFactors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryApyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryApyRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryApyRequest, rhs: Kava_Incentive_V1beta1_QueryApyRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_QueryApyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryApyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "earn"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.earn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.earn.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.earn, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_QueryApyResponse, rhs: Kava_Incentive_V1beta1_QueryApyResponse) -> Bool {
    if lhs.earn != rhs.earn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
