//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/applications/transfer/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query provides defines the gRPC querier service.
///
/// Usage: instantiate `Ibc_Applications_Transfer_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Applications_Transfer_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? { get }

  func denomTrace(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>

  func denomTraces(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>

  func params(
    _ request: Ibc_Applications_Transfer_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryParamsRequest, Ibc_Applications_Transfer_V1_QueryParamsResponse>

  func denomHash(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryDenomHashRequest, Ibc_Applications_Transfer_V1_QueryDenomHashResponse>

  func escrowAddress(
    _ request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>

  func totalEscrowForDenom(
    _ request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>
}

extension Ibc_Applications_Transfer_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "ibc.applications.transfer.v1.Query"
  }

  /// DenomTrace queries a denomination trace information.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomTrace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomTrace(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, Ibc_Applications_Transfer_V1_QueryDenomTraceResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTrace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomTraceInterceptors() ?? []
    )
  }

  /// DenomTraces queries all denomination traces.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomTraces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomTraces(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, Ibc_Applications_Transfer_V1_QueryDenomTracesResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTraces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomTracesInterceptors() ?? []
    )
  }

  /// Params queries all parameters of the ibc-transfer module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Ibc_Applications_Transfer_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryParamsRequest, Ibc_Applications_Transfer_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DenomHash queries a denomination hash information.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomHash(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryDenomHashRequest, Ibc_Applications_Transfer_V1_QueryDenomHashResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomHashInterceptors() ?? []
    )
  }

  /// EscrowAddress returns the escrow address for a particular port and channel id.
  ///
  /// - Parameters:
  ///   - request: Request to send to EscrowAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func escrowAddress(
    _ request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.escrowAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEscrowAddressInterceptors() ?? []
    )
  }

  /// TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalEscrowForDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalEscrowForDenom(
    _ request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.totalEscrowForDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalEscrowForDenomInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ibc_Applications_Transfer_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ibc_Applications_Transfer_V1_QueryNIOClient")
internal final class Ibc_Applications_Transfer_V1_QueryClient: Ibc_Applications_Transfer_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.applications.transfer.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ibc_Applications_Transfer_V1_QueryNIOClient: Ibc_Applications_Transfer_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.applications.transfer.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Applications_Transfer_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeDenomTraceCall(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>

  func makeDenomTracesCall(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>

  func makeParamsCall(
    _ request: Ibc_Applications_Transfer_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryParamsRequest, Ibc_Applications_Transfer_V1_QueryParamsResponse>

  func makeDenomHashCall(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryDenomHashRequest, Ibc_Applications_Transfer_V1_QueryDenomHashResponse>

  func makeEscrowAddressCall(
    _ request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>

  func makeTotalEscrowForDenomCall(
    _ request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Applications_Transfer_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Applications_Transfer_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDenomTraceCall(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, Ibc_Applications_Transfer_V1_QueryDenomTraceResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTrace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomTraceInterceptors() ?? []
    )
  }

  internal func makeDenomTracesCall(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, Ibc_Applications_Transfer_V1_QueryDenomTracesResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTraces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomTracesInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Ibc_Applications_Transfer_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryParamsRequest, Ibc_Applications_Transfer_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeDenomHashCall(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryDenomHashRequest, Ibc_Applications_Transfer_V1_QueryDenomHashResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomHashInterceptors() ?? []
    )
  }

  internal func makeEscrowAddressCall(
    _ request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.escrowAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEscrowAddressInterceptors() ?? []
    )
  }

  internal func makeTotalEscrowForDenomCall(
    _ request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.totalEscrowForDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalEscrowForDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Applications_Transfer_V1_QueryAsyncClientProtocol {
  internal func denomTrace(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Transfer_V1_QueryDenomTraceResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTrace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomTraceInterceptors() ?? []
    )
  }

  internal func denomTraces(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Transfer_V1_QueryDenomTracesResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTraces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomTracesInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Ibc_Applications_Transfer_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Transfer_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func denomHash(
    _ request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Transfer_V1_QueryDenomHashResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomHashInterceptors() ?? []
    )
  }

  internal func escrowAddress(
    _ request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.escrowAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEscrowAddressInterceptors() ?? []
    )
  }

  internal func totalEscrowForDenom(
    _ request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.totalEscrowForDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalEscrowForDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ibc_Applications_Transfer_V1_QueryAsyncClient: Ibc_Applications_Transfer_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ibc_Applications_Transfer_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'denomTrace'.
  func makeDenomTraceInterceptors() -> [ClientInterceptor<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>]

  /// - Returns: Interceptors to use when invoking 'denomTraces'.
  func makeDenomTracesInterceptors() -> [ClientInterceptor<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Ibc_Applications_Transfer_V1_QueryParamsRequest, Ibc_Applications_Transfer_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'denomHash'.
  func makeDenomHashInterceptors() -> [ClientInterceptor<Ibc_Applications_Transfer_V1_QueryDenomHashRequest, Ibc_Applications_Transfer_V1_QueryDenomHashResponse>]

  /// - Returns: Interceptors to use when invoking 'escrowAddress'.
  func makeEscrowAddressInterceptors() -> [ClientInterceptor<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'totalEscrowForDenom'.
  func makeTotalEscrowForDenomInterceptors() -> [ClientInterceptor<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>]
}

internal enum Ibc_Applications_Transfer_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.applications.transfer.v1.Query",
    methods: [
      Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTrace,
      Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomTraces,
      Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.params,
      Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.denomHash,
      Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.escrowAddress,
      Ibc_Applications_Transfer_V1_QueryClientMetadata.Methods.totalEscrowForDenom,
    ]
  )

  internal enum Methods {
    internal static let denomTrace = GRPCMethodDescriptor(
      name: "DenomTrace",
      path: "/ibc.applications.transfer.v1.Query/DenomTrace",
      type: GRPCCallType.unary
    )

    internal static let denomTraces = GRPCMethodDescriptor(
      name: "DenomTraces",
      path: "/ibc.applications.transfer.v1.Query/DenomTraces",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/ibc.applications.transfer.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let denomHash = GRPCMethodDescriptor(
      name: "DenomHash",
      path: "/ibc.applications.transfer.v1.Query/DenomHash",
      type: GRPCCallType.unary
    )

    internal static let escrowAddress = GRPCMethodDescriptor(
      name: "EscrowAddress",
      path: "/ibc.applications.transfer.v1.Query/EscrowAddress",
      type: GRPCCallType.unary
    )

    internal static let totalEscrowForDenom = GRPCMethodDescriptor(
      name: "TotalEscrowForDenom",
      path: "/ibc.applications.transfer.v1.Query/TotalEscrowForDenom",
      type: GRPCCallType.unary
    )
  }
}

/// Query provides defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ibc_Applications_Transfer_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Ibc_Applications_Transfer_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// DenomTrace queries a denomination trace information.
  func denomTrace(request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>

  /// DenomTraces queries all denomination traces.
  func denomTraces(request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>

  /// Params queries all parameters of the ibc-transfer module.
  func params(request: Ibc_Applications_Transfer_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Transfer_V1_QueryParamsResponse>

  /// DenomHash queries a denomination hash information.
  func denomHash(request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Transfer_V1_QueryDenomHashResponse>

  /// EscrowAddress returns the escrow address for a particular port and channel id.
  func escrowAddress(request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>

  /// TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.
  func totalEscrowForDenom(request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>
}

extension Ibc_Applications_Transfer_V1_QueryProvider {
  internal var serviceName: Substring {
    return Ibc_Applications_Transfer_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DenomTrace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>(),
        interceptors: self.interceptors?.makeDenomTraceInterceptors() ?? [],
        userFunction: self.denomTrace(request:context:)
      )

    case "DenomTraces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>(),
        interceptors: self.interceptors?.makeDenomTracesInterceptors() ?? [],
        userFunction: self.denomTraces(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "DenomHash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryDenomHashRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryDenomHashResponse>(),
        interceptors: self.interceptors?.makeDenomHashInterceptors() ?? [],
        userFunction: self.denomHash(request:context:)
      )

    case "EscrowAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>(),
        interceptors: self.interceptors?.makeEscrowAddressInterceptors() ?? [],
        userFunction: self.escrowAddress(request:context:)
      )

    case "TotalEscrowForDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>(),
        interceptors: self.interceptors?.makeTotalEscrowForDenomInterceptors() ?? [],
        userFunction: self.totalEscrowForDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query provides defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Applications_Transfer_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Applications_Transfer_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// DenomTrace queries a denomination trace information.
  @Sendable func denomTrace(
    request: Ibc_Applications_Transfer_V1_QueryDenomTraceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Transfer_V1_QueryDenomTraceResponse

  /// DenomTraces queries all denomination traces.
  @Sendable func denomTraces(
    request: Ibc_Applications_Transfer_V1_QueryDenomTracesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Transfer_V1_QueryDenomTracesResponse

  /// Params queries all parameters of the ibc-transfer module.
  @Sendable func params(
    request: Ibc_Applications_Transfer_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Transfer_V1_QueryParamsResponse

  /// DenomHash queries a denomination hash information.
  @Sendable func denomHash(
    request: Ibc_Applications_Transfer_V1_QueryDenomHashRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Transfer_V1_QueryDenomHashResponse

  /// EscrowAddress returns the escrow address for a particular port and channel id.
  @Sendable func escrowAddress(
    request: Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse

  /// TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.
  @Sendable func totalEscrowForDenom(
    request: Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Applications_Transfer_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Applications_Transfer_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ibc_Applications_Transfer_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ibc_Applications_Transfer_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DenomTrace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>(),
        interceptors: self.interceptors?.makeDenomTraceInterceptors() ?? [],
        wrapping: self.denomTrace(request:context:)
      )

    case "DenomTraces":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>(),
        interceptors: self.interceptors?.makeDenomTracesInterceptors() ?? [],
        wrapping: self.denomTraces(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "DenomHash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryDenomHashRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryDenomHashResponse>(),
        interceptors: self.interceptors?.makeDenomHashInterceptors() ?? [],
        wrapping: self.denomHash(request:context:)
      )

    case "EscrowAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>(),
        interceptors: self.interceptors?.makeEscrowAddressInterceptors() ?? [],
        wrapping: self.escrowAddress(request:context:)
      )

    case "TotalEscrowForDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>(),
        interceptors: self.interceptors?.makeTotalEscrowForDenomInterceptors() ?? [],
        wrapping: self.totalEscrowForDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ibc_Applications_Transfer_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'denomTrace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomTraceInterceptors() -> [ServerInterceptor<Ibc_Applications_Transfer_V1_QueryDenomTraceRequest, Ibc_Applications_Transfer_V1_QueryDenomTraceResponse>]

  /// - Returns: Interceptors to use when handling 'denomTraces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomTracesInterceptors() -> [ServerInterceptor<Ibc_Applications_Transfer_V1_QueryDenomTracesRequest, Ibc_Applications_Transfer_V1_QueryDenomTracesResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Ibc_Applications_Transfer_V1_QueryParamsRequest, Ibc_Applications_Transfer_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'denomHash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomHashInterceptors() -> [ServerInterceptor<Ibc_Applications_Transfer_V1_QueryDenomHashRequest, Ibc_Applications_Transfer_V1_QueryDenomHashResponse>]

  /// - Returns: Interceptors to use when handling 'escrowAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEscrowAddressInterceptors() -> [ServerInterceptor<Ibc_Applications_Transfer_V1_QueryEscrowAddressRequest, Ibc_Applications_Transfer_V1_QueryEscrowAddressResponse>]

  /// - Returns: Interceptors to use when handling 'totalEscrowForDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalEscrowForDenomInterceptors() -> [ServerInterceptor<Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomRequest, Ibc_Applications_Transfer_V1_QueryTotalEscrowForDenomResponse>]
}

internal enum Ibc_Applications_Transfer_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.applications.transfer.v1.Query",
    methods: [
      Ibc_Applications_Transfer_V1_QueryServerMetadata.Methods.denomTrace,
      Ibc_Applications_Transfer_V1_QueryServerMetadata.Methods.denomTraces,
      Ibc_Applications_Transfer_V1_QueryServerMetadata.Methods.params,
      Ibc_Applications_Transfer_V1_QueryServerMetadata.Methods.denomHash,
      Ibc_Applications_Transfer_V1_QueryServerMetadata.Methods.escrowAddress,
      Ibc_Applications_Transfer_V1_QueryServerMetadata.Methods.totalEscrowForDenom,
    ]
  )

  internal enum Methods {
    internal static let denomTrace = GRPCMethodDescriptor(
      name: "DenomTrace",
      path: "/ibc.applications.transfer.v1.Query/DenomTrace",
      type: GRPCCallType.unary
    )

    internal static let denomTraces = GRPCMethodDescriptor(
      name: "DenomTraces",
      path: "/ibc.applications.transfer.v1.Query/DenomTraces",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/ibc.applications.transfer.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let denomHash = GRPCMethodDescriptor(
      name: "DenomHash",
      path: "/ibc.applications.transfer.v1.Query/DenomHash",
      type: GRPCCallType.unary
    )

    internal static let escrowAddress = GRPCMethodDescriptor(
      name: "EscrowAddress",
      path: "/ibc.applications.transfer.v1.Query/EscrowAddress",
      type: GRPCCallType.unary
    )

    internal static let totalEscrowForDenom = GRPCMethodDescriptor(
      name: "TotalEscrowForDenom",
      path: "/ibc.applications.transfer.v1.Query/TotalEscrowForDenom",
      type: GRPCCallType.unary
    )
  }
}
