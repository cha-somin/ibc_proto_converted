// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/vault/v1beta1/vault.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///app_vault_type_id will be the key for  the KVStore for this value.
struct Comdex_Vault_V1beta1_Vault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var appID: UInt64 = 0

  var extendedPairVaultID: UInt64 = 0

  var owner: String = String()

  var amountIn: String = String()

  var amountOut: String = String()

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var interestAccumulated: String = String()

  var closingFeeAccumulated: String = String()

  var blockHeight: Int64 = 0

  var blockTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _blockTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_blockTime = newValue}
  }
  /// Returns true if `blockTime` has been explicitly set.
  var hasBlockTime: Bool {return self._blockTime != nil}
  /// Clears the value of `blockTime`. Subsequent reads from it will return its default value.
  mutating func clearBlockTime() {self._blockTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _blockTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Vault_V1beta1_OwnerAppExtendedPairVaultMappingData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var appID: UInt64 = 0

  var extendedPairID: UInt64 = 0

  var vaultID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Vault_V1beta1_AppExtendedPairVaultMappingData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var extendedPairID: UInt64 = 0

  var vaultIds: [UInt64] = []

  var tokenMintedAmount: String = String()

  var collateralLockedAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Vault_V1beta1_TvlLockedDataMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetDenom: String = String()

  var collateralLockedAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Vault_V1beta1_MintedDataMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetDenom: String = String()

  var mintedAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Vault_V1beta1_StableMintVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var amountIn: String = String()

  var amountOut: String = String()

  var appID: UInt64 = 0

  var extendedPairVaultID: UInt64 = 0

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Vault_V1beta1_PairStatisticData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetInDenom: String = String()

  var assetOutDenom: String = String()

  var collateralAmount: String = String()

  var mintedAmount: String = String()

  var extendedPairVaultID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Vault_V1beta1_StableMintVaultRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var stableExtendedPairID: UInt64 = 0

  var user: String = String()

  var blockHeight: UInt64 = 0

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Vault_V1beta1_Vault: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_OwnerAppExtendedPairVaultMappingData: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_AppExtendedPairVaultMappingData: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_TvlLockedDataMap: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_MintedDataMap: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_StableMintVault: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_PairStatisticData: @unchecked Sendable {}
extension Comdex_Vault_V1beta1_StableMintVaultRewards: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.vault.v1beta1"

extension Comdex_Vault_V1beta1_Vault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "extended_pair_vault_id"),
    4: .same(proto: "owner"),
    5: .standard(proto: "amount_in"),
    6: .standard(proto: "amount_out"),
    7: .standard(proto: "created_at"),
    8: .standard(proto: "interest_accumulated"),
    9: .standard(proto: "closing_fee_accumulated"),
    10: .standard(proto: "block_height"),
    11: .standard(proto: "block_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.extendedPairVaultID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.amountIn) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.amountOut) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.interestAccumulated) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.closingFeeAccumulated) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.blockHeight) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._blockTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 2)
    }
    if self.extendedPairVaultID != 0 {
      try visitor.visitSingularUInt64Field(value: self.extendedPairVaultID, fieldNumber: 3)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 4)
    }
    if !self.amountIn.isEmpty {
      try visitor.visitSingularStringField(value: self.amountIn, fieldNumber: 5)
    }
    if !self.amountOut.isEmpty {
      try visitor.visitSingularStringField(value: self.amountOut, fieldNumber: 6)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.interestAccumulated.isEmpty {
      try visitor.visitSingularStringField(value: self.interestAccumulated, fieldNumber: 8)
    }
    if !self.closingFeeAccumulated.isEmpty {
      try visitor.visitSingularStringField(value: self.closingFeeAccumulated, fieldNumber: 9)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.blockHeight, fieldNumber: 10)
    }
    try { if let v = self._blockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_Vault, rhs: Comdex_Vault_V1beta1_Vault) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.extendedPairVaultID != rhs.extendedPairVaultID {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.amountIn != rhs.amountIn {return false}
    if lhs.amountOut != rhs.amountOut {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.interestAccumulated != rhs.interestAccumulated {return false}
    if lhs.closingFeeAccumulated != rhs.closingFeeAccumulated {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs._blockTime != rhs._blockTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_OwnerAppExtendedPairVaultMappingData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OwnerAppExtendedPairVaultMappingData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "extended_pair_id"),
    4: .standard(proto: "vault_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.extendedPairID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.vaultID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 2)
    }
    if self.extendedPairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.extendedPairID, fieldNumber: 3)
    }
    if self.vaultID != 0 {
      try visitor.visitSingularUInt64Field(value: self.vaultID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_OwnerAppExtendedPairVaultMappingData, rhs: Comdex_Vault_V1beta1_OwnerAppExtendedPairVaultMappingData) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.extendedPairID != rhs.extendedPairID {return false}
    if lhs.vaultID != rhs.vaultID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_AppExtendedPairVaultMappingData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppExtendedPairVaultMappingData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "extended_pair_id"),
    3: .standard(proto: "vault_ids"),
    4: .standard(proto: "token_minted_amount"),
    5: .standard(proto: "collateral_locked_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.extendedPairID) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.vaultIds) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenMintedAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.collateralLockedAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.extendedPairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.extendedPairID, fieldNumber: 2)
    }
    if !self.vaultIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.vaultIds, fieldNumber: 3)
    }
    if !self.tokenMintedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenMintedAmount, fieldNumber: 4)
    }
    if !self.collateralLockedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralLockedAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_AppExtendedPairVaultMappingData, rhs: Comdex_Vault_V1beta1_AppExtendedPairVaultMappingData) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.extendedPairID != rhs.extendedPairID {return false}
    if lhs.vaultIds != rhs.vaultIds {return false}
    if lhs.tokenMintedAmount != rhs.tokenMintedAmount {return false}
    if lhs.collateralLockedAmount != rhs.collateralLockedAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_TvlLockedDataMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TvlLockedDataMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_denom"),
    2: .standard(proto: "collateral_locked_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.assetDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralLockedAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.assetDenom, fieldNumber: 1)
    }
    if !self.collateralLockedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralLockedAmount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_TvlLockedDataMap, rhs: Comdex_Vault_V1beta1_TvlLockedDataMap) -> Bool {
    if lhs.assetDenom != rhs.assetDenom {return false}
    if lhs.collateralLockedAmount != rhs.collateralLockedAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_MintedDataMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MintedDataMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_denom"),
    2: .standard(proto: "minted_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.assetDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mintedAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.assetDenom, fieldNumber: 1)
    }
    if !self.mintedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.mintedAmount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_MintedDataMap, rhs: Comdex_Vault_V1beta1_MintedDataMap) -> Bool {
    if lhs.assetDenom != rhs.assetDenom {return false}
    if lhs.mintedAmount != rhs.mintedAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_StableMintVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StableMintVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "amount_in"),
    3: .standard(proto: "amount_out"),
    4: .standard(proto: "app_id"),
    5: .standard(proto: "extended_pair_vault_id"),
    6: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amountIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amountOut) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.extendedPairVaultID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.amountIn.isEmpty {
      try visitor.visitSingularStringField(value: self.amountIn, fieldNumber: 2)
    }
    if !self.amountOut.isEmpty {
      try visitor.visitSingularStringField(value: self.amountOut, fieldNumber: 3)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 4)
    }
    if self.extendedPairVaultID != 0 {
      try visitor.visitSingularUInt64Field(value: self.extendedPairVaultID, fieldNumber: 5)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_StableMintVault, rhs: Comdex_Vault_V1beta1_StableMintVault) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.amountIn != rhs.amountIn {return false}
    if lhs.amountOut != rhs.amountOut {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.extendedPairVaultID != rhs.extendedPairVaultID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_PairStatisticData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PairStatisticData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_in_denom"),
    2: .standard(proto: "asset_out_denom"),
    3: .standard(proto: "collateral_amount"),
    4: .standard(proto: "minted_amount"),
    5: .standard(proto: "extended_pair_vault_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.assetInDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.assetOutDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.collateralAmount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mintedAmount) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.extendedPairVaultID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetInDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.assetInDenom, fieldNumber: 1)
    }
    if !self.assetOutDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.assetOutDenom, fieldNumber: 2)
    }
    if !self.collateralAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralAmount, fieldNumber: 3)
    }
    if !self.mintedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.mintedAmount, fieldNumber: 4)
    }
    if self.extendedPairVaultID != 0 {
      try visitor.visitSingularUInt64Field(value: self.extendedPairVaultID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_PairStatisticData, rhs: Comdex_Vault_V1beta1_PairStatisticData) -> Bool {
    if lhs.assetInDenom != rhs.assetInDenom {return false}
    if lhs.assetOutDenom != rhs.assetOutDenom {return false}
    if lhs.collateralAmount != rhs.collateralAmount {return false}
    if lhs.mintedAmount != rhs.mintedAmount {return false}
    if lhs.extendedPairVaultID != rhs.extendedPairVaultID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_StableMintVaultRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StableMintVaultRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "stable_extended_pair_id"),
    3: .same(proto: "user"),
    4: .standard(proto: "block_height"),
    5: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.stableExtendedPairID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.user) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.stableExtendedPairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.stableExtendedPairID, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 4)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_StableMintVaultRewards, rhs: Comdex_Vault_V1beta1_StableMintVaultRewards) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.stableExtendedPairID != rhs.stableExtendedPairID {return false}
    if lhs.user != rhs.user {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
