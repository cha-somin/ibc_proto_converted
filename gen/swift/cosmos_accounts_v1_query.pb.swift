// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/accounts/v1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AccountQueryRequest is the request type for the Query/AccountQuery RPC
struct Cosmos_Accounts_V1_AccountQueryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// target defines the account to be queried.
  var target: String = String()

  /// request defines the query message being sent to the account.
  var request: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AccountQueryResponse is the response type for the Query/AccountQuery RPC method.
struct Cosmos_Accounts_V1_AccountQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// response defines the query response of the account.
  var response: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SchemaResponse is the response type for the Query/Schema RPC method.
struct Cosmos_Accounts_V1_SchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// account_type defines the account type to query the schema for.
  var accountType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SchemaResponse is the response type for the Query/Schema RPC method.
struct Cosmos_Accounts_V1_SchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// init_schema defines the schema descriptor for the Init account method.
  var initSchema: Cosmos_Accounts_V1_SchemaResponse.Handler {
    get {return _initSchema ?? Cosmos_Accounts_V1_SchemaResponse.Handler()}
    set {_initSchema = newValue}
  }
  /// Returns true if `initSchema` has been explicitly set.
  var hasInitSchema: Bool {return self._initSchema != nil}
  /// Clears the value of `initSchema`. Subsequent reads from it will return its default value.
  mutating func clearInitSchema() {self._initSchema = nil}

  /// execute_handlers defines the schema descriptor for the Execute account method.
  var executeHandlers: [Cosmos_Accounts_V1_SchemaResponse.Handler] = []

  /// query_handlers defines the schema descriptor for the Query account method.
  var queryHandlers: [Cosmos_Accounts_V1_SchemaResponse.Handler] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Handler defines a schema descriptor for a handler.
  /// Where request and response are names that can be used to lookup the
  /// reflection descriptor.
  struct Handler {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// request is the request name
    var request: String = String()

    /// response is the response name
    var response: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _initSchema: Cosmos_Accounts_V1_SchemaResponse.Handler? = nil
}

/// AccountTypeRequest is the request type for the Query/AccountType RPC method.
struct Cosmos_Accounts_V1_AccountTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address defines the address to query the account type for.
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AccountTypeResponse is the response type for the Query/AccountType RPC method.
struct Cosmos_Accounts_V1_AccountTypeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// account_type defines the account type for the address.
  var accountType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cosmos_Accounts_V1_AccountQueryRequest: @unchecked Sendable {}
extension Cosmos_Accounts_V1_AccountQueryResponse: @unchecked Sendable {}
extension Cosmos_Accounts_V1_SchemaRequest: @unchecked Sendable {}
extension Cosmos_Accounts_V1_SchemaResponse: @unchecked Sendable {}
extension Cosmos_Accounts_V1_SchemaResponse.Handler: @unchecked Sendable {}
extension Cosmos_Accounts_V1_AccountTypeRequest: @unchecked Sendable {}
extension Cosmos_Accounts_V1_AccountTypeResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.accounts.v1"

extension Cosmos_Accounts_V1_AccountQueryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountQueryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.target) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.request) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.target.isEmpty {
      try visitor.visitSingularStringField(value: self.target, fieldNumber: 1)
    }
    if !self.request.isEmpty {
      try visitor.visitSingularBytesField(value: self.request, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_AccountQueryRequest, rhs: Cosmos_Accounts_V1_AccountQueryRequest) -> Bool {
    if lhs.target != rhs.target {return false}
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Accounts_V1_AccountQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountQueryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.response.isEmpty {
      try visitor.visitSingularBytesField(value: self.response, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_AccountQueryResponse, rhs: Cosmos_Accounts_V1_AccountQueryResponse) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Accounts_V1_SchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SchemaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountType.isEmpty {
      try visitor.visitSingularStringField(value: self.accountType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_SchemaRequest, rhs: Cosmos_Accounts_V1_SchemaRequest) -> Bool {
    if lhs.accountType != rhs.accountType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Accounts_V1_SchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SchemaResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "init_schema"),
    2: .standard(proto: "execute_handlers"),
    3: .standard(proto: "query_handlers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._initSchema) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.executeHandlers) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.queryHandlers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._initSchema {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.executeHandlers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.executeHandlers, fieldNumber: 2)
    }
    if !self.queryHandlers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryHandlers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_SchemaResponse, rhs: Cosmos_Accounts_V1_SchemaResponse) -> Bool {
    if lhs._initSchema != rhs._initSchema {return false}
    if lhs.executeHandlers != rhs.executeHandlers {return false}
    if lhs.queryHandlers != rhs.queryHandlers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Accounts_V1_SchemaResponse.Handler: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Cosmos_Accounts_V1_SchemaResponse.protoMessageName + ".Handler"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.request) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.request.isEmpty {
      try visitor.visitSingularStringField(value: self.request, fieldNumber: 1)
    }
    if !self.response.isEmpty {
      try visitor.visitSingularStringField(value: self.response, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_SchemaResponse.Handler, rhs: Cosmos_Accounts_V1_SchemaResponse.Handler) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Accounts_V1_AccountTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountTypeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_AccountTypeRequest, rhs: Cosmos_Accounts_V1_AccountTypeRequest) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Accounts_V1_AccountTypeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountTypeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountType.isEmpty {
      try visitor.visitSingularStringField(value: self.accountType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Accounts_V1_AccountTypeResponse, rhs: Cosmos_Accounts_V1_AccountTypeResponse) -> Bool {
    if lhs.accountType != rhs.accountType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
