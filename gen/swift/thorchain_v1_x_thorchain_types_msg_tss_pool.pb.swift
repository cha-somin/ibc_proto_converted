// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/msg_tss_pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_MsgTssPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var poolPubKey: String = String()

  var keygenType: Types_KeygenType = .unknownKeygen

  var pubKeys: [String] = []

  var height: Int64 = 0

  var blame: Types_Blame {
    get {return _blame ?? Types_Blame()}
    set {_blame = newValue}
  }
  /// Returns true if `blame` has been explicitly set.
  var hasBlame: Bool {return self._blame != nil}
  /// Clears the value of `blame`. Subsequent reads from it will return its default value.
  mutating func clearBlame() {self._blame = nil}

  var chains: [String] = []

  var signer: Data = Data()

  var keygenTime: Int64 = 0

  var keysharesBackup: Data = Data()

  var secp256K1Signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _blame: Types_Blame? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_MsgTssPool: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_MsgTssPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTssPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "pool_pub_key"),
    3: .standard(proto: "keygen_type"),
    4: .standard(proto: "pub_keys"),
    5: .same(proto: "height"),
    6: .same(proto: "blame"),
    7: .same(proto: "chains"),
    8: .same(proto: "signer"),
    9: .standard(proto: "keygen_time"),
    10: .standard(proto: "keyshares_backup"),
    11: .standard(proto: "secp256k1_signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.poolPubKey) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.keygenType) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.pubKeys) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._blame) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.chains) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.signer) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.keygenTime) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.keysharesBackup) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.secp256K1Signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.poolPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.poolPubKey, fieldNumber: 2)
    }
    if self.keygenType != .unknownKeygen {
      try visitor.visitSingularEnumField(value: self.keygenType, fieldNumber: 3)
    }
    if !self.pubKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pubKeys, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 5)
    }
    try { if let v = self._blame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.chains.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chains, fieldNumber: 7)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularBytesField(value: self.signer, fieldNumber: 8)
    }
    if self.keygenTime != 0 {
      try visitor.visitSingularInt64Field(value: self.keygenTime, fieldNumber: 9)
    }
    if !self.keysharesBackup.isEmpty {
      try visitor.visitSingularBytesField(value: self.keysharesBackup, fieldNumber: 10)
    }
    if !self.secp256K1Signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.secp256K1Signature, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_MsgTssPool, rhs: Types_MsgTssPool) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.poolPubKey != rhs.poolPubKey {return false}
    if lhs.keygenType != rhs.keygenType {return false}
    if lhs.pubKeys != rhs.pubKeys {return false}
    if lhs.height != rhs.height {return false}
    if lhs._blame != rhs._blame {return false}
    if lhs.chains != rhs.chains {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.keygenTime != rhs.keygenTime {return false}
    if lhs.keysharesBackup != rhs.keysharesBackup {return false}
    if lhs.secp256K1Signature != rhs.secp256K1Signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
