// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/bundles/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// VoteType ...
enum Kyve_Bundles_V1beta1_VoteType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// VOTE_TYPE_UNSPECIFIED ...
  case unspecified // = 0

  /// VOTE_TYPE_VALID ...
  case valid // = 1

  /// VOTE_TYPE_INVALID ...
  case invalid // = 2

  /// VOTE_TYPE_ABSTAIN ...
  case abstain // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .valid
    case 2: self = .invalid
    case 3: self = .abstain
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .valid: return 1
    case .invalid: return 2
    case .abstain: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Kyve_Bundles_V1beta1_VoteType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Kyve_Bundles_V1beta1_VoteType] = [
    .unspecified,
    .valid,
    .invalid,
    .abstain,
  ]
}

#endif  // swift(>=4.2)

/// MsgSubmitBundleProposal defines a SDK message for submitting a bundle proposal.
struct Kyve_Bundles_V1beta1_MsgSubmitBundleProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator ...
  var creator: String = String()

  /// staker ...
  var staker: String = String()

  /// pool_id ...
  var poolID: UInt64 = 0

  /// storage_id ...
  var storageID: String = String()

  /// data_size ...
  var dataSize: UInt64 = 0

  /// data_hash ...
  var dataHash: String = String()

  /// from_index ...
  var fromIndex: UInt64 = 0

  /// bundle_size ...
  var bundleSize: UInt64 = 0

  /// from_key
  var fromKey: String = String()

  /// to_key ...
  var toKey: String = String()

  /// bundle_summary ...
  var bundleSummary: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal response type.
struct Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgVoteBundleProposal defines a SDK message for voting on a bundle proposal.
struct Kyve_Bundles_V1beta1_MsgVoteBundleProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator ...
  var creator: String = String()

  /// staker ...
  var staker: String = String()

  /// id ...
  var poolID: UInt64 = 0

  /// storage_id ...
  var storageID: String = String()

  /// vote ...
  var vote: Kyve_Bundles_V1beta1_VoteType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgVoteBundleProposalResponse defines the Msg/VoteBundleProposal response type.
struct Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClaimUploaderRole defines a SDK message for claiming the uploader role.
struct Kyve_Bundles_V1beta1_MsgClaimUploaderRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator ...
  var creator: String = String()

  /// staker ...
  var staker: String = String()

  /// id ...
  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClaimUploaderRoleResponse defines the Msg/ClaimUploaderRole response type.
struct Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSubmitBundleProposal defines a SDK message for submitting a bundle proposal.
struct Kyve_Bundles_V1beta1_MsgSkipUploaderRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator ...
  var creator: String = String()

  /// staker ...
  var staker: String = String()

  /// pool_id ...
  var poolID: UInt64 = 0

  /// from_index ...
  var fromIndex: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSubmitBundleProposalResponse defines the Msg/SubmitBundleProposal response type.
struct Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateParams defines a SDK message for updating the module parameters.
struct Kyve_Bundles_V1beta1_MsgUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// payload defines the x/bundles parameters to update.
  var payload: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateParamsResponse defines the Msg/UpdateParams response type.
struct Kyve_Bundles_V1beta1_MsgUpdateParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Bundles_V1beta1_VoteType: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgSubmitBundleProposal: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgVoteBundleProposal: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgClaimUploaderRole: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgSkipUploaderRole: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgUpdateParams: @unchecked Sendable {}
extension Kyve_Bundles_V1beta1_MsgUpdateParamsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.bundles.v1beta1"

extension Kyve_Bundles_V1beta1_VoteType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOTE_TYPE_UNSPECIFIED"),
    1: .same(proto: "VOTE_TYPE_VALID"),
    2: .same(proto: "VOTE_TYPE_INVALID"),
    3: .same(proto: "VOTE_TYPE_ABSTAIN"),
  ]
}

extension Kyve_Bundles_V1beta1_MsgSubmitBundleProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitBundleProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "staker"),
    3: .standard(proto: "pool_id"),
    4: .standard(proto: "storage_id"),
    5: .standard(proto: "data_size"),
    6: .standard(proto: "data_hash"),
    7: .standard(proto: "from_index"),
    8: .standard(proto: "bundle_size"),
    9: .standard(proto: "from_key"),
    10: .standard(proto: "to_key"),
    11: .standard(proto: "bundle_summary"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.storageID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.dataSize) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.fromIndex) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.bundleSize) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.fromKey) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.toKey) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.bundleSummary) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if !self.storageID.isEmpty {
      try visitor.visitSingularStringField(value: self.storageID, fieldNumber: 4)
    }
    if self.dataSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.dataSize, fieldNumber: 5)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 6)
    }
    if self.fromIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.fromIndex, fieldNumber: 7)
    }
    if self.bundleSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.bundleSize, fieldNumber: 8)
    }
    if !self.fromKey.isEmpty {
      try visitor.visitSingularStringField(value: self.fromKey, fieldNumber: 9)
    }
    if !self.toKey.isEmpty {
      try visitor.visitSingularStringField(value: self.toKey, fieldNumber: 10)
    }
    if !self.bundleSummary.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleSummary, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, rhs: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.storageID != rhs.storageID {return false}
    if lhs.dataSize != rhs.dataSize {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.fromIndex != rhs.fromIndex {return false}
    if lhs.bundleSize != rhs.bundleSize {return false}
    if lhs.fromKey != rhs.fromKey {return false}
    if lhs.toKey != rhs.toKey {return false}
    if lhs.bundleSummary != rhs.bundleSummary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitBundleProposalResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse, rhs: Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgVoteBundleProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteBundleProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "staker"),
    3: .standard(proto: "pool_id"),
    4: .standard(proto: "storage_id"),
    5: .same(proto: "vote"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.storageID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.vote) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if !self.storageID.isEmpty {
      try visitor.visitSingularStringField(value: self.storageID, fieldNumber: 4)
    }
    if self.vote != .unspecified {
      try visitor.visitSingularEnumField(value: self.vote, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgVoteBundleProposal, rhs: Kyve_Bundles_V1beta1_MsgVoteBundleProposal) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.storageID != rhs.storageID {return false}
    if lhs.vote != rhs.vote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteBundleProposalResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse, rhs: Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgClaimUploaderRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimUploaderRole"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "staker"),
    3: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgClaimUploaderRole, rhs: Kyve_Bundles_V1beta1_MsgClaimUploaderRole) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimUploaderRoleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse, rhs: Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgSkipUploaderRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSkipUploaderRole"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "staker"),
    3: .standard(proto: "pool_id"),
    4: .standard(proto: "from_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.fromIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if self.fromIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.fromIndex, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgSkipUploaderRole, rhs: Kyve_Bundles_V1beta1_MsgSkipUploaderRole) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.fromIndex != rhs.fromIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSkipUploaderRoleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse, rhs: Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgUpdateParams, rhs: Kyve_Bundles_V1beta1_MsgUpdateParams) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Bundles_V1beta1_MsgUpdateParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParamsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Bundles_V1beta1_MsgUpdateParamsResponse, rhs: Kyve_Bundles_V1beta1_MsgUpdateParamsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
