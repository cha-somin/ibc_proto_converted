// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ixo/entity/v1beta1/event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EntityCreatedEvent is an event triggered on a Entity creation
struct Ixo_Entity_V1beta1_EntityCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entity: Ixo_Entity_V1beta1_Entity {
    get {return _storage._entity ?? Ixo_Entity_V1beta1_Entity()}
    set {_uniqueStorage()._entity = newValue}
  }
  /// Returns true if `entity` has been explicitly set.
  var hasEntity: Bool {return _storage._entity != nil}
  /// Clears the value of `entity`. Subsequent reads from it will return its default value.
  mutating func clearEntity() {_uniqueStorage()._entity = nil}

  var signer: String {
    get {return _storage._signer}
    set {_uniqueStorage()._signer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// EntityUpdatedEvent is an event triggered on a entity document update
struct Ixo_Entity_V1beta1_EntityUpdatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entity: Ixo_Entity_V1beta1_Entity {
    get {return _storage._entity ?? Ixo_Entity_V1beta1_Entity()}
    set {_uniqueStorage()._entity = newValue}
  }
  /// Returns true if `entity` has been explicitly set.
  var hasEntity: Bool {return _storage._entity != nil}
  /// Clears the value of `entity`. Subsequent reads from it will return its default value.
  mutating func clearEntity() {_uniqueStorage()._entity = nil}

  var signer: String {
    get {return _storage._signer}
    set {_uniqueStorage()._signer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// EntityVerifiedUpdatedEvent is an event triggered on a entity verified
/// document update
struct Ixo_Entity_V1beta1_EntityVerifiedUpdatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var signer: String = String()

  var entityVerified: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EntityTransferredEvent is an event triggered on a entity transfer
struct Ixo_Entity_V1beta1_EntityTransferredEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var from: String = String()

  var to: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EntityAccountCreatedEvent is an event triggered on a entity account creation
struct Ixo_Entity_V1beta1_EntityAccountCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var signer: String = String()

  var accountName: String = String()

  var accountAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EntityAccountCreatedEvent is an event triggered on a entity account creation
struct Ixo_Entity_V1beta1_EntityAccountAuthzCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var signer: String = String()

  var accountName: String = String()

  var granter: String = String()

  var grantee: String = String()

  var grant: Ixo_Entity_V1beta1_Grant {
    get {return _grant ?? Ixo_Entity_V1beta1_Grant()}
    set {_grant = newValue}
  }
  /// Returns true if `grant` has been explicitly set.
  var hasGrant: Bool {return self._grant != nil}
  /// Clears the value of `grant`. Subsequent reads from it will return its default value.
  mutating func clearGrant() {self._grant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _grant: Ixo_Entity_V1beta1_Grant? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ixo_Entity_V1beta1_EntityCreatedEvent: @unchecked Sendable {}
extension Ixo_Entity_V1beta1_EntityUpdatedEvent: @unchecked Sendable {}
extension Ixo_Entity_V1beta1_EntityVerifiedUpdatedEvent: @unchecked Sendable {}
extension Ixo_Entity_V1beta1_EntityTransferredEvent: @unchecked Sendable {}
extension Ixo_Entity_V1beta1_EntityAccountCreatedEvent: @unchecked Sendable {}
extension Ixo_Entity_V1beta1_EntityAccountAuthzCreatedEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ixo.entity.v1beta1"

extension Ixo_Entity_V1beta1_EntityCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "signer"),
  ]

  fileprivate class _StorageClass {
    var _entity: Ixo_Entity_V1beta1_Entity? = nil
    var _signer: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entity = source._entity
      _signer = source._signer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._entity) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._signer) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._entity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._signer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._signer, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Entity_V1beta1_EntityCreatedEvent, rhs: Ixo_Entity_V1beta1_EntityCreatedEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._signer != rhs_storage._signer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Entity_V1beta1_EntityUpdatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityUpdatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entity"),
    2: .same(proto: "signer"),
  ]

  fileprivate class _StorageClass {
    var _entity: Ixo_Entity_V1beta1_Entity? = nil
    var _signer: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entity = source._entity
      _signer = source._signer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._entity) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._signer) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._entity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._signer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._signer, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Entity_V1beta1_EntityUpdatedEvent, rhs: Ixo_Entity_V1beta1_EntityUpdatedEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._entity != rhs_storage._entity {return false}
        if _storage._signer != rhs_storage._signer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Entity_V1beta1_EntityVerifiedUpdatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityVerifiedUpdatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "signer"),
    3: .standard(proto: "entity_verified"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.entityVerified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 2)
    }
    if self.entityVerified != false {
      try visitor.visitSingularBoolField(value: self.entityVerified, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Entity_V1beta1_EntityVerifiedUpdatedEvent, rhs: Ixo_Entity_V1beta1_EntityVerifiedUpdatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.entityVerified != rhs.entityVerified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Entity_V1beta1_EntityTransferredEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityTransferredEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.to) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Entity_V1beta1_EntityTransferredEvent, rhs: Ixo_Entity_V1beta1_EntityTransferredEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Entity_V1beta1_EntityAccountCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityAccountCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "signer"),
    3: .standard(proto: "account_name"),
    4: .standard(proto: "account_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 2)
    }
    if !self.accountName.isEmpty {
      try visitor.visitSingularStringField(value: self.accountName, fieldNumber: 3)
    }
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Entity_V1beta1_EntityAccountCreatedEvent, rhs: Ixo_Entity_V1beta1_EntityAccountCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.accountName != rhs.accountName {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Entity_V1beta1_EntityAccountAuthzCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityAccountAuthzCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "signer"),
    3: .standard(proto: "account_name"),
    4: .same(proto: "granter"),
    5: .same(proto: "grantee"),
    6: .same(proto: "grant"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._grant) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 2)
    }
    if !self.accountName.isEmpty {
      try visitor.visitSingularStringField(value: self.accountName, fieldNumber: 3)
    }
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 4)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 5)
    }
    try { if let v = self._grant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Entity_V1beta1_EntityAccountAuthzCreatedEvent, rhs: Ixo_Entity_V1beta1_EntityAccountAuthzCreatedEvent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.accountName != rhs.accountName {return false}
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs._grant != rhs._grant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
