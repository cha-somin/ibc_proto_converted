// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/datadeal/v2alpha2/datasale.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DataSaleStatus enumerates the status of data sale.
enum Panacea_Datadeal_V2alpha2_DataSaleStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// DATA_SALE_STATUS_UNSPECIFIED
  case unspecified // = 0

  /// DATA_SALE_STATUS_VERIFICATION_VOTING_PERIOD defines that the status of DataSale is verifying in voting period.
  case verificationVotingPeriod // = 1

  /// DATA_SALE_STATUS_DELIVERY_VOTING_PERIOD defines that the status of DataSale is delivering in voting period.
  case deliveryVotingPeriod // = 2

  /// DATA_SALE_STATUS_COMPLETED defines that the status of DataSale is completed.
  case completed // = 3

  /// DATA_SALE_STATUS_VERIFICATION_FAILED defines that the status of DataSale is verification failed.
  case verificationFailed // = 4

  /// DATA_SALE_STATUS_DELIVERY_FAILED defines that the status of DataSale is delivery failed.
  case deliveryFailed // = 5

  ///DATA_SALE_STATUS_DEAL_COMPLETED defines that the status of Deal associated with DataSale is DEAL_STATUS_COMPLETED.
  case dealCompleted // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .verificationVotingPeriod
    case 2: self = .deliveryVotingPeriod
    case 3: self = .completed
    case 4: self = .verificationFailed
    case 5: self = .deliveryFailed
    case 6: self = .dealCompleted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .verificationVotingPeriod: return 1
    case .deliveryVotingPeriod: return 2
    case .completed: return 3
    case .verificationFailed: return 4
    case .deliveryFailed: return 5
    case .dealCompleted: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Panacea_Datadeal_V2alpha2_DataSaleStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Panacea_Datadeal_V2alpha2_DataSaleStatus] = [
    .unspecified,
    .verificationVotingPeriod,
    .deliveryVotingPeriod,
    .completed,
    .verificationFailed,
    .deliveryFailed,
    .dealCompleted,
  ]
}

#endif  // swift(>=4.2)

/// DataSale defines a data sale.
struct Panacea_Datadeal_V2alpha2_DataSale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sellerAddress: String {
    get {return _storage._sellerAddress}
    set {_uniqueStorage()._sellerAddress = newValue}
  }

  var dealID: UInt64 {
    get {return _storage._dealID}
    set {_uniqueStorage()._dealID = newValue}
  }

  var verifiableCid: String {
    get {return _storage._verifiableCid}
    set {_uniqueStorage()._verifiableCid = newValue}
  }

  var deliveredCid: String {
    get {return _storage._deliveredCid}
    set {_uniqueStorage()._deliveredCid = newValue}
  }

  var dataHash: String {
    get {return _storage._dataHash}
    set {_uniqueStorage()._dataHash = newValue}
  }

  var status: Panacea_Datadeal_V2alpha2_DataSaleStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var verificationVotingPeriod: Panacea_Oracle_V2alpha2_VotingPeriod {
    get {return _storage._verificationVotingPeriod ?? Panacea_Oracle_V2alpha2_VotingPeriod()}
    set {_uniqueStorage()._verificationVotingPeriod = newValue}
  }
  /// Returns true if `verificationVotingPeriod` has been explicitly set.
  var hasVerificationVotingPeriod: Bool {return _storage._verificationVotingPeriod != nil}
  /// Clears the value of `verificationVotingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearVerificationVotingPeriod() {_uniqueStorage()._verificationVotingPeriod = nil}

  var deliveryVotingPeriod: Panacea_Oracle_V2alpha2_VotingPeriod {
    get {return _storage._deliveryVotingPeriod ?? Panacea_Oracle_V2alpha2_VotingPeriod()}
    set {_uniqueStorage()._deliveryVotingPeriod = newValue}
  }
  /// Returns true if `deliveryVotingPeriod` has been explicitly set.
  var hasDeliveryVotingPeriod: Bool {return _storage._deliveryVotingPeriod != nil}
  /// Clears the value of `deliveryVotingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearDeliveryVotingPeriod() {_uniqueStorage()._deliveryVotingPeriod = nil}

  var verificationTallyResult: Panacea_Oracle_V2alpha2_TallyResult {
    get {return _storage._verificationTallyResult ?? Panacea_Oracle_V2alpha2_TallyResult()}
    set {_uniqueStorage()._verificationTallyResult = newValue}
  }
  /// Returns true if `verificationTallyResult` has been explicitly set.
  var hasVerificationTallyResult: Bool {return _storage._verificationTallyResult != nil}
  /// Clears the value of `verificationTallyResult`. Subsequent reads from it will return its default value.
  mutating func clearVerificationTallyResult() {_uniqueStorage()._verificationTallyResult = nil}

  var deliveryTallyResult: Panacea_Oracle_V2alpha2_TallyResult {
    get {return _storage._deliveryTallyResult ?? Panacea_Oracle_V2alpha2_TallyResult()}
    set {_uniqueStorage()._deliveryTallyResult = newValue}
  }
  /// Returns true if `deliveryTallyResult` has been explicitly set.
  var hasDeliveryTallyResult: Bool {return _storage._deliveryTallyResult != nil}
  /// Clears the value of `deliveryTallyResult`. Subsequent reads from it will return its default value.
  mutating func clearDeliveryTallyResult() {_uniqueStorage()._deliveryTallyResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Datadeal_V2alpha2_DataSaleStatus: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_DataSale: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.datadeal.v2alpha2"

extension Panacea_Datadeal_V2alpha2_DataSaleStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_SALE_STATUS_UNSPECIFIED"),
    1: .same(proto: "DATA_SALE_STATUS_VERIFICATION_VOTING_PERIOD"),
    2: .same(proto: "DATA_SALE_STATUS_DELIVERY_VOTING_PERIOD"),
    3: .same(proto: "DATA_SALE_STATUS_COMPLETED"),
    4: .same(proto: "DATA_SALE_STATUS_VERIFICATION_FAILED"),
    5: .same(proto: "DATA_SALE_STATUS_DELIVERY_FAILED"),
    6: .same(proto: "DATA_SALE_STATUS_DEAL_COMPLETED"),
  ]
}

extension Panacea_Datadeal_V2alpha2_DataSale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataSale"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seller_address"),
    2: .standard(proto: "deal_id"),
    3: .standard(proto: "verifiable_cid"),
    4: .standard(proto: "delivered_cid"),
    5: .standard(proto: "data_hash"),
    6: .same(proto: "status"),
    7: .standard(proto: "verification_voting_period"),
    8: .standard(proto: "delivery_voting_period"),
    9: .standard(proto: "verification_tally_result"),
    10: .standard(proto: "delivery_tally_result"),
  ]

  fileprivate class _StorageClass {
    var _sellerAddress: String = String()
    var _dealID: UInt64 = 0
    var _verifiableCid: String = String()
    var _deliveredCid: String = String()
    var _dataHash: String = String()
    var _status: Panacea_Datadeal_V2alpha2_DataSaleStatus = .unspecified
    var _verificationVotingPeriod: Panacea_Oracle_V2alpha2_VotingPeriod? = nil
    var _deliveryVotingPeriod: Panacea_Oracle_V2alpha2_VotingPeriod? = nil
    var _verificationTallyResult: Panacea_Oracle_V2alpha2_TallyResult? = nil
    var _deliveryTallyResult: Panacea_Oracle_V2alpha2_TallyResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sellerAddress = source._sellerAddress
      _dealID = source._dealID
      _verifiableCid = source._verifiableCid
      _deliveredCid = source._deliveredCid
      _dataHash = source._dataHash
      _status = source._status
      _verificationVotingPeriod = source._verificationVotingPeriod
      _deliveryVotingPeriod = source._deliveryVotingPeriod
      _verificationTallyResult = source._verificationTallyResult
      _deliveryTallyResult = source._deliveryTallyResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._sellerAddress) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._dealID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._verifiableCid) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._deliveredCid) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._dataHash) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._verificationVotingPeriod) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._deliveryVotingPeriod) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._verificationTallyResult) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._deliveryTallyResult) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._sellerAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sellerAddress, fieldNumber: 1)
      }
      if _storage._dealID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._dealID, fieldNumber: 2)
      }
      if !_storage._verifiableCid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._verifiableCid, fieldNumber: 3)
      }
      if !_storage._deliveredCid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deliveredCid, fieldNumber: 4)
      }
      if !_storage._dataHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dataHash, fieldNumber: 5)
      }
      if _storage._status != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 6)
      }
      try { if let v = _storage._verificationVotingPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._deliveryVotingPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._verificationTallyResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._deliveryTallyResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_DataSale, rhs: Panacea_Datadeal_V2alpha2_DataSale) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sellerAddress != rhs_storage._sellerAddress {return false}
        if _storage._dealID != rhs_storage._dealID {return false}
        if _storage._verifiableCid != rhs_storage._verifiableCid {return false}
        if _storage._deliveredCid != rhs_storage._deliveredCid {return false}
        if _storage._dataHash != rhs_storage._dataHash {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._verificationVotingPeriod != rhs_storage._verificationVotingPeriod {return false}
        if _storage._deliveryVotingPeriod != rhs_storage._deliveryVotingPeriod {return false}
        if _storage._verificationTallyResult != rhs_storage._verificationTallyResult {return false}
        if _storage._deliveryTallyResult != rhs_storage._deliveryTallyResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
