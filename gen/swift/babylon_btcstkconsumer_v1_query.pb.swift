// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstkconsumer/v1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryParamsRequest is request type for the Query/Params RPC method.
struct Babylon_Btcstkconsumer_V1_QueryParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is response type for the Query/Params RPC method.
struct Babylon_Btcstkconsumer_V1_QueryParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params holds all the parameters of this module.
  var params: Babylon_Btcstkconsumer_V1_Params {
    get {return _params ?? Babylon_Btcstkconsumer_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Btcstkconsumer_V1_Params? = nil
}

/// QueryConsumerRegistryListRequest is request type for the Query/ConsumerRegistryList RPC method
struct Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pagination defines whether to have the pagination in the request
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryConsumerRegistryListResponse is response type for the Query/ConsumerRegistryList RPC method
struct Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// consumer_registers are the registered consumers in ascending alphabetical order
  var consumerRegisters: [Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse] = []

  /// pagination defines the pagination in the response
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryConsumersRegistryRequest is request type for the Query/ConsumersRegistry RPC method.
struct Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consumerIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryConsumersRegistryResponse is response type for the Query/ConsumersRegistry RPC method.
struct Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consumerRegisters: [Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalityProvidersRequest is the request type for the
/// Query/FinalityProviders RPC method.
struct Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consumerID: String = String()

  /// pagination defines an optional pagination for the request.
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryFinalityProvidersResponse is the response type for the
/// Query/FinalityProviders RPC method.
struct Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finality_providers contains all the finality providers
  var finalityProviders: [Babylon_Btcstkconsumer_V1_FinalityProviderResponse] = []

  /// pagination defines the pagination in the response.
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryFinalityProviderRequest requests information about a finality provider
struct Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// consumer id is the consumer id this finality provider is registered to
  var consumerID: String = String()

  /// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
  var fpBtcPkHex: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalityProviderResponse contains information about a finality provider
struct Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finality_provider contains the FinalityProvider
  var finalityProvider: Babylon_Btcstkconsumer_V1_FinalityProviderResponse {
    get {return _finalityProvider ?? Babylon_Btcstkconsumer_V1_FinalityProviderResponse()}
    set {_finalityProvider = newValue}
  }
  /// Returns true if `finalityProvider` has been explicitly set.
  var hasFinalityProvider: Bool {return self._finalityProvider != nil}
  /// Clears the value of `finalityProvider`. Subsequent reads from it will return its default value.
  mutating func clearFinalityProvider() {self._finalityProvider = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _finalityProvider: Babylon_Btcstkconsumer_V1_FinalityProviderResponse? = nil
}

/// FinalityProviderResponse defines a finality provider with voting power information.
struct Babylon_Btcstkconsumer_V1_FinalityProviderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// description defines the description terms for the finality provider.
  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  /// commission defines the commission rate of the finality provider.
  var commission: String = String()

  /// babylon_pk is the Babylon secp256k1 PK of this finality provider
  var addr: String = String()

  /// btc_pk is the Bitcoin secp256k1 PK of this finality provider
  /// the PK follows encoding in BIP-340 spec
  var btcPk: Data = Data()

  /// pop is the proof of possession of babylon_pk and btc_pk
  var pop: Babylon_Btcstaking_V1_ProofOfPossessionBTC {
    get {return _pop ?? Babylon_Btcstaking_V1_ProofOfPossessionBTC()}
    set {_pop = newValue}
  }
  /// Returns true if `pop` has been explicitly set.
  var hasPop: Bool {return self._pop != nil}
  /// Clears the value of `pop`. Subsequent reads from it will return its default value.
  mutating func clearPop() {self._pop = nil}

  /// slashed_babylon_height indicates the Babylon height when
  /// the finality provider is slashed.
  /// if it's 0 then the finality provider is not slashed
  var slashedBabylonHeight: UInt64 = 0

  /// slashed_btc_height indicates the BTC height when
  /// the finality provider is slashed.
  /// if it's 0 then the finality provider is not slashed
  var slashedBtcHeight: UInt32 = 0

  /// height is the queried Babylon height
  var height: UInt64 = 0

  /// voting_power is the voting power of this finality provider at the given height
  var votingPower: UInt64 = 0

  /// consumer_id is the consumer id this finality provider is registered to
  var consumerID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Cosmos_Staking_V1beta1_Description? = nil
  fileprivate var _pop: Babylon_Btcstaking_V1_ProofOfPossessionBTC? = nil
}

/// QueryFinalityProviderConsumerRequest requests the consumer a CZ finality provider belongs to
struct Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
  var fpBtcPkHex: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalityProviderConsumerResponse returns the CZ finality provier consumer id
struct Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consumerID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ConsumerRegisterResponse contains the information for a registered consumer
/// The struct is used in the query responses
struct Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// consumer_id is the ID of the consumer
  /// - for Cosmos SDK chains, the consumer ID will be the IBC client ID
  /// - for ETH L2 chains, the consumer ID will be the chain ID of the ETH L2
  ///   chain
  var consumerID: String = String()

  /// consumer_name is the name of the consumer
  var consumerName: String = String()

  /// consumer_description is a description for the consumer (can be empty)
  var consumerDescription: String = String()

  /// cosmos_channel_id is the IBC channel ID for the consumer
  /// set only for Cosmos integration
  var cosmosChannelID: String = String()

  /// eth_l2_finality_contract_address is the address of the finality contract
  /// set only for ETH L2 integration
  var ethL2FinalityContractAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstkconsumer_V1_QueryParamsRequest: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryParamsResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_FinalityProviderResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse: @unchecked Sendable {}
extension Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstkconsumer.v1"

extension Babylon_Btcstkconsumer_V1_QueryParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryParamsRequest, rhs: Babylon_Btcstkconsumer_V1_QueryParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryParamsResponse, rhs: Babylon_Btcstkconsumer_V1_QueryParamsResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryConsumerRegistryListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, rhs: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryConsumerRegistryListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_registers"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.consumerRegisters) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.consumerRegisters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.consumerRegisters, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse, rhs: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse) -> Bool {
    if lhs.consumerRegisters != rhs.consumerRegisters {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryConsumersRegistryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.consumerIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.consumerIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.consumerIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, rhs: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest) -> Bool {
    if lhs.consumerIds != rhs.consumerIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryConsumersRegistryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_registers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.consumerRegisters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.consumerRegisters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.consumerRegisters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse, rhs: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse) -> Bool {
    if lhs.consumerRegisters != rhs.consumerRegisters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProvidersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_id"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.consumerID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, rhs: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest) -> Bool {
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProvidersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finality_providers"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.finalityProviders) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.finalityProviders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.finalityProviders, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse, rhs: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse) -> Bool {
    if lhs.finalityProviders != rhs.finalityProviders {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_id"),
    2: .standard(proto: "fp_btc_pk_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.consumerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fpBtcPkHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 1)
    }
    if !self.fpBtcPkHex.isEmpty {
      try visitor.visitSingularStringField(value: self.fpBtcPkHex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, rhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest) -> Bool {
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.fpBtcPkHex != rhs.fpBtcPkHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finality_provider"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._finalityProvider) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._finalityProvider {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse, rhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse) -> Bool {
    if lhs._finalityProvider != rhs._finalityProvider {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_FinalityProviderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalityProviderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "commission"),
    3: .same(proto: "addr"),
    4: .standard(proto: "btc_pk"),
    5: .same(proto: "pop"),
    6: .standard(proto: "slashed_babylon_height"),
    7: .standard(proto: "slashed_btc_height"),
    8: .same(proto: "height"),
    9: .standard(proto: "voting_power"),
    10: .standard(proto: "consumer_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.addr) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.btcPk) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._pop) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.slashedBabylonHeight) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.slashedBtcHeight) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.votingPower) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.consumerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 2)
    }
    if !self.addr.isEmpty {
      try visitor.visitSingularStringField(value: self.addr, fieldNumber: 3)
    }
    if !self.btcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.btcPk, fieldNumber: 4)
    }
    try { if let v = self._pop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.slashedBabylonHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.slashedBabylonHeight, fieldNumber: 6)
    }
    if self.slashedBtcHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.slashedBtcHeight, fieldNumber: 7)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 8)
    }
    if self.votingPower != 0 {
      try visitor.visitSingularUInt64Field(value: self.votingPower, fieldNumber: 9)
    }
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_FinalityProviderResponse, rhs: Babylon_Btcstkconsumer_V1_FinalityProviderResponse) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.addr != rhs.addr {return false}
    if lhs.btcPk != rhs.btcPk {return false}
    if lhs._pop != rhs._pop {return false}
    if lhs.slashedBabylonHeight != rhs.slashedBabylonHeight {return false}
    if lhs.slashedBtcHeight != rhs.slashedBtcHeight {return false}
    if lhs.height != rhs.height {return false}
    if lhs.votingPower != rhs.votingPower {return false}
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderConsumerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fp_btc_pk_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fpBtcPkHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fpBtcPkHex.isEmpty {
      try visitor.visitSingularStringField(value: self.fpBtcPkHex, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, rhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest) -> Bool {
    if lhs.fpBtcPkHex != rhs.fpBtcPkHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalityProviderConsumerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.consumerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse, rhs: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse) -> Bool {
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsumerRegisterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consumer_id"),
    2: .standard(proto: "consumer_name"),
    3: .standard(proto: "consumer_description"),
    4: .standard(proto: "cosmos_channel_id"),
    5: .standard(proto: "eth_l2_finality_contract_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.consumerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.consumerName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.consumerDescription) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.cosmosChannelID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ethL2FinalityContractAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.consumerID.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerID, fieldNumber: 1)
    }
    if !self.consumerName.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerName, fieldNumber: 2)
    }
    if !self.consumerDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.consumerDescription, fieldNumber: 3)
    }
    if !self.cosmosChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosChannelID, fieldNumber: 4)
    }
    if !self.ethL2FinalityContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ethL2FinalityContractAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse, rhs: Babylon_Btcstkconsumer_V1_ConsumerRegisterResponse) -> Bool {
    if lhs.consumerID != rhs.consumerID {return false}
    if lhs.consumerName != rhs.consumerName {return false}
    if lhs.consumerDescription != rhs.consumerDescription {return false}
    if lhs.cosmosChannelID != rhs.cosmosChannelID {return false}
    if lhs.ethL2FinalityContractAddress != rhs.ethL2FinalityContractAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
