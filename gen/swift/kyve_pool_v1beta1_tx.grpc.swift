//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/pool/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Kyve_Pool_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Pool_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func fundPool(
    _ request: Kyve_Pool_V1beta1_MsgFundPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgFundPool, Kyve_Pool_V1beta1_MsgFundPoolResponse>

  func defundPool(
    _ request: Kyve_Pool_V1beta1_MsgDefundPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgDefundPool, Kyve_Pool_V1beta1_MsgDefundPoolResponse>

  func createPool(
    _ request: Kyve_Pool_V1beta1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgCreatePool, Kyve_Pool_V1beta1_MsgCreatePoolResponse>

  func updatePool(
    _ request: Kyve_Pool_V1beta1_MsgUpdatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgUpdatePool, Kyve_Pool_V1beta1_MsgUpdatePoolResponse>

  func disablePool(
    _ request: Kyve_Pool_V1beta1_MsgDisablePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgDisablePool, Kyve_Pool_V1beta1_MsgDisablePoolResponse>

  func enablePool(
    _ request: Kyve_Pool_V1beta1_MsgEnablePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgEnablePool, Kyve_Pool_V1beta1_MsgEnablePoolResponse>

  func scheduleRuntimeUpgrade(
    _ request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>

  func cancelRuntimeUpgrade(
    _ request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>
}

extension Kyve_Pool_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "kyve.pool.v1beta1.Msg"
  }

  /// FundPool ...
  ///
  /// - Parameters:
  ///   - request: Request to send to FundPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fundPool(
    _ request: Kyve_Pool_V1beta1_MsgFundPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgFundPool, Kyve_Pool_V1beta1_MsgFundPoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.fundPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundPoolInterceptors() ?? []
    )
  }

  /// DefundPool ...
  ///
  /// - Parameters:
  ///   - request: Request to send to DefundPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func defundPool(
    _ request: Kyve_Pool_V1beta1_MsgDefundPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgDefundPool, Kyve_Pool_V1beta1_MsgDefundPoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.defundPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefundPoolInterceptors() ?? []
    )
  }

  /// CreatePool defines a governance operation for creating a new pool.
  /// The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPool(
    _ request: Kyve_Pool_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgCreatePool, Kyve_Pool_V1beta1_MsgCreatePoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  /// UpdatePool defines a governance operation for updating an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updatePool(
    _ request: Kyve_Pool_V1beta1_MsgUpdatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgUpdatePool, Kyve_Pool_V1beta1_MsgUpdatePoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.updatePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? []
    )
  }

  /// DisablePool defines a governance operation for disabling an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to DisablePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disablePool(
    _ request: Kyve_Pool_V1beta1_MsgDisablePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgDisablePool, Kyve_Pool_V1beta1_MsgDisablePoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.disablePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisablePoolInterceptors() ?? []
    )
  }

  /// EnablePool defines a governance operation for enabling an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to EnablePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enablePool(
    _ request: Kyve_Pool_V1beta1_MsgEnablePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgEnablePool, Kyve_Pool_V1beta1_MsgEnablePoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.enablePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnablePoolInterceptors() ?? []
    )
  }

  /// ScheduleRuntimeUpgrade defines a governance operation for scheduling a runtime upgrade.
  /// The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to ScheduleRuntimeUpgrade.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scheduleRuntimeUpgrade(
    _ request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.scheduleRuntimeUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleRuntimeUpgradeInterceptors() ?? []
    )
  }

  /// CancelRuntimeUpgrade defines a governance operation for cancelling a runtime upgrade.
  /// The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelRuntimeUpgrade.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelRuntimeUpgrade(
    _ request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse> {
    return self.makeUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.cancelRuntimeUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelRuntimeUpgradeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Pool_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Pool_V1beta1_MsgNIOClient")
internal final class Kyve_Pool_V1beta1_MsgClient: Kyve_Pool_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.pool.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Pool_V1beta1_MsgNIOClient: Kyve_Pool_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.pool.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Pool_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeFundPoolCall(
    _ request: Kyve_Pool_V1beta1_MsgFundPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgFundPool, Kyve_Pool_V1beta1_MsgFundPoolResponse>

  func makeDefundPoolCall(
    _ request: Kyve_Pool_V1beta1_MsgDefundPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgDefundPool, Kyve_Pool_V1beta1_MsgDefundPoolResponse>

  func makeCreatePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgCreatePool, Kyve_Pool_V1beta1_MsgCreatePoolResponse>

  func makeUpdatePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgUpdatePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgUpdatePool, Kyve_Pool_V1beta1_MsgUpdatePoolResponse>

  func makeDisablePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgDisablePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgDisablePool, Kyve_Pool_V1beta1_MsgDisablePoolResponse>

  func makeEnablePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgEnablePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgEnablePool, Kyve_Pool_V1beta1_MsgEnablePoolResponse>

  func makeScheduleRuntimeUpgradeCall(
    _ request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>

  func makeCancelRuntimeUpgradeCall(
    _ request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Pool_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Pool_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeFundPoolCall(
    _ request: Kyve_Pool_V1beta1_MsgFundPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgFundPool, Kyve_Pool_V1beta1_MsgFundPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.fundPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundPoolInterceptors() ?? []
    )
  }

  internal func makeDefundPoolCall(
    _ request: Kyve_Pool_V1beta1_MsgDefundPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgDefundPool, Kyve_Pool_V1beta1_MsgDefundPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.defundPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefundPoolInterceptors() ?? []
    )
  }

  internal func makeCreatePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgCreatePool, Kyve_Pool_V1beta1_MsgCreatePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func makeUpdatePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgUpdatePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgUpdatePool, Kyve_Pool_V1beta1_MsgUpdatePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.updatePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? []
    )
  }

  internal func makeDisablePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgDisablePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgDisablePool, Kyve_Pool_V1beta1_MsgDisablePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.disablePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisablePoolInterceptors() ?? []
    )
  }

  internal func makeEnablePoolCall(
    _ request: Kyve_Pool_V1beta1_MsgEnablePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgEnablePool, Kyve_Pool_V1beta1_MsgEnablePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.enablePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnablePoolInterceptors() ?? []
    )
  }

  internal func makeScheduleRuntimeUpgradeCall(
    _ request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.scheduleRuntimeUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleRuntimeUpgradeInterceptors() ?? []
    )
  }

  internal func makeCancelRuntimeUpgradeCall(
    _ request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.cancelRuntimeUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelRuntimeUpgradeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Pool_V1beta1_MsgAsyncClientProtocol {
  internal func fundPool(
    _ request: Kyve_Pool_V1beta1_MsgFundPool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgFundPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.fundPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFundPoolInterceptors() ?? []
    )
  }

  internal func defundPool(
    _ request: Kyve_Pool_V1beta1_MsgDefundPool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgDefundPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.defundPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefundPoolInterceptors() ?? []
    )
  }

  internal func createPool(
    _ request: Kyve_Pool_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgCreatePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func updatePool(
    _ request: Kyve_Pool_V1beta1_MsgUpdatePool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgUpdatePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.updatePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? []
    )
  }

  internal func disablePool(
    _ request: Kyve_Pool_V1beta1_MsgDisablePool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgDisablePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.disablePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisablePoolInterceptors() ?? []
    )
  }

  internal func enablePool(
    _ request: Kyve_Pool_V1beta1_MsgEnablePool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgEnablePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.enablePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnablePoolInterceptors() ?? []
    )
  }

  internal func scheduleRuntimeUpgrade(
    _ request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.scheduleRuntimeUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleRuntimeUpgradeInterceptors() ?? []
    )
  }

  internal func cancelRuntimeUpgrade(
    _ request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Pool_V1beta1_MsgClientMetadata.Methods.cancelRuntimeUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelRuntimeUpgradeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Pool_V1beta1_MsgAsyncClient: Kyve_Pool_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Pool_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'fundPool'.
  func makeFundPoolInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgFundPool, Kyve_Pool_V1beta1_MsgFundPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'defundPool'.
  func makeDefundPoolInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgDefundPool, Kyve_Pool_V1beta1_MsgDefundPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'createPool'.
  func makeCreatePoolInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgCreatePool, Kyve_Pool_V1beta1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'updatePool'.
  func makeUpdatePoolInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgUpdatePool, Kyve_Pool_V1beta1_MsgUpdatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'disablePool'.
  func makeDisablePoolInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgDisablePool, Kyve_Pool_V1beta1_MsgDisablePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'enablePool'.
  func makeEnablePoolInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgEnablePool, Kyve_Pool_V1beta1_MsgEnablePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'scheduleRuntimeUpgrade'.
  func makeScheduleRuntimeUpgradeInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelRuntimeUpgrade'.
  func makeCancelRuntimeUpgradeInterceptors() -> [ClientInterceptor<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>]
}

internal enum Kyve_Pool_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.pool.v1beta1.Msg",
    methods: [
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.fundPool,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.defundPool,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.createPool,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.updatePool,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.disablePool,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.enablePool,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.scheduleRuntimeUpgrade,
      Kyve_Pool_V1beta1_MsgClientMetadata.Methods.cancelRuntimeUpgrade,
    ]
  )

  internal enum Methods {
    internal static let fundPool = GRPCMethodDescriptor(
      name: "FundPool",
      path: "/kyve.pool.v1beta1.Msg/FundPool",
      type: GRPCCallType.unary
    )

    internal static let defundPool = GRPCMethodDescriptor(
      name: "DefundPool",
      path: "/kyve.pool.v1beta1.Msg/DefundPool",
      type: GRPCCallType.unary
    )

    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/kyve.pool.v1beta1.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let updatePool = GRPCMethodDescriptor(
      name: "UpdatePool",
      path: "/kyve.pool.v1beta1.Msg/UpdatePool",
      type: GRPCCallType.unary
    )

    internal static let disablePool = GRPCMethodDescriptor(
      name: "DisablePool",
      path: "/kyve.pool.v1beta1.Msg/DisablePool",
      type: GRPCCallType.unary
    )

    internal static let enablePool = GRPCMethodDescriptor(
      name: "EnablePool",
      path: "/kyve.pool.v1beta1.Msg/EnablePool",
      type: GRPCCallType.unary
    )

    internal static let scheduleRuntimeUpgrade = GRPCMethodDescriptor(
      name: "ScheduleRuntimeUpgrade",
      path: "/kyve.pool.v1beta1.Msg/ScheduleRuntimeUpgrade",
      type: GRPCCallType.unary
    )

    internal static let cancelRuntimeUpgrade = GRPCMethodDescriptor(
      name: "CancelRuntimeUpgrade",
      path: "/kyve.pool.v1beta1.Msg/CancelRuntimeUpgrade",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Pool_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Kyve_Pool_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// FundPool ...
  func fundPool(request: Kyve_Pool_V1beta1_MsgFundPool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgFundPoolResponse>

  /// DefundPool ...
  func defundPool(request: Kyve_Pool_V1beta1_MsgDefundPool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgDefundPoolResponse>

  /// CreatePool defines a governance operation for creating a new pool.
  /// The authority is hard-coded to the x/gov module account.
  func createPool(request: Kyve_Pool_V1beta1_MsgCreatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgCreatePoolResponse>

  /// UpdatePool defines a governance operation for updating an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  func updatePool(request: Kyve_Pool_V1beta1_MsgUpdatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgUpdatePoolResponse>

  /// DisablePool defines a governance operation for disabling an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  func disablePool(request: Kyve_Pool_V1beta1_MsgDisablePool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgDisablePoolResponse>

  /// EnablePool defines a governance operation for enabling an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  func enablePool(request: Kyve_Pool_V1beta1_MsgEnablePool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgEnablePoolResponse>

  /// ScheduleRuntimeUpgrade defines a governance operation for scheduling a runtime upgrade.
  /// The authority is hard-coded to the x/gov module account.
  func scheduleRuntimeUpgrade(request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>

  /// CancelRuntimeUpgrade defines a governance operation for cancelling a runtime upgrade.
  /// The authority is hard-coded to the x/gov module account.
  func cancelRuntimeUpgrade(request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>
}

extension Kyve_Pool_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Kyve_Pool_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FundPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgFundPool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgFundPoolResponse>(),
        interceptors: self.interceptors?.makeFundPoolInterceptors() ?? [],
        userFunction: self.fundPool(request:context:)
      )

    case "DefundPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgDefundPool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgDefundPoolResponse>(),
        interceptors: self.interceptors?.makeDefundPoolInterceptors() ?? [],
        userFunction: self.defundPool(request:context:)
      )

    case "CreatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        userFunction: self.createPool(request:context:)
      )

    case "UpdatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgUpdatePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgUpdatePoolResponse>(),
        interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? [],
        userFunction: self.updatePool(request:context:)
      )

    case "DisablePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgDisablePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgDisablePoolResponse>(),
        interceptors: self.interceptors?.makeDisablePoolInterceptors() ?? [],
        userFunction: self.disablePool(request:context:)
      )

    case "EnablePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgEnablePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgEnablePoolResponse>(),
        interceptors: self.interceptors?.makeEnablePoolInterceptors() ?? [],
        userFunction: self.enablePool(request:context:)
      )

    case "ScheduleRuntimeUpgrade":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>(),
        interceptors: self.interceptors?.makeScheduleRuntimeUpgradeInterceptors() ?? [],
        userFunction: self.scheduleRuntimeUpgrade(request:context:)
      )

    case "CancelRuntimeUpgrade":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>(),
        interceptors: self.interceptors?.makeCancelRuntimeUpgradeInterceptors() ?? [],
        userFunction: self.cancelRuntimeUpgrade(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Pool_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Pool_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// FundPool ...
  @Sendable func fundPool(
    request: Kyve_Pool_V1beta1_MsgFundPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgFundPoolResponse

  /// DefundPool ...
  @Sendable func defundPool(
    request: Kyve_Pool_V1beta1_MsgDefundPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgDefundPoolResponse

  /// CreatePool defines a governance operation for creating a new pool.
  /// The authority is hard-coded to the x/gov module account.
  @Sendable func createPool(
    request: Kyve_Pool_V1beta1_MsgCreatePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgCreatePoolResponse

  /// UpdatePool defines a governance operation for updating an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  @Sendable func updatePool(
    request: Kyve_Pool_V1beta1_MsgUpdatePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgUpdatePoolResponse

  /// DisablePool defines a governance operation for disabling an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  @Sendable func disablePool(
    request: Kyve_Pool_V1beta1_MsgDisablePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgDisablePoolResponse

  /// EnablePool defines a governance operation for enabling an existing pool.
  /// The authority is hard-coded to the x/gov module account.
  @Sendable func enablePool(
    request: Kyve_Pool_V1beta1_MsgEnablePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgEnablePoolResponse

  /// ScheduleRuntimeUpgrade defines a governance operation for scheduling a runtime upgrade.
  /// The authority is hard-coded to the x/gov module account.
  @Sendable func scheduleRuntimeUpgrade(
    request: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse

  /// CancelRuntimeUpgrade defines a governance operation for cancelling a runtime upgrade.
  /// The authority is hard-coded to the x/gov module account.
  @Sendable func cancelRuntimeUpgrade(
    request: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Pool_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Pool_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Pool_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Pool_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FundPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgFundPool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgFundPoolResponse>(),
        interceptors: self.interceptors?.makeFundPoolInterceptors() ?? [],
        wrapping: self.fundPool(request:context:)
      )

    case "DefundPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgDefundPool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgDefundPoolResponse>(),
        interceptors: self.interceptors?.makeDefundPoolInterceptors() ?? [],
        wrapping: self.defundPool(request:context:)
      )

    case "CreatePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        wrapping: self.createPool(request:context:)
      )

    case "UpdatePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgUpdatePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgUpdatePoolResponse>(),
        interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? [],
        wrapping: self.updatePool(request:context:)
      )

    case "DisablePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgDisablePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgDisablePoolResponse>(),
        interceptors: self.interceptors?.makeDisablePoolInterceptors() ?? [],
        wrapping: self.disablePool(request:context:)
      )

    case "EnablePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgEnablePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgEnablePoolResponse>(),
        interceptors: self.interceptors?.makeEnablePoolInterceptors() ?? [],
        wrapping: self.enablePool(request:context:)
      )

    case "ScheduleRuntimeUpgrade":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>(),
        interceptors: self.interceptors?.makeScheduleRuntimeUpgradeInterceptors() ?? [],
        wrapping: self.scheduleRuntimeUpgrade(request:context:)
      )

    case "CancelRuntimeUpgrade":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade>(),
        responseSerializer: ProtobufSerializer<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>(),
        interceptors: self.interceptors?.makeCancelRuntimeUpgradeInterceptors() ?? [],
        wrapping: self.cancelRuntimeUpgrade(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Pool_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'fundPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFundPoolInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgFundPool, Kyve_Pool_V1beta1_MsgFundPoolResponse>]

  /// - Returns: Interceptors to use when handling 'defundPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDefundPoolInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgDefundPool, Kyve_Pool_V1beta1_MsgDefundPoolResponse>]

  /// - Returns: Interceptors to use when handling 'createPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePoolInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgCreatePool, Kyve_Pool_V1beta1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'updatePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatePoolInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgUpdatePool, Kyve_Pool_V1beta1_MsgUpdatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'disablePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisablePoolInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgDisablePool, Kyve_Pool_V1beta1_MsgDisablePoolResponse>]

  /// - Returns: Interceptors to use when handling 'enablePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnablePoolInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgEnablePool, Kyve_Pool_V1beta1_MsgEnablePoolResponse>]

  /// - Returns: Interceptors to use when handling 'scheduleRuntimeUpgrade'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScheduleRuntimeUpgradeInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse>]

  /// - Returns: Interceptors to use when handling 'cancelRuntimeUpgrade'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelRuntimeUpgradeInterceptors() -> [ServerInterceptor<Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse>]
}

internal enum Kyve_Pool_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.pool.v1beta1.Msg",
    methods: [
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.fundPool,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.defundPool,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.createPool,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.updatePool,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.disablePool,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.enablePool,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.scheduleRuntimeUpgrade,
      Kyve_Pool_V1beta1_MsgServerMetadata.Methods.cancelRuntimeUpgrade,
    ]
  )

  internal enum Methods {
    internal static let fundPool = GRPCMethodDescriptor(
      name: "FundPool",
      path: "/kyve.pool.v1beta1.Msg/FundPool",
      type: GRPCCallType.unary
    )

    internal static let defundPool = GRPCMethodDescriptor(
      name: "DefundPool",
      path: "/kyve.pool.v1beta1.Msg/DefundPool",
      type: GRPCCallType.unary
    )

    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/kyve.pool.v1beta1.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let updatePool = GRPCMethodDescriptor(
      name: "UpdatePool",
      path: "/kyve.pool.v1beta1.Msg/UpdatePool",
      type: GRPCCallType.unary
    )

    internal static let disablePool = GRPCMethodDescriptor(
      name: "DisablePool",
      path: "/kyve.pool.v1beta1.Msg/DisablePool",
      type: GRPCCallType.unary
    )

    internal static let enablePool = GRPCMethodDescriptor(
      name: "EnablePool",
      path: "/kyve.pool.v1beta1.Msg/EnablePool",
      type: GRPCCallType.unary
    )

    internal static let scheduleRuntimeUpgrade = GRPCMethodDescriptor(
      name: "ScheduleRuntimeUpgrade",
      path: "/kyve.pool.v1beta1.Msg/ScheduleRuntimeUpgrade",
      type: GRPCCallType.unary
    )

    internal static let cancelRuntimeUpgrade = GRPCMethodDescriptor(
      name: "CancelRuntimeUpgrade",
      path: "/kyve.pool.v1beta1.Msg/CancelRuntimeUpgrade",
      type: GRPCCallType.unary
    )
  }
}
