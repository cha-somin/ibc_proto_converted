//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: initia/distribution/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for distribution module.
///
/// Usage: instantiate `Initia_Distribution_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Initia_Distribution_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Initia_Distribution_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Distribution_V1_QueryParamsRequest, Initia_Distribution_V1_QueryParamsResponse>

  func validatorOutstandingRewards(
    _ request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>

  func validatorCommission(
    _ request: Initia_Distribution_V1_QueryValidatorCommissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Distribution_V1_QueryValidatorCommissionRequest, Initia_Distribution_V1_QueryValidatorCommissionResponse>

  func validatorSlashes(
    _ request: Initia_Distribution_V1_QueryValidatorSlashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Distribution_V1_QueryValidatorSlashesRequest, Initia_Distribution_V1_QueryValidatorSlashesResponse>

  func delegationRewards(
    _ request: Initia_Distribution_V1_QueryDelegationRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Distribution_V1_QueryDelegationRewardsRequest, Initia_Distribution_V1_QueryDelegationRewardsResponse>

  func delegationTotalRewards(
    _ request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>
}

extension Initia_Distribution_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "initia.distribution.v1.Query"
  }

  /// Params queries params of the distribution module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Initia_Distribution_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Distribution_V1_QueryParamsRequest, Initia_Distribution_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ValidatorOutstandingRewards queries rewards of a validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorOutstandingRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorOutstandingRewards(
    _ request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse> {
    return self.makeUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorOutstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? []
    )
  }

  /// ValidatorCommission queries accumulated commission for a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorCommission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorCommission(
    _ request: Initia_Distribution_V1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Distribution_V1_QueryValidatorCommissionRequest, Initia_Distribution_V1_QueryValidatorCommissionResponse> {
    return self.makeUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? []
    )
  }

  /// ValidatorSlashes queries slash events of a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorSlashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorSlashes(
    _ request: Initia_Distribution_V1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Distribution_V1_QueryValidatorSlashesRequest, Initia_Distribution_V1_QueryValidatorSlashesResponse> {
    return self.makeUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorSlashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? []
    )
  }

  /// DelegationRewards queries the total rewards accrued by a delegation.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegationRewards(
    _ request: Initia_Distribution_V1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Distribution_V1_QueryDelegationRewardsRequest, Initia_Distribution_V1_QueryDelegationRewardsResponse> {
    return self.makeUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.delegationRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? []
    )
  }

  /// DelegationTotalRewards queries the total rewards accrued by a each
  /// validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationTotalRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegationTotalRewards(
    _ request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, Initia_Distribution_V1_QueryDelegationTotalRewardsResponse> {
    return self.makeUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.delegationTotalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Initia_Distribution_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Initia_Distribution_V1_QueryNIOClient")
internal final class Initia_Distribution_V1_QueryClient: Initia_Distribution_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the initia.distribution.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Initia_Distribution_V1_QueryNIOClient: Initia_Distribution_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the initia.distribution.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for distribution module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Initia_Distribution_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Initia_Distribution_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryParamsRequest, Initia_Distribution_V1_QueryParamsResponse>

  func makeValidatorOutstandingRewardsCall(
    _ request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>

  func makeValidatorCommissionCall(
    _ request: Initia_Distribution_V1_QueryValidatorCommissionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryValidatorCommissionRequest, Initia_Distribution_V1_QueryValidatorCommissionResponse>

  func makeValidatorSlashesCall(
    _ request: Initia_Distribution_V1_QueryValidatorSlashesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryValidatorSlashesRequest, Initia_Distribution_V1_QueryValidatorSlashesResponse>

  func makeDelegationRewardsCall(
    _ request: Initia_Distribution_V1_QueryDelegationRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryDelegationRewardsRequest, Initia_Distribution_V1_QueryDelegationRewardsResponse>

  func makeDelegationTotalRewardsCall(
    _ request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Distribution_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Initia_Distribution_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Initia_Distribution_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryParamsRequest, Initia_Distribution_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeValidatorOutstandingRewardsCall(
    _ request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorOutstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? []
    )
  }

  internal func makeValidatorCommissionCall(
    _ request: Initia_Distribution_V1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryValidatorCommissionRequest, Initia_Distribution_V1_QueryValidatorCommissionResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? []
    )
  }

  internal func makeValidatorSlashesCall(
    _ request: Initia_Distribution_V1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryValidatorSlashesRequest, Initia_Distribution_V1_QueryValidatorSlashesResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorSlashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? []
    )
  }

  internal func makeDelegationRewardsCall(
    _ request: Initia_Distribution_V1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryDelegationRewardsRequest, Initia_Distribution_V1_QueryDelegationRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.delegationRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? []
    )
  }

  internal func makeDelegationTotalRewardsCall(
    _ request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, Initia_Distribution_V1_QueryDelegationTotalRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.delegationTotalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Distribution_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Initia_Distribution_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Distribution_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func validatorOutstandingRewards(
    _ request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorOutstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? []
    )
  }

  internal func validatorCommission(
    _ request: Initia_Distribution_V1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Distribution_V1_QueryValidatorCommissionResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? []
    )
  }

  internal func validatorSlashes(
    _ request: Initia_Distribution_V1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Distribution_V1_QueryValidatorSlashesResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.validatorSlashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? []
    )
  }

  internal func delegationRewards(
    _ request: Initia_Distribution_V1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Distribution_V1_QueryDelegationRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.delegationRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? []
    )
  }

  internal func delegationTotalRewards(
    _ request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Distribution_V1_QueryDelegationTotalRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Distribution_V1_QueryClientMetadata.Methods.delegationTotalRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Initia_Distribution_V1_QueryAsyncClient: Initia_Distribution_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Initia_Distribution_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Initia_Distribution_V1_QueryParamsRequest, Initia_Distribution_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorOutstandingRewards'.
  func makeValidatorOutstandingRewardsInterceptors() -> [ClientInterceptor<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorCommission'.
  func makeValidatorCommissionInterceptors() -> [ClientInterceptor<Initia_Distribution_V1_QueryValidatorCommissionRequest, Initia_Distribution_V1_QueryValidatorCommissionResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorSlashes'.
  func makeValidatorSlashesInterceptors() -> [ClientInterceptor<Initia_Distribution_V1_QueryValidatorSlashesRequest, Initia_Distribution_V1_QueryValidatorSlashesResponse>]

  /// - Returns: Interceptors to use when invoking 'delegationRewards'.
  func makeDelegationRewardsInterceptors() -> [ClientInterceptor<Initia_Distribution_V1_QueryDelegationRewardsRequest, Initia_Distribution_V1_QueryDelegationRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegationTotalRewards'.
  func makeDelegationTotalRewardsInterceptors() -> [ClientInterceptor<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>]
}

internal enum Initia_Distribution_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "initia.distribution.v1.Query",
    methods: [
      Initia_Distribution_V1_QueryClientMetadata.Methods.params,
      Initia_Distribution_V1_QueryClientMetadata.Methods.validatorOutstandingRewards,
      Initia_Distribution_V1_QueryClientMetadata.Methods.validatorCommission,
      Initia_Distribution_V1_QueryClientMetadata.Methods.validatorSlashes,
      Initia_Distribution_V1_QueryClientMetadata.Methods.delegationRewards,
      Initia_Distribution_V1_QueryClientMetadata.Methods.delegationTotalRewards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/initia.distribution.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let validatorOutstandingRewards = GRPCMethodDescriptor(
      name: "ValidatorOutstandingRewards",
      path: "/initia.distribution.v1.Query/ValidatorOutstandingRewards",
      type: GRPCCallType.unary
    )

    internal static let validatorCommission = GRPCMethodDescriptor(
      name: "ValidatorCommission",
      path: "/initia.distribution.v1.Query/ValidatorCommission",
      type: GRPCCallType.unary
    )

    internal static let validatorSlashes = GRPCMethodDescriptor(
      name: "ValidatorSlashes",
      path: "/initia.distribution.v1.Query/ValidatorSlashes",
      type: GRPCCallType.unary
    )

    internal static let delegationRewards = GRPCMethodDescriptor(
      name: "DelegationRewards",
      path: "/initia.distribution.v1.Query/DelegationRewards",
      type: GRPCCallType.unary
    )

    internal static let delegationTotalRewards = GRPCMethodDescriptor(
      name: "DelegationTotalRewards",
      path: "/initia.distribution.v1.Query/DelegationTotalRewards",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for distribution module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Initia_Distribution_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Initia_Distribution_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries params of the distribution module.
  func params(request: Initia_Distribution_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Distribution_V1_QueryParamsResponse>

  /// ValidatorOutstandingRewards queries rewards of a validator address.
  func validatorOutstandingRewards(request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>

  /// ValidatorCommission queries accumulated commission for a validator.
  func validatorCommission(request: Initia_Distribution_V1_QueryValidatorCommissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Distribution_V1_QueryValidatorCommissionResponse>

  /// ValidatorSlashes queries slash events of a validator.
  func validatorSlashes(request: Initia_Distribution_V1_QueryValidatorSlashesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Distribution_V1_QueryValidatorSlashesResponse>

  /// DelegationRewards queries the total rewards accrued by a delegation.
  func delegationRewards(request: Initia_Distribution_V1_QueryDelegationRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Distribution_V1_QueryDelegationRewardsResponse>

  /// DelegationTotalRewards queries the total rewards accrued by a each
  /// validator.
  func delegationTotalRewards(request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>
}

extension Initia_Distribution_V1_QueryProvider {
  internal var serviceName: Substring {
    return Initia_Distribution_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ValidatorOutstandingRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>(),
        interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? [],
        userFunction: self.validatorOutstandingRewards(request:context:)
      )

    case "ValidatorCommission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryValidatorCommissionRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryValidatorCommissionResponse>(),
        interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? [],
        userFunction: self.validatorCommission(request:context:)
      )

    case "ValidatorSlashes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryValidatorSlashesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryValidatorSlashesResponse>(),
        interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? [],
        userFunction: self.validatorSlashes(request:context:)
      )

    case "DelegationRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryDelegationRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryDelegationRewardsResponse>(),
        interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? [],
        userFunction: self.delegationRewards(request:context:)
      )

    case "DelegationTotalRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>(),
        interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? [],
        userFunction: self.delegationTotalRewards(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for distribution module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Initia_Distribution_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Initia_Distribution_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries params of the distribution module.
  @Sendable func params(
    request: Initia_Distribution_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Distribution_V1_QueryParamsResponse

  /// ValidatorOutstandingRewards queries rewards of a validator address.
  @Sendable func validatorOutstandingRewards(
    request: Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse

  /// ValidatorCommission queries accumulated commission for a validator.
  @Sendable func validatorCommission(
    request: Initia_Distribution_V1_QueryValidatorCommissionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Distribution_V1_QueryValidatorCommissionResponse

  /// ValidatorSlashes queries slash events of a validator.
  @Sendable func validatorSlashes(
    request: Initia_Distribution_V1_QueryValidatorSlashesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Distribution_V1_QueryValidatorSlashesResponse

  /// DelegationRewards queries the total rewards accrued by a delegation.
  @Sendable func delegationRewards(
    request: Initia_Distribution_V1_QueryDelegationRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Distribution_V1_QueryDelegationRewardsResponse

  /// DelegationTotalRewards queries the total rewards accrued by a each
  /// validator.
  @Sendable func delegationTotalRewards(
    request: Initia_Distribution_V1_QueryDelegationTotalRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Distribution_V1_QueryDelegationTotalRewardsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Distribution_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Initia_Distribution_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Initia_Distribution_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Initia_Distribution_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ValidatorOutstandingRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>(),
        interceptors: self.interceptors?.makeValidatorOutstandingRewardsInterceptors() ?? [],
        wrapping: self.validatorOutstandingRewards(request:context:)
      )

    case "ValidatorCommission":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryValidatorCommissionRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryValidatorCommissionResponse>(),
        interceptors: self.interceptors?.makeValidatorCommissionInterceptors() ?? [],
        wrapping: self.validatorCommission(request:context:)
      )

    case "ValidatorSlashes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryValidatorSlashesRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryValidatorSlashesResponse>(),
        interceptors: self.interceptors?.makeValidatorSlashesInterceptors() ?? [],
        wrapping: self.validatorSlashes(request:context:)
      )

    case "DelegationRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryDelegationRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryDelegationRewardsResponse>(),
        interceptors: self.interceptors?.makeDelegationRewardsInterceptors() ?? [],
        wrapping: self.delegationRewards(request:context:)
      )

    case "DelegationTotalRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>(),
        interceptors: self.interceptors?.makeDelegationTotalRewardsInterceptors() ?? [],
        wrapping: self.delegationTotalRewards(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Initia_Distribution_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Initia_Distribution_V1_QueryParamsRequest, Initia_Distribution_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'validatorOutstandingRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorOutstandingRewardsInterceptors() -> [ServerInterceptor<Initia_Distribution_V1_QueryValidatorOutstandingRewardsRequest, Initia_Distribution_V1_QueryValidatorOutstandingRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'validatorCommission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorCommissionInterceptors() -> [ServerInterceptor<Initia_Distribution_V1_QueryValidatorCommissionRequest, Initia_Distribution_V1_QueryValidatorCommissionResponse>]

  /// - Returns: Interceptors to use when handling 'validatorSlashes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorSlashesInterceptors() -> [ServerInterceptor<Initia_Distribution_V1_QueryValidatorSlashesRequest, Initia_Distribution_V1_QueryValidatorSlashesResponse>]

  /// - Returns: Interceptors to use when handling 'delegationRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegationRewardsInterceptors() -> [ServerInterceptor<Initia_Distribution_V1_QueryDelegationRewardsRequest, Initia_Distribution_V1_QueryDelegationRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'delegationTotalRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegationTotalRewardsInterceptors() -> [ServerInterceptor<Initia_Distribution_V1_QueryDelegationTotalRewardsRequest, Initia_Distribution_V1_QueryDelegationTotalRewardsResponse>]
}

internal enum Initia_Distribution_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "initia.distribution.v1.Query",
    methods: [
      Initia_Distribution_V1_QueryServerMetadata.Methods.params,
      Initia_Distribution_V1_QueryServerMetadata.Methods.validatorOutstandingRewards,
      Initia_Distribution_V1_QueryServerMetadata.Methods.validatorCommission,
      Initia_Distribution_V1_QueryServerMetadata.Methods.validatorSlashes,
      Initia_Distribution_V1_QueryServerMetadata.Methods.delegationRewards,
      Initia_Distribution_V1_QueryServerMetadata.Methods.delegationTotalRewards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/initia.distribution.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let validatorOutstandingRewards = GRPCMethodDescriptor(
      name: "ValidatorOutstandingRewards",
      path: "/initia.distribution.v1.Query/ValidatorOutstandingRewards",
      type: GRPCCallType.unary
    )

    internal static let validatorCommission = GRPCMethodDescriptor(
      name: "ValidatorCommission",
      path: "/initia.distribution.v1.Query/ValidatorCommission",
      type: GRPCCallType.unary
    )

    internal static let validatorSlashes = GRPCMethodDescriptor(
      name: "ValidatorSlashes",
      path: "/initia.distribution.v1.Query/ValidatorSlashes",
      type: GRPCCallType.unary
    )

    internal static let delegationRewards = GRPCMethodDescriptor(
      name: "DelegationRewards",
      path: "/initia.distribution.v1.Query/DelegationRewards",
      type: GRPCCallType.unary
    )

    internal static let delegationTotalRewards = GRPCMethodDescriptor(
      name: "DelegationTotalRewards",
      path: "/initia.distribution.v1.Query/DelegationTotalRewards",
      type: GRPCCallType.unary
    )
  }
}
