// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/dex/pool_reserves.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Dex_PoolReservesKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tradePairID: Neutron_Dex_TradePairID {
    get {return _tradePairID ?? Neutron_Dex_TradePairID()}
    set {_tradePairID = newValue}
  }
  /// Returns true if `tradePairID` has been explicitly set.
  var hasTradePairID: Bool {return self._tradePairID != nil}
  /// Clears the value of `tradePairID`. Subsequent reads from it will return its default value.
  mutating func clearTradePairID() {self._tradePairID = nil}

  var tickIndexTakerToMaker: Int64 = 0

  var fee: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tradePairID: Neutron_Dex_TradePairID? = nil
}

struct Neutron_Dex_PoolReserves {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Neutron_Dex_PoolReservesKey {
    get {return _key ?? Neutron_Dex_PoolReservesKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var reservesMakerDenom: String = String()

  var priceTakerToMaker: String = String()

  var priceOppositeTakerToMaker: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _key: Neutron_Dex_PoolReservesKey? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Dex_PoolReservesKey: @unchecked Sendable {}
extension Neutron_Dex_PoolReserves: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.dex"

extension Neutron_Dex_PoolReservesKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolReservesKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trade_pair_id"),
    2: .standard(proto: "tick_index_taker_to_maker"),
    3: .same(proto: "fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tradePairID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tickIndexTakerToMaker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.fee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tradePairID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.tickIndexTakerToMaker != 0 {
      try visitor.visitSingularInt64Field(value: self.tickIndexTakerToMaker, fieldNumber: 2)
    }
    if self.fee != 0 {
      try visitor.visitSingularUInt64Field(value: self.fee, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Dex_PoolReservesKey, rhs: Neutron_Dex_PoolReservesKey) -> Bool {
    if lhs._tradePairID != rhs._tradePairID {return false}
    if lhs.tickIndexTakerToMaker != rhs.tickIndexTakerToMaker {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Dex_PoolReserves: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolReserves"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "reserves_maker_denom"),
    3: .standard(proto: "price_taker_to_maker"),
    4: .standard(proto: "price_opposite_taker_to_maker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reservesMakerDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.priceTakerToMaker) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.priceOppositeTakerToMaker) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.reservesMakerDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.reservesMakerDenom, fieldNumber: 2)
    }
    if !self.priceTakerToMaker.isEmpty {
      try visitor.visitSingularStringField(value: self.priceTakerToMaker, fieldNumber: 3)
    }
    if !self.priceOppositeTakerToMaker.isEmpty {
      try visitor.visitSingularStringField(value: self.priceOppositeTakerToMaker, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Dex_PoolReserves, rhs: Neutron_Dex_PoolReserves) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs.reservesMakerDenom != rhs.reservesMakerDenom {return false}
    if lhs.priceTakerToMaker != rhs.priceTakerToMaker {return false}
    if lhs.priceOppositeTakerToMaker != rhs.priceOppositeTakerToMaker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
