// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ixo/iid/v1beta1/iid.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ixo_Iid_V1beta1_IidDocument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// @context is spec for did document.
  var context: [Ixo_Iid_V1beta1_Context] {
    get {return _storage._context}
    set {_uniqueStorage()._context = newValue}
  }

  /// id represents the id for the did document.
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// A DID controller is an entity that is authorized to make changes to a DID
  /// document. cfr. https://www.w3.org/TR/did-core/#did-controller
  var controller: [String] {
    get {return _storage._controller}
    set {_uniqueStorage()._controller = newValue}
  }

  /// A DID document can express verification methods,
  /// such as cryptographic public keys, which can be used
  /// to authenticate or authorize interactions with the DID subject or
  /// associated parties. https://www.w3.org/TR/did-core/#verification-methods
  var verificationMethod: [Ixo_Iid_V1beta1_VerificationMethod] {
    get {return _storage._verificationMethod}
    set {_uniqueStorage()._verificationMethod = newValue}
  }

  /// Services are used in DID documents to express ways of communicating
  /// with the DID subject or associated entities.
  /// https://www.w3.org/TR/did-core/#services
  var service: [Ixo_Iid_V1beta1_Service] {
    get {return _storage._service}
    set {_uniqueStorage()._service = newValue}
  }

  /// NOTE: below this line there are the relationships
  /// Authentication represents public key associated with the did document.
  /// cfr. https://www.w3.org/TR/did-core/#authentication
  var authentication: [String] {
    get {return _storage._authentication}
    set {_uniqueStorage()._authentication = newValue}
  }

  /// Used to specify how the DID subject is expected to express claims,
  /// such as for the purposes of issuing a Verifiable Credential.
  /// cfr. https://www.w3.org/TR/did-core/#assertion
  var assertionMethod: [String] {
    get {return _storage._assertionMethod}
    set {_uniqueStorage()._assertionMethod = newValue}
  }

  /// used to specify how an entity can generate encryption material
  /// in order to transmit confidential information intended for the DID subject.
  /// https://www.w3.org/TR/did-core/#key-agreement
  var keyAgreement: [String] {
    get {return _storage._keyAgreement}
    set {_uniqueStorage()._keyAgreement = newValue}
  }

  /// Used to specify a verification method that might be used by the DID subject
  /// to invoke a cryptographic capability, such as the authorization
  /// to update the DID Document.
  /// https://www.w3.org/TR/did-core/#capability-invocation
  var capabilityInvocation: [String] {
    get {return _storage._capabilityInvocation}
    set {_uniqueStorage()._capabilityInvocation = newValue}
  }

  /// Used to specify a mechanism that might be used by the DID subject
  /// to delegate a cryptographic capability to another party.
  /// https://www.w3.org/TR/did-core/#capability-delegation
  var capabilityDelegation: [String] {
    get {return _storage._capabilityDelegation}
    set {_uniqueStorage()._capabilityDelegation = newValue}
  }

  var linkedResource: [Ixo_Iid_V1beta1_LinkedResource] {
    get {return _storage._linkedResource}
    set {_uniqueStorage()._linkedResource = newValue}
  }

  var linkedClaim: [Ixo_Iid_V1beta1_LinkedClaim] {
    get {return _storage._linkedClaim}
    set {_uniqueStorage()._linkedClaim = newValue}
  }

  var accordedRight: [Ixo_Iid_V1beta1_AccordedRight] {
    get {return _storage._accordedRight}
    set {_uniqueStorage()._accordedRight = newValue}
  }

  var linkedEntity: [Ixo_Iid_V1beta1_LinkedEntity] {
    get {return _storage._linkedEntity}
    set {_uniqueStorage()._linkedEntity = newValue}
  }

  var alsoKnownAs: String {
    get {return _storage._alsoKnownAs}
    set {_uniqueStorage()._alsoKnownAs = newValue}
  }

  /// Metadata concerning the IidDocument such as versionId, created, updated and
  /// deactivated
  var metadata: Ixo_Iid_V1beta1_IidMetadata {
    get {return _storage._metadata ?? Ixo_Iid_V1beta1_IidMetadata()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ixo_Iid_V1beta1_IidDocument: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ixo.iid.v1beta1"

extension Ixo_Iid_V1beta1_IidDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IidDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    2: .same(proto: "id"),
    3: .same(proto: "controller"),
    4: .same(proto: "verificationMethod"),
    5: .same(proto: "service"),
    6: .same(proto: "authentication"),
    7: .same(proto: "assertionMethod"),
    8: .same(proto: "keyAgreement"),
    9: .same(proto: "capabilityInvocation"),
    10: .same(proto: "capabilityDelegation"),
    11: .same(proto: "linkedResource"),
    12: .same(proto: "linkedClaim"),
    13: .same(proto: "accordedRight"),
    14: .same(proto: "linkedEntity"),
    15: .same(proto: "alsoKnownAs"),
    16: .same(proto: "metadata"),
  ]

  fileprivate class _StorageClass {
    var _context: [Ixo_Iid_V1beta1_Context] = []
    var _id: String = String()
    var _controller: [String] = []
    var _verificationMethod: [Ixo_Iid_V1beta1_VerificationMethod] = []
    var _service: [Ixo_Iid_V1beta1_Service] = []
    var _authentication: [String] = []
    var _assertionMethod: [String] = []
    var _keyAgreement: [String] = []
    var _capabilityInvocation: [String] = []
    var _capabilityDelegation: [String] = []
    var _linkedResource: [Ixo_Iid_V1beta1_LinkedResource] = []
    var _linkedClaim: [Ixo_Iid_V1beta1_LinkedClaim] = []
    var _accordedRight: [Ixo_Iid_V1beta1_AccordedRight] = []
    var _linkedEntity: [Ixo_Iid_V1beta1_LinkedEntity] = []
    var _alsoKnownAs: String = String()
    var _metadata: Ixo_Iid_V1beta1_IidMetadata? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _context = source._context
      _id = source._id
      _controller = source._controller
      _verificationMethod = source._verificationMethod
      _service = source._service
      _authentication = source._authentication
      _assertionMethod = source._assertionMethod
      _keyAgreement = source._keyAgreement
      _capabilityInvocation = source._capabilityInvocation
      _capabilityDelegation = source._capabilityDelegation
      _linkedResource = source._linkedResource
      _linkedClaim = source._linkedClaim
      _accordedRight = source._accordedRight
      _linkedEntity = source._linkedEntity
      _alsoKnownAs = source._alsoKnownAs
      _metadata = source._metadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._context) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._controller) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._verificationMethod) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._service) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._authentication) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._assertionMethod) }()
        case 8: try { try decoder.decodeRepeatedStringField(value: &_storage._keyAgreement) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._capabilityInvocation) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._capabilityDelegation) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._linkedResource) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._linkedClaim) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._accordedRight) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._linkedEntity) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._alsoKnownAs) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._context.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._context, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._controller.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._controller, fieldNumber: 3)
      }
      if !_storage._verificationMethod.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._verificationMethod, fieldNumber: 4)
      }
      if !_storage._service.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._service, fieldNumber: 5)
      }
      if !_storage._authentication.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._authentication, fieldNumber: 6)
      }
      if !_storage._assertionMethod.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._assertionMethod, fieldNumber: 7)
      }
      if !_storage._keyAgreement.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._keyAgreement, fieldNumber: 8)
      }
      if !_storage._capabilityInvocation.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._capabilityInvocation, fieldNumber: 9)
      }
      if !_storage._capabilityDelegation.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._capabilityDelegation, fieldNumber: 10)
      }
      if !_storage._linkedResource.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._linkedResource, fieldNumber: 11)
      }
      if !_storage._linkedClaim.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._linkedClaim, fieldNumber: 12)
      }
      if !_storage._accordedRight.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._accordedRight, fieldNumber: 13)
      }
      if !_storage._linkedEntity.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._linkedEntity, fieldNumber: 14)
      }
      if !_storage._alsoKnownAs.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alsoKnownAs, fieldNumber: 15)
      }
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Iid_V1beta1_IidDocument, rhs: Ixo_Iid_V1beta1_IidDocument) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._context != rhs_storage._context {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._controller != rhs_storage._controller {return false}
        if _storage._verificationMethod != rhs_storage._verificationMethod {return false}
        if _storage._service != rhs_storage._service {return false}
        if _storage._authentication != rhs_storage._authentication {return false}
        if _storage._assertionMethod != rhs_storage._assertionMethod {return false}
        if _storage._keyAgreement != rhs_storage._keyAgreement {return false}
        if _storage._capabilityInvocation != rhs_storage._capabilityInvocation {return false}
        if _storage._capabilityDelegation != rhs_storage._capabilityDelegation {return false}
        if _storage._linkedResource != rhs_storage._linkedResource {return false}
        if _storage._linkedClaim != rhs_storage._linkedClaim {return false}
        if _storage._accordedRight != rhs_storage._accordedRight {return false}
        if _storage._linkedEntity != rhs_storage._linkedEntity {return false}
        if _storage._alsoKnownAs != rhs_storage._alsoKnownAs {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
