//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cudos/nft/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for NFT module
///
/// Usage: instantiate `Cudosnode_Cudosnode_Nft_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cudosnode_Cudosnode_Nft_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? { get }

  func supply(
    _ request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QuerySupplyRequest, Cudosnode_Cudosnode_Nft_QuerySupplyResponse>

  func owner(
    _ request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryOwnerRequest, Cudosnode_Cudosnode_Nft_QueryOwnerResponse>

  func collection(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionRequest, Cudosnode_Cudosnode_Nft_QueryCollectionResponse>

  func collectionsByDenomIds(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>

  func denom(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomRequest, Cudosnode_Cudosnode_Nft_QueryDenomResponse>

  func denomByName(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>

  func denomBySymbol(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>

  func denoms(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomsRequest, Cudosnode_Cudosnode_Nft_QueryDenomsResponse>

  func nFT(
    _ request: Cudosnode_Cudosnode_Nft_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryNFTRequest, Cudosnode_Cudosnode_Nft_QueryNFTResponse>

  func getApprovalsNFT(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>

  func queryApprovalsIsApprovedForAll(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>
}

extension Cudosnode_Cudosnode_Nft_QueryClientProtocol {
  internal var serviceName: String {
    return "cudosnode.cudosnode.nft.Query"
  }

  /// Supply queries the total supply of a given denom or owner
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QuerySupplyRequest, Cudosnode_Cudosnode_Nft_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// Owner queries the NFTs of the specified owner
  ///
  /// - Parameters:
  ///   - request: Request to send to Owner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func owner(
    _ request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryOwnerRequest, Cudosnode_Cudosnode_Nft_QueryOwnerResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  /// Collection queries the NFTs of the specified denom
  ///
  /// - Parameters:
  ///   - request: Request to send to Collection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collection(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionRequest, Cudosnode_Cudosnode_Nft_QueryCollectionResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  /// Collection queries the NFTs of the specified denom
  ///
  /// - Parameters:
  ///   - request: Request to send to CollectionsByDenomIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collectionsByDenomIds(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collectionsByDenomIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionsByDenomIdsInterceptors() ?? []
    )
  }

  /// Denom queries the definition of a given denom
  ///
  /// - Parameters:
  ///   - request: Request to send to Denom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denom(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomRequest, Cudosnode_Cudosnode_Nft_QueryDenomResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }

  /// DenomByName queries the definition of a given denom by name
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomByName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomByName(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomByName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomByNameInterceptors() ?? []
    )
  }

  /// DenomByName queries the definition of a given denom by name
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomBySymbol.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomBySymbol(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomBySymbol.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomBySymbolInterceptors() ?? []
    )
  }

  /// Denoms queries all the denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to Denoms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denoms(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomsRequest, Cudosnode_Cudosnode_Nft_QueryDenomsResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsInterceptors() ?? []
    )
  }

  /// NFT queries the NFT for the given denom and token ID
  ///
  /// - Parameters:
  ///   - request: Request to send to NFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nFT(
    _ request: Cudosnode_Cudosnode_Nft_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryNFTRequest, Cudosnode_Cudosnode_Nft_QueryNFTResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  /// NFT queries the NFT for the given denom and token ID
  ///
  /// - Parameters:
  ///   - request: Request to send to GetApprovalsNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getApprovalsNFT(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.getApprovalsNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetApprovalsNFTInterceptors() ?? []
    )
  }

  /// NFT queries the NFT for the given denom and token ID
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryApprovalsIsApprovedForAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryApprovalsIsApprovedForAll(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse> {
    return self.makeUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.queryApprovalsIsApprovedForAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryApprovalsIsApprovedForAllInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cudosnode_Cudosnode_Nft_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cudosnode_Cudosnode_Nft_QueryNIOClient")
internal final class Cudosnode_Cudosnode_Nft_QueryClient: Cudosnode_Cudosnode_Nft_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cudosnode.cudosnode.nft.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cudosnode_Cudosnode_Nft_QueryNIOClient: Cudosnode_Cudosnode_Nft_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cudosnode.cudosnode.nft.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for NFT module
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cudosnode_Cudosnode_Nft_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? { get }

  func makeSupplyCall(
    _ request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QuerySupplyRequest, Cudosnode_Cudosnode_Nft_QuerySupplyResponse>

  func makeOwnerCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryOwnerRequest, Cudosnode_Cudosnode_Nft_QueryOwnerResponse>

  func makeCollectionCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionRequest, Cudosnode_Cudosnode_Nft_QueryCollectionResponse>

  func makeCollectionsByDenomIdsCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>

  func makeDenomCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomRequest, Cudosnode_Cudosnode_Nft_QueryDenomResponse>

  func makeDenomByNameCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>

  func makeDenomBySymbolCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>

  func makeDenomsCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomsRequest, Cudosnode_Cudosnode_Nft_QueryDenomsResponse>

  func makeNftCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryNFTRequest, Cudosnode_Cudosnode_Nft_QueryNFTResponse>

  func makeGetApprovalsNftCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>

  func makeQueryApprovalsIsApprovedForAllCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudosnode_Cudosnode_Nft_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cudosnode_Cudosnode_Nft_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSupplyCall(
    _ request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QuerySupplyRequest, Cudosnode_Cudosnode_Nft_QuerySupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func makeOwnerCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryOwnerRequest, Cudosnode_Cudosnode_Nft_QueryOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  internal func makeCollectionCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionRequest, Cudosnode_Cudosnode_Nft_QueryCollectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func makeCollectionsByDenomIdsCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collectionsByDenomIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionsByDenomIdsInterceptors() ?? []
    )
  }

  internal func makeDenomCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomRequest, Cudosnode_Cudosnode_Nft_QueryDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }

  internal func makeDenomByNameCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomByName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomByNameInterceptors() ?? []
    )
  }

  internal func makeDenomBySymbolCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomBySymbol.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomBySymbolInterceptors() ?? []
    )
  }

  internal func makeDenomsCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryDenomsRequest, Cudosnode_Cudosnode_Nft_QueryDenomsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsInterceptors() ?? []
    )
  }

  internal func makeNftCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryNFTRequest, Cudosnode_Cudosnode_Nft_QueryNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  internal func makeGetApprovalsNftCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.getApprovalsNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetApprovalsNFTInterceptors() ?? []
    )
  }

  internal func makeQueryApprovalsIsApprovedForAllCall(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.queryApprovalsIsApprovedForAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryApprovalsIsApprovedForAllInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudosnode_Cudosnode_Nft_QueryAsyncClientProtocol {
  internal func supply(
    _ request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QuerySupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func owner(
    _ request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  internal func collection(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryCollectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func collectionsByDenomIds(
    _ request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collectionsByDenomIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionsByDenomIdsInterceptors() ?? []
    )
  }

  internal func denom(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }

  internal func denomByName(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomByName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomByNameInterceptors() ?? []
    )
  }

  internal func denomBySymbol(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomBySymbol.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomBySymbolInterceptors() ?? []
    )
  }

  internal func denoms(
    _ request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsInterceptors() ?? []
    )
  }

  internal func nFT(
    _ request: Cudosnode_Cudosnode_Nft_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  internal func getApprovalsNFT(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.getApprovalsNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetApprovalsNFTInterceptors() ?? []
    )
  }

  internal func queryApprovalsIsApprovedForAll(
    _ request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.queryApprovalsIsApprovedForAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryApprovalsIsApprovedForAllInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cudosnode_Cudosnode_Nft_QueryAsyncClient: Cudosnode_Cudosnode_Nft_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cudosnode_Cudosnode_Nft_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QuerySupplyRequest, Cudosnode_Cudosnode_Nft_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'owner'.
  func makeOwnerInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryOwnerRequest, Cudosnode_Cudosnode_Nft_QueryOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'collection'.
  func makeCollectionInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryCollectionRequest, Cudosnode_Cudosnode_Nft_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when invoking 'collectionsByDenomIds'.
  func makeCollectionsByDenomIdsInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>]

  /// - Returns: Interceptors to use when invoking 'denom'.
  func makeDenomInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomRequest, Cudosnode_Cudosnode_Nft_QueryDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'denomByName'.
  func makeDenomByNameInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>]

  /// - Returns: Interceptors to use when invoking 'denomBySymbol'.
  func makeDenomBySymbolInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>]

  /// - Returns: Interceptors to use when invoking 'denoms'.
  func makeDenomsInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomsRequest, Cudosnode_Cudosnode_Nft_QueryDenomsResponse>]

  /// - Returns: Interceptors to use when invoking 'nFT'.
  func makeNFTInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryNFTRequest, Cudosnode_Cudosnode_Nft_QueryNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'getApprovalsNFT'.
  func makeGetApprovalsNFTInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'queryApprovalsIsApprovedForAll'.
  func makeQueryApprovalsIsApprovedForAllInterceptors() -> [ClientInterceptor<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>]
}

internal enum Cudosnode_Cudosnode_Nft_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cudosnode.cudosnode.nft.Query",
    methods: [
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.supply,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.owner,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collection,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.collectionsByDenomIds,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denom,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomByName,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denomBySymbol,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.denoms,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.nFT,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.getApprovalsNFT,
      Cudosnode_Cudosnode_Nft_QueryClientMetadata.Methods.queryApprovalsIsApprovedForAll,
    ]
  )

  internal enum Methods {
    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/cudosnode.cudosnode.nft.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/cudosnode.cudosnode.nft.Query/Owner",
      type: GRPCCallType.unary
    )

    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/cudosnode.cudosnode.nft.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let collectionsByDenomIds = GRPCMethodDescriptor(
      name: "CollectionsByDenomIds",
      path: "/cudosnode.cudosnode.nft.Query/CollectionsByDenomIds",
      type: GRPCCallType.unary
    )

    internal static let denom = GRPCMethodDescriptor(
      name: "Denom",
      path: "/cudosnode.cudosnode.nft.Query/Denom",
      type: GRPCCallType.unary
    )

    internal static let denomByName = GRPCMethodDescriptor(
      name: "DenomByName",
      path: "/cudosnode.cudosnode.nft.Query/DenomByName",
      type: GRPCCallType.unary
    )

    internal static let denomBySymbol = GRPCMethodDescriptor(
      name: "DenomBySymbol",
      path: "/cudosnode.cudosnode.nft.Query/DenomBySymbol",
      type: GRPCCallType.unary
    )

    internal static let denoms = GRPCMethodDescriptor(
      name: "Denoms",
      path: "/cudosnode.cudosnode.nft.Query/Denoms",
      type: GRPCCallType.unary
    )

    internal static let nFT = GRPCMethodDescriptor(
      name: "NFT",
      path: "/cudosnode.cudosnode.nft.Query/NFT",
      type: GRPCCallType.unary
    )

    internal static let getApprovalsNFT = GRPCMethodDescriptor(
      name: "GetApprovalsNFT",
      path: "/cudosnode.cudosnode.nft.Query/GetApprovalsNFT",
      type: GRPCCallType.unary
    )

    internal static let queryApprovalsIsApprovedForAll = GRPCMethodDescriptor(
      name: "QueryApprovalsIsApprovedForAll",
      path: "/cudosnode.cudosnode.nft.Query/QueryApprovalsIsApprovedForAll",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for NFT module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cudosnode_Cudosnode_Nft_QueryProvider: CallHandlerProvider {
  var interceptors: Cudosnode_Cudosnode_Nft_QueryServerInterceptorFactoryProtocol? { get }

  /// Supply queries the total supply of a given denom or owner
  func supply(request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QuerySupplyResponse>

  /// Owner queries the NFTs of the specified owner
  func owner(request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryOwnerResponse>

  /// Collection queries the NFTs of the specified denom
  func collection(request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryCollectionResponse>

  /// Collection queries the NFTs of the specified denom
  func collectionsByDenomIds(request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>

  /// Denom queries the definition of a given denom
  func denom(request: Cudosnode_Cudosnode_Nft_QueryDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryDenomResponse>

  /// DenomByName queries the definition of a given denom by name
  func denomByName(request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>

  /// DenomByName queries the definition of a given denom by name
  func denomBySymbol(request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>

  /// Denoms queries all the denoms
  func denoms(request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryDenomsResponse>

  /// NFT queries the NFT for the given denom and token ID
  func nFT(request: Cudosnode_Cudosnode_Nft_QueryNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryNFTResponse>

  /// NFT queries the NFT for the given denom and token ID
  func getApprovalsNFT(request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>

  /// NFT queries the NFT for the given denom and token ID
  func queryApprovalsIsApprovedForAll(request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>
}

extension Cudosnode_Cudosnode_Nft_QueryProvider {
  internal var serviceName: Substring {
    return Cudosnode_Cudosnode_Nft_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Supply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        userFunction: self.supply(request:context:)
      )

    case "Owner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryOwnerResponse>(),
        interceptors: self.interceptors?.makeOwnerInterceptors() ?? [],
        userFunction: self.owner(request:context:)
      )

    case "Collection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        userFunction: self.collection(request:context:)
      )

    case "CollectionsByDenomIds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>(),
        interceptors: self.interceptors?.makeCollectionsByDenomIdsInterceptors() ?? [],
        userFunction: self.collectionsByDenomIds(request:context:)
      )

    case "Denom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeDenomInterceptors() ?? [],
        userFunction: self.denom(request:context:)
      )

    case "DenomByName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>(),
        interceptors: self.interceptors?.makeDenomByNameInterceptors() ?? [],
        userFunction: self.denomByName(request:context:)
      )

    case "DenomBySymbol":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>(),
        interceptors: self.interceptors?.makeDenomBySymbolInterceptors() ?? [],
        userFunction: self.denomBySymbol(request:context:)
      )

    case "Denoms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomsRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomsResponse>(),
        interceptors: self.interceptors?.makeDenomsInterceptors() ?? [],
        userFunction: self.denoms(request:context:)
      )

    case "NFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryNFTRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryNFTResponse>(),
        interceptors: self.interceptors?.makeNFTInterceptors() ?? [],
        userFunction: self.nFT(request:context:)
      )

    case "GetApprovalsNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>(),
        interceptors: self.interceptors?.makeGetApprovalsNFTInterceptors() ?? [],
        userFunction: self.getApprovalsNFT(request:context:)
      )

    case "QueryApprovalsIsApprovedForAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>(),
        interceptors: self.interceptors?.makeQueryApprovalsIsApprovedForAllInterceptors() ?? [],
        userFunction: self.queryApprovalsIsApprovedForAll(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for NFT module
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cudosnode_Cudosnode_Nft_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cudosnode_Cudosnode_Nft_QueryServerInterceptorFactoryProtocol? { get }

  /// Supply queries the total supply of a given denom or owner
  @Sendable func supply(
    request: Cudosnode_Cudosnode_Nft_QuerySupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QuerySupplyResponse

  /// Owner queries the NFTs of the specified owner
  @Sendable func owner(
    request: Cudosnode_Cudosnode_Nft_QueryOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryOwnerResponse

  /// Collection queries the NFTs of the specified denom
  @Sendable func collection(
    request: Cudosnode_Cudosnode_Nft_QueryCollectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryCollectionResponse

  /// Collection queries the NFTs of the specified denom
  @Sendable func collectionsByDenomIds(
    request: Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse

  /// Denom queries the definition of a given denom
  @Sendable func denom(
    request: Cudosnode_Cudosnode_Nft_QueryDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomResponse

  /// DenomByName queries the definition of a given denom by name
  @Sendable func denomByName(
    request: Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse

  /// DenomByName queries the definition of a given denom by name
  @Sendable func denomBySymbol(
    request: Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse

  /// Denoms queries all the denoms
  @Sendable func denoms(
    request: Cudosnode_Cudosnode_Nft_QueryDenomsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryDenomsResponse

  /// NFT queries the NFT for the given denom and token ID
  @Sendable func nFT(
    request: Cudosnode_Cudosnode_Nft_QueryNFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryNFTResponse

  /// NFT queries the NFT for the given denom and token ID
  @Sendable func getApprovalsNFT(
    request: Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse

  /// NFT queries the NFT for the given denom and token ID
  @Sendable func queryApprovalsIsApprovedForAll(
    request: Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudosnode_Cudosnode_Nft_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cudosnode_Cudosnode_Nft_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cudosnode_Cudosnode_Nft_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cudosnode_Cudosnode_Nft_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Supply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        wrapping: self.supply(request:context:)
      )

    case "Owner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryOwnerResponse>(),
        interceptors: self.interceptors?.makeOwnerInterceptors() ?? [],
        wrapping: self.owner(request:context:)
      )

    case "Collection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        wrapping: self.collection(request:context:)
      )

    case "CollectionsByDenomIds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>(),
        interceptors: self.interceptors?.makeCollectionsByDenomIdsInterceptors() ?? [],
        wrapping: self.collectionsByDenomIds(request:context:)
      )

    case "Denom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeDenomInterceptors() ?? [],
        wrapping: self.denom(request:context:)
      )

    case "DenomByName":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>(),
        interceptors: self.interceptors?.makeDenomByNameInterceptors() ?? [],
        wrapping: self.denomByName(request:context:)
      )

    case "DenomBySymbol":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>(),
        interceptors: self.interceptors?.makeDenomBySymbolInterceptors() ?? [],
        wrapping: self.denomBySymbol(request:context:)
      )

    case "Denoms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryDenomsRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryDenomsResponse>(),
        interceptors: self.interceptors?.makeDenomsInterceptors() ?? [],
        wrapping: self.denoms(request:context:)
      )

    case "NFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryNFTRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryNFTResponse>(),
        interceptors: self.interceptors?.makeNFTInterceptors() ?? [],
        wrapping: self.nFT(request:context:)
      )

    case "GetApprovalsNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>(),
        interceptors: self.interceptors?.makeGetApprovalsNFTInterceptors() ?? [],
        wrapping: self.getApprovalsNFT(request:context:)
      )

    case "QueryApprovalsIsApprovedForAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest>(),
        responseSerializer: ProtobufSerializer<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>(),
        interceptors: self.interceptors?.makeQueryApprovalsIsApprovedForAllInterceptors() ?? [],
        wrapping: self.queryApprovalsIsApprovedForAll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cudosnode_Cudosnode_Nft_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'supply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QuerySupplyRequest, Cudosnode_Cudosnode_Nft_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when handling 'owner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryOwnerRequest, Cudosnode_Cudosnode_Nft_QueryOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'collection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryCollectionRequest, Cudosnode_Cudosnode_Nft_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when handling 'collectionsByDenomIds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionsByDenomIdsInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryCollectionsByIdsRequest, Cudosnode_Cudosnode_Nft_QueryCollectionByIdsResponse>]

  /// - Returns: Interceptors to use when handling 'denom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomRequest, Cudosnode_Cudosnode_Nft_QueryDenomResponse>]

  /// - Returns: Interceptors to use when handling 'denomByName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomByNameInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomByNameRequest, Cudosnode_Cudosnode_Nft_QueryDenomByNameResponse>]

  /// - Returns: Interceptors to use when handling 'denomBySymbol'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomBySymbolInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomBySymbolRequest, Cudosnode_Cudosnode_Nft_QueryDenomBySymbolResponse>]

  /// - Returns: Interceptors to use when handling 'denoms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomsInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryDenomsRequest, Cudosnode_Cudosnode_Nft_QueryDenomsResponse>]

  /// - Returns: Interceptors to use when handling 'nFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNFTInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryNFTRequest, Cudosnode_Cudosnode_Nft_QueryNFTResponse>]

  /// - Returns: Interceptors to use when handling 'getApprovalsNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetApprovalsNFTInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryApprovalsNFTRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsNFTResponse>]

  /// - Returns: Interceptors to use when handling 'queryApprovalsIsApprovedForAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryApprovalsIsApprovedForAllInterceptors() -> [ServerInterceptor<Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllRequest, Cudosnode_Cudosnode_Nft_QueryApprovalsIsApprovedForAllResponse>]
}

internal enum Cudosnode_Cudosnode_Nft_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cudosnode.cudosnode.nft.Query",
    methods: [
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.supply,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.owner,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.collection,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.collectionsByDenomIds,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.denom,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.denomByName,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.denomBySymbol,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.denoms,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.nFT,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.getApprovalsNFT,
      Cudosnode_Cudosnode_Nft_QueryServerMetadata.Methods.queryApprovalsIsApprovedForAll,
    ]
  )

  internal enum Methods {
    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/cudosnode.cudosnode.nft.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/cudosnode.cudosnode.nft.Query/Owner",
      type: GRPCCallType.unary
    )

    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/cudosnode.cudosnode.nft.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let collectionsByDenomIds = GRPCMethodDescriptor(
      name: "CollectionsByDenomIds",
      path: "/cudosnode.cudosnode.nft.Query/CollectionsByDenomIds",
      type: GRPCCallType.unary
    )

    internal static let denom = GRPCMethodDescriptor(
      name: "Denom",
      path: "/cudosnode.cudosnode.nft.Query/Denom",
      type: GRPCCallType.unary
    )

    internal static let denomByName = GRPCMethodDescriptor(
      name: "DenomByName",
      path: "/cudosnode.cudosnode.nft.Query/DenomByName",
      type: GRPCCallType.unary
    )

    internal static let denomBySymbol = GRPCMethodDescriptor(
      name: "DenomBySymbol",
      path: "/cudosnode.cudosnode.nft.Query/DenomBySymbol",
      type: GRPCCallType.unary
    )

    internal static let denoms = GRPCMethodDescriptor(
      name: "Denoms",
      path: "/cudosnode.cudosnode.nft.Query/Denoms",
      type: GRPCCallType.unary
    )

    internal static let nFT = GRPCMethodDescriptor(
      name: "NFT",
      path: "/cudosnode.cudosnode.nft.Query/NFT",
      type: GRPCCallType.unary
    )

    internal static let getApprovalsNFT = GRPCMethodDescriptor(
      name: "GetApprovalsNFT",
      path: "/cudosnode.cudosnode.nft.Query/GetApprovalsNFT",
      type: GRPCCallType.unary
    )

    internal static let queryApprovalsIsApprovedForAll = GRPCMethodDescriptor(
      name: "QueryApprovalsIsApprovedForAll",
      path: "/cudosnode.cudosnode.nft.Query/QueryApprovalsIsApprovedForAll",
      type: GRPCCallType.unary
    )
  }
}
