// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/marketmaker/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the marketmaker module's genesis state.
struct Crescent_Marketmaker_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters for the marketmaker module
  var params: Crescent_Marketmaker_V1beta1_Params {
    get {return _params ?? Crescent_Marketmaker_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var marketMakers: [Crescent_Marketmaker_V1beta1_MarketMaker] = []

  var incentives: [Crescent_Marketmaker_V1beta1_Incentive] = []

  var depositRecords: [Crescent_Marketmaker_V1beta1_DepositRecord] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Crescent_Marketmaker_V1beta1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Crescent_Marketmaker_V1beta1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.marketmaker.v1beta1"

extension Crescent_Marketmaker_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "market_makers"),
    3: .same(proto: "incentives"),
    4: .standard(proto: "deposit_records"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.marketMakers) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.incentives) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.depositRecords) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.marketMakers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.marketMakers, fieldNumber: 2)
    }
    if !self.incentives.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.incentives, fieldNumber: 3)
    }
    if !self.depositRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositRecords, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_GenesisState, rhs: Crescent_Marketmaker_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.marketMakers != rhs.marketMakers {return false}
    if lhs.incentives != rhs.incentives {return false}
    if lhs.depositRecords != rhs.depositRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
