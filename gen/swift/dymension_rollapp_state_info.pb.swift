// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dymension/rollapp/state_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// StateInfoIndex is the data used for indexing and retrieving a StateInfo 
/// it updated and saved with every UpdateState in StateInfo.
/// We use the this structure also for:
/// 1. LatestStateInfoIndex which defines the rollapps' current (latest) index of the last UpdateState 
/// 2. LatestFinalizedStateIndex which defines the rollapps' current (latest) index of the latest StateInfo that was finalized
struct Dymensionxyz_Dymension_Rollapp_StateInfoIndex {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// rollappId is the rollapp that the sequencer belongs to and asking to update
  /// it used to identify the what rollapp a StateInfo belongs
  /// The rollappId follows the same standard as cosmos chain_id
  var rollappID: String = String()

  /// index is a sequential increasing number, updating on each
  /// state update used for indexing to a specific state info, the first index is 1
  var index: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StateInfo defines a rollapps' state.
struct Dymensionxyz_Dymension_Rollapp_StateInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// stateInfoIndex defines what rollapp the state belongs to
  /// and in which index it can be referenced
  var stateInfoIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex {
    get {return _stateInfoIndex ?? Dymensionxyz_Dymension_Rollapp_StateInfoIndex()}
    set {_stateInfoIndex = newValue}
  }
  /// Returns true if `stateInfoIndex` has been explicitly set.
  var hasStateInfoIndex: Bool {return self._stateInfoIndex != nil}
  /// Clears the value of `stateInfoIndex`. Subsequent reads from it will return its default value.
  mutating func clearStateInfoIndex() {self._stateInfoIndex = nil}

  /// sequencer is the bech32-encoded address of the sequencer sent the update
  var sequencer: String = String()

  /// startHeight is the block height of the first block in the batch
  var startHeight: UInt64 = 0

  /// numBlocks is the number of blocks included in this batch update
  var numBlocks: UInt64 = 0

  /// DAPath is the description of the location on the DA layer
  var dapath: String = String()

  /// version is the version of the rollapp
  var version: UInt64 = 0

  /// creationHeight is the height at which the UpdateState took place
  var creationHeight: UInt64 = 0

  /// status is the status of the state update
  var status: Dymensionxyz_Dymension_Rollapp_StateStatus = .unspecified

  /// BDs is a list of block description objects (one per block)
  /// the list must be ordered by height, starting from startHeight to startHeight+numBlocks-1
  var bds: Dymensionxyz_Dymension_Rollapp_BlockDescriptors {
    get {return _bds ?? Dymensionxyz_Dymension_Rollapp_BlockDescriptors()}
    set {_bds = newValue}
  }
  /// Returns true if `bds` has been explicitly set.
  var hasBds: Bool {return self._bds != nil}
  /// Clears the value of `bds`. Subsequent reads from it will return its default value.
  mutating func clearBds() {self._bds = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stateInfoIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex? = nil
  fileprivate var _bds: Dymensionxyz_Dymension_Rollapp_BlockDescriptors? = nil
}

/// StateInfoSummary is a compact representation of StateInfo
struct Dymensionxyz_Dymension_Rollapp_StateInfoSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// stateInfoIndex defines what rollapp the state belongs to
  /// and in which index it can be referenced
  var stateInfoIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex {
    get {return _stateInfoIndex ?? Dymensionxyz_Dymension_Rollapp_StateInfoIndex()}
    set {_stateInfoIndex = newValue}
  }
  /// Returns true if `stateInfoIndex` has been explicitly set.
  var hasStateInfoIndex: Bool {return self._stateInfoIndex != nil}
  /// Clears the value of `stateInfoIndex`. Subsequent reads from it will return its default value.
  mutating func clearStateInfoIndex() {self._stateInfoIndex = nil}

  /// status is the status of the state update
  var status: Dymensionxyz_Dymension_Rollapp_StateStatus = .unspecified

  /// creationHeight is the height at which the UpdateState took place
  var creationHeight: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stateInfoIndex: Dymensionxyz_Dymension_Rollapp_StateInfoIndex? = nil
}

/// BlockHeightToFinalizationQueue defines a map from block height to list of states to finalized
struct Dymensionxyz_Dymension_Rollapp_BlockHeightToFinalizationQueue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finalizationHeight is the block height that the state should be finalized
  var finalizationHeight: UInt64 = 0

  /// finalizationQueue is a list of states that are waiting to be finalized
  /// when the block height becomes finalizationHeight
  var finalizationQueue: [Dymensionxyz_Dymension_Rollapp_StateInfoIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dymensionxyz_Dymension_Rollapp_StateInfoIndex: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Rollapp_StateInfo: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Rollapp_StateInfoSummary: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Rollapp_BlockHeightToFinalizationQueue: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dymensionxyz.dymension.rollapp"

extension Dymensionxyz_Dymension_Rollapp_StateInfoIndex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateInfoIndex"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rollappId"),
    2: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rollappID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rollappID.isEmpty {
      try visitor.visitSingularStringField(value: self.rollappID, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_StateInfoIndex, rhs: Dymensionxyz_Dymension_Rollapp_StateInfoIndex) -> Bool {
    if lhs.rollappID != rhs.rollappID {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Rollapp_StateInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stateInfoIndex"),
    2: .same(proto: "sequencer"),
    3: .same(proto: "startHeight"),
    4: .same(proto: "numBlocks"),
    5: .same(proto: "DAPath"),
    6: .same(proto: "version"),
    7: .same(proto: "creationHeight"),
    8: .same(proto: "status"),
    9: .same(proto: "BDs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stateInfoIndex) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sequencer) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.startHeight) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.numBlocks) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dapath) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.version) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.creationHeight) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._bds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stateInfoIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.sequencer.isEmpty {
      try visitor.visitSingularStringField(value: self.sequencer, fieldNumber: 2)
    }
    if self.startHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.startHeight, fieldNumber: 3)
    }
    if self.numBlocks != 0 {
      try visitor.visitSingularUInt64Field(value: self.numBlocks, fieldNumber: 4)
    }
    if !self.dapath.isEmpty {
      try visitor.visitSingularStringField(value: self.dapath, fieldNumber: 5)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt64Field(value: self.version, fieldNumber: 6)
    }
    if self.creationHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.creationHeight, fieldNumber: 7)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 8)
    }
    try { if let v = self._bds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_StateInfo, rhs: Dymensionxyz_Dymension_Rollapp_StateInfo) -> Bool {
    if lhs._stateInfoIndex != rhs._stateInfoIndex {return false}
    if lhs.sequencer != rhs.sequencer {return false}
    if lhs.startHeight != rhs.startHeight {return false}
    if lhs.numBlocks != rhs.numBlocks {return false}
    if lhs.dapath != rhs.dapath {return false}
    if lhs.version != rhs.version {return false}
    if lhs.creationHeight != rhs.creationHeight {return false}
    if lhs.status != rhs.status {return false}
    if lhs._bds != rhs._bds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Rollapp_StateInfoSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateInfoSummary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stateInfoIndex"),
    2: .same(proto: "status"),
    3: .same(proto: "creationHeight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stateInfoIndex) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.creationHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stateInfoIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.creationHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.creationHeight, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_StateInfoSummary, rhs: Dymensionxyz_Dymension_Rollapp_StateInfoSummary) -> Bool {
    if lhs._stateInfoIndex != rhs._stateInfoIndex {return false}
    if lhs.status != rhs.status {return false}
    if lhs.creationHeight != rhs.creationHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Rollapp_BlockHeightToFinalizationQueue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockHeightToFinalizationQueue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "finalizationHeight"),
    2: .same(proto: "finalizationQueue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.finalizationHeight) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.finalizationQueue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.finalizationHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.finalizationHeight, fieldNumber: 1)
    }
    if !self.finalizationQueue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.finalizationQueue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_BlockHeightToFinalizationQueue, rhs: Dymensionxyz_Dymension_Rollapp_BlockHeightToFinalizationQueue) -> Bool {
    if lhs.finalizationHeight != rhs.finalizationHeight {return false}
    if lhs.finalizationQueue != rhs.finalizationQueue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
