//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: OmniFlix/marketplace/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `OmniFlix_Marketplace_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol OmniFlix_Marketplace_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryParamsRequest, OmniFlix_Marketplace_V1beta1_QueryParamsResponse>

  func listings(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsRequest, OmniFlix_Marketplace_V1beta1_QueryListingsResponse>

  func listing(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>

  func listingsByOwner(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>

  func listingsByPriceDenom(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>

  func listingByNftId(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>

  func auctions(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func auction(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>

  func auctionsByOwner(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func auctionsByPriceDenom(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func auctionByNftId(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>

  func bids(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidsRequest, OmniFlix_Marketplace_V1beta1_QueryBidsResponse>

  func bid(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidRequest, OmniFlix_Marketplace_V1beta1_QueryBidResponse>
}

extension OmniFlix_Marketplace_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "OmniFlix.marketplace.v1beta1.Query"
  }

  /// Params queries params of the marketplace module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryParamsRequest, OmniFlix_Marketplace_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to Listings
  ///
  /// - Parameters:
  ///   - request: Request to send to Listings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listings(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsRequest, OmniFlix_Marketplace_V1beta1_QueryListingsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsInterceptors() ?? []
    )
  }

  /// Unary call to Listing
  ///
  /// - Parameters:
  ///   - request: Request to send to Listing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listing(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingInterceptors() ?? []
    )
  }

  /// Unary call to ListingsByOwner
  ///
  /// - Parameters:
  ///   - request: Request to send to ListingsByOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listingsByOwner(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByOwnerInterceptors() ?? []
    )
  }

  /// Unary call to ListingsByPriceDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to ListingsByPriceDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listingsByPriceDenom(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByPriceDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByPriceDenomInterceptors() ?? []
    )
  }

  /// Unary call to ListingByNftId
  ///
  /// - Parameters:
  ///   - request: Request to send to ListingByNftId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listingByNftId(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingByNftId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingByNftIdInterceptors() ?? []
    )
  }

  /// auction queries
  ///
  /// - Parameters:
  ///   - request: Request to send to Auctions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auctions(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsInterceptors() ?? []
    )
  }

  /// Unary call to Auction
  ///
  /// - Parameters:
  ///   - request: Request to send to Auction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auction(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionInterceptors() ?? []
    )
  }

  /// Unary call to AuctionsByOwner
  ///
  /// - Parameters:
  ///   - request: Request to send to AuctionsByOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auctionsByOwner(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsByOwnerInterceptors() ?? []
    )
  }

  /// Unary call to AuctionsByPriceDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to AuctionsByPriceDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auctionsByPriceDenom(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByPriceDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsByPriceDenomInterceptors() ?? []
    )
  }

  /// Unary call to AuctionByNftId
  ///
  /// - Parameters:
  ///   - request: Request to send to AuctionByNftId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auctionByNftId(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionByNftId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionByNftIdInterceptors() ?? []
    )
  }

  /// Unary call to Bids
  ///
  /// - Parameters:
  ///   - request: Request to send to Bids.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bids(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidsRequest, OmniFlix_Marketplace_V1beta1_QueryBidsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  /// Unary call to Bid
  ///
  /// - Parameters:
  ///   - request: Request to send to Bid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bid(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidRequest, OmniFlix_Marketplace_V1beta1_QueryBidResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension OmniFlix_Marketplace_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "OmniFlix_Marketplace_V1beta1_QueryNIOClient")
internal final class OmniFlix_Marketplace_V1beta1_QueryClient: OmniFlix_Marketplace_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the OmniFlix.marketplace.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct OmniFlix_Marketplace_V1beta1_QueryNIOClient: OmniFlix_Marketplace_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the OmniFlix.marketplace.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Marketplace_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryParamsRequest, OmniFlix_Marketplace_V1beta1_QueryParamsResponse>

  func makeListingsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsRequest, OmniFlix_Marketplace_V1beta1_QueryListingsResponse>

  func makeListingCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>

  func makeListingsByOwnerCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>

  func makeListingsByPriceDenomCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>

  func makeListingByNftIDCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>

  func makeAuctionsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func makeAuctionCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>

  func makeAuctionsByOwnerCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func makeAuctionsByPriceDenomCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func makeAuctionByNftIDCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>

  func makeBidsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidsRequest, OmniFlix_Marketplace_V1beta1_QueryBidsResponse>

  func makeBidCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidRequest, OmniFlix_Marketplace_V1beta1_QueryBidResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Marketplace_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Marketplace_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryParamsRequest, OmniFlix_Marketplace_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeListingsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsRequest, OmniFlix_Marketplace_V1beta1_QueryListingsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsInterceptors() ?? []
    )
  }

  internal func makeListingCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingInterceptors() ?? []
    )
  }

  internal func makeListingsByOwnerCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByOwnerInterceptors() ?? []
    )
  }

  internal func makeListingsByPriceDenomCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByPriceDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByPriceDenomInterceptors() ?? []
    )
  }

  internal func makeListingByNftIDCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingByNftId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingByNftIdInterceptors() ?? []
    )
  }

  internal func makeAuctionsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsInterceptors() ?? []
    )
  }

  internal func makeAuctionCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionInterceptors() ?? []
    )
  }

  internal func makeAuctionsByOwnerCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsByOwnerInterceptors() ?? []
    )
  }

  internal func makeAuctionsByPriceDenomCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByPriceDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsByPriceDenomInterceptors() ?? []
    )
  }

  internal func makeAuctionByNftIDCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionByNftId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionByNftIdInterceptors() ?? []
    )
  }

  internal func makeBidsCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidsRequest, OmniFlix_Marketplace_V1beta1_QueryBidsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  internal func makeBidCall(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Marketplace_V1beta1_QueryBidRequest, OmniFlix_Marketplace_V1beta1_QueryBidResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Marketplace_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func listings(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsInterceptors() ?? []
    )
  }

  internal func listing(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingInterceptors() ?? []
    )
  }

  internal func listingsByOwner(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByOwnerInterceptors() ?? []
    )
  }

  internal func listingsByPriceDenom(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByPriceDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByPriceDenomInterceptors() ?? []
    )
  }

  internal func listingByNftId(
    _ request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingByNftId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingByNftIdInterceptors() ?? []
    )
  }

  internal func auctions(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsInterceptors() ?? []
    )
  }

  internal func auction(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionInterceptors() ?? []
    )
  }

  internal func auctionsByOwner(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsByOwnerInterceptors() ?? []
    )
  }

  internal func auctionsByPriceDenom(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByPriceDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionsByPriceDenomInterceptors() ?? []
    )
  }

  internal func auctionByNftId(
    _ request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionByNftId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuctionByNftIdInterceptors() ?? []
    )
  }

  internal func bids(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryBidsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  internal func bid(
    _ request: OmniFlix_Marketplace_V1beta1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryBidResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct OmniFlix_Marketplace_V1beta1_QueryAsyncClient: OmniFlix_Marketplace_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol OmniFlix_Marketplace_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryParamsRequest, OmniFlix_Marketplace_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'listings'.
  func makeListingsInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingsRequest, OmniFlix_Marketplace_V1beta1_QueryListingsResponse>]

  /// - Returns: Interceptors to use when invoking 'listing'.
  func makeListingInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>]

  /// - Returns: Interceptors to use when invoking 'listingsByOwner'.
  func makeListingsByOwnerInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'listingsByPriceDenom'.
  func makeListingsByPriceDenomInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'listingByNftId'.
  func makeListingByNftIdInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>]

  /// - Returns: Interceptors to use when invoking 'auctions'.
  func makeAuctionsInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>]

  /// - Returns: Interceptors to use when invoking 'auction'.
  func makeAuctionInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>]

  /// - Returns: Interceptors to use when invoking 'auctionsByOwner'.
  func makeAuctionsByOwnerInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>]

  /// - Returns: Interceptors to use when invoking 'auctionsByPriceDenom'.
  func makeAuctionsByPriceDenomInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>]

  /// - Returns: Interceptors to use when invoking 'auctionByNftId'.
  func makeAuctionByNftIdInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>]

  /// - Returns: Interceptors to use when invoking 'bids'.
  func makeBidsInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryBidsRequest, OmniFlix_Marketplace_V1beta1_QueryBidsResponse>]

  /// - Returns: Interceptors to use when invoking 'bid'.
  func makeBidInterceptors() -> [ClientInterceptor<OmniFlix_Marketplace_V1beta1_QueryBidRequest, OmniFlix_Marketplace_V1beta1_QueryBidResponse>]
}

internal enum OmniFlix_Marketplace_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "OmniFlix.marketplace.v1beta1.Query",
    methods: [
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.params,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listings,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listing,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByOwner,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingsByPriceDenom,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.listingByNftId,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctions,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auction,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByOwner,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionsByPriceDenom,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.auctionByNftId,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bids,
      OmniFlix_Marketplace_V1beta1_QueryClientMetadata.Methods.bid,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/OmniFlix.marketplace.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let listings = GRPCMethodDescriptor(
      name: "Listings",
      path: "/OmniFlix.marketplace.v1beta1.Query/Listings",
      type: GRPCCallType.unary
    )

    internal static let listing = GRPCMethodDescriptor(
      name: "Listing",
      path: "/OmniFlix.marketplace.v1beta1.Query/Listing",
      type: GRPCCallType.unary
    )

    internal static let listingsByOwner = GRPCMethodDescriptor(
      name: "ListingsByOwner",
      path: "/OmniFlix.marketplace.v1beta1.Query/ListingsByOwner",
      type: GRPCCallType.unary
    )

    internal static let listingsByPriceDenom = GRPCMethodDescriptor(
      name: "ListingsByPriceDenom",
      path: "/OmniFlix.marketplace.v1beta1.Query/ListingsByPriceDenom",
      type: GRPCCallType.unary
    )

    internal static let listingByNftId = GRPCMethodDescriptor(
      name: "ListingByNftId",
      path: "/OmniFlix.marketplace.v1beta1.Query/ListingByNftId",
      type: GRPCCallType.unary
    )

    internal static let auctions = GRPCMethodDescriptor(
      name: "Auctions",
      path: "/OmniFlix.marketplace.v1beta1.Query/Auctions",
      type: GRPCCallType.unary
    )

    internal static let auction = GRPCMethodDescriptor(
      name: "Auction",
      path: "/OmniFlix.marketplace.v1beta1.Query/Auction",
      type: GRPCCallType.unary
    )

    internal static let auctionsByOwner = GRPCMethodDescriptor(
      name: "AuctionsByOwner",
      path: "/OmniFlix.marketplace.v1beta1.Query/AuctionsByOwner",
      type: GRPCCallType.unary
    )

    internal static let auctionsByPriceDenom = GRPCMethodDescriptor(
      name: "AuctionsByPriceDenom",
      path: "/OmniFlix.marketplace.v1beta1.Query/AuctionsByPriceDenom",
      type: GRPCCallType.unary
    )

    internal static let auctionByNftId = GRPCMethodDescriptor(
      name: "AuctionByNftId",
      path: "/OmniFlix.marketplace.v1beta1.Query/AuctionByNftId",
      type: GRPCCallType.unary
    )

    internal static let bids = GRPCMethodDescriptor(
      name: "Bids",
      path: "/OmniFlix.marketplace.v1beta1.Query/Bids",
      type: GRPCCallType.unary
    )

    internal static let bid = GRPCMethodDescriptor(
      name: "Bid",
      path: "/OmniFlix.marketplace.v1beta1.Query/Bid",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol OmniFlix_Marketplace_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: OmniFlix_Marketplace_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries params of the marketplace module.
  func params(request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryParamsResponse>

  func listings(request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryListingsResponse>

  func listing(request: OmniFlix_Marketplace_V1beta1_QueryListingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryListingResponse>

  func listingsByOwner(request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>

  func listingsByPriceDenom(request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>

  func listingByNftId(request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryListingResponse>

  /// auction queries
  func auctions(request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func auction(request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>

  func auctionsByOwner(request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func auctionsByPriceDenom(request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>

  func auctionByNftId(request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>

  func bids(request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryBidsResponse>

  func bid(request: OmniFlix_Marketplace_V1beta1_QueryBidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Marketplace_V1beta1_QueryBidResponse>
}

extension OmniFlix_Marketplace_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return OmniFlix_Marketplace_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Listings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingsResponse>(),
        interceptors: self.interceptors?.makeListingsInterceptors() ?? [],
        userFunction: self.listings(request:context:)
      )

    case "Listing":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingResponse>(),
        interceptors: self.interceptors?.makeListingInterceptors() ?? [],
        userFunction: self.listing(request:context:)
      )

    case "ListingsByOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>(),
        interceptors: self.interceptors?.makeListingsByOwnerInterceptors() ?? [],
        userFunction: self.listingsByOwner(request:context:)
      )

    case "ListingsByPriceDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>(),
        interceptors: self.interceptors?.makeListingsByPriceDenomInterceptors() ?? [],
        userFunction: self.listingsByPriceDenom(request:context:)
      )

    case "ListingByNftId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingResponse>(),
        interceptors: self.interceptors?.makeListingByNftIdInterceptors() ?? [],
        userFunction: self.listingByNftId(request:context:)
      )

    case "Auctions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>(),
        interceptors: self.interceptors?.makeAuctionsInterceptors() ?? [],
        userFunction: self.auctions(request:context:)
      )

    case "Auction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>(),
        interceptors: self.interceptors?.makeAuctionInterceptors() ?? [],
        userFunction: self.auction(request:context:)
      )

    case "AuctionsByOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>(),
        interceptors: self.interceptors?.makeAuctionsByOwnerInterceptors() ?? [],
        userFunction: self.auctionsByOwner(request:context:)
      )

    case "AuctionsByPriceDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>(),
        interceptors: self.interceptors?.makeAuctionsByPriceDenomInterceptors() ?? [],
        userFunction: self.auctionsByPriceDenom(request:context:)
      )

    case "AuctionByNftId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>(),
        interceptors: self.interceptors?.makeAuctionByNftIdInterceptors() ?? [],
        userFunction: self.auctionByNftId(request:context:)
      )

    case "Bids":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        userFunction: self.bids(request:context:)
      )

    case "Bid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryBidResponse>(),
        interceptors: self.interceptors?.makeBidInterceptors() ?? [],
        userFunction: self.bid(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Marketplace_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Marketplace_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries params of the marketplace module.
  @Sendable func params(
    request: OmniFlix_Marketplace_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryParamsResponse

  @Sendable func listings(
    request: OmniFlix_Marketplace_V1beta1_QueryListingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingsResponse

  @Sendable func listing(
    request: OmniFlix_Marketplace_V1beta1_QueryListingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingResponse

  @Sendable func listingsByOwner(
    request: OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse

  @Sendable func listingsByPriceDenom(
    request: OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse

  @Sendable func listingByNftId(
    request: OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryListingResponse

  /// auction queries
  @Sendable func auctions(
    request: OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse

  @Sendable func auction(
    request: OmniFlix_Marketplace_V1beta1_QueryAuctionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionResponse

  @Sendable func auctionsByOwner(
    request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse

  @Sendable func auctionsByPriceDenom(
    request: OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse

  @Sendable func auctionByNftId(
    request: OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryAuctionResponse

  @Sendable func bids(
    request: OmniFlix_Marketplace_V1beta1_QueryBidsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryBidsResponse

  @Sendable func bid(
    request: OmniFlix_Marketplace_V1beta1_QueryBidRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Marketplace_V1beta1_QueryBidResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Marketplace_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Marketplace_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return OmniFlix_Marketplace_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: OmniFlix_Marketplace_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Listings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingsResponse>(),
        interceptors: self.interceptors?.makeListingsInterceptors() ?? [],
        wrapping: self.listings(request:context:)
      )

    case "Listing":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingResponse>(),
        interceptors: self.interceptors?.makeListingInterceptors() ?? [],
        wrapping: self.listing(request:context:)
      )

    case "ListingsByOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>(),
        interceptors: self.interceptors?.makeListingsByOwnerInterceptors() ?? [],
        wrapping: self.listingsByOwner(request:context:)
      )

    case "ListingsByPriceDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>(),
        interceptors: self.interceptors?.makeListingsByPriceDenomInterceptors() ?? [],
        wrapping: self.listingsByPriceDenom(request:context:)
      )

    case "ListingByNftId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryListingResponse>(),
        interceptors: self.interceptors?.makeListingByNftIdInterceptors() ?? [],
        wrapping: self.listingByNftId(request:context:)
      )

    case "Auctions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>(),
        interceptors: self.interceptors?.makeAuctionsInterceptors() ?? [],
        wrapping: self.auctions(request:context:)
      )

    case "Auction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>(),
        interceptors: self.interceptors?.makeAuctionInterceptors() ?? [],
        wrapping: self.auction(request:context:)
      )

    case "AuctionsByOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>(),
        interceptors: self.interceptors?.makeAuctionsByOwnerInterceptors() ?? [],
        wrapping: self.auctionsByOwner(request:context:)
      )

    case "AuctionsByPriceDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>(),
        interceptors: self.interceptors?.makeAuctionsByPriceDenomInterceptors() ?? [],
        wrapping: self.auctionsByPriceDenom(request:context:)
      )

    case "AuctionByNftId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>(),
        interceptors: self.interceptors?.makeAuctionByNftIdInterceptors() ?? [],
        wrapping: self.auctionByNftId(request:context:)
      )

    case "Bids":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        wrapping: self.bids(request:context:)
      )

    case "Bid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Marketplace_V1beta1_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Marketplace_V1beta1_QueryBidResponse>(),
        interceptors: self.interceptors?.makeBidInterceptors() ?? [],
        wrapping: self.bid(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol OmniFlix_Marketplace_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryParamsRequest, OmniFlix_Marketplace_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'listings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingsInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingsRequest, OmniFlix_Marketplace_V1beta1_QueryListingsResponse>]

  /// - Returns: Interceptors to use when handling 'listing'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>]

  /// - Returns: Interceptors to use when handling 'listingsByOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingsByOwnerInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'listingsByPriceDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingsByPriceDenomInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryListingsByPriceDenomResponse>]

  /// - Returns: Interceptors to use when handling 'listingByNftId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingByNftIdInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryListingByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryListingResponse>]

  /// - Returns: Interceptors to use when handling 'auctions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuctionsInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionsRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>]

  /// - Returns: Interceptors to use when handling 'auction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuctionInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>]

  /// - Returns: Interceptors to use when handling 'auctionsByOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuctionsByOwnerInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionsByOwnerRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>]

  /// - Returns: Interceptors to use when handling 'auctionsByPriceDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuctionsByPriceDenomInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionsByPriceDenomRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionsResponse>]

  /// - Returns: Interceptors to use when handling 'auctionByNftId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuctionByNftIdInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryAuctionByNFTIDRequest, OmniFlix_Marketplace_V1beta1_QueryAuctionResponse>]

  /// - Returns: Interceptors to use when handling 'bids'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidsInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryBidsRequest, OmniFlix_Marketplace_V1beta1_QueryBidsResponse>]

  /// - Returns: Interceptors to use when handling 'bid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidInterceptors() -> [ServerInterceptor<OmniFlix_Marketplace_V1beta1_QueryBidRequest, OmniFlix_Marketplace_V1beta1_QueryBidResponse>]
}

internal enum OmniFlix_Marketplace_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "OmniFlix.marketplace.v1beta1.Query",
    methods: [
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.params,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.listings,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.listing,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.listingsByOwner,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.listingsByPriceDenom,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.listingByNftId,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.auctions,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.auction,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.auctionsByOwner,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.auctionsByPriceDenom,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.auctionByNftId,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.bids,
      OmniFlix_Marketplace_V1beta1_QueryServerMetadata.Methods.bid,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/OmniFlix.marketplace.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let listings = GRPCMethodDescriptor(
      name: "Listings",
      path: "/OmniFlix.marketplace.v1beta1.Query/Listings",
      type: GRPCCallType.unary
    )

    internal static let listing = GRPCMethodDescriptor(
      name: "Listing",
      path: "/OmniFlix.marketplace.v1beta1.Query/Listing",
      type: GRPCCallType.unary
    )

    internal static let listingsByOwner = GRPCMethodDescriptor(
      name: "ListingsByOwner",
      path: "/OmniFlix.marketplace.v1beta1.Query/ListingsByOwner",
      type: GRPCCallType.unary
    )

    internal static let listingsByPriceDenom = GRPCMethodDescriptor(
      name: "ListingsByPriceDenom",
      path: "/OmniFlix.marketplace.v1beta1.Query/ListingsByPriceDenom",
      type: GRPCCallType.unary
    )

    internal static let listingByNftId = GRPCMethodDescriptor(
      name: "ListingByNftId",
      path: "/OmniFlix.marketplace.v1beta1.Query/ListingByNftId",
      type: GRPCCallType.unary
    )

    internal static let auctions = GRPCMethodDescriptor(
      name: "Auctions",
      path: "/OmniFlix.marketplace.v1beta1.Query/Auctions",
      type: GRPCCallType.unary
    )

    internal static let auction = GRPCMethodDescriptor(
      name: "Auction",
      path: "/OmniFlix.marketplace.v1beta1.Query/Auction",
      type: GRPCCallType.unary
    )

    internal static let auctionsByOwner = GRPCMethodDescriptor(
      name: "AuctionsByOwner",
      path: "/OmniFlix.marketplace.v1beta1.Query/AuctionsByOwner",
      type: GRPCCallType.unary
    )

    internal static let auctionsByPriceDenom = GRPCMethodDescriptor(
      name: "AuctionsByPriceDenom",
      path: "/OmniFlix.marketplace.v1beta1.Query/AuctionsByPriceDenom",
      type: GRPCCallType.unary
    )

    internal static let auctionByNftId = GRPCMethodDescriptor(
      name: "AuctionByNftId",
      path: "/OmniFlix.marketplace.v1beta1.Query/AuctionByNftId",
      type: GRPCCallType.unary
    )

    internal static let bids = GRPCMethodDescriptor(
      name: "Bids",
      path: "/OmniFlix.marketplace.v1beta1.Query/Bids",
      type: GRPCCallType.unary
    )

    internal static let bid = GRPCMethodDescriptor(
      name: "Bid",
      path: "/OmniFlix.marketplace.v1beta1.Query/Bid",
      type: GRPCCallType.unary
    )
  }
}
