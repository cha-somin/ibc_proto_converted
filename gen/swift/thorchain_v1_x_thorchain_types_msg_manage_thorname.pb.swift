// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/msg_manage_thorname.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_MsgManageTHORName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var chain: String {
    get {return _storage._chain}
    set {_uniqueStorage()._chain = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var coin: Common_Coin {
    get {return _storage._coin ?? Common_Coin()}
    set {_uniqueStorage()._coin = newValue}
  }
  /// Returns true if `coin` has been explicitly set.
  var hasCoin: Bool {return _storage._coin != nil}
  /// Clears the value of `coin`. Subsequent reads from it will return its default value.
  mutating func clearCoin() {_uniqueStorage()._coin = nil}

  var expireBlockHeight: Int64 {
    get {return _storage._expireBlockHeight}
    set {_uniqueStorage()._expireBlockHeight = newValue}
  }

  var preferredAsset: Common_Asset {
    get {return _storage._preferredAsset ?? Common_Asset()}
    set {_uniqueStorage()._preferredAsset = newValue}
  }
  /// Returns true if `preferredAsset` has been explicitly set.
  var hasPreferredAsset: Bool {return _storage._preferredAsset != nil}
  /// Clears the value of `preferredAsset`. Subsequent reads from it will return its default value.
  mutating func clearPreferredAsset() {_uniqueStorage()._preferredAsset = nil}

  var owner: Data {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  var signer: Data {
    get {return _storage._signer}
    set {_uniqueStorage()._signer = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_MsgManageTHORName: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_MsgManageTHORName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgManageTHORName"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "chain"),
    3: .same(proto: "address"),
    4: .same(proto: "coin"),
    5: .standard(proto: "expire_block_height"),
    6: .standard(proto: "preferred_asset"),
    7: .same(proto: "owner"),
    8: .same(proto: "signer"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _chain: String = String()
    var _address: String = String()
    var _coin: Common_Coin? = nil
    var _expireBlockHeight: Int64 = 0
    var _preferredAsset: Common_Asset? = nil
    var _owner: Data = Data()
    var _signer: Data = Data()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _chain = source._chain
      _address = source._address
      _coin = source._coin
      _expireBlockHeight = source._expireBlockHeight
      _preferredAsset = source._preferredAsset
      _owner = source._owner
      _signer = source._signer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._chain) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._address) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._coin) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._expireBlockHeight) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._preferredAsset) }()
        case 7: try { try decoder.decodeSingularBytesField(value: &_storage._owner) }()
        case 8: try { try decoder.decodeSingularBytesField(value: &_storage._signer) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._chain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chain, fieldNumber: 2)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 3)
      }
      try { if let v = _storage._coin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._expireBlockHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expireBlockHeight, fieldNumber: 5)
      }
      try { if let v = _storage._preferredAsset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._owner.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._owner, fieldNumber: 7)
      }
      if !_storage._signer.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._signer, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_MsgManageTHORName, rhs: Types_MsgManageTHORName) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._chain != rhs_storage._chain {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._coin != rhs_storage._coin {return false}
        if _storage._expireBlockHeight != rhs_storage._expireBlockHeight {return false}
        if _storage._preferredAsset != rhs_storage._preferredAsset {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._signer != rhs_storage._signer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
