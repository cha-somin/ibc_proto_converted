// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_tx_out.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_TxOutItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String {
    get {return _storage._chain}
    set {_uniqueStorage()._chain = newValue}
  }

  var toAddress: String {
    get {return _storage._toAddress}
    set {_uniqueStorage()._toAddress = newValue}
  }

  var vaultPubKey: String {
    get {return _storage._vaultPubKey}
    set {_uniqueStorage()._vaultPubKey = newValue}
  }

  var coin: Common_Coin {
    get {return _storage._coin ?? Common_Coin()}
    set {_uniqueStorage()._coin = newValue}
  }
  /// Returns true if `coin` has been explicitly set.
  var hasCoin: Bool {return _storage._coin != nil}
  /// Clears the value of `coin`. Subsequent reads from it will return its default value.
  mutating func clearCoin() {_uniqueStorage()._coin = nil}

  var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  var maxGas: [Common_Coin] {
    get {return _storage._maxGas}
    set {_uniqueStorage()._maxGas = newValue}
  }

  var gasRate: Int64 {
    get {return _storage._gasRate}
    set {_uniqueStorage()._gasRate = newValue}
  }

  var inHash: String {
    get {return _storage._inHash}
    set {_uniqueStorage()._inHash = newValue}
  }

  var outHash: String {
    get {return _storage._outHash}
    set {_uniqueStorage()._outHash = newValue}
  }

  var moduleName: String {
    get {return _storage._moduleName}
    set {_uniqueStorage()._moduleName = newValue}
  }

  var aggregator: String {
    get {return _storage._aggregator}
    set {_uniqueStorage()._aggregator = newValue}
  }

  var aggregatorTargetAsset: String {
    get {return _storage._aggregatorTargetAsset}
    set {_uniqueStorage()._aggregatorTargetAsset = newValue}
  }

  var aggregatorTargetLimit: String {
    get {return _storage._aggregatorTargetLimit}
    set {_uniqueStorage()._aggregatorTargetLimit = newValue}
  }

  var cloutSpent: String {
    get {return _storage._cloutSpent}
    set {_uniqueStorage()._cloutSpent = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_TxOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int64 = 0

  var txArray: [Types_TxOutItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_TxOutItem: @unchecked Sendable {}
extension Types_TxOut: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_TxOutItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxOutItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .standard(proto: "to_address"),
    3: .standard(proto: "vault_pub_key"),
    4: .same(proto: "coin"),
    5: .same(proto: "memo"),
    6: .standard(proto: "max_gas"),
    7: .standard(proto: "gas_rate"),
    8: .standard(proto: "in_hash"),
    9: .standard(proto: "out_hash"),
    10: .unique(proto: "module_name", json: "-"),
    11: .same(proto: "aggregator"),
    12: .standard(proto: "aggregator_target_asset"),
    13: .standard(proto: "aggregator_target_limit"),
    14: .standard(proto: "clout_spent"),
  ]

  fileprivate class _StorageClass {
    var _chain: String = String()
    var _toAddress: String = String()
    var _vaultPubKey: String = String()
    var _coin: Common_Coin? = nil
    var _memo: String = String()
    var _maxGas: [Common_Coin] = []
    var _gasRate: Int64 = 0
    var _inHash: String = String()
    var _outHash: String = String()
    var _moduleName: String = String()
    var _aggregator: String = String()
    var _aggregatorTargetAsset: String = String()
    var _aggregatorTargetLimit: String = String()
    var _cloutSpent: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chain = source._chain
      _toAddress = source._toAddress
      _vaultPubKey = source._vaultPubKey
      _coin = source._coin
      _memo = source._memo
      _maxGas = source._maxGas
      _gasRate = source._gasRate
      _inHash = source._inHash
      _outHash = source._outHash
      _moduleName = source._moduleName
      _aggregator = source._aggregator
      _aggregatorTargetAsset = source._aggregatorTargetAsset
      _aggregatorTargetLimit = source._aggregatorTargetLimit
      _cloutSpent = source._cloutSpent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._chain) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._toAddress) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._vaultPubKey) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._coin) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._memo) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._maxGas) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._gasRate) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._inHash) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._outHash) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._moduleName) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._aggregator) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._aggregatorTargetAsset) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._aggregatorTargetLimit) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._cloutSpent) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._chain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chain, fieldNumber: 1)
      }
      if !_storage._toAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._toAddress, fieldNumber: 2)
      }
      if !_storage._vaultPubKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vaultPubKey, fieldNumber: 3)
      }
      try { if let v = _storage._coin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 5)
      }
      if !_storage._maxGas.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._maxGas, fieldNumber: 6)
      }
      if _storage._gasRate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gasRate, fieldNumber: 7)
      }
      if !_storage._inHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inHash, fieldNumber: 8)
      }
      if !_storage._outHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._outHash, fieldNumber: 9)
      }
      if !_storage._moduleName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._moduleName, fieldNumber: 10)
      }
      if !_storage._aggregator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aggregator, fieldNumber: 11)
      }
      if !_storage._aggregatorTargetAsset.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aggregatorTargetAsset, fieldNumber: 12)
      }
      if !_storage._aggregatorTargetLimit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aggregatorTargetLimit, fieldNumber: 13)
      }
      if !_storage._cloutSpent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cloutSpent, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TxOutItem, rhs: Types_TxOutItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chain != rhs_storage._chain {return false}
        if _storage._toAddress != rhs_storage._toAddress {return false}
        if _storage._vaultPubKey != rhs_storage._vaultPubKey {return false}
        if _storage._coin != rhs_storage._coin {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._maxGas != rhs_storage._maxGas {return false}
        if _storage._gasRate != rhs_storage._gasRate {return false}
        if _storage._inHash != rhs_storage._inHash {return false}
        if _storage._outHash != rhs_storage._outHash {return false}
        if _storage._moduleName != rhs_storage._moduleName {return false}
        if _storage._aggregator != rhs_storage._aggregator {return false}
        if _storage._aggregatorTargetAsset != rhs_storage._aggregatorTargetAsset {return false}
        if _storage._aggregatorTargetLimit != rhs_storage._aggregatorTargetLimit {return false}
        if _storage._cloutSpent != rhs_storage._cloutSpent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_TxOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .standard(proto: "tx_array"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.txArray) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    if !self.txArray.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.txArray, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_TxOut, rhs: Types_TxOut) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.txArray != rhs.txArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
