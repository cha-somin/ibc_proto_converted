//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: likechain/likenft/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Likechain_Likenft_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Likechain_Likenft_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Likechain_Likenft_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryParamsRequest, Likechain_Likenft_V1_QueryParamsResponse>

  func classesByISCN(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByISCNRequest, Likechain_Likenft_V1_QueryClassesByISCNResponse>

  func classesByISCNIndex(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>

  func iSCNByClass(
    _ request: Likechain_Likenft_V1_QueryISCNByClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryISCNByClassRequest, Likechain_Likenft_V1_QueryISCNByClassResponse>

  func classesByAccount(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByAccountRequest, Likechain_Likenft_V1_QueryClassesByAccountResponse>

  func classesByAccountIndex(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>

  func accountByClass(
    _ request: Likechain_Likenft_V1_QueryAccountByClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryAccountByClassRequest, Likechain_Likenft_V1_QueryAccountByClassResponse>

  func blindBoxContent(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentRequest, Likechain_Likenft_V1_QueryBlindBoxContentResponse>

  func blindBoxContentIndex(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>

  func blindBoxContents(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentsRequest, Likechain_Likenft_V1_QueryBlindBoxContentsResponse>

  func offer(
    _ request: Likechain_Likenft_V1_QueryOfferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOfferRequest, Likechain_Likenft_V1_QueryOfferResponse>

  func offerIndex(
    _ request: Likechain_Likenft_V1_QueryOfferIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOfferIndexRequest, Likechain_Likenft_V1_QueryOfferIndexResponse>

  func offersByClass(
    _ request: Likechain_Likenft_V1_QueryOffersByClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOffersByClassRequest, Likechain_Likenft_V1_QueryOffersByClassResponse>

  func offersByNFT(
    _ request: Likechain_Likenft_V1_QueryOffersByNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOffersByNFTRequest, Likechain_Likenft_V1_QueryOffersByNFTResponse>

  func listing(
    _ request: Likechain_Likenft_V1_QueryListingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingRequest, Likechain_Likenft_V1_QueryListingResponse>

  func listingIndex(
    _ request: Likechain_Likenft_V1_QueryListingIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingIndexRequest, Likechain_Likenft_V1_QueryListingIndexResponse>

  func listingsByClass(
    _ request: Likechain_Likenft_V1_QueryListingsByClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingsByClassRequest, Likechain_Likenft_V1_QueryListingsByClassResponse>

  func listingsByNFT(
    _ request: Likechain_Likenft_V1_QueryListingsByNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingsByNFTRequest, Likechain_Likenft_V1_QueryListingsByNFTResponse>

  func royaltyConfig(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigRequest, Likechain_Likenft_V1_QueryRoyaltyConfigResponse>

  func royaltyConfigIndex(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>
}

extension Likechain_Likenft_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "likechain.likenft.v1.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Likechain_Likenft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryParamsRequest, Likechain_Likenft_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a ClassesByISCN by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClassesByISCN.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classesByISCN(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByISCNRequest, Likechain_Likenft_V1_QueryClassesByISCNResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByISCNInterceptors() ?? []
    )
  }

  /// Queries a list of ClassesByISCN items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClassesByISCNIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classesByISCNIndex(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, Likechain_Likenft_V1_QueryClassesByISCNIndexResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCNIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByISCNIndexInterceptors() ?? []
    )
  }

  /// Queries a list of ISCNByClass items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ISCNByClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func iSCNByClass(
    _ request: Likechain_Likenft_V1_QueryISCNByClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryISCNByClassRequest, Likechain_Likenft_V1_QueryISCNByClassResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.iSCNByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeISCNByClassInterceptors() ?? []
    )
  }

  /// Queries a ClassesByAccount by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClassesByAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classesByAccount(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByAccountRequest, Likechain_Likenft_V1_QueryClassesByAccountResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByAccountInterceptors() ?? []
    )
  }

  /// Queries a list of ClassesByAccount items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClassesByAccountIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classesByAccountIndex(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, Likechain_Likenft_V1_QueryClassesByAccountIndexResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccountIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByAccountIndexInterceptors() ?? []
    )
  }

  /// Queries a list of AccountByClass items.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountByClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountByClass(
    _ request: Likechain_Likenft_V1_QueryAccountByClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryAccountByClassRequest, Likechain_Likenft_V1_QueryAccountByClassResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.accountByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountByClassInterceptors() ?? []
    )
  }

  /// Queries a BlindBoxContent by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlindBoxContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blindBoxContent(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentRequest, Likechain_Likenft_V1_QueryBlindBoxContentResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentInterceptors() ?? []
    )
  }

  /// Queries a list of BlindBoxContent items.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlindBoxContentIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blindBoxContentIndex(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContentIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentIndexInterceptors() ?? []
    )
  }

  /// Queries a list of BlindBoxContents by class_id
  ///
  /// - Parameters:
  ///   - request: Request to send to BlindBoxContents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blindBoxContents(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentsRequest, Likechain_Likenft_V1_QueryBlindBoxContentsResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentsInterceptors() ?? []
    )
  }

  /// Queries a Offer by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Offer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func offer(
    _ request: Likechain_Likenft_V1_QueryOfferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOfferRequest, Likechain_Likenft_V1_QueryOfferResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferInterceptors() ?? []
    )
  }

  /// Queries a list of Offer items.
  ///
  /// - Parameters:
  ///   - request: Request to send to OfferIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func offerIndex(
    _ request: Likechain_Likenft_V1_QueryOfferIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOfferIndexRequest, Likechain_Likenft_V1_QueryOfferIndexResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offerIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferIndexInterceptors() ?? []
    )
  }

  /// Queries a list of OffersByClass items.
  ///
  /// - Parameters:
  ///   - request: Request to send to OffersByClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func offersByClass(
    _ request: Likechain_Likenft_V1_QueryOffersByClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOffersByClassRequest, Likechain_Likenft_V1_QueryOffersByClassResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOffersByClassInterceptors() ?? []
    )
  }

  /// Queries a list of OffersByNFT items.
  ///
  /// - Parameters:
  ///   - request: Request to send to OffersByNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func offersByNFT(
    _ request: Likechain_Likenft_V1_QueryOffersByNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryOffersByNFTRequest, Likechain_Likenft_V1_QueryOffersByNFTResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOffersByNFTInterceptors() ?? []
    )
  }

  /// Queries a Listing by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Listing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listing(
    _ request: Likechain_Likenft_V1_QueryListingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingRequest, Likechain_Likenft_V1_QueryListingResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingInterceptors() ?? []
    )
  }

  /// Queries a list of Listing items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListingIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listingIndex(
    _ request: Likechain_Likenft_V1_QueryListingIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingIndexRequest, Likechain_Likenft_V1_QueryListingIndexResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingIndexInterceptors() ?? []
    )
  }

  /// Queries a list of Listing items by class
  ///
  /// - Parameters:
  ///   - request: Request to send to ListingsByClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listingsByClass(
    _ request: Likechain_Likenft_V1_QueryListingsByClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingsByClassRequest, Likechain_Likenft_V1_QueryListingsByClassResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByClassInterceptors() ?? []
    )
  }

  /// Queries a list of Listing items by nft
  ///
  /// - Parameters:
  ///   - request: Request to send to ListingsByNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listingsByNFT(
    _ request: Likechain_Likenft_V1_QueryListingsByNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryListingsByNFTRequest, Likechain_Likenft_V1_QueryListingsByNFTResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByNFTInterceptors() ?? []
    )
  }

  /// Queries a RoyaltyConfig by class
  ///
  /// - Parameters:
  ///   - request: Request to send to RoyaltyConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func royaltyConfig(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigRequest, Likechain_Likenft_V1_QueryRoyaltyConfigResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoyaltyConfigInterceptors() ?? []
    )
  }

  /// Queries index of RoyaltyConfig of all classes
  ///
  /// - Parameters:
  ///   - request: Request to send to RoyaltyConfigIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func royaltyConfigIndex(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfigIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoyaltyConfigIndexInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Likechain_Likenft_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Likechain_Likenft_V1_QueryNIOClient")
internal final class Likechain_Likenft_V1_QueryClient: Likechain_Likenft_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the likechain.likenft.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Likechain_Likenft_V1_QueryNIOClient: Likechain_Likenft_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the likechain.likenft.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Likechain_Likenft_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Likechain_Likenft_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryParamsRequest, Likechain_Likenft_V1_QueryParamsResponse>

  func makeClassesByIscnCall(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByISCNRequest, Likechain_Likenft_V1_QueryClassesByISCNResponse>

  func makeClassesByIscnindexCall(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>

  func makeIscnbyClassCall(
    _ request: Likechain_Likenft_V1_QueryISCNByClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryISCNByClassRequest, Likechain_Likenft_V1_QueryISCNByClassResponse>

  func makeClassesByAccountCall(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByAccountRequest, Likechain_Likenft_V1_QueryClassesByAccountResponse>

  func makeClassesByAccountIndexCall(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>

  func makeAccountByClassCall(
    _ request: Likechain_Likenft_V1_QueryAccountByClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryAccountByClassRequest, Likechain_Likenft_V1_QueryAccountByClassResponse>

  func makeBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentRequest, Likechain_Likenft_V1_QueryBlindBoxContentResponse>

  func makeBlindBoxContentIndexCall(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>

  func makeBlindBoxContentsCall(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentsRequest, Likechain_Likenft_V1_QueryBlindBoxContentsResponse>

  func makeOfferCall(
    _ request: Likechain_Likenft_V1_QueryOfferRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOfferRequest, Likechain_Likenft_V1_QueryOfferResponse>

  func makeOfferIndexCall(
    _ request: Likechain_Likenft_V1_QueryOfferIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOfferIndexRequest, Likechain_Likenft_V1_QueryOfferIndexResponse>

  func makeOffersByClassCall(
    _ request: Likechain_Likenft_V1_QueryOffersByClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOffersByClassRequest, Likechain_Likenft_V1_QueryOffersByClassResponse>

  func makeOffersByNftCall(
    _ request: Likechain_Likenft_V1_QueryOffersByNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOffersByNFTRequest, Likechain_Likenft_V1_QueryOffersByNFTResponse>

  func makeListingCall(
    _ request: Likechain_Likenft_V1_QueryListingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingRequest, Likechain_Likenft_V1_QueryListingResponse>

  func makeListingIndexCall(
    _ request: Likechain_Likenft_V1_QueryListingIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingIndexRequest, Likechain_Likenft_V1_QueryListingIndexResponse>

  func makeListingsByClassCall(
    _ request: Likechain_Likenft_V1_QueryListingsByClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingsByClassRequest, Likechain_Likenft_V1_QueryListingsByClassResponse>

  func makeListingsByNftCall(
    _ request: Likechain_Likenft_V1_QueryListingsByNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingsByNFTRequest, Likechain_Likenft_V1_QueryListingsByNFTResponse>

  func makeRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigRequest, Likechain_Likenft_V1_QueryRoyaltyConfigResponse>

  func makeRoyaltyConfigIndexCall(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Likenft_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Likechain_Likenft_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Likechain_Likenft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryParamsRequest, Likechain_Likenft_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeClassesByIscnCall(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByISCNRequest, Likechain_Likenft_V1_QueryClassesByISCNResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByISCNInterceptors() ?? []
    )
  }

  internal func makeClassesByIscnindexCall(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, Likechain_Likenft_V1_QueryClassesByISCNIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCNIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByISCNIndexInterceptors() ?? []
    )
  }

  internal func makeIscnbyClassCall(
    _ request: Likechain_Likenft_V1_QueryISCNByClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryISCNByClassRequest, Likechain_Likenft_V1_QueryISCNByClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.iSCNByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeISCNByClassInterceptors() ?? []
    )
  }

  internal func makeClassesByAccountCall(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByAccountRequest, Likechain_Likenft_V1_QueryClassesByAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByAccountInterceptors() ?? []
    )
  }

  internal func makeClassesByAccountIndexCall(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, Likechain_Likenft_V1_QueryClassesByAccountIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccountIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByAccountIndexInterceptors() ?? []
    )
  }

  internal func makeAccountByClassCall(
    _ request: Likechain_Likenft_V1_QueryAccountByClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryAccountByClassRequest, Likechain_Likenft_V1_QueryAccountByClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.accountByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountByClassInterceptors() ?? []
    )
  }

  internal func makeBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentRequest, Likechain_Likenft_V1_QueryBlindBoxContentResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentInterceptors() ?? []
    )
  }

  internal func makeBlindBoxContentIndexCall(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContentIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentIndexInterceptors() ?? []
    )
  }

  internal func makeBlindBoxContentsCall(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryBlindBoxContentsRequest, Likechain_Likenft_V1_QueryBlindBoxContentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentsInterceptors() ?? []
    )
  }

  internal func makeOfferCall(
    _ request: Likechain_Likenft_V1_QueryOfferRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOfferRequest, Likechain_Likenft_V1_QueryOfferResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferInterceptors() ?? []
    )
  }

  internal func makeOfferIndexCall(
    _ request: Likechain_Likenft_V1_QueryOfferIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOfferIndexRequest, Likechain_Likenft_V1_QueryOfferIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offerIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferIndexInterceptors() ?? []
    )
  }

  internal func makeOffersByClassCall(
    _ request: Likechain_Likenft_V1_QueryOffersByClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOffersByClassRequest, Likechain_Likenft_V1_QueryOffersByClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOffersByClassInterceptors() ?? []
    )
  }

  internal func makeOffersByNftCall(
    _ request: Likechain_Likenft_V1_QueryOffersByNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryOffersByNFTRequest, Likechain_Likenft_V1_QueryOffersByNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOffersByNFTInterceptors() ?? []
    )
  }

  internal func makeListingCall(
    _ request: Likechain_Likenft_V1_QueryListingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingRequest, Likechain_Likenft_V1_QueryListingResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingInterceptors() ?? []
    )
  }

  internal func makeListingIndexCall(
    _ request: Likechain_Likenft_V1_QueryListingIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingIndexRequest, Likechain_Likenft_V1_QueryListingIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingIndexInterceptors() ?? []
    )
  }

  internal func makeListingsByClassCall(
    _ request: Likechain_Likenft_V1_QueryListingsByClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingsByClassRequest, Likechain_Likenft_V1_QueryListingsByClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByClassInterceptors() ?? []
    )
  }

  internal func makeListingsByNftCall(
    _ request: Likechain_Likenft_V1_QueryListingsByNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryListingsByNFTRequest, Likechain_Likenft_V1_QueryListingsByNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByNFTInterceptors() ?? []
    )
  }

  internal func makeRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigRequest, Likechain_Likenft_V1_QueryRoyaltyConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoyaltyConfigInterceptors() ?? []
    )
  }

  internal func makeRoyaltyConfigIndexCall(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfigIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoyaltyConfigIndexInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Likenft_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Likechain_Likenft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func classesByISCN(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryClassesByISCNResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCN.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByISCNInterceptors() ?? []
    )
  }

  internal func classesByISCNIndex(
    _ request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryClassesByISCNIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCNIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByISCNIndexInterceptors() ?? []
    )
  }

  internal func iSCNByClass(
    _ request: Likechain_Likenft_V1_QueryISCNByClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryISCNByClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.iSCNByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeISCNByClassInterceptors() ?? []
    )
  }

  internal func classesByAccount(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryClassesByAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByAccountInterceptors() ?? []
    )
  }

  internal func classesByAccountIndex(
    _ request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryClassesByAccountIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccountIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesByAccountIndexInterceptors() ?? []
    )
  }

  internal func accountByClass(
    _ request: Likechain_Likenft_V1_QueryAccountByClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryAccountByClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.accountByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountByClassInterceptors() ?? []
    )
  }

  internal func blindBoxContent(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryBlindBoxContentResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentInterceptors() ?? []
    )
  }

  internal func blindBoxContentIndex(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContentIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentIndexInterceptors() ?? []
    )
  }

  internal func blindBoxContents(
    _ request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryBlindBoxContentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlindBoxContentsInterceptors() ?? []
    )
  }

  internal func offer(
    _ request: Likechain_Likenft_V1_QueryOfferRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryOfferResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferInterceptors() ?? []
    )
  }

  internal func offerIndex(
    _ request: Likechain_Likenft_V1_QueryOfferIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryOfferIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offerIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOfferIndexInterceptors() ?? []
    )
  }

  internal func offersByClass(
    _ request: Likechain_Likenft_V1_QueryOffersByClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryOffersByClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOffersByClassInterceptors() ?? []
    )
  }

  internal func offersByNFT(
    _ request: Likechain_Likenft_V1_QueryOffersByNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryOffersByNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOffersByNFTInterceptors() ?? []
    )
  }

  internal func listing(
    _ request: Likechain_Likenft_V1_QueryListingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryListingResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingInterceptors() ?? []
    )
  }

  internal func listingIndex(
    _ request: Likechain_Likenft_V1_QueryListingIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryListingIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingIndexInterceptors() ?? []
    )
  }

  internal func listingsByClass(
    _ request: Likechain_Likenft_V1_QueryListingsByClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryListingsByClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByClassInterceptors() ?? []
    )
  }

  internal func listingsByNFT(
    _ request: Likechain_Likenft_V1_QueryListingsByNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryListingsByNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListingsByNFTInterceptors() ?? []
    )
  }

  internal func royaltyConfig(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryRoyaltyConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoyaltyConfigInterceptors() ?? []
    )
  }

  internal func royaltyConfigIndex(
    _ request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfigIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoyaltyConfigIndexInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Likechain_Likenft_V1_QueryAsyncClient: Likechain_Likenft_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Likechain_Likenft_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryParamsRequest, Likechain_Likenft_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'classesByISCN'.
  func makeClassesByISCNInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryClassesByISCNRequest, Likechain_Likenft_V1_QueryClassesByISCNResponse>]

  /// - Returns: Interceptors to use when invoking 'classesByISCNIndex'.
  func makeClassesByISCNIndexInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'iSCNByClass'.
  func makeISCNByClassInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryISCNByClassRequest, Likechain_Likenft_V1_QueryISCNByClassResponse>]

  /// - Returns: Interceptors to use when invoking 'classesByAccount'.
  func makeClassesByAccountInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryClassesByAccountRequest, Likechain_Likenft_V1_QueryClassesByAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'classesByAccountIndex'.
  func makeClassesByAccountIndexInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'accountByClass'.
  func makeAccountByClassInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryAccountByClassRequest, Likechain_Likenft_V1_QueryAccountByClassResponse>]

  /// - Returns: Interceptors to use when invoking 'blindBoxContent'.
  func makeBlindBoxContentInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryBlindBoxContentRequest, Likechain_Likenft_V1_QueryBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when invoking 'blindBoxContentIndex'.
  func makeBlindBoxContentIndexInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'blindBoxContents'.
  func makeBlindBoxContentsInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryBlindBoxContentsRequest, Likechain_Likenft_V1_QueryBlindBoxContentsResponse>]

  /// - Returns: Interceptors to use when invoking 'offer'.
  func makeOfferInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryOfferRequest, Likechain_Likenft_V1_QueryOfferResponse>]

  /// - Returns: Interceptors to use when invoking 'offerIndex'.
  func makeOfferIndexInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryOfferIndexRequest, Likechain_Likenft_V1_QueryOfferIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'offersByClass'.
  func makeOffersByClassInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryOffersByClassRequest, Likechain_Likenft_V1_QueryOffersByClassResponse>]

  /// - Returns: Interceptors to use when invoking 'offersByNFT'.
  func makeOffersByNFTInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryOffersByNFTRequest, Likechain_Likenft_V1_QueryOffersByNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'listing'.
  func makeListingInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryListingRequest, Likechain_Likenft_V1_QueryListingResponse>]

  /// - Returns: Interceptors to use when invoking 'listingIndex'.
  func makeListingIndexInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryListingIndexRequest, Likechain_Likenft_V1_QueryListingIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'listingsByClass'.
  func makeListingsByClassInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryListingsByClassRequest, Likechain_Likenft_V1_QueryListingsByClassResponse>]

  /// - Returns: Interceptors to use when invoking 'listingsByNFT'.
  func makeListingsByNFTInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryListingsByNFTRequest, Likechain_Likenft_V1_QueryListingsByNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'royaltyConfig'.
  func makeRoyaltyConfigInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryRoyaltyConfigRequest, Likechain_Likenft_V1_QueryRoyaltyConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'royaltyConfigIndex'.
  func makeRoyaltyConfigIndexInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>]
}

internal enum Likechain_Likenft_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "likechain.likenft.v1.Query",
    methods: [
      Likechain_Likenft_V1_QueryClientMetadata.Methods.params,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCN,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByISCNIndex,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.iSCNByClass,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccount,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.classesByAccountIndex,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.accountByClass,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContent,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContentIndex,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.blindBoxContents,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.offer,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.offerIndex,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByClass,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.offersByNFT,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.listing,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.listingIndex,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByClass,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.listingsByNFT,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfig,
      Likechain_Likenft_V1_QueryClientMetadata.Methods.royaltyConfigIndex,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/likechain.likenft.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let classesByISCN = GRPCMethodDescriptor(
      name: "ClassesByISCN",
      path: "/likechain.likenft.v1.Query/ClassesByISCN",
      type: GRPCCallType.unary
    )

    internal static let classesByISCNIndex = GRPCMethodDescriptor(
      name: "ClassesByISCNIndex",
      path: "/likechain.likenft.v1.Query/ClassesByISCNIndex",
      type: GRPCCallType.unary
    )

    internal static let iSCNByClass = GRPCMethodDescriptor(
      name: "ISCNByClass",
      path: "/likechain.likenft.v1.Query/ISCNByClass",
      type: GRPCCallType.unary
    )

    internal static let classesByAccount = GRPCMethodDescriptor(
      name: "ClassesByAccount",
      path: "/likechain.likenft.v1.Query/ClassesByAccount",
      type: GRPCCallType.unary
    )

    internal static let classesByAccountIndex = GRPCMethodDescriptor(
      name: "ClassesByAccountIndex",
      path: "/likechain.likenft.v1.Query/ClassesByAccountIndex",
      type: GRPCCallType.unary
    )

    internal static let accountByClass = GRPCMethodDescriptor(
      name: "AccountByClass",
      path: "/likechain.likenft.v1.Query/AccountByClass",
      type: GRPCCallType.unary
    )

    internal static let blindBoxContent = GRPCMethodDescriptor(
      name: "BlindBoxContent",
      path: "/likechain.likenft.v1.Query/BlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let blindBoxContentIndex = GRPCMethodDescriptor(
      name: "BlindBoxContentIndex",
      path: "/likechain.likenft.v1.Query/BlindBoxContentIndex",
      type: GRPCCallType.unary
    )

    internal static let blindBoxContents = GRPCMethodDescriptor(
      name: "BlindBoxContents",
      path: "/likechain.likenft.v1.Query/BlindBoxContents",
      type: GRPCCallType.unary
    )

    internal static let offer = GRPCMethodDescriptor(
      name: "Offer",
      path: "/likechain.likenft.v1.Query/Offer",
      type: GRPCCallType.unary
    )

    internal static let offerIndex = GRPCMethodDescriptor(
      name: "OfferIndex",
      path: "/likechain.likenft.v1.Query/OfferIndex",
      type: GRPCCallType.unary
    )

    internal static let offersByClass = GRPCMethodDescriptor(
      name: "OffersByClass",
      path: "/likechain.likenft.v1.Query/OffersByClass",
      type: GRPCCallType.unary
    )

    internal static let offersByNFT = GRPCMethodDescriptor(
      name: "OffersByNFT",
      path: "/likechain.likenft.v1.Query/OffersByNFT",
      type: GRPCCallType.unary
    )

    internal static let listing = GRPCMethodDescriptor(
      name: "Listing",
      path: "/likechain.likenft.v1.Query/Listing",
      type: GRPCCallType.unary
    )

    internal static let listingIndex = GRPCMethodDescriptor(
      name: "ListingIndex",
      path: "/likechain.likenft.v1.Query/ListingIndex",
      type: GRPCCallType.unary
    )

    internal static let listingsByClass = GRPCMethodDescriptor(
      name: "ListingsByClass",
      path: "/likechain.likenft.v1.Query/ListingsByClass",
      type: GRPCCallType.unary
    )

    internal static let listingsByNFT = GRPCMethodDescriptor(
      name: "ListingsByNFT",
      path: "/likechain.likenft.v1.Query/ListingsByNFT",
      type: GRPCCallType.unary
    )

    internal static let royaltyConfig = GRPCMethodDescriptor(
      name: "RoyaltyConfig",
      path: "/likechain.likenft.v1.Query/RoyaltyConfig",
      type: GRPCCallType.unary
    )

    internal static let royaltyConfigIndex = GRPCMethodDescriptor(
      name: "RoyaltyConfigIndex",
      path: "/likechain.likenft.v1.Query/RoyaltyConfigIndex",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Likechain_Likenft_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Likechain_Likenft_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Likechain_Likenft_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryParamsResponse>

  /// Queries a ClassesByISCN by index.
  func classesByISCN(request: Likechain_Likenft_V1_QueryClassesByISCNRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryClassesByISCNResponse>

  /// Queries a list of ClassesByISCN items.
  func classesByISCNIndex(request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>

  /// Queries a list of ISCNByClass items.
  func iSCNByClass(request: Likechain_Likenft_V1_QueryISCNByClassRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryISCNByClassResponse>

  /// Queries a ClassesByAccount by index.
  func classesByAccount(request: Likechain_Likenft_V1_QueryClassesByAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryClassesByAccountResponse>

  /// Queries a list of ClassesByAccount items.
  func classesByAccountIndex(request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>

  /// Queries a list of AccountByClass items.
  func accountByClass(request: Likechain_Likenft_V1_QueryAccountByClassRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryAccountByClassResponse>

  /// Queries a BlindBoxContent by index.
  func blindBoxContent(request: Likechain_Likenft_V1_QueryBlindBoxContentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryBlindBoxContentResponse>

  /// Queries a list of BlindBoxContent items.
  func blindBoxContentIndex(request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>

  /// Queries a list of BlindBoxContents by class_id
  func blindBoxContents(request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryBlindBoxContentsResponse>

  /// Queries a Offer by index.
  func offer(request: Likechain_Likenft_V1_QueryOfferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryOfferResponse>

  /// Queries a list of Offer items.
  func offerIndex(request: Likechain_Likenft_V1_QueryOfferIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryOfferIndexResponse>

  /// Queries a list of OffersByClass items.
  func offersByClass(request: Likechain_Likenft_V1_QueryOffersByClassRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryOffersByClassResponse>

  /// Queries a list of OffersByNFT items.
  func offersByNFT(request: Likechain_Likenft_V1_QueryOffersByNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryOffersByNFTResponse>

  /// Queries a Listing by index.
  func listing(request: Likechain_Likenft_V1_QueryListingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryListingResponse>

  /// Queries a list of Listing items.
  func listingIndex(request: Likechain_Likenft_V1_QueryListingIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryListingIndexResponse>

  /// Queries a list of Listing items by class
  func listingsByClass(request: Likechain_Likenft_V1_QueryListingsByClassRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryListingsByClassResponse>

  /// Queries a list of Listing items by nft
  func listingsByNFT(request: Likechain_Likenft_V1_QueryListingsByNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryListingsByNFTResponse>

  /// Queries a RoyaltyConfig by class
  func royaltyConfig(request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryRoyaltyConfigResponse>

  /// Queries index of RoyaltyConfig of all classes
  func royaltyConfigIndex(request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>
}

extension Likechain_Likenft_V1_QueryProvider {
  internal var serviceName: Substring {
    return Likechain_Likenft_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ClassesByISCN":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByISCNRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByISCNResponse>(),
        interceptors: self.interceptors?.makeClassesByISCNInterceptors() ?? [],
        userFunction: self.classesByISCN(request:context:)
      )

    case "ClassesByISCNIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>(),
        interceptors: self.interceptors?.makeClassesByISCNIndexInterceptors() ?? [],
        userFunction: self.classesByISCNIndex(request:context:)
      )

    case "ISCNByClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryISCNByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryISCNByClassResponse>(),
        interceptors: self.interceptors?.makeISCNByClassInterceptors() ?? [],
        userFunction: self.iSCNByClass(request:context:)
      )

    case "ClassesByAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByAccountRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByAccountResponse>(),
        interceptors: self.interceptors?.makeClassesByAccountInterceptors() ?? [],
        userFunction: self.classesByAccount(request:context:)
      )

    case "ClassesByAccountIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>(),
        interceptors: self.interceptors?.makeClassesByAccountIndexInterceptors() ?? [],
        userFunction: self.classesByAccountIndex(request:context:)
      )

    case "AccountByClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryAccountByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryAccountByClassResponse>(),
        interceptors: self.interceptors?.makeAccountByClassInterceptors() ?? [],
        userFunction: self.accountByClass(request:context:)
      )

    case "BlindBoxContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryBlindBoxContentRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeBlindBoxContentInterceptors() ?? [],
        userFunction: self.blindBoxContent(request:context:)
      )

    case "BlindBoxContentIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>(),
        interceptors: self.interceptors?.makeBlindBoxContentIndexInterceptors() ?? [],
        userFunction: self.blindBoxContentIndex(request:context:)
      )

    case "BlindBoxContents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryBlindBoxContentsRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryBlindBoxContentsResponse>(),
        interceptors: self.interceptors?.makeBlindBoxContentsInterceptors() ?? [],
        userFunction: self.blindBoxContents(request:context:)
      )

    case "Offer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOfferRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOfferResponse>(),
        interceptors: self.interceptors?.makeOfferInterceptors() ?? [],
        userFunction: self.offer(request:context:)
      )

    case "OfferIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOfferIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOfferIndexResponse>(),
        interceptors: self.interceptors?.makeOfferIndexInterceptors() ?? [],
        userFunction: self.offerIndex(request:context:)
      )

    case "OffersByClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOffersByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOffersByClassResponse>(),
        interceptors: self.interceptors?.makeOffersByClassInterceptors() ?? [],
        userFunction: self.offersByClass(request:context:)
      )

    case "OffersByNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOffersByNFTRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOffersByNFTResponse>(),
        interceptors: self.interceptors?.makeOffersByNFTInterceptors() ?? [],
        userFunction: self.offersByNFT(request:context:)
      )

    case "Listing":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingResponse>(),
        interceptors: self.interceptors?.makeListingInterceptors() ?? [],
        userFunction: self.listing(request:context:)
      )

    case "ListingIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingIndexResponse>(),
        interceptors: self.interceptors?.makeListingIndexInterceptors() ?? [],
        userFunction: self.listingIndex(request:context:)
      )

    case "ListingsByClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingsByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingsByClassResponse>(),
        interceptors: self.interceptors?.makeListingsByClassInterceptors() ?? [],
        userFunction: self.listingsByClass(request:context:)
      )

    case "ListingsByNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingsByNFTRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingsByNFTResponse>(),
        interceptors: self.interceptors?.makeListingsByNFTInterceptors() ?? [],
        userFunction: self.listingsByNFT(request:context:)
      )

    case "RoyaltyConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryRoyaltyConfigRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeRoyaltyConfigInterceptors() ?? [],
        userFunction: self.royaltyConfig(request:context:)
      )

    case "RoyaltyConfigIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>(),
        interceptors: self.interceptors?.makeRoyaltyConfigIndexInterceptors() ?? [],
        userFunction: self.royaltyConfigIndex(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Likechain_Likenft_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Likechain_Likenft_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Likechain_Likenft_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryParamsResponse

  /// Queries a ClassesByISCN by index.
  @Sendable func classesByISCN(
    request: Likechain_Likenft_V1_QueryClassesByISCNRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryClassesByISCNResponse

  /// Queries a list of ClassesByISCN items.
  @Sendable func classesByISCNIndex(
    request: Likechain_Likenft_V1_QueryClassesByISCNIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryClassesByISCNIndexResponse

  /// Queries a list of ISCNByClass items.
  @Sendable func iSCNByClass(
    request: Likechain_Likenft_V1_QueryISCNByClassRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryISCNByClassResponse

  /// Queries a ClassesByAccount by index.
  @Sendable func classesByAccount(
    request: Likechain_Likenft_V1_QueryClassesByAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryClassesByAccountResponse

  /// Queries a list of ClassesByAccount items.
  @Sendable func classesByAccountIndex(
    request: Likechain_Likenft_V1_QueryClassesByAccountIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryClassesByAccountIndexResponse

  /// Queries a list of AccountByClass items.
  @Sendable func accountByClass(
    request: Likechain_Likenft_V1_QueryAccountByClassRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryAccountByClassResponse

  /// Queries a BlindBoxContent by index.
  @Sendable func blindBoxContent(
    request: Likechain_Likenft_V1_QueryBlindBoxContentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryBlindBoxContentResponse

  /// Queries a list of BlindBoxContent items.
  @Sendable func blindBoxContentIndex(
    request: Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse

  /// Queries a list of BlindBoxContents by class_id
  @Sendable func blindBoxContents(
    request: Likechain_Likenft_V1_QueryBlindBoxContentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryBlindBoxContentsResponse

  /// Queries a Offer by index.
  @Sendable func offer(
    request: Likechain_Likenft_V1_QueryOfferRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryOfferResponse

  /// Queries a list of Offer items.
  @Sendable func offerIndex(
    request: Likechain_Likenft_V1_QueryOfferIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryOfferIndexResponse

  /// Queries a list of OffersByClass items.
  @Sendable func offersByClass(
    request: Likechain_Likenft_V1_QueryOffersByClassRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryOffersByClassResponse

  /// Queries a list of OffersByNFT items.
  @Sendable func offersByNFT(
    request: Likechain_Likenft_V1_QueryOffersByNFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryOffersByNFTResponse

  /// Queries a Listing by index.
  @Sendable func listing(
    request: Likechain_Likenft_V1_QueryListingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryListingResponse

  /// Queries a list of Listing items.
  @Sendable func listingIndex(
    request: Likechain_Likenft_V1_QueryListingIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryListingIndexResponse

  /// Queries a list of Listing items by class
  @Sendable func listingsByClass(
    request: Likechain_Likenft_V1_QueryListingsByClassRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryListingsByClassResponse

  /// Queries a list of Listing items by nft
  @Sendable func listingsByNFT(
    request: Likechain_Likenft_V1_QueryListingsByNFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryListingsByNFTResponse

  /// Queries a RoyaltyConfig by class
  @Sendable func royaltyConfig(
    request: Likechain_Likenft_V1_QueryRoyaltyConfigRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryRoyaltyConfigResponse

  /// Queries index of RoyaltyConfig of all classes
  @Sendable func royaltyConfigIndex(
    request: Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Likenft_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Likechain_Likenft_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Likechain_Likenft_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Likechain_Likenft_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ClassesByISCN":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByISCNRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByISCNResponse>(),
        interceptors: self.interceptors?.makeClassesByISCNInterceptors() ?? [],
        wrapping: self.classesByISCN(request:context:)
      )

    case "ClassesByISCNIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>(),
        interceptors: self.interceptors?.makeClassesByISCNIndexInterceptors() ?? [],
        wrapping: self.classesByISCNIndex(request:context:)
      )

    case "ISCNByClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryISCNByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryISCNByClassResponse>(),
        interceptors: self.interceptors?.makeISCNByClassInterceptors() ?? [],
        wrapping: self.iSCNByClass(request:context:)
      )

    case "ClassesByAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByAccountRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByAccountResponse>(),
        interceptors: self.interceptors?.makeClassesByAccountInterceptors() ?? [],
        wrapping: self.classesByAccount(request:context:)
      )

    case "ClassesByAccountIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>(),
        interceptors: self.interceptors?.makeClassesByAccountIndexInterceptors() ?? [],
        wrapping: self.classesByAccountIndex(request:context:)
      )

    case "AccountByClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryAccountByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryAccountByClassResponse>(),
        interceptors: self.interceptors?.makeAccountByClassInterceptors() ?? [],
        wrapping: self.accountByClass(request:context:)
      )

    case "BlindBoxContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryBlindBoxContentRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeBlindBoxContentInterceptors() ?? [],
        wrapping: self.blindBoxContent(request:context:)
      )

    case "BlindBoxContentIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>(),
        interceptors: self.interceptors?.makeBlindBoxContentIndexInterceptors() ?? [],
        wrapping: self.blindBoxContentIndex(request:context:)
      )

    case "BlindBoxContents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryBlindBoxContentsRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryBlindBoxContentsResponse>(),
        interceptors: self.interceptors?.makeBlindBoxContentsInterceptors() ?? [],
        wrapping: self.blindBoxContents(request:context:)
      )

    case "Offer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOfferRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOfferResponse>(),
        interceptors: self.interceptors?.makeOfferInterceptors() ?? [],
        wrapping: self.offer(request:context:)
      )

    case "OfferIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOfferIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOfferIndexResponse>(),
        interceptors: self.interceptors?.makeOfferIndexInterceptors() ?? [],
        wrapping: self.offerIndex(request:context:)
      )

    case "OffersByClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOffersByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOffersByClassResponse>(),
        interceptors: self.interceptors?.makeOffersByClassInterceptors() ?? [],
        wrapping: self.offersByClass(request:context:)
      )

    case "OffersByNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryOffersByNFTRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryOffersByNFTResponse>(),
        interceptors: self.interceptors?.makeOffersByNFTInterceptors() ?? [],
        wrapping: self.offersByNFT(request:context:)
      )

    case "Listing":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingResponse>(),
        interceptors: self.interceptors?.makeListingInterceptors() ?? [],
        wrapping: self.listing(request:context:)
      )

    case "ListingIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingIndexResponse>(),
        interceptors: self.interceptors?.makeListingIndexInterceptors() ?? [],
        wrapping: self.listingIndex(request:context:)
      )

    case "ListingsByClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingsByClassRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingsByClassResponse>(),
        interceptors: self.interceptors?.makeListingsByClassInterceptors() ?? [],
        wrapping: self.listingsByClass(request:context:)
      )

    case "ListingsByNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryListingsByNFTRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryListingsByNFTResponse>(),
        interceptors: self.interceptors?.makeListingsByNFTInterceptors() ?? [],
        wrapping: self.listingsByNFT(request:context:)
      )

    case "RoyaltyConfig":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryRoyaltyConfigRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeRoyaltyConfigInterceptors() ?? [],
        wrapping: self.royaltyConfig(request:context:)
      )

    case "RoyaltyConfigIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>(),
        interceptors: self.interceptors?.makeRoyaltyConfigIndexInterceptors() ?? [],
        wrapping: self.royaltyConfigIndex(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Likechain_Likenft_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryParamsRequest, Likechain_Likenft_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'classesByISCN'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesByISCNInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryClassesByISCNRequest, Likechain_Likenft_V1_QueryClassesByISCNResponse>]

  /// - Returns: Interceptors to use when handling 'classesByISCNIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesByISCNIndexInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryClassesByISCNIndexRequest, Likechain_Likenft_V1_QueryClassesByISCNIndexResponse>]

  /// - Returns: Interceptors to use when handling 'iSCNByClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeISCNByClassInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryISCNByClassRequest, Likechain_Likenft_V1_QueryISCNByClassResponse>]

  /// - Returns: Interceptors to use when handling 'classesByAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesByAccountInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryClassesByAccountRequest, Likechain_Likenft_V1_QueryClassesByAccountResponse>]

  /// - Returns: Interceptors to use when handling 'classesByAccountIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesByAccountIndexInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryClassesByAccountIndexRequest, Likechain_Likenft_V1_QueryClassesByAccountIndexResponse>]

  /// - Returns: Interceptors to use when handling 'accountByClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountByClassInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryAccountByClassRequest, Likechain_Likenft_V1_QueryAccountByClassResponse>]

  /// - Returns: Interceptors to use when handling 'blindBoxContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlindBoxContentInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryBlindBoxContentRequest, Likechain_Likenft_V1_QueryBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when handling 'blindBoxContentIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlindBoxContentIndexInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryBlindBoxContentIndexRequest, Likechain_Likenft_V1_QueryBlindBoxContentIndexResponse>]

  /// - Returns: Interceptors to use when handling 'blindBoxContents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlindBoxContentsInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryBlindBoxContentsRequest, Likechain_Likenft_V1_QueryBlindBoxContentsResponse>]

  /// - Returns: Interceptors to use when handling 'offer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOfferInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryOfferRequest, Likechain_Likenft_V1_QueryOfferResponse>]

  /// - Returns: Interceptors to use when handling 'offerIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOfferIndexInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryOfferIndexRequest, Likechain_Likenft_V1_QueryOfferIndexResponse>]

  /// - Returns: Interceptors to use when handling 'offersByClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOffersByClassInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryOffersByClassRequest, Likechain_Likenft_V1_QueryOffersByClassResponse>]

  /// - Returns: Interceptors to use when handling 'offersByNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOffersByNFTInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryOffersByNFTRequest, Likechain_Likenft_V1_QueryOffersByNFTResponse>]

  /// - Returns: Interceptors to use when handling 'listing'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryListingRequest, Likechain_Likenft_V1_QueryListingResponse>]

  /// - Returns: Interceptors to use when handling 'listingIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingIndexInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryListingIndexRequest, Likechain_Likenft_V1_QueryListingIndexResponse>]

  /// - Returns: Interceptors to use when handling 'listingsByClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingsByClassInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryListingsByClassRequest, Likechain_Likenft_V1_QueryListingsByClassResponse>]

  /// - Returns: Interceptors to use when handling 'listingsByNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListingsByNFTInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryListingsByNFTRequest, Likechain_Likenft_V1_QueryListingsByNFTResponse>]

  /// - Returns: Interceptors to use when handling 'royaltyConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoyaltyConfigInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryRoyaltyConfigRequest, Likechain_Likenft_V1_QueryRoyaltyConfigResponse>]

  /// - Returns: Interceptors to use when handling 'royaltyConfigIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoyaltyConfigIndexInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_QueryRoyaltyConfigIndexRequest, Likechain_Likenft_V1_QueryRoyaltyConfigIndexResponse>]
}

internal enum Likechain_Likenft_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "likechain.likenft.v1.Query",
    methods: [
      Likechain_Likenft_V1_QueryServerMetadata.Methods.params,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.classesByISCN,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.classesByISCNIndex,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.iSCNByClass,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.classesByAccount,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.classesByAccountIndex,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.accountByClass,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.blindBoxContent,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.blindBoxContentIndex,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.blindBoxContents,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.offer,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.offerIndex,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.offersByClass,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.offersByNFT,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.listing,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.listingIndex,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.listingsByClass,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.listingsByNFT,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.royaltyConfig,
      Likechain_Likenft_V1_QueryServerMetadata.Methods.royaltyConfigIndex,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/likechain.likenft.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let classesByISCN = GRPCMethodDescriptor(
      name: "ClassesByISCN",
      path: "/likechain.likenft.v1.Query/ClassesByISCN",
      type: GRPCCallType.unary
    )

    internal static let classesByISCNIndex = GRPCMethodDescriptor(
      name: "ClassesByISCNIndex",
      path: "/likechain.likenft.v1.Query/ClassesByISCNIndex",
      type: GRPCCallType.unary
    )

    internal static let iSCNByClass = GRPCMethodDescriptor(
      name: "ISCNByClass",
      path: "/likechain.likenft.v1.Query/ISCNByClass",
      type: GRPCCallType.unary
    )

    internal static let classesByAccount = GRPCMethodDescriptor(
      name: "ClassesByAccount",
      path: "/likechain.likenft.v1.Query/ClassesByAccount",
      type: GRPCCallType.unary
    )

    internal static let classesByAccountIndex = GRPCMethodDescriptor(
      name: "ClassesByAccountIndex",
      path: "/likechain.likenft.v1.Query/ClassesByAccountIndex",
      type: GRPCCallType.unary
    )

    internal static let accountByClass = GRPCMethodDescriptor(
      name: "AccountByClass",
      path: "/likechain.likenft.v1.Query/AccountByClass",
      type: GRPCCallType.unary
    )

    internal static let blindBoxContent = GRPCMethodDescriptor(
      name: "BlindBoxContent",
      path: "/likechain.likenft.v1.Query/BlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let blindBoxContentIndex = GRPCMethodDescriptor(
      name: "BlindBoxContentIndex",
      path: "/likechain.likenft.v1.Query/BlindBoxContentIndex",
      type: GRPCCallType.unary
    )

    internal static let blindBoxContents = GRPCMethodDescriptor(
      name: "BlindBoxContents",
      path: "/likechain.likenft.v1.Query/BlindBoxContents",
      type: GRPCCallType.unary
    )

    internal static let offer = GRPCMethodDescriptor(
      name: "Offer",
      path: "/likechain.likenft.v1.Query/Offer",
      type: GRPCCallType.unary
    )

    internal static let offerIndex = GRPCMethodDescriptor(
      name: "OfferIndex",
      path: "/likechain.likenft.v1.Query/OfferIndex",
      type: GRPCCallType.unary
    )

    internal static let offersByClass = GRPCMethodDescriptor(
      name: "OffersByClass",
      path: "/likechain.likenft.v1.Query/OffersByClass",
      type: GRPCCallType.unary
    )

    internal static let offersByNFT = GRPCMethodDescriptor(
      name: "OffersByNFT",
      path: "/likechain.likenft.v1.Query/OffersByNFT",
      type: GRPCCallType.unary
    )

    internal static let listing = GRPCMethodDescriptor(
      name: "Listing",
      path: "/likechain.likenft.v1.Query/Listing",
      type: GRPCCallType.unary
    )

    internal static let listingIndex = GRPCMethodDescriptor(
      name: "ListingIndex",
      path: "/likechain.likenft.v1.Query/ListingIndex",
      type: GRPCCallType.unary
    )

    internal static let listingsByClass = GRPCMethodDescriptor(
      name: "ListingsByClass",
      path: "/likechain.likenft.v1.Query/ListingsByClass",
      type: GRPCCallType.unary
    )

    internal static let listingsByNFT = GRPCMethodDescriptor(
      name: "ListingsByNFT",
      path: "/likechain.likenft.v1.Query/ListingsByNFT",
      type: GRPCCallType.unary
    )

    internal static let royaltyConfig = GRPCMethodDescriptor(
      name: "RoyaltyConfig",
      path: "/likechain.likenft.v1.Query/RoyaltyConfig",
      type: GRPCCallType.unary
    )

    internal static let royaltyConfigIndex = GRPCMethodDescriptor(
      name: "RoyaltyConfigIndex",
      path: "/likechain.likenft.v1.Query/RoyaltyConfigIndex",
      type: GRPCCallType.unary
    )
  }
}
