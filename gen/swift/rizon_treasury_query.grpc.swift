//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rizon/treasury/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Rizonworld_Rizon_Treasury_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Rizonworld_Rizon_Treasury_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? { get }

  func currencies(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>

  func currency(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>

  func maxAtoloSupply(
    _ request: Rizonworld_Rizon_Treasury_QueryMaxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryMaxRequest, Rizonworld_Rizon_Treasury_QueryMaxResponse>

  func params(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>
}

extension Rizonworld_Rizon_Treasury_QueryClientProtocol {
  internal var serviceName: String {
    return "rizonworld.rizon.treasury.Query"
  }

  /// Currencies queries all supported currency denom list
  ///
  /// - Parameters:
  ///   - request: Request to send to Currencies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currencies(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse> {
    return self.makeUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currencies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? []
    )
  }

  /// Currency queries a currency info
  ///
  /// - Parameters:
  ///   - request: Request to send to Currency.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currency(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse> {
    return self.makeUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrencyInterceptors() ?? []
    )
  }

  /// MaxAtoloSupply queries maximum mintable amount of uatolo
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxAtoloSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxAtoloSupply(
    _ request: Rizonworld_Rizon_Treasury_QueryMaxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryMaxRequest, Rizonworld_Rizon_Treasury_QueryMaxResponse> {
    return self.makeUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.maxAtoloSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxAtoloSupplyInterceptors() ?? []
    )
  }

  /// Params queries parameters of treasury
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Rizonworld_Rizon_Treasury_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Rizonworld_Rizon_Treasury_QueryNIOClient")
internal final class Rizonworld_Rizon_Treasury_QueryClient: Rizonworld_Rizon_Treasury_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the rizonworld.rizon.treasury.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Rizonworld_Rizon_Treasury_QueryNIOClient: Rizonworld_Rizon_Treasury_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the rizonworld.rizon.treasury.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Rizonworld_Rizon_Treasury_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? { get }

  func makeCurrenciesCall(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>

  func makeCurrencyCall(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>

  func makeMaxAtoloSupplyCall(
    _ request: Rizonworld_Rizon_Treasury_QueryMaxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryMaxRequest, Rizonworld_Rizon_Treasury_QueryMaxResponse>

  func makeParamsCall(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rizonworld_Rizon_Treasury_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Rizonworld_Rizon_Treasury_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCurrenciesCall(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse> {
    return self.makeAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currencies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? []
    )
  }

  internal func makeCurrencyCall(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse> {
    return self.makeAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrencyInterceptors() ?? []
    )
  }

  internal func makeMaxAtoloSupplyCall(
    _ request: Rizonworld_Rizon_Treasury_QueryMaxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryMaxRequest, Rizonworld_Rizon_Treasury_QueryMaxResponse> {
    return self.makeAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.maxAtoloSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxAtoloSupplyInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rizonworld_Rizon_Treasury_QueryAsyncClientProtocol {
  internal func currencies(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rizonworld_Rizon_Treasury_QueryCurrenciesResponse {
    return try await self.performAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currencies.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? []
    )
  }

  internal func currency(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rizonworld_Rizon_Treasury_QueryCurrencyResponse {
    return try await self.performAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currency.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrencyInterceptors() ?? []
    )
  }

  internal func maxAtoloSupply(
    _ request: Rizonworld_Rizon_Treasury_QueryMaxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rizonworld_Rizon_Treasury_QueryMaxResponse {
    return try await self.performAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.maxAtoloSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxAtoloSupplyInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rizonworld_Rizon_Treasury_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Rizonworld_Rizon_Treasury_QueryAsyncClient: Rizonworld_Rizon_Treasury_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'currencies'.
  func makeCurrenciesInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>]

  /// - Returns: Interceptors to use when invoking 'currency'.
  func makeCurrencyInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>]

  /// - Returns: Interceptors to use when invoking 'maxAtoloSupply'.
  func makeMaxAtoloSupplyInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryMaxRequest, Rizonworld_Rizon_Treasury_QueryMaxResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>]
}

internal enum Rizonworld_Rizon_Treasury_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "rizonworld.rizon.treasury.Query",
    methods: [
      Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currencies,
      Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.currency,
      Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.maxAtoloSupply,
      Rizonworld_Rizon_Treasury_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let currencies = GRPCMethodDescriptor(
      name: "Currencies",
      path: "/rizonworld.rizon.treasury.Query/Currencies",
      type: GRPCCallType.unary
    )

    internal static let currency = GRPCMethodDescriptor(
      name: "Currency",
      path: "/rizonworld.rizon.treasury.Query/Currency",
      type: GRPCCallType.unary
    )

    internal static let maxAtoloSupply = GRPCMethodDescriptor(
      name: "MaxAtoloSupply",
      path: "/rizonworld.rizon.treasury.Query/MaxAtoloSupply",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/rizonworld.rizon.treasury.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Rizonworld_Rizon_Treasury_QueryProvider: CallHandlerProvider {
  var interceptors: Rizonworld_Rizon_Treasury_QueryServerInterceptorFactoryProtocol? { get }

  /// Currencies queries all supported currency denom list
  func currencies(request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>

  /// Currency queries a currency info
  func currency(request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryCurrencyResponse>

  /// MaxAtoloSupply queries maximum mintable amount of uatolo
  func maxAtoloSupply(request: Rizonworld_Rizon_Treasury_QueryMaxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryMaxResponse>

  /// Params queries parameters of treasury
  func params(request: Rizonworld_Rizon_Treasury_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryParamsResponse>
}

extension Rizonworld_Rizon_Treasury_QueryProvider {
  internal var serviceName: Substring {
    return Rizonworld_Rizon_Treasury_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Currencies":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>(),
        interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? [],
        userFunction: self.currencies(request:context:)
      )

    case "Currency":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryCurrencyRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryCurrencyResponse>(),
        interceptors: self.interceptors?.makeCurrencyInterceptors() ?? [],
        userFunction: self.currency(request:context:)
      )

    case "MaxAtoloSupply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryMaxRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryMaxResponse>(),
        interceptors: self.interceptors?.makeMaxAtoloSupplyInterceptors() ?? [],
        userFunction: self.maxAtoloSupply(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Rizonworld_Rizon_Treasury_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Rizonworld_Rizon_Treasury_QueryServerInterceptorFactoryProtocol? { get }

  /// Currencies queries all supported currency denom list
  @Sendable func currencies(
    request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Rizonworld_Rizon_Treasury_QueryCurrenciesResponse

  /// Currency queries a currency info
  @Sendable func currency(
    request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Rizonworld_Rizon_Treasury_QueryCurrencyResponse

  /// MaxAtoloSupply queries maximum mintable amount of uatolo
  @Sendable func maxAtoloSupply(
    request: Rizonworld_Rizon_Treasury_QueryMaxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Rizonworld_Rizon_Treasury_QueryMaxResponse

  /// Params queries parameters of treasury
  @Sendable func params(
    request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Rizonworld_Rizon_Treasury_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rizonworld_Rizon_Treasury_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Rizonworld_Rizon_Treasury_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Rizonworld_Rizon_Treasury_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Rizonworld_Rizon_Treasury_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Currencies":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>(),
        interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? [],
        wrapping: self.currencies(request:context:)
      )

    case "Currency":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryCurrencyRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryCurrencyResponse>(),
        interceptors: self.interceptors?.makeCurrencyInterceptors() ?? [],
        wrapping: self.currency(request:context:)
      )

    case "MaxAtoloSupply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryMaxRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryMaxResponse>(),
        interceptors: self.interceptors?.makeMaxAtoloSupplyInterceptors() ?? [],
        wrapping: self.maxAtoloSupply(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Rizonworld_Rizon_Treasury_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'currencies'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrenciesInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>]

  /// - Returns: Interceptors to use when handling 'currency'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrencyInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>]

  /// - Returns: Interceptors to use when handling 'maxAtoloSupply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxAtoloSupplyInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryMaxRequest, Rizonworld_Rizon_Treasury_QueryMaxResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>]
}

internal enum Rizonworld_Rizon_Treasury_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "rizonworld.rizon.treasury.Query",
    methods: [
      Rizonworld_Rizon_Treasury_QueryServerMetadata.Methods.currencies,
      Rizonworld_Rizon_Treasury_QueryServerMetadata.Methods.currency,
      Rizonworld_Rizon_Treasury_QueryServerMetadata.Methods.maxAtoloSupply,
      Rizonworld_Rizon_Treasury_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let currencies = GRPCMethodDescriptor(
      name: "Currencies",
      path: "/rizonworld.rizon.treasury.Query/Currencies",
      type: GRPCCallType.unary
    )

    internal static let currency = GRPCMethodDescriptor(
      name: "Currency",
      path: "/rizonworld.rizon.treasury.Query/Currency",
      type: GRPCCallType.unary
    )

    internal static let maxAtoloSupply = GRPCMethodDescriptor(
      name: "MaxAtoloSupply",
      path: "/rizonworld.rizon.treasury.Query/MaxAtoloSupply",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/rizonworld.rizon.treasury.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
