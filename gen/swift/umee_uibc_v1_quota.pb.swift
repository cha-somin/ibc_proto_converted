// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: umee/uibc/v1/quota.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// IBCTransferStatus status of ibc-transfer quota check for inflow and outflow
enum Umee_Uibc_V1_IBCTransferStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// UNSPECIFIED  defines a no-op status.
  case unspecified // = 0

  /// DISABLED: all inflow and outflow quota checks are disabled.
  case quotaDisabled // = 1

  /// ENABLED: all inflow and outflow quota checks are enabled.
  case quotaEnabled // = 2

  /// DISABLED OUT: outflow quota check is disabled, while the inflow quota check is enabled.
  case quotaOutDisabled // = 3

  /// DISABLED IN: inflow quota check is disabled, while the outflow quota check is enabled.
  case quotaInDisabled // = 4

  /// PAUSED: all IBC transfers are paused.
  case transfersPaused // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .quotaDisabled
    case 2: self = .quotaEnabled
    case 3: self = .quotaOutDisabled
    case 4: self = .quotaInDisabled
    case 5: self = .transfersPaused
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .quotaDisabled: return 1
    case .quotaEnabled: return 2
    case .quotaOutDisabled: return 3
    case .quotaInDisabled: return 4
    case .transfersPaused: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Umee_Uibc_V1_IBCTransferStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Umee_Uibc_V1_IBCTransferStatus] = [
    .unspecified,
    .quotaDisabled,
    .quotaEnabled,
    .quotaOutDisabled,
    .quotaInDisabled,
    .transfersPaused,
  ]
}

#endif  // swift(>=4.2)

/// Params of x/uibc module
struct Umee_Uibc_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ibc_status defines the IBC ICS20 status (transfer quota or transfers disabled).
  var ibcStatus: Umee_Uibc_V1_IBCTransferStatus = .unspecified

  /// total_quota defines the total outflow limit of ibc-transfer in USD
  var totalQuota: String = String()

  /// token_quota defines the outflow limit per token in USD
  var tokenQuota: String = String()

  /// quota_duration defines quota expires for each ibc-transfer denom in seconds
  var quotaDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _quotaDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_quotaDuration = newValue}
  }
  /// Returns true if `quotaDuration` has been explicitly set.
  var hasQuotaDuration: Bool {return self._quotaDuration != nil}
  /// Clears the value of `quotaDuration`. Subsequent reads from it will return its default value.
  mutating func clearQuotaDuration() {self._quotaDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _quotaDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Umee_Uibc_V1_IBCTransferStatus: @unchecked Sendable {}
extension Umee_Uibc_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "umee.uibc.v1"

extension Umee_Uibc_V1_IBCTransferStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IBC_TRANSFER_STATUS_UNSPECIFIED"),
    1: .same(proto: "IBC_TRANSFER_STATUS_QUOTA_DISABLED"),
    2: .same(proto: "IBC_TRANSFER_STATUS_QUOTA_ENABLED"),
    3: .same(proto: "IBC_TRANSFER_STATUS_QUOTA_OUT_DISABLED"),
    4: .same(proto: "IBC_TRANSFER_STATUS_QUOTA_IN_DISABLED"),
    5: .same(proto: "IBC_TRANSFER_STATUS_TRANSFERS_PAUSED"),
  ]
}

extension Umee_Uibc_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ibc_status"),
    2: .standard(proto: "total_quota"),
    3: .standard(proto: "token_quota"),
    4: .standard(proto: "quota_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.ibcStatus) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.totalQuota) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenQuota) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._quotaDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.ibcStatus != .unspecified {
      try visitor.visitSingularEnumField(value: self.ibcStatus, fieldNumber: 1)
    }
    if !self.totalQuota.isEmpty {
      try visitor.visitSingularStringField(value: self.totalQuota, fieldNumber: 2)
    }
    if !self.tokenQuota.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenQuota, fieldNumber: 3)
    }
    try { if let v = self._quotaDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Uibc_V1_Params, rhs: Umee_Uibc_V1_Params) -> Bool {
    if lhs.ibcStatus != rhs.ibcStatus {return false}
    if lhs.totalQuota != rhs.totalQuota {return false}
    if lhs.tokenQuota != rhs.tokenQuota {return false}
    if lhs._quotaDuration != rhs._quotaDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
