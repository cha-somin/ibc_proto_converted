//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: quicksilver/interchainstaking/v1/messages.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the interchainstaking Msg service.
///
/// Usage: instantiate `Quicksilver_Interchainstaking_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Quicksilver_Interchainstaking_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? { get }

  func requestRedemption(
    _ request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgRequestRedemption, Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>

  func signalIntent(
    _ request: Quicksilver_Interchainstaking_V1_MsgSignalIntent,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgSignalIntent, Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>

  func govCloseChannel(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>

  func govReopenChannel(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>
}

extension Quicksilver_Interchainstaking_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "quicksilver.interchainstaking.v1.Msg"
  }

  /// RequestRedemption defines a method for requesting burning of qAssets for
  /// native assets.
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestRedemption.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestRedemption(
    _ request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgRequestRedemption, Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.requestRedemption.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestRedemptionInterceptors() ?? []
    )
  }

  /// SignalIntent defines a method for signalling voting intent for one or more
  /// validators.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignalIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signalIntent(
    _ request: Quicksilver_Interchainstaking_V1_MsgSignalIntent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgSignalIntent, Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.signalIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignalIntentInterceptors() ?? []
    )
  }

  /// SignalIntent defines a method for signalling voting intent for one or more
  /// validators.
  ///
  /// - Parameters:
  ///   - request: Request to send to GovCloseChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func govCloseChannel(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govCloseChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovCloseChannelInterceptors() ?? []
    )
  }

  /// Unary call to GovReopenChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to GovReopenChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func govReopenChannel(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govReopenChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovReopenChannelInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Quicksilver_Interchainstaking_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Quicksilver_Interchainstaking_V1_MsgNIOClient")
internal final class Quicksilver_Interchainstaking_V1_MsgClient: Quicksilver_Interchainstaking_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the quicksilver.interchainstaking.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Quicksilver_Interchainstaking_V1_MsgNIOClient: Quicksilver_Interchainstaking_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the quicksilver.interchainstaking.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the interchainstaking Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Quicksilver_Interchainstaking_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeRequestRedemptionCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgRequestRedemption, Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>

  func makeSignalIntentCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgSignalIntent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgSignalIntent, Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>

  func makeGovCloseChannelCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>

  func makeGovReopenChannelCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quicksilver_Interchainstaking_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Quicksilver_Interchainstaking_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRequestRedemptionCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgRequestRedemption, Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.requestRedemption.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestRedemptionInterceptors() ?? []
    )
  }

  internal func makeSignalIntentCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgSignalIntent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgSignalIntent, Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.signalIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignalIntentInterceptors() ?? []
    )
  }

  internal func makeGovCloseChannelCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govCloseChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovCloseChannelInterceptors() ?? []
    )
  }

  internal func makeGovReopenChannelCall(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govReopenChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovReopenChannelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quicksilver_Interchainstaking_V1_MsgAsyncClientProtocol {
  internal func requestRedemption(
    _ request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.requestRedemption.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestRedemptionInterceptors() ?? []
    )
  }

  internal func signalIntent(
    _ request: Quicksilver_Interchainstaking_V1_MsgSignalIntent,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.signalIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignalIntentInterceptors() ?? []
    )
  }

  internal func govCloseChannel(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govCloseChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovCloseChannelInterceptors() ?? []
    )
  }

  internal func govReopenChannel(
    _ request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govReopenChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovReopenChannelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Quicksilver_Interchainstaking_V1_MsgAsyncClient: Quicksilver_Interchainstaking_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Quicksilver_Interchainstaking_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'requestRedemption'.
  func makeRequestRedemptionInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_MsgRequestRedemption, Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>]

  /// - Returns: Interceptors to use when invoking 'signalIntent'.
  func makeSignalIntentInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_MsgSignalIntent, Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>]

  /// - Returns: Interceptors to use when invoking 'govCloseChannel'.
  func makeGovCloseChannelInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'govReopenChannel'.
  func makeGovReopenChannelInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>]
}

internal enum Quicksilver_Interchainstaking_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "quicksilver.interchainstaking.v1.Msg",
    methods: [
      Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.requestRedemption,
      Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.signalIntent,
      Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govCloseChannel,
      Quicksilver_Interchainstaking_V1_MsgClientMetadata.Methods.govReopenChannel,
    ]
  )

  internal enum Methods {
    internal static let requestRedemption = GRPCMethodDescriptor(
      name: "RequestRedemption",
      path: "/quicksilver.interchainstaking.v1.Msg/RequestRedemption",
      type: GRPCCallType.unary
    )

    internal static let signalIntent = GRPCMethodDescriptor(
      name: "SignalIntent",
      path: "/quicksilver.interchainstaking.v1.Msg/SignalIntent",
      type: GRPCCallType.unary
    )

    internal static let govCloseChannel = GRPCMethodDescriptor(
      name: "GovCloseChannel",
      path: "/quicksilver.interchainstaking.v1.Msg/GovCloseChannel",
      type: GRPCCallType.unary
    )

    internal static let govReopenChannel = GRPCMethodDescriptor(
      name: "GovReopenChannel",
      path: "/quicksilver.interchainstaking.v1.Msg/GovReopenChannel",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the interchainstaking Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Quicksilver_Interchainstaking_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Quicksilver_Interchainstaking_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// RequestRedemption defines a method for requesting burning of qAssets for
  /// native assets.
  func requestRedemption(request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>

  /// SignalIntent defines a method for signalling voting intent for one or more
  /// validators.
  func signalIntent(request: Quicksilver_Interchainstaking_V1_MsgSignalIntent, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>

  /// SignalIntent defines a method for signalling voting intent for one or more
  /// validators.
  func govCloseChannel(request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>

  func govReopenChannel(request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>
}

extension Quicksilver_Interchainstaking_V1_MsgProvider {
  internal var serviceName: Substring {
    return Quicksilver_Interchainstaking_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestRedemption":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgRequestRedemption>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>(),
        interceptors: self.interceptors?.makeRequestRedemptionInterceptors() ?? [],
        userFunction: self.requestRedemption(request:context:)
      )

    case "SignalIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgSignalIntent>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>(),
        interceptors: self.interceptors?.makeSignalIntentInterceptors() ?? [],
        userFunction: self.signalIntent(request:context:)
      )

    case "GovCloseChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>(),
        interceptors: self.interceptors?.makeGovCloseChannelInterceptors() ?? [],
        userFunction: self.govCloseChannel(request:context:)
      )

    case "GovReopenChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>(),
        interceptors: self.interceptors?.makeGovReopenChannelInterceptors() ?? [],
        userFunction: self.govReopenChannel(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the interchainstaking Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Quicksilver_Interchainstaking_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Quicksilver_Interchainstaking_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// RequestRedemption defines a method for requesting burning of qAssets for
  /// native assets.
  @Sendable func requestRedemption(
    request: Quicksilver_Interchainstaking_V1_MsgRequestRedemption,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse

  /// SignalIntent defines a method for signalling voting intent for one or more
  /// validators.
  @Sendable func signalIntent(
    request: Quicksilver_Interchainstaking_V1_MsgSignalIntent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse

  /// SignalIntent defines a method for signalling voting intent for one or more
  /// validators.
  @Sendable func govCloseChannel(
    request: Quicksilver_Interchainstaking_V1_MsgGovCloseChannel,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse

  @Sendable func govReopenChannel(
    request: Quicksilver_Interchainstaking_V1_MsgGovReopenChannel,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quicksilver_Interchainstaking_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Quicksilver_Interchainstaking_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Quicksilver_Interchainstaking_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Quicksilver_Interchainstaking_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestRedemption":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgRequestRedemption>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>(),
        interceptors: self.interceptors?.makeRequestRedemptionInterceptors() ?? [],
        wrapping: self.requestRedemption(request:context:)
      )

    case "SignalIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgSignalIntent>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>(),
        interceptors: self.interceptors?.makeSignalIntentInterceptors() ?? [],
        wrapping: self.signalIntent(request:context:)
      )

    case "GovCloseChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>(),
        interceptors: self.interceptors?.makeGovCloseChannelInterceptors() ?? [],
        wrapping: self.govCloseChannel(request:context:)
      )

    case "GovReopenChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>(),
        interceptors: self.interceptors?.makeGovReopenChannelInterceptors() ?? [],
        wrapping: self.govReopenChannel(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Quicksilver_Interchainstaking_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'requestRedemption'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestRedemptionInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_MsgRequestRedemption, Quicksilver_Interchainstaking_V1_MsgRequestRedemptionResponse>]

  /// - Returns: Interceptors to use when handling 'signalIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignalIntentInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_MsgSignalIntent, Quicksilver_Interchainstaking_V1_MsgSignalIntentResponse>]

  /// - Returns: Interceptors to use when handling 'govCloseChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGovCloseChannelInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_MsgGovCloseChannel, Quicksilver_Interchainstaking_V1_MsgGovCloseChannelResponse>]

  /// - Returns: Interceptors to use when handling 'govReopenChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGovReopenChannelInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_MsgGovReopenChannel, Quicksilver_Interchainstaking_V1_MsgGovReopenChannelResponse>]
}

internal enum Quicksilver_Interchainstaking_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "quicksilver.interchainstaking.v1.Msg",
    methods: [
      Quicksilver_Interchainstaking_V1_MsgServerMetadata.Methods.requestRedemption,
      Quicksilver_Interchainstaking_V1_MsgServerMetadata.Methods.signalIntent,
      Quicksilver_Interchainstaking_V1_MsgServerMetadata.Methods.govCloseChannel,
      Quicksilver_Interchainstaking_V1_MsgServerMetadata.Methods.govReopenChannel,
    ]
  )

  internal enum Methods {
    internal static let requestRedemption = GRPCMethodDescriptor(
      name: "RequestRedemption",
      path: "/quicksilver.interchainstaking.v1.Msg/RequestRedemption",
      type: GRPCCallType.unary
    )

    internal static let signalIntent = GRPCMethodDescriptor(
      name: "SignalIntent",
      path: "/quicksilver.interchainstaking.v1.Msg/SignalIntent",
      type: GRPCCallType.unary
    )

    internal static let govCloseChannel = GRPCMethodDescriptor(
      name: "GovCloseChannel",
      path: "/quicksilver.interchainstaking.v1.Msg/GovCloseChannel",
      type: GRPCCallType.unary
    )

    internal static let govReopenChannel = GRPCMethodDescriptor(
      name: "GovReopenChannel",
      path: "/quicksilver.interchainstaking.v1.Msg/GovReopenChannel",
      type: GRPCCallType.unary
    )
  }
}
