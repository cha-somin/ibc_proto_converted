// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/gov/v1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Shentu_Gov_V1_QueryCertVotedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// proposal_id defines the unique id of the proposal.
  var proposalID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryProposalResponse is the response type for the Query/Proposal RPC method.
struct Shentu_Gov_V1_QueryCertVotedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var certVoted: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is the response type for the Query/Params RPC method.
struct Shentu_Gov_V1_QueryParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// voting_params defines the parameters related to voting.
  var votingParams: Cosmos_Gov_V1_VotingParams {
    get {return _votingParams ?? Cosmos_Gov_V1_VotingParams()}
    set {_votingParams = newValue}
  }
  /// Returns true if `votingParams` has been explicitly set.
  var hasVotingParams: Bool {return self._votingParams != nil}
  /// Clears the value of `votingParams`. Subsequent reads from it will return its default value.
  mutating func clearVotingParams() {self._votingParams = nil}

  /// deposit_params defines the parameters related to deposit.
  var depositParams: Cosmos_Gov_V1_DepositParams {
    get {return _depositParams ?? Cosmos_Gov_V1_DepositParams()}
    set {_depositParams = newValue}
  }
  /// Returns true if `depositParams` has been explicitly set.
  var hasDepositParams: Bool {return self._depositParams != nil}
  /// Clears the value of `depositParams`. Subsequent reads from it will return its default value.
  mutating func clearDepositParams() {self._depositParams = nil}

  /// tally_params defines the parameters related to tally.
  var tallyParams: Cosmos_Gov_V1_TallyParams {
    get {return _tallyParams ?? Cosmos_Gov_V1_TallyParams()}
    set {_tallyParams = newValue}
  }
  /// Returns true if `tallyParams` has been explicitly set.
  var hasTallyParams: Bool {return self._tallyParams != nil}
  /// Clears the value of `tallyParams`. Subsequent reads from it will return its default value.
  mutating func clearTallyParams() {self._tallyParams = nil}

  /// custom_params defines the parameters related to custom.
  /// params defines all the paramaters of x/gov module.
  ///
  /// Since: cosmos-sdk 0.47
  var params: Cosmos_Gov_V1_Params {
    get {return _params ?? Cosmos_Gov_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var customParams: Shentu_Gov_V1_CustomParams {
    get {return _customParams ?? Shentu_Gov_V1_CustomParams()}
    set {_customParams = newValue}
  }
  /// Returns true if `customParams` has been explicitly set.
  var hasCustomParams: Bool {return self._customParams != nil}
  /// Clears the value of `customParams`. Subsequent reads from it will return its default value.
  mutating func clearCustomParams() {self._customParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _votingParams: Cosmos_Gov_V1_VotingParams? = nil
  fileprivate var _depositParams: Cosmos_Gov_V1_DepositParams? = nil
  fileprivate var _tallyParams: Cosmos_Gov_V1_TallyParams? = nil
  fileprivate var _params: Cosmos_Gov_V1_Params? = nil
  fileprivate var _customParams: Shentu_Gov_V1_CustomParams? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Shentu_Gov_V1_QueryCertVotedRequest: @unchecked Sendable {}
extension Shentu_Gov_V1_QueryCertVotedResponse: @unchecked Sendable {}
extension Shentu_Gov_V1_QueryParamsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shentu.gov.v1"

extension Shentu_Gov_V1_QueryCertVotedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryCertVotedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "proposal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.proposalID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.proposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1_QueryCertVotedRequest, rhs: Shentu_Gov_V1_QueryCertVotedRequest) -> Bool {
    if lhs.proposalID != rhs.proposalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1_QueryCertVotedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryCertVotedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cert_voted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.certVoted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.certVoted != false {
      try visitor.visitSingularBoolField(value: self.certVoted, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1_QueryCertVotedResponse, rhs: Shentu_Gov_V1_QueryCertVotedResponse) -> Bool {
    if lhs.certVoted != rhs.certVoted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Gov_V1_QueryParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voting_params"),
    2: .standard(proto: "deposit_params"),
    3: .standard(proto: "tally_params"),
    4: .same(proto: "params"),
    5: .standard(proto: "custom_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._votingParams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._depositParams) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tallyParams) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._customParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._votingParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._depositParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._tallyParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._customParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1_QueryParamsResponse, rhs: Shentu_Gov_V1_QueryParamsResponse) -> Bool {
    if lhs._votingParams != rhs._votingParams {return false}
    if lhs._depositParams != rhs._depositParams {return false}
    if lhs._tallyParams != rhs._tallyParams {return false}
    if lhs._params != rhs._params {return false}
    if lhs._customParams != rhs._customParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
