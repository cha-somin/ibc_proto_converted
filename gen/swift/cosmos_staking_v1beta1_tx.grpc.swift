//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/staking/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the staking Msg service.
///
/// Usage: instantiate `Cosmos_Staking_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Staking_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createValidator(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>

  func editValidator(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>

  func delegate(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>

  func beginRedelegate(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>

  func undelegate(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>

  func cancelUnbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>

  func updateParams(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>

  func unbondValidator(
    _ request: Cosmos_Staking_V1beta1_MsgUnbondValidator,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUnbondValidator, Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>

  func tokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgTokenizeShares,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgTokenizeShares, Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>

  func redeemTokensForShares(
    _ request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>

  func transferTokenizeShareRecord(
    _ request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>

  func disableTokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>

  func enableTokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>

  func validatorBond(
    _ request: Cosmos_Staking_V1beta1_MsgValidatorBond,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgValidatorBond, Cosmos_Staking_V1beta1_MsgValidatorBondResponse>
}

extension Cosmos_Staking_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "cosmos.staking.v1beta1.Msg"
  }

  /// CreateValidator defines a method for creating a new validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createValidator(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? []
    )
  }

  /// EditValidator defines a method for editing an existing validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editValidator(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? []
    )
  }

  /// Delegate defines a method for performing a delegation of coins
  /// from a delegator to a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to Delegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegate(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateInterceptors() ?? []
    )
  }

  /// BeginRedelegate defines a method for performing a redelegation
  /// of coins from a delegator and source validator to a destination validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginRedelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func beginRedelegate(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? []
    )
  }

  /// Undelegate defines a method for performing an undelegation from a
  /// delegate and a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to Undelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func undelegate(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndelegateInterceptors() ?? []
    )
  }

  /// CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
  /// and delegate back to previous validator.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelUnbondingDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelUnbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? []
    )
  }

  /// UpdateParams defines an operation for updating the x/staking module
  /// parameters.
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  /// UnbondValidator defines a method for performing the status transition for a validator
  /// from bonded to unbonding
  /// This allows a validator to stop their services and jail themselves without
  /// experiencing a slash
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbondValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unbondValidator(
    _ request: Cosmos_Staking_V1beta1_MsgUnbondValidator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgUnbondValidator, Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.unbondValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondValidatorInterceptors() ?? []
    )
  }

  /// TokenizeShares defines a method for tokenizing shares from a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to TokenizeShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgTokenizeShares,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgTokenizeShares, Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.tokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenizeSharesInterceptors() ?? []
    )
  }

  /// RedeemTokensForShares defines a method for redeeming tokens from a validator for
  /// shares.
  ///
  /// - Parameters:
  ///   - request: Request to send to RedeemTokensForShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redeemTokensForShares(
    _ request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.redeemTokensForShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemTokensForSharesInterceptors() ?? []
    )
  }

  /// TransferTokenizeShareRecord defines a method to transfer ownership of
  /// TokenizeShareRecord
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferTokenizeShareRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferTokenizeShareRecord(
    _ request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.transferTokenizeShareRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferTokenizeShareRecordInterceptors() ?? []
    )
  }

  /// DisableTokenizeShares defines a method to prevent the tokenization of an addresses stake
  ///
  /// - Parameters:
  ///   - request: Request to send to DisableTokenizeShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableTokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.disableTokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableTokenizeSharesInterceptors() ?? []
    )
  }

  /// EnableTokenizeShares defines a method to re-enable the tokenization of an addresseses stake
  /// after it has been disabled
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableTokenizeShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableTokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.enableTokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableTokenizeSharesInterceptors() ?? []
    )
  }

  /// ValidatorBond defines a method for performing a validator self-bond
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorBond.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorBond(
    _ request: Cosmos_Staking_V1beta1_MsgValidatorBond,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_MsgValidatorBond, Cosmos_Staking_V1beta1_MsgValidatorBondResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.validatorBond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorBondInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Staking_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Staking_V1beta1_MsgNIOClient")
internal final class Cosmos_Staking_V1beta1_MsgClient: Cosmos_Staking_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.staking.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Staking_V1beta1_MsgNIOClient: Cosmos_Staking_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.staking.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the staking Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Staking_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>

  func makeEditValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>

  func makeDelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>

  func makeBeginRedelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>

  func makeUndelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>

  func makeCancelUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>

  func makeUpdateParamsCall(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>

  func makeUnbondValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgUnbondValidator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUnbondValidator, Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>

  func makeTokenizeSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgTokenizeShares,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgTokenizeShares, Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>

  func makeRedeemTokensForSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>

  func makeTransferTokenizeShareRecordCall(
    _ request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>

  func makeDisableTokenizeSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>

  func makeEnableTokenizeSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>

  func makeValidatorBondCall(
    _ request: Cosmos_Staking_V1beta1_MsgValidatorBond,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgValidatorBond, Cosmos_Staking_V1beta1_MsgValidatorBondResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Staking_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? []
    )
  }

  internal func makeEditValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? []
    )
  }

  internal func makeDelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateInterceptors() ?? []
    )
  }

  internal func makeBeginRedelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? []
    )
  }

  internal func makeUndelegateCall(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndelegateInterceptors() ?? []
    )
  }

  internal func makeCancelUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func makeUnbondValidatorCall(
    _ request: Cosmos_Staking_V1beta1_MsgUnbondValidator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgUnbondValidator, Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.unbondValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondValidatorInterceptors() ?? []
    )
  }

  internal func makeTokenizeSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgTokenizeShares,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgTokenizeShares, Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.tokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenizeSharesInterceptors() ?? []
    )
  }

  internal func makeRedeemTokensForSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.redeemTokensForShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemTokensForSharesInterceptors() ?? []
    )
  }

  internal func makeTransferTokenizeShareRecordCall(
    _ request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.transferTokenizeShareRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferTokenizeShareRecordInterceptors() ?? []
    )
  }

  internal func makeDisableTokenizeSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.disableTokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableTokenizeSharesInterceptors() ?? []
    )
  }

  internal func makeEnableTokenizeSharesCall(
    _ request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.enableTokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableTokenizeSharesInterceptors() ?? []
    )
  }

  internal func makeValidatorBondCall(
    _ request: Cosmos_Staking_V1beta1_MsgValidatorBond,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_MsgValidatorBond, Cosmos_Staking_V1beta1_MsgValidatorBondResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.validatorBond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorBondInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_MsgAsyncClientProtocol {
  internal func createValidator(
    _ request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgCreateValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? []
    )
  }

  internal func editValidator(
    _ request: Cosmos_Staking_V1beta1_MsgEditValidator,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgEditValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? []
    )
  }

  internal func delegate(
    _ request: Cosmos_Staking_V1beta1_MsgDelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgDelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateInterceptors() ?? []
    )
  }

  internal func beginRedelegate(
    _ request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? []
    )
  }

  internal func undelegate(
    _ request: Cosmos_Staking_V1beta1_MsgUndelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgUndelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndelegateInterceptors() ?? []
    )
  }

  internal func cancelUnbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func unbondValidator(
    _ request: Cosmos_Staking_V1beta1_MsgUnbondValidator,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.unbondValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondValidatorInterceptors() ?? []
    )
  }

  internal func tokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgTokenizeShares,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.tokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenizeSharesInterceptors() ?? []
    )
  }

  internal func redeemTokensForShares(
    _ request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.redeemTokensForShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemTokensForSharesInterceptors() ?? []
    )
  }

  internal func transferTokenizeShareRecord(
    _ request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.transferTokenizeShareRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferTokenizeShareRecordInterceptors() ?? []
    )
  }

  internal func disableTokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.disableTokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableTokenizeSharesInterceptors() ?? []
    )
  }

  internal func enableTokenizeShares(
    _ request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.enableTokenizeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableTokenizeSharesInterceptors() ?? []
    )
  }

  internal func validatorBond(
    _ request: Cosmos_Staking_V1beta1_MsgValidatorBond,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_MsgValidatorBondResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.validatorBond.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorBondInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Staking_V1beta1_MsgAsyncClient: Cosmos_Staking_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Staking_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createValidator'.
  func makeCreateValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'editValidator'.
  func makeEditValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'delegate'.
  func makeDelegateInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'beginRedelegate'.
  func makeBeginRedelegateInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'undelegate'.
  func makeUndelegateInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelUnbondingDelegation'.
  func makeCancelUnbondingDelegationInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'unbondValidator'.
  func makeUnbondValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgUnbondValidator, Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'tokenizeShares'.
  func makeTokenizeSharesInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgTokenizeShares, Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'redeemTokensForShares'.
  func makeRedeemTokensForSharesInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'transferTokenizeShareRecord'.
  func makeTransferTokenizeShareRecordInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'disableTokenizeShares'.
  func makeDisableTokenizeSharesInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'enableTokenizeShares'.
  func makeEnableTokenizeSharesInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorBond'.
  func makeValidatorBondInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_MsgValidatorBond, Cosmos_Staking_V1beta1_MsgValidatorBondResponse>]
}

internal enum Cosmos_Staking_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.staking.v1beta1.Msg",
    methods: [
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.createValidator,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.editValidator,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.delegate,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.beginRedelegate,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.undelegate,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.cancelUnbondingDelegation,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.updateParams,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.unbondValidator,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.tokenizeShares,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.redeemTokensForShares,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.transferTokenizeShareRecord,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.disableTokenizeShares,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.enableTokenizeShares,
      Cosmos_Staking_V1beta1_MsgClientMetadata.Methods.validatorBond,
    ]
  )

  internal enum Methods {
    internal static let createValidator = GRPCMethodDescriptor(
      name: "CreateValidator",
      path: "/cosmos.staking.v1beta1.Msg/CreateValidator",
      type: GRPCCallType.unary
    )

    internal static let editValidator = GRPCMethodDescriptor(
      name: "EditValidator",
      path: "/cosmos.staking.v1beta1.Msg/EditValidator",
      type: GRPCCallType.unary
    )

    internal static let delegate = GRPCMethodDescriptor(
      name: "Delegate",
      path: "/cosmos.staking.v1beta1.Msg/Delegate",
      type: GRPCCallType.unary
    )

    internal static let beginRedelegate = GRPCMethodDescriptor(
      name: "BeginRedelegate",
      path: "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
      type: GRPCCallType.unary
    )

    internal static let undelegate = GRPCMethodDescriptor(
      name: "Undelegate",
      path: "/cosmos.staking.v1beta1.Msg/Undelegate",
      type: GRPCCallType.unary
    )

    internal static let cancelUnbondingDelegation = GRPCMethodDescriptor(
      name: "CancelUnbondingDelegation",
      path: "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/cosmos.staking.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let unbondValidator = GRPCMethodDescriptor(
      name: "UnbondValidator",
      path: "/cosmos.staking.v1beta1.Msg/UnbondValidator",
      type: GRPCCallType.unary
    )

    internal static let tokenizeShares = GRPCMethodDescriptor(
      name: "TokenizeShares",
      path: "/cosmos.staking.v1beta1.Msg/TokenizeShares",
      type: GRPCCallType.unary
    )

    internal static let redeemTokensForShares = GRPCMethodDescriptor(
      name: "RedeemTokensForShares",
      path: "/cosmos.staking.v1beta1.Msg/RedeemTokensForShares",
      type: GRPCCallType.unary
    )

    internal static let transferTokenizeShareRecord = GRPCMethodDescriptor(
      name: "TransferTokenizeShareRecord",
      path: "/cosmos.staking.v1beta1.Msg/TransferTokenizeShareRecord",
      type: GRPCCallType.unary
    )

    internal static let disableTokenizeShares = GRPCMethodDescriptor(
      name: "DisableTokenizeShares",
      path: "/cosmos.staking.v1beta1.Msg/DisableTokenizeShares",
      type: GRPCCallType.unary
    )

    internal static let enableTokenizeShares = GRPCMethodDescriptor(
      name: "EnableTokenizeShares",
      path: "/cosmos.staking.v1beta1.Msg/EnableTokenizeShares",
      type: GRPCCallType.unary
    )

    internal static let validatorBond = GRPCMethodDescriptor(
      name: "ValidatorBond",
      path: "/cosmos.staking.v1beta1.Msg/ValidatorBond",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the staking Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Staking_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Cosmos_Staking_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateValidator defines a method for creating a new validator.
  func createValidator(request: Cosmos_Staking_V1beta1_MsgCreateValidator, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>

  /// EditValidator defines a method for editing an existing validator.
  func editValidator(request: Cosmos_Staking_V1beta1_MsgEditValidator, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgEditValidatorResponse>

  /// Delegate defines a method for performing a delegation of coins
  /// from a delegator to a validator.
  func delegate(request: Cosmos_Staking_V1beta1_MsgDelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgDelegateResponse>

  /// BeginRedelegate defines a method for performing a redelegation
  /// of coins from a delegator and source validator to a destination validator.
  func beginRedelegate(request: Cosmos_Staking_V1beta1_MsgBeginRedelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>

  /// Undelegate defines a method for performing an undelegation from a
  /// delegate and a validator.
  func undelegate(request: Cosmos_Staking_V1beta1_MsgUndelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgUndelegateResponse>

  /// CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
  /// and delegate back to previous validator.
  ///
  /// Since: cosmos-sdk 0.46
  func cancelUnbondingDelegation(request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>

  /// UpdateParams defines an operation for updating the x/staking module
  /// parameters.
  /// Since: cosmos-sdk 0.47
  func updateParams(request: Cosmos_Staking_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>

  /// UnbondValidator defines a method for performing the status transition for a validator
  /// from bonded to unbonding
  /// This allows a validator to stop their services and jail themselves without
  /// experiencing a slash
  func unbondValidator(request: Cosmos_Staking_V1beta1_MsgUnbondValidator, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>

  /// TokenizeShares defines a method for tokenizing shares from a validator.
  func tokenizeShares(request: Cosmos_Staking_V1beta1_MsgTokenizeShares, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>

  /// RedeemTokensForShares defines a method for redeeming tokens from a validator for
  /// shares.
  func redeemTokensForShares(request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>

  /// TransferTokenizeShareRecord defines a method to transfer ownership of
  /// TokenizeShareRecord
  func transferTokenizeShareRecord(request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>

  /// DisableTokenizeShares defines a method to prevent the tokenization of an addresses stake
  func disableTokenizeShares(request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>

  /// EnableTokenizeShares defines a method to re-enable the tokenization of an addresseses stake
  /// after it has been disabled
  func enableTokenizeShares(request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>

  /// ValidatorBond defines a method for performing a validator self-bond
  func validatorBond(request: Cosmos_Staking_V1beta1_MsgValidatorBond, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_MsgValidatorBondResponse>
}

extension Cosmos_Staking_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Cosmos_Staking_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgCreateValidator>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>(),
        interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? [],
        userFunction: self.createValidator(request:context:)
      )

    case "EditValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgEditValidator>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgEditValidatorResponse>(),
        interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? [],
        userFunction: self.editValidator(request:context:)
      )

    case "Delegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgDelegate>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgDelegateResponse>(),
        interceptors: self.interceptors?.makeDelegateInterceptors() ?? [],
        userFunction: self.delegate(request:context:)
      )

    case "BeginRedelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgBeginRedelegate>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>(),
        interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? [],
        userFunction: self.beginRedelegate(request:context:)
      )

    case "Undelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgUndelegate>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgUndelegateResponse>(),
        interceptors: self.interceptors?.makeUndelegateInterceptors() ?? [],
        userFunction: self.undelegate(request:context:)
      )

    case "CancelUnbondingDelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>(),
        interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? [],
        userFunction: self.cancelUnbondingDelegation(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    case "UnbondValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgUnbondValidator>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>(),
        interceptors: self.interceptors?.makeUnbondValidatorInterceptors() ?? [],
        userFunction: self.unbondValidator(request:context:)
      )

    case "TokenizeShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgTokenizeShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>(),
        interceptors: self.interceptors?.makeTokenizeSharesInterceptors() ?? [],
        userFunction: self.tokenizeShares(request:context:)
      )

    case "RedeemTokensForShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>(),
        interceptors: self.interceptors?.makeRedeemTokensForSharesInterceptors() ?? [],
        userFunction: self.redeemTokensForShares(request:context:)
      )

    case "TransferTokenizeShareRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>(),
        interceptors: self.interceptors?.makeTransferTokenizeShareRecordInterceptors() ?? [],
        userFunction: self.transferTokenizeShareRecord(request:context:)
      )

    case "DisableTokenizeShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>(),
        interceptors: self.interceptors?.makeDisableTokenizeSharesInterceptors() ?? [],
        userFunction: self.disableTokenizeShares(request:context:)
      )

    case "EnableTokenizeShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>(),
        interceptors: self.interceptors?.makeEnableTokenizeSharesInterceptors() ?? [],
        userFunction: self.enableTokenizeShares(request:context:)
      )

    case "ValidatorBond":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgValidatorBond>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgValidatorBondResponse>(),
        interceptors: self.interceptors?.makeValidatorBondInterceptors() ?? [],
        userFunction: self.validatorBond(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the staking Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Staking_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Staking_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateValidator defines a method for creating a new validator.
  @Sendable func createValidator(
    request: Cosmos_Staking_V1beta1_MsgCreateValidator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgCreateValidatorResponse

  /// EditValidator defines a method for editing an existing validator.
  @Sendable func editValidator(
    request: Cosmos_Staking_V1beta1_MsgEditValidator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgEditValidatorResponse

  /// Delegate defines a method for performing a delegation of coins
  /// from a delegator to a validator.
  @Sendable func delegate(
    request: Cosmos_Staking_V1beta1_MsgDelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgDelegateResponse

  /// BeginRedelegate defines a method for performing a redelegation
  /// of coins from a delegator and source validator to a destination validator.
  @Sendable func beginRedelegate(
    request: Cosmos_Staking_V1beta1_MsgBeginRedelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse

  /// Undelegate defines a method for performing an undelegation from a
  /// delegate and a validator.
  @Sendable func undelegate(
    request: Cosmos_Staking_V1beta1_MsgUndelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgUndelegateResponse

  /// CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
  /// and delegate back to previous validator.
  ///
  /// Since: cosmos-sdk 0.46
  @Sendable func cancelUnbondingDelegation(
    request: Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse

  /// UpdateParams defines an operation for updating the x/staking module
  /// parameters.
  /// Since: cosmos-sdk 0.47
  @Sendable func updateParams(
    request: Cosmos_Staking_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgUpdateParamsResponse

  /// UnbondValidator defines a method for performing the status transition for a validator
  /// from bonded to unbonding
  /// This allows a validator to stop their services and jail themselves without
  /// experiencing a slash
  @Sendable func unbondValidator(
    request: Cosmos_Staking_V1beta1_MsgUnbondValidator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse

  /// TokenizeShares defines a method for tokenizing shares from a validator.
  @Sendable func tokenizeShares(
    request: Cosmos_Staking_V1beta1_MsgTokenizeShares,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse

  /// RedeemTokensForShares defines a method for redeeming tokens from a validator for
  /// shares.
  @Sendable func redeemTokensForShares(
    request: Cosmos_Staking_V1beta1_MsgRedeemTokensForShares,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse

  /// TransferTokenizeShareRecord defines a method to transfer ownership of
  /// TokenizeShareRecord
  @Sendable func transferTokenizeShareRecord(
    request: Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse

  /// DisableTokenizeShares defines a method to prevent the tokenization of an addresses stake
  @Sendable func disableTokenizeShares(
    request: Cosmos_Staking_V1beta1_MsgDisableTokenizeShares,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse

  /// EnableTokenizeShares defines a method to re-enable the tokenization of an addresseses stake
  /// after it has been disabled
  @Sendable func enableTokenizeShares(
    request: Cosmos_Staking_V1beta1_MsgEnableTokenizeShares,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse

  /// ValidatorBond defines a method for performing a validator self-bond
  @Sendable func validatorBond(
    request: Cosmos_Staking_V1beta1_MsgValidatorBond,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_MsgValidatorBondResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Staking_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Staking_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Staking_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateValidator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgCreateValidator>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>(),
        interceptors: self.interceptors?.makeCreateValidatorInterceptors() ?? [],
        wrapping: self.createValidator(request:context:)
      )

    case "EditValidator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgEditValidator>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgEditValidatorResponse>(),
        interceptors: self.interceptors?.makeEditValidatorInterceptors() ?? [],
        wrapping: self.editValidator(request:context:)
      )

    case "Delegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgDelegate>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgDelegateResponse>(),
        interceptors: self.interceptors?.makeDelegateInterceptors() ?? [],
        wrapping: self.delegate(request:context:)
      )

    case "BeginRedelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgBeginRedelegate>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>(),
        interceptors: self.interceptors?.makeBeginRedelegateInterceptors() ?? [],
        wrapping: self.beginRedelegate(request:context:)
      )

    case "Undelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgUndelegate>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgUndelegateResponse>(),
        interceptors: self.interceptors?.makeUndelegateInterceptors() ?? [],
        wrapping: self.undelegate(request:context:)
      )

    case "CancelUnbondingDelegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>(),
        interceptors: self.interceptors?.makeCancelUnbondingDelegationInterceptors() ?? [],
        wrapping: self.cancelUnbondingDelegation(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    case "UnbondValidator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgUnbondValidator>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>(),
        interceptors: self.interceptors?.makeUnbondValidatorInterceptors() ?? [],
        wrapping: self.unbondValidator(request:context:)
      )

    case "TokenizeShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgTokenizeShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>(),
        interceptors: self.interceptors?.makeTokenizeSharesInterceptors() ?? [],
        wrapping: self.tokenizeShares(request:context:)
      )

    case "RedeemTokensForShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>(),
        interceptors: self.interceptors?.makeRedeemTokensForSharesInterceptors() ?? [],
        wrapping: self.redeemTokensForShares(request:context:)
      )

    case "TransferTokenizeShareRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>(),
        interceptors: self.interceptors?.makeTransferTokenizeShareRecordInterceptors() ?? [],
        wrapping: self.transferTokenizeShareRecord(request:context:)
      )

    case "DisableTokenizeShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>(),
        interceptors: self.interceptors?.makeDisableTokenizeSharesInterceptors() ?? [],
        wrapping: self.disableTokenizeShares(request:context:)
      )

    case "EnableTokenizeShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>(),
        interceptors: self.interceptors?.makeEnableTokenizeSharesInterceptors() ?? [],
        wrapping: self.enableTokenizeShares(request:context:)
      )

    case "ValidatorBond":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_MsgValidatorBond>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_MsgValidatorBondResponse>(),
        interceptors: self.interceptors?.makeValidatorBondInterceptors() ?? [],
        wrapping: self.validatorBond(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Staking_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateValidatorInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgCreateValidator, Cosmos_Staking_V1beta1_MsgCreateValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'editValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditValidatorInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgEditValidator, Cosmos_Staking_V1beta1_MsgEditValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'delegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegateInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgDelegate, Cosmos_Staking_V1beta1_MsgDelegateResponse>]

  /// - Returns: Interceptors to use when handling 'beginRedelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBeginRedelegateInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgBeginRedelegate, Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse>]

  /// - Returns: Interceptors to use when handling 'undelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUndelegateInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgUndelegate, Cosmos_Staking_V1beta1_MsgUndelegateResponse>]

  /// - Returns: Interceptors to use when handling 'cancelUnbondingDelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelUnbondingDelegationInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegation, Cosmos_Staking_V1beta1_MsgCancelUnbondingDelegationResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgUpdateParams, Cosmos_Staking_V1beta1_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when handling 'unbondValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnbondValidatorInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgUnbondValidator, Cosmos_Staking_V1beta1_MsgUnbondValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'tokenizeShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTokenizeSharesInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgTokenizeShares, Cosmos_Staking_V1beta1_MsgTokenizeSharesResponse>]

  /// - Returns: Interceptors to use when handling 'redeemTokensForShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedeemTokensForSharesInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgRedeemTokensForShares, Cosmos_Staking_V1beta1_MsgRedeemTokensForSharesResponse>]

  /// - Returns: Interceptors to use when handling 'transferTokenizeShareRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferTokenizeShareRecordInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecord, Cosmos_Staking_V1beta1_MsgTransferTokenizeShareRecordResponse>]

  /// - Returns: Interceptors to use when handling 'disableTokenizeShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisableTokenizeSharesInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgDisableTokenizeShares, Cosmos_Staking_V1beta1_MsgDisableTokenizeSharesResponse>]

  /// - Returns: Interceptors to use when handling 'enableTokenizeShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableTokenizeSharesInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgEnableTokenizeShares, Cosmos_Staking_V1beta1_MsgEnableTokenizeSharesResponse>]

  /// - Returns: Interceptors to use when handling 'validatorBond'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorBondInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_MsgValidatorBond, Cosmos_Staking_V1beta1_MsgValidatorBondResponse>]
}

internal enum Cosmos_Staking_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.staking.v1beta1.Msg",
    methods: [
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.createValidator,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.editValidator,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.delegate,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.beginRedelegate,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.undelegate,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.cancelUnbondingDelegation,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.updateParams,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.unbondValidator,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.tokenizeShares,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.redeemTokensForShares,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.transferTokenizeShareRecord,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.disableTokenizeShares,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.enableTokenizeShares,
      Cosmos_Staking_V1beta1_MsgServerMetadata.Methods.validatorBond,
    ]
  )

  internal enum Methods {
    internal static let createValidator = GRPCMethodDescriptor(
      name: "CreateValidator",
      path: "/cosmos.staking.v1beta1.Msg/CreateValidator",
      type: GRPCCallType.unary
    )

    internal static let editValidator = GRPCMethodDescriptor(
      name: "EditValidator",
      path: "/cosmos.staking.v1beta1.Msg/EditValidator",
      type: GRPCCallType.unary
    )

    internal static let delegate = GRPCMethodDescriptor(
      name: "Delegate",
      path: "/cosmos.staking.v1beta1.Msg/Delegate",
      type: GRPCCallType.unary
    )

    internal static let beginRedelegate = GRPCMethodDescriptor(
      name: "BeginRedelegate",
      path: "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
      type: GRPCCallType.unary
    )

    internal static let undelegate = GRPCMethodDescriptor(
      name: "Undelegate",
      path: "/cosmos.staking.v1beta1.Msg/Undelegate",
      type: GRPCCallType.unary
    )

    internal static let cancelUnbondingDelegation = GRPCMethodDescriptor(
      name: "CancelUnbondingDelegation",
      path: "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/cosmos.staking.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let unbondValidator = GRPCMethodDescriptor(
      name: "UnbondValidator",
      path: "/cosmos.staking.v1beta1.Msg/UnbondValidator",
      type: GRPCCallType.unary
    )

    internal static let tokenizeShares = GRPCMethodDescriptor(
      name: "TokenizeShares",
      path: "/cosmos.staking.v1beta1.Msg/TokenizeShares",
      type: GRPCCallType.unary
    )

    internal static let redeemTokensForShares = GRPCMethodDescriptor(
      name: "RedeemTokensForShares",
      path: "/cosmos.staking.v1beta1.Msg/RedeemTokensForShares",
      type: GRPCCallType.unary
    )

    internal static let transferTokenizeShareRecord = GRPCMethodDescriptor(
      name: "TransferTokenizeShareRecord",
      path: "/cosmos.staking.v1beta1.Msg/TransferTokenizeShareRecord",
      type: GRPCCallType.unary
    )

    internal static let disableTokenizeShares = GRPCMethodDescriptor(
      name: "DisableTokenizeShares",
      path: "/cosmos.staking.v1beta1.Msg/DisableTokenizeShares",
      type: GRPCCallType.unary
    )

    internal static let enableTokenizeShares = GRPCMethodDescriptor(
      name: "EnableTokenizeShares",
      path: "/cosmos.staking.v1beta1.Msg/EnableTokenizeShares",
      type: GRPCCallType.unary
    )

    internal static let validatorBond = GRPCMethodDescriptor(
      name: "ValidatorBond",
      path: "/cosmos.staking.v1beta1.Msg/ValidatorBond",
      type: GRPCCallType.unary
    )
  }
}
