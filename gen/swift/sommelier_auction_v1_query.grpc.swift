//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sommelier/auction/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Auction_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Auction_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? { get }

  func queryParams(
    _ request: Auction_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryParamsRequest, Auction_V1_QueryParamsResponse>

  func queryActiveAuction(
    _ request: Auction_V1_QueryActiveAuctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryActiveAuctionRequest, Auction_V1_QueryActiveAuctionResponse>

  func queryEndedAuction(
    _ request: Auction_V1_QueryEndedAuctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryEndedAuctionRequest, Auction_V1_QueryEndedAuctionResponse>

  func queryActiveAuctions(
    _ request: Auction_V1_QueryActiveAuctionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryActiveAuctionsRequest, Auction_V1_QueryActiveAuctionsResponse>

  func queryEndedAuctions(
    _ request: Auction_V1_QueryEndedAuctionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryEndedAuctionsRequest, Auction_V1_QueryEndedAuctionsResponse>

  func queryBid(
    _ request: Auction_V1_QueryBidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryBidRequest, Auction_V1_QueryBidResponse>

  func queryBidsByAuction(
    _ request: Auction_V1_QueryBidsByAuctionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auction_V1_QueryBidsByAuctionRequest, Auction_V1_QueryBidsByAuctionResponse>
}

extension Auction_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "auction.v1.Query"
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Auction_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryParamsRequest, Auction_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  /// Unary call to QueryActiveAuction
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryActiveAuction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryActiveAuction(
    _ request: Auction_V1_QueryActiveAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryActiveAuctionRequest, Auction_V1_QueryActiveAuctionResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryActiveAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActiveAuctionInterceptors() ?? []
    )
  }

  /// Unary call to QueryEndedAuction
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryEndedAuction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryEndedAuction(
    _ request: Auction_V1_QueryEndedAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryEndedAuctionRequest, Auction_V1_QueryEndedAuctionResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryEndedAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEndedAuctionInterceptors() ?? []
    )
  }

  /// Unary call to QueryActiveAuctions
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryActiveAuctions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryActiveAuctions(
    _ request: Auction_V1_QueryActiveAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryActiveAuctionsRequest, Auction_V1_QueryActiveAuctionsResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryActiveAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActiveAuctionsInterceptors() ?? []
    )
  }

  /// Unary call to QueryEndedAuctions
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryEndedAuctions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryEndedAuctions(
    _ request: Auction_V1_QueryEndedAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryEndedAuctionsRequest, Auction_V1_QueryEndedAuctionsResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryEndedAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEndedAuctionsInterceptors() ?? []
    )
  }

  /// Unary call to QueryBid
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryBid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryBid(
    _ request: Auction_V1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryBidRequest, Auction_V1_QueryBidResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryBidInterceptors() ?? []
    )
  }

  /// Unary call to QueryBidsByAuction
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryBidsByAuction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryBidsByAuction(
    _ request: Auction_V1_QueryBidsByAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auction_V1_QueryBidsByAuctionRequest, Auction_V1_QueryBidsByAuctionResponse> {
    return self.makeUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryBidsByAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryBidsByAuctionInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Auction_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Auction_V1_QueryNIOClient")
internal final class Auction_V1_QueryClient: Auction_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the auction.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Auction_V1_QueryNIOClient: Auction_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the auction.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Auction_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeQueryParamsCall(
    _ request: Auction_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryParamsRequest, Auction_V1_QueryParamsResponse>

  func makeQueryActiveAuctionCall(
    _ request: Auction_V1_QueryActiveAuctionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryActiveAuctionRequest, Auction_V1_QueryActiveAuctionResponse>

  func makeQueryEndedAuctionCall(
    _ request: Auction_V1_QueryEndedAuctionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryEndedAuctionRequest, Auction_V1_QueryEndedAuctionResponse>

  func makeQueryActiveAuctionsCall(
    _ request: Auction_V1_QueryActiveAuctionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryActiveAuctionsRequest, Auction_V1_QueryActiveAuctionsResponse>

  func makeQueryEndedAuctionsCall(
    _ request: Auction_V1_QueryEndedAuctionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryEndedAuctionsRequest, Auction_V1_QueryEndedAuctionsResponse>

  func makeQueryBidCall(
    _ request: Auction_V1_QueryBidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryBidRequest, Auction_V1_QueryBidResponse>

  func makeQueryBidsByAuctionCall(
    _ request: Auction_V1_QueryBidsByAuctionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryBidsByAuctionRequest, Auction_V1_QueryBidsByAuctionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auction_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Auction_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQueryParamsCall(
    _ request: Auction_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryParamsRequest, Auction_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  internal func makeQueryActiveAuctionCall(
    _ request: Auction_V1_QueryActiveAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryActiveAuctionRequest, Auction_V1_QueryActiveAuctionResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryActiveAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActiveAuctionInterceptors() ?? []
    )
  }

  internal func makeQueryEndedAuctionCall(
    _ request: Auction_V1_QueryEndedAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryEndedAuctionRequest, Auction_V1_QueryEndedAuctionResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryEndedAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEndedAuctionInterceptors() ?? []
    )
  }

  internal func makeQueryActiveAuctionsCall(
    _ request: Auction_V1_QueryActiveAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryActiveAuctionsRequest, Auction_V1_QueryActiveAuctionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryActiveAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActiveAuctionsInterceptors() ?? []
    )
  }

  internal func makeQueryEndedAuctionsCall(
    _ request: Auction_V1_QueryEndedAuctionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryEndedAuctionsRequest, Auction_V1_QueryEndedAuctionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryEndedAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEndedAuctionsInterceptors() ?? []
    )
  }

  internal func makeQueryBidCall(
    _ request: Auction_V1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryBidRequest, Auction_V1_QueryBidResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryBidInterceptors() ?? []
    )
  }

  internal func makeQueryBidsByAuctionCall(
    _ request: Auction_V1_QueryBidsByAuctionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auction_V1_QueryBidsByAuctionRequest, Auction_V1_QueryBidsByAuctionResponse> {
    return self.makeAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryBidsByAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryBidsByAuctionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auction_V1_QueryAsyncClientProtocol {
  internal func queryParams(
    _ request: Auction_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  internal func queryActiveAuction(
    _ request: Auction_V1_QueryActiveAuctionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryActiveAuctionResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryActiveAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActiveAuctionInterceptors() ?? []
    )
  }

  internal func queryEndedAuction(
    _ request: Auction_V1_QueryEndedAuctionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryEndedAuctionResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryEndedAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEndedAuctionInterceptors() ?? []
    )
  }

  internal func queryActiveAuctions(
    _ request: Auction_V1_QueryActiveAuctionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryActiveAuctionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryActiveAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryActiveAuctionsInterceptors() ?? []
    )
  }

  internal func queryEndedAuctions(
    _ request: Auction_V1_QueryEndedAuctionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryEndedAuctionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryEndedAuctions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEndedAuctionsInterceptors() ?? []
    )
  }

  internal func queryBid(
    _ request: Auction_V1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryBidResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryBidInterceptors() ?? []
    )
  }

  internal func queryBidsByAuction(
    _ request: Auction_V1_QueryBidsByAuctionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auction_V1_QueryBidsByAuctionResponse {
    return try await self.performAsyncUnaryCall(
      path: Auction_V1_QueryClientMetadata.Methods.queryBidsByAuction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryBidsByAuctionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Auction_V1_QueryAsyncClient: Auction_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auction_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Auction_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Auction_V1_QueryParamsRequest, Auction_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryActiveAuction'.
  func makeQueryActiveAuctionInterceptors() -> [ClientInterceptor<Auction_V1_QueryActiveAuctionRequest, Auction_V1_QueryActiveAuctionResponse>]

  /// - Returns: Interceptors to use when invoking 'queryEndedAuction'.
  func makeQueryEndedAuctionInterceptors() -> [ClientInterceptor<Auction_V1_QueryEndedAuctionRequest, Auction_V1_QueryEndedAuctionResponse>]

  /// - Returns: Interceptors to use when invoking 'queryActiveAuctions'.
  func makeQueryActiveAuctionsInterceptors() -> [ClientInterceptor<Auction_V1_QueryActiveAuctionsRequest, Auction_V1_QueryActiveAuctionsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryEndedAuctions'.
  func makeQueryEndedAuctionsInterceptors() -> [ClientInterceptor<Auction_V1_QueryEndedAuctionsRequest, Auction_V1_QueryEndedAuctionsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryBid'.
  func makeQueryBidInterceptors() -> [ClientInterceptor<Auction_V1_QueryBidRequest, Auction_V1_QueryBidResponse>]

  /// - Returns: Interceptors to use when invoking 'queryBidsByAuction'.
  func makeQueryBidsByAuctionInterceptors() -> [ClientInterceptor<Auction_V1_QueryBidsByAuctionRequest, Auction_V1_QueryBidsByAuctionResponse>]
}

internal enum Auction_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "auction.v1.Query",
    methods: [
      Auction_V1_QueryClientMetadata.Methods.queryParams,
      Auction_V1_QueryClientMetadata.Methods.queryActiveAuction,
      Auction_V1_QueryClientMetadata.Methods.queryEndedAuction,
      Auction_V1_QueryClientMetadata.Methods.queryActiveAuctions,
      Auction_V1_QueryClientMetadata.Methods.queryEndedAuctions,
      Auction_V1_QueryClientMetadata.Methods.queryBid,
      Auction_V1_QueryClientMetadata.Methods.queryBidsByAuction,
    ]
  )

  internal enum Methods {
    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/auction.v1.Query/QueryParams",
      type: GRPCCallType.unary
    )

    internal static let queryActiveAuction = GRPCMethodDescriptor(
      name: "QueryActiveAuction",
      path: "/auction.v1.Query/QueryActiveAuction",
      type: GRPCCallType.unary
    )

    internal static let queryEndedAuction = GRPCMethodDescriptor(
      name: "QueryEndedAuction",
      path: "/auction.v1.Query/QueryEndedAuction",
      type: GRPCCallType.unary
    )

    internal static let queryActiveAuctions = GRPCMethodDescriptor(
      name: "QueryActiveAuctions",
      path: "/auction.v1.Query/QueryActiveAuctions",
      type: GRPCCallType.unary
    )

    internal static let queryEndedAuctions = GRPCMethodDescriptor(
      name: "QueryEndedAuctions",
      path: "/auction.v1.Query/QueryEndedAuctions",
      type: GRPCCallType.unary
    )

    internal static let queryBid = GRPCMethodDescriptor(
      name: "QueryBid",
      path: "/auction.v1.Query/QueryBid",
      type: GRPCCallType.unary
    )

    internal static let queryBidsByAuction = GRPCMethodDescriptor(
      name: "QueryBidsByAuction",
      path: "/auction.v1.Query/QueryBidsByAuction",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Auction_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Auction_V1_QueryServerInterceptorFactoryProtocol? { get }

  func queryParams(request: Auction_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryParamsResponse>

  func queryActiveAuction(request: Auction_V1_QueryActiveAuctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryActiveAuctionResponse>

  func queryEndedAuction(request: Auction_V1_QueryEndedAuctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryEndedAuctionResponse>

  func queryActiveAuctions(request: Auction_V1_QueryActiveAuctionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryActiveAuctionsResponse>

  func queryEndedAuctions(request: Auction_V1_QueryEndedAuctionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryEndedAuctionsResponse>

  func queryBid(request: Auction_V1_QueryBidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryBidResponse>

  func queryBidsByAuction(request: Auction_V1_QueryBidsByAuctionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auction_V1_QueryBidsByAuctionResponse>
}

extension Auction_V1_QueryProvider {
  internal var serviceName: Substring {
    return Auction_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    case "QueryActiveAuction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryActiveAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryActiveAuctionResponse>(),
        interceptors: self.interceptors?.makeQueryActiveAuctionInterceptors() ?? [],
        userFunction: self.queryActiveAuction(request:context:)
      )

    case "QueryEndedAuction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryEndedAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryEndedAuctionResponse>(),
        interceptors: self.interceptors?.makeQueryEndedAuctionInterceptors() ?? [],
        userFunction: self.queryEndedAuction(request:context:)
      )

    case "QueryActiveAuctions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryActiveAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryActiveAuctionsResponse>(),
        interceptors: self.interceptors?.makeQueryActiveAuctionsInterceptors() ?? [],
        userFunction: self.queryActiveAuctions(request:context:)
      )

    case "QueryEndedAuctions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryEndedAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryEndedAuctionsResponse>(),
        interceptors: self.interceptors?.makeQueryEndedAuctionsInterceptors() ?? [],
        userFunction: self.queryEndedAuctions(request:context:)
      )

    case "QueryBid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryBidResponse>(),
        interceptors: self.interceptors?.makeQueryBidInterceptors() ?? [],
        userFunction: self.queryBid(request:context:)
      )

    case "QueryBidsByAuction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryBidsByAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryBidsByAuctionResponse>(),
        interceptors: self.interceptors?.makeQueryBidsByAuctionInterceptors() ?? [],
        userFunction: self.queryBidsByAuction(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Auction_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auction_V1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func queryParams(
    request: Auction_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryParamsResponse

  @Sendable func queryActiveAuction(
    request: Auction_V1_QueryActiveAuctionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryActiveAuctionResponse

  @Sendable func queryEndedAuction(
    request: Auction_V1_QueryEndedAuctionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryEndedAuctionResponse

  @Sendable func queryActiveAuctions(
    request: Auction_V1_QueryActiveAuctionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryActiveAuctionsResponse

  @Sendable func queryEndedAuctions(
    request: Auction_V1_QueryEndedAuctionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryEndedAuctionsResponse

  @Sendable func queryBid(
    request: Auction_V1_QueryBidRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryBidResponse

  @Sendable func queryBidsByAuction(
    request: Auction_V1_QueryBidsByAuctionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auction_V1_QueryBidsByAuctionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auction_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Auction_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Auction_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Auction_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        wrapping: self.queryParams(request:context:)
      )

    case "QueryActiveAuction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryActiveAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryActiveAuctionResponse>(),
        interceptors: self.interceptors?.makeQueryActiveAuctionInterceptors() ?? [],
        wrapping: self.queryActiveAuction(request:context:)
      )

    case "QueryEndedAuction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryEndedAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryEndedAuctionResponse>(),
        interceptors: self.interceptors?.makeQueryEndedAuctionInterceptors() ?? [],
        wrapping: self.queryEndedAuction(request:context:)
      )

    case "QueryActiveAuctions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryActiveAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryActiveAuctionsResponse>(),
        interceptors: self.interceptors?.makeQueryActiveAuctionsInterceptors() ?? [],
        wrapping: self.queryActiveAuctions(request:context:)
      )

    case "QueryEndedAuctions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryEndedAuctionsRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryEndedAuctionsResponse>(),
        interceptors: self.interceptors?.makeQueryEndedAuctionsInterceptors() ?? [],
        wrapping: self.queryEndedAuctions(request:context:)
      )

    case "QueryBid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryBidResponse>(),
        interceptors: self.interceptors?.makeQueryBidInterceptors() ?? [],
        wrapping: self.queryBid(request:context:)
      )

    case "QueryBidsByAuction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auction_V1_QueryBidsByAuctionRequest>(),
        responseSerializer: ProtobufSerializer<Auction_V1_QueryBidsByAuctionResponse>(),
        interceptors: self.interceptors?.makeQueryBidsByAuctionInterceptors() ?? [],
        wrapping: self.queryBidsByAuction(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Auction_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Auction_V1_QueryParamsRequest, Auction_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryActiveAuction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryActiveAuctionInterceptors() -> [ServerInterceptor<Auction_V1_QueryActiveAuctionRequest, Auction_V1_QueryActiveAuctionResponse>]

  /// - Returns: Interceptors to use when handling 'queryEndedAuction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryEndedAuctionInterceptors() -> [ServerInterceptor<Auction_V1_QueryEndedAuctionRequest, Auction_V1_QueryEndedAuctionResponse>]

  /// - Returns: Interceptors to use when handling 'queryActiveAuctions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryActiveAuctionsInterceptors() -> [ServerInterceptor<Auction_V1_QueryActiveAuctionsRequest, Auction_V1_QueryActiveAuctionsResponse>]

  /// - Returns: Interceptors to use when handling 'queryEndedAuctions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryEndedAuctionsInterceptors() -> [ServerInterceptor<Auction_V1_QueryEndedAuctionsRequest, Auction_V1_QueryEndedAuctionsResponse>]

  /// - Returns: Interceptors to use when handling 'queryBid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryBidInterceptors() -> [ServerInterceptor<Auction_V1_QueryBidRequest, Auction_V1_QueryBidResponse>]

  /// - Returns: Interceptors to use when handling 'queryBidsByAuction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryBidsByAuctionInterceptors() -> [ServerInterceptor<Auction_V1_QueryBidsByAuctionRequest, Auction_V1_QueryBidsByAuctionResponse>]
}

internal enum Auction_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "auction.v1.Query",
    methods: [
      Auction_V1_QueryServerMetadata.Methods.queryParams,
      Auction_V1_QueryServerMetadata.Methods.queryActiveAuction,
      Auction_V1_QueryServerMetadata.Methods.queryEndedAuction,
      Auction_V1_QueryServerMetadata.Methods.queryActiveAuctions,
      Auction_V1_QueryServerMetadata.Methods.queryEndedAuctions,
      Auction_V1_QueryServerMetadata.Methods.queryBid,
      Auction_V1_QueryServerMetadata.Methods.queryBidsByAuction,
    ]
  )

  internal enum Methods {
    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/auction.v1.Query/QueryParams",
      type: GRPCCallType.unary
    )

    internal static let queryActiveAuction = GRPCMethodDescriptor(
      name: "QueryActiveAuction",
      path: "/auction.v1.Query/QueryActiveAuction",
      type: GRPCCallType.unary
    )

    internal static let queryEndedAuction = GRPCMethodDescriptor(
      name: "QueryEndedAuction",
      path: "/auction.v1.Query/QueryEndedAuction",
      type: GRPCCallType.unary
    )

    internal static let queryActiveAuctions = GRPCMethodDescriptor(
      name: "QueryActiveAuctions",
      path: "/auction.v1.Query/QueryActiveAuctions",
      type: GRPCCallType.unary
    )

    internal static let queryEndedAuctions = GRPCMethodDescriptor(
      name: "QueryEndedAuctions",
      path: "/auction.v1.Query/QueryEndedAuctions",
      type: GRPCCallType.unary
    )

    internal static let queryBid = GRPCMethodDescriptor(
      name: "QueryBid",
      path: "/auction.v1.Query/QueryBid",
      type: GRPCCallType.unary
    )

    internal static let queryBidsByAuction = GRPCMethodDescriptor(
      name: "QueryBidsByAuction",
      path: "/auction.v1.Query/QueryBidsByAuction",
      type: GRPCCallType.unary
    )
  }
}
