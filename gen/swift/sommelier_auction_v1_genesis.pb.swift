// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sommelier/auction/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Auction_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Auction_V1_Params {
    get {return _params ?? Auction_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var auctions: [Auction_V1_Auction] = []

  var bids: [Auction_V1_Bid] = []

  var tokenPrices: [Auction_V1_TokenPrice] = []

  var lastAuctionID: UInt32 = 0

  var lastBidID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Auction_V1_Params? = nil
}

struct Auction_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var priceMaxBlockAge: UInt64 = 0

  var minimumBidInUsomm: UInt64 = 0

  var auctionMaxBlockAge: UInt64 = 0

  var auctionPriceDecreaseAccelerationRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Auction_V1_GenesisState: @unchecked Sendable {}
extension Auction_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "auction.v1"

extension Auction_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "auctions"),
    3: .same(proto: "bids"),
    4: .standard(proto: "token_prices"),
    5: .standard(proto: "last_auction_id"),
    6: .standard(proto: "last_bid_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.auctions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.bids) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.tokenPrices) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.lastAuctionID) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.lastBidID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.auctions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.auctions, fieldNumber: 2)
    }
    if !self.bids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bids, fieldNumber: 3)
    }
    if !self.tokenPrices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenPrices, fieldNumber: 4)
    }
    if self.lastAuctionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.lastAuctionID, fieldNumber: 5)
    }
    if self.lastBidID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastBidID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Auction_V1_GenesisState, rhs: Auction_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.auctions != rhs.auctions {return false}
    if lhs.bids != rhs.bids {return false}
    if lhs.tokenPrices != rhs.tokenPrices {return false}
    if lhs.lastAuctionID != rhs.lastAuctionID {return false}
    if lhs.lastBidID != rhs.lastBidID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auction_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "price_max_block_age"),
    2: .standard(proto: "minimum_bid_in_usomm"),
    3: .standard(proto: "auction_max_block_age"),
    4: .standard(proto: "auction_price_decrease_acceleration_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.priceMaxBlockAge) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.minimumBidInUsomm) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.auctionMaxBlockAge) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.auctionPriceDecreaseAccelerationRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.priceMaxBlockAge != 0 {
      try visitor.visitSingularUInt64Field(value: self.priceMaxBlockAge, fieldNumber: 1)
    }
    if self.minimumBidInUsomm != 0 {
      try visitor.visitSingularUInt64Field(value: self.minimumBidInUsomm, fieldNumber: 2)
    }
    if self.auctionMaxBlockAge != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionMaxBlockAge, fieldNumber: 3)
    }
    if !self.auctionPriceDecreaseAccelerationRate.isEmpty {
      try visitor.visitSingularStringField(value: self.auctionPriceDecreaseAccelerationRate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Auction_V1_Params, rhs: Auction_V1_Params) -> Bool {
    if lhs.priceMaxBlockAge != rhs.priceMaxBlockAge {return false}
    if lhs.minimumBidInUsomm != rhs.minimumBidInUsomm {return false}
    if lhs.auctionMaxBlockAge != rhs.auctionMaxBlockAge {return false}
    if lhs.auctionPriceDecreaseAccelerationRate != rhs.auctionPriceDecreaseAccelerationRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
