// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: zrchain/identity/keyring.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// defines the keyring format
struct Zrchain_Identity_Keyring {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var creator: String = String()

  var description_p: String = String()

  var admins: [String] = []

  var parties: [String] = []

  /// The MPC threshold, i.e. the number of parties required to submit signed txs
  /// in order for a request to be fulfilled
  var partyThreshold: UInt32 = 0

  var keyReqFee: UInt64 = 0

  var sigReqFee: UInt64 = 0

  var isActive: Bool = false

  var delegateFees: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Zrchain_Identity_Keyring: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "zrchain.identity"

extension Zrchain_Identity_Keyring: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Keyring"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "creator"),
    3: .same(proto: "description"),
    4: .same(proto: "admins"),
    5: .same(proto: "parties"),
    6: .standard(proto: "party_threshold"),
    7: .standard(proto: "key_req_fee"),
    8: .standard(proto: "sig_req_fee"),
    9: .standard(proto: "is_active"),
    10: .standard(proto: "delegate_fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.admins) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.parties) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.partyThreshold) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.keyReqFee) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.sigReqFee) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isActive) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.delegateFees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.admins.isEmpty {
      try visitor.visitRepeatedStringField(value: self.admins, fieldNumber: 4)
    }
    if !self.parties.isEmpty {
      try visitor.visitRepeatedStringField(value: self.parties, fieldNumber: 5)
    }
    if self.partyThreshold != 0 {
      try visitor.visitSingularUInt32Field(value: self.partyThreshold, fieldNumber: 6)
    }
    if self.keyReqFee != 0 {
      try visitor.visitSingularUInt64Field(value: self.keyReqFee, fieldNumber: 7)
    }
    if self.sigReqFee != 0 {
      try visitor.visitSingularUInt64Field(value: self.sigReqFee, fieldNumber: 8)
    }
    if self.isActive != false {
      try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 9)
    }
    if self.delegateFees != false {
      try visitor.visitSingularBoolField(value: self.delegateFees, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Zrchain_Identity_Keyring, rhs: Zrchain_Identity_Keyring) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.admins != rhs.admins {return false}
    if lhs.parties != rhs.parties {return false}
    if lhs.partyThreshold != rhs.partyThreshold {return false}
    if lhs.keyReqFee != rhs.keyReqFee {return false}
    if lhs.sigReqFee != rhs.sigReqFee {return false}
    if lhs.isActive != rhs.isActive {return false}
    if lhs.delegateFees != rhs.delegateFees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
