//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: quicksilver/interchainstaking/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Quicksilver_Interchainstaking_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Quicksilver_Interchainstaking_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? { get }

  func zones(
    _ request: Quicksilver_Interchainstaking_V1_QueryZonesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryZonesRequest, Quicksilver_Interchainstaking_V1_QueryZonesResponse>

  func zone(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneRequest, Quicksilver_Interchainstaking_V1_QueryZoneResponse>

  func zoneValidators(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>

  func depositAccount(
    _ request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>

  func delegatorIntent(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>

  func delegations(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>

  func receipts(
    _ request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>

  func zoneWithdrawalRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>

  func withdrawalRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>

  func unbondingRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>

  func redelegationRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>

  func mappedAccounts(
    _ request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>
}

extension Quicksilver_Interchainstaking_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "quicksilver.interchainstaking.v1.Query"
  }

  /// Zones provides meta data on connected zones.
  ///
  /// - Parameters:
  ///   - request: Request to send to Zones.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func zones(
    _ request: Quicksilver_Interchainstaking_V1_QueryZonesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryZonesRequest, Quicksilver_Interchainstaking_V1_QueryZonesResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zones.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZonesInterceptors() ?? []
    )
  }

  /// Zone provides meta data on a specific zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to Zone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func zone(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneRequest, Quicksilver_Interchainstaking_V1_QueryZoneResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneInterceptors() ?? []
    )
  }

  /// Unary call to ZoneValidators
  ///
  /// - Parameters:
  ///   - request: Request to send to ZoneValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func zoneValidators(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneValidatorsInterceptors() ?? []
    )
  }

  /// DepositAccount provides data on the deposit address for a connected zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositAccount(
    _ request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.depositAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositAccountInterceptors() ?? []
    )
  }

  /// DelegatorIntent provides data on the intent of the delegator for the given
  /// zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorIntent(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegatorIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorIntentInterceptors() ?? []
    )
  }

  /// Delegations provides data on the delegations for the given zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to Delegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegations(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, Quicksilver_Interchainstaking_V1_QueryDelegationsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationsInterceptors() ?? []
    )
  }

  /// Delegations provides data on the delegations for the given zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to Receipts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func receipts(
    _ request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, Quicksilver_Interchainstaking_V1_QueryReceiptsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.receipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReceiptsInterceptors() ?? []
    )
  }

  /// WithdrawalRecords provides data on the active withdrawals.
  ///
  /// - Parameters:
  ///   - request: Request to send to ZoneWithdrawalRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func zoneWithdrawalRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneWithdrawalRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneWithdrawalRecordsInterceptors() ?? []
    )
  }

  /// WithdrawalRecords provides data on the active withdrawals.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawalRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawalRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.withdrawalRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawalRecordsInterceptors() ?? []
    )
  }

  /// UnbondingRecords provides data on the active unbondings.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbondingRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unbondingRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.unbondingRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingRecordsInterceptors() ?? []
    )
  }

  /// RedelegationRecords provides data on the active unbondings.
  ///
  /// - Parameters:
  ///   - request: Request to send to RedelegationRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redelegationRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.redelegationRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationRecordsInterceptors() ?? []
    )
  }

  /// MappedAccounts provides data on the mapped accounts for a given user over different host chains.
  ///
  /// - Parameters:
  ///   - request: Request to send to MappedAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mappedAccounts(
    _ request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse> {
    return self.makeUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.mappedAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMappedAccountsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Quicksilver_Interchainstaking_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Quicksilver_Interchainstaking_V1_QueryNIOClient")
internal final class Quicksilver_Interchainstaking_V1_QueryClient: Quicksilver_Interchainstaking_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the quicksilver.interchainstaking.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Quicksilver_Interchainstaking_V1_QueryNIOClient: Quicksilver_Interchainstaking_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the quicksilver.interchainstaking.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Quicksilver_Interchainstaking_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeZonesCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryZonesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryZonesRequest, Quicksilver_Interchainstaking_V1_QueryZonesResponse>

  func makeZoneCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneRequest, Quicksilver_Interchainstaking_V1_QueryZoneResponse>

  func makeZoneValidatorsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>

  func makeDepositAccountCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>

  func makeDelegatorIntentCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>

  func makeDelegationsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>

  func makeReceiptsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>

  func makeZoneWithdrawalRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>

  func makeWithdrawalRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>

  func makeUnbondingRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>

  func makeRedelegationRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>

  func makeMappedAccountsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quicksilver_Interchainstaking_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Quicksilver_Interchainstaking_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeZonesCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryZonesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryZonesRequest, Quicksilver_Interchainstaking_V1_QueryZonesResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zones.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZonesInterceptors() ?? []
    )
  }

  internal func makeZoneCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneRequest, Quicksilver_Interchainstaking_V1_QueryZoneResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneInterceptors() ?? []
    )
  }

  internal func makeZoneValidatorsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneValidatorsInterceptors() ?? []
    )
  }

  internal func makeDepositAccountCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.depositAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositAccountInterceptors() ?? []
    )
  }

  internal func makeDelegatorIntentCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegatorIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorIntentInterceptors() ?? []
    )
  }

  internal func makeDelegationsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, Quicksilver_Interchainstaking_V1_QueryDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationsInterceptors() ?? []
    )
  }

  internal func makeReceiptsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, Quicksilver_Interchainstaking_V1_QueryReceiptsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.receipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReceiptsInterceptors() ?? []
    )
  }

  internal func makeZoneWithdrawalRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneWithdrawalRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneWithdrawalRecordsInterceptors() ?? []
    )
  }

  internal func makeWithdrawalRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.withdrawalRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawalRecordsInterceptors() ?? []
    )
  }

  internal func makeUnbondingRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.unbondingRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingRecordsInterceptors() ?? []
    )
  }

  internal func makeRedelegationRecordsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.redelegationRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationRecordsInterceptors() ?? []
    )
  }

  internal func makeMappedAccountsCall(
    _ request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.mappedAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMappedAccountsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quicksilver_Interchainstaking_V1_QueryAsyncClientProtocol {
  internal func zones(
    _ request: Quicksilver_Interchainstaking_V1_QueryZonesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryZonesResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zones.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZonesInterceptors() ?? []
    )
  }

  internal func zone(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryZoneResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneInterceptors() ?? []
    )
  }

  internal func zoneValidators(
    _ request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneValidatorsInterceptors() ?? []
    )
  }

  internal func depositAccount(
    _ request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.depositAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositAccountInterceptors() ?? []
    )
  }

  internal func delegatorIntent(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegatorIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorIntentInterceptors() ?? []
    )
  }

  internal func delegations(
    _ request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationsInterceptors() ?? []
    )
  }

  internal func receipts(
    _ request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryReceiptsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.receipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReceiptsInterceptors() ?? []
    )
  }

  internal func zoneWithdrawalRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneWithdrawalRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZoneWithdrawalRecordsInterceptors() ?? []
    )
  }

  internal func withdrawalRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.withdrawalRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawalRecordsInterceptors() ?? []
    )
  }

  internal func unbondingRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.unbondingRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingRecordsInterceptors() ?? []
    )
  }

  internal func redelegationRecords(
    _ request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.redelegationRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationRecordsInterceptors() ?? []
    )
  }

  internal func mappedAccounts(
    _ request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.mappedAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMappedAccountsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Quicksilver_Interchainstaking_V1_QueryAsyncClient: Quicksilver_Interchainstaking_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Quicksilver_Interchainstaking_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'zones'.
  func makeZonesInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryZonesRequest, Quicksilver_Interchainstaking_V1_QueryZonesResponse>]

  /// - Returns: Interceptors to use when invoking 'zone'.
  func makeZoneInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryZoneRequest, Quicksilver_Interchainstaking_V1_QueryZoneResponse>]

  /// - Returns: Interceptors to use when invoking 'zoneValidators'.
  func makeZoneValidatorsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'depositAccount'.
  func makeDepositAccountInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorIntent'.
  func makeDelegatorIntentInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>]

  /// - Returns: Interceptors to use when invoking 'delegations'.
  func makeDelegationsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'receipts'.
  func makeReceiptsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>]

  /// - Returns: Interceptors to use when invoking 'zoneWithdrawalRecords'.
  func makeZoneWithdrawalRecordsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawalRecords'.
  func makeWithdrawalRecordsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'unbondingRecords'.
  func makeUnbondingRecordsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'redelegationRecords'.
  func makeRedelegationRecordsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'mappedAccounts'.
  func makeMappedAccountsInterceptors() -> [ClientInterceptor<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>]
}

internal enum Quicksilver_Interchainstaking_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "quicksilver.interchainstaking.v1.Query",
    methods: [
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zones,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zone,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneValidators,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.depositAccount,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegatorIntent,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.delegations,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.receipts,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.zoneWithdrawalRecords,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.withdrawalRecords,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.unbondingRecords,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.redelegationRecords,
      Quicksilver_Interchainstaking_V1_QueryClientMetadata.Methods.mappedAccounts,
    ]
  )

  internal enum Methods {
    internal static let zones = GRPCMethodDescriptor(
      name: "Zones",
      path: "/quicksilver.interchainstaking.v1.Query/Zones",
      type: GRPCCallType.unary
    )

    internal static let zone = GRPCMethodDescriptor(
      name: "Zone",
      path: "/quicksilver.interchainstaking.v1.Query/Zone",
      type: GRPCCallType.unary
    )

    internal static let zoneValidators = GRPCMethodDescriptor(
      name: "ZoneValidators",
      path: "/quicksilver.interchainstaking.v1.Query/ZoneValidators",
      type: GRPCCallType.unary
    )

    internal static let depositAccount = GRPCMethodDescriptor(
      name: "DepositAccount",
      path: "/quicksilver.interchainstaking.v1.Query/DepositAccount",
      type: GRPCCallType.unary
    )

    internal static let delegatorIntent = GRPCMethodDescriptor(
      name: "DelegatorIntent",
      path: "/quicksilver.interchainstaking.v1.Query/DelegatorIntent",
      type: GRPCCallType.unary
    )

    internal static let delegations = GRPCMethodDescriptor(
      name: "Delegations",
      path: "/quicksilver.interchainstaking.v1.Query/Delegations",
      type: GRPCCallType.unary
    )

    internal static let receipts = GRPCMethodDescriptor(
      name: "Receipts",
      path: "/quicksilver.interchainstaking.v1.Query/Receipts",
      type: GRPCCallType.unary
    )

    internal static let zoneWithdrawalRecords = GRPCMethodDescriptor(
      name: "ZoneWithdrawalRecords",
      path: "/quicksilver.interchainstaking.v1.Query/ZoneWithdrawalRecords",
      type: GRPCCallType.unary
    )

    internal static let withdrawalRecords = GRPCMethodDescriptor(
      name: "WithdrawalRecords",
      path: "/quicksilver.interchainstaking.v1.Query/WithdrawalRecords",
      type: GRPCCallType.unary
    )

    internal static let unbondingRecords = GRPCMethodDescriptor(
      name: "UnbondingRecords",
      path: "/quicksilver.interchainstaking.v1.Query/UnbondingRecords",
      type: GRPCCallType.unary
    )

    internal static let redelegationRecords = GRPCMethodDescriptor(
      name: "RedelegationRecords",
      path: "/quicksilver.interchainstaking.v1.Query/RedelegationRecords",
      type: GRPCCallType.unary
    )

    internal static let mappedAccounts = GRPCMethodDescriptor(
      name: "MappedAccounts",
      path: "/quicksilver.interchainstaking.v1.Query/MappedAccounts",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Quicksilver_Interchainstaking_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Quicksilver_Interchainstaking_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Zones provides meta data on connected zones.
  func zones(request: Quicksilver_Interchainstaking_V1_QueryZonesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryZonesResponse>

  /// Zone provides meta data on a specific zone.
  func zone(request: Quicksilver_Interchainstaking_V1_QueryZoneRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryZoneResponse>

  func zoneValidators(request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>

  /// DepositAccount provides data on the deposit address for a connected zone.
  func depositAccount(request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>

  /// DelegatorIntent provides data on the intent of the delegator for the given
  /// zone.
  func delegatorIntent(request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>

  /// Delegations provides data on the delegations for the given zone.
  func delegations(request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>

  /// Delegations provides data on the delegations for the given zone.
  func receipts(request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>

  /// WithdrawalRecords provides data on the active withdrawals.
  func zoneWithdrawalRecords(request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>

  /// WithdrawalRecords provides data on the active withdrawals.
  func withdrawalRecords(request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>

  /// UnbondingRecords provides data on the active unbondings.
  func unbondingRecords(request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>

  /// RedelegationRecords provides data on the active unbondings.
  func redelegationRecords(request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>

  /// MappedAccounts provides data on the mapped accounts for a given user over different host chains.
  func mappedAccounts(request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>
}

extension Quicksilver_Interchainstaking_V1_QueryProvider {
  internal var serviceName: Substring {
    return Quicksilver_Interchainstaking_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Zones":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryZonesRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryZonesResponse>(),
        interceptors: self.interceptors?.makeZonesInterceptors() ?? [],
        userFunction: self.zones(request:context:)
      )

    case "Zone":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryZoneRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryZoneResponse>(),
        interceptors: self.interceptors?.makeZoneInterceptors() ?? [],
        userFunction: self.zone(request:context:)
      )

    case "ZoneValidators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>(),
        interceptors: self.interceptors?.makeZoneValidatorsInterceptors() ?? [],
        userFunction: self.zoneValidators(request:context:)
      )

    case "DepositAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>(),
        interceptors: self.interceptors?.makeDepositAccountInterceptors() ?? [],
        userFunction: self.depositAccount(request:context:)
      )

    case "DelegatorIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>(),
        interceptors: self.interceptors?.makeDelegatorIntentInterceptors() ?? [],
        userFunction: self.delegatorIntent(request:context:)
      )

    case "Delegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>(),
        interceptors: self.interceptors?.makeDelegationsInterceptors() ?? [],
        userFunction: self.delegations(request:context:)
      )

    case "Receipts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>(),
        interceptors: self.interceptors?.makeReceiptsInterceptors() ?? [],
        userFunction: self.receipts(request:context:)
      )

    case "ZoneWithdrawalRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>(),
        interceptors: self.interceptors?.makeZoneWithdrawalRecordsInterceptors() ?? [],
        userFunction: self.zoneWithdrawalRecords(request:context:)
      )

    case "WithdrawalRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>(),
        interceptors: self.interceptors?.makeWithdrawalRecordsInterceptors() ?? [],
        userFunction: self.withdrawalRecords(request:context:)
      )

    case "UnbondingRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>(),
        interceptors: self.interceptors?.makeUnbondingRecordsInterceptors() ?? [],
        userFunction: self.unbondingRecords(request:context:)
      )

    case "RedelegationRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>(),
        interceptors: self.interceptors?.makeRedelegationRecordsInterceptors() ?? [],
        userFunction: self.redelegationRecords(request:context:)
      )

    case "MappedAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>(),
        interceptors: self.interceptors?.makeMappedAccountsInterceptors() ?? [],
        userFunction: self.mappedAccounts(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Quicksilver_Interchainstaking_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Quicksilver_Interchainstaking_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Zones provides meta data on connected zones.
  @Sendable func zones(
    request: Quicksilver_Interchainstaking_V1_QueryZonesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryZonesResponse

  /// Zone provides meta data on a specific zone.
  @Sendable func zone(
    request: Quicksilver_Interchainstaking_V1_QueryZoneRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryZoneResponse

  @Sendable func zoneValidators(
    request: Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse

  /// DepositAccount provides data on the deposit address for a connected zone.
  @Sendable func depositAccount(
    request: Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse

  /// DelegatorIntent provides data on the intent of the delegator for the given
  /// zone.
  @Sendable func delegatorIntent(
    request: Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse

  /// Delegations provides data on the delegations for the given zone.
  @Sendable func delegations(
    request: Quicksilver_Interchainstaking_V1_QueryDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryDelegationsResponse

  /// Delegations provides data on the delegations for the given zone.
  @Sendable func receipts(
    request: Quicksilver_Interchainstaking_V1_QueryReceiptsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryReceiptsResponse

  /// WithdrawalRecords provides data on the active withdrawals.
  @Sendable func zoneWithdrawalRecords(
    request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse

  /// WithdrawalRecords provides data on the active withdrawals.
  @Sendable func withdrawalRecords(
    request: Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse

  /// UnbondingRecords provides data on the active unbondings.
  @Sendable func unbondingRecords(
    request: Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse

  /// RedelegationRecords provides data on the active unbondings.
  @Sendable func redelegationRecords(
    request: Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse

  /// MappedAccounts provides data on the mapped accounts for a given user over different host chains.
  @Sendable func mappedAccounts(
    request: Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quicksilver_Interchainstaking_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Quicksilver_Interchainstaking_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Quicksilver_Interchainstaking_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Quicksilver_Interchainstaking_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Zones":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryZonesRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryZonesResponse>(),
        interceptors: self.interceptors?.makeZonesInterceptors() ?? [],
        wrapping: self.zones(request:context:)
      )

    case "Zone":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryZoneRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryZoneResponse>(),
        interceptors: self.interceptors?.makeZoneInterceptors() ?? [],
        wrapping: self.zone(request:context:)
      )

    case "ZoneValidators":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>(),
        interceptors: self.interceptors?.makeZoneValidatorsInterceptors() ?? [],
        wrapping: self.zoneValidators(request:context:)
      )

    case "DepositAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>(),
        interceptors: self.interceptors?.makeDepositAccountInterceptors() ?? [],
        wrapping: self.depositAccount(request:context:)
      )

    case "DelegatorIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>(),
        interceptors: self.interceptors?.makeDelegatorIntentInterceptors() ?? [],
        wrapping: self.delegatorIntent(request:context:)
      )

    case "Delegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>(),
        interceptors: self.interceptors?.makeDelegationsInterceptors() ?? [],
        wrapping: self.delegations(request:context:)
      )

    case "Receipts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>(),
        interceptors: self.interceptors?.makeReceiptsInterceptors() ?? [],
        wrapping: self.receipts(request:context:)
      )

    case "ZoneWithdrawalRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>(),
        interceptors: self.interceptors?.makeZoneWithdrawalRecordsInterceptors() ?? [],
        wrapping: self.zoneWithdrawalRecords(request:context:)
      )

    case "WithdrawalRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>(),
        interceptors: self.interceptors?.makeWithdrawalRecordsInterceptors() ?? [],
        wrapping: self.withdrawalRecords(request:context:)
      )

    case "UnbondingRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>(),
        interceptors: self.interceptors?.makeUnbondingRecordsInterceptors() ?? [],
        wrapping: self.unbondingRecords(request:context:)
      )

    case "RedelegationRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>(),
        interceptors: self.interceptors?.makeRedelegationRecordsInterceptors() ?? [],
        wrapping: self.redelegationRecords(request:context:)
      )

    case "MappedAccounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>(),
        interceptors: self.interceptors?.makeMappedAccountsInterceptors() ?? [],
        wrapping: self.mappedAccounts(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Quicksilver_Interchainstaking_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'zones'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeZonesInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryZonesRequest, Quicksilver_Interchainstaking_V1_QueryZonesResponse>]

  /// - Returns: Interceptors to use when handling 'zone'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeZoneInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryZoneRequest, Quicksilver_Interchainstaking_V1_QueryZoneResponse>]

  /// - Returns: Interceptors to use when handling 'zoneValidators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeZoneValidatorsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryZoneValidatorsRequest, Quicksilver_Interchainstaking_V1_QueryZoneValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'depositAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositAccountInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainRequest, Quicksilver_Interchainstaking_V1_QueryDepositAccountForChainResponse>]

  /// - Returns: Interceptors to use when handling 'delegatorIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorIntentInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryDelegatorIntentRequest, Quicksilver_Interchainstaking_V1_QueryDelegatorIntentResponse>]

  /// - Returns: Interceptors to use when handling 'delegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegationsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryDelegationsRequest, Quicksilver_Interchainstaking_V1_QueryDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'receipts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReceiptsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryReceiptsRequest, Quicksilver_Interchainstaking_V1_QueryReceiptsResponse>]

  /// - Returns: Interceptors to use when handling 'zoneWithdrawalRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeZoneWithdrawalRecordsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawalRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawalRecordsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsRequest, Quicksilver_Interchainstaking_V1_QueryWithdrawalRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'unbondingRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnbondingRecordsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsRequest, Quicksilver_Interchainstaking_V1_QueryUnbondingRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'redelegationRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedelegationRecordsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsRequest, Quicksilver_Interchainstaking_V1_QueryRedelegationRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'mappedAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMappedAccountsInterceptors() -> [ServerInterceptor<Quicksilver_Interchainstaking_V1_QueryMappedAccountsRequest, Quicksilver_Interchainstaking_V1_QueryMappedAccountsResponse>]
}

internal enum Quicksilver_Interchainstaking_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "quicksilver.interchainstaking.v1.Query",
    methods: [
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.zones,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.zone,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.zoneValidators,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.depositAccount,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.delegatorIntent,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.delegations,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.receipts,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.zoneWithdrawalRecords,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.withdrawalRecords,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.unbondingRecords,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.redelegationRecords,
      Quicksilver_Interchainstaking_V1_QueryServerMetadata.Methods.mappedAccounts,
    ]
  )

  internal enum Methods {
    internal static let zones = GRPCMethodDescriptor(
      name: "Zones",
      path: "/quicksilver.interchainstaking.v1.Query/Zones",
      type: GRPCCallType.unary
    )

    internal static let zone = GRPCMethodDescriptor(
      name: "Zone",
      path: "/quicksilver.interchainstaking.v1.Query/Zone",
      type: GRPCCallType.unary
    )

    internal static let zoneValidators = GRPCMethodDescriptor(
      name: "ZoneValidators",
      path: "/quicksilver.interchainstaking.v1.Query/ZoneValidators",
      type: GRPCCallType.unary
    )

    internal static let depositAccount = GRPCMethodDescriptor(
      name: "DepositAccount",
      path: "/quicksilver.interchainstaking.v1.Query/DepositAccount",
      type: GRPCCallType.unary
    )

    internal static let delegatorIntent = GRPCMethodDescriptor(
      name: "DelegatorIntent",
      path: "/quicksilver.interchainstaking.v1.Query/DelegatorIntent",
      type: GRPCCallType.unary
    )

    internal static let delegations = GRPCMethodDescriptor(
      name: "Delegations",
      path: "/quicksilver.interchainstaking.v1.Query/Delegations",
      type: GRPCCallType.unary
    )

    internal static let receipts = GRPCMethodDescriptor(
      name: "Receipts",
      path: "/quicksilver.interchainstaking.v1.Query/Receipts",
      type: GRPCCallType.unary
    )

    internal static let zoneWithdrawalRecords = GRPCMethodDescriptor(
      name: "ZoneWithdrawalRecords",
      path: "/quicksilver.interchainstaking.v1.Query/ZoneWithdrawalRecords",
      type: GRPCCallType.unary
    )

    internal static let withdrawalRecords = GRPCMethodDescriptor(
      name: "WithdrawalRecords",
      path: "/quicksilver.interchainstaking.v1.Query/WithdrawalRecords",
      type: GRPCCallType.unary
    )

    internal static let unbondingRecords = GRPCMethodDescriptor(
      name: "UnbondingRecords",
      path: "/quicksilver.interchainstaking.v1.Query/UnbondingRecords",
      type: GRPCCallType.unary
    )

    internal static let redelegationRecords = GRPCMethodDescriptor(
      name: "RedelegationRecords",
      path: "/quicksilver.interchainstaking.v1.Query/RedelegationRecords",
      type: GRPCCallType.unary
    )

    internal static let mappedAccounts = GRPCMethodDescriptor(
      name: "MappedAccounts",
      path: "/quicksilver.interchainstaking.v1.Query/MappedAccounts",
      type: GRPCCallType.unary
    )
  }
}
