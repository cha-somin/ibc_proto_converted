//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/marker/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Marker Msg service.
///
/// Usage: instantiate `Provenance_Marker_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Marker_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? { get }

  func finalize(
    _ request: Provenance_Marker_V1_MsgFinalizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgFinalizeRequest, Provenance_Marker_V1_MsgFinalizeResponse>

  func activate(
    _ request: Provenance_Marker_V1_MsgActivateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgActivateRequest, Provenance_Marker_V1_MsgActivateResponse>

  func cancel(
    _ request: Provenance_Marker_V1_MsgCancelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgCancelRequest, Provenance_Marker_V1_MsgCancelResponse>

  func delete(
    _ request: Provenance_Marker_V1_MsgDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgDeleteRequest, Provenance_Marker_V1_MsgDeleteResponse>

  func mint(
    _ request: Provenance_Marker_V1_MsgMintRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgMintRequest, Provenance_Marker_V1_MsgMintResponse>

  func burn(
    _ request: Provenance_Marker_V1_MsgBurnRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgBurnRequest, Provenance_Marker_V1_MsgBurnResponse>

  func addAccess(
    _ request: Provenance_Marker_V1_MsgAddAccessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgAddAccessRequest, Provenance_Marker_V1_MsgAddAccessResponse>

  func deleteAccess(
    _ request: Provenance_Marker_V1_MsgDeleteAccessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgDeleteAccessRequest, Provenance_Marker_V1_MsgDeleteAccessResponse>

  func withdraw(
    _ request: Provenance_Marker_V1_MsgWithdrawRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgWithdrawRequest, Provenance_Marker_V1_MsgWithdrawResponse>

  func addMarker(
    _ request: Provenance_Marker_V1_MsgAddMarkerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgAddMarkerRequest, Provenance_Marker_V1_MsgAddMarkerResponse>

  func transfer(
    _ request: Provenance_Marker_V1_MsgTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgTransferRequest, Provenance_Marker_V1_MsgTransferResponse>

  func ibcTransfer(
    _ request: Provenance_Marker_V1_MsgIbcTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgIbcTransferRequest, Provenance_Marker_V1_MsgIbcTransferResponse>

  func setDenomMetadata(
    _ request: Provenance_Marker_V1_MsgSetDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgSetDenomMetadataRequest, Provenance_Marker_V1_MsgSetDenomMetadataResponse>

  func grantAllowance(
    _ request: Provenance_Marker_V1_MsgGrantAllowanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgGrantAllowanceRequest, Provenance_Marker_V1_MsgGrantAllowanceResponse>

  func addFinalizeActivateMarker(
    _ request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>

  func supplyIncreaseProposal(
    _ request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>

  func updateRequiredAttributes(
    _ request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>

  func updateForcedTransfer(
    _ request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgUpdateForcedTransferRequest, Provenance_Marker_V1_MsgUpdateForcedTransferResponse>

  func setAccountData(
    _ request: Provenance_Marker_V1_MsgSetAccountDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_MsgSetAccountDataRequest, Provenance_Marker_V1_MsgSetAccountDataResponse>
}

extension Provenance_Marker_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "provenance.marker.v1.Msg"
  }

  /// Finalize
  ///
  /// - Parameters:
  ///   - request: Request to send to Finalize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalize(
    _ request: Provenance_Marker_V1_MsgFinalizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgFinalizeRequest, Provenance_Marker_V1_MsgFinalizeResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }

  /// Activate
  ///
  /// - Parameters:
  ///   - request: Request to send to Activate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activate(
    _ request: Provenance_Marker_V1_MsgActivateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgActivateRequest, Provenance_Marker_V1_MsgActivateResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.activate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }

  /// Cancel
  ///
  /// - Parameters:
  ///   - request: Request to send to Cancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancel(
    _ request: Provenance_Marker_V1_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgCancelRequest, Provenance_Marker_V1_MsgCancelResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  /// Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: Provenance_Marker_V1_MsgDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgDeleteRequest, Provenance_Marker_V1_MsgDeleteResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  /// Mint
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mint(
    _ request: Provenance_Marker_V1_MsgMintRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgMintRequest, Provenance_Marker_V1_MsgMintResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Burn
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burn(
    _ request: Provenance_Marker_V1_MsgBurnRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgBurnRequest, Provenance_Marker_V1_MsgBurnResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// AddAccess
  ///
  /// - Parameters:
  ///   - request: Request to send to AddAccess.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addAccess(
    _ request: Provenance_Marker_V1_MsgAddAccessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgAddAccessRequest, Provenance_Marker_V1_MsgAddAccessResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddAccessInterceptors() ?? []
    )
  }

  /// DeleteAccess
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAccess.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAccess(
    _ request: Provenance_Marker_V1_MsgDeleteAccessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgDeleteAccessRequest, Provenance_Marker_V1_MsgDeleteAccessResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.deleteAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccessInterceptors() ?? []
    )
  }

  /// Withdraw
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdraw(
    _ request: Provenance_Marker_V1_MsgWithdrawRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgWithdrawRequest, Provenance_Marker_V1_MsgWithdrawResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  /// AddMarker
  ///
  /// - Parameters:
  ///   - request: Request to send to AddMarker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addMarker(
    _ request: Provenance_Marker_V1_MsgAddMarkerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgAddMarkerRequest, Provenance_Marker_V1_MsgAddMarkerResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addMarker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarkerInterceptors() ?? []
    )
  }

  /// Transfer marker denominated coin between accounts
  ///
  /// - Parameters:
  ///   - request: Request to send to Transfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transfer(
    _ request: Provenance_Marker_V1_MsgTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgTransferRequest, Provenance_Marker_V1_MsgTransferResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.transfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferInterceptors() ?? []
    )
  }

  /// Transfer over ibc any marker(including restricted markers) between ibc accounts.
  /// The relayer is still needed to accomplish ibc middleware relays.
  ///
  /// - Parameters:
  ///   - request: Request to send to IbcTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ibcTransfer(
    _ request: Provenance_Marker_V1_MsgIbcTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgIbcTransferRequest, Provenance_Marker_V1_MsgIbcTransferResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.ibcTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIbcTransferInterceptors() ?? []
    )
  }

  /// Allows Denom Metadata (see bank module) to be set for the Marker's Denom
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDenomMetadata(
    _ request: Provenance_Marker_V1_MsgSetDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgSetDenomMetadataRequest, Provenance_Marker_V1_MsgSetDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  /// GrantAllowance grants fee allowance to the grantee on the granter's
  /// account with the provided expiration time.
  ///
  /// - Parameters:
  ///   - request: Request to send to GrantAllowance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func grantAllowance(
    _ request: Provenance_Marker_V1_MsgGrantAllowanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgGrantAllowanceRequest, Provenance_Marker_V1_MsgGrantAllowanceResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.grantAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? []
    )
  }

  /// AddFinalizeActivateMarker
  ///
  /// - Parameters:
  ///   - request: Request to send to AddFinalizeActivateMarker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addFinalizeActivateMarker(
    _ request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addFinalizeActivateMarker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFinalizeActivateMarkerInterceptors() ?? []
    )
  }

  /// SupplyIncreaseProposal can only be called via gov proposal
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplyIncreaseProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplyIncreaseProposal(
    _ request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.supplyIncreaseProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyIncreaseProposalInterceptors() ?? []
    )
  }

  /// UpdateRequiredAttributes will only succeed if signer has transfer authority
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateRequiredAttributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateRequiredAttributes(
    _ request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.updateRequiredAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRequiredAttributesInterceptors() ?? []
    )
  }

  /// UpdateForcedTransfer updates the allow_forced_transfer field of a marker via governance proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateForcedTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateForcedTransfer(
    _ request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgUpdateForcedTransferRequest, Provenance_Marker_V1_MsgUpdateForcedTransferResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.updateForcedTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateForcedTransferInterceptors() ?? []
    )
  }

  /// SetAccountData sets the accountdata for a denom. Signer must have deposit authority.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAccountData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAccountData(
    _ request: Provenance_Marker_V1_MsgSetAccountDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_MsgSetAccountDataRequest, Provenance_Marker_V1_MsgSetAccountDataResponse> {
    return self.makeUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.setAccountData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAccountDataInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Provenance_Marker_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Provenance_Marker_V1_MsgNIOClient")
internal final class Provenance_Marker_V1_MsgClient: Provenance_Marker_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the provenance.marker.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Provenance_Marker_V1_MsgNIOClient: Provenance_Marker_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.marker.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Marker Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Provenance_Marker_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeFinalizeCall(
    _ request: Provenance_Marker_V1_MsgFinalizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgFinalizeRequest, Provenance_Marker_V1_MsgFinalizeResponse>

  func makeActivateCall(
    _ request: Provenance_Marker_V1_MsgActivateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgActivateRequest, Provenance_Marker_V1_MsgActivateResponse>

  func makeCancelCall(
    _ request: Provenance_Marker_V1_MsgCancelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgCancelRequest, Provenance_Marker_V1_MsgCancelResponse>

  func makeDeleteCall(
    _ request: Provenance_Marker_V1_MsgDeleteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgDeleteRequest, Provenance_Marker_V1_MsgDeleteResponse>

  func makeMintCall(
    _ request: Provenance_Marker_V1_MsgMintRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgMintRequest, Provenance_Marker_V1_MsgMintResponse>

  func makeBurnCall(
    _ request: Provenance_Marker_V1_MsgBurnRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgBurnRequest, Provenance_Marker_V1_MsgBurnResponse>

  func makeAddAccessCall(
    _ request: Provenance_Marker_V1_MsgAddAccessRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgAddAccessRequest, Provenance_Marker_V1_MsgAddAccessResponse>

  func makeDeleteAccessCall(
    _ request: Provenance_Marker_V1_MsgDeleteAccessRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgDeleteAccessRequest, Provenance_Marker_V1_MsgDeleteAccessResponse>

  func makeWithdrawCall(
    _ request: Provenance_Marker_V1_MsgWithdrawRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgWithdrawRequest, Provenance_Marker_V1_MsgWithdrawResponse>

  func makeAddMarkerCall(
    _ request: Provenance_Marker_V1_MsgAddMarkerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgAddMarkerRequest, Provenance_Marker_V1_MsgAddMarkerResponse>

  func makeTransferCall(
    _ request: Provenance_Marker_V1_MsgTransferRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgTransferRequest, Provenance_Marker_V1_MsgTransferResponse>

  func makeIbcTransferCall(
    _ request: Provenance_Marker_V1_MsgIbcTransferRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgIbcTransferRequest, Provenance_Marker_V1_MsgIbcTransferResponse>

  func makeSetDenomMetadataCall(
    _ request: Provenance_Marker_V1_MsgSetDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgSetDenomMetadataRequest, Provenance_Marker_V1_MsgSetDenomMetadataResponse>

  func makeGrantAllowanceCall(
    _ request: Provenance_Marker_V1_MsgGrantAllowanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgGrantAllowanceRequest, Provenance_Marker_V1_MsgGrantAllowanceResponse>

  func makeAddFinalizeActivateMarkerCall(
    _ request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>

  func makeSupplyIncreaseProposalCall(
    _ request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>

  func makeUpdateRequiredAttributesCall(
    _ request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>

  func makeUpdateForcedTransferCall(
    _ request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgUpdateForcedTransferRequest, Provenance_Marker_V1_MsgUpdateForcedTransferResponse>

  func makeSetAccountDataCall(
    _ request: Provenance_Marker_V1_MsgSetAccountDataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgSetAccountDataRequest, Provenance_Marker_V1_MsgSetAccountDataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Provenance_Marker_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Provenance_Marker_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeFinalizeCall(
    _ request: Provenance_Marker_V1_MsgFinalizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgFinalizeRequest, Provenance_Marker_V1_MsgFinalizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }

  internal func makeActivateCall(
    _ request: Provenance_Marker_V1_MsgActivateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgActivateRequest, Provenance_Marker_V1_MsgActivateResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.activate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }

  internal func makeCancelCall(
    _ request: Provenance_Marker_V1_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgCancelRequest, Provenance_Marker_V1_MsgCancelResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  internal func makeDeleteCall(
    _ request: Provenance_Marker_V1_MsgDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgDeleteRequest, Provenance_Marker_V1_MsgDeleteResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func makeMintCall(
    _ request: Provenance_Marker_V1_MsgMintRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgMintRequest, Provenance_Marker_V1_MsgMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func makeBurnCall(
    _ request: Provenance_Marker_V1_MsgBurnRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgBurnRequest, Provenance_Marker_V1_MsgBurnResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func makeAddAccessCall(
    _ request: Provenance_Marker_V1_MsgAddAccessRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgAddAccessRequest, Provenance_Marker_V1_MsgAddAccessResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddAccessInterceptors() ?? []
    )
  }

  internal func makeDeleteAccessCall(
    _ request: Provenance_Marker_V1_MsgDeleteAccessRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgDeleteAccessRequest, Provenance_Marker_V1_MsgDeleteAccessResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.deleteAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccessInterceptors() ?? []
    )
  }

  internal func makeWithdrawCall(
    _ request: Provenance_Marker_V1_MsgWithdrawRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgWithdrawRequest, Provenance_Marker_V1_MsgWithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func makeAddMarkerCall(
    _ request: Provenance_Marker_V1_MsgAddMarkerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgAddMarkerRequest, Provenance_Marker_V1_MsgAddMarkerResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addMarker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarkerInterceptors() ?? []
    )
  }

  internal func makeTransferCall(
    _ request: Provenance_Marker_V1_MsgTransferRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgTransferRequest, Provenance_Marker_V1_MsgTransferResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.transfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferInterceptors() ?? []
    )
  }

  internal func makeIbcTransferCall(
    _ request: Provenance_Marker_V1_MsgIbcTransferRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgIbcTransferRequest, Provenance_Marker_V1_MsgIbcTransferResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.ibcTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIbcTransferInterceptors() ?? []
    )
  }

  internal func makeSetDenomMetadataCall(
    _ request: Provenance_Marker_V1_MsgSetDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgSetDenomMetadataRequest, Provenance_Marker_V1_MsgSetDenomMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  internal func makeGrantAllowanceCall(
    _ request: Provenance_Marker_V1_MsgGrantAllowanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgGrantAllowanceRequest, Provenance_Marker_V1_MsgGrantAllowanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.grantAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? []
    )
  }

  internal func makeAddFinalizeActivateMarkerCall(
    _ request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addFinalizeActivateMarker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFinalizeActivateMarkerInterceptors() ?? []
    )
  }

  internal func makeSupplyIncreaseProposalCall(
    _ request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.supplyIncreaseProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyIncreaseProposalInterceptors() ?? []
    )
  }

  internal func makeUpdateRequiredAttributesCall(
    _ request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.updateRequiredAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRequiredAttributesInterceptors() ?? []
    )
  }

  internal func makeUpdateForcedTransferCall(
    _ request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgUpdateForcedTransferRequest, Provenance_Marker_V1_MsgUpdateForcedTransferResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.updateForcedTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateForcedTransferInterceptors() ?? []
    )
  }

  internal func makeSetAccountDataCall(
    _ request: Provenance_Marker_V1_MsgSetAccountDataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Provenance_Marker_V1_MsgSetAccountDataRequest, Provenance_Marker_V1_MsgSetAccountDataResponse> {
    return self.makeAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.setAccountData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAccountDataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Provenance_Marker_V1_MsgAsyncClientProtocol {
  internal func finalize(
    _ request: Provenance_Marker_V1_MsgFinalizeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgFinalizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }

  internal func activate(
    _ request: Provenance_Marker_V1_MsgActivateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgActivateResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.activate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }

  internal func cancel(
    _ request: Provenance_Marker_V1_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgCancelResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  internal func delete(
    _ request: Provenance_Marker_V1_MsgDeleteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgDeleteResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func mint(
    _ request: Provenance_Marker_V1_MsgMintRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func burn(
    _ request: Provenance_Marker_V1_MsgBurnRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgBurnResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func addAccess(
    _ request: Provenance_Marker_V1_MsgAddAccessRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgAddAccessResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddAccessInterceptors() ?? []
    )
  }

  internal func deleteAccess(
    _ request: Provenance_Marker_V1_MsgDeleteAccessRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgDeleteAccessResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.deleteAccess.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccessInterceptors() ?? []
    )
  }

  internal func withdraw(
    _ request: Provenance_Marker_V1_MsgWithdrawRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgWithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func addMarker(
    _ request: Provenance_Marker_V1_MsgAddMarkerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgAddMarkerResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addMarker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarkerInterceptors() ?? []
    )
  }

  internal func transfer(
    _ request: Provenance_Marker_V1_MsgTransferRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgTransferResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.transfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferInterceptors() ?? []
    )
  }

  internal func ibcTransfer(
    _ request: Provenance_Marker_V1_MsgIbcTransferRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgIbcTransferResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.ibcTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIbcTransferInterceptors() ?? []
    )
  }

  internal func setDenomMetadata(
    _ request: Provenance_Marker_V1_MsgSetDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgSetDenomMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  internal func grantAllowance(
    _ request: Provenance_Marker_V1_MsgGrantAllowanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgGrantAllowanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.grantAllowance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? []
    )
  }

  internal func addFinalizeActivateMarker(
    _ request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.addFinalizeActivateMarker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFinalizeActivateMarkerInterceptors() ?? []
    )
  }

  internal func supplyIncreaseProposal(
    _ request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.supplyIncreaseProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyIncreaseProposalInterceptors() ?? []
    )
  }

  internal func updateRequiredAttributes(
    _ request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.updateRequiredAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRequiredAttributesInterceptors() ?? []
    )
  }

  internal func updateForcedTransfer(
    _ request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgUpdateForcedTransferResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.updateForcedTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateForcedTransferInterceptors() ?? []
    )
  }

  internal func setAccountData(
    _ request: Provenance_Marker_V1_MsgSetAccountDataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Provenance_Marker_V1_MsgSetAccountDataResponse {
    return try await self.performAsyncUnaryCall(
      path: Provenance_Marker_V1_MsgClientMetadata.Methods.setAccountData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAccountDataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Provenance_Marker_V1_MsgAsyncClient: Provenance_Marker_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Provenance_Marker_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'finalize'.
  func makeFinalizeInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgFinalizeRequest, Provenance_Marker_V1_MsgFinalizeResponse>]

  /// - Returns: Interceptors to use when invoking 'activate'.
  func makeActivateInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgActivateRequest, Provenance_Marker_V1_MsgActivateResponse>]

  /// - Returns: Interceptors to use when invoking 'cancel'.
  func makeCancelInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgCancelRequest, Provenance_Marker_V1_MsgCancelResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgDeleteRequest, Provenance_Marker_V1_MsgDeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgMintRequest, Provenance_Marker_V1_MsgMintResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgBurnRequest, Provenance_Marker_V1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when invoking 'addAccess'.
  func makeAddAccessInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgAddAccessRequest, Provenance_Marker_V1_MsgAddAccessResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteAccess'.
  func makeDeleteAccessInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgDeleteAccessRequest, Provenance_Marker_V1_MsgDeleteAccessResponse>]

  /// - Returns: Interceptors to use when invoking 'withdraw'.
  func makeWithdrawInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgWithdrawRequest, Provenance_Marker_V1_MsgWithdrawResponse>]

  /// - Returns: Interceptors to use when invoking 'addMarker'.
  func makeAddMarkerInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgAddMarkerRequest, Provenance_Marker_V1_MsgAddMarkerResponse>]

  /// - Returns: Interceptors to use when invoking 'transfer'.
  func makeTransferInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgTransferRequest, Provenance_Marker_V1_MsgTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'ibcTransfer'.
  func makeIbcTransferInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgIbcTransferRequest, Provenance_Marker_V1_MsgIbcTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'setDenomMetadata'.
  func makeSetDenomMetadataInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgSetDenomMetadataRequest, Provenance_Marker_V1_MsgSetDenomMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'grantAllowance'.
  func makeGrantAllowanceInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgGrantAllowanceRequest, Provenance_Marker_V1_MsgGrantAllowanceResponse>]

  /// - Returns: Interceptors to use when invoking 'addFinalizeActivateMarker'.
  func makeAddFinalizeActivateMarkerInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>]

  /// - Returns: Interceptors to use when invoking 'supplyIncreaseProposal'.
  func makeSupplyIncreaseProposalInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'updateRequiredAttributes'.
  func makeUpdateRequiredAttributesInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>]

  /// - Returns: Interceptors to use when invoking 'updateForcedTransfer'.
  func makeUpdateForcedTransferInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgUpdateForcedTransferRequest, Provenance_Marker_V1_MsgUpdateForcedTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'setAccountData'.
  func makeSetAccountDataInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_MsgSetAccountDataRequest, Provenance_Marker_V1_MsgSetAccountDataResponse>]
}

internal enum Provenance_Marker_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "provenance.marker.v1.Msg",
    methods: [
      Provenance_Marker_V1_MsgClientMetadata.Methods.finalize,
      Provenance_Marker_V1_MsgClientMetadata.Methods.activate,
      Provenance_Marker_V1_MsgClientMetadata.Methods.cancel,
      Provenance_Marker_V1_MsgClientMetadata.Methods.delete,
      Provenance_Marker_V1_MsgClientMetadata.Methods.mint,
      Provenance_Marker_V1_MsgClientMetadata.Methods.burn,
      Provenance_Marker_V1_MsgClientMetadata.Methods.addAccess,
      Provenance_Marker_V1_MsgClientMetadata.Methods.deleteAccess,
      Provenance_Marker_V1_MsgClientMetadata.Methods.withdraw,
      Provenance_Marker_V1_MsgClientMetadata.Methods.addMarker,
      Provenance_Marker_V1_MsgClientMetadata.Methods.transfer,
      Provenance_Marker_V1_MsgClientMetadata.Methods.ibcTransfer,
      Provenance_Marker_V1_MsgClientMetadata.Methods.setDenomMetadata,
      Provenance_Marker_V1_MsgClientMetadata.Methods.grantAllowance,
      Provenance_Marker_V1_MsgClientMetadata.Methods.addFinalizeActivateMarker,
      Provenance_Marker_V1_MsgClientMetadata.Methods.supplyIncreaseProposal,
      Provenance_Marker_V1_MsgClientMetadata.Methods.updateRequiredAttributes,
      Provenance_Marker_V1_MsgClientMetadata.Methods.updateForcedTransfer,
      Provenance_Marker_V1_MsgClientMetadata.Methods.setAccountData,
    ]
  )

  internal enum Methods {
    internal static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/provenance.marker.v1.Msg/Finalize",
      type: GRPCCallType.unary
    )

    internal static let activate = GRPCMethodDescriptor(
      name: "Activate",
      path: "/provenance.marker.v1.Msg/Activate",
      type: GRPCCallType.unary
    )

    internal static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/provenance.marker.v1.Msg/Cancel",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/provenance.marker.v1.Msg/Delete",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/provenance.marker.v1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/provenance.marker.v1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let addAccess = GRPCMethodDescriptor(
      name: "AddAccess",
      path: "/provenance.marker.v1.Msg/AddAccess",
      type: GRPCCallType.unary
    )

    internal static let deleteAccess = GRPCMethodDescriptor(
      name: "DeleteAccess",
      path: "/provenance.marker.v1.Msg/DeleteAccess",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/provenance.marker.v1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let addMarker = GRPCMethodDescriptor(
      name: "AddMarker",
      path: "/provenance.marker.v1.Msg/AddMarker",
      type: GRPCCallType.unary
    )

    internal static let transfer = GRPCMethodDescriptor(
      name: "Transfer",
      path: "/provenance.marker.v1.Msg/Transfer",
      type: GRPCCallType.unary
    )

    internal static let ibcTransfer = GRPCMethodDescriptor(
      name: "IbcTransfer",
      path: "/provenance.marker.v1.Msg/IbcTransfer",
      type: GRPCCallType.unary
    )

    internal static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/provenance.marker.v1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let grantAllowance = GRPCMethodDescriptor(
      name: "GrantAllowance",
      path: "/provenance.marker.v1.Msg/GrantAllowance",
      type: GRPCCallType.unary
    )

    internal static let addFinalizeActivateMarker = GRPCMethodDescriptor(
      name: "AddFinalizeActivateMarker",
      path: "/provenance.marker.v1.Msg/AddFinalizeActivateMarker",
      type: GRPCCallType.unary
    )

    internal static let supplyIncreaseProposal = GRPCMethodDescriptor(
      name: "SupplyIncreaseProposal",
      path: "/provenance.marker.v1.Msg/SupplyIncreaseProposal",
      type: GRPCCallType.unary
    )

    internal static let updateRequiredAttributes = GRPCMethodDescriptor(
      name: "UpdateRequiredAttributes",
      path: "/provenance.marker.v1.Msg/UpdateRequiredAttributes",
      type: GRPCCallType.unary
    )

    internal static let updateForcedTransfer = GRPCMethodDescriptor(
      name: "UpdateForcedTransfer",
      path: "/provenance.marker.v1.Msg/UpdateForcedTransfer",
      type: GRPCCallType.unary
    )

    internal static let setAccountData = GRPCMethodDescriptor(
      name: "SetAccountData",
      path: "/provenance.marker.v1.Msg/SetAccountData",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Marker Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Provenance_Marker_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Provenance_Marker_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Finalize
  func finalize(request: Provenance_Marker_V1_MsgFinalizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgFinalizeResponse>

  /// Activate
  func activate(request: Provenance_Marker_V1_MsgActivateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgActivateResponse>

  /// Cancel
  func cancel(request: Provenance_Marker_V1_MsgCancelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgCancelResponse>

  /// Delete
  func delete(request: Provenance_Marker_V1_MsgDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgDeleteResponse>

  /// Mint
  func mint(request: Provenance_Marker_V1_MsgMintRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgMintResponse>

  /// Burn
  func burn(request: Provenance_Marker_V1_MsgBurnRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgBurnResponse>

  /// AddAccess
  func addAccess(request: Provenance_Marker_V1_MsgAddAccessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgAddAccessResponse>

  /// DeleteAccess
  func deleteAccess(request: Provenance_Marker_V1_MsgDeleteAccessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgDeleteAccessResponse>

  /// Withdraw
  func withdraw(request: Provenance_Marker_V1_MsgWithdrawRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgWithdrawResponse>

  /// AddMarker
  func addMarker(request: Provenance_Marker_V1_MsgAddMarkerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgAddMarkerResponse>

  /// Transfer marker denominated coin between accounts
  func transfer(request: Provenance_Marker_V1_MsgTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgTransferResponse>

  /// Transfer over ibc any marker(including restricted markers) between ibc accounts.
  /// The relayer is still needed to accomplish ibc middleware relays.
  func ibcTransfer(request: Provenance_Marker_V1_MsgIbcTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgIbcTransferResponse>

  /// Allows Denom Metadata (see bank module) to be set for the Marker's Denom
  func setDenomMetadata(request: Provenance_Marker_V1_MsgSetDenomMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgSetDenomMetadataResponse>

  /// GrantAllowance grants fee allowance to the grantee on the granter's
  /// account with the provided expiration time.
  func grantAllowance(request: Provenance_Marker_V1_MsgGrantAllowanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgGrantAllowanceResponse>

  /// AddFinalizeActivateMarker
  func addFinalizeActivateMarker(request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>

  /// SupplyIncreaseProposal can only be called via gov proposal
  func supplyIncreaseProposal(request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>

  /// UpdateRequiredAttributes will only succeed if signer has transfer authority
  func updateRequiredAttributes(request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>

  /// UpdateForcedTransfer updates the allow_forced_transfer field of a marker via governance proposal.
  func updateForcedTransfer(request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgUpdateForcedTransferResponse>

  /// SetAccountData sets the accountdata for a denom. Signer must have deposit authority.
  func setAccountData(request: Provenance_Marker_V1_MsgSetAccountDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_MsgSetAccountDataResponse>
}

extension Provenance_Marker_V1_MsgProvider {
  internal var serviceName: Substring {
    return Provenance_Marker_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Finalize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgFinalizeRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgFinalizeResponse>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        userFunction: self.finalize(request:context:)
      )

    case "Activate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgActivateRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgActivateResponse>(),
        interceptors: self.interceptors?.makeActivateInterceptors() ?? [],
        userFunction: self.activate(request:context:)
      )

    case "Cancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgCancelRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        userFunction: self.cancel(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgDeleteRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgDeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "Mint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgMintRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        userFunction: self.mint(request:context:)
      )

    case "Burn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgBurnRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        userFunction: self.burn(request:context:)
      )

    case "AddAccess":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgAddAccessRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgAddAccessResponse>(),
        interceptors: self.interceptors?.makeAddAccessInterceptors() ?? [],
        userFunction: self.addAccess(request:context:)
      )

    case "DeleteAccess":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgDeleteAccessRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgDeleteAccessResponse>(),
        interceptors: self.interceptors?.makeDeleteAccessInterceptors() ?? [],
        userFunction: self.deleteAccess(request:context:)
      )

    case "Withdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgWithdrawRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgWithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        userFunction: self.withdraw(request:context:)
      )

    case "AddMarker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgAddMarkerRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgAddMarkerResponse>(),
        interceptors: self.interceptors?.makeAddMarkerInterceptors() ?? [],
        userFunction: self.addMarker(request:context:)
      )

    case "Transfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgTransferRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgTransferResponse>(),
        interceptors: self.interceptors?.makeTransferInterceptors() ?? [],
        userFunction: self.transfer(request:context:)
      )

    case "IbcTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgIbcTransferRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgIbcTransferResponse>(),
        interceptors: self.interceptors?.makeIbcTransferInterceptors() ?? [],
        userFunction: self.ibcTransfer(request:context:)
      )

    case "SetDenomMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgSetDenomMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgSetDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? [],
        userFunction: self.setDenomMetadata(request:context:)
      )

    case "GrantAllowance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgGrantAllowanceRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgGrantAllowanceResponse>(),
        interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? [],
        userFunction: self.grantAllowance(request:context:)
      )

    case "AddFinalizeActivateMarker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>(),
        interceptors: self.interceptors?.makeAddFinalizeActivateMarkerInterceptors() ?? [],
        userFunction: self.addFinalizeActivateMarker(request:context:)
      )

    case "SupplyIncreaseProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>(),
        interceptors: self.interceptors?.makeSupplyIncreaseProposalInterceptors() ?? [],
        userFunction: self.supplyIncreaseProposal(request:context:)
      )

    case "UpdateRequiredAttributes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>(),
        interceptors: self.interceptors?.makeUpdateRequiredAttributesInterceptors() ?? [],
        userFunction: self.updateRequiredAttributes(request:context:)
      )

    case "UpdateForcedTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgUpdateForcedTransferRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgUpdateForcedTransferResponse>(),
        interceptors: self.interceptors?.makeUpdateForcedTransferInterceptors() ?? [],
        userFunction: self.updateForcedTransfer(request:context:)
      )

    case "SetAccountData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgSetAccountDataRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgSetAccountDataResponse>(),
        interceptors: self.interceptors?.makeSetAccountDataInterceptors() ?? [],
        userFunction: self.setAccountData(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Marker Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Provenance_Marker_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Provenance_Marker_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Finalize
  @Sendable func finalize(
    request: Provenance_Marker_V1_MsgFinalizeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgFinalizeResponse

  /// Activate
  @Sendable func activate(
    request: Provenance_Marker_V1_MsgActivateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgActivateResponse

  /// Cancel
  @Sendable func cancel(
    request: Provenance_Marker_V1_MsgCancelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgCancelResponse

  /// Delete
  @Sendable func delete(
    request: Provenance_Marker_V1_MsgDeleteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgDeleteResponse

  /// Mint
  @Sendable func mint(
    request: Provenance_Marker_V1_MsgMintRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgMintResponse

  /// Burn
  @Sendable func burn(
    request: Provenance_Marker_V1_MsgBurnRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgBurnResponse

  /// AddAccess
  @Sendable func addAccess(
    request: Provenance_Marker_V1_MsgAddAccessRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgAddAccessResponse

  /// DeleteAccess
  @Sendable func deleteAccess(
    request: Provenance_Marker_V1_MsgDeleteAccessRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgDeleteAccessResponse

  /// Withdraw
  @Sendable func withdraw(
    request: Provenance_Marker_V1_MsgWithdrawRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgWithdrawResponse

  /// AddMarker
  @Sendable func addMarker(
    request: Provenance_Marker_V1_MsgAddMarkerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgAddMarkerResponse

  /// Transfer marker denominated coin between accounts
  @Sendable func transfer(
    request: Provenance_Marker_V1_MsgTransferRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgTransferResponse

  /// Transfer over ibc any marker(including restricted markers) between ibc accounts.
  /// The relayer is still needed to accomplish ibc middleware relays.
  @Sendable func ibcTransfer(
    request: Provenance_Marker_V1_MsgIbcTransferRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgIbcTransferResponse

  /// Allows Denom Metadata (see bank module) to be set for the Marker's Denom
  @Sendable func setDenomMetadata(
    request: Provenance_Marker_V1_MsgSetDenomMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgSetDenomMetadataResponse

  /// GrantAllowance grants fee allowance to the grantee on the granter's
  /// account with the provided expiration time.
  @Sendable func grantAllowance(
    request: Provenance_Marker_V1_MsgGrantAllowanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgGrantAllowanceResponse

  /// AddFinalizeActivateMarker
  @Sendable func addFinalizeActivateMarker(
    request: Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse

  /// SupplyIncreaseProposal can only be called via gov proposal
  @Sendable func supplyIncreaseProposal(
    request: Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse

  /// UpdateRequiredAttributes will only succeed if signer has transfer authority
  @Sendable func updateRequiredAttributes(
    request: Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse

  /// UpdateForcedTransfer updates the allow_forced_transfer field of a marker via governance proposal.
  @Sendable func updateForcedTransfer(
    request: Provenance_Marker_V1_MsgUpdateForcedTransferRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgUpdateForcedTransferResponse

  /// SetAccountData sets the accountdata for a denom. Signer must have deposit authority.
  @Sendable func setAccountData(
    request: Provenance_Marker_V1_MsgSetAccountDataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Provenance_Marker_V1_MsgSetAccountDataResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Provenance_Marker_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Provenance_Marker_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Provenance_Marker_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Provenance_Marker_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Finalize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgFinalizeRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgFinalizeResponse>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        wrapping: self.finalize(request:context:)
      )

    case "Activate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgActivateRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgActivateResponse>(),
        interceptors: self.interceptors?.makeActivateInterceptors() ?? [],
        wrapping: self.activate(request:context:)
      )

    case "Cancel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgCancelRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        wrapping: self.cancel(request:context:)
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgDeleteRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgDeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: self.delete(request:context:)
      )

    case "Mint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgMintRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        wrapping: self.mint(request:context:)
      )

    case "Burn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgBurnRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        wrapping: self.burn(request:context:)
      )

    case "AddAccess":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgAddAccessRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgAddAccessResponse>(),
        interceptors: self.interceptors?.makeAddAccessInterceptors() ?? [],
        wrapping: self.addAccess(request:context:)
      )

    case "DeleteAccess":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgDeleteAccessRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgDeleteAccessResponse>(),
        interceptors: self.interceptors?.makeDeleteAccessInterceptors() ?? [],
        wrapping: self.deleteAccess(request:context:)
      )

    case "Withdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgWithdrawRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgWithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        wrapping: self.withdraw(request:context:)
      )

    case "AddMarker":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgAddMarkerRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgAddMarkerResponse>(),
        interceptors: self.interceptors?.makeAddMarkerInterceptors() ?? [],
        wrapping: self.addMarker(request:context:)
      )

    case "Transfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgTransferRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgTransferResponse>(),
        interceptors: self.interceptors?.makeTransferInterceptors() ?? [],
        wrapping: self.transfer(request:context:)
      )

    case "IbcTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgIbcTransferRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgIbcTransferResponse>(),
        interceptors: self.interceptors?.makeIbcTransferInterceptors() ?? [],
        wrapping: self.ibcTransfer(request:context:)
      )

    case "SetDenomMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgSetDenomMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgSetDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? [],
        wrapping: self.setDenomMetadata(request:context:)
      )

    case "GrantAllowance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgGrantAllowanceRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgGrantAllowanceResponse>(),
        interceptors: self.interceptors?.makeGrantAllowanceInterceptors() ?? [],
        wrapping: self.grantAllowance(request:context:)
      )

    case "AddFinalizeActivateMarker":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>(),
        interceptors: self.interceptors?.makeAddFinalizeActivateMarkerInterceptors() ?? [],
        wrapping: self.addFinalizeActivateMarker(request:context:)
      )

    case "SupplyIncreaseProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>(),
        interceptors: self.interceptors?.makeSupplyIncreaseProposalInterceptors() ?? [],
        wrapping: self.supplyIncreaseProposal(request:context:)
      )

    case "UpdateRequiredAttributes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>(),
        interceptors: self.interceptors?.makeUpdateRequiredAttributesInterceptors() ?? [],
        wrapping: self.updateRequiredAttributes(request:context:)
      )

    case "UpdateForcedTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgUpdateForcedTransferRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgUpdateForcedTransferResponse>(),
        interceptors: self.interceptors?.makeUpdateForcedTransferInterceptors() ?? [],
        wrapping: self.updateForcedTransfer(request:context:)
      )

    case "SetAccountData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_MsgSetAccountDataRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_MsgSetAccountDataResponse>(),
        interceptors: self.interceptors?.makeSetAccountDataInterceptors() ?? [],
        wrapping: self.setAccountData(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Provenance_Marker_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'finalize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizeInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgFinalizeRequest, Provenance_Marker_V1_MsgFinalizeResponse>]

  /// - Returns: Interceptors to use when handling 'activate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgActivateRequest, Provenance_Marker_V1_MsgActivateResponse>]

  /// - Returns: Interceptors to use when handling 'cancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgCancelRequest, Provenance_Marker_V1_MsgCancelResponse>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgDeleteRequest, Provenance_Marker_V1_MsgDeleteResponse>]

  /// - Returns: Interceptors to use when handling 'mint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgMintRequest, Provenance_Marker_V1_MsgMintResponse>]

  /// - Returns: Interceptors to use when handling 'burn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgBurnRequest, Provenance_Marker_V1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when handling 'addAccess'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddAccessInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgAddAccessRequest, Provenance_Marker_V1_MsgAddAccessResponse>]

  /// - Returns: Interceptors to use when handling 'deleteAccess'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAccessInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgDeleteAccessRequest, Provenance_Marker_V1_MsgDeleteAccessResponse>]

  /// - Returns: Interceptors to use when handling 'withdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgWithdrawRequest, Provenance_Marker_V1_MsgWithdrawResponse>]

  /// - Returns: Interceptors to use when handling 'addMarker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddMarkerInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgAddMarkerRequest, Provenance_Marker_V1_MsgAddMarkerResponse>]

  /// - Returns: Interceptors to use when handling 'transfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgTransferRequest, Provenance_Marker_V1_MsgTransferResponse>]

  /// - Returns: Interceptors to use when handling 'ibcTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIbcTransferInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgIbcTransferRequest, Provenance_Marker_V1_MsgIbcTransferResponse>]

  /// - Returns: Interceptors to use when handling 'setDenomMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDenomMetadataInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgSetDenomMetadataRequest, Provenance_Marker_V1_MsgSetDenomMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'grantAllowance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGrantAllowanceInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgGrantAllowanceRequest, Provenance_Marker_V1_MsgGrantAllowanceResponse>]

  /// - Returns: Interceptors to use when handling 'addFinalizeActivateMarker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddFinalizeActivateMarkerInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgAddFinalizeActivateMarkerRequest, Provenance_Marker_V1_MsgAddFinalizeActivateMarkerResponse>]

  /// - Returns: Interceptors to use when handling 'supplyIncreaseProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyIncreaseProposalInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgSupplyIncreaseProposalRequest, Provenance_Marker_V1_MsgSupplyIncreaseProposalResponse>]

  /// - Returns: Interceptors to use when handling 'updateRequiredAttributes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateRequiredAttributesInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgUpdateRequiredAttributesRequest, Provenance_Marker_V1_MsgUpdateRequiredAttributesResponse>]

  /// - Returns: Interceptors to use when handling 'updateForcedTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateForcedTransferInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgUpdateForcedTransferRequest, Provenance_Marker_V1_MsgUpdateForcedTransferResponse>]

  /// - Returns: Interceptors to use when handling 'setAccountData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAccountDataInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_MsgSetAccountDataRequest, Provenance_Marker_V1_MsgSetAccountDataResponse>]
}

internal enum Provenance_Marker_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "provenance.marker.v1.Msg",
    methods: [
      Provenance_Marker_V1_MsgServerMetadata.Methods.finalize,
      Provenance_Marker_V1_MsgServerMetadata.Methods.activate,
      Provenance_Marker_V1_MsgServerMetadata.Methods.cancel,
      Provenance_Marker_V1_MsgServerMetadata.Methods.delete,
      Provenance_Marker_V1_MsgServerMetadata.Methods.mint,
      Provenance_Marker_V1_MsgServerMetadata.Methods.burn,
      Provenance_Marker_V1_MsgServerMetadata.Methods.addAccess,
      Provenance_Marker_V1_MsgServerMetadata.Methods.deleteAccess,
      Provenance_Marker_V1_MsgServerMetadata.Methods.withdraw,
      Provenance_Marker_V1_MsgServerMetadata.Methods.addMarker,
      Provenance_Marker_V1_MsgServerMetadata.Methods.transfer,
      Provenance_Marker_V1_MsgServerMetadata.Methods.ibcTransfer,
      Provenance_Marker_V1_MsgServerMetadata.Methods.setDenomMetadata,
      Provenance_Marker_V1_MsgServerMetadata.Methods.grantAllowance,
      Provenance_Marker_V1_MsgServerMetadata.Methods.addFinalizeActivateMarker,
      Provenance_Marker_V1_MsgServerMetadata.Methods.supplyIncreaseProposal,
      Provenance_Marker_V1_MsgServerMetadata.Methods.updateRequiredAttributes,
      Provenance_Marker_V1_MsgServerMetadata.Methods.updateForcedTransfer,
      Provenance_Marker_V1_MsgServerMetadata.Methods.setAccountData,
    ]
  )

  internal enum Methods {
    internal static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/provenance.marker.v1.Msg/Finalize",
      type: GRPCCallType.unary
    )

    internal static let activate = GRPCMethodDescriptor(
      name: "Activate",
      path: "/provenance.marker.v1.Msg/Activate",
      type: GRPCCallType.unary
    )

    internal static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/provenance.marker.v1.Msg/Cancel",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/provenance.marker.v1.Msg/Delete",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/provenance.marker.v1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/provenance.marker.v1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let addAccess = GRPCMethodDescriptor(
      name: "AddAccess",
      path: "/provenance.marker.v1.Msg/AddAccess",
      type: GRPCCallType.unary
    )

    internal static let deleteAccess = GRPCMethodDescriptor(
      name: "DeleteAccess",
      path: "/provenance.marker.v1.Msg/DeleteAccess",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/provenance.marker.v1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let addMarker = GRPCMethodDescriptor(
      name: "AddMarker",
      path: "/provenance.marker.v1.Msg/AddMarker",
      type: GRPCCallType.unary
    )

    internal static let transfer = GRPCMethodDescriptor(
      name: "Transfer",
      path: "/provenance.marker.v1.Msg/Transfer",
      type: GRPCCallType.unary
    )

    internal static let ibcTransfer = GRPCMethodDescriptor(
      name: "IbcTransfer",
      path: "/provenance.marker.v1.Msg/IbcTransfer",
      type: GRPCCallType.unary
    )

    internal static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/provenance.marker.v1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let grantAllowance = GRPCMethodDescriptor(
      name: "GrantAllowance",
      path: "/provenance.marker.v1.Msg/GrantAllowance",
      type: GRPCCallType.unary
    )

    internal static let addFinalizeActivateMarker = GRPCMethodDescriptor(
      name: "AddFinalizeActivateMarker",
      path: "/provenance.marker.v1.Msg/AddFinalizeActivateMarker",
      type: GRPCCallType.unary
    )

    internal static let supplyIncreaseProposal = GRPCMethodDescriptor(
      name: "SupplyIncreaseProposal",
      path: "/provenance.marker.v1.Msg/SupplyIncreaseProposal",
      type: GRPCCallType.unary
    )

    internal static let updateRequiredAttributes = GRPCMethodDescriptor(
      name: "UpdateRequiredAttributes",
      path: "/provenance.marker.v1.Msg/UpdateRequiredAttributes",
      type: GRPCCallType.unary
    )

    internal static let updateForcedTransfer = GRPCMethodDescriptor(
      name: "UpdateForcedTransfer",
      path: "/provenance.marker.v1.Msg/UpdateForcedTransfer",
      type: GRPCCallType.unary
    )

    internal static let setAccountData = GRPCMethodDescriptor(
      name: "SetAccountData",
      path: "/provenance.marker.v1.Msg/SetAccountData",
      type: GRPCCallType.unary
    )
  }
}
