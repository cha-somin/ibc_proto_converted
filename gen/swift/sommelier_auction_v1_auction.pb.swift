// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sommelier/auction/v1/auction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Auction_V1_Auction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt32 = 0

  var startingTokensForSale: Cosmos_Base_V1beta1_Coin {
    get {return _startingTokensForSale ?? Cosmos_Base_V1beta1_Coin()}
    set {_startingTokensForSale = newValue}
  }
  /// Returns true if `startingTokensForSale` has been explicitly set.
  var hasStartingTokensForSale: Bool {return self._startingTokensForSale != nil}
  /// Clears the value of `startingTokensForSale`. Subsequent reads from it will return its default value.
  mutating func clearStartingTokensForSale() {self._startingTokensForSale = nil}

  var startBlock: UInt64 = 0

  var endBlock: UInt64 = 0

  var initialPriceDecreaseRate: String = String()

  var currentPriceDecreaseRate: String = String()

  var priceDecreaseBlockInterval: UInt64 = 0

  var initialUnitPriceInUsomm: String = String()

  var currentUnitPriceInUsomm: String = String()

  var remainingTokensForSale: Cosmos_Base_V1beta1_Coin {
    get {return _remainingTokensForSale ?? Cosmos_Base_V1beta1_Coin()}
    set {_remainingTokensForSale = newValue}
  }
  /// Returns true if `remainingTokensForSale` has been explicitly set.
  var hasRemainingTokensForSale: Bool {return self._remainingTokensForSale != nil}
  /// Clears the value of `remainingTokensForSale`. Subsequent reads from it will return its default value.
  mutating func clearRemainingTokensForSale() {self._remainingTokensForSale = nil}

  var fundingModuleAccount: String = String()

  var proceedsModuleAccount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startingTokensForSale: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _remainingTokensForSale: Cosmos_Base_V1beta1_Coin? = nil
}

struct Auction_V1_Bid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var auctionID: UInt32 = 0

  var bidder: String = String()

  var maxBidInUsomm: Cosmos_Base_V1beta1_Coin {
    get {return _maxBidInUsomm ?? Cosmos_Base_V1beta1_Coin()}
    set {_maxBidInUsomm = newValue}
  }
  /// Returns true if `maxBidInUsomm` has been explicitly set.
  var hasMaxBidInUsomm: Bool {return self._maxBidInUsomm != nil}
  /// Clears the value of `maxBidInUsomm`. Subsequent reads from it will return its default value.
  mutating func clearMaxBidInUsomm() {self._maxBidInUsomm = nil}

  var saleTokenMinimumAmount: Cosmos_Base_V1beta1_Coin {
    get {return _saleTokenMinimumAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_saleTokenMinimumAmount = newValue}
  }
  /// Returns true if `saleTokenMinimumAmount` has been explicitly set.
  var hasSaleTokenMinimumAmount: Bool {return self._saleTokenMinimumAmount != nil}
  /// Clears the value of `saleTokenMinimumAmount`. Subsequent reads from it will return its default value.
  mutating func clearSaleTokenMinimumAmount() {self._saleTokenMinimumAmount = nil}

  var totalFulfilledSaleTokens: Cosmos_Base_V1beta1_Coin {
    get {return _totalFulfilledSaleTokens ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalFulfilledSaleTokens = newValue}
  }
  /// Returns true if `totalFulfilledSaleTokens` has been explicitly set.
  var hasTotalFulfilledSaleTokens: Bool {return self._totalFulfilledSaleTokens != nil}
  /// Clears the value of `totalFulfilledSaleTokens`. Subsequent reads from it will return its default value.
  mutating func clearTotalFulfilledSaleTokens() {self._totalFulfilledSaleTokens = nil}

  var saleTokenUnitPriceInUsomm: String = String()

  var totalUsommPaid: Cosmos_Base_V1beta1_Coin {
    get {return _totalUsommPaid ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalUsommPaid = newValue}
  }
  /// Returns true if `totalUsommPaid` has been explicitly set.
  var hasTotalUsommPaid: Bool {return self._totalUsommPaid != nil}
  /// Clears the value of `totalUsommPaid`. Subsequent reads from it will return its default value.
  mutating func clearTotalUsommPaid() {self._totalUsommPaid = nil}

  var blockHeight: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxBidInUsomm: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _saleTokenMinimumAmount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _totalFulfilledSaleTokens: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _totalUsommPaid: Cosmos_Base_V1beta1_Coin? = nil
}

struct Auction_V1_TokenPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var usdPrice: String = String()

  var lastUpdatedBlock: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Auction_V1_ProposedTokenPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var usdPrice: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Auction_V1_Auction: @unchecked Sendable {}
extension Auction_V1_Bid: @unchecked Sendable {}
extension Auction_V1_TokenPrice: @unchecked Sendable {}
extension Auction_V1_ProposedTokenPrice: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "auction.v1"

extension Auction_V1_Auction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Auction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "starting_tokens_for_sale"),
    3: .standard(proto: "start_block"),
    4: .standard(proto: "end_block"),
    5: .standard(proto: "initial_price_decrease_rate"),
    6: .standard(proto: "current_price_decrease_rate"),
    7: .standard(proto: "price_decrease_block_interval"),
    8: .standard(proto: "initial_unit_price_in_usomm"),
    9: .standard(proto: "current_unit_price_in_usomm"),
    10: .standard(proto: "remaining_tokens_for_sale"),
    11: .standard(proto: "funding_module_account"),
    12: .standard(proto: "proceeds_module_account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startingTokensForSale) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.startBlock) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.endBlock) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.initialPriceDecreaseRate) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.currentPriceDecreaseRate) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.priceDecreaseBlockInterval) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.initialUnitPriceInUsomm) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.currentUnitPriceInUsomm) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._remainingTokensForSale) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.fundingModuleAccount) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.proceedsModuleAccount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._startingTokensForSale {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.startBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.startBlock, fieldNumber: 3)
    }
    if self.endBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.endBlock, fieldNumber: 4)
    }
    if !self.initialPriceDecreaseRate.isEmpty {
      try visitor.visitSingularStringField(value: self.initialPriceDecreaseRate, fieldNumber: 5)
    }
    if !self.currentPriceDecreaseRate.isEmpty {
      try visitor.visitSingularStringField(value: self.currentPriceDecreaseRate, fieldNumber: 6)
    }
    if self.priceDecreaseBlockInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.priceDecreaseBlockInterval, fieldNumber: 7)
    }
    if !self.initialUnitPriceInUsomm.isEmpty {
      try visitor.visitSingularStringField(value: self.initialUnitPriceInUsomm, fieldNumber: 8)
    }
    if !self.currentUnitPriceInUsomm.isEmpty {
      try visitor.visitSingularStringField(value: self.currentUnitPriceInUsomm, fieldNumber: 9)
    }
    try { if let v = self._remainingTokensForSale {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if !self.fundingModuleAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.fundingModuleAccount, fieldNumber: 11)
    }
    if !self.proceedsModuleAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.proceedsModuleAccount, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Auction_V1_Auction, rhs: Auction_V1_Auction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._startingTokensForSale != rhs._startingTokensForSale {return false}
    if lhs.startBlock != rhs.startBlock {return false}
    if lhs.endBlock != rhs.endBlock {return false}
    if lhs.initialPriceDecreaseRate != rhs.initialPriceDecreaseRate {return false}
    if lhs.currentPriceDecreaseRate != rhs.currentPriceDecreaseRate {return false}
    if lhs.priceDecreaseBlockInterval != rhs.priceDecreaseBlockInterval {return false}
    if lhs.initialUnitPriceInUsomm != rhs.initialUnitPriceInUsomm {return false}
    if lhs.currentUnitPriceInUsomm != rhs.currentUnitPriceInUsomm {return false}
    if lhs._remainingTokensForSale != rhs._remainingTokensForSale {return false}
    if lhs.fundingModuleAccount != rhs.fundingModuleAccount {return false}
    if lhs.proceedsModuleAccount != rhs.proceedsModuleAccount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auction_V1_Bid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Bid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "auction_id"),
    3: .same(proto: "bidder"),
    4: .standard(proto: "max_bid_in_usomm"),
    5: .standard(proto: "sale_token_minimum_amount"),
    6: .standard(proto: "total_fulfilled_sale_tokens"),
    7: .standard(proto: "sale_token_unit_price_in_usomm"),
    8: .standard(proto: "total_usomm_paid"),
    9: .standard(proto: "block_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.auctionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bidder) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._maxBidInUsomm) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._saleTokenMinimumAmount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._totalFulfilledSaleTokens) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.saleTokenUnitPriceInUsomm) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._totalUsommPaid) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.auctionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.auctionID, fieldNumber: 2)
    }
    if !self.bidder.isEmpty {
      try visitor.visitSingularStringField(value: self.bidder, fieldNumber: 3)
    }
    try { if let v = self._maxBidInUsomm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._saleTokenMinimumAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._totalFulfilledSaleTokens {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.saleTokenUnitPriceInUsomm.isEmpty {
      try visitor.visitSingularStringField(value: self.saleTokenUnitPriceInUsomm, fieldNumber: 7)
    }
    try { if let v = self._totalUsommPaid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Auction_V1_Bid, rhs: Auction_V1_Bid) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.auctionID != rhs.auctionID {return false}
    if lhs.bidder != rhs.bidder {return false}
    if lhs._maxBidInUsomm != rhs._maxBidInUsomm {return false}
    if lhs._saleTokenMinimumAmount != rhs._saleTokenMinimumAmount {return false}
    if lhs._totalFulfilledSaleTokens != rhs._totalFulfilledSaleTokens {return false}
    if lhs.saleTokenUnitPriceInUsomm != rhs.saleTokenUnitPriceInUsomm {return false}
    if lhs._totalUsommPaid != rhs._totalUsommPaid {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auction_V1_TokenPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenPrice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "usd_price"),
    3: .standard(proto: "last_updated_block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.usdPrice) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.lastUpdatedBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.usdPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.usdPrice, fieldNumber: 2)
    }
    if self.lastUpdatedBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastUpdatedBlock, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Auction_V1_TokenPrice, rhs: Auction_V1_TokenPrice) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.usdPrice != rhs.usdPrice {return false}
    if lhs.lastUpdatedBlock != rhs.lastUpdatedBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auction_V1_ProposedTokenPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProposedTokenPrice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "usd_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.usdPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.usdPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.usdPrice, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Auction_V1_ProposedTokenPrice, rhs: Auction_V1_ProposedTokenPrice) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.usdPrice != rhs.usdPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
