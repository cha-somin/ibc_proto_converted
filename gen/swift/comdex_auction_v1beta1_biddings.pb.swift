// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/auction/v1beta1/biddings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Auction_V1beta1_SurplusBiddings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var biddingID: UInt64 = 0

  var auctionID: UInt64 = 0

  var auctionStatus: String = String()

  var auctionedCollateral: Cosmos_Base_V1beta1_Coin {
    get {return _auctionedCollateral ?? Cosmos_Base_V1beta1_Coin()}
    set {_auctionedCollateral = newValue}
  }
  /// Returns true if `auctionedCollateral` has been explicitly set.
  var hasAuctionedCollateral: Bool {return self._auctionedCollateral != nil}
  /// Clears the value of `auctionedCollateral`. Subsequent reads from it will return its default value.
  mutating func clearAuctionedCollateral() {self._auctionedCollateral = nil}

  var bidder: String = String()

  var bid: Cosmos_Base_V1beta1_Coin {
    get {return _bid ?? Cosmos_Base_V1beta1_Coin()}
    set {_bid = newValue}
  }
  /// Returns true if `bid` has been explicitly set.
  var hasBid: Bool {return self._bid != nil}
  /// Clears the value of `bid`. Subsequent reads from it will return its default value.
  mutating func clearBid() {self._bid = nil}

  var biddingTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _biddingTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_biddingTimestamp = newValue}
  }
  /// Returns true if `biddingTimestamp` has been explicitly set.
  var hasBiddingTimestamp: Bool {return self._biddingTimestamp != nil}
  /// Clears the value of `biddingTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearBiddingTimestamp() {self._biddingTimestamp = nil}

  var biddingStatus: String = String()

  var auctionMappingID: UInt64 = 0

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _auctionedCollateral: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _bid: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _biddingTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Auction_V1beta1_DebtBiddings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var biddingID: UInt64 = 0

  var auctionID: UInt64 = 0

  var auctionStatus: String = String()

  var outflowTokens: Cosmos_Base_V1beta1_Coin {
    get {return _outflowTokens ?? Cosmos_Base_V1beta1_Coin()}
    set {_outflowTokens = newValue}
  }
  /// Returns true if `outflowTokens` has been explicitly set.
  var hasOutflowTokens: Bool {return self._outflowTokens != nil}
  /// Clears the value of `outflowTokens`. Subsequent reads from it will return its default value.
  mutating func clearOutflowTokens() {self._outflowTokens = nil}

  var bidder: String = String()

  var bid: Cosmos_Base_V1beta1_Coin {
    get {return _bid ?? Cosmos_Base_V1beta1_Coin()}
    set {_bid = newValue}
  }
  /// Returns true if `bid` has been explicitly set.
  var hasBid: Bool {return self._bid != nil}
  /// Clears the value of `bid`. Subsequent reads from it will return its default value.
  mutating func clearBid() {self._bid = nil}

  var biddingTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _biddingTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_biddingTimestamp = newValue}
  }
  /// Returns true if `biddingTimestamp` has been explicitly set.
  var hasBiddingTimestamp: Bool {return self._biddingTimestamp != nil}
  /// Clears the value of `biddingTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearBiddingTimestamp() {self._biddingTimestamp = nil}

  var biddingStatus: String = String()

  var auctionMappingID: UInt64 = 0

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _outflowTokens: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _bid: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _biddingTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Auction_V1beta1_DutchBiddings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var biddingID: UInt64 = 0

  var auctionID: UInt64 = 0

  var auctionStatus: String = String()

  var outflowTokenAmount: Cosmos_Base_V1beta1_Coin {
    get {return _outflowTokenAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_outflowTokenAmount = newValue}
  }
  /// Returns true if `outflowTokenAmount` has been explicitly set.
  var hasOutflowTokenAmount: Bool {return self._outflowTokenAmount != nil}
  /// Clears the value of `outflowTokenAmount`. Subsequent reads from it will return its default value.
  mutating func clearOutflowTokenAmount() {self._outflowTokenAmount = nil}

  var inflowTokenAmount: Cosmos_Base_V1beta1_Coin {
    get {return _inflowTokenAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_inflowTokenAmount = newValue}
  }
  /// Returns true if `inflowTokenAmount` has been explicitly set.
  var hasInflowTokenAmount: Bool {return self._inflowTokenAmount != nil}
  /// Clears the value of `inflowTokenAmount`. Subsequent reads from it will return its default value.
  mutating func clearInflowTokenAmount() {self._inflowTokenAmount = nil}

  var bidder: String = String()

  var biddingTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _biddingTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_biddingTimestamp = newValue}
  }
  /// Returns true if `biddingTimestamp` has been explicitly set.
  var hasBiddingTimestamp: Bool {return self._biddingTimestamp != nil}
  /// Clears the value of `biddingTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearBiddingTimestamp() {self._biddingTimestamp = nil}

  var biddingStatus: String = String()

  var auctionMappingID: UInt64 = 0

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _outflowTokenAmount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _inflowTokenAmount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _biddingTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Auction_V1beta1_SurplusBiddings: @unchecked Sendable {}
extension Comdex_Auction_V1beta1_DebtBiddings: @unchecked Sendable {}
extension Comdex_Auction_V1beta1_DutchBiddings: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.auction.v1beta1"

extension Comdex_Auction_V1beta1_SurplusBiddings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SurplusBiddings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bidding_id"),
    2: .standard(proto: "auction_id"),
    3: .standard(proto: "auction_status"),
    4: .standard(proto: "auctioned_collateral"),
    5: .same(proto: "bidder"),
    6: .same(proto: "bid"),
    7: .standard(proto: "bidding_timestamp"),
    8: .standard(proto: "bidding_status"),
    9: .standard(proto: "auction_mapping_id"),
    10: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.biddingID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.auctionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.auctionStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._auctionedCollateral) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bidder) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._bid) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._biddingTimestamp) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.biddingStatus) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.auctionMappingID) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.biddingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.biddingID, fieldNumber: 1)
    }
    if self.auctionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionID, fieldNumber: 2)
    }
    if !self.auctionStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.auctionStatus, fieldNumber: 3)
    }
    try { if let v = self._auctionedCollateral {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.bidder.isEmpty {
      try visitor.visitSingularStringField(value: self.bidder, fieldNumber: 5)
    }
    try { if let v = self._bid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._biddingTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.biddingStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.biddingStatus, fieldNumber: 8)
    }
    if self.auctionMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionMappingID, fieldNumber: 9)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Auction_V1beta1_SurplusBiddings, rhs: Comdex_Auction_V1beta1_SurplusBiddings) -> Bool {
    if lhs.biddingID != rhs.biddingID {return false}
    if lhs.auctionID != rhs.auctionID {return false}
    if lhs.auctionStatus != rhs.auctionStatus {return false}
    if lhs._auctionedCollateral != rhs._auctionedCollateral {return false}
    if lhs.bidder != rhs.bidder {return false}
    if lhs._bid != rhs._bid {return false}
    if lhs._biddingTimestamp != rhs._biddingTimestamp {return false}
    if lhs.biddingStatus != rhs.biddingStatus {return false}
    if lhs.auctionMappingID != rhs.auctionMappingID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Auction_V1beta1_DebtBiddings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DebtBiddings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bidding_id"),
    2: .standard(proto: "auction_id"),
    3: .standard(proto: "auction_status"),
    4: .standard(proto: "outflow_tokens"),
    5: .same(proto: "bidder"),
    6: .same(proto: "bid"),
    7: .standard(proto: "bidding_timestamp"),
    8: .standard(proto: "bidding_status"),
    9: .standard(proto: "auction_mapping_id"),
    10: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.biddingID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.auctionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.auctionStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._outflowTokens) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bidder) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._bid) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._biddingTimestamp) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.biddingStatus) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.auctionMappingID) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.biddingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.biddingID, fieldNumber: 1)
    }
    if self.auctionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionID, fieldNumber: 2)
    }
    if !self.auctionStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.auctionStatus, fieldNumber: 3)
    }
    try { if let v = self._outflowTokens {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.bidder.isEmpty {
      try visitor.visitSingularStringField(value: self.bidder, fieldNumber: 5)
    }
    try { if let v = self._bid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._biddingTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.biddingStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.biddingStatus, fieldNumber: 8)
    }
    if self.auctionMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionMappingID, fieldNumber: 9)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Auction_V1beta1_DebtBiddings, rhs: Comdex_Auction_V1beta1_DebtBiddings) -> Bool {
    if lhs.biddingID != rhs.biddingID {return false}
    if lhs.auctionID != rhs.auctionID {return false}
    if lhs.auctionStatus != rhs.auctionStatus {return false}
    if lhs._outflowTokens != rhs._outflowTokens {return false}
    if lhs.bidder != rhs.bidder {return false}
    if lhs._bid != rhs._bid {return false}
    if lhs._biddingTimestamp != rhs._biddingTimestamp {return false}
    if lhs.biddingStatus != rhs.biddingStatus {return false}
    if lhs.auctionMappingID != rhs.auctionMappingID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Auction_V1beta1_DutchBiddings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DutchBiddings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bidding_id"),
    2: .standard(proto: "auction_id"),
    3: .standard(proto: "auction_status"),
    4: .standard(proto: "outflow_token_amount"),
    5: .standard(proto: "inflow_token_amount"),
    6: .same(proto: "bidder"),
    7: .standard(proto: "bidding_timestamp"),
    8: .standard(proto: "bidding_status"),
    9: .standard(proto: "auction_mapping_id"),
    10: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.biddingID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.auctionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.auctionStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._outflowTokenAmount) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._inflowTokenAmount) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.bidder) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._biddingTimestamp) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.biddingStatus) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.auctionMappingID) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.biddingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.biddingID, fieldNumber: 1)
    }
    if self.auctionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionID, fieldNumber: 2)
    }
    if !self.auctionStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.auctionStatus, fieldNumber: 3)
    }
    try { if let v = self._outflowTokenAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._inflowTokenAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.bidder.isEmpty {
      try visitor.visitSingularStringField(value: self.bidder, fieldNumber: 6)
    }
    try { if let v = self._biddingTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.biddingStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.biddingStatus, fieldNumber: 8)
    }
    if self.auctionMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.auctionMappingID, fieldNumber: 9)
    }
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Auction_V1beta1_DutchBiddings, rhs: Comdex_Auction_V1beta1_DutchBiddings) -> Bool {
    if lhs.biddingID != rhs.biddingID {return false}
    if lhs.auctionID != rhs.auctionID {return false}
    if lhs.auctionStatus != rhs.auctionStatus {return false}
    if lhs._outflowTokenAmount != rhs._outflowTokenAmount {return false}
    if lhs._inflowTokenAmount != rhs._inflowTokenAmount {return false}
    if lhs.bidder != rhs.bidder {return false}
    if lhs._biddingTimestamp != rhs._biddingTimestamp {return false}
    if lhs.biddingStatus != rhs.biddingStatus {return false}
    if lhs.auctionMappingID != rhs.auctionMappingID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
