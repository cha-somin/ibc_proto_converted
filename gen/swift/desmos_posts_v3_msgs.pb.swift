// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/posts/v3/msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreatePost represents the message to be used to create a post.
struct Desmos_Posts_V3_MsgCreatePost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which the post must be created
  var subspaceID: UInt64 = 0

  /// Id of the section inside which the post must be created
  var sectionID: UInt32 = 0

  /// (optional) External id for this post
  var externalID: String = String()

  /// (optional) Text of the post
  var text: String = String()

  /// (optional) Entities connected to this post
  var entities: Desmos_Posts_V3_Entities {
    get {return _entities ?? Desmos_Posts_V3_Entities()}
    set {_entities = newValue}
  }
  /// Returns true if `entities` has been explicitly set.
  var hasEntities: Bool {return self._entities != nil}
  /// Clears the value of `entities`. Subsequent reads from it will return its default value.
  mutating func clearEntities() {self._entities = nil}

  /// Tags connected to this post
  var tags: [String] = []

  /// Attachments of the post
  var attachments: [SwiftProtobuf.Google_Protobuf_Any] = []

  /// Author of the post
  var author: String = String()

  /// (optional) Id of the original post of the conversation
  var conversationID: UInt64 = 0

  /// Reply settings of this post
  var replySettings: Desmos_Posts_V3_ReplySetting = .unspecified

  /// A list this posts references (either as a reply, repost or quote)
  var referencedPosts: [Desmos_Posts_V3_PostReference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _entities: Desmos_Posts_V3_Entities? = nil
}

/// MsgCreatePostResponse defines the Msg/CreatePost response type.
struct Desmos_Posts_V3_MsgCreatePostResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the newly created post
  var postID: UInt64 = 0

  /// Creation date of the post
  var creationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _creationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_creationDate = newValue}
  }
  /// Returns true if `creationDate` has been explicitly set.
  var hasCreationDate: Bool {return self._creationDate != nil}
  /// Clears the value of `creationDate`. Subsequent reads from it will return its default value.
  mutating func clearCreationDate() {self._creationDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _creationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// MsgEditPost represents the message to be used to edit a post.
struct Desmos_Posts_V3_MsgEditPost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which the post is
  var subspaceID: UInt64 = 0

  /// Id of the post to edit
  var postID: UInt64 = 0

  /// New text of the post. If set to [do-not-modify] it will change the current
  /// post's text.
  var text: String = String()

  /// New entities connected to this post. These will always replace the current
  /// post's entities
  var entities: Desmos_Posts_V3_Entities {
    get {return _entities ?? Desmos_Posts_V3_Entities()}
    set {_entities = newValue}
  }
  /// Returns true if `entities` has been explicitly set.
  var hasEntities: Bool {return self._entities != nil}
  /// Clears the value of `entities`. Subsequent reads from it will return its default value.
  mutating func clearEntities() {self._entities = nil}

  /// New tags connected to this post. These will always replace the current
  /// post's tags
  var tags: [String] = []

  /// Editor of the post
  var editor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _entities: Desmos_Posts_V3_Entities? = nil
}

/// MsgCreatePostResponse defines the Msg/EditPost response type.
struct Desmos_Posts_V3_MsgEditPostResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Edit date of the post
  var editDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _editDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_editDate = newValue}
  }
  /// Returns true if `editDate` has been explicitly set.
  var hasEditDate: Bool {return self._editDate != nil}
  /// Clears the value of `editDate`. Subsequent reads from it will return its default value.
  mutating func clearEditDate() {self._editDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _editDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// MsgDeletePost represents the message used when deleting a post.
struct Desmos_Posts_V3_MsgDeletePost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace containing the post
  var subspaceID: UInt64 = 0

  /// Id of the post to be deleted
  var postID: UInt64 = 0

  /// User that is deleting the post
  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeletePostResponse represents the Msg/DeletePost response type
struct Desmos_Posts_V3_MsgDeletePostResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAddPostAttachment represents the message that should be
/// used when adding an attachment to post
struct Desmos_Posts_V3_MsgAddPostAttachment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace containing the post
  var subspaceID: UInt64 = 0

  /// Id of the post to which to add the attachment
  var postID: UInt64 = 0

  /// Content of the attachment
  var content: SwiftProtobuf.Google_Protobuf_Any {
    get {return _content ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  /// Editor of the post
  var editor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// MsgAddPostAttachmentResponse defines the Msg/AddPostAttachment response type.
struct Desmos_Posts_V3_MsgAddPostAttachmentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// New id of the uploaded attachment
  var attachmentID: UInt32 = 0

  /// Edit date of the post
  var editDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _editDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_editDate = newValue}
  }
  /// Returns true if `editDate` has been explicitly set.
  var hasEditDate: Bool {return self._editDate != nil}
  /// Clears the value of `editDate`. Subsequent reads from it will return its default value.
  mutating func clearEditDate() {self._editDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _editDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// MsgRemovePostAttachment represents the message to be used when
/// removing an attachment from a post
struct Desmos_Posts_V3_MsgRemovePostAttachment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace containing the post
  var subspaceID: UInt64 = 0

  /// Id of the post from which to remove the attachment
  var postID: UInt64 = 0

  /// Id of the attachment to be removed
  var attachmentID: UInt32 = 0

  /// User that is removing the attachment
  var editor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemovePostAttachmentResponse defines the
/// Msg/RemovePostAttachment response type.
struct Desmos_Posts_V3_MsgRemovePostAttachmentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Edit date of the post
  var editDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _editDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_editDate = newValue}
  }
  /// Returns true if `editDate` has been explicitly set.
  var hasEditDate: Bool {return self._editDate != nil}
  /// Clears the value of `editDate`. Subsequent reads from it will return its default value.
  mutating func clearEditDate() {self._editDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _editDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// MsgAnswerPoll represents the message used to answer a poll
struct Desmos_Posts_V3_MsgAnswerPoll {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace containing the post
  var subspaceID: UInt64 = 0

  /// Id of the post that contains the poll to be answered
  var postID: UInt64 = 0

  /// Id of the poll to be answered
  var pollID: UInt32 = 0

  /// Indexes of the answer inside the ProvidedAnswers array
  var answersIndexes: [UInt32] = []

  /// Address of the user answering the poll
  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAnswerPollResponse represents the MSg/AnswerPoll response type
struct Desmos_Posts_V3_MsgAnswerPollResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateParams is the Msg/UpdateParams request type.
///
/// Since: Desmos 5.0.0
struct Desmos_Posts_V3_MsgUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address that controls the module (defaults to x/gov unless
  /// overwritten).
  var authority: String = String()

  /// params defines the parameters to update.
  ///
  /// NOTE: All parameters must be supplied.
  var params: Desmos_Posts_V3_Params {
    get {return _params ?? Desmos_Posts_V3_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Desmos_Posts_V3_Params? = nil
}

/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
///
/// Since: Desmos 5.0.0
struct Desmos_Posts_V3_MsgUpdateParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Desmos_Posts_V3_MsgCreatePost: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgCreatePostResponse: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgEditPost: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgEditPostResponse: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgDeletePost: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgDeletePostResponse: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgAddPostAttachment: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgAddPostAttachmentResponse: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgRemovePostAttachment: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgRemovePostAttachmentResponse: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgAnswerPoll: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgAnswerPollResponse: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgUpdateParams: @unchecked Sendable {}
extension Desmos_Posts_V3_MsgUpdateParamsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.posts.v3"

extension Desmos_Posts_V3_MsgCreatePost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePost"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "section_id"),
    3: .standard(proto: "external_id"),
    4: .same(proto: "text"),
    5: .same(proto: "entities"),
    6: .same(proto: "tags"),
    7: .same(proto: "attachments"),
    8: .same(proto: "author"),
    9: .standard(proto: "conversation_id"),
    10: .standard(proto: "reply_settings"),
    11: .standard(proto: "referenced_posts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.sectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.externalID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._entities) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.attachments) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.author) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.conversationID) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.replySettings) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.referencedPosts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.sectionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.sectionID, fieldNumber: 2)
    }
    if !self.externalID.isEmpty {
      try visitor.visitSingularStringField(value: self.externalID, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    try { if let v = self._entities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 6)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 7)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 8)
    }
    if self.conversationID != 0 {
      try visitor.visitSingularUInt64Field(value: self.conversationID, fieldNumber: 9)
    }
    if self.replySettings != .unspecified {
      try visitor.visitSingularEnumField(value: self.replySettings, fieldNumber: 10)
    }
    if !self.referencedPosts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.referencedPosts, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgCreatePost, rhs: Desmos_Posts_V3_MsgCreatePost) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.sectionID != rhs.sectionID {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.text != rhs.text {return false}
    if lhs._entities != rhs._entities {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs.author != rhs.author {return false}
    if lhs.conversationID != rhs.conversationID {return false}
    if lhs.replySettings != rhs.replySettings {return false}
    if lhs.referencedPosts != rhs.referencedPosts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgCreatePostResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePostResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .standard(proto: "creation_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._creationDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 1)
    }
    try { if let v = self._creationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgCreatePostResponse, rhs: Desmos_Posts_V3_MsgCreatePostResponse) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs._creationDate != rhs._creationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgEditPost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditPost"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .same(proto: "text"),
    4: .same(proto: "entities"),
    5: .same(proto: "tags"),
    6: .same(proto: "editor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._entities) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.editor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    try { if let v = self._entities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 5)
    }
    if !self.editor.isEmpty {
      try visitor.visitSingularStringField(value: self.editor, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgEditPost, rhs: Desmos_Posts_V3_MsgEditPost) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.text != rhs.text {return false}
    if lhs._entities != rhs._entities {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.editor != rhs.editor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgEditPostResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditPostResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "edit_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._editDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._editDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgEditPostResponse, rhs: Desmos_Posts_V3_MsgEditPostResponse) -> Bool {
    if lhs._editDate != rhs._editDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgDeletePost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeletePost"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgDeletePost, rhs: Desmos_Posts_V3_MsgDeletePost) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgDeletePostResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeletePostResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgDeletePostResponse, rhs: Desmos_Posts_V3_MsgDeletePostResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgAddPostAttachment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddPostAttachment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .same(proto: "content"),
    4: .same(proto: "editor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.editor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    try { if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.editor.isEmpty {
      try visitor.visitSingularStringField(value: self.editor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgAddPostAttachment, rhs: Desmos_Posts_V3_MsgAddPostAttachment) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs._content != rhs._content {return false}
    if lhs.editor != rhs.editor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgAddPostAttachmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddPostAttachmentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attachment_id"),
    2: .standard(proto: "edit_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.attachmentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._editDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.attachmentID != 0 {
      try visitor.visitSingularUInt32Field(value: self.attachmentID, fieldNumber: 1)
    }
    try { if let v = self._editDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgAddPostAttachmentResponse, rhs: Desmos_Posts_V3_MsgAddPostAttachmentResponse) -> Bool {
    if lhs.attachmentID != rhs.attachmentID {return false}
    if lhs._editDate != rhs._editDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgRemovePostAttachment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemovePostAttachment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .standard(proto: "attachment_id"),
    4: .same(proto: "editor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.attachmentID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.editor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    if self.attachmentID != 0 {
      try visitor.visitSingularUInt32Field(value: self.attachmentID, fieldNumber: 3)
    }
    if !self.editor.isEmpty {
      try visitor.visitSingularStringField(value: self.editor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgRemovePostAttachment, rhs: Desmos_Posts_V3_MsgRemovePostAttachment) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.attachmentID != rhs.attachmentID {return false}
    if lhs.editor != rhs.editor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgRemovePostAttachmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemovePostAttachmentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "edit_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._editDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._editDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgRemovePostAttachmentResponse, rhs: Desmos_Posts_V3_MsgRemovePostAttachmentResponse) -> Bool {
    if lhs._editDate != rhs._editDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgAnswerPoll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAnswerPoll"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .standard(proto: "poll_id"),
    4: .standard(proto: "answers_indexes"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.pollID) }()
      case 4: try { try decoder.decodeRepeatedUInt32Field(value: &self.answersIndexes) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    if self.pollID != 0 {
      try visitor.visitSingularUInt32Field(value: self.pollID, fieldNumber: 3)
    }
    if !self.answersIndexes.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.answersIndexes, fieldNumber: 4)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgAnswerPoll, rhs: Desmos_Posts_V3_MsgAnswerPoll) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.pollID != rhs.pollID {return false}
    if lhs.answersIndexes != rhs.answersIndexes {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgAnswerPollResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAnswerPollResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgAnswerPollResponse, rhs: Desmos_Posts_V3_MsgAnswerPollResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgUpdateParams, rhs: Desmos_Posts_V3_MsgUpdateParams) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V3_MsgUpdateParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParamsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V3_MsgUpdateParamsResponse, rhs: Desmos_Posts_V3_MsgUpdateParamsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
