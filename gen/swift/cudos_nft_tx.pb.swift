// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cudos/nft/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgIssueDenom defines an SDK message for creating a new denom.
struct Cudosnode_Cudosnode_Nft_MsgIssueDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var schema: String = String()

  var sender: String = String()

  var contractAddressSigner: String = String()

  var symbol: String = String()

  var traits: String = String()

  var minter: String = String()

  var description_p: String = String()

  var data: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
struct Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTransferNft defines an SDK message for transferring an NFT to recipient.
struct Cudosnode_Cudosnode_Nft_MsgTransferNft {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denomID: String = String()

  var tokenID: String = String()

  var from: String = String()

  var to: String = String()

  var sender: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTransferNftResponse defines the Msg/TransferNft response type.
struct Cudosnode_Cudosnode_Nft_MsgTransferNftResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgApproveNft defines an SDK message for granted approval.
struct Cudosnode_Cudosnode_Nft_MsgApproveNft {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var denomID: String = String()

  var sender: String = String()

  var approvedAddress: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgApproveNft defines the Msg/Approve response type.
struct Cudosnode_Cudosnode_Nft_MsgApproveNftResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cudosnode_Cudosnode_Nft_MsgApproveAllNft {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `operator`: String = String()

  var sender: String = String()

  var approved: Bool = false

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgApproveNft defines the Msg/Approve response type.
struct Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRevokeNft defines an SDK message for revoking a previously granted permission to transfer the given an NFT.
struct Cudosnode_Cudosnode_Nft_MsgRevokeNft {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addressToRevoke: String = String()

  var denomID: String = String()

  var tokenID: String = String()

  var sender: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRevokeNftResponse defines the Msg/RevokeNft response type.
struct Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditNFT defines an SDK message for editing a nft.
struct Cudosnode_Cudosnode_Nft_MsgEditNFT {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var denomID: String = String()

  var name: String = String()

  var uri: String = String()

  var data: String = String()

  var sender: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditNFTResponse defines the Msg/EditNFT response type.
struct Cudosnode_Cudosnode_Nft_MsgEditNFTResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgMintNFT defines an SDK message for creating a new NFT.
struct Cudosnode_Cudosnode_Nft_MsgMintNFT {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denomID: String = String()

  var name: String = String()

  var uri: String = String()

  var data: String = String()

  var sender: String = String()

  var recipient: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgMintNFTResponse defines the Msg/MintNFT response type.
struct Cudosnode_Cudosnode_Nft_MsgMintNFTResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgBurnNFT defines an SDK message for burning a NFT.
struct Cudosnode_Cudosnode_Nft_MsgBurnNFT {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var denomID: String = String()

  var sender: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
struct Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTransferDenom defines an SDK message for transferring an denom to recipient.
struct Cudosnode_Cudosnode_Nft_MsgTransferDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var sender: String = String()

  var recipient: String = String()

  var contractAddressSigner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTransferDenomResponse defines the Msg/TransferDenom response type.
struct Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cudosnode_Cudosnode_Nft_MsgIssueDenom: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgTransferNft: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgTransferNftResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgApproveNft: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgApproveNftResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgApproveAllNft: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgRevokeNft: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgEditNFT: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgEditNFTResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgMintNFT: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgMintNFTResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgBurnNFT: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgTransferDenom: @unchecked Sendable {}
extension Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cudosnode.cudosnode.nft"

extension Cudosnode_Cudosnode_Nft_MsgIssueDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgIssueDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "schema"),
    4: .same(proto: "sender"),
    5: .same(proto: "contractAddressSigner"),
    6: .same(proto: "symbol"),
    7: .same(proto: "traits"),
    8: .same(proto: "minter"),
    9: .same(proto: "description"),
    10: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.schema) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.traits) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.minter) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.schema.isEmpty {
      try visitor.visitSingularStringField(value: self.schema, fieldNumber: 3)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 4)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 5)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 6)
    }
    if !self.traits.isEmpty {
      try visitor.visitSingularStringField(value: self.traits, fieldNumber: 7)
    }
    if !self.minter.isEmpty {
      try visitor.visitSingularStringField(value: self.minter, fieldNumber: 8)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 9)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgIssueDenom, rhs: Cudosnode_Cudosnode_Nft_MsgIssueDenom) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.schema != rhs.schema {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.traits != rhs.traits {return false}
    if lhs.minter != rhs.minter {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgIssueDenomResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse, rhs: Cudosnode_Cudosnode_Nft_MsgIssueDenomResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgTransferNft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTransferNft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "denom_id"),
    2: .standard(proto: "token_id"),
    3: .same(proto: "from"),
    4: .same(proto: "to"),
    5: .same(proto: "sender"),
    6: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 1)
    }
    if !self.tokenID.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenID, fieldNumber: 2)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 3)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 4)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 5)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgTransferNft, rhs: Cudosnode_Cudosnode_Nft_MsgTransferNft) -> Bool {
    if lhs.denomID != rhs.denomID {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgTransferNftResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTransferNftResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgTransferNftResponse, rhs: Cudosnode_Cudosnode_Nft_MsgTransferNftResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgApproveNft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgApproveNft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "denom_id"),
    3: .same(proto: "sender"),
    4: .same(proto: "approvedAddress"),
    5: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.approvedAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    if !self.approvedAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.approvedAddress, fieldNumber: 4)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgApproveNft, rhs: Cudosnode_Cudosnode_Nft_MsgApproveNft) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.denomID != rhs.denomID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.approvedAddress != rhs.approvedAddress {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgApproveNftResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgApproveNftResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgApproveNftResponse, rhs: Cudosnode_Cudosnode_Nft_MsgApproveNftResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgApproveAllNft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgApproveAllNft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
    2: .same(proto: "sender"),
    3: .same(proto: "approved"),
    4: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.`operator`) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.approved) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.`operator`.isEmpty {
      try visitor.visitSingularStringField(value: self.`operator`, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if self.approved != false {
      try visitor.visitSingularBoolField(value: self.approved, fieldNumber: 3)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgApproveAllNft, rhs: Cudosnode_Cudosnode_Nft_MsgApproveAllNft) -> Bool {
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.approved != rhs.approved {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgApproveAllNftResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse, rhs: Cudosnode_Cudosnode_Nft_MsgApproveAllNftResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgRevokeNft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRevokeNft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addressToRevoke"),
    2: .standard(proto: "denom_id"),
    3: .standard(proto: "token_id"),
    4: .same(proto: "sender"),
    5: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.addressToRevoke) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addressToRevoke.isEmpty {
      try visitor.visitSingularStringField(value: self.addressToRevoke, fieldNumber: 1)
    }
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 2)
    }
    if !self.tokenID.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenID, fieldNumber: 3)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 4)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgRevokeNft, rhs: Cudosnode_Cudosnode_Nft_MsgRevokeNft) -> Bool {
    if lhs.addressToRevoke != rhs.addressToRevoke {return false}
    if lhs.denomID != rhs.denomID {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRevokeNftResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse, rhs: Cudosnode_Cudosnode_Nft_MsgRevokeNftResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgEditNFT: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditNFT"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "denom_id"),
    3: .same(proto: "name"),
    4: .same(proto: "uri"),
    5: .same(proto: "data"),
    6: .same(proto: "sender"),
    7: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 5)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 6)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgEditNFT, rhs: Cudosnode_Cudosnode_Nft_MsgEditNFT) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.denomID != rhs.denomID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.data != rhs.data {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgEditNFTResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditNFTResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgEditNFTResponse, rhs: Cudosnode_Cudosnode_Nft_MsgEditNFTResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgMintNFT: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMintNFT"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "denom_id"),
    2: .same(proto: "name"),
    3: .same(proto: "uri"),
    4: .same(proto: "data"),
    5: .same(proto: "sender"),
    6: .same(proto: "recipient"),
    7: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 4)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 5)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 6)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgMintNFT, rhs: Cudosnode_Cudosnode_Nft_MsgMintNFT) -> Bool {
    if lhs.denomID != rhs.denomID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.data != rhs.data {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgMintNFTResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMintNFTResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgMintNFTResponse, rhs: Cudosnode_Cudosnode_Nft_MsgMintNFTResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgBurnNFT: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBurnNFT"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "denom_id"),
    3: .same(proto: "sender"),
    4: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denomID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.denomID.isEmpty {
      try visitor.visitSingularStringField(value: self.denomID, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgBurnNFT, rhs: Cudosnode_Cudosnode_Nft_MsgBurnNFT) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.denomID != rhs.denomID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBurnNFTResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse, rhs: Cudosnode_Cudosnode_Nft_MsgBurnNFTResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgTransferDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTransferDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "sender"),
    3: .same(proto: "recipient"),
    4: .same(proto: "contractAddressSigner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contractAddressSigner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 3)
    }
    if !self.contractAddressSigner.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddressSigner, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgTransferDenom, rhs: Cudosnode_Cudosnode_Nft_MsgTransferDenom) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.contractAddressSigner != rhs.contractAddressSigner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTransferDenomResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse, rhs: Cudosnode_Cudosnode_Nft_MsgTransferDenomResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
