// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/asset/v1beta1/app.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Asset_V1beta1_AppData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var name: String = String()

  var shortName: String = String()

  var minGovDeposit: String = String()

  var govTimeInSeconds: UInt64 = 0

  var genesisToken: [Comdex_Asset_V1beta1_MintGenesisToken] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Asset_V1beta1_MintGenesisToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetID: UInt64 = 0

  var genesisSupply: String = String()

  var isGovToken: Bool = false

  var recipient: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Asset_V1beta1_AppAndGovTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var govTimeInSeconds: UInt64 = 0

  var minGovDeposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Asset_V1beta1_AppData: @unchecked Sendable {}
extension Comdex_Asset_V1beta1_MintGenesisToken: @unchecked Sendable {}
extension Comdex_Asset_V1beta1_AppAndGovTime: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.asset.v1beta1"

extension Comdex_Asset_V1beta1_AppData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "short_name"),
    4: .standard(proto: "min_gov_deposit"),
    5: .standard(proto: "gov_time_in_seconds"),
    6: .standard(proto: "genesis_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shortName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.minGovDeposit) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.govTimeInSeconds) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.genesisToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.shortName.isEmpty {
      try visitor.visitSingularStringField(value: self.shortName, fieldNumber: 3)
    }
    if !self.minGovDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minGovDeposit, fieldNumber: 4)
    }
    if self.govTimeInSeconds != 0 {
      try visitor.visitSingularUInt64Field(value: self.govTimeInSeconds, fieldNumber: 5)
    }
    if !self.genesisToken.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.genesisToken, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Asset_V1beta1_AppData, rhs: Comdex_Asset_V1beta1_AppData) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.shortName != rhs.shortName {return false}
    if lhs.minGovDeposit != rhs.minGovDeposit {return false}
    if lhs.govTimeInSeconds != rhs.govTimeInSeconds {return false}
    if lhs.genesisToken != rhs.genesisToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Asset_V1beta1_MintGenesisToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MintGenesisToken"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_id"),
    2: .standard(proto: "genesis_supply"),
    3: .standard(proto: "is_gov_token"),
    4: .same(proto: "recipient"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.genesisSupply) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isGovToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 1)
    }
    if !self.genesisSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.genesisSupply, fieldNumber: 2)
    }
    if self.isGovToken != false {
      try visitor.visitSingularBoolField(value: self.isGovToken, fieldNumber: 3)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Asset_V1beta1_MintGenesisToken, rhs: Comdex_Asset_V1beta1_MintGenesisToken) -> Bool {
    if lhs.assetID != rhs.assetID {return false}
    if lhs.genesisSupply != rhs.genesisSupply {return false}
    if lhs.isGovToken != rhs.isGovToken {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Asset_V1beta1_AppAndGovTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppAndGovTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "gov_time_in_seconds"),
    3: .standard(proto: "min_gov_deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.govTimeInSeconds) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.minGovDeposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.govTimeInSeconds != 0 {
      try visitor.visitSingularUInt64Field(value: self.govTimeInSeconds, fieldNumber: 2)
    }
    if !self.minGovDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minGovDeposit, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Asset_V1beta1_AppAndGovTime, rhs: Comdex_Asset_V1beta1_AppAndGovTime) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.govTimeInSeconds != rhs.govTimeInSeconds {return false}
    if lhs.minGovDeposit != rhs.minGovDeposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
