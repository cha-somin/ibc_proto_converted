// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/subspaces/v3/msgs_feegrant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgGrantAllowance adds grants for the grantee to spend up allowance of fees
/// from the treasury inside the given subspace
struct Desmos_Subspaces_V3_MsgGrantAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which where the allowance should be granted
  var subspaceID: UInt64 = 0

  /// Address of the user granting the allowance
  var granter: String = String()

  /// Target being granted the allowance
  var grantee: SwiftProtobuf.Google_Protobuf_Any {
    get {return _grantee ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_grantee = newValue}
  }
  /// Returns true if `grantee` has been explicitly set.
  var hasGrantee: Bool {return self._grantee != nil}
  /// Clears the value of `grantee`. Subsequent reads from it will return its default value.
  mutating func clearGrantee() {self._grantee = nil}

  /// Allowance can be any allowance type that implements AllowanceI
  var allowance: SwiftProtobuf.Google_Protobuf_Any {
    get {return _allowance ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_allowance = newValue}
  }
  /// Returns true if `allowance` has been explicitly set.
  var hasAllowance: Bool {return self._allowance != nil}
  /// Clears the value of `allowance`. Subsequent reads from it will return its default value.
  mutating func clearAllowance() {self._allowance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _grantee: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _allowance: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
/// type.
struct Desmos_Subspaces_V3_MsgGrantAllowanceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRevokeAllowance removes any existing allowance to the grantee inside the
/// subspace
struct Desmos_Subspaces_V3_MsgRevokeAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If of the subspace inside which the allowance to be deleted is
  var subspaceID: UInt64 = 0

  /// Address of the user that created the allowance
  var granter: String = String()

  /// Target being revoked the allowance
  var grantee: SwiftProtobuf.Google_Protobuf_Any {
    get {return _grantee ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_grantee = newValue}
  }
  /// Returns true if `grantee` has been explicitly set.
  var hasGrantee: Bool {return self._grantee != nil}
  /// Clears the value of `grantee`. Subsequent reads from it will return its default value.
  mutating func clearGrantee() {self._grantee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _grantee: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse
/// response type.
struct Desmos_Subspaces_V3_MsgRevokeAllowanceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Desmos_Subspaces_V3_MsgGrantAllowance: @unchecked Sendable {}
extension Desmos_Subspaces_V3_MsgGrantAllowanceResponse: @unchecked Sendable {}
extension Desmos_Subspaces_V3_MsgRevokeAllowance: @unchecked Sendable {}
extension Desmos_Subspaces_V3_MsgRevokeAllowanceResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.subspaces.v3"

extension Desmos_Subspaces_V3_MsgGrantAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgGrantAllowance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .same(proto: "granter"),
    3: .same(proto: "grantee"),
    4: .same(proto: "allowance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._grantee) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._allowance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 2)
    }
    try { if let v = self._grantee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._allowance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_MsgGrantAllowance, rhs: Desmos_Subspaces_V3_MsgGrantAllowance) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.granter != rhs.granter {return false}
    if lhs._grantee != rhs._grantee {return false}
    if lhs._allowance != rhs._allowance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Subspaces_V3_MsgGrantAllowanceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgGrantAllowanceResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_MsgGrantAllowanceResponse, rhs: Desmos_Subspaces_V3_MsgGrantAllowanceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Subspaces_V3_MsgRevokeAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRevokeAllowance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .same(proto: "granter"),
    3: .same(proto: "grantee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._grantee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 2)
    }
    try { if let v = self._grantee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_MsgRevokeAllowance, rhs: Desmos_Subspaces_V3_MsgRevokeAllowance) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.granter != rhs.granter {return false}
    if lhs._grantee != rhs._grantee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Subspaces_V3_MsgRevokeAllowanceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRevokeAllowanceResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_MsgRevokeAllowanceResponse, rhs: Desmos_Subspaces_V3_MsgRevokeAllowanceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
