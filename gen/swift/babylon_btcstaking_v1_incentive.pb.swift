// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstaking/v1/incentive.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// VotingPowerDistCache is the cache for voting power distribution of finality providers
/// and their BTC delegations at a height
struct Babylon_Btcstaking_V1_VotingPowerDistCache {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var totalVotingPower: UInt64 = 0

  /// finality_providers is a list of finality providers' voting power information
  var finalityProviders: [Babylon_Btcstaking_V1_FinalityProviderDistInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// FinalityProviderDistInfo is the reward distribution of a finality provider and its BTC delegations
struct Babylon_Btcstaking_V1_FinalityProviderDistInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// btc_pk is the Bitcoin secp256k1 PK of this finality provider
  /// the PK follows encoding in BIP-340 spec
  var btcPk: Data = Data()

  /// addr is the address to receive commission from delegations.
  var addr: String = String()

  /// commission defines the commission rate of finality provider
  var commission: String = String()

  /// total_voting_power is the total voting power of the finality provider
  var totalVotingPower: UInt64 = 0

  /// btc_dels is a list of BTC delegations' voting power information under this finality provider
  var btcDels: [Babylon_Btcstaking_V1_BTCDelDistInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BTCDelDistInfo contains the information related to reward distribution for a BTC delegation
struct Babylon_Btcstaking_V1_BTCDelDistInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
  /// the PK follows encoding in BIP-340 spec
  var btcPk: Data = Data()

  /// staker_addr is the address to receive rewards from BTC delegation.
  var stakerAddr: String = String()

  /// staking_tx_hash is the staking tx hash of the BTC delegation
  var stakingTxHash: String = String()

  /// voting_power is the voting power of the BTC delegation
  var votingPower: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstaking_V1_VotingPowerDistCache: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_FinalityProviderDistInfo: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_BTCDelDistInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstaking.v1"

extension Babylon_Btcstaking_V1_VotingPowerDistCache: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VotingPowerDistCache"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_voting_power"),
    2: .standard(proto: "finality_providers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.totalVotingPower) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.finalityProviders) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalVotingPower != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalVotingPower, fieldNumber: 1)
    }
    if !self.finalityProviders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.finalityProviders, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_VotingPowerDistCache, rhs: Babylon_Btcstaking_V1_VotingPowerDistCache) -> Bool {
    if lhs.totalVotingPower != rhs.totalVotingPower {return false}
    if lhs.finalityProviders != rhs.finalityProviders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_FinalityProviderDistInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalityProviderDistInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_pk"),
    2: .same(proto: "addr"),
    3: .same(proto: "commission"),
    4: .standard(proto: "total_voting_power"),
    5: .standard(proto: "btc_dels"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.btcPk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.addr) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.totalVotingPower) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.btcDels) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.btcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.btcPk, fieldNumber: 1)
    }
    if !self.addr.isEmpty {
      try visitor.visitSingularStringField(value: self.addr, fieldNumber: 2)
    }
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 3)
    }
    if self.totalVotingPower != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalVotingPower, fieldNumber: 4)
    }
    if !self.btcDels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.btcDels, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_FinalityProviderDistInfo, rhs: Babylon_Btcstaking_V1_FinalityProviderDistInfo) -> Bool {
    if lhs.btcPk != rhs.btcPk {return false}
    if lhs.addr != rhs.addr {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.totalVotingPower != rhs.totalVotingPower {return false}
    if lhs.btcDels != rhs.btcDels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_BTCDelDistInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCDelDistInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_pk"),
    2: .standard(proto: "staker_addr"),
    3: .standard(proto: "staking_tx_hash"),
    4: .standard(proto: "voting_power"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.btcPk) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stakerAddr) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.stakingTxHash) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.votingPower) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.btcPk.isEmpty {
      try visitor.visitSingularBytesField(value: self.btcPk, fieldNumber: 1)
    }
    if !self.stakerAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.stakerAddr, fieldNumber: 2)
    }
    if !self.stakingTxHash.isEmpty {
      try visitor.visitSingularStringField(value: self.stakingTxHash, fieldNumber: 3)
    }
    if self.votingPower != 0 {
      try visitor.visitSingularUInt64Field(value: self.votingPower, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_BTCDelDistInfo, rhs: Babylon_Btcstaking_V1_BTCDelDistInfo) -> Bool {
    if lhs.btcPk != rhs.btcPk {return false}
    if lhs.stakerAddr != rhs.stakerAddr {return false}
    if lhs.stakingTxHash != rhs.stakingTxHash {return false}
    if lhs.votingPower != rhs.votingPower {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
