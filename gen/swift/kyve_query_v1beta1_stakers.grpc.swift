//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/query/v1beta1/stakers.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// QueryStakers ...
///
/// Usage: instantiate `Kyve_Query_V1beta1_QueryStakersClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Query_V1beta1_QueryStakersClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? { get }

  func stakers(
    _ request: Kyve_Query_V1beta1_QueryStakersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersRequest, Kyve_Query_V1beta1_QueryStakersResponse>

  func staker(
    _ request: Kyve_Query_V1beta1_QueryStakerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakerRequest, Kyve_Query_V1beta1_QueryStakerResponse>

  func stakersByPool(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolRequest, Kyve_Query_V1beta1_QueryStakersByPoolResponse>

  func stakersByPoolCount(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>
}

extension Kyve_Query_V1beta1_QueryStakersClientProtocol {
  internal var serviceName: String {
    return "kyve.query.v1beta1.QueryStakers"
  }

  /// Stakers queries for all stakers.
  ///
  /// - Parameters:
  ///   - request: Request to send to Stakers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakers(
    _ request: Kyve_Query_V1beta1_QueryStakersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersRequest, Kyve_Query_V1beta1_QueryStakersResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersInterceptors() ?? []
    )
  }

  /// Staker queries for all stakers.
  ///
  /// - Parameters:
  ///   - request: Request to send to Staker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func staker(
    _ request: Kyve_Query_V1beta1_QueryStakerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakerRequest, Kyve_Query_V1beta1_QueryStakerResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.staker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakerInterceptors() ?? []
    )
  }

  /// StakersByPool queries for all stakers that are currently participating in the given pool
  ///
  /// - Parameters:
  ///   - request: Request to send to StakersByPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakersByPool(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolRequest, Kyve_Query_V1beta1_QueryStakersByPoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByPoolInterceptors() ?? []
    )
  }

  /// StakersByPool queries for all stakers and sorted them first by number of pools participating and
  /// then by delegation
  ///
  /// - Parameters:
  ///   - request: Request to send to StakersByPoolCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakersByPoolCount(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, Kyve_Query_V1beta1_QueryStakersByPoolCountResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPoolCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByPoolCountInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Query_V1beta1_QueryStakersClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Query_V1beta1_QueryStakersNIOClient")
internal final class Kyve_Query_V1beta1_QueryStakersClient: Kyve_Query_V1beta1_QueryStakersClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.query.v1beta1.QueryStakers service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Query_V1beta1_QueryStakersNIOClient: Kyve_Query_V1beta1_QueryStakersClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.query.v1beta1.QueryStakers service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryStakers ...
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryStakersAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? { get }

  func makeStakersCall(
    _ request: Kyve_Query_V1beta1_QueryStakersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersRequest, Kyve_Query_V1beta1_QueryStakersResponse>

  func makeStakerCall(
    _ request: Kyve_Query_V1beta1_QueryStakerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakerRequest, Kyve_Query_V1beta1_QueryStakerResponse>

  func makeStakersByPoolCall(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolRequest, Kyve_Query_V1beta1_QueryStakersByPoolResponse>

  func makeStakersByPoolCountCall(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryStakersAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryStakersClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeStakersCall(
    _ request: Kyve_Query_V1beta1_QueryStakersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersRequest, Kyve_Query_V1beta1_QueryStakersResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersInterceptors() ?? []
    )
  }

  internal func makeStakerCall(
    _ request: Kyve_Query_V1beta1_QueryStakerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakerRequest, Kyve_Query_V1beta1_QueryStakerResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.staker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakerInterceptors() ?? []
    )
  }

  internal func makeStakersByPoolCall(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolRequest, Kyve_Query_V1beta1_QueryStakersByPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByPoolInterceptors() ?? []
    )
  }

  internal func makeStakersByPoolCountCall(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, Kyve_Query_V1beta1_QueryStakersByPoolCountResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPoolCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByPoolCountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryStakersAsyncClientProtocol {
  internal func stakers(
    _ request: Kyve_Query_V1beta1_QueryStakersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryStakersResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersInterceptors() ?? []
    )
  }

  internal func staker(
    _ request: Kyve_Query_V1beta1_QueryStakerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryStakerResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.staker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakerInterceptors() ?? []
    )
  }

  internal func stakersByPool(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryStakersByPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByPoolInterceptors() ?? []
    )
  }

  internal func stakersByPoolCount(
    _ request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryStakersByPoolCountResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPoolCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByPoolCountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Query_V1beta1_QueryStakersAsyncClient: Kyve_Query_V1beta1_QueryStakersAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Query_V1beta1_QueryStakersClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'stakers'.
  func makeStakersInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryStakersRequest, Kyve_Query_V1beta1_QueryStakersResponse>]

  /// - Returns: Interceptors to use when invoking 'staker'.
  func makeStakerInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryStakerRequest, Kyve_Query_V1beta1_QueryStakerResponse>]

  /// - Returns: Interceptors to use when invoking 'stakersByPool'.
  func makeStakersByPoolInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryStakersByPoolRequest, Kyve_Query_V1beta1_QueryStakersByPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'stakersByPoolCount'.
  func makeStakersByPoolCountInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>]
}

internal enum Kyve_Query_V1beta1_QueryStakersClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryStakers",
    fullName: "kyve.query.v1beta1.QueryStakers",
    methods: [
      Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakers,
      Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.staker,
      Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPool,
      Kyve_Query_V1beta1_QueryStakersClientMetadata.Methods.stakersByPoolCount,
    ]
  )

  internal enum Methods {
    internal static let stakers = GRPCMethodDescriptor(
      name: "Stakers",
      path: "/kyve.query.v1beta1.QueryStakers/Stakers",
      type: GRPCCallType.unary
    )

    internal static let staker = GRPCMethodDescriptor(
      name: "Staker",
      path: "/kyve.query.v1beta1.QueryStakers/Staker",
      type: GRPCCallType.unary
    )

    internal static let stakersByPool = GRPCMethodDescriptor(
      name: "StakersByPool",
      path: "/kyve.query.v1beta1.QueryStakers/StakersByPool",
      type: GRPCCallType.unary
    )

    internal static let stakersByPoolCount = GRPCMethodDescriptor(
      name: "StakersByPoolCount",
      path: "/kyve.query.v1beta1.QueryStakers/StakersByPoolCount",
      type: GRPCCallType.unary
    )
  }
}

/// QueryStakers ...
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Query_V1beta1_QueryStakersProvider: CallHandlerProvider {
  var interceptors: Kyve_Query_V1beta1_QueryStakersServerInterceptorFactoryProtocol? { get }

  /// Stakers queries for all stakers.
  func stakers(request: Kyve_Query_V1beta1_QueryStakersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryStakersResponse>

  /// Staker queries for all stakers.
  func staker(request: Kyve_Query_V1beta1_QueryStakerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryStakerResponse>

  /// StakersByPool queries for all stakers that are currently participating in the given pool
  func stakersByPool(request: Kyve_Query_V1beta1_QueryStakersByPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryStakersByPoolResponse>

  /// StakersByPool queries for all stakers and sorted them first by number of pools participating and
  /// then by delegation
  func stakersByPoolCount(request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>
}

extension Kyve_Query_V1beta1_QueryStakersProvider {
  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryStakersServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Stakers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersResponse>(),
        interceptors: self.interceptors?.makeStakersInterceptors() ?? [],
        userFunction: self.stakers(request:context:)
      )

    case "Staker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakerRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakerResponse>(),
        interceptors: self.interceptors?.makeStakerInterceptors() ?? [],
        userFunction: self.staker(request:context:)
      )

    case "StakersByPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersByPoolRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersByPoolResponse>(),
        interceptors: self.interceptors?.makeStakersByPoolInterceptors() ?? [],
        userFunction: self.stakersByPool(request:context:)
      )

    case "StakersByPoolCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>(),
        interceptors: self.interceptors?.makeStakersByPoolCountInterceptors() ?? [],
        userFunction: self.stakersByPoolCount(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryStakers ...
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryStakersAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryStakersServerInterceptorFactoryProtocol? { get }

  /// Stakers queries for all stakers.
  @Sendable func stakers(
    request: Kyve_Query_V1beta1_QueryStakersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryStakersResponse

  /// Staker queries for all stakers.
  @Sendable func staker(
    request: Kyve_Query_V1beta1_QueryStakerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryStakerResponse

  /// StakersByPool queries for all stakers that are currently participating in the given pool
  @Sendable func stakersByPool(
    request: Kyve_Query_V1beta1_QueryStakersByPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryStakersByPoolResponse

  /// StakersByPool queries for all stakers and sorted them first by number of pools participating and
  /// then by delegation
  @Sendable func stakersByPoolCount(
    request: Kyve_Query_V1beta1_QueryStakersByPoolCountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryStakersByPoolCountResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryStakersAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryStakersServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryStakersServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryStakersServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Stakers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersResponse>(),
        interceptors: self.interceptors?.makeStakersInterceptors() ?? [],
        wrapping: self.stakers(request:context:)
      )

    case "Staker":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakerRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakerResponse>(),
        interceptors: self.interceptors?.makeStakerInterceptors() ?? [],
        wrapping: self.staker(request:context:)
      )

    case "StakersByPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersByPoolRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersByPoolResponse>(),
        interceptors: self.interceptors?.makeStakersByPoolInterceptors() ?? [],
        wrapping: self.stakersByPool(request:context:)
      )

    case "StakersByPoolCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>(),
        interceptors: self.interceptors?.makeStakersByPoolCountInterceptors() ?? [],
        wrapping: self.stakersByPoolCount(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Query_V1beta1_QueryStakersServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'stakers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakersInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryStakersRequest, Kyve_Query_V1beta1_QueryStakersResponse>]

  /// - Returns: Interceptors to use when handling 'staker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakerInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryStakerRequest, Kyve_Query_V1beta1_QueryStakerResponse>]

  /// - Returns: Interceptors to use when handling 'stakersByPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakersByPoolInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryStakersByPoolRequest, Kyve_Query_V1beta1_QueryStakersByPoolResponse>]

  /// - Returns: Interceptors to use when handling 'stakersByPoolCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakersByPoolCountInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryStakersByPoolCountRequest, Kyve_Query_V1beta1_QueryStakersByPoolCountResponse>]
}

internal enum Kyve_Query_V1beta1_QueryStakersServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryStakers",
    fullName: "kyve.query.v1beta1.QueryStakers",
    methods: [
      Kyve_Query_V1beta1_QueryStakersServerMetadata.Methods.stakers,
      Kyve_Query_V1beta1_QueryStakersServerMetadata.Methods.staker,
      Kyve_Query_V1beta1_QueryStakersServerMetadata.Methods.stakersByPool,
      Kyve_Query_V1beta1_QueryStakersServerMetadata.Methods.stakersByPoolCount,
    ]
  )

  internal enum Methods {
    internal static let stakers = GRPCMethodDescriptor(
      name: "Stakers",
      path: "/kyve.query.v1beta1.QueryStakers/Stakers",
      type: GRPCCallType.unary
    )

    internal static let staker = GRPCMethodDescriptor(
      name: "Staker",
      path: "/kyve.query.v1beta1.QueryStakers/Staker",
      type: GRPCCallType.unary
    )

    internal static let stakersByPool = GRPCMethodDescriptor(
      name: "StakersByPool",
      path: "/kyve.query.v1beta1.QueryStakers/StakersByPool",
      type: GRPCCallType.unary
    )

    internal static let stakersByPoolCount = GRPCMethodDescriptor(
      name: "StakersByPoolCount",
      path: "/kyve.query.v1beta1.QueryStakers/StakersByPoolCount",
      type: GRPCCallType.unary
    )
  }
}
