// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/claim/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Stride_Claim_MsgSetAirdropAllocations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allocator: String = String()

  var airdropIdentifier: String = String()

  var users: [String] = []

  var weights: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgSetAirdropAllocationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgClaimFreeAmount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgClaimFreeAmountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var claimedAmount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgCreateAirdrop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var distributor: String = String()

  var identifier: String = String()

  var chainID: String = String()

  var denom: String = String()

  var startTime: UInt64 = 0

  var duration: UInt64 = 0

  var autopilotEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgCreateAirdropResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgDeleteAirdrop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var distributor: String = String()

  var identifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Claim_MsgDeleteAirdropResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stride_Claim_MsgSetAirdropAllocations: @unchecked Sendable {}
extension Stride_Claim_MsgSetAirdropAllocationsResponse: @unchecked Sendable {}
extension Stride_Claim_MsgClaimFreeAmount: @unchecked Sendable {}
extension Stride_Claim_MsgClaimFreeAmountResponse: @unchecked Sendable {}
extension Stride_Claim_MsgCreateAirdrop: @unchecked Sendable {}
extension Stride_Claim_MsgCreateAirdropResponse: @unchecked Sendable {}
extension Stride_Claim_MsgDeleteAirdrop: @unchecked Sendable {}
extension Stride_Claim_MsgDeleteAirdropResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.claim"

extension Stride_Claim_MsgSetAirdropAllocations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetAirdropAllocations"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "allocator"),
    2: .standard(proto: "airdrop_identifier"),
    3: .same(proto: "users"),
    4: .same(proto: "weights"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.allocator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.airdropIdentifier) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.users) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.weights) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.allocator.isEmpty {
      try visitor.visitSingularStringField(value: self.allocator, fieldNumber: 1)
    }
    if !self.airdropIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.airdropIdentifier, fieldNumber: 2)
    }
    if !self.users.isEmpty {
      try visitor.visitRepeatedStringField(value: self.users, fieldNumber: 3)
    }
    if !self.weights.isEmpty {
      try visitor.visitRepeatedStringField(value: self.weights, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgSetAirdropAllocations, rhs: Stride_Claim_MsgSetAirdropAllocations) -> Bool {
    if lhs.allocator != rhs.allocator {return false}
    if lhs.airdropIdentifier != rhs.airdropIdentifier {return false}
    if lhs.users != rhs.users {return false}
    if lhs.weights != rhs.weights {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgSetAirdropAllocationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetAirdropAllocationsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgSetAirdropAllocationsResponse, rhs: Stride_Claim_MsgSetAirdropAllocationsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgClaimFreeAmount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimFreeAmount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgClaimFreeAmount, rhs: Stride_Claim_MsgClaimFreeAmount) -> Bool {
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgClaimFreeAmountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimFreeAmountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "claimed_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.claimedAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.claimedAmount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimedAmount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgClaimFreeAmountResponse, rhs: Stride_Claim_MsgClaimFreeAmountResponse) -> Bool {
    if lhs.claimedAmount != rhs.claimedAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgCreateAirdrop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateAirdrop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "distributor"),
    2: .same(proto: "identifier"),
    6: .standard(proto: "chain_id"),
    5: .same(proto: "denom"),
    3: .standard(proto: "start_time"),
    4: .same(proto: "duration"),
    7: .standard(proto: "autopilot_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.distributor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.startTime) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.duration) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.autopilotEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.distributor.isEmpty {
      try visitor.visitSingularStringField(value: self.distributor, fieldNumber: 1)
    }
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 2)
    }
    if self.startTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.startTime, fieldNumber: 3)
    }
    if self.duration != 0 {
      try visitor.visitSingularUInt64Field(value: self.duration, fieldNumber: 4)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 5)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 6)
    }
    if self.autopilotEnabled != false {
      try visitor.visitSingularBoolField(value: self.autopilotEnabled, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgCreateAirdrop, rhs: Stride_Claim_MsgCreateAirdrop) -> Bool {
    if lhs.distributor != rhs.distributor {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.autopilotEnabled != rhs.autopilotEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgCreateAirdropResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateAirdropResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgCreateAirdropResponse, rhs: Stride_Claim_MsgCreateAirdropResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgDeleteAirdrop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeleteAirdrop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "distributor"),
    2: .same(proto: "identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.distributor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.distributor.isEmpty {
      try visitor.visitSingularStringField(value: self.distributor, fieldNumber: 1)
    }
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgDeleteAirdrop, rhs: Stride_Claim_MsgDeleteAirdrop) -> Bool {
    if lhs.distributor != rhs.distributor {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Claim_MsgDeleteAirdropResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeleteAirdropResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Claim_MsgDeleteAirdropResponse, rhs: Stride_Claim_MsgDeleteAirdropResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
