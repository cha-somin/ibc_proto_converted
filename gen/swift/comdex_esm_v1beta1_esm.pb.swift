// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/esm/v1beta1/esm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Esm_V1beta1_ESMTriggerParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var targetValue: Cosmos_Base_V1beta1_Coin {
    get {return _targetValue ?? Cosmos_Base_V1beta1_Coin()}
    set {_targetValue = newValue}
  }
  /// Returns true if `targetValue` has been explicitly set.
  var hasTargetValue: Bool {return self._targetValue != nil}
  /// Clears the value of `targetValue`. Subsequent reads from it will return its default value.
  mutating func clearTargetValue() {self._targetValue = nil}

  var coolOffPeriod: UInt64 = 0

  var assetsRates: [Comdex_Esm_V1beta1_DebtAssetsRates] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _targetValue: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Esm_V1beta1_CurrentDepositStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var balance: Cosmos_Base_V1beta1_Coin {
    get {return _balance ?? Cosmos_Base_V1beta1_Coin()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {self._balance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _balance: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Esm_V1beta1_ESMStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var executor: String = String()

  var status: Bool = false

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  var vaultRedemptionStatus: Bool = false

  var snapshotStatus: Bool = false

  var stableVaultRedemptionStatus: Bool = false

  var collectorTransaction: Bool = false

  var shareCalculation: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Esm_V1beta1_KillSwitchParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var breakerEnable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Esm_V1beta1_UsersDepositMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var depositor: String = String()

  var deposits: Cosmos_Base_V1beta1_Coin {
    get {return _deposits ?? Cosmos_Base_V1beta1_Coin()}
    set {_deposits = newValue}
  }
  /// Returns true if `deposits` has been explicitly set.
  var hasDeposits: Bool {return self._deposits != nil}
  /// Clears the value of `deposits`. Subsequent reads from it will return its default value.
  mutating func clearDeposits() {self._deposits = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deposits: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Esm_V1beta1_DataAfterCoolOff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var collateralTotalAmount: String = String()

  var debtTotalAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Esm_V1beta1_AssetToAmount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var assetID: UInt64 = 0

  var amount: String = String()

  var share: String = String()

  var debtTokenWorth: String = String()

  var isCollateral: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Esm_V1beta1_DebtAssetsRates {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetID: UInt64 = 0

  var rates: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Esm_V1beta1_ESMTriggerParams: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_CurrentDepositStats: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_ESMStatus: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_KillSwitchParams: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_UsersDepositMapping: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_DataAfterCoolOff: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_AssetToAmount: @unchecked Sendable {}
extension Comdex_Esm_V1beta1_DebtAssetsRates: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.esm.v1beta1"

extension Comdex_Esm_V1beta1_ESMTriggerParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ESMTriggerParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "target_value"),
    3: .standard(proto: "cool_off_period"),
    4: .same(proto: "assetsRates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._targetValue) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.coolOffPeriod) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.assetsRates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    try { if let v = self._targetValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.coolOffPeriod != 0 {
      try visitor.visitSingularUInt64Field(value: self.coolOffPeriod, fieldNumber: 3)
    }
    if !self.assetsRates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetsRates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_ESMTriggerParams, rhs: Comdex_Esm_V1beta1_ESMTriggerParams) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs._targetValue != rhs._targetValue {return false}
    if lhs.coolOffPeriod != rhs.coolOffPeriod {return false}
    if lhs.assetsRates != rhs.assetsRates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_CurrentDepositStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurrentDepositStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .same(proto: "balance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._balance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    try { if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_CurrentDepositStats, rhs: Comdex_Esm_V1beta1_CurrentDepositStats) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs._balance != rhs._balance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_ESMStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ESMStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .same(proto: "executor"),
    3: .same(proto: "status"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    6: .standard(proto: "vault_redemption_status"),
    7: .same(proto: "snapshotStatus"),
    8: .standard(proto: "stable_vault_redemption_status"),
    9: .standard(proto: "collector_transaction"),
    10: .standard(proto: "share_calculation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.executor) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.vaultRedemptionStatus) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.snapshotStatus) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.stableVaultRedemptionStatus) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.collectorTransaction) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.shareCalculation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if !self.executor.isEmpty {
      try visitor.visitSingularStringField(value: self.executor, fieldNumber: 2)
    }
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 3)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.vaultRedemptionStatus != false {
      try visitor.visitSingularBoolField(value: self.vaultRedemptionStatus, fieldNumber: 6)
    }
    if self.snapshotStatus != false {
      try visitor.visitSingularBoolField(value: self.snapshotStatus, fieldNumber: 7)
    }
    if self.stableVaultRedemptionStatus != false {
      try visitor.visitSingularBoolField(value: self.stableVaultRedemptionStatus, fieldNumber: 8)
    }
    if self.collectorTransaction != false {
      try visitor.visitSingularBoolField(value: self.collectorTransaction, fieldNumber: 9)
    }
    if self.shareCalculation != false {
      try visitor.visitSingularBoolField(value: self.shareCalculation, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_ESMStatus, rhs: Comdex_Esm_V1beta1_ESMStatus) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.executor != rhs.executor {return false}
    if lhs.status != rhs.status {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.vaultRedemptionStatus != rhs.vaultRedemptionStatus {return false}
    if lhs.snapshotStatus != rhs.snapshotStatus {return false}
    if lhs.stableVaultRedemptionStatus != rhs.stableVaultRedemptionStatus {return false}
    if lhs.collectorTransaction != rhs.collectorTransaction {return false}
    if lhs.shareCalculation != rhs.shareCalculation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_KillSwitchParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KillSwitchParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appId"),
    2: .standard(proto: "breaker_enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.breakerEnable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.breakerEnable != false {
      try visitor.visitSingularBoolField(value: self.breakerEnable, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_KillSwitchParams, rhs: Comdex_Esm_V1beta1_KillSwitchParams) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.breakerEnable != rhs.breakerEnable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_UsersDepositMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UsersDepositMapping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .same(proto: "depositor"),
    3: .same(proto: "deposits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._deposits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 2)
    }
    try { if let v = self._deposits {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_UsersDepositMapping, rhs: Comdex_Esm_V1beta1_UsersDepositMapping) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs._deposits != rhs._deposits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_DataAfterCoolOff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataAfterCoolOff"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appId"),
    2: .standard(proto: "collateral_total_amount"),
    3: .standard(proto: "debt_total_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralTotalAmount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.debtTotalAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if !self.collateralTotalAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralTotalAmount, fieldNumber: 2)
    }
    if !self.debtTotalAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.debtTotalAmount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_DataAfterCoolOff, rhs: Comdex_Esm_V1beta1_DataAfterCoolOff) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.collateralTotalAmount != rhs.collateralTotalAmount {return false}
    if lhs.debtTotalAmount != rhs.debtTotalAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_AssetToAmount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssetToAmount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appId"),
    2: .standard(proto: "asset_id"),
    3: .same(proto: "amount"),
    4: .same(proto: "share"),
    5: .standard(proto: "debt_token_worth"),
    6: .standard(proto: "is_collateral"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.share) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.debtTokenWorth) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isCollateral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    if !self.share.isEmpty {
      try visitor.visitSingularStringField(value: self.share, fieldNumber: 4)
    }
    if !self.debtTokenWorth.isEmpty {
      try visitor.visitSingularStringField(value: self.debtTokenWorth, fieldNumber: 5)
    }
    if self.isCollateral != false {
      try visitor.visitSingularBoolField(value: self.isCollateral, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_AssetToAmount, rhs: Comdex_Esm_V1beta1_AssetToAmount) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.share != rhs.share {return false}
    if lhs.debtTokenWorth != rhs.debtTokenWorth {return false}
    if lhs.isCollateral != rhs.isCollateral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Esm_V1beta1_DebtAssetsRates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DebtAssetsRates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_id"),
    2: .same(proto: "rates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.rates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 1)
    }
    if self.rates != 0 {
      try visitor.visitSingularUInt64Field(value: self.rates, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Esm_V1beta1_DebtAssetsRates, rhs: Comdex_Esm_V1beta1_DebtAssetsRates) -> Bool {
    if lhs.assetID != rhs.assetID {return false}
    if lhs.rates != rhs.rates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
