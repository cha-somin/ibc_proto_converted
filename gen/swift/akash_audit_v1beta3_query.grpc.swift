//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/audit/v1beta3/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Akash_Audit_V1beta3_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Audit_V1beta3_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? { get }

  func allProvidersAttributes(
    _ request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>

  func providerAttributes(
    _ request: Akash_Audit_V1beta3_QueryProviderAttributesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryProviderAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>

  func providerAuditorAttributes(
    _ request: Akash_Audit_V1beta3_QueryProviderAuditorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryProviderAuditorRequest, Akash_Audit_V1beta3_QueryProvidersResponse>

  func auditorAttributes(
    _ request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryAuditorAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>
}

extension Akash_Audit_V1beta3_QueryClientProtocol {
  internal var serviceName: String {
    return "akash.audit.v1beta3.Query"
  }

  /// AllProvidersAttributes queries all providers
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  ///
  /// - Parameters:
  ///   - request: Request to send to AllProvidersAttributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allProvidersAttributes(
    _ request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.allProvidersAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllProvidersAttributesInterceptors() ?? []
    )
  }

  /// ProviderAttributes queries all provider signed attributes
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  ///
  /// - Parameters:
  ///   - request: Request to send to ProviderAttributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func providerAttributes(
    _ request: Akash_Audit_V1beta3_QueryProviderAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryProviderAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderAttributesInterceptors() ?? []
    )
  }

  /// ProviderAuditorAttributes queries provider signed attributes by specific auditor
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  ///
  /// - Parameters:
  ///   - request: Request to send to ProviderAuditorAttributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func providerAuditorAttributes(
    _ request: Akash_Audit_V1beta3_QueryProviderAuditorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryProviderAuditorRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAuditorAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderAuditorAttributesInterceptors() ?? []
    )
  }

  /// AuditorAttributes queries all providers signed by this auditor
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  ///
  /// - Parameters:
  ///   - request: Request to send to AuditorAttributes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func auditorAttributes(
    _ request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Audit_V1beta3_QueryAuditorAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.auditorAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuditorAttributesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Akash_Audit_V1beta3_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Akash_Audit_V1beta3_QueryNIOClient")
internal final class Akash_Audit_V1beta3_QueryClient: Akash_Audit_V1beta3_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the akash.audit.v1beta3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Akash_Audit_V1beta3_QueryNIOClient: Akash_Audit_V1beta3_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.audit.v1beta3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Audit_V1beta3_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? { get }

  func makeAllProvidersAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>

  func makeProviderAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryProviderAttributesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryProviderAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>

  func makeProviderAuditorAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryProviderAuditorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryProviderAuditorRequest, Akash_Audit_V1beta3_QueryProvidersResponse>

  func makeAuditorAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryAuditorAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Audit_V1beta3_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Audit_V1beta3_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAllProvidersAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.allProvidersAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllProvidersAttributesInterceptors() ?? []
    )
  }

  internal func makeProviderAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryProviderAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryProviderAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderAttributesInterceptors() ?? []
    )
  }

  internal func makeProviderAuditorAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryProviderAuditorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryProviderAuditorRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAuditorAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderAuditorAttributesInterceptors() ?? []
    )
  }

  internal func makeAuditorAttributesCall(
    _ request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Audit_V1beta3_QueryAuditorAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.auditorAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuditorAttributesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Audit_V1beta3_QueryAsyncClientProtocol {
  internal func allProvidersAttributes(
    _ request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.allProvidersAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllProvidersAttributesInterceptors() ?? []
    )
  }

  internal func providerAttributes(
    _ request: Akash_Audit_V1beta3_QueryProviderAttributesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderAttributesInterceptors() ?? []
    )
  }

  internal func providerAuditorAttributes(
    _ request: Akash_Audit_V1beta3_QueryProviderAuditorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAuditorAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderAuditorAttributesInterceptors() ?? []
    )
  }

  internal func auditorAttributes(
    _ request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Audit_V1beta3_QueryClientMetadata.Methods.auditorAttributes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuditorAttributesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Akash_Audit_V1beta3_QueryAsyncClient: Akash_Audit_V1beta3_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Akash_Audit_V1beta3_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'allProvidersAttributes'.
  func makeAllProvidersAttributesInterceptors() -> [ClientInterceptor<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'providerAttributes'.
  func makeProviderAttributesInterceptors() -> [ClientInterceptor<Akash_Audit_V1beta3_QueryProviderAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'providerAuditorAttributes'.
  func makeProviderAuditorAttributesInterceptors() -> [ClientInterceptor<Akash_Audit_V1beta3_QueryProviderAuditorRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'auditorAttributes'.
  func makeAuditorAttributesInterceptors() -> [ClientInterceptor<Akash_Audit_V1beta3_QueryAuditorAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]
}

internal enum Akash_Audit_V1beta3_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "akash.audit.v1beta3.Query",
    methods: [
      Akash_Audit_V1beta3_QueryClientMetadata.Methods.allProvidersAttributes,
      Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAttributes,
      Akash_Audit_V1beta3_QueryClientMetadata.Methods.providerAuditorAttributes,
      Akash_Audit_V1beta3_QueryClientMetadata.Methods.auditorAttributes,
    ]
  )

  internal enum Methods {
    internal static let allProvidersAttributes = GRPCMethodDescriptor(
      name: "AllProvidersAttributes",
      path: "/akash.audit.v1beta3.Query/AllProvidersAttributes",
      type: GRPCCallType.unary
    )

    internal static let providerAttributes = GRPCMethodDescriptor(
      name: "ProviderAttributes",
      path: "/akash.audit.v1beta3.Query/ProviderAttributes",
      type: GRPCCallType.unary
    )

    internal static let providerAuditorAttributes = GRPCMethodDescriptor(
      name: "ProviderAuditorAttributes",
      path: "/akash.audit.v1beta3.Query/ProviderAuditorAttributes",
      type: GRPCCallType.unary
    )

    internal static let auditorAttributes = GRPCMethodDescriptor(
      name: "AuditorAttributes",
      path: "/akash.audit.v1beta3.Query/AuditorAttributes",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Audit_V1beta3_QueryProvider: CallHandlerProvider {
  var interceptors: Akash_Audit_V1beta3_QueryServerInterceptorFactoryProtocol? { get }

  /// AllProvidersAttributes queries all providers
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  func allProvidersAttributes(request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Audit_V1beta3_QueryProvidersResponse>

  /// ProviderAttributes queries all provider signed attributes
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  func providerAttributes(request: Akash_Audit_V1beta3_QueryProviderAttributesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Audit_V1beta3_QueryProvidersResponse>

  /// ProviderAuditorAttributes queries provider signed attributes by specific auditor
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  func providerAuditorAttributes(request: Akash_Audit_V1beta3_QueryProviderAuditorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Audit_V1beta3_QueryProvidersResponse>

  /// AuditorAttributes queries all providers signed by this auditor
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  func auditorAttributes(request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Audit_V1beta3_QueryProvidersResponse>
}

extension Akash_Audit_V1beta3_QueryProvider {
  internal var serviceName: Substring {
    return Akash_Audit_V1beta3_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AllProvidersAttributes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeAllProvidersAttributesInterceptors() ?? [],
        userFunction: self.allProvidersAttributes(request:context:)
      )

    case "ProviderAttributes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryProviderAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeProviderAttributesInterceptors() ?? [],
        userFunction: self.providerAttributes(request:context:)
      )

    case "ProviderAuditorAttributes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryProviderAuditorRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeProviderAuditorAttributesInterceptors() ?? [],
        userFunction: self.providerAuditorAttributes(request:context:)
      )

    case "AuditorAttributes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryAuditorAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeAuditorAttributesInterceptors() ?? [],
        userFunction: self.auditorAttributes(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Audit_V1beta3_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Audit_V1beta3_QueryServerInterceptorFactoryProtocol? { get }

  /// AllProvidersAttributes queries all providers
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  @Sendable func allProvidersAttributes(
    request: Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse

  /// ProviderAttributes queries all provider signed attributes
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  @Sendable func providerAttributes(
    request: Akash_Audit_V1beta3_QueryProviderAttributesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse

  /// ProviderAuditorAttributes queries provider signed attributes by specific auditor
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  @Sendable func providerAuditorAttributes(
    request: Akash_Audit_V1beta3_QueryProviderAuditorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse

  /// AuditorAttributes queries all providers signed by this auditor
  /// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  /// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  @Sendable func auditorAttributes(
    request: Akash_Audit_V1beta3_QueryAuditorAttributesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Audit_V1beta3_QueryProvidersResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Audit_V1beta3_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Audit_V1beta3_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Akash_Audit_V1beta3_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Akash_Audit_V1beta3_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AllProvidersAttributes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeAllProvidersAttributesInterceptors() ?? [],
        wrapping: self.allProvidersAttributes(request:context:)
      )

    case "ProviderAttributes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryProviderAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeProviderAttributesInterceptors() ?? [],
        wrapping: self.providerAttributes(request:context:)
      )

    case "ProviderAuditorAttributes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryProviderAuditorRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeProviderAuditorAttributesInterceptors() ?? [],
        wrapping: self.providerAuditorAttributes(request:context:)
      )

    case "AuditorAttributes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Audit_V1beta3_QueryAuditorAttributesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Audit_V1beta3_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeAuditorAttributesInterceptors() ?? [],
        wrapping: self.auditorAttributes(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Audit_V1beta3_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'allProvidersAttributes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllProvidersAttributesInterceptors() -> [ServerInterceptor<Akash_Audit_V1beta3_QueryAllProvidersAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when handling 'providerAttributes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProviderAttributesInterceptors() -> [ServerInterceptor<Akash_Audit_V1beta3_QueryProviderAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when handling 'providerAuditorAttributes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProviderAuditorAttributesInterceptors() -> [ServerInterceptor<Akash_Audit_V1beta3_QueryProviderAuditorRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when handling 'auditorAttributes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuditorAttributesInterceptors() -> [ServerInterceptor<Akash_Audit_V1beta3_QueryAuditorAttributesRequest, Akash_Audit_V1beta3_QueryProvidersResponse>]
}

internal enum Akash_Audit_V1beta3_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "akash.audit.v1beta3.Query",
    methods: [
      Akash_Audit_V1beta3_QueryServerMetadata.Methods.allProvidersAttributes,
      Akash_Audit_V1beta3_QueryServerMetadata.Methods.providerAttributes,
      Akash_Audit_V1beta3_QueryServerMetadata.Methods.providerAuditorAttributes,
      Akash_Audit_V1beta3_QueryServerMetadata.Methods.auditorAttributes,
    ]
  )

  internal enum Methods {
    internal static let allProvidersAttributes = GRPCMethodDescriptor(
      name: "AllProvidersAttributes",
      path: "/akash.audit.v1beta3.Query/AllProvidersAttributes",
      type: GRPCCallType.unary
    )

    internal static let providerAttributes = GRPCMethodDescriptor(
      name: "ProviderAttributes",
      path: "/akash.audit.v1beta3.Query/ProviderAttributes",
      type: GRPCCallType.unary
    )

    internal static let providerAuditorAttributes = GRPCMethodDescriptor(
      name: "ProviderAuditorAttributes",
      path: "/akash.audit.v1beta3.Query/ProviderAuditorAttributes",
      type: GRPCCallType.unary
    )

    internal static let auditorAttributes = GRPCMethodDescriptor(
      name: "AuditorAttributes",
      path: "/akash.audit.v1beta3.Query/AuditorAttributes",
      type: GRPCCallType.unary
    )
  }
}
