// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/btcstaking/v1/pop.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BTCSigType indicates the type of btc_sig in a pop
enum Babylon_Btcstaking_V1_BTCSigType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// BIP340 means the btc_sig will follow the BIP-340 encoding
  case bip340 // = 0

  /// BIP322 means the btc_sig will follow the BIP-322 encoding
  case bip322 // = 1

  /// ECDSA means the btc_sig will follow the ECDSA encoding
  /// ref: https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
  case ecdsa // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .bip340
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .bip340
    case 1: self = .bip322
    case 2: self = .ecdsa
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .bip340: return 0
    case .bip322: return 1
    case .ecdsa: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Babylon_Btcstaking_V1_BTCSigType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Babylon_Btcstaking_V1_BTCSigType] = [
    .bip340,
    .bip322,
    .ecdsa,
  ]
}

#endif  // swift(>=4.2)

/// ProofOfPossessionBTC is the proof of possession that a Babylon
/// address and a Bitcoin secp256k1 secret key are held by the same
/// person
struct Babylon_Btcstaking_V1_ProofOfPossessionBTC {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// btc_sig_type indicates the type of btc_sig in the pop
  var btcSigType: Babylon_Btcstaking_V1_BTCSigType = .bip340

  /// btc_sig is the signature generated via sign(sk_btc, babylon_staker_address)
  /// the signature follows encoding in either BIP-340 spec or BIP-322 spec
  var btcSig: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BIP322Sig is a BIP-322 signature together with the address corresponding to
/// the signer
struct Babylon_Btcstaking_V1_BIP322Sig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the signer's address
  var address: String = String()

  /// sig is the actual signature in BIP-322 format
  var sig: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Btcstaking_V1_BTCSigType: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_ProofOfPossessionBTC: @unchecked Sendable {}
extension Babylon_Btcstaking_V1_BIP322Sig: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.btcstaking.v1"

extension Babylon_Btcstaking_V1_BTCSigType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BIP340"),
    1: .same(proto: "BIP322"),
    2: .same(proto: "ECDSA"),
  ]
}

extension Babylon_Btcstaking_V1_ProofOfPossessionBTC: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProofOfPossessionBTC"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_sig_type"),
    2: .standard(proto: "btc_sig"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.btcSigType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.btcSig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.btcSigType != .bip340 {
      try visitor.visitSingularEnumField(value: self.btcSigType, fieldNumber: 1)
    }
    if !self.btcSig.isEmpty {
      try visitor.visitSingularBytesField(value: self.btcSig, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_ProofOfPossessionBTC, rhs: Babylon_Btcstaking_V1_ProofOfPossessionBTC) -> Bool {
    if lhs.btcSigType != rhs.btcSigType {return false}
    if lhs.btcSig != rhs.btcSig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Btcstaking_V1_BIP322Sig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BIP322Sig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "sig"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.sig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.sig.isEmpty {
      try visitor.visitSingularBytesField(value: self.sig, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Btcstaking_V1_BIP322Sig, rhs: Babylon_Btcstaking_V1_BIP322Sig) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.sig != rhs.sig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
