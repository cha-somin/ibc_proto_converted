//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: likechain/likenft/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Likechain_Likenft_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Likechain_Likenft_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? { get }

  func newClass(
    _ request: Likechain_Likenft_V1_MsgNewClass,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgNewClass, Likechain_Likenft_V1_MsgNewClassResponse>

  func updateClass(
    _ request: Likechain_Likenft_V1_MsgUpdateClass,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateClass, Likechain_Likenft_V1_MsgUpdateClassResponse>

  func mintNFT(
    _ request: Likechain_Likenft_V1_MsgMintNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgMintNFT, Likechain_Likenft_V1_MsgMintNFTResponse>

  func burnNFT(
    _ request: Likechain_Likenft_V1_MsgBurnNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgBurnNFT, Likechain_Likenft_V1_MsgBurnNFTResponse>

  func createBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgCreateBlindBoxContent,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateBlindBoxContent, Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>

  func updateBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateBlindBoxContent, Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>

  func deleteBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteBlindBoxContent, Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>

  func createOffer(
    _ request: Likechain_Likenft_V1_MsgCreateOffer,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateOffer, Likechain_Likenft_V1_MsgCreateOfferResponse>

  func updateOffer(
    _ request: Likechain_Likenft_V1_MsgUpdateOffer,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateOffer, Likechain_Likenft_V1_MsgUpdateOfferResponse>

  func deleteOffer(
    _ request: Likechain_Likenft_V1_MsgDeleteOffer,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteOffer, Likechain_Likenft_V1_MsgDeleteOfferResponse>

  func createListing(
    _ request: Likechain_Likenft_V1_MsgCreateListing,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateListing, Likechain_Likenft_V1_MsgCreateListingResponse>

  func updateListing(
    _ request: Likechain_Likenft_V1_MsgUpdateListing,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateListing, Likechain_Likenft_V1_MsgUpdateListingResponse>

  func deleteListing(
    _ request: Likechain_Likenft_V1_MsgDeleteListing,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteListing, Likechain_Likenft_V1_MsgDeleteListingResponse>

  func sellNFT(
    _ request: Likechain_Likenft_V1_MsgSellNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgSellNFT, Likechain_Likenft_V1_MsgSellNFTResponse>

  func buyNFT(
    _ request: Likechain_Likenft_V1_MsgBuyNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgBuyNFT, Likechain_Likenft_V1_MsgBuyNFTResponse>

  func createRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateRoyaltyConfig, Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>

  func updateRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>

  func deleteRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig,
    callOptions: CallOptions?
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>
}

extension Likechain_Likenft_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "likechain.likenft.v1.Msg"
  }

  /// Unary call to NewClass
  ///
  /// - Parameters:
  ///   - request: Request to send to NewClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newClass(
    _ request: Likechain_Likenft_V1_MsgNewClass,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgNewClass, Likechain_Likenft_V1_MsgNewClassResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.newClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewClassInterceptors() ?? []
    )
  }

  /// Unary call to UpdateClass
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateClass(
    _ request: Likechain_Likenft_V1_MsgUpdateClass,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateClass, Likechain_Likenft_V1_MsgUpdateClassResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassInterceptors() ?? []
    )
  }

  /// Unary call to MintNFT
  ///
  /// - Parameters:
  ///   - request: Request to send to MintNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintNFT(
    _ request: Likechain_Likenft_V1_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgMintNFT, Likechain_Likenft_V1_MsgMintNFTResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.mintNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintNFTInterceptors() ?? []
    )
  }

  /// Unary call to BurnNFT
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnNFT(
    _ request: Likechain_Likenft_V1_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgBurnNFT, Likechain_Likenft_V1_MsgBurnNFTResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.burnNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? []
    )
  }

  /// Unary call to CreateBlindBoxContent
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBlindBoxContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgCreateBlindBoxContent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateBlindBoxContent, Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBlindBoxContentInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBlindBoxContent
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBlindBoxContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateBlindBoxContent, Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBlindBoxContentInterceptors() ?? []
    )
  }

  /// Unary call to DeleteBlindBoxContent
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBlindBoxContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteBlindBoxContent, Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBlindBoxContentInterceptors() ?? []
    )
  }

  /// Unary call to CreateOffer
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateOffer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createOffer(
    _ request: Likechain_Likenft_V1_MsgCreateOffer,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateOffer, Likechain_Likenft_V1_MsgCreateOfferResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOfferInterceptors() ?? []
    )
  }

  /// Unary call to UpdateOffer
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateOffer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateOffer(
    _ request: Likechain_Likenft_V1_MsgUpdateOffer,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateOffer, Likechain_Likenft_V1_MsgUpdateOfferResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateOfferInterceptors() ?? []
    )
  }

  /// Unary call to DeleteOffer
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteOffer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteOffer(
    _ request: Likechain_Likenft_V1_MsgDeleteOffer,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteOffer, Likechain_Likenft_V1_MsgDeleteOfferResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteOfferInterceptors() ?? []
    )
  }

  /// Unary call to CreateListing
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateListing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createListing(
    _ request: Likechain_Likenft_V1_MsgCreateListing,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateListing, Likechain_Likenft_V1_MsgCreateListingResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateListingInterceptors() ?? []
    )
  }

  /// Unary call to UpdateListing
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateListing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateListing(
    _ request: Likechain_Likenft_V1_MsgUpdateListing,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateListing, Likechain_Likenft_V1_MsgUpdateListingResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateListingInterceptors() ?? []
    )
  }

  /// Unary call to DeleteListing
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteListing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteListing(
    _ request: Likechain_Likenft_V1_MsgDeleteListing,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteListing, Likechain_Likenft_V1_MsgDeleteListingResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteListingInterceptors() ?? []
    )
  }

  /// Unary call to SellNFT
  ///
  /// - Parameters:
  ///   - request: Request to send to SellNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellNFT(
    _ request: Likechain_Likenft_V1_MsgSellNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgSellNFT, Likechain_Likenft_V1_MsgSellNFTResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.sellNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellNFTInterceptors() ?? []
    )
  }

  /// Unary call to BuyNFT
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyNFT(
    _ request: Likechain_Likenft_V1_MsgBuyNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgBuyNFT, Likechain_Likenft_V1_MsgBuyNFTResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.buyNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyNFTInterceptors() ?? []
    )
  }

  /// Unary call to CreateRoyaltyConfig
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRoyaltyConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgCreateRoyaltyConfig, Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoyaltyConfigInterceptors() ?? []
    )
  }

  /// Unary call to UpdateRoyaltyConfig
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateRoyaltyConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRoyaltyConfigInterceptors() ?? []
    )
  }

  /// this line is used by starport scaffolding # proto/tx/rpc
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRoyaltyConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse> {
    return self.makeUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRoyaltyConfigInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Likechain_Likenft_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Likechain_Likenft_V1_MsgNIOClient")
internal final class Likechain_Likenft_V1_MsgClient: Likechain_Likenft_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the likechain.likenft.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Likechain_Likenft_V1_MsgNIOClient: Likechain_Likenft_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the likechain.likenft.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Likechain_Likenft_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeNewClassCall(
    _ request: Likechain_Likenft_V1_MsgNewClass,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgNewClass, Likechain_Likenft_V1_MsgNewClassResponse>

  func makeUpdateClassCall(
    _ request: Likechain_Likenft_V1_MsgUpdateClass,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateClass, Likechain_Likenft_V1_MsgUpdateClassResponse>

  func makeMintNftCall(
    _ request: Likechain_Likenft_V1_MsgMintNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgMintNFT, Likechain_Likenft_V1_MsgMintNFTResponse>

  func makeBurnNftCall(
    _ request: Likechain_Likenft_V1_MsgBurnNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgBurnNFT, Likechain_Likenft_V1_MsgBurnNFTResponse>

  func makeCreateBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_MsgCreateBlindBoxContent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateBlindBoxContent, Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>

  func makeUpdateBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateBlindBoxContent, Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>

  func makeDeleteBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteBlindBoxContent, Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>

  func makeCreateOfferCall(
    _ request: Likechain_Likenft_V1_MsgCreateOffer,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateOffer, Likechain_Likenft_V1_MsgCreateOfferResponse>

  func makeUpdateOfferCall(
    _ request: Likechain_Likenft_V1_MsgUpdateOffer,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateOffer, Likechain_Likenft_V1_MsgUpdateOfferResponse>

  func makeDeleteOfferCall(
    _ request: Likechain_Likenft_V1_MsgDeleteOffer,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteOffer, Likechain_Likenft_V1_MsgDeleteOfferResponse>

  func makeCreateListingCall(
    _ request: Likechain_Likenft_V1_MsgCreateListing,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateListing, Likechain_Likenft_V1_MsgCreateListingResponse>

  func makeUpdateListingCall(
    _ request: Likechain_Likenft_V1_MsgUpdateListing,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateListing, Likechain_Likenft_V1_MsgUpdateListingResponse>

  func makeDeleteListingCall(
    _ request: Likechain_Likenft_V1_MsgDeleteListing,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteListing, Likechain_Likenft_V1_MsgDeleteListingResponse>

  func makeSellNftCall(
    _ request: Likechain_Likenft_V1_MsgSellNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgSellNFT, Likechain_Likenft_V1_MsgSellNFTResponse>

  func makeBuyNftCall(
    _ request: Likechain_Likenft_V1_MsgBuyNFT,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgBuyNFT, Likechain_Likenft_V1_MsgBuyNFTResponse>

  func makeCreateRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateRoyaltyConfig, Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>

  func makeUpdateRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>

  func makeDeleteRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Likenft_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Likechain_Likenft_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeNewClassCall(
    _ request: Likechain_Likenft_V1_MsgNewClass,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgNewClass, Likechain_Likenft_V1_MsgNewClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.newClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewClassInterceptors() ?? []
    )
  }

  internal func makeUpdateClassCall(
    _ request: Likechain_Likenft_V1_MsgUpdateClass,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateClass, Likechain_Likenft_V1_MsgUpdateClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassInterceptors() ?? []
    )
  }

  internal func makeMintNftCall(
    _ request: Likechain_Likenft_V1_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgMintNFT, Likechain_Likenft_V1_MsgMintNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.mintNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintNFTInterceptors() ?? []
    )
  }

  internal func makeBurnNftCall(
    _ request: Likechain_Likenft_V1_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgBurnNFT, Likechain_Likenft_V1_MsgBurnNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.burnNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? []
    )
  }

  internal func makeCreateBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_MsgCreateBlindBoxContent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateBlindBoxContent, Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBlindBoxContentInterceptors() ?? []
    )
  }

  internal func makeUpdateBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateBlindBoxContent, Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBlindBoxContentInterceptors() ?? []
    )
  }

  internal func makeDeleteBlindBoxContentCall(
    _ request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteBlindBoxContent, Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBlindBoxContentInterceptors() ?? []
    )
  }

  internal func makeCreateOfferCall(
    _ request: Likechain_Likenft_V1_MsgCreateOffer,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateOffer, Likechain_Likenft_V1_MsgCreateOfferResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOfferInterceptors() ?? []
    )
  }

  internal func makeUpdateOfferCall(
    _ request: Likechain_Likenft_V1_MsgUpdateOffer,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateOffer, Likechain_Likenft_V1_MsgUpdateOfferResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateOfferInterceptors() ?? []
    )
  }

  internal func makeDeleteOfferCall(
    _ request: Likechain_Likenft_V1_MsgDeleteOffer,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteOffer, Likechain_Likenft_V1_MsgDeleteOfferResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteOfferInterceptors() ?? []
    )
  }

  internal func makeCreateListingCall(
    _ request: Likechain_Likenft_V1_MsgCreateListing,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateListing, Likechain_Likenft_V1_MsgCreateListingResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateListingInterceptors() ?? []
    )
  }

  internal func makeUpdateListingCall(
    _ request: Likechain_Likenft_V1_MsgUpdateListing,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateListing, Likechain_Likenft_V1_MsgUpdateListingResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateListingInterceptors() ?? []
    )
  }

  internal func makeDeleteListingCall(
    _ request: Likechain_Likenft_V1_MsgDeleteListing,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteListing, Likechain_Likenft_V1_MsgDeleteListingResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteListingInterceptors() ?? []
    )
  }

  internal func makeSellNftCall(
    _ request: Likechain_Likenft_V1_MsgSellNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgSellNFT, Likechain_Likenft_V1_MsgSellNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.sellNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellNFTInterceptors() ?? []
    )
  }

  internal func makeBuyNftCall(
    _ request: Likechain_Likenft_V1_MsgBuyNFT,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgBuyNFT, Likechain_Likenft_V1_MsgBuyNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.buyNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyNFTInterceptors() ?? []
    )
  }

  internal func makeCreateRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgCreateRoyaltyConfig, Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoyaltyConfigInterceptors() ?? []
    )
  }

  internal func makeUpdateRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRoyaltyConfigInterceptors() ?? []
    )
  }

  internal func makeDeleteRoyaltyConfigCall(
    _ request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse> {
    return self.makeAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRoyaltyConfigInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Likenft_V1_MsgAsyncClientProtocol {
  internal func newClass(
    _ request: Likechain_Likenft_V1_MsgNewClass,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgNewClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.newClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewClassInterceptors() ?? []
    )
  }

  internal func updateClass(
    _ request: Likechain_Likenft_V1_MsgUpdateClass,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgUpdateClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassInterceptors() ?? []
    )
  }

  internal func mintNFT(
    _ request: Likechain_Likenft_V1_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgMintNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.mintNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintNFTInterceptors() ?? []
    )
  }

  internal func burnNFT(
    _ request: Likechain_Likenft_V1_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgBurnNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.burnNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? []
    )
  }

  internal func createBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgCreateBlindBoxContent,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBlindBoxContentInterceptors() ?? []
    )
  }

  internal func updateBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBlindBoxContentInterceptors() ?? []
    )
  }

  internal func deleteBlindBoxContent(
    _ request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteBlindBoxContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBlindBoxContentInterceptors() ?? []
    )
  }

  internal func createOffer(
    _ request: Likechain_Likenft_V1_MsgCreateOffer,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgCreateOfferResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOfferInterceptors() ?? []
    )
  }

  internal func updateOffer(
    _ request: Likechain_Likenft_V1_MsgUpdateOffer,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgUpdateOfferResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateOfferInterceptors() ?? []
    )
  }

  internal func deleteOffer(
    _ request: Likechain_Likenft_V1_MsgDeleteOffer,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgDeleteOfferResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteOffer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteOfferInterceptors() ?? []
    )
  }

  internal func createListing(
    _ request: Likechain_Likenft_V1_MsgCreateListing,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgCreateListingResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateListingInterceptors() ?? []
    )
  }

  internal func updateListing(
    _ request: Likechain_Likenft_V1_MsgUpdateListing,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgUpdateListingResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateListingInterceptors() ?? []
    )
  }

  internal func deleteListing(
    _ request: Likechain_Likenft_V1_MsgDeleteListing,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgDeleteListingResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteListing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteListingInterceptors() ?? []
    )
  }

  internal func sellNFT(
    _ request: Likechain_Likenft_V1_MsgSellNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgSellNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.sellNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellNFTInterceptors() ?? []
    )
  }

  internal func buyNFT(
    _ request: Likechain_Likenft_V1_MsgBuyNFT,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgBuyNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.buyNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyNFTInterceptors() ?? []
    )
  }

  internal func createRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.createRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoyaltyConfigInterceptors() ?? []
    )
  }

  internal func updateRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.updateRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRoyaltyConfigInterceptors() ?? []
    )
  }

  internal func deleteRoyaltyConfig(
    _ request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig,
    callOptions: CallOptions? = nil
  ) async throws -> Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse {
    return try await self.performAsyncUnaryCall(
      path: Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteRoyaltyConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRoyaltyConfigInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Likechain_Likenft_V1_MsgAsyncClient: Likechain_Likenft_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Likechain_Likenft_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'newClass'.
  func makeNewClassInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgNewClass, Likechain_Likenft_V1_MsgNewClassResponse>]

  /// - Returns: Interceptors to use when invoking 'updateClass'.
  func makeUpdateClassInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgUpdateClass, Likechain_Likenft_V1_MsgUpdateClassResponse>]

  /// - Returns: Interceptors to use when invoking 'mintNFT'.
  func makeMintNFTInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgMintNFT, Likechain_Likenft_V1_MsgMintNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'burnNFT'.
  func makeBurnNFTInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgBurnNFT, Likechain_Likenft_V1_MsgBurnNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'createBlindBoxContent'.
  func makeCreateBlindBoxContentInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgCreateBlindBoxContent, Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBlindBoxContent'.
  func makeUpdateBlindBoxContentInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgUpdateBlindBoxContent, Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteBlindBoxContent'.
  func makeDeleteBlindBoxContentInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgDeleteBlindBoxContent, Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when invoking 'createOffer'.
  func makeCreateOfferInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgCreateOffer, Likechain_Likenft_V1_MsgCreateOfferResponse>]

  /// - Returns: Interceptors to use when invoking 'updateOffer'.
  func makeUpdateOfferInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgUpdateOffer, Likechain_Likenft_V1_MsgUpdateOfferResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteOffer'.
  func makeDeleteOfferInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgDeleteOffer, Likechain_Likenft_V1_MsgDeleteOfferResponse>]

  /// - Returns: Interceptors to use when invoking 'createListing'.
  func makeCreateListingInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgCreateListing, Likechain_Likenft_V1_MsgCreateListingResponse>]

  /// - Returns: Interceptors to use when invoking 'updateListing'.
  func makeUpdateListingInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgUpdateListing, Likechain_Likenft_V1_MsgUpdateListingResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteListing'.
  func makeDeleteListingInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgDeleteListing, Likechain_Likenft_V1_MsgDeleteListingResponse>]

  /// - Returns: Interceptors to use when invoking 'sellNFT'.
  func makeSellNFTInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgSellNFT, Likechain_Likenft_V1_MsgSellNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'buyNFT'.
  func makeBuyNFTInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgBuyNFT, Likechain_Likenft_V1_MsgBuyNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'createRoyaltyConfig'.
  func makeCreateRoyaltyConfigInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgCreateRoyaltyConfig, Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'updateRoyaltyConfig'.
  func makeUpdateRoyaltyConfigInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteRoyaltyConfig'.
  func makeDeleteRoyaltyConfigInterceptors() -> [ClientInterceptor<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>]
}

internal enum Likechain_Likenft_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "likechain.likenft.v1.Msg",
    methods: [
      Likechain_Likenft_V1_MsgClientMetadata.Methods.newClass,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.updateClass,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.mintNFT,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.burnNFT,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.createBlindBoxContent,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.updateBlindBoxContent,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteBlindBoxContent,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.createOffer,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.updateOffer,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteOffer,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.createListing,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.updateListing,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteListing,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.sellNFT,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.buyNFT,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.createRoyaltyConfig,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.updateRoyaltyConfig,
      Likechain_Likenft_V1_MsgClientMetadata.Methods.deleteRoyaltyConfig,
    ]
  )

  internal enum Methods {
    internal static let newClass = GRPCMethodDescriptor(
      name: "NewClass",
      path: "/likechain.likenft.v1.Msg/NewClass",
      type: GRPCCallType.unary
    )

    internal static let updateClass = GRPCMethodDescriptor(
      name: "UpdateClass",
      path: "/likechain.likenft.v1.Msg/UpdateClass",
      type: GRPCCallType.unary
    )

    internal static let mintNFT = GRPCMethodDescriptor(
      name: "MintNFT",
      path: "/likechain.likenft.v1.Msg/MintNFT",
      type: GRPCCallType.unary
    )

    internal static let burnNFT = GRPCMethodDescriptor(
      name: "BurnNFT",
      path: "/likechain.likenft.v1.Msg/BurnNFT",
      type: GRPCCallType.unary
    )

    internal static let createBlindBoxContent = GRPCMethodDescriptor(
      name: "CreateBlindBoxContent",
      path: "/likechain.likenft.v1.Msg/CreateBlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let updateBlindBoxContent = GRPCMethodDescriptor(
      name: "UpdateBlindBoxContent",
      path: "/likechain.likenft.v1.Msg/UpdateBlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let deleteBlindBoxContent = GRPCMethodDescriptor(
      name: "DeleteBlindBoxContent",
      path: "/likechain.likenft.v1.Msg/DeleteBlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let createOffer = GRPCMethodDescriptor(
      name: "CreateOffer",
      path: "/likechain.likenft.v1.Msg/CreateOffer",
      type: GRPCCallType.unary
    )

    internal static let updateOffer = GRPCMethodDescriptor(
      name: "UpdateOffer",
      path: "/likechain.likenft.v1.Msg/UpdateOffer",
      type: GRPCCallType.unary
    )

    internal static let deleteOffer = GRPCMethodDescriptor(
      name: "DeleteOffer",
      path: "/likechain.likenft.v1.Msg/DeleteOffer",
      type: GRPCCallType.unary
    )

    internal static let createListing = GRPCMethodDescriptor(
      name: "CreateListing",
      path: "/likechain.likenft.v1.Msg/CreateListing",
      type: GRPCCallType.unary
    )

    internal static let updateListing = GRPCMethodDescriptor(
      name: "UpdateListing",
      path: "/likechain.likenft.v1.Msg/UpdateListing",
      type: GRPCCallType.unary
    )

    internal static let deleteListing = GRPCMethodDescriptor(
      name: "DeleteListing",
      path: "/likechain.likenft.v1.Msg/DeleteListing",
      type: GRPCCallType.unary
    )

    internal static let sellNFT = GRPCMethodDescriptor(
      name: "SellNFT",
      path: "/likechain.likenft.v1.Msg/SellNFT",
      type: GRPCCallType.unary
    )

    internal static let buyNFT = GRPCMethodDescriptor(
      name: "BuyNFT",
      path: "/likechain.likenft.v1.Msg/BuyNFT",
      type: GRPCCallType.unary
    )

    internal static let createRoyaltyConfig = GRPCMethodDescriptor(
      name: "CreateRoyaltyConfig",
      path: "/likechain.likenft.v1.Msg/CreateRoyaltyConfig",
      type: GRPCCallType.unary
    )

    internal static let updateRoyaltyConfig = GRPCMethodDescriptor(
      name: "UpdateRoyaltyConfig",
      path: "/likechain.likenft.v1.Msg/UpdateRoyaltyConfig",
      type: GRPCCallType.unary
    )

    internal static let deleteRoyaltyConfig = GRPCMethodDescriptor(
      name: "DeleteRoyaltyConfig",
      path: "/likechain.likenft.v1.Msg/DeleteRoyaltyConfig",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Likechain_Likenft_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Likechain_Likenft_V1_MsgServerInterceptorFactoryProtocol? { get }

  func newClass(request: Likechain_Likenft_V1_MsgNewClass, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgNewClassResponse>

  func updateClass(request: Likechain_Likenft_V1_MsgUpdateClass, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgUpdateClassResponse>

  func mintNFT(request: Likechain_Likenft_V1_MsgMintNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgMintNFTResponse>

  func burnNFT(request: Likechain_Likenft_V1_MsgBurnNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgBurnNFTResponse>

  func createBlindBoxContent(request: Likechain_Likenft_V1_MsgCreateBlindBoxContent, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>

  func updateBlindBoxContent(request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>

  func deleteBlindBoxContent(request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>

  func createOffer(request: Likechain_Likenft_V1_MsgCreateOffer, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgCreateOfferResponse>

  func updateOffer(request: Likechain_Likenft_V1_MsgUpdateOffer, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgUpdateOfferResponse>

  func deleteOffer(request: Likechain_Likenft_V1_MsgDeleteOffer, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgDeleteOfferResponse>

  func createListing(request: Likechain_Likenft_V1_MsgCreateListing, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgCreateListingResponse>

  func updateListing(request: Likechain_Likenft_V1_MsgUpdateListing, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgUpdateListingResponse>

  func deleteListing(request: Likechain_Likenft_V1_MsgDeleteListing, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgDeleteListingResponse>

  func sellNFT(request: Likechain_Likenft_V1_MsgSellNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgSellNFTResponse>

  func buyNFT(request: Likechain_Likenft_V1_MsgBuyNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgBuyNFTResponse>

  func createRoyaltyConfig(request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>

  func updateRoyaltyConfig(request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>

  /// this line is used by starport scaffolding # proto/tx/rpc
  func deleteRoyaltyConfig(request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, context: StatusOnlyCallContext) -> EventLoopFuture<Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>
}

extension Likechain_Likenft_V1_MsgProvider {
  internal var serviceName: Substring {
    return Likechain_Likenft_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "NewClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgNewClass>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgNewClassResponse>(),
        interceptors: self.interceptors?.makeNewClassInterceptors() ?? [],
        userFunction: self.newClass(request:context:)
      )

    case "UpdateClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateClass>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateClassResponse>(),
        interceptors: self.interceptors?.makeUpdateClassInterceptors() ?? [],
        userFunction: self.updateClass(request:context:)
      )

    case "MintNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgMintNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgMintNFTResponse>(),
        interceptors: self.interceptors?.makeMintNFTInterceptors() ?? [],
        userFunction: self.mintNFT(request:context:)
      )

    case "BurnNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgBurnNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgBurnNFTResponse>(),
        interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? [],
        userFunction: self.burnNFT(request:context:)
      )

    case "CreateBlindBoxContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateBlindBoxContent>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeCreateBlindBoxContentInterceptors() ?? [],
        userFunction: self.createBlindBoxContent(request:context:)
      )

    case "UpdateBlindBoxContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateBlindBoxContent>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeUpdateBlindBoxContentInterceptors() ?? [],
        userFunction: self.updateBlindBoxContent(request:context:)
      )

    case "DeleteBlindBoxContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteBlindBoxContent>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeDeleteBlindBoxContentInterceptors() ?? [],
        userFunction: self.deleteBlindBoxContent(request:context:)
      )

    case "CreateOffer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateOffer>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateOfferResponse>(),
        interceptors: self.interceptors?.makeCreateOfferInterceptors() ?? [],
        userFunction: self.createOffer(request:context:)
      )

    case "UpdateOffer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateOffer>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateOfferResponse>(),
        interceptors: self.interceptors?.makeUpdateOfferInterceptors() ?? [],
        userFunction: self.updateOffer(request:context:)
      )

    case "DeleteOffer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteOffer>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteOfferResponse>(),
        interceptors: self.interceptors?.makeDeleteOfferInterceptors() ?? [],
        userFunction: self.deleteOffer(request:context:)
      )

    case "CreateListing":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateListing>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateListingResponse>(),
        interceptors: self.interceptors?.makeCreateListingInterceptors() ?? [],
        userFunction: self.createListing(request:context:)
      )

    case "UpdateListing":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateListing>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateListingResponse>(),
        interceptors: self.interceptors?.makeUpdateListingInterceptors() ?? [],
        userFunction: self.updateListing(request:context:)
      )

    case "DeleteListing":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteListing>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteListingResponse>(),
        interceptors: self.interceptors?.makeDeleteListingInterceptors() ?? [],
        userFunction: self.deleteListing(request:context:)
      )

    case "SellNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgSellNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgSellNFTResponse>(),
        interceptors: self.interceptors?.makeSellNFTInterceptors() ?? [],
        userFunction: self.sellNFT(request:context:)
      )

    case "BuyNFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgBuyNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgBuyNFTResponse>(),
        interceptors: self.interceptors?.makeBuyNFTInterceptors() ?? [],
        userFunction: self.buyNFT(request:context:)
      )

    case "CreateRoyaltyConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateRoyaltyConfig>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeCreateRoyaltyConfigInterceptors() ?? [],
        userFunction: self.createRoyaltyConfig(request:context:)
      )

    case "UpdateRoyaltyConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeUpdateRoyaltyConfigInterceptors() ?? [],
        userFunction: self.updateRoyaltyConfig(request:context:)
      )

    case "DeleteRoyaltyConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeDeleteRoyaltyConfigInterceptors() ?? [],
        userFunction: self.deleteRoyaltyConfig(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Likechain_Likenft_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Likechain_Likenft_V1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func newClass(
    request: Likechain_Likenft_V1_MsgNewClass,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgNewClassResponse

  @Sendable func updateClass(
    request: Likechain_Likenft_V1_MsgUpdateClass,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgUpdateClassResponse

  @Sendable func mintNFT(
    request: Likechain_Likenft_V1_MsgMintNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgMintNFTResponse

  @Sendable func burnNFT(
    request: Likechain_Likenft_V1_MsgBurnNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgBurnNFTResponse

  @Sendable func createBlindBoxContent(
    request: Likechain_Likenft_V1_MsgCreateBlindBoxContent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse

  @Sendable func updateBlindBoxContent(
    request: Likechain_Likenft_V1_MsgUpdateBlindBoxContent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse

  @Sendable func deleteBlindBoxContent(
    request: Likechain_Likenft_V1_MsgDeleteBlindBoxContent,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse

  @Sendable func createOffer(
    request: Likechain_Likenft_V1_MsgCreateOffer,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgCreateOfferResponse

  @Sendable func updateOffer(
    request: Likechain_Likenft_V1_MsgUpdateOffer,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgUpdateOfferResponse

  @Sendable func deleteOffer(
    request: Likechain_Likenft_V1_MsgDeleteOffer,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgDeleteOfferResponse

  @Sendable func createListing(
    request: Likechain_Likenft_V1_MsgCreateListing,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgCreateListingResponse

  @Sendable func updateListing(
    request: Likechain_Likenft_V1_MsgUpdateListing,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgUpdateListingResponse

  @Sendable func deleteListing(
    request: Likechain_Likenft_V1_MsgDeleteListing,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgDeleteListingResponse

  @Sendable func sellNFT(
    request: Likechain_Likenft_V1_MsgSellNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgSellNFTResponse

  @Sendable func buyNFT(
    request: Likechain_Likenft_V1_MsgBuyNFT,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgBuyNFTResponse

  @Sendable func createRoyaltyConfig(
    request: Likechain_Likenft_V1_MsgCreateRoyaltyConfig,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse

  @Sendable func updateRoyaltyConfig(
    request: Likechain_Likenft_V1_MsgUpdateRoyaltyConfig,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse

  /// this line is used by starport scaffolding # proto/tx/rpc
  @Sendable func deleteRoyaltyConfig(
    request: Likechain_Likenft_V1_MsgDeleteRoyaltyConfig,
    context: GRPCAsyncServerCallContext
  ) async throws -> Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Likechain_Likenft_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Likechain_Likenft_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Likechain_Likenft_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Likechain_Likenft_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "NewClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgNewClass>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgNewClassResponse>(),
        interceptors: self.interceptors?.makeNewClassInterceptors() ?? [],
        wrapping: self.newClass(request:context:)
      )

    case "UpdateClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateClass>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateClassResponse>(),
        interceptors: self.interceptors?.makeUpdateClassInterceptors() ?? [],
        wrapping: self.updateClass(request:context:)
      )

    case "MintNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgMintNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgMintNFTResponse>(),
        interceptors: self.interceptors?.makeMintNFTInterceptors() ?? [],
        wrapping: self.mintNFT(request:context:)
      )

    case "BurnNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgBurnNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgBurnNFTResponse>(),
        interceptors: self.interceptors?.makeBurnNFTInterceptors() ?? [],
        wrapping: self.burnNFT(request:context:)
      )

    case "CreateBlindBoxContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateBlindBoxContent>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeCreateBlindBoxContentInterceptors() ?? [],
        wrapping: self.createBlindBoxContent(request:context:)
      )

    case "UpdateBlindBoxContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateBlindBoxContent>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeUpdateBlindBoxContentInterceptors() ?? [],
        wrapping: self.updateBlindBoxContent(request:context:)
      )

    case "DeleteBlindBoxContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteBlindBoxContent>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>(),
        interceptors: self.interceptors?.makeDeleteBlindBoxContentInterceptors() ?? [],
        wrapping: self.deleteBlindBoxContent(request:context:)
      )

    case "CreateOffer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateOffer>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateOfferResponse>(),
        interceptors: self.interceptors?.makeCreateOfferInterceptors() ?? [],
        wrapping: self.createOffer(request:context:)
      )

    case "UpdateOffer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateOffer>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateOfferResponse>(),
        interceptors: self.interceptors?.makeUpdateOfferInterceptors() ?? [],
        wrapping: self.updateOffer(request:context:)
      )

    case "DeleteOffer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteOffer>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteOfferResponse>(),
        interceptors: self.interceptors?.makeDeleteOfferInterceptors() ?? [],
        wrapping: self.deleteOffer(request:context:)
      )

    case "CreateListing":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateListing>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateListingResponse>(),
        interceptors: self.interceptors?.makeCreateListingInterceptors() ?? [],
        wrapping: self.createListing(request:context:)
      )

    case "UpdateListing":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateListing>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateListingResponse>(),
        interceptors: self.interceptors?.makeUpdateListingInterceptors() ?? [],
        wrapping: self.updateListing(request:context:)
      )

    case "DeleteListing":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteListing>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteListingResponse>(),
        interceptors: self.interceptors?.makeDeleteListingInterceptors() ?? [],
        wrapping: self.deleteListing(request:context:)
      )

    case "SellNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgSellNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgSellNFTResponse>(),
        interceptors: self.interceptors?.makeSellNFTInterceptors() ?? [],
        wrapping: self.sellNFT(request:context:)
      )

    case "BuyNFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgBuyNFT>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgBuyNFTResponse>(),
        interceptors: self.interceptors?.makeBuyNFTInterceptors() ?? [],
        wrapping: self.buyNFT(request:context:)
      )

    case "CreateRoyaltyConfig":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgCreateRoyaltyConfig>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeCreateRoyaltyConfigInterceptors() ?? [],
        wrapping: self.createRoyaltyConfig(request:context:)
      )

    case "UpdateRoyaltyConfig":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeUpdateRoyaltyConfigInterceptors() ?? [],
        wrapping: self.updateRoyaltyConfig(request:context:)
      )

    case "DeleteRoyaltyConfig":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig>(),
        responseSerializer: ProtobufSerializer<Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>(),
        interceptors: self.interceptors?.makeDeleteRoyaltyConfigInterceptors() ?? [],
        wrapping: self.deleteRoyaltyConfig(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Likechain_Likenft_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'newClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewClassInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgNewClass, Likechain_Likenft_V1_MsgNewClassResponse>]

  /// - Returns: Interceptors to use when handling 'updateClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateClassInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgUpdateClass, Likechain_Likenft_V1_MsgUpdateClassResponse>]

  /// - Returns: Interceptors to use when handling 'mintNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintNFTInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgMintNFT, Likechain_Likenft_V1_MsgMintNFTResponse>]

  /// - Returns: Interceptors to use when handling 'burnNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnNFTInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgBurnNFT, Likechain_Likenft_V1_MsgBurnNFTResponse>]

  /// - Returns: Interceptors to use when handling 'createBlindBoxContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBlindBoxContentInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgCreateBlindBoxContent, Likechain_Likenft_V1_MsgCreateBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when handling 'updateBlindBoxContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBlindBoxContentInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgUpdateBlindBoxContent, Likechain_Likenft_V1_MsgUpdateBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when handling 'deleteBlindBoxContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteBlindBoxContentInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgDeleteBlindBoxContent, Likechain_Likenft_V1_MsgDeleteBlindBoxContentResponse>]

  /// - Returns: Interceptors to use when handling 'createOffer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateOfferInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgCreateOffer, Likechain_Likenft_V1_MsgCreateOfferResponse>]

  /// - Returns: Interceptors to use when handling 'updateOffer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateOfferInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgUpdateOffer, Likechain_Likenft_V1_MsgUpdateOfferResponse>]

  /// - Returns: Interceptors to use when handling 'deleteOffer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteOfferInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgDeleteOffer, Likechain_Likenft_V1_MsgDeleteOfferResponse>]

  /// - Returns: Interceptors to use when handling 'createListing'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateListingInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgCreateListing, Likechain_Likenft_V1_MsgCreateListingResponse>]

  /// - Returns: Interceptors to use when handling 'updateListing'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateListingInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgUpdateListing, Likechain_Likenft_V1_MsgUpdateListingResponse>]

  /// - Returns: Interceptors to use when handling 'deleteListing'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteListingInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgDeleteListing, Likechain_Likenft_V1_MsgDeleteListingResponse>]

  /// - Returns: Interceptors to use when handling 'sellNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellNFTInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgSellNFT, Likechain_Likenft_V1_MsgSellNFTResponse>]

  /// - Returns: Interceptors to use when handling 'buyNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyNFTInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgBuyNFT, Likechain_Likenft_V1_MsgBuyNFTResponse>]

  /// - Returns: Interceptors to use when handling 'createRoyaltyConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRoyaltyConfigInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgCreateRoyaltyConfig, Likechain_Likenft_V1_MsgCreateRoyaltyConfigResponse>]

  /// - Returns: Interceptors to use when handling 'updateRoyaltyConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateRoyaltyConfigInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgUpdateRoyaltyConfig, Likechain_Likenft_V1_MsgUpdateRoyaltyConfigResponse>]

  /// - Returns: Interceptors to use when handling 'deleteRoyaltyConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteRoyaltyConfigInterceptors() -> [ServerInterceptor<Likechain_Likenft_V1_MsgDeleteRoyaltyConfig, Likechain_Likenft_V1_MsgDeleteRoyaltyConfigResponse>]
}

internal enum Likechain_Likenft_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "likechain.likenft.v1.Msg",
    methods: [
      Likechain_Likenft_V1_MsgServerMetadata.Methods.newClass,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.updateClass,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.mintNFT,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.burnNFT,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.createBlindBoxContent,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.updateBlindBoxContent,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.deleteBlindBoxContent,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.createOffer,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.updateOffer,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.deleteOffer,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.createListing,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.updateListing,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.deleteListing,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.sellNFT,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.buyNFT,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.createRoyaltyConfig,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.updateRoyaltyConfig,
      Likechain_Likenft_V1_MsgServerMetadata.Methods.deleteRoyaltyConfig,
    ]
  )

  internal enum Methods {
    internal static let newClass = GRPCMethodDescriptor(
      name: "NewClass",
      path: "/likechain.likenft.v1.Msg/NewClass",
      type: GRPCCallType.unary
    )

    internal static let updateClass = GRPCMethodDescriptor(
      name: "UpdateClass",
      path: "/likechain.likenft.v1.Msg/UpdateClass",
      type: GRPCCallType.unary
    )

    internal static let mintNFT = GRPCMethodDescriptor(
      name: "MintNFT",
      path: "/likechain.likenft.v1.Msg/MintNFT",
      type: GRPCCallType.unary
    )

    internal static let burnNFT = GRPCMethodDescriptor(
      name: "BurnNFT",
      path: "/likechain.likenft.v1.Msg/BurnNFT",
      type: GRPCCallType.unary
    )

    internal static let createBlindBoxContent = GRPCMethodDescriptor(
      name: "CreateBlindBoxContent",
      path: "/likechain.likenft.v1.Msg/CreateBlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let updateBlindBoxContent = GRPCMethodDescriptor(
      name: "UpdateBlindBoxContent",
      path: "/likechain.likenft.v1.Msg/UpdateBlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let deleteBlindBoxContent = GRPCMethodDescriptor(
      name: "DeleteBlindBoxContent",
      path: "/likechain.likenft.v1.Msg/DeleteBlindBoxContent",
      type: GRPCCallType.unary
    )

    internal static let createOffer = GRPCMethodDescriptor(
      name: "CreateOffer",
      path: "/likechain.likenft.v1.Msg/CreateOffer",
      type: GRPCCallType.unary
    )

    internal static let updateOffer = GRPCMethodDescriptor(
      name: "UpdateOffer",
      path: "/likechain.likenft.v1.Msg/UpdateOffer",
      type: GRPCCallType.unary
    )

    internal static let deleteOffer = GRPCMethodDescriptor(
      name: "DeleteOffer",
      path: "/likechain.likenft.v1.Msg/DeleteOffer",
      type: GRPCCallType.unary
    )

    internal static let createListing = GRPCMethodDescriptor(
      name: "CreateListing",
      path: "/likechain.likenft.v1.Msg/CreateListing",
      type: GRPCCallType.unary
    )

    internal static let updateListing = GRPCMethodDescriptor(
      name: "UpdateListing",
      path: "/likechain.likenft.v1.Msg/UpdateListing",
      type: GRPCCallType.unary
    )

    internal static let deleteListing = GRPCMethodDescriptor(
      name: "DeleteListing",
      path: "/likechain.likenft.v1.Msg/DeleteListing",
      type: GRPCCallType.unary
    )

    internal static let sellNFT = GRPCMethodDescriptor(
      name: "SellNFT",
      path: "/likechain.likenft.v1.Msg/SellNFT",
      type: GRPCCallType.unary
    )

    internal static let buyNFT = GRPCMethodDescriptor(
      name: "BuyNFT",
      path: "/likechain.likenft.v1.Msg/BuyNFT",
      type: GRPCCallType.unary
    )

    internal static let createRoyaltyConfig = GRPCMethodDescriptor(
      name: "CreateRoyaltyConfig",
      path: "/likechain.likenft.v1.Msg/CreateRoyaltyConfig",
      type: GRPCCallType.unary
    )

    internal static let updateRoyaltyConfig = GRPCMethodDescriptor(
      name: "UpdateRoyaltyConfig",
      path: "/likechain.likenft.v1.Msg/UpdateRoyaltyConfig",
      type: GRPCCallType.unary
    )

    internal static let deleteRoyaltyConfig = GRPCMethodDescriptor(
      name: "DeleteRoyaltyConfig",
      path: "/likechain.likenft.v1.Msg/DeleteRoyaltyConfig",
      type: GRPCCallType.unary
    )
  }
}
