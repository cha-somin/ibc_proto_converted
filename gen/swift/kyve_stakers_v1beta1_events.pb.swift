// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/stakers/v1beta1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventUpdateParams is an event emitted when the module parameters are updated.
/// emitted_by: MsgUpdateParams
struct Kyve_Stakers_V1beta1_EventUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// old_params is the module's old parameters.
  var oldParams: Kyve_Stakers_V1beta1_Params {
    get {return _oldParams ?? Kyve_Stakers_V1beta1_Params()}
    set {_oldParams = newValue}
  }
  /// Returns true if `oldParams` has been explicitly set.
  var hasOldParams: Bool {return self._oldParams != nil}
  /// Clears the value of `oldParams`. Subsequent reads from it will return its default value.
  mutating func clearOldParams() {self._oldParams = nil}

  /// new_params is the module's new parameters.
  var newParams: Kyve_Stakers_V1beta1_Params {
    get {return _newParams ?? Kyve_Stakers_V1beta1_Params()}
    set {_newParams = newValue}
  }
  /// Returns true if `newParams` has been explicitly set.
  var hasNewParams: Bool {return self._newParams != nil}
  /// Clears the value of `newParams`. Subsequent reads from it will return its default value.
  mutating func clearNewParams() {self._newParams = nil}

  /// payload is the parameter updates that were performed.
  var payload: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _oldParams: Kyve_Stakers_V1beta1_Params? = nil
  fileprivate var _newParams: Kyve_Stakers_V1beta1_Params? = nil
}

/// EventCreateStaker is an event emitted when a protocol node stakes in a pool.
/// emitted_by: MsgCreateStaker
struct Kyve_Stakers_V1beta1_EventCreateStaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  /// commission
  var commission: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventUpdateMetadata is an event emitted when a protocol node updates their metadata.
/// emitted_by: MsgUpdateMetadata
struct Kyve_Stakers_V1beta1_EventUpdateMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// moniker ...
  var moniker: String = String()

  /// website ...
  var website: String = String()

  /// identity ...
  var identity: String = String()

  /// security_contact ...
  var securityContact: String = String()

  /// details ...
  var details: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventUpdateCommission ...
/// emitted_by: EndBlock
struct Kyve_Stakers_V1beta1_EventUpdateCommission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// commission ...
  var commission: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventClaimCommissionRewards ...
/// emitted_by: MsgClaimCommissionRewards
struct Kyve_Stakers_V1beta1_EventClaimCommissionRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventJoinPool ...
/// emitted_by: MsgJoinPool
struct Kyve_Stakers_V1beta1_EventJoinPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the pool the staker joined
  var poolID: UInt64 = 0

  /// staker is the address of the staker
  var staker: String = String()

  /// valaddress is the address of the protocol node which
  /// votes in favor of the staker
  var valaddress: String = String()

  /// amount is the amount of funds transferred to the valaddress
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventLeavePool ...
/// emitted_by: EndBlock
struct Kyve_Stakers_V1beta1_EventLeavePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id ...
  var poolID: UInt64 = 0

  /// staker ...
  var staker: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Stakers_V1beta1_EventUpdateParams: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_EventCreateStaker: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_EventUpdateMetadata: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_EventUpdateCommission: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_EventClaimCommissionRewards: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_EventJoinPool: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_EventLeavePool: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.stakers.v1beta1"

extension Kyve_Stakers_V1beta1_EventUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "old_params"),
    2: .standard(proto: "new_params"),
    3: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._oldParams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._newParams) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._oldParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._newParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventUpdateParams, rhs: Kyve_Stakers_V1beta1_EventUpdateParams) -> Bool {
    if lhs._oldParams != rhs._oldParams {return false}
    if lhs._newParams != rhs._newParams {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_EventCreateStaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreateStaker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "staker"),
    2: .same(proto: "amount"),
    3: .same(proto: "commission"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventCreateStaker, rhs: Kyve_Stakers_V1beta1_EventCreateStaker) -> Bool {
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_EventUpdateMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdateMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "staker"),
    2: .same(proto: "moniker"),
    3: .same(proto: "website"),
    4: .same(proto: "identity"),
    5: .standard(proto: "security_contact"),
    6: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.website) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.securityContact) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.details) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 1)
    }
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 2)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 3)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 4)
    }
    if !self.securityContact.isEmpty {
      try visitor.visitSingularStringField(value: self.securityContact, fieldNumber: 5)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventUpdateMetadata, rhs: Kyve_Stakers_V1beta1_EventUpdateMetadata) -> Bool {
    if lhs.staker != rhs.staker {return false}
    if lhs.moniker != rhs.moniker {return false}
    if lhs.website != rhs.website {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.securityContact != rhs.securityContact {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_EventUpdateCommission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdateCommission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "staker"),
    2: .same(proto: "commission"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 1)
    }
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventUpdateCommission, rhs: Kyve_Stakers_V1beta1_EventUpdateCommission) -> Bool {
    if lhs.staker != rhs.staker {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_EventClaimCommissionRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventClaimCommissionRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "staker"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventClaimCommissionRewards, rhs: Kyve_Stakers_V1beta1_EventClaimCommissionRewards) -> Bool {
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_EventJoinPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventJoinPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
    3: .same(proto: "valaddress"),
    4: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valaddress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if !self.valaddress.isEmpty {
      try visitor.visitSingularStringField(value: self.valaddress, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventJoinPool, rhs: Kyve_Stakers_V1beta1_EventJoinPool) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.valaddress != rhs.valaddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_EventLeavePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventLeavePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_EventLeavePool, rhs: Kyve_Stakers_V1beta1_EventLeavePool) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
