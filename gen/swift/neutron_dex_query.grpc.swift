//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: neutron/dex/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Neutron_Dex_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Neutron_Dex_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Neutron_Dex_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryParamsRequest, Neutron_Dex_QueryParamsResponse>

  func limitOrderTrancheUser(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>

  func limitOrderTrancheUserAll(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>

  func limitOrderTrancheUserAllByAddress(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>

  func limitOrderTranche(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheRequest, Neutron_Dex_QueryGetLimitOrderTrancheResponse>

  func limitOrderTrancheAll(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheRequest, Neutron_Dex_QueryAllLimitOrderTrancheResponse>

  func userDepositsAll(
    _ request: Neutron_Dex_QueryAllUserDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllUserDepositsRequest, Neutron_Dex_QueryAllUserDepositsResponse>

  func tickLiquidityAll(
    _ request: Neutron_Dex_QueryAllTickLiquidityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllTickLiquidityRequest, Neutron_Dex_QueryAllTickLiquidityResponse>

  func inactiveLimitOrderTranche(
    _ request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>

  func inactiveLimitOrderTrancheAll(
    _ request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>

  func poolReservesAll(
    _ request: Neutron_Dex_QueryAllPoolReservesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllPoolReservesRequest, Neutron_Dex_QueryAllPoolReservesResponse>

  func poolReserves(
    _ request: Neutron_Dex_QueryGetPoolReservesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryGetPoolReservesRequest, Neutron_Dex_QueryGetPoolReservesResponse>

  func estimateMultiHopSwap(
    _ request: Neutron_Dex_QueryEstimateMultiHopSwapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryEstimateMultiHopSwapRequest, Neutron_Dex_QueryEstimateMultiHopSwapResponse>

  func estimatePlaceLimitOrder(
    _ request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>

  func pool(
    _ request: Neutron_Dex_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryPoolRequest, Neutron_Dex_QueryPoolResponse>

  func poolByID(
    _ request: Neutron_Dex_QueryPoolByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryPoolByIDRequest, Neutron_Dex_QueryPoolResponse>

  func poolMetadata(
    _ request: Neutron_Dex_QueryGetPoolMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryGetPoolMetadataRequest, Neutron_Dex_QueryGetPoolMetadataResponse>

  func poolMetadataAll(
    _ request: Neutron_Dex_QueryAllPoolMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Dex_QueryAllPoolMetadataRequest, Neutron_Dex_QueryAllPoolMetadataResponse>
}

extension Neutron_Dex_QueryClientProtocol {
  internal var serviceName: String {
    return "neutron.dex.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Neutron_Dex_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryParamsRequest, Neutron_Dex_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a LimitOrderTrancheUser by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrderTrancheUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func limitOrderTrancheUser(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, Neutron_Dex_QueryGetLimitOrderTrancheUserResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserInterceptors() ?? []
    )
  }

  /// Queries a list of LimitOrderTranchUser items.
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrderTrancheUserAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func limitOrderTrancheUserAll(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserAllInterceptors() ?? []
    )
  }

  /// Queries a list of LimitOrderTrancheUser items for a given address.
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrderTrancheUserAllByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func limitOrderTrancheUserAllByAddress(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAllByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserAllByAddressInterceptors() ?? []
    )
  }

  /// Queries a LimitOrderTranche by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrderTranche.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func limitOrderTranche(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheRequest, Neutron_Dex_QueryGetLimitOrderTrancheResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTranche.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheInterceptors() ?? []
    )
  }

  /// Queries a list of LimitOrderTranche items for a given pairID / TokenIn
  /// combination.
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrderTrancheAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func limitOrderTrancheAll(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheRequest, Neutron_Dex_QueryAllLimitOrderTrancheResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheAllInterceptors() ?? []
    )
  }

  /// Queries a list of UserDeposits items.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserDepositsAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userDepositsAll(
    _ request: Neutron_Dex_QueryAllUserDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllUserDepositsRequest, Neutron_Dex_QueryAllUserDepositsResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.userDepositsAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserDepositsAllInterceptors() ?? []
    )
  }

  /// Queries a list of TickLiquidity items.
  ///
  /// - Parameters:
  ///   - request: Request to send to TickLiquidityAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tickLiquidityAll(
    _ request: Neutron_Dex_QueryAllTickLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllTickLiquidityRequest, Neutron_Dex_QueryAllTickLiquidityResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.tickLiquidityAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickLiquidityAllInterceptors() ?? []
    )
  }

  /// Queries a InactiveLimitOrderTranche by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to InactiveLimitOrderTranche.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func inactiveLimitOrderTranche(
    _ request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTranche.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInactiveLimitOrderTrancheInterceptors() ?? []
    )
  }

  /// Queries a list of InactiveLimitOrderTranche items.
  ///
  /// - Parameters:
  ///   - request: Request to send to InactiveLimitOrderTrancheAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func inactiveLimitOrderTrancheAll(
    _ request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTrancheAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInactiveLimitOrderTrancheAllInterceptors() ?? []
    )
  }

  /// Queries a list of PoolReserves items.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolReservesAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolReservesAll(
    _ request: Neutron_Dex_QueryAllPoolReservesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllPoolReservesRequest, Neutron_Dex_QueryAllPoolReservesResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolReservesAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolReservesAllInterceptors() ?? []
    )
  }

  /// Queries a PoolReserve by index
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolReserves.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolReserves(
    _ request: Neutron_Dex_QueryGetPoolReservesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryGetPoolReservesRequest, Neutron_Dex_QueryGetPoolReservesResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolReserves.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolReservesInterceptors() ?? []
    )
  }

  /// Queries the simulated result of a multihop swap
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateMultiHopSwap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateMultiHopSwap(
    _ request: Neutron_Dex_QueryEstimateMultiHopSwapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryEstimateMultiHopSwapRequest, Neutron_Dex_QueryEstimateMultiHopSwapResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.estimateMultiHopSwap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateMultiHopSwapInterceptors() ?? []
    )
  }

  /// Queries the simulated result of a PlaceLimit order
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimatePlaceLimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimatePlaceLimitOrder(
    _ request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, Neutron_Dex_QueryEstimatePlaceLimitOrderResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.estimatePlaceLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimatePlaceLimitOrderInterceptors() ?? []
    )
  }

  /// Queries a pool by pair, tick and fee
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Neutron_Dex_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryPoolRequest, Neutron_Dex_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// Queries a pool by ID
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolByID(
    _ request: Neutron_Dex_QueryPoolByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryPoolByIDRequest, Neutron_Dex_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByIDInterceptors() ?? []
    )
  }

  /// Queries a PoolMetadata by ID
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolMetadata(
    _ request: Neutron_Dex_QueryGetPoolMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryGetPoolMetadataRequest, Neutron_Dex_QueryGetPoolMetadataResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolMetadataInterceptors() ?? []
    )
  }

  /// Queries a list of PoolMetadata items.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolMetadataAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolMetadataAll(
    _ request: Neutron_Dex_QueryAllPoolMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Dex_QueryAllPoolMetadataRequest, Neutron_Dex_QueryAllPoolMetadataResponse> {
    return self.makeUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolMetadataAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolMetadataAllInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Neutron_Dex_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Neutron_Dex_QueryNIOClient")
internal final class Neutron_Dex_QueryClient: Neutron_Dex_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the neutron.dex.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Neutron_Dex_QueryNIOClient: Neutron_Dex_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the neutron.dex.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Neutron_Dex_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Neutron_Dex_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryParamsRequest, Neutron_Dex_QueryParamsResponse>

  func makeLimitOrderTrancheUserCall(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>

  func makeLimitOrderTrancheUserAllCall(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>

  func makeLimitOrderTrancheUserAllByAddressCall(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>

  func makeLimitOrderTrancheCall(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheRequest, Neutron_Dex_QueryGetLimitOrderTrancheResponse>

  func makeLimitOrderTrancheAllCall(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheRequest, Neutron_Dex_QueryAllLimitOrderTrancheResponse>

  func makeUserDepositsAllCall(
    _ request: Neutron_Dex_QueryAllUserDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllUserDepositsRequest, Neutron_Dex_QueryAllUserDepositsResponse>

  func makeTickLiquidityAllCall(
    _ request: Neutron_Dex_QueryAllTickLiquidityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllTickLiquidityRequest, Neutron_Dex_QueryAllTickLiquidityResponse>

  func makeInactiveLimitOrderTrancheCall(
    _ request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>

  func makeInactiveLimitOrderTrancheAllCall(
    _ request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>

  func makePoolReservesAllCall(
    _ request: Neutron_Dex_QueryAllPoolReservesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllPoolReservesRequest, Neutron_Dex_QueryAllPoolReservesResponse>

  func makePoolReservesCall(
    _ request: Neutron_Dex_QueryGetPoolReservesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetPoolReservesRequest, Neutron_Dex_QueryGetPoolReservesResponse>

  func makeEstimateMultiHopSwapCall(
    _ request: Neutron_Dex_QueryEstimateMultiHopSwapRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryEstimateMultiHopSwapRequest, Neutron_Dex_QueryEstimateMultiHopSwapResponse>

  func makeEstimatePlaceLimitOrderCall(
    _ request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>

  func makePoolCall(
    _ request: Neutron_Dex_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryPoolRequest, Neutron_Dex_QueryPoolResponse>

  func makePoolByIDCall(
    _ request: Neutron_Dex_QueryPoolByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryPoolByIDRequest, Neutron_Dex_QueryPoolResponse>

  func makePoolMetadataCall(
    _ request: Neutron_Dex_QueryGetPoolMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetPoolMetadataRequest, Neutron_Dex_QueryGetPoolMetadataResponse>

  func makePoolMetadataAllCall(
    _ request: Neutron_Dex_QueryAllPoolMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllPoolMetadataRequest, Neutron_Dex_QueryAllPoolMetadataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Dex_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Neutron_Dex_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Neutron_Dex_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryParamsRequest, Neutron_Dex_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeLimitOrderTrancheUserCall(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, Neutron_Dex_QueryGetLimitOrderTrancheUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserInterceptors() ?? []
    )
  }

  internal func makeLimitOrderTrancheUserAllCall(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserAllInterceptors() ?? []
    )
  }

  internal func makeLimitOrderTrancheUserAllByAddressCall(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAllByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserAllByAddressInterceptors() ?? []
    )
  }

  internal func makeLimitOrderTrancheCall(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetLimitOrderTrancheRequest, Neutron_Dex_QueryGetLimitOrderTrancheResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTranche.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheInterceptors() ?? []
    )
  }

  internal func makeLimitOrderTrancheAllCall(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllLimitOrderTrancheRequest, Neutron_Dex_QueryAllLimitOrderTrancheResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheAllInterceptors() ?? []
    )
  }

  internal func makeUserDepositsAllCall(
    _ request: Neutron_Dex_QueryAllUserDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllUserDepositsRequest, Neutron_Dex_QueryAllUserDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.userDepositsAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserDepositsAllInterceptors() ?? []
    )
  }

  internal func makeTickLiquidityAllCall(
    _ request: Neutron_Dex_QueryAllTickLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllTickLiquidityRequest, Neutron_Dex_QueryAllTickLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.tickLiquidityAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickLiquidityAllInterceptors() ?? []
    )
  }

  internal func makeInactiveLimitOrderTrancheCall(
    _ request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTranche.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInactiveLimitOrderTrancheInterceptors() ?? []
    )
  }

  internal func makeInactiveLimitOrderTrancheAllCall(
    _ request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTrancheAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInactiveLimitOrderTrancheAllInterceptors() ?? []
    )
  }

  internal func makePoolReservesAllCall(
    _ request: Neutron_Dex_QueryAllPoolReservesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllPoolReservesRequest, Neutron_Dex_QueryAllPoolReservesResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolReservesAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolReservesAllInterceptors() ?? []
    )
  }

  internal func makePoolReservesCall(
    _ request: Neutron_Dex_QueryGetPoolReservesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetPoolReservesRequest, Neutron_Dex_QueryGetPoolReservesResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolReserves.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolReservesInterceptors() ?? []
    )
  }

  internal func makeEstimateMultiHopSwapCall(
    _ request: Neutron_Dex_QueryEstimateMultiHopSwapRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryEstimateMultiHopSwapRequest, Neutron_Dex_QueryEstimateMultiHopSwapResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.estimateMultiHopSwap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateMultiHopSwapInterceptors() ?? []
    )
  }

  internal func makeEstimatePlaceLimitOrderCall(
    _ request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, Neutron_Dex_QueryEstimatePlaceLimitOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.estimatePlaceLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimatePlaceLimitOrderInterceptors() ?? []
    )
  }

  internal func makePoolCall(
    _ request: Neutron_Dex_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryPoolRequest, Neutron_Dex_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func makePoolByIDCall(
    _ request: Neutron_Dex_QueryPoolByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryPoolByIDRequest, Neutron_Dex_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByIDInterceptors() ?? []
    )
  }

  internal func makePoolMetadataCall(
    _ request: Neutron_Dex_QueryGetPoolMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryGetPoolMetadataRequest, Neutron_Dex_QueryGetPoolMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolMetadataInterceptors() ?? []
    )
  }

  internal func makePoolMetadataAllCall(
    _ request: Neutron_Dex_QueryAllPoolMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Dex_QueryAllPoolMetadataRequest, Neutron_Dex_QueryAllPoolMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolMetadataAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolMetadataAllInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Dex_QueryAsyncClientProtocol {
  internal func params(
    _ request: Neutron_Dex_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func limitOrderTrancheUser(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryGetLimitOrderTrancheUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserInterceptors() ?? []
    )
  }

  internal func limitOrderTrancheUserAll(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllLimitOrderTrancheUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserAllInterceptors() ?? []
    )
  }

  internal func limitOrderTrancheUserAllByAddress(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAllByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheUserAllByAddressInterceptors() ?? []
    )
  }

  internal func limitOrderTranche(
    _ request: Neutron_Dex_QueryGetLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryGetLimitOrderTrancheResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTranche.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheInterceptors() ?? []
    )
  }

  internal func limitOrderTrancheAll(
    _ request: Neutron_Dex_QueryAllLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllLimitOrderTrancheResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderTrancheAllInterceptors() ?? []
    )
  }

  internal func userDepositsAll(
    _ request: Neutron_Dex_QueryAllUserDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllUserDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.userDepositsAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserDepositsAllInterceptors() ?? []
    )
  }

  internal func tickLiquidityAll(
    _ request: Neutron_Dex_QueryAllTickLiquidityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllTickLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.tickLiquidityAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickLiquidityAllInterceptors() ?? []
    )
  }

  internal func inactiveLimitOrderTranche(
    _ request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTranche.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInactiveLimitOrderTrancheInterceptors() ?? []
    )
  }

  internal func inactiveLimitOrderTrancheAll(
    _ request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTrancheAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInactiveLimitOrderTrancheAllInterceptors() ?? []
    )
  }

  internal func poolReservesAll(
    _ request: Neutron_Dex_QueryAllPoolReservesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllPoolReservesResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolReservesAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolReservesAllInterceptors() ?? []
    )
  }

  internal func poolReserves(
    _ request: Neutron_Dex_QueryGetPoolReservesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryGetPoolReservesResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolReserves.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolReservesInterceptors() ?? []
    )
  }

  internal func estimateMultiHopSwap(
    _ request: Neutron_Dex_QueryEstimateMultiHopSwapRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryEstimateMultiHopSwapResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.estimateMultiHopSwap.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateMultiHopSwapInterceptors() ?? []
    )
  }

  internal func estimatePlaceLimitOrder(
    _ request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryEstimatePlaceLimitOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.estimatePlaceLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimatePlaceLimitOrderInterceptors() ?? []
    )
  }

  internal func pool(
    _ request: Neutron_Dex_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func poolByID(
    _ request: Neutron_Dex_QueryPoolByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolByIDInterceptors() ?? []
    )
  }

  internal func poolMetadata(
    _ request: Neutron_Dex_QueryGetPoolMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryGetPoolMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolMetadataInterceptors() ?? []
    )
  }

  internal func poolMetadataAll(
    _ request: Neutron_Dex_QueryAllPoolMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Dex_QueryAllPoolMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Dex_QueryClientMetadata.Methods.poolMetadataAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolMetadataAllInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Neutron_Dex_QueryAsyncClient: Neutron_Dex_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Dex_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Neutron_Dex_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryParamsRequest, Neutron_Dex_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrderTrancheUser'.
  func makeLimitOrderTrancheUserInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrderTrancheUserAll'.
  func makeLimitOrderTrancheUserAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrderTrancheUserAllByAddress'.
  func makeLimitOrderTrancheUserAllByAddressInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrderTranche'.
  func makeLimitOrderTrancheInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryGetLimitOrderTrancheRequest, Neutron_Dex_QueryGetLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrderTrancheAll'.
  func makeLimitOrderTrancheAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllLimitOrderTrancheRequest, Neutron_Dex_QueryAllLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when invoking 'userDepositsAll'.
  func makeUserDepositsAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllUserDepositsRequest, Neutron_Dex_QueryAllUserDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'tickLiquidityAll'.
  func makeTickLiquidityAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllTickLiquidityRequest, Neutron_Dex_QueryAllTickLiquidityResponse>]

  /// - Returns: Interceptors to use when invoking 'inactiveLimitOrderTranche'.
  func makeInactiveLimitOrderTrancheInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when invoking 'inactiveLimitOrderTrancheAll'.
  func makeInactiveLimitOrderTrancheAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when invoking 'poolReservesAll'.
  func makePoolReservesAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllPoolReservesRequest, Neutron_Dex_QueryAllPoolReservesResponse>]

  /// - Returns: Interceptors to use when invoking 'poolReserves'.
  func makePoolReservesInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryGetPoolReservesRequest, Neutron_Dex_QueryGetPoolReservesResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateMultiHopSwap'.
  func makeEstimateMultiHopSwapInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryEstimateMultiHopSwapRequest, Neutron_Dex_QueryEstimateMultiHopSwapResponse>]

  /// - Returns: Interceptors to use when invoking 'estimatePlaceLimitOrder'.
  func makeEstimatePlaceLimitOrderInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryPoolRequest, Neutron_Dex_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'poolByID'.
  func makePoolByIDInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryPoolByIDRequest, Neutron_Dex_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'poolMetadata'.
  func makePoolMetadataInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryGetPoolMetadataRequest, Neutron_Dex_QueryGetPoolMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'poolMetadataAll'.
  func makePoolMetadataAllInterceptors() -> [ClientInterceptor<Neutron_Dex_QueryAllPoolMetadataRequest, Neutron_Dex_QueryAllPoolMetadataResponse>]
}

internal enum Neutron_Dex_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "neutron.dex.Query",
    methods: [
      Neutron_Dex_QueryClientMetadata.Methods.params,
      Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUser,
      Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAll,
      Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheUserAllByAddress,
      Neutron_Dex_QueryClientMetadata.Methods.limitOrderTranche,
      Neutron_Dex_QueryClientMetadata.Methods.limitOrderTrancheAll,
      Neutron_Dex_QueryClientMetadata.Methods.userDepositsAll,
      Neutron_Dex_QueryClientMetadata.Methods.tickLiquidityAll,
      Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTranche,
      Neutron_Dex_QueryClientMetadata.Methods.inactiveLimitOrderTrancheAll,
      Neutron_Dex_QueryClientMetadata.Methods.poolReservesAll,
      Neutron_Dex_QueryClientMetadata.Methods.poolReserves,
      Neutron_Dex_QueryClientMetadata.Methods.estimateMultiHopSwap,
      Neutron_Dex_QueryClientMetadata.Methods.estimatePlaceLimitOrder,
      Neutron_Dex_QueryClientMetadata.Methods.pool,
      Neutron_Dex_QueryClientMetadata.Methods.poolByID,
      Neutron_Dex_QueryClientMetadata.Methods.poolMetadata,
      Neutron_Dex_QueryClientMetadata.Methods.poolMetadataAll,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/neutron.dex.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheUser = GRPCMethodDescriptor(
      name: "LimitOrderTrancheUser",
      path: "/neutron.dex.Query/LimitOrderTrancheUser",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheUserAll = GRPCMethodDescriptor(
      name: "LimitOrderTrancheUserAll",
      path: "/neutron.dex.Query/LimitOrderTrancheUserAll",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheUserAllByAddress = GRPCMethodDescriptor(
      name: "LimitOrderTrancheUserAllByAddress",
      path: "/neutron.dex.Query/LimitOrderTrancheUserAllByAddress",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTranche = GRPCMethodDescriptor(
      name: "LimitOrderTranche",
      path: "/neutron.dex.Query/LimitOrderTranche",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheAll = GRPCMethodDescriptor(
      name: "LimitOrderTrancheAll",
      path: "/neutron.dex.Query/LimitOrderTrancheAll",
      type: GRPCCallType.unary
    )

    internal static let userDepositsAll = GRPCMethodDescriptor(
      name: "UserDepositsAll",
      path: "/neutron.dex.Query/UserDepositsAll",
      type: GRPCCallType.unary
    )

    internal static let tickLiquidityAll = GRPCMethodDescriptor(
      name: "TickLiquidityAll",
      path: "/neutron.dex.Query/TickLiquidityAll",
      type: GRPCCallType.unary
    )

    internal static let inactiveLimitOrderTranche = GRPCMethodDescriptor(
      name: "InactiveLimitOrderTranche",
      path: "/neutron.dex.Query/InactiveLimitOrderTranche",
      type: GRPCCallType.unary
    )

    internal static let inactiveLimitOrderTrancheAll = GRPCMethodDescriptor(
      name: "InactiveLimitOrderTrancheAll",
      path: "/neutron.dex.Query/InactiveLimitOrderTrancheAll",
      type: GRPCCallType.unary
    )

    internal static let poolReservesAll = GRPCMethodDescriptor(
      name: "PoolReservesAll",
      path: "/neutron.dex.Query/PoolReservesAll",
      type: GRPCCallType.unary
    )

    internal static let poolReserves = GRPCMethodDescriptor(
      name: "PoolReserves",
      path: "/neutron.dex.Query/PoolReserves",
      type: GRPCCallType.unary
    )

    internal static let estimateMultiHopSwap = GRPCMethodDescriptor(
      name: "EstimateMultiHopSwap",
      path: "/neutron.dex.Query/EstimateMultiHopSwap",
      type: GRPCCallType.unary
    )

    internal static let estimatePlaceLimitOrder = GRPCMethodDescriptor(
      name: "EstimatePlaceLimitOrder",
      path: "/neutron.dex.Query/EstimatePlaceLimitOrder",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/neutron.dex.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let poolByID = GRPCMethodDescriptor(
      name: "PoolByID",
      path: "/neutron.dex.Query/PoolByID",
      type: GRPCCallType.unary
    )

    internal static let poolMetadata = GRPCMethodDescriptor(
      name: "PoolMetadata",
      path: "/neutron.dex.Query/PoolMetadata",
      type: GRPCCallType.unary
    )

    internal static let poolMetadataAll = GRPCMethodDescriptor(
      name: "PoolMetadataAll",
      path: "/neutron.dex.Query/PoolMetadataAll",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Neutron_Dex_QueryProvider: CallHandlerProvider {
  var interceptors: Neutron_Dex_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Neutron_Dex_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryParamsResponse>

  /// Queries a LimitOrderTrancheUser by index.
  func limitOrderTrancheUser(request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>

  /// Queries a list of LimitOrderTranchUser items.
  func limitOrderTrancheUserAll(request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>

  /// Queries a list of LimitOrderTrancheUser items for a given address.
  func limitOrderTrancheUserAllByAddress(request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>

  /// Queries a LimitOrderTranche by index.
  func limitOrderTranche(request: Neutron_Dex_QueryGetLimitOrderTrancheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryGetLimitOrderTrancheResponse>

  /// Queries a list of LimitOrderTranche items for a given pairID / TokenIn
  /// combination.
  func limitOrderTrancheAll(request: Neutron_Dex_QueryAllLimitOrderTrancheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllLimitOrderTrancheResponse>

  /// Queries a list of UserDeposits items.
  func userDepositsAll(request: Neutron_Dex_QueryAllUserDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllUserDepositsResponse>

  /// Queries a list of TickLiquidity items.
  func tickLiquidityAll(request: Neutron_Dex_QueryAllTickLiquidityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllTickLiquidityResponse>

  /// Queries a InactiveLimitOrderTranche by index.
  func inactiveLimitOrderTranche(request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>

  /// Queries a list of InactiveLimitOrderTranche items.
  func inactiveLimitOrderTrancheAll(request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>

  /// Queries a list of PoolReserves items.
  func poolReservesAll(request: Neutron_Dex_QueryAllPoolReservesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllPoolReservesResponse>

  /// Queries a PoolReserve by index
  func poolReserves(request: Neutron_Dex_QueryGetPoolReservesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryGetPoolReservesResponse>

  /// Queries the simulated result of a multihop swap
  func estimateMultiHopSwap(request: Neutron_Dex_QueryEstimateMultiHopSwapRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryEstimateMultiHopSwapResponse>

  /// Queries the simulated result of a PlaceLimit order
  func estimatePlaceLimitOrder(request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>

  /// Queries a pool by pair, tick and fee
  func pool(request: Neutron_Dex_QueryPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryPoolResponse>

  /// Queries a pool by ID
  func poolByID(request: Neutron_Dex_QueryPoolByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryPoolResponse>

  /// Queries a PoolMetadata by ID
  func poolMetadata(request: Neutron_Dex_QueryGetPoolMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryGetPoolMetadataResponse>

  /// Queries a list of PoolMetadata items.
  func poolMetadataAll(request: Neutron_Dex_QueryAllPoolMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Dex_QueryAllPoolMetadataResponse>
}

extension Neutron_Dex_QueryProvider {
  internal var serviceName: Substring {
    return Neutron_Dex_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "LimitOrderTrancheUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheUserInterceptors() ?? [],
        userFunction: self.limitOrderTrancheUser(request:context:)
      )

    case "LimitOrderTrancheUserAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheUserAllInterceptors() ?? [],
        userFunction: self.limitOrderTrancheUserAll(request:context:)
      )

    case "LimitOrderTrancheUserAllByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheUserAllByAddressInterceptors() ?? [],
        userFunction: self.limitOrderTrancheUserAllByAddress(request:context:)
      )

    case "LimitOrderTranche":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheInterceptors() ?? [],
        userFunction: self.limitOrderTranche(request:context:)
      )

    case "LimitOrderTrancheAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheAllInterceptors() ?? [],
        userFunction: self.limitOrderTrancheAll(request:context:)
      )

    case "UserDepositsAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllUserDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllUserDepositsResponse>(),
        interceptors: self.interceptors?.makeUserDepositsAllInterceptors() ?? [],
        userFunction: self.userDepositsAll(request:context:)
      )

    case "TickLiquidityAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllTickLiquidityRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllTickLiquidityResponse>(),
        interceptors: self.interceptors?.makeTickLiquidityAllInterceptors() ?? [],
        userFunction: self.tickLiquidityAll(request:context:)
      )

    case "InactiveLimitOrderTranche":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeInactiveLimitOrderTrancheInterceptors() ?? [],
        userFunction: self.inactiveLimitOrderTranche(request:context:)
      )

    case "InactiveLimitOrderTrancheAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeInactiveLimitOrderTrancheAllInterceptors() ?? [],
        userFunction: self.inactiveLimitOrderTrancheAll(request:context:)
      )

    case "PoolReservesAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllPoolReservesRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllPoolReservesResponse>(),
        interceptors: self.interceptors?.makePoolReservesAllInterceptors() ?? [],
        userFunction: self.poolReservesAll(request:context:)
      )

    case "PoolReserves":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetPoolReservesRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetPoolReservesResponse>(),
        interceptors: self.interceptors?.makePoolReservesInterceptors() ?? [],
        userFunction: self.poolReserves(request:context:)
      )

    case "EstimateMultiHopSwap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryEstimateMultiHopSwapRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryEstimateMultiHopSwapResponse>(),
        interceptors: self.interceptors?.makeEstimateMultiHopSwapInterceptors() ?? [],
        userFunction: self.estimateMultiHopSwap(request:context:)
      )

    case "EstimatePlaceLimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>(),
        interceptors: self.interceptors?.makeEstimatePlaceLimitOrderInterceptors() ?? [],
        userFunction: self.estimatePlaceLimitOrder(request:context:)
      )

    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "PoolByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryPoolByIDRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolByIDInterceptors() ?? [],
        userFunction: self.poolByID(request:context:)
      )

    case "PoolMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetPoolMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetPoolMetadataResponse>(),
        interceptors: self.interceptors?.makePoolMetadataInterceptors() ?? [],
        userFunction: self.poolMetadata(request:context:)
      )

    case "PoolMetadataAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllPoolMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllPoolMetadataResponse>(),
        interceptors: self.interceptors?.makePoolMetadataAllInterceptors() ?? [],
        userFunction: self.poolMetadataAll(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Neutron_Dex_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Neutron_Dex_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Neutron_Dex_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryParamsResponse

  /// Queries a LimitOrderTrancheUser by index.
  @Sendable func limitOrderTrancheUser(
    request: Neutron_Dex_QueryGetLimitOrderTrancheUserRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryGetLimitOrderTrancheUserResponse

  /// Queries a list of LimitOrderTranchUser items.
  @Sendable func limitOrderTrancheUserAll(
    request: Neutron_Dex_QueryAllLimitOrderTrancheUserRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllLimitOrderTrancheUserResponse

  /// Queries a list of LimitOrderTrancheUser items for a given address.
  @Sendable func limitOrderTrancheUserAllByAddress(
    request: Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse

  /// Queries a LimitOrderTranche by index.
  @Sendable func limitOrderTranche(
    request: Neutron_Dex_QueryGetLimitOrderTrancheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryGetLimitOrderTrancheResponse

  /// Queries a list of LimitOrderTranche items for a given pairID / TokenIn
  /// combination.
  @Sendable func limitOrderTrancheAll(
    request: Neutron_Dex_QueryAllLimitOrderTrancheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllLimitOrderTrancheResponse

  /// Queries a list of UserDeposits items.
  @Sendable func userDepositsAll(
    request: Neutron_Dex_QueryAllUserDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllUserDepositsResponse

  /// Queries a list of TickLiquidity items.
  @Sendable func tickLiquidityAll(
    request: Neutron_Dex_QueryAllTickLiquidityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllTickLiquidityResponse

  /// Queries a InactiveLimitOrderTranche by index.
  @Sendable func inactiveLimitOrderTranche(
    request: Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse

  /// Queries a list of InactiveLimitOrderTranche items.
  @Sendable func inactiveLimitOrderTrancheAll(
    request: Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse

  /// Queries a list of PoolReserves items.
  @Sendable func poolReservesAll(
    request: Neutron_Dex_QueryAllPoolReservesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllPoolReservesResponse

  /// Queries a PoolReserve by index
  @Sendable func poolReserves(
    request: Neutron_Dex_QueryGetPoolReservesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryGetPoolReservesResponse

  /// Queries the simulated result of a multihop swap
  @Sendable func estimateMultiHopSwap(
    request: Neutron_Dex_QueryEstimateMultiHopSwapRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryEstimateMultiHopSwapResponse

  /// Queries the simulated result of a PlaceLimit order
  @Sendable func estimatePlaceLimitOrder(
    request: Neutron_Dex_QueryEstimatePlaceLimitOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryEstimatePlaceLimitOrderResponse

  /// Queries a pool by pair, tick and fee
  @Sendable func pool(
    request: Neutron_Dex_QueryPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryPoolResponse

  /// Queries a pool by ID
  @Sendable func poolByID(
    request: Neutron_Dex_QueryPoolByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryPoolResponse

  /// Queries a PoolMetadata by ID
  @Sendable func poolMetadata(
    request: Neutron_Dex_QueryGetPoolMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryGetPoolMetadataResponse

  /// Queries a list of PoolMetadata items.
  @Sendable func poolMetadataAll(
    request: Neutron_Dex_QueryAllPoolMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Dex_QueryAllPoolMetadataResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Dex_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Neutron_Dex_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Neutron_Dex_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Neutron_Dex_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "LimitOrderTrancheUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheUserInterceptors() ?? [],
        wrapping: self.limitOrderTrancheUser(request:context:)
      )

    case "LimitOrderTrancheUserAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheUserAllInterceptors() ?? [],
        wrapping: self.limitOrderTrancheUserAll(request:context:)
      )

    case "LimitOrderTrancheUserAllByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheUserAllByAddressInterceptors() ?? [],
        wrapping: self.limitOrderTrancheUserAllByAddress(request:context:)
      )

    case "LimitOrderTranche":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheInterceptors() ?? [],
        wrapping: self.limitOrderTranche(request:context:)
      )

    case "LimitOrderTrancheAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeLimitOrderTrancheAllInterceptors() ?? [],
        wrapping: self.limitOrderTrancheAll(request:context:)
      )

    case "UserDepositsAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllUserDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllUserDepositsResponse>(),
        interceptors: self.interceptors?.makeUserDepositsAllInterceptors() ?? [],
        wrapping: self.userDepositsAll(request:context:)
      )

    case "TickLiquidityAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllTickLiquidityRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllTickLiquidityResponse>(),
        interceptors: self.interceptors?.makeTickLiquidityAllInterceptors() ?? [],
        wrapping: self.tickLiquidityAll(request:context:)
      )

    case "InactiveLimitOrderTranche":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeInactiveLimitOrderTrancheInterceptors() ?? [],
        wrapping: self.inactiveLimitOrderTranche(request:context:)
      )

    case "InactiveLimitOrderTrancheAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>(),
        interceptors: self.interceptors?.makeInactiveLimitOrderTrancheAllInterceptors() ?? [],
        wrapping: self.inactiveLimitOrderTrancheAll(request:context:)
      )

    case "PoolReservesAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllPoolReservesRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllPoolReservesResponse>(),
        interceptors: self.interceptors?.makePoolReservesAllInterceptors() ?? [],
        wrapping: self.poolReservesAll(request:context:)
      )

    case "PoolReserves":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetPoolReservesRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetPoolReservesResponse>(),
        interceptors: self.interceptors?.makePoolReservesInterceptors() ?? [],
        wrapping: self.poolReserves(request:context:)
      )

    case "EstimateMultiHopSwap":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryEstimateMultiHopSwapRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryEstimateMultiHopSwapResponse>(),
        interceptors: self.interceptors?.makeEstimateMultiHopSwapInterceptors() ?? [],
        wrapping: self.estimateMultiHopSwap(request:context:)
      )

    case "EstimatePlaceLimitOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>(),
        interceptors: self.interceptors?.makeEstimatePlaceLimitOrderInterceptors() ?? [],
        wrapping: self.estimatePlaceLimitOrder(request:context:)
      )

    case "Pool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        wrapping: self.pool(request:context:)
      )

    case "PoolByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryPoolByIDRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolByIDInterceptors() ?? [],
        wrapping: self.poolByID(request:context:)
      )

    case "PoolMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryGetPoolMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryGetPoolMetadataResponse>(),
        interceptors: self.interceptors?.makePoolMetadataInterceptors() ?? [],
        wrapping: self.poolMetadata(request:context:)
      )

    case "PoolMetadataAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Dex_QueryAllPoolMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Dex_QueryAllPoolMetadataResponse>(),
        interceptors: self.interceptors?.makePoolMetadataAllInterceptors() ?? [],
        wrapping: self.poolMetadataAll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Neutron_Dex_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryParamsRequest, Neutron_Dex_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrderTrancheUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderTrancheUserInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryGetLimitOrderTrancheUserRequest, Neutron_Dex_QueryGetLimitOrderTrancheUserResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrderTrancheUserAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderTrancheUserAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllLimitOrderTrancheUserRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrderTrancheUserAllByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderTrancheUserAllByAddressInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressRequest, Neutron_Dex_QueryAllLimitOrderTrancheUserByAddressResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrderTranche'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderTrancheInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryGetLimitOrderTrancheRequest, Neutron_Dex_QueryGetLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrderTrancheAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderTrancheAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllLimitOrderTrancheRequest, Neutron_Dex_QueryAllLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when handling 'userDepositsAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserDepositsAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllUserDepositsRequest, Neutron_Dex_QueryAllUserDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'tickLiquidityAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTickLiquidityAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllTickLiquidityRequest, Neutron_Dex_QueryAllTickLiquidityResponse>]

  /// - Returns: Interceptors to use when handling 'inactiveLimitOrderTranche'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInactiveLimitOrderTrancheInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryGetInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryGetInactiveLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when handling 'inactiveLimitOrderTrancheAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInactiveLimitOrderTrancheAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllInactiveLimitOrderTrancheRequest, Neutron_Dex_QueryAllInactiveLimitOrderTrancheResponse>]

  /// - Returns: Interceptors to use when handling 'poolReservesAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolReservesAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllPoolReservesRequest, Neutron_Dex_QueryAllPoolReservesResponse>]

  /// - Returns: Interceptors to use when handling 'poolReserves'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolReservesInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryGetPoolReservesRequest, Neutron_Dex_QueryGetPoolReservesResponse>]

  /// - Returns: Interceptors to use when handling 'estimateMultiHopSwap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateMultiHopSwapInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryEstimateMultiHopSwapRequest, Neutron_Dex_QueryEstimateMultiHopSwapResponse>]

  /// - Returns: Interceptors to use when handling 'estimatePlaceLimitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimatePlaceLimitOrderInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryEstimatePlaceLimitOrderRequest, Neutron_Dex_QueryEstimatePlaceLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryPoolRequest, Neutron_Dex_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'poolByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolByIDInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryPoolByIDRequest, Neutron_Dex_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'poolMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolMetadataInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryGetPoolMetadataRequest, Neutron_Dex_QueryGetPoolMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'poolMetadataAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolMetadataAllInterceptors() -> [ServerInterceptor<Neutron_Dex_QueryAllPoolMetadataRequest, Neutron_Dex_QueryAllPoolMetadataResponse>]
}

internal enum Neutron_Dex_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "neutron.dex.Query",
    methods: [
      Neutron_Dex_QueryServerMetadata.Methods.params,
      Neutron_Dex_QueryServerMetadata.Methods.limitOrderTrancheUser,
      Neutron_Dex_QueryServerMetadata.Methods.limitOrderTrancheUserAll,
      Neutron_Dex_QueryServerMetadata.Methods.limitOrderTrancheUserAllByAddress,
      Neutron_Dex_QueryServerMetadata.Methods.limitOrderTranche,
      Neutron_Dex_QueryServerMetadata.Methods.limitOrderTrancheAll,
      Neutron_Dex_QueryServerMetadata.Methods.userDepositsAll,
      Neutron_Dex_QueryServerMetadata.Methods.tickLiquidityAll,
      Neutron_Dex_QueryServerMetadata.Methods.inactiveLimitOrderTranche,
      Neutron_Dex_QueryServerMetadata.Methods.inactiveLimitOrderTrancheAll,
      Neutron_Dex_QueryServerMetadata.Methods.poolReservesAll,
      Neutron_Dex_QueryServerMetadata.Methods.poolReserves,
      Neutron_Dex_QueryServerMetadata.Methods.estimateMultiHopSwap,
      Neutron_Dex_QueryServerMetadata.Methods.estimatePlaceLimitOrder,
      Neutron_Dex_QueryServerMetadata.Methods.pool,
      Neutron_Dex_QueryServerMetadata.Methods.poolByID,
      Neutron_Dex_QueryServerMetadata.Methods.poolMetadata,
      Neutron_Dex_QueryServerMetadata.Methods.poolMetadataAll,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/neutron.dex.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheUser = GRPCMethodDescriptor(
      name: "LimitOrderTrancheUser",
      path: "/neutron.dex.Query/LimitOrderTrancheUser",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheUserAll = GRPCMethodDescriptor(
      name: "LimitOrderTrancheUserAll",
      path: "/neutron.dex.Query/LimitOrderTrancheUserAll",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheUserAllByAddress = GRPCMethodDescriptor(
      name: "LimitOrderTrancheUserAllByAddress",
      path: "/neutron.dex.Query/LimitOrderTrancheUserAllByAddress",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTranche = GRPCMethodDescriptor(
      name: "LimitOrderTranche",
      path: "/neutron.dex.Query/LimitOrderTranche",
      type: GRPCCallType.unary
    )

    internal static let limitOrderTrancheAll = GRPCMethodDescriptor(
      name: "LimitOrderTrancheAll",
      path: "/neutron.dex.Query/LimitOrderTrancheAll",
      type: GRPCCallType.unary
    )

    internal static let userDepositsAll = GRPCMethodDescriptor(
      name: "UserDepositsAll",
      path: "/neutron.dex.Query/UserDepositsAll",
      type: GRPCCallType.unary
    )

    internal static let tickLiquidityAll = GRPCMethodDescriptor(
      name: "TickLiquidityAll",
      path: "/neutron.dex.Query/TickLiquidityAll",
      type: GRPCCallType.unary
    )

    internal static let inactiveLimitOrderTranche = GRPCMethodDescriptor(
      name: "InactiveLimitOrderTranche",
      path: "/neutron.dex.Query/InactiveLimitOrderTranche",
      type: GRPCCallType.unary
    )

    internal static let inactiveLimitOrderTrancheAll = GRPCMethodDescriptor(
      name: "InactiveLimitOrderTrancheAll",
      path: "/neutron.dex.Query/InactiveLimitOrderTrancheAll",
      type: GRPCCallType.unary
    )

    internal static let poolReservesAll = GRPCMethodDescriptor(
      name: "PoolReservesAll",
      path: "/neutron.dex.Query/PoolReservesAll",
      type: GRPCCallType.unary
    )

    internal static let poolReserves = GRPCMethodDescriptor(
      name: "PoolReserves",
      path: "/neutron.dex.Query/PoolReserves",
      type: GRPCCallType.unary
    )

    internal static let estimateMultiHopSwap = GRPCMethodDescriptor(
      name: "EstimateMultiHopSwap",
      path: "/neutron.dex.Query/EstimateMultiHopSwap",
      type: GRPCCallType.unary
    )

    internal static let estimatePlaceLimitOrder = GRPCMethodDescriptor(
      name: "EstimatePlaceLimitOrder",
      path: "/neutron.dex.Query/EstimatePlaceLimitOrder",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/neutron.dex.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let poolByID = GRPCMethodDescriptor(
      name: "PoolByID",
      path: "/neutron.dex.Query/PoolByID",
      type: GRPCCallType.unary
    )

    internal static let poolMetadata = GRPCMethodDescriptor(
      name: "PoolMetadata",
      path: "/neutron.dex.Query/PoolMetadata",
      type: GRPCCallType.unary
    )

    internal static let poolMetadataAll = GRPCMethodDescriptor(
      name: "PoolMetadataAll",
      path: "/neutron.dex.Query/PoolMetadataAll",
      type: GRPCCallType.unary
    )
  }
}
