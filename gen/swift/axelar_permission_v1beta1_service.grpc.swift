//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/permission/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the gov Msg service.
///
/// Usage: instantiate `Axelar_Permission_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Permission_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func registerController(
    _ request: Axelar_Permission_V1beta1_RegisterControllerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Permission_V1beta1_RegisterControllerRequest, Axelar_Permission_V1beta1_RegisterControllerResponse>

  func deregisterController(
    _ request: Axelar_Permission_V1beta1_DeregisterControllerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Permission_V1beta1_DeregisterControllerRequest, Axelar_Permission_V1beta1_DeregisterControllerResponse>

  func updateGovernanceKey(
    _ request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>
}

extension Axelar_Permission_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "axelar.permission.v1beta1.Msg"
  }

  /// Unary call to RegisterController
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterController.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerController(
    _ request: Axelar_Permission_V1beta1_RegisterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Permission_V1beta1_RegisterControllerRequest, Axelar_Permission_V1beta1_RegisterControllerResponse> {
    return self.makeUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.registerController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterControllerInterceptors() ?? []
    )
  }

  /// Unary call to DeregisterController
  ///
  /// - Parameters:
  ///   - request: Request to send to DeregisterController.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deregisterController(
    _ request: Axelar_Permission_V1beta1_DeregisterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Permission_V1beta1_DeregisterControllerRequest, Axelar_Permission_V1beta1_DeregisterControllerResponse> {
    return self.makeUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.deregisterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterControllerInterceptors() ?? []
    )
  }

  /// Unary call to UpdateGovernanceKey
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGovernanceKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGovernanceKey(
    _ request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse> {
    return self.makeUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.updateGovernanceKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGovernanceKeyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Permission_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Permission_V1beta1_MsgNIOClient")
internal final class Axelar_Permission_V1beta1_MsgClient: Axelar_Permission_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.permission.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Permission_V1beta1_MsgNIOClient: Axelar_Permission_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.permission.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the gov Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Permission_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeRegisterControllerCall(
    _ request: Axelar_Permission_V1beta1_RegisterControllerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_RegisterControllerRequest, Axelar_Permission_V1beta1_RegisterControllerResponse>

  func makeDeregisterControllerCall(
    _ request: Axelar_Permission_V1beta1_DeregisterControllerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_DeregisterControllerRequest, Axelar_Permission_V1beta1_DeregisterControllerResponse>

  func makeUpdateGovernanceKeyCall(
    _ request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Permission_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Permission_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterControllerCall(
    _ request: Axelar_Permission_V1beta1_RegisterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_RegisterControllerRequest, Axelar_Permission_V1beta1_RegisterControllerResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.registerController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterControllerInterceptors() ?? []
    )
  }

  internal func makeDeregisterControllerCall(
    _ request: Axelar_Permission_V1beta1_DeregisterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_DeregisterControllerRequest, Axelar_Permission_V1beta1_DeregisterControllerResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.deregisterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterControllerInterceptors() ?? []
    )
  }

  internal func makeUpdateGovernanceKeyCall(
    _ request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.updateGovernanceKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGovernanceKeyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Permission_V1beta1_MsgAsyncClientProtocol {
  internal func registerController(
    _ request: Axelar_Permission_V1beta1_RegisterControllerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Permission_V1beta1_RegisterControllerResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.registerController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterControllerInterceptors() ?? []
    )
  }

  internal func deregisterController(
    _ request: Axelar_Permission_V1beta1_DeregisterControllerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Permission_V1beta1_DeregisterControllerResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.deregisterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterControllerInterceptors() ?? []
    )
  }

  internal func updateGovernanceKey(
    _ request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_MsgClientMetadata.Methods.updateGovernanceKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGovernanceKeyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Permission_V1beta1_MsgAsyncClient: Axelar_Permission_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Permission_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerController'.
  func makeRegisterControllerInterceptors() -> [ClientInterceptor<Axelar_Permission_V1beta1_RegisterControllerRequest, Axelar_Permission_V1beta1_RegisterControllerResponse>]

  /// - Returns: Interceptors to use when invoking 'deregisterController'.
  func makeDeregisterControllerInterceptors() -> [ClientInterceptor<Axelar_Permission_V1beta1_DeregisterControllerRequest, Axelar_Permission_V1beta1_DeregisterControllerResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGovernanceKey'.
  func makeUpdateGovernanceKeyInterceptors() -> [ClientInterceptor<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>]
}

internal enum Axelar_Permission_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "axelar.permission.v1beta1.Msg",
    methods: [
      Axelar_Permission_V1beta1_MsgClientMetadata.Methods.registerController,
      Axelar_Permission_V1beta1_MsgClientMetadata.Methods.deregisterController,
      Axelar_Permission_V1beta1_MsgClientMetadata.Methods.updateGovernanceKey,
    ]
  )

  internal enum Methods {
    internal static let registerController = GRPCMethodDescriptor(
      name: "RegisterController",
      path: "/axelar.permission.v1beta1.Msg/RegisterController",
      type: GRPCCallType.unary
    )

    internal static let deregisterController = GRPCMethodDescriptor(
      name: "DeregisterController",
      path: "/axelar.permission.v1beta1.Msg/DeregisterController",
      type: GRPCCallType.unary
    )

    internal static let updateGovernanceKey = GRPCMethodDescriptor(
      name: "UpdateGovernanceKey",
      path: "/axelar.permission.v1beta1.Msg/UpdateGovernanceKey",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Permission_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Permission_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func governanceKey(
    _ request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>
}

extension Axelar_Permission_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "axelar.permission.v1beta1.Query"
  }

  /// GovernanceKey returns the multisig governance key
  ///
  /// - Parameters:
  ///   - request: Request to send to GovernanceKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func governanceKey(
    _ request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, Axelar_Permission_V1beta1_QueryGovernanceKeyResponse> {
    return self.makeUnaryCall(
      path: Axelar_Permission_V1beta1_QueryClientMetadata.Methods.governanceKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovernanceKeyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Permission_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Permission_V1beta1_QueryNIOClient")
internal final class Axelar_Permission_V1beta1_QueryClient: Axelar_Permission_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.permission.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Permission_V1beta1_QueryNIOClient: Axelar_Permission_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.permission.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Permission_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeGovernanceKeyCall(
    _ request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Permission_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Permission_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGovernanceKeyCall(
    _ request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, Axelar_Permission_V1beta1_QueryGovernanceKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_QueryClientMetadata.Methods.governanceKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovernanceKeyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Permission_V1beta1_QueryAsyncClientProtocol {
  internal func governanceKey(
    _ request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Permission_V1beta1_QueryGovernanceKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Permission_V1beta1_QueryClientMetadata.Methods.governanceKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGovernanceKeyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Permission_V1beta1_QueryAsyncClient: Axelar_Permission_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Permission_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'governanceKey'.
  func makeGovernanceKeyInterceptors() -> [ClientInterceptor<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>]
}

internal enum Axelar_Permission_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "axelar.permission.v1beta1.Query",
    methods: [
      Axelar_Permission_V1beta1_QueryClientMetadata.Methods.governanceKey,
    ]
  )

  internal enum Methods {
    internal static let governanceKey = GRPCMethodDescriptor(
      name: "GovernanceKey",
      path: "/axelar.permission.v1beta1.Query/GovernanceKey",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the gov Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Permission_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Axelar_Permission_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  func registerController(request: Axelar_Permission_V1beta1_RegisterControllerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Permission_V1beta1_RegisterControllerResponse>

  func deregisterController(request: Axelar_Permission_V1beta1_DeregisterControllerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Permission_V1beta1_DeregisterControllerResponse>

  func updateGovernanceKey(request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>
}

extension Axelar_Permission_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Axelar_Permission_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterController":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_RegisterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_RegisterControllerResponse>(),
        interceptors: self.interceptors?.makeRegisterControllerInterceptors() ?? [],
        userFunction: self.registerController(request:context:)
      )

    case "DeregisterController":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_DeregisterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_DeregisterControllerResponse>(),
        interceptors: self.interceptors?.makeDeregisterControllerInterceptors() ?? [],
        userFunction: self.deregisterController(request:context:)
      )

    case "UpdateGovernanceKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>(),
        interceptors: self.interceptors?.makeUpdateGovernanceKeyInterceptors() ?? [],
        userFunction: self.updateGovernanceKey(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the gov Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Permission_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Permission_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func registerController(
    request: Axelar_Permission_V1beta1_RegisterControllerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Permission_V1beta1_RegisterControllerResponse

  @Sendable func deregisterController(
    request: Axelar_Permission_V1beta1_DeregisterControllerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Permission_V1beta1_DeregisterControllerResponse

  @Sendable func updateGovernanceKey(
    request: Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Permission_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Permission_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Permission_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Permission_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterController":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_RegisterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_RegisterControllerResponse>(),
        interceptors: self.interceptors?.makeRegisterControllerInterceptors() ?? [],
        wrapping: self.registerController(request:context:)
      )

    case "DeregisterController":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_DeregisterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_DeregisterControllerResponse>(),
        interceptors: self.interceptors?.makeDeregisterControllerInterceptors() ?? [],
        wrapping: self.deregisterController(request:context:)
      )

    case "UpdateGovernanceKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>(),
        interceptors: self.interceptors?.makeUpdateGovernanceKeyInterceptors() ?? [],
        wrapping: self.updateGovernanceKey(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Permission_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerController'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterControllerInterceptors() -> [ServerInterceptor<Axelar_Permission_V1beta1_RegisterControllerRequest, Axelar_Permission_V1beta1_RegisterControllerResponse>]

  /// - Returns: Interceptors to use when handling 'deregisterController'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeregisterControllerInterceptors() -> [ServerInterceptor<Axelar_Permission_V1beta1_DeregisterControllerRequest, Axelar_Permission_V1beta1_DeregisterControllerResponse>]

  /// - Returns: Interceptors to use when handling 'updateGovernanceKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGovernanceKeyInterceptors() -> [ServerInterceptor<Axelar_Permission_V1beta1_UpdateGovernanceKeyRequest, Axelar_Permission_V1beta1_UpdateGovernanceKeyResponse>]
}

internal enum Axelar_Permission_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "axelar.permission.v1beta1.Msg",
    methods: [
      Axelar_Permission_V1beta1_MsgServerMetadata.Methods.registerController,
      Axelar_Permission_V1beta1_MsgServerMetadata.Methods.deregisterController,
      Axelar_Permission_V1beta1_MsgServerMetadata.Methods.updateGovernanceKey,
    ]
  )

  internal enum Methods {
    internal static let registerController = GRPCMethodDescriptor(
      name: "RegisterController",
      path: "/axelar.permission.v1beta1.Msg/RegisterController",
      type: GRPCCallType.unary
    )

    internal static let deregisterController = GRPCMethodDescriptor(
      name: "DeregisterController",
      path: "/axelar.permission.v1beta1.Msg/DeregisterController",
      type: GRPCCallType.unary
    )

    internal static let updateGovernanceKey = GRPCMethodDescriptor(
      name: "UpdateGovernanceKey",
      path: "/axelar.permission.v1beta1.Msg/UpdateGovernanceKey",
      type: GRPCCallType.unary
    )
  }
}
/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Permission_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Axelar_Permission_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// GovernanceKey returns the multisig governance key
  func governanceKey(request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>
}

extension Axelar_Permission_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Axelar_Permission_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GovernanceKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>(),
        interceptors: self.interceptors?.makeGovernanceKeyInterceptors() ?? [],
        userFunction: self.governanceKey(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Permission_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Permission_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// GovernanceKey returns the multisig governance key
  @Sendable func governanceKey(
    request: Axelar_Permission_V1beta1_QueryGovernanceKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Permission_V1beta1_QueryGovernanceKeyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Permission_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Permission_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Permission_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Permission_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GovernanceKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>(),
        interceptors: self.interceptors?.makeGovernanceKeyInterceptors() ?? [],
        wrapping: self.governanceKey(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Permission_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'governanceKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGovernanceKeyInterceptors() -> [ServerInterceptor<Axelar_Permission_V1beta1_QueryGovernanceKeyRequest, Axelar_Permission_V1beta1_QueryGovernanceKeyResponse>]
}

internal enum Axelar_Permission_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "axelar.permission.v1beta1.Query",
    methods: [
      Axelar_Permission_V1beta1_QueryServerMetadata.Methods.governanceKey,
    ]
  )

  internal enum Methods {
    internal static let governanceKey = GRPCMethodDescriptor(
      name: "GovernanceKey",
      path: "/axelar.permission.v1beta1.Query/GovernanceKey",
      type: GRPCCallType.unary
    )
  }
}
