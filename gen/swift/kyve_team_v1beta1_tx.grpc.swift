//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/team/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Kyve_Team_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Team_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func claimUnlocked(
    _ request: Kyve_Team_V1beta1_MsgClaimUnlocked,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClaimUnlocked, Kyve_Team_V1beta1_MsgClaimUnlockedResponse>

  func clawback(
    _ request: Kyve_Team_V1beta1_MsgClawback,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClawback, Kyve_Team_V1beta1_MsgClawbackResponse>

  func createTeamVestingAccount(
    _ request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>

  func claimAuthorityRewards(
    _ request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClaimAuthorityRewards, Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>

  func claimAccountRewards(
    _ request: Kyve_Team_V1beta1_MsgClaimAccountRewards,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClaimAccountRewards, Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>
}

extension Kyve_Team_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "kyve.team.v1beta1.Msg"
  }

  /// ClaimUnlocked ...
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimUnlocked.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimUnlocked(
    _ request: Kyve_Team_V1beta1_MsgClaimUnlocked,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClaimUnlocked, Kyve_Team_V1beta1_MsgClaimUnlockedResponse> {
    return self.makeUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimUnlocked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUnlockedInterceptors() ?? []
    )
  }

  /// Clawback ...
  ///
  /// - Parameters:
  ///   - request: Request to send to Clawback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clawback(
    _ request: Kyve_Team_V1beta1_MsgClawback,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClawback, Kyve_Team_V1beta1_MsgClawbackResponse> {
    return self.makeUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.clawback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClawbackInterceptors() ?? []
    )
  }

  /// CreateTeamVestingAccount ...
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTeamVestingAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTeamVestingAccount(
    _ request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse> {
    return self.makeUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.createTeamVestingAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTeamVestingAccountInterceptors() ?? []
    )
  }

  /// ClaimAuthorityRewards ...
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimAuthorityRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimAuthorityRewards(
    _ request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClaimAuthorityRewards, Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAuthorityRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAuthorityRewardsInterceptors() ?? []
    )
  }

  /// ClaimInflationRewards ...
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimAccountRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimAccountRewards(
    _ request: Kyve_Team_V1beta1_MsgClaimAccountRewards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Team_V1beta1_MsgClaimAccountRewards, Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAccountRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAccountRewardsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Team_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Team_V1beta1_MsgNIOClient")
internal final class Kyve_Team_V1beta1_MsgClient: Kyve_Team_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.team.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Team_V1beta1_MsgNIOClient: Kyve_Team_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.team.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Team_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeClaimUnlockedCall(
    _ request: Kyve_Team_V1beta1_MsgClaimUnlocked,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClaimUnlocked, Kyve_Team_V1beta1_MsgClaimUnlockedResponse>

  func makeClawbackCall(
    _ request: Kyve_Team_V1beta1_MsgClawback,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClawback, Kyve_Team_V1beta1_MsgClawbackResponse>

  func makeCreateTeamVestingAccountCall(
    _ request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>

  func makeClaimAuthorityRewardsCall(
    _ request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClaimAuthorityRewards, Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>

  func makeClaimAccountRewardsCall(
    _ request: Kyve_Team_V1beta1_MsgClaimAccountRewards,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClaimAccountRewards, Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Team_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Team_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeClaimUnlockedCall(
    _ request: Kyve_Team_V1beta1_MsgClaimUnlocked,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClaimUnlocked, Kyve_Team_V1beta1_MsgClaimUnlockedResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimUnlocked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUnlockedInterceptors() ?? []
    )
  }

  internal func makeClawbackCall(
    _ request: Kyve_Team_V1beta1_MsgClawback,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClawback, Kyve_Team_V1beta1_MsgClawbackResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.clawback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClawbackInterceptors() ?? []
    )
  }

  internal func makeCreateTeamVestingAccountCall(
    _ request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.createTeamVestingAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTeamVestingAccountInterceptors() ?? []
    )
  }

  internal func makeClaimAuthorityRewardsCall(
    _ request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClaimAuthorityRewards, Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAuthorityRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAuthorityRewardsInterceptors() ?? []
    )
  }

  internal func makeClaimAccountRewardsCall(
    _ request: Kyve_Team_V1beta1_MsgClaimAccountRewards,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Team_V1beta1_MsgClaimAccountRewards, Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAccountRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAccountRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Team_V1beta1_MsgAsyncClientProtocol {
  internal func claimUnlocked(
    _ request: Kyve_Team_V1beta1_MsgClaimUnlocked,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Team_V1beta1_MsgClaimUnlockedResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimUnlocked.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUnlockedInterceptors() ?? []
    )
  }

  internal func clawback(
    _ request: Kyve_Team_V1beta1_MsgClawback,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Team_V1beta1_MsgClawbackResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.clawback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClawbackInterceptors() ?? []
    )
  }

  internal func createTeamVestingAccount(
    _ request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.createTeamVestingAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTeamVestingAccountInterceptors() ?? []
    )
  }

  internal func claimAuthorityRewards(
    _ request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAuthorityRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAuthorityRewardsInterceptors() ?? []
    )
  }

  internal func claimAccountRewards(
    _ request: Kyve_Team_V1beta1_MsgClaimAccountRewards,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAccountRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAccountRewardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Team_V1beta1_MsgAsyncClient: Kyve_Team_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Team_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'claimUnlocked'.
  func makeClaimUnlockedInterceptors() -> [ClientInterceptor<Kyve_Team_V1beta1_MsgClaimUnlocked, Kyve_Team_V1beta1_MsgClaimUnlockedResponse>]

  /// - Returns: Interceptors to use when invoking 'clawback'.
  func makeClawbackInterceptors() -> [ClientInterceptor<Kyve_Team_V1beta1_MsgClawback, Kyve_Team_V1beta1_MsgClawbackResponse>]

  /// - Returns: Interceptors to use when invoking 'createTeamVestingAccount'.
  func makeCreateTeamVestingAccountInterceptors() -> [ClientInterceptor<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'claimAuthorityRewards'.
  func makeClaimAuthorityRewardsInterceptors() -> [ClientInterceptor<Kyve_Team_V1beta1_MsgClaimAuthorityRewards, Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimAccountRewards'.
  func makeClaimAccountRewardsInterceptors() -> [ClientInterceptor<Kyve_Team_V1beta1_MsgClaimAccountRewards, Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>]
}

internal enum Kyve_Team_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.team.v1beta1.Msg",
    methods: [
      Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimUnlocked,
      Kyve_Team_V1beta1_MsgClientMetadata.Methods.clawback,
      Kyve_Team_V1beta1_MsgClientMetadata.Methods.createTeamVestingAccount,
      Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAuthorityRewards,
      Kyve_Team_V1beta1_MsgClientMetadata.Methods.claimAccountRewards,
    ]
  )

  internal enum Methods {
    internal static let claimUnlocked = GRPCMethodDescriptor(
      name: "ClaimUnlocked",
      path: "/kyve.team.v1beta1.Msg/ClaimUnlocked",
      type: GRPCCallType.unary
    )

    internal static let clawback = GRPCMethodDescriptor(
      name: "Clawback",
      path: "/kyve.team.v1beta1.Msg/Clawback",
      type: GRPCCallType.unary
    )

    internal static let createTeamVestingAccount = GRPCMethodDescriptor(
      name: "CreateTeamVestingAccount",
      path: "/kyve.team.v1beta1.Msg/CreateTeamVestingAccount",
      type: GRPCCallType.unary
    )

    internal static let claimAuthorityRewards = GRPCMethodDescriptor(
      name: "ClaimAuthorityRewards",
      path: "/kyve.team.v1beta1.Msg/ClaimAuthorityRewards",
      type: GRPCCallType.unary
    )

    internal static let claimAccountRewards = GRPCMethodDescriptor(
      name: "ClaimAccountRewards",
      path: "/kyve.team.v1beta1.Msg/ClaimAccountRewards",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Team_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Kyve_Team_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// ClaimUnlocked ...
  func claimUnlocked(request: Kyve_Team_V1beta1_MsgClaimUnlocked, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Team_V1beta1_MsgClaimUnlockedResponse>

  /// Clawback ...
  func clawback(request: Kyve_Team_V1beta1_MsgClawback, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Team_V1beta1_MsgClawbackResponse>

  /// CreateTeamVestingAccount ...
  func createTeamVestingAccount(request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>

  /// ClaimAuthorityRewards ...
  func claimAuthorityRewards(request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>

  /// ClaimInflationRewards ...
  func claimAccountRewards(request: Kyve_Team_V1beta1_MsgClaimAccountRewards, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>
}

extension Kyve_Team_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Kyve_Team_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ClaimUnlocked":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClaimUnlocked>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClaimUnlockedResponse>(),
        interceptors: self.interceptors?.makeClaimUnlockedInterceptors() ?? [],
        userFunction: self.claimUnlocked(request:context:)
      )

    case "Clawback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClawback>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClawbackResponse>(),
        interceptors: self.interceptors?.makeClawbackInterceptors() ?? [],
        userFunction: self.clawback(request:context:)
      )

    case "CreateTeamVestingAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>(),
        interceptors: self.interceptors?.makeCreateTeamVestingAccountInterceptors() ?? [],
        userFunction: self.createTeamVestingAccount(request:context:)
      )

    case "ClaimAuthorityRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClaimAuthorityRewards>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimAuthorityRewardsInterceptors() ?? [],
        userFunction: self.claimAuthorityRewards(request:context:)
      )

    case "ClaimAccountRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClaimAccountRewards>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimAccountRewardsInterceptors() ?? [],
        userFunction: self.claimAccountRewards(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Team_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Team_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// ClaimUnlocked ...
  @Sendable func claimUnlocked(
    request: Kyve_Team_V1beta1_MsgClaimUnlocked,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Team_V1beta1_MsgClaimUnlockedResponse

  /// Clawback ...
  @Sendable func clawback(
    request: Kyve_Team_V1beta1_MsgClawback,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Team_V1beta1_MsgClawbackResponse

  /// CreateTeamVestingAccount ...
  @Sendable func createTeamVestingAccount(
    request: Kyve_Team_V1beta1_MsgCreateTeamVestingAccount,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse

  /// ClaimAuthorityRewards ...
  @Sendable func claimAuthorityRewards(
    request: Kyve_Team_V1beta1_MsgClaimAuthorityRewards,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse

  /// ClaimInflationRewards ...
  @Sendable func claimAccountRewards(
    request: Kyve_Team_V1beta1_MsgClaimAccountRewards,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Team_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Team_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Team_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Team_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ClaimUnlocked":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClaimUnlocked>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClaimUnlockedResponse>(),
        interceptors: self.interceptors?.makeClaimUnlockedInterceptors() ?? [],
        wrapping: self.claimUnlocked(request:context:)
      )

    case "Clawback":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClawback>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClawbackResponse>(),
        interceptors: self.interceptors?.makeClawbackInterceptors() ?? [],
        wrapping: self.clawback(request:context:)
      )

    case "CreateTeamVestingAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>(),
        interceptors: self.interceptors?.makeCreateTeamVestingAccountInterceptors() ?? [],
        wrapping: self.createTeamVestingAccount(request:context:)
      )

    case "ClaimAuthorityRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClaimAuthorityRewards>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimAuthorityRewardsInterceptors() ?? [],
        wrapping: self.claimAuthorityRewards(request:context:)
      )

    case "ClaimAccountRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Team_V1beta1_MsgClaimAccountRewards>(),
        responseSerializer: ProtobufSerializer<Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimAccountRewardsInterceptors() ?? [],
        wrapping: self.claimAccountRewards(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Team_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'claimUnlocked'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimUnlockedInterceptors() -> [ServerInterceptor<Kyve_Team_V1beta1_MsgClaimUnlocked, Kyve_Team_V1beta1_MsgClaimUnlockedResponse>]

  /// - Returns: Interceptors to use when handling 'clawback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClawbackInterceptors() -> [ServerInterceptor<Kyve_Team_V1beta1_MsgClawback, Kyve_Team_V1beta1_MsgClawbackResponse>]

  /// - Returns: Interceptors to use when handling 'createTeamVestingAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTeamVestingAccountInterceptors() -> [ServerInterceptor<Kyve_Team_V1beta1_MsgCreateTeamVestingAccount, Kyve_Team_V1beta1_MsgCreateTeamVestingAccountResponse>]

  /// - Returns: Interceptors to use when handling 'claimAuthorityRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimAuthorityRewardsInterceptors() -> [ServerInterceptor<Kyve_Team_V1beta1_MsgClaimAuthorityRewards, Kyve_Team_V1beta1_MsgClaimAuthorityRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'claimAccountRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimAccountRewardsInterceptors() -> [ServerInterceptor<Kyve_Team_V1beta1_MsgClaimAccountRewards, Kyve_Team_V1beta1_MsgClaimAccountRewardsResponse>]
}

internal enum Kyve_Team_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.team.v1beta1.Msg",
    methods: [
      Kyve_Team_V1beta1_MsgServerMetadata.Methods.claimUnlocked,
      Kyve_Team_V1beta1_MsgServerMetadata.Methods.clawback,
      Kyve_Team_V1beta1_MsgServerMetadata.Methods.createTeamVestingAccount,
      Kyve_Team_V1beta1_MsgServerMetadata.Methods.claimAuthorityRewards,
      Kyve_Team_V1beta1_MsgServerMetadata.Methods.claimAccountRewards,
    ]
  )

  internal enum Methods {
    internal static let claimUnlocked = GRPCMethodDescriptor(
      name: "ClaimUnlocked",
      path: "/kyve.team.v1beta1.Msg/ClaimUnlocked",
      type: GRPCCallType.unary
    )

    internal static let clawback = GRPCMethodDescriptor(
      name: "Clawback",
      path: "/kyve.team.v1beta1.Msg/Clawback",
      type: GRPCCallType.unary
    )

    internal static let createTeamVestingAccount = GRPCMethodDescriptor(
      name: "CreateTeamVestingAccount",
      path: "/kyve.team.v1beta1.Msg/CreateTeamVestingAccount",
      type: GRPCCallType.unary
    )

    internal static let claimAuthorityRewards = GRPCMethodDescriptor(
      name: "ClaimAuthorityRewards",
      path: "/kyve.team.v1beta1.Msg/ClaimAuthorityRewards",
      type: GRPCCallType.unary
    )

    internal static let claimAccountRewards = GRPCMethodDescriptor(
      name: "ClaimAccountRewards",
      path: "/kyve.team.v1beta1.Msg/ClaimAccountRewards",
      type: GRPCCallType.unary
    )
  }
}
