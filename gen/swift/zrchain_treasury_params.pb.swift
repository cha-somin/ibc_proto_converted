// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: zrchain/treasury/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the module.
struct Zrchain_Treasury_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mpcKeyring: String = String()

  var zrSignAddress: String = String()

  var keyringCommission: UInt64 = 0

  var keyringCommissionDestination: String = String()

  var minGasFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Zrchain_Treasury_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "zrchain.treasury"

extension Zrchain_Treasury_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mpc_keyring"),
    2: .standard(proto: "zr_sign_address"),
    3: .standard(proto: "keyring_commission"),
    4: .standard(proto: "keyring_commission_destination"),
    5: .standard(proto: "min_gas_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mpcKeyring) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.zrSignAddress) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.keyringCommission) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.keyringCommissionDestination) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minGasFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mpcKeyring.isEmpty {
      try visitor.visitSingularStringField(value: self.mpcKeyring, fieldNumber: 1)
    }
    if !self.zrSignAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.zrSignAddress, fieldNumber: 2)
    }
    if self.keyringCommission != 0 {
      try visitor.visitSingularUInt64Field(value: self.keyringCommission, fieldNumber: 3)
    }
    if !self.keyringCommissionDestination.isEmpty {
      try visitor.visitSingularStringField(value: self.keyringCommissionDestination, fieldNumber: 4)
    }
    if !self.minGasFee.isEmpty {
      try visitor.visitSingularStringField(value: self.minGasFee, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Zrchain_Treasury_Params, rhs: Zrchain_Treasury_Params) -> Bool {
    if lhs.mpcKeyring != rhs.mpcKeyring {return false}
    if lhs.zrSignAddress != rhs.zrSignAddress {return false}
    if lhs.keyringCommission != rhs.keyringCommission {return false}
    if lhs.keyringCommissionDestination != rhs.keyringCommissionDestination {return false}
    if lhs.minGasFee != rhs.minGasFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
