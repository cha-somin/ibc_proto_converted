//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stride/stakeibc/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Stride_Stakeibc_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Stride_Stakeibc_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>

  func validators(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>

  func hostZone(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>

  func hostZoneAll(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>

  func moduleAddress(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>

  func interchainAccountFromAddress(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>

  func epochTracker(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>

  func epochTrackerAll(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>

  func nextPacketSequence(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>

  func addressUnbondings(
    _ request: Stride_Stakeibc_QueryAddressUnbondings,
    callOptions: CallOptions?
  ) -> UnaryCall<Stride_Stakeibc_QueryAddressUnbondings, Stride_Stakeibc_QueryAddressUnbondingsResponse>
}

extension Stride_Stakeibc_QueryClientProtocol {
  internal var serviceName: String {
    return "stride.stakeibc.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a Validator by host zone.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validators(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  /// Queries a HostZone by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to HostZone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hostZone(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.hostZone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneInterceptors() ?? []
    )
  }

  /// Queries a list of HostZone items.
  ///
  /// - Parameters:
  ///   - request: Request to send to HostZoneAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hostZoneAll(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.hostZoneAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? []
    )
  }

  /// Queries a list of ModuleAddress items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moduleAddress(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.moduleAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? []
    )
  }

  /// QueryInterchainAccountFromAddress returns the interchain account for given
  /// owner address on a given connection pair
  ///
  /// - Parameters:
  ///   - request: Request to send to InterchainAccountFromAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func interchainAccountFromAddress(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.interchainAccountFromAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? []
    )
  }

  /// Queries a EpochTracker by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochTracker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochTracker(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.epochTracker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? []
    )
  }

  /// Queries a list of EpochTracker items.
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochTrackerAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochTrackerAll(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.epochTrackerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? []
    )
  }

  /// Queries the next packet sequence for one for a given channel
  ///
  /// - Parameters:
  ///   - request: Request to send to NextPacketSequence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nextPacketSequence(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.nextPacketSequence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? []
    )
  }

  /// Queries an address's unbondings
  ///
  /// - Parameters:
  ///   - request: Request to send to AddressUnbondings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addressUnbondings(
    _ request: Stride_Stakeibc_QueryAddressUnbondings,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stride_Stakeibc_QueryAddressUnbondings, Stride_Stakeibc_QueryAddressUnbondingsResponse> {
    return self.makeUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.addressUnbondings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressUnbondingsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Stride_Stakeibc_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Stride_Stakeibc_QueryNIOClient")
internal final class Stride_Stakeibc_QueryClient: Stride_Stakeibc_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the stride.stakeibc.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Stride_Stakeibc_QueryNIOClient: Stride_Stakeibc_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the stride.stakeibc.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stride_Stakeibc_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>

  func makeValidatorsCall(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>

  func makeHostZoneCall(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>

  func makeHostZoneAllCall(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>

  func makeModuleAddressCall(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>

  func makeInterchainAccountFromAddressCall(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>

  func makeEpochTrackerCall(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>

  func makeEpochTrackerAllCall(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>

  func makeNextPacketSequenceCall(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>

  func makeAddressUnbondingsCall(
    _ request: Stride_Stakeibc_QueryAddressUnbondings,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryAddressUnbondings, Stride_Stakeibc_QueryAddressUnbondingsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stride_Stakeibc_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stride_Stakeibc_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeValidatorsCall(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  internal func makeHostZoneCall(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.hostZone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneInterceptors() ?? []
    )
  }

  internal func makeHostZoneAllCall(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.hostZoneAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? []
    )
  }

  internal func makeModuleAddressCall(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.moduleAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? []
    )
  }

  internal func makeInterchainAccountFromAddressCall(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.interchainAccountFromAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? []
    )
  }

  internal func makeEpochTrackerCall(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.epochTracker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? []
    )
  }

  internal func makeEpochTrackerAllCall(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.epochTrackerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? []
    )
  }

  internal func makeNextPacketSequenceCall(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.nextPacketSequence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? []
    )
  }

  internal func makeAddressUnbondingsCall(
    _ request: Stride_Stakeibc_QueryAddressUnbondings,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stride_Stakeibc_QueryAddressUnbondings, Stride_Stakeibc_QueryAddressUnbondingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.addressUnbondings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressUnbondingsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stride_Stakeibc_QueryAsyncClientProtocol {
  internal func params(
    _ request: Stride_Stakeibc_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func validators(
    _ request: Stride_Stakeibc_QueryGetValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryGetValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  internal func hostZone(
    _ request: Stride_Stakeibc_QueryGetHostZoneRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryGetHostZoneResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.hostZone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneInterceptors() ?? []
    )
  }

  internal func hostZoneAll(
    _ request: Stride_Stakeibc_QueryAllHostZoneRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryAllHostZoneResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.hostZoneAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? []
    )
  }

  internal func moduleAddress(
    _ request: Stride_Stakeibc_QueryModuleAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryModuleAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.moduleAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? []
    )
  }

  internal func interchainAccountFromAddress(
    _ request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryInterchainAccountFromAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.interchainAccountFromAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? []
    )
  }

  internal func epochTracker(
    _ request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryGetEpochTrackerResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.epochTracker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? []
    )
  }

  internal func epochTrackerAll(
    _ request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryAllEpochTrackerResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.epochTrackerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? []
    )
  }

  internal func nextPacketSequence(
    _ request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryGetNextPacketSequenceResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.nextPacketSequence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? []
    )
  }

  internal func addressUnbondings(
    _ request: Stride_Stakeibc_QueryAddressUnbondings,
    callOptions: CallOptions? = nil
  ) async throws -> Stride_Stakeibc_QueryAddressUnbondingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Stride_Stakeibc_QueryClientMetadata.Methods.addressUnbondings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressUnbondingsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Stride_Stakeibc_QueryAsyncClient: Stride_Stakeibc_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stride_Stakeibc_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Stride_Stakeibc_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'validators'.
  func makeValidatorsInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'hostZone'.
  func makeHostZoneInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>]

  /// - Returns: Interceptors to use when invoking 'hostZoneAll'.
  func makeHostZoneAllInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>]

  /// - Returns: Interceptors to use when invoking 'moduleAddress'.
  func makeModuleAddressInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'interchainAccountFromAddress'.
  func makeInterchainAccountFromAddressInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'epochTracker'.
  func makeEpochTrackerInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>]

  /// - Returns: Interceptors to use when invoking 'epochTrackerAll'.
  func makeEpochTrackerAllInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>]

  /// - Returns: Interceptors to use when invoking 'nextPacketSequence'.
  func makeNextPacketSequenceInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>]

  /// - Returns: Interceptors to use when invoking 'addressUnbondings'.
  func makeAddressUnbondingsInterceptors() -> [ClientInterceptor<Stride_Stakeibc_QueryAddressUnbondings, Stride_Stakeibc_QueryAddressUnbondingsResponse>]
}

internal enum Stride_Stakeibc_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "stride.stakeibc.Query",
    methods: [
      Stride_Stakeibc_QueryClientMetadata.Methods.params,
      Stride_Stakeibc_QueryClientMetadata.Methods.validators,
      Stride_Stakeibc_QueryClientMetadata.Methods.hostZone,
      Stride_Stakeibc_QueryClientMetadata.Methods.hostZoneAll,
      Stride_Stakeibc_QueryClientMetadata.Methods.moduleAddress,
      Stride_Stakeibc_QueryClientMetadata.Methods.interchainAccountFromAddress,
      Stride_Stakeibc_QueryClientMetadata.Methods.epochTracker,
      Stride_Stakeibc_QueryClientMetadata.Methods.epochTrackerAll,
      Stride_Stakeibc_QueryClientMetadata.Methods.nextPacketSequence,
      Stride_Stakeibc_QueryClientMetadata.Methods.addressUnbondings,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/stride.stakeibc.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let validators = GRPCMethodDescriptor(
      name: "Validators",
      path: "/stride.stakeibc.Query/Validators",
      type: GRPCCallType.unary
    )

    internal static let hostZone = GRPCMethodDescriptor(
      name: "HostZone",
      path: "/stride.stakeibc.Query/HostZone",
      type: GRPCCallType.unary
    )

    internal static let hostZoneAll = GRPCMethodDescriptor(
      name: "HostZoneAll",
      path: "/stride.stakeibc.Query/HostZoneAll",
      type: GRPCCallType.unary
    )

    internal static let moduleAddress = GRPCMethodDescriptor(
      name: "ModuleAddress",
      path: "/stride.stakeibc.Query/ModuleAddress",
      type: GRPCCallType.unary
    )

    internal static let interchainAccountFromAddress = GRPCMethodDescriptor(
      name: "InterchainAccountFromAddress",
      path: "/stride.stakeibc.Query/InterchainAccountFromAddress",
      type: GRPCCallType.unary
    )

    internal static let epochTracker = GRPCMethodDescriptor(
      name: "EpochTracker",
      path: "/stride.stakeibc.Query/EpochTracker",
      type: GRPCCallType.unary
    )

    internal static let epochTrackerAll = GRPCMethodDescriptor(
      name: "EpochTrackerAll",
      path: "/stride.stakeibc.Query/EpochTrackerAll",
      type: GRPCCallType.unary
    )

    internal static let nextPacketSequence = GRPCMethodDescriptor(
      name: "NextPacketSequence",
      path: "/stride.stakeibc.Query/NextPacketSequence",
      type: GRPCCallType.unary
    )

    internal static let addressUnbondings = GRPCMethodDescriptor(
      name: "AddressUnbondings",
      path: "/stride.stakeibc.Query/AddressUnbondings",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stride_Stakeibc_QueryProvider: CallHandlerProvider {
  var interceptors: Stride_Stakeibc_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Stride_Stakeibc_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryParamsResponse>

  /// Queries a Validator by host zone.
  func validators(request: Stride_Stakeibc_QueryGetValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetValidatorsResponse>

  /// Queries a HostZone by id.
  func hostZone(request: Stride_Stakeibc_QueryGetHostZoneRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetHostZoneResponse>

  /// Queries a list of HostZone items.
  func hostZoneAll(request: Stride_Stakeibc_QueryAllHostZoneRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryAllHostZoneResponse>

  /// Queries a list of ModuleAddress items.
  func moduleAddress(request: Stride_Stakeibc_QueryModuleAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryModuleAddressResponse>

  /// QueryInterchainAccountFromAddress returns the interchain account for given
  /// owner address on a given connection pair
  func interchainAccountFromAddress(request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>

  /// Queries a EpochTracker by index.
  func epochTracker(request: Stride_Stakeibc_QueryGetEpochTrackerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetEpochTrackerResponse>

  /// Queries a list of EpochTracker items.
  func epochTrackerAll(request: Stride_Stakeibc_QueryAllEpochTrackerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryAllEpochTrackerResponse>

  /// Queries the next packet sequence for one for a given channel
  func nextPacketSequence(request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryGetNextPacketSequenceResponse>

  /// Queries an address's unbondings
  func addressUnbondings(request: Stride_Stakeibc_QueryAddressUnbondings, context: StatusOnlyCallContext) -> EventLoopFuture<Stride_Stakeibc_QueryAddressUnbondingsResponse>
}

extension Stride_Stakeibc_QueryProvider {
  internal var serviceName: Substring {
    return Stride_Stakeibc_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Validators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetValidatorsResponse>(),
        interceptors: self.interceptors?.makeValidatorsInterceptors() ?? [],
        userFunction: self.validators(request:context:)
      )

    case "HostZone":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetHostZoneRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetHostZoneResponse>(),
        interceptors: self.interceptors?.makeHostZoneInterceptors() ?? [],
        userFunction: self.hostZone(request:context:)
      )

    case "HostZoneAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAllHostZoneRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAllHostZoneResponse>(),
        interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? [],
        userFunction: self.hostZoneAll(request:context:)
      )

    case "ModuleAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryModuleAddressRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryModuleAddressResponse>(),
        interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? [],
        userFunction: self.moduleAddress(request:context:)
      )

    case "InterchainAccountFromAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>(),
        interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? [],
        userFunction: self.interchainAccountFromAddress(request:context:)
      )

    case "EpochTracker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetEpochTrackerRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetEpochTrackerResponse>(),
        interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? [],
        userFunction: self.epochTracker(request:context:)
      )

    case "EpochTrackerAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAllEpochTrackerRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAllEpochTrackerResponse>(),
        interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? [],
        userFunction: self.epochTrackerAll(request:context:)
      )

    case "NextPacketSequence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetNextPacketSequenceRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetNextPacketSequenceResponse>(),
        interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? [],
        userFunction: self.nextPacketSequence(request:context:)
      )

    case "AddressUnbondings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAddressUnbondings>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAddressUnbondingsResponse>(),
        interceptors: self.interceptors?.makeAddressUnbondingsInterceptors() ?? [],
        userFunction: self.addressUnbondings(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stride_Stakeibc_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stride_Stakeibc_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Stride_Stakeibc_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryParamsResponse

  /// Queries a Validator by host zone.
  @Sendable func validators(
    request: Stride_Stakeibc_QueryGetValidatorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryGetValidatorsResponse

  /// Queries a HostZone by id.
  @Sendable func hostZone(
    request: Stride_Stakeibc_QueryGetHostZoneRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryGetHostZoneResponse

  /// Queries a list of HostZone items.
  @Sendable func hostZoneAll(
    request: Stride_Stakeibc_QueryAllHostZoneRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryAllHostZoneResponse

  /// Queries a list of ModuleAddress items.
  @Sendable func moduleAddress(
    request: Stride_Stakeibc_QueryModuleAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryModuleAddressResponse

  /// QueryInterchainAccountFromAddress returns the interchain account for given
  /// owner address on a given connection pair
  @Sendable func interchainAccountFromAddress(
    request: Stride_Stakeibc_QueryInterchainAccountFromAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryInterchainAccountFromAddressResponse

  /// Queries a EpochTracker by index.
  @Sendable func epochTracker(
    request: Stride_Stakeibc_QueryGetEpochTrackerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryGetEpochTrackerResponse

  /// Queries a list of EpochTracker items.
  @Sendable func epochTrackerAll(
    request: Stride_Stakeibc_QueryAllEpochTrackerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryAllEpochTrackerResponse

  /// Queries the next packet sequence for one for a given channel
  @Sendable func nextPacketSequence(
    request: Stride_Stakeibc_QueryGetNextPacketSequenceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryGetNextPacketSequenceResponse

  /// Queries an address's unbondings
  @Sendable func addressUnbondings(
    request: Stride_Stakeibc_QueryAddressUnbondings,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stride_Stakeibc_QueryAddressUnbondingsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stride_Stakeibc_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stride_Stakeibc_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Stride_Stakeibc_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Stride_Stakeibc_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Validators":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetValidatorsResponse>(),
        interceptors: self.interceptors?.makeValidatorsInterceptors() ?? [],
        wrapping: self.validators(request:context:)
      )

    case "HostZone":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetHostZoneRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetHostZoneResponse>(),
        interceptors: self.interceptors?.makeHostZoneInterceptors() ?? [],
        wrapping: self.hostZone(request:context:)
      )

    case "HostZoneAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAllHostZoneRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAllHostZoneResponse>(),
        interceptors: self.interceptors?.makeHostZoneAllInterceptors() ?? [],
        wrapping: self.hostZoneAll(request:context:)
      )

    case "ModuleAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryModuleAddressRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryModuleAddressResponse>(),
        interceptors: self.interceptors?.makeModuleAddressInterceptors() ?? [],
        wrapping: self.moduleAddress(request:context:)
      )

    case "InterchainAccountFromAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>(),
        interceptors: self.interceptors?.makeInterchainAccountFromAddressInterceptors() ?? [],
        wrapping: self.interchainAccountFromAddress(request:context:)
      )

    case "EpochTracker":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetEpochTrackerRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetEpochTrackerResponse>(),
        interceptors: self.interceptors?.makeEpochTrackerInterceptors() ?? [],
        wrapping: self.epochTracker(request:context:)
      )

    case "EpochTrackerAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAllEpochTrackerRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAllEpochTrackerResponse>(),
        interceptors: self.interceptors?.makeEpochTrackerAllInterceptors() ?? [],
        wrapping: self.epochTrackerAll(request:context:)
      )

    case "NextPacketSequence":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryGetNextPacketSequenceRequest>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryGetNextPacketSequenceResponse>(),
        interceptors: self.interceptors?.makeNextPacketSequenceInterceptors() ?? [],
        wrapping: self.nextPacketSequence(request:context:)
      )

    case "AddressUnbondings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stride_Stakeibc_QueryAddressUnbondings>(),
        responseSerializer: ProtobufSerializer<Stride_Stakeibc_QueryAddressUnbondingsResponse>(),
        interceptors: self.interceptors?.makeAddressUnbondingsInterceptors() ?? [],
        wrapping: self.addressUnbondings(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stride_Stakeibc_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryParamsRequest, Stride_Stakeibc_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'validators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorsInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetValidatorsRequest, Stride_Stakeibc_QueryGetValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'hostZone'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHostZoneInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetHostZoneRequest, Stride_Stakeibc_QueryGetHostZoneResponse>]

  /// - Returns: Interceptors to use when handling 'hostZoneAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHostZoneAllInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryAllHostZoneRequest, Stride_Stakeibc_QueryAllHostZoneResponse>]

  /// - Returns: Interceptors to use when handling 'moduleAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModuleAddressInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryModuleAddressRequest, Stride_Stakeibc_QueryModuleAddressResponse>]

  /// - Returns: Interceptors to use when handling 'interchainAccountFromAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInterchainAccountFromAddressInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryInterchainAccountFromAddressRequest, Stride_Stakeibc_QueryInterchainAccountFromAddressResponse>]

  /// - Returns: Interceptors to use when handling 'epochTracker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochTrackerInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetEpochTrackerRequest, Stride_Stakeibc_QueryGetEpochTrackerResponse>]

  /// - Returns: Interceptors to use when handling 'epochTrackerAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochTrackerAllInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryAllEpochTrackerRequest, Stride_Stakeibc_QueryAllEpochTrackerResponse>]

  /// - Returns: Interceptors to use when handling 'nextPacketSequence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNextPacketSequenceInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryGetNextPacketSequenceRequest, Stride_Stakeibc_QueryGetNextPacketSequenceResponse>]

  /// - Returns: Interceptors to use when handling 'addressUnbondings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddressUnbondingsInterceptors() -> [ServerInterceptor<Stride_Stakeibc_QueryAddressUnbondings, Stride_Stakeibc_QueryAddressUnbondingsResponse>]
}

internal enum Stride_Stakeibc_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "stride.stakeibc.Query",
    methods: [
      Stride_Stakeibc_QueryServerMetadata.Methods.params,
      Stride_Stakeibc_QueryServerMetadata.Methods.validators,
      Stride_Stakeibc_QueryServerMetadata.Methods.hostZone,
      Stride_Stakeibc_QueryServerMetadata.Methods.hostZoneAll,
      Stride_Stakeibc_QueryServerMetadata.Methods.moduleAddress,
      Stride_Stakeibc_QueryServerMetadata.Methods.interchainAccountFromAddress,
      Stride_Stakeibc_QueryServerMetadata.Methods.epochTracker,
      Stride_Stakeibc_QueryServerMetadata.Methods.epochTrackerAll,
      Stride_Stakeibc_QueryServerMetadata.Methods.nextPacketSequence,
      Stride_Stakeibc_QueryServerMetadata.Methods.addressUnbondings,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/stride.stakeibc.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let validators = GRPCMethodDescriptor(
      name: "Validators",
      path: "/stride.stakeibc.Query/Validators",
      type: GRPCCallType.unary
    )

    internal static let hostZone = GRPCMethodDescriptor(
      name: "HostZone",
      path: "/stride.stakeibc.Query/HostZone",
      type: GRPCCallType.unary
    )

    internal static let hostZoneAll = GRPCMethodDescriptor(
      name: "HostZoneAll",
      path: "/stride.stakeibc.Query/HostZoneAll",
      type: GRPCCallType.unary
    )

    internal static let moduleAddress = GRPCMethodDescriptor(
      name: "ModuleAddress",
      path: "/stride.stakeibc.Query/ModuleAddress",
      type: GRPCCallType.unary
    )

    internal static let interchainAccountFromAddress = GRPCMethodDescriptor(
      name: "InterchainAccountFromAddress",
      path: "/stride.stakeibc.Query/InterchainAccountFromAddress",
      type: GRPCCallType.unary
    )

    internal static let epochTracker = GRPCMethodDescriptor(
      name: "EpochTracker",
      path: "/stride.stakeibc.Query/EpochTracker",
      type: GRPCCallType.unary
    )

    internal static let epochTrackerAll = GRPCMethodDescriptor(
      name: "EpochTrackerAll",
      path: "/stride.stakeibc.Query/EpochTrackerAll",
      type: GRPCCallType.unary
    )

    internal static let nextPacketSequence = GRPCMethodDescriptor(
      name: "NextPacketSequence",
      path: "/stride.stakeibc.Query/NextPacketSequence",
      type: GRPCCallType.unary
    )

    internal static let addressUnbondings = GRPCMethodDescriptor(
      name: "AddressUnbondings",
      path: "/stride.stakeibc.Query/AddressUnbondings",
      type: GRPCCallType.unary
    )
  }
}
