//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: irismod/service/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the oracle Msg service
///
/// Usage: instantiate `Irismod_Service_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Irismod_Service_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? { get }

  func defineService(
    _ request: Irismod_Service_MsgDefineService,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgDefineService, Irismod_Service_MsgDefineServiceResponse>

  func bindService(
    _ request: Irismod_Service_MsgBindService,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgBindService, Irismod_Service_MsgBindServiceResponse>

  func updateServiceBinding(
    _ request: Irismod_Service_MsgUpdateServiceBinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgUpdateServiceBinding, Irismod_Service_MsgUpdateServiceBindingResponse>

  func setWithdrawAddress(
    _ request: Irismod_Service_MsgSetWithdrawAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgSetWithdrawAddress, Irismod_Service_MsgSetWithdrawAddressResponse>

  func enableServiceBinding(
    _ request: Irismod_Service_MsgEnableServiceBinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgEnableServiceBinding, Irismod_Service_MsgEnableServiceBindingResponse>

  func disableServiceBinding(
    _ request: Irismod_Service_MsgDisableServiceBinding,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgDisableServiceBinding, Irismod_Service_MsgDisableServiceBindingResponse>

  func refundServiceDeposit(
    _ request: Irismod_Service_MsgRefundServiceDeposit,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgRefundServiceDeposit, Irismod_Service_MsgRefundServiceDepositResponse>

  func callService(
    _ request: Irismod_Service_MsgCallService,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgCallService, Irismod_Service_MsgCallServiceResponse>

  func respondService(
    _ request: Irismod_Service_MsgRespondService,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgRespondService, Irismod_Service_MsgRespondServiceResponse>

  func pauseRequestContext(
    _ request: Irismod_Service_MsgPauseRequestContext,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgPauseRequestContext, Irismod_Service_MsgPauseRequestContextResponse>

  func startRequestContext(
    _ request: Irismod_Service_MsgStartRequestContext,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgStartRequestContext, Irismod_Service_MsgStartRequestContextResponse>

  func killRequestContext(
    _ request: Irismod_Service_MsgKillRequestContext,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgKillRequestContext, Irismod_Service_MsgKillRequestContextResponse>

  func updateRequestContext(
    _ request: Irismod_Service_MsgUpdateRequestContext,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgUpdateRequestContext, Irismod_Service_MsgUpdateRequestContextResponse>

  func withdrawEarnedFees(
    _ request: Irismod_Service_MsgWithdrawEarnedFees,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_MsgWithdrawEarnedFees, Irismod_Service_MsgWithdrawEarnedFeesResponse>
}

extension Irismod_Service_MsgClientProtocol {
  internal var serviceName: String {
    return "irismod.service.Msg"
  }

  /// DefineService defines a method for define a new service
  ///
  /// - Parameters:
  ///   - request: Request to send to DefineService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func defineService(
    _ request: Irismod_Service_MsgDefineService,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgDefineService, Irismod_Service_MsgDefineServiceResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.defineService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefineServiceInterceptors() ?? []
    )
  }

  /// BindService defines a method for bind a server
  ///
  /// - Parameters:
  ///   - request: Request to send to BindService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bindService(
    _ request: Irismod_Service_MsgBindService,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgBindService, Irismod_Service_MsgBindServiceResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.bindService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindServiceInterceptors() ?? []
    )
  }

  /// UpdateServiceBinding defines a method for update a service binding
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateServiceBinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateServiceBinding(
    _ request: Irismod_Service_MsgUpdateServiceBinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgUpdateServiceBinding, Irismod_Service_MsgUpdateServiceBindingResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.updateServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceBindingInterceptors() ?? []
    )
  }

  /// SetWithdrawAddress defines a method for setting a withdraw address
  ///
  /// - Parameters:
  ///   - request: Request to send to SetWithdrawAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setWithdrawAddress(
    _ request: Irismod_Service_MsgSetWithdrawAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgSetWithdrawAddress, Irismod_Service_MsgSetWithdrawAddressResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.setWithdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetWithdrawAddressInterceptors() ?? []
    )
  }

  /// EnableServiceBinding defines a method for enabling a service binding
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableServiceBinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableServiceBinding(
    _ request: Irismod_Service_MsgEnableServiceBinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgEnableServiceBinding, Irismod_Service_MsgEnableServiceBindingResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.enableServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableServiceBindingInterceptors() ?? []
    )
  }

  /// DisableServiceBinding defines a method for disabling a service binding
  ///
  /// - Parameters:
  ///   - request: Request to send to DisableServiceBinding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableServiceBinding(
    _ request: Irismod_Service_MsgDisableServiceBinding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgDisableServiceBinding, Irismod_Service_MsgDisableServiceBindingResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.disableServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableServiceBindingInterceptors() ?? []
    )
  }

  /// RefundServiceDeposit defines a method for refunding a fee
  ///
  /// - Parameters:
  ///   - request: Request to send to RefundServiceDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func refundServiceDeposit(
    _ request: Irismod_Service_MsgRefundServiceDeposit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgRefundServiceDeposit, Irismod_Service_MsgRefundServiceDepositResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.refundServiceDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefundServiceDepositInterceptors() ?? []
    )
  }

  /// CallService defines a method for calling a service
  ///
  /// - Parameters:
  ///   - request: Request to send to CallService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func callService(
    _ request: Irismod_Service_MsgCallService,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgCallService, Irismod_Service_MsgCallServiceResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.callService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallServiceInterceptors() ?? []
    )
  }

  /// RespondService defines a method for responding a service
  ///
  /// - Parameters:
  ///   - request: Request to send to RespondService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func respondService(
    _ request: Irismod_Service_MsgRespondService,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgRespondService, Irismod_Service_MsgRespondServiceResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.respondService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRespondServiceInterceptors() ?? []
    )
  }

  /// PauseRequestContext defines a method for pausing a service call
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseRequestContext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pauseRequestContext(
    _ request: Irismod_Service_MsgPauseRequestContext,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgPauseRequestContext, Irismod_Service_MsgPauseRequestContextResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.pauseRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseRequestContextInterceptors() ?? []
    )
  }

  /// StartRequestContext defines a method for starting a service call
  ///
  /// - Parameters:
  ///   - request: Request to send to StartRequestContext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startRequestContext(
    _ request: Irismod_Service_MsgStartRequestContext,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgStartRequestContext, Irismod_Service_MsgStartRequestContextResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.startRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartRequestContextInterceptors() ?? []
    )
  }

  /// KillRequestContext defines a method for killing a service call
  ///
  /// - Parameters:
  ///   - request: Request to send to KillRequestContext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func killRequestContext(
    _ request: Irismod_Service_MsgKillRequestContext,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgKillRequestContext, Irismod_Service_MsgKillRequestContextResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.killRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKillRequestContextInterceptors() ?? []
    )
  }

  /// UpdateRequestContext defines a method for updating a service call
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateRequestContext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateRequestContext(
    _ request: Irismod_Service_MsgUpdateRequestContext,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgUpdateRequestContext, Irismod_Service_MsgUpdateRequestContextResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.updateRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRequestContextInterceptors() ?? []
    )
  }

  /// WithdrawEarnedFees defines a method for Withdrawing a earned fees
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawEarnedFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawEarnedFees(
    _ request: Irismod_Service_MsgWithdrawEarnedFees,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_MsgWithdrawEarnedFees, Irismod_Service_MsgWithdrawEarnedFeesResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.withdrawEarnedFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawEarnedFeesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Irismod_Service_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Irismod_Service_MsgNIOClient")
internal final class Irismod_Service_MsgClient: Irismod_Service_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the irismod.service.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Irismod_Service_MsgNIOClient: Irismod_Service_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the irismod.service.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the oracle Msg service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Irismod_Service_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? { get }

  func makeDefineServiceCall(
    _ request: Irismod_Service_MsgDefineService,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgDefineService, Irismod_Service_MsgDefineServiceResponse>

  func makeBindServiceCall(
    _ request: Irismod_Service_MsgBindService,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgBindService, Irismod_Service_MsgBindServiceResponse>

  func makeUpdateServiceBindingCall(
    _ request: Irismod_Service_MsgUpdateServiceBinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgUpdateServiceBinding, Irismod_Service_MsgUpdateServiceBindingResponse>

  func makeSetWithdrawAddressCall(
    _ request: Irismod_Service_MsgSetWithdrawAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgSetWithdrawAddress, Irismod_Service_MsgSetWithdrawAddressResponse>

  func makeEnableServiceBindingCall(
    _ request: Irismod_Service_MsgEnableServiceBinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgEnableServiceBinding, Irismod_Service_MsgEnableServiceBindingResponse>

  func makeDisableServiceBindingCall(
    _ request: Irismod_Service_MsgDisableServiceBinding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgDisableServiceBinding, Irismod_Service_MsgDisableServiceBindingResponse>

  func makeRefundServiceDepositCall(
    _ request: Irismod_Service_MsgRefundServiceDeposit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgRefundServiceDeposit, Irismod_Service_MsgRefundServiceDepositResponse>

  func makeCallServiceCall(
    _ request: Irismod_Service_MsgCallService,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgCallService, Irismod_Service_MsgCallServiceResponse>

  func makeRespondServiceCall(
    _ request: Irismod_Service_MsgRespondService,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgRespondService, Irismod_Service_MsgRespondServiceResponse>

  func makePauseRequestContextCall(
    _ request: Irismod_Service_MsgPauseRequestContext,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgPauseRequestContext, Irismod_Service_MsgPauseRequestContextResponse>

  func makeStartRequestContextCall(
    _ request: Irismod_Service_MsgStartRequestContext,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgStartRequestContext, Irismod_Service_MsgStartRequestContextResponse>

  func makeKillRequestContextCall(
    _ request: Irismod_Service_MsgKillRequestContext,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgKillRequestContext, Irismod_Service_MsgKillRequestContextResponse>

  func makeUpdateRequestContextCall(
    _ request: Irismod_Service_MsgUpdateRequestContext,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgUpdateRequestContext, Irismod_Service_MsgUpdateRequestContextResponse>

  func makeWithdrawEarnedFeesCall(
    _ request: Irismod_Service_MsgWithdrawEarnedFees,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgWithdrawEarnedFees, Irismod_Service_MsgWithdrawEarnedFeesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Irismod_Service_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Irismod_Service_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDefineServiceCall(
    _ request: Irismod_Service_MsgDefineService,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgDefineService, Irismod_Service_MsgDefineServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.defineService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefineServiceInterceptors() ?? []
    )
  }

  internal func makeBindServiceCall(
    _ request: Irismod_Service_MsgBindService,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgBindService, Irismod_Service_MsgBindServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.bindService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindServiceInterceptors() ?? []
    )
  }

  internal func makeUpdateServiceBindingCall(
    _ request: Irismod_Service_MsgUpdateServiceBinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgUpdateServiceBinding, Irismod_Service_MsgUpdateServiceBindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.updateServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceBindingInterceptors() ?? []
    )
  }

  internal func makeSetWithdrawAddressCall(
    _ request: Irismod_Service_MsgSetWithdrawAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgSetWithdrawAddress, Irismod_Service_MsgSetWithdrawAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.setWithdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetWithdrawAddressInterceptors() ?? []
    )
  }

  internal func makeEnableServiceBindingCall(
    _ request: Irismod_Service_MsgEnableServiceBinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgEnableServiceBinding, Irismod_Service_MsgEnableServiceBindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.enableServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableServiceBindingInterceptors() ?? []
    )
  }

  internal func makeDisableServiceBindingCall(
    _ request: Irismod_Service_MsgDisableServiceBinding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgDisableServiceBinding, Irismod_Service_MsgDisableServiceBindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.disableServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableServiceBindingInterceptors() ?? []
    )
  }

  internal func makeRefundServiceDepositCall(
    _ request: Irismod_Service_MsgRefundServiceDeposit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgRefundServiceDeposit, Irismod_Service_MsgRefundServiceDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.refundServiceDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefundServiceDepositInterceptors() ?? []
    )
  }

  internal func makeCallServiceCall(
    _ request: Irismod_Service_MsgCallService,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgCallService, Irismod_Service_MsgCallServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.callService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallServiceInterceptors() ?? []
    )
  }

  internal func makeRespondServiceCall(
    _ request: Irismod_Service_MsgRespondService,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgRespondService, Irismod_Service_MsgRespondServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.respondService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRespondServiceInterceptors() ?? []
    )
  }

  internal func makePauseRequestContextCall(
    _ request: Irismod_Service_MsgPauseRequestContext,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgPauseRequestContext, Irismod_Service_MsgPauseRequestContextResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.pauseRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseRequestContextInterceptors() ?? []
    )
  }

  internal func makeStartRequestContextCall(
    _ request: Irismod_Service_MsgStartRequestContext,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgStartRequestContext, Irismod_Service_MsgStartRequestContextResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.startRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartRequestContextInterceptors() ?? []
    )
  }

  internal func makeKillRequestContextCall(
    _ request: Irismod_Service_MsgKillRequestContext,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgKillRequestContext, Irismod_Service_MsgKillRequestContextResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.killRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKillRequestContextInterceptors() ?? []
    )
  }

  internal func makeUpdateRequestContextCall(
    _ request: Irismod_Service_MsgUpdateRequestContext,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgUpdateRequestContext, Irismod_Service_MsgUpdateRequestContextResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.updateRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRequestContextInterceptors() ?? []
    )
  }

  internal func makeWithdrawEarnedFeesCall(
    _ request: Irismod_Service_MsgWithdrawEarnedFees,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_MsgWithdrawEarnedFees, Irismod_Service_MsgWithdrawEarnedFeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.withdrawEarnedFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawEarnedFeesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Irismod_Service_MsgAsyncClientProtocol {
  internal func defineService(
    _ request: Irismod_Service_MsgDefineService,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgDefineServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.defineService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefineServiceInterceptors() ?? []
    )
  }

  internal func bindService(
    _ request: Irismod_Service_MsgBindService,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgBindServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.bindService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindServiceInterceptors() ?? []
    )
  }

  internal func updateServiceBinding(
    _ request: Irismod_Service_MsgUpdateServiceBinding,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgUpdateServiceBindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.updateServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceBindingInterceptors() ?? []
    )
  }

  internal func setWithdrawAddress(
    _ request: Irismod_Service_MsgSetWithdrawAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgSetWithdrawAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.setWithdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetWithdrawAddressInterceptors() ?? []
    )
  }

  internal func enableServiceBinding(
    _ request: Irismod_Service_MsgEnableServiceBinding,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgEnableServiceBindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.enableServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableServiceBindingInterceptors() ?? []
    )
  }

  internal func disableServiceBinding(
    _ request: Irismod_Service_MsgDisableServiceBinding,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgDisableServiceBindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.disableServiceBinding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableServiceBindingInterceptors() ?? []
    )
  }

  internal func refundServiceDeposit(
    _ request: Irismod_Service_MsgRefundServiceDeposit,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgRefundServiceDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.refundServiceDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefundServiceDepositInterceptors() ?? []
    )
  }

  internal func callService(
    _ request: Irismod_Service_MsgCallService,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgCallServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.callService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallServiceInterceptors() ?? []
    )
  }

  internal func respondService(
    _ request: Irismod_Service_MsgRespondService,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgRespondServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.respondService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRespondServiceInterceptors() ?? []
    )
  }

  internal func pauseRequestContext(
    _ request: Irismod_Service_MsgPauseRequestContext,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgPauseRequestContextResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.pauseRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseRequestContextInterceptors() ?? []
    )
  }

  internal func startRequestContext(
    _ request: Irismod_Service_MsgStartRequestContext,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgStartRequestContextResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.startRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartRequestContextInterceptors() ?? []
    )
  }

  internal func killRequestContext(
    _ request: Irismod_Service_MsgKillRequestContext,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgKillRequestContextResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.killRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKillRequestContextInterceptors() ?? []
    )
  }

  internal func updateRequestContext(
    _ request: Irismod_Service_MsgUpdateRequestContext,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgUpdateRequestContextResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.updateRequestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRequestContextInterceptors() ?? []
    )
  }

  internal func withdrawEarnedFees(
    _ request: Irismod_Service_MsgWithdrawEarnedFees,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_MsgWithdrawEarnedFeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_MsgClientMetadata.Methods.withdrawEarnedFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawEarnedFeesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Irismod_Service_MsgAsyncClient: Irismod_Service_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Service_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Irismod_Service_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'defineService'.
  func makeDefineServiceInterceptors() -> [ClientInterceptor<Irismod_Service_MsgDefineService, Irismod_Service_MsgDefineServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'bindService'.
  func makeBindServiceInterceptors() -> [ClientInterceptor<Irismod_Service_MsgBindService, Irismod_Service_MsgBindServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'updateServiceBinding'.
  func makeUpdateServiceBindingInterceptors() -> [ClientInterceptor<Irismod_Service_MsgUpdateServiceBinding, Irismod_Service_MsgUpdateServiceBindingResponse>]

  /// - Returns: Interceptors to use when invoking 'setWithdrawAddress'.
  func makeSetWithdrawAddressInterceptors() -> [ClientInterceptor<Irismod_Service_MsgSetWithdrawAddress, Irismod_Service_MsgSetWithdrawAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'enableServiceBinding'.
  func makeEnableServiceBindingInterceptors() -> [ClientInterceptor<Irismod_Service_MsgEnableServiceBinding, Irismod_Service_MsgEnableServiceBindingResponse>]

  /// - Returns: Interceptors to use when invoking 'disableServiceBinding'.
  func makeDisableServiceBindingInterceptors() -> [ClientInterceptor<Irismod_Service_MsgDisableServiceBinding, Irismod_Service_MsgDisableServiceBindingResponse>]

  /// - Returns: Interceptors to use when invoking 'refundServiceDeposit'.
  func makeRefundServiceDepositInterceptors() -> [ClientInterceptor<Irismod_Service_MsgRefundServiceDeposit, Irismod_Service_MsgRefundServiceDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'callService'.
  func makeCallServiceInterceptors() -> [ClientInterceptor<Irismod_Service_MsgCallService, Irismod_Service_MsgCallServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'respondService'.
  func makeRespondServiceInterceptors() -> [ClientInterceptor<Irismod_Service_MsgRespondService, Irismod_Service_MsgRespondServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'pauseRequestContext'.
  func makePauseRequestContextInterceptors() -> [ClientInterceptor<Irismod_Service_MsgPauseRequestContext, Irismod_Service_MsgPauseRequestContextResponse>]

  /// - Returns: Interceptors to use when invoking 'startRequestContext'.
  func makeStartRequestContextInterceptors() -> [ClientInterceptor<Irismod_Service_MsgStartRequestContext, Irismod_Service_MsgStartRequestContextResponse>]

  /// - Returns: Interceptors to use when invoking 'killRequestContext'.
  func makeKillRequestContextInterceptors() -> [ClientInterceptor<Irismod_Service_MsgKillRequestContext, Irismod_Service_MsgKillRequestContextResponse>]

  /// - Returns: Interceptors to use when invoking 'updateRequestContext'.
  func makeUpdateRequestContextInterceptors() -> [ClientInterceptor<Irismod_Service_MsgUpdateRequestContext, Irismod_Service_MsgUpdateRequestContextResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawEarnedFees'.
  func makeWithdrawEarnedFeesInterceptors() -> [ClientInterceptor<Irismod_Service_MsgWithdrawEarnedFees, Irismod_Service_MsgWithdrawEarnedFeesResponse>]
}

internal enum Irismod_Service_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "irismod.service.Msg",
    methods: [
      Irismod_Service_MsgClientMetadata.Methods.defineService,
      Irismod_Service_MsgClientMetadata.Methods.bindService,
      Irismod_Service_MsgClientMetadata.Methods.updateServiceBinding,
      Irismod_Service_MsgClientMetadata.Methods.setWithdrawAddress,
      Irismod_Service_MsgClientMetadata.Methods.enableServiceBinding,
      Irismod_Service_MsgClientMetadata.Methods.disableServiceBinding,
      Irismod_Service_MsgClientMetadata.Methods.refundServiceDeposit,
      Irismod_Service_MsgClientMetadata.Methods.callService,
      Irismod_Service_MsgClientMetadata.Methods.respondService,
      Irismod_Service_MsgClientMetadata.Methods.pauseRequestContext,
      Irismod_Service_MsgClientMetadata.Methods.startRequestContext,
      Irismod_Service_MsgClientMetadata.Methods.killRequestContext,
      Irismod_Service_MsgClientMetadata.Methods.updateRequestContext,
      Irismod_Service_MsgClientMetadata.Methods.withdrawEarnedFees,
    ]
  )

  internal enum Methods {
    internal static let defineService = GRPCMethodDescriptor(
      name: "DefineService",
      path: "/irismod.service.Msg/DefineService",
      type: GRPCCallType.unary
    )

    internal static let bindService = GRPCMethodDescriptor(
      name: "BindService",
      path: "/irismod.service.Msg/BindService",
      type: GRPCCallType.unary
    )

    internal static let updateServiceBinding = GRPCMethodDescriptor(
      name: "UpdateServiceBinding",
      path: "/irismod.service.Msg/UpdateServiceBinding",
      type: GRPCCallType.unary
    )

    internal static let setWithdrawAddress = GRPCMethodDescriptor(
      name: "SetWithdrawAddress",
      path: "/irismod.service.Msg/SetWithdrawAddress",
      type: GRPCCallType.unary
    )

    internal static let enableServiceBinding = GRPCMethodDescriptor(
      name: "EnableServiceBinding",
      path: "/irismod.service.Msg/EnableServiceBinding",
      type: GRPCCallType.unary
    )

    internal static let disableServiceBinding = GRPCMethodDescriptor(
      name: "DisableServiceBinding",
      path: "/irismod.service.Msg/DisableServiceBinding",
      type: GRPCCallType.unary
    )

    internal static let refundServiceDeposit = GRPCMethodDescriptor(
      name: "RefundServiceDeposit",
      path: "/irismod.service.Msg/RefundServiceDeposit",
      type: GRPCCallType.unary
    )

    internal static let callService = GRPCMethodDescriptor(
      name: "CallService",
      path: "/irismod.service.Msg/CallService",
      type: GRPCCallType.unary
    )

    internal static let respondService = GRPCMethodDescriptor(
      name: "RespondService",
      path: "/irismod.service.Msg/RespondService",
      type: GRPCCallType.unary
    )

    internal static let pauseRequestContext = GRPCMethodDescriptor(
      name: "PauseRequestContext",
      path: "/irismod.service.Msg/PauseRequestContext",
      type: GRPCCallType.unary
    )

    internal static let startRequestContext = GRPCMethodDescriptor(
      name: "StartRequestContext",
      path: "/irismod.service.Msg/StartRequestContext",
      type: GRPCCallType.unary
    )

    internal static let killRequestContext = GRPCMethodDescriptor(
      name: "KillRequestContext",
      path: "/irismod.service.Msg/KillRequestContext",
      type: GRPCCallType.unary
    )

    internal static let updateRequestContext = GRPCMethodDescriptor(
      name: "UpdateRequestContext",
      path: "/irismod.service.Msg/UpdateRequestContext",
      type: GRPCCallType.unary
    )

    internal static let withdrawEarnedFees = GRPCMethodDescriptor(
      name: "WithdrawEarnedFees",
      path: "/irismod.service.Msg/WithdrawEarnedFees",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the oracle Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Service_MsgProvider: CallHandlerProvider {
  var interceptors: Irismod_Service_MsgServerInterceptorFactoryProtocol? { get }

  /// DefineService defines a method for define a new service
  func defineService(request: Irismod_Service_MsgDefineService, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgDefineServiceResponse>

  /// BindService defines a method for bind a server
  func bindService(request: Irismod_Service_MsgBindService, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgBindServiceResponse>

  /// UpdateServiceBinding defines a method for update a service binding
  func updateServiceBinding(request: Irismod_Service_MsgUpdateServiceBinding, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgUpdateServiceBindingResponse>

  /// SetWithdrawAddress defines a method for setting a withdraw address
  func setWithdrawAddress(request: Irismod_Service_MsgSetWithdrawAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgSetWithdrawAddressResponse>

  /// EnableServiceBinding defines a method for enabling a service binding
  func enableServiceBinding(request: Irismod_Service_MsgEnableServiceBinding, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgEnableServiceBindingResponse>

  /// DisableServiceBinding defines a method for disabling a service binding
  func disableServiceBinding(request: Irismod_Service_MsgDisableServiceBinding, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgDisableServiceBindingResponse>

  /// RefundServiceDeposit defines a method for refunding a fee
  func refundServiceDeposit(request: Irismod_Service_MsgRefundServiceDeposit, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgRefundServiceDepositResponse>

  /// CallService defines a method for calling a service
  func callService(request: Irismod_Service_MsgCallService, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgCallServiceResponse>

  /// RespondService defines a method for responding a service
  func respondService(request: Irismod_Service_MsgRespondService, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgRespondServiceResponse>

  /// PauseRequestContext defines a method for pausing a service call
  func pauseRequestContext(request: Irismod_Service_MsgPauseRequestContext, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgPauseRequestContextResponse>

  /// StartRequestContext defines a method for starting a service call
  func startRequestContext(request: Irismod_Service_MsgStartRequestContext, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgStartRequestContextResponse>

  /// KillRequestContext defines a method for killing a service call
  func killRequestContext(request: Irismod_Service_MsgKillRequestContext, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgKillRequestContextResponse>

  /// UpdateRequestContext defines a method for updating a service call
  func updateRequestContext(request: Irismod_Service_MsgUpdateRequestContext, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgUpdateRequestContextResponse>

  /// WithdrawEarnedFees defines a method for Withdrawing a earned fees
  func withdrawEarnedFees(request: Irismod_Service_MsgWithdrawEarnedFees, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_MsgWithdrawEarnedFeesResponse>
}

extension Irismod_Service_MsgProvider {
  internal var serviceName: Substring {
    return Irismod_Service_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DefineService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgDefineService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgDefineServiceResponse>(),
        interceptors: self.interceptors?.makeDefineServiceInterceptors() ?? [],
        userFunction: self.defineService(request:context:)
      )

    case "BindService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgBindService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgBindServiceResponse>(),
        interceptors: self.interceptors?.makeBindServiceInterceptors() ?? [],
        userFunction: self.bindService(request:context:)
      )

    case "UpdateServiceBinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgUpdateServiceBinding>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgUpdateServiceBindingResponse>(),
        interceptors: self.interceptors?.makeUpdateServiceBindingInterceptors() ?? [],
        userFunction: self.updateServiceBinding(request:context:)
      )

    case "SetWithdrawAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgSetWithdrawAddress>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgSetWithdrawAddressResponse>(),
        interceptors: self.interceptors?.makeSetWithdrawAddressInterceptors() ?? [],
        userFunction: self.setWithdrawAddress(request:context:)
      )

    case "EnableServiceBinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgEnableServiceBinding>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgEnableServiceBindingResponse>(),
        interceptors: self.interceptors?.makeEnableServiceBindingInterceptors() ?? [],
        userFunction: self.enableServiceBinding(request:context:)
      )

    case "DisableServiceBinding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgDisableServiceBinding>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgDisableServiceBindingResponse>(),
        interceptors: self.interceptors?.makeDisableServiceBindingInterceptors() ?? [],
        userFunction: self.disableServiceBinding(request:context:)
      )

    case "RefundServiceDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgRefundServiceDeposit>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgRefundServiceDepositResponse>(),
        interceptors: self.interceptors?.makeRefundServiceDepositInterceptors() ?? [],
        userFunction: self.refundServiceDeposit(request:context:)
      )

    case "CallService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgCallService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgCallServiceResponse>(),
        interceptors: self.interceptors?.makeCallServiceInterceptors() ?? [],
        userFunction: self.callService(request:context:)
      )

    case "RespondService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgRespondService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgRespondServiceResponse>(),
        interceptors: self.interceptors?.makeRespondServiceInterceptors() ?? [],
        userFunction: self.respondService(request:context:)
      )

    case "PauseRequestContext":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgPauseRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgPauseRequestContextResponse>(),
        interceptors: self.interceptors?.makePauseRequestContextInterceptors() ?? [],
        userFunction: self.pauseRequestContext(request:context:)
      )

    case "StartRequestContext":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgStartRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgStartRequestContextResponse>(),
        interceptors: self.interceptors?.makeStartRequestContextInterceptors() ?? [],
        userFunction: self.startRequestContext(request:context:)
      )

    case "KillRequestContext":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgKillRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgKillRequestContextResponse>(),
        interceptors: self.interceptors?.makeKillRequestContextInterceptors() ?? [],
        userFunction: self.killRequestContext(request:context:)
      )

    case "UpdateRequestContext":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgUpdateRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgUpdateRequestContextResponse>(),
        interceptors: self.interceptors?.makeUpdateRequestContextInterceptors() ?? [],
        userFunction: self.updateRequestContext(request:context:)
      )

    case "WithdrawEarnedFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgWithdrawEarnedFees>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgWithdrawEarnedFeesResponse>(),
        interceptors: self.interceptors?.makeWithdrawEarnedFeesInterceptors() ?? [],
        userFunction: self.withdrawEarnedFees(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the oracle Msg service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Irismod_Service_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Irismod_Service_MsgServerInterceptorFactoryProtocol? { get }

  /// DefineService defines a method for define a new service
  @Sendable func defineService(
    request: Irismod_Service_MsgDefineService,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgDefineServiceResponse

  /// BindService defines a method for bind a server
  @Sendable func bindService(
    request: Irismod_Service_MsgBindService,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgBindServiceResponse

  /// UpdateServiceBinding defines a method for update a service binding
  @Sendable func updateServiceBinding(
    request: Irismod_Service_MsgUpdateServiceBinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgUpdateServiceBindingResponse

  /// SetWithdrawAddress defines a method for setting a withdraw address
  @Sendable func setWithdrawAddress(
    request: Irismod_Service_MsgSetWithdrawAddress,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgSetWithdrawAddressResponse

  /// EnableServiceBinding defines a method for enabling a service binding
  @Sendable func enableServiceBinding(
    request: Irismod_Service_MsgEnableServiceBinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgEnableServiceBindingResponse

  /// DisableServiceBinding defines a method for disabling a service binding
  @Sendable func disableServiceBinding(
    request: Irismod_Service_MsgDisableServiceBinding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgDisableServiceBindingResponse

  /// RefundServiceDeposit defines a method for refunding a fee
  @Sendable func refundServiceDeposit(
    request: Irismod_Service_MsgRefundServiceDeposit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgRefundServiceDepositResponse

  /// CallService defines a method for calling a service
  @Sendable func callService(
    request: Irismod_Service_MsgCallService,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgCallServiceResponse

  /// RespondService defines a method for responding a service
  @Sendable func respondService(
    request: Irismod_Service_MsgRespondService,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgRespondServiceResponse

  /// PauseRequestContext defines a method for pausing a service call
  @Sendable func pauseRequestContext(
    request: Irismod_Service_MsgPauseRequestContext,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgPauseRequestContextResponse

  /// StartRequestContext defines a method for starting a service call
  @Sendable func startRequestContext(
    request: Irismod_Service_MsgStartRequestContext,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgStartRequestContextResponse

  /// KillRequestContext defines a method for killing a service call
  @Sendable func killRequestContext(
    request: Irismod_Service_MsgKillRequestContext,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgKillRequestContextResponse

  /// UpdateRequestContext defines a method for updating a service call
  @Sendable func updateRequestContext(
    request: Irismod_Service_MsgUpdateRequestContext,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgUpdateRequestContextResponse

  /// WithdrawEarnedFees defines a method for Withdrawing a earned fees
  @Sendable func withdrawEarnedFees(
    request: Irismod_Service_MsgWithdrawEarnedFees,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_MsgWithdrawEarnedFeesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Irismod_Service_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Irismod_Service_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Irismod_Service_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Irismod_Service_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DefineService":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgDefineService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgDefineServiceResponse>(),
        interceptors: self.interceptors?.makeDefineServiceInterceptors() ?? [],
        wrapping: self.defineService(request:context:)
      )

    case "BindService":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgBindService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgBindServiceResponse>(),
        interceptors: self.interceptors?.makeBindServiceInterceptors() ?? [],
        wrapping: self.bindService(request:context:)
      )

    case "UpdateServiceBinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgUpdateServiceBinding>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgUpdateServiceBindingResponse>(),
        interceptors: self.interceptors?.makeUpdateServiceBindingInterceptors() ?? [],
        wrapping: self.updateServiceBinding(request:context:)
      )

    case "SetWithdrawAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgSetWithdrawAddress>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgSetWithdrawAddressResponse>(),
        interceptors: self.interceptors?.makeSetWithdrawAddressInterceptors() ?? [],
        wrapping: self.setWithdrawAddress(request:context:)
      )

    case "EnableServiceBinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgEnableServiceBinding>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgEnableServiceBindingResponse>(),
        interceptors: self.interceptors?.makeEnableServiceBindingInterceptors() ?? [],
        wrapping: self.enableServiceBinding(request:context:)
      )

    case "DisableServiceBinding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgDisableServiceBinding>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgDisableServiceBindingResponse>(),
        interceptors: self.interceptors?.makeDisableServiceBindingInterceptors() ?? [],
        wrapping: self.disableServiceBinding(request:context:)
      )

    case "RefundServiceDeposit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgRefundServiceDeposit>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgRefundServiceDepositResponse>(),
        interceptors: self.interceptors?.makeRefundServiceDepositInterceptors() ?? [],
        wrapping: self.refundServiceDeposit(request:context:)
      )

    case "CallService":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgCallService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgCallServiceResponse>(),
        interceptors: self.interceptors?.makeCallServiceInterceptors() ?? [],
        wrapping: self.callService(request:context:)
      )

    case "RespondService":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgRespondService>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgRespondServiceResponse>(),
        interceptors: self.interceptors?.makeRespondServiceInterceptors() ?? [],
        wrapping: self.respondService(request:context:)
      )

    case "PauseRequestContext":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgPauseRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgPauseRequestContextResponse>(),
        interceptors: self.interceptors?.makePauseRequestContextInterceptors() ?? [],
        wrapping: self.pauseRequestContext(request:context:)
      )

    case "StartRequestContext":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgStartRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgStartRequestContextResponse>(),
        interceptors: self.interceptors?.makeStartRequestContextInterceptors() ?? [],
        wrapping: self.startRequestContext(request:context:)
      )

    case "KillRequestContext":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgKillRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgKillRequestContextResponse>(),
        interceptors: self.interceptors?.makeKillRequestContextInterceptors() ?? [],
        wrapping: self.killRequestContext(request:context:)
      )

    case "UpdateRequestContext":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgUpdateRequestContext>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgUpdateRequestContextResponse>(),
        interceptors: self.interceptors?.makeUpdateRequestContextInterceptors() ?? [],
        wrapping: self.updateRequestContext(request:context:)
      )

    case "WithdrawEarnedFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_MsgWithdrawEarnedFees>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_MsgWithdrawEarnedFeesResponse>(),
        interceptors: self.interceptors?.makeWithdrawEarnedFeesInterceptors() ?? [],
        wrapping: self.withdrawEarnedFees(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Irismod_Service_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'defineService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDefineServiceInterceptors() -> [ServerInterceptor<Irismod_Service_MsgDefineService, Irismod_Service_MsgDefineServiceResponse>]

  /// - Returns: Interceptors to use when handling 'bindService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBindServiceInterceptors() -> [ServerInterceptor<Irismod_Service_MsgBindService, Irismod_Service_MsgBindServiceResponse>]

  /// - Returns: Interceptors to use when handling 'updateServiceBinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateServiceBindingInterceptors() -> [ServerInterceptor<Irismod_Service_MsgUpdateServiceBinding, Irismod_Service_MsgUpdateServiceBindingResponse>]

  /// - Returns: Interceptors to use when handling 'setWithdrawAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetWithdrawAddressInterceptors() -> [ServerInterceptor<Irismod_Service_MsgSetWithdrawAddress, Irismod_Service_MsgSetWithdrawAddressResponse>]

  /// - Returns: Interceptors to use when handling 'enableServiceBinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableServiceBindingInterceptors() -> [ServerInterceptor<Irismod_Service_MsgEnableServiceBinding, Irismod_Service_MsgEnableServiceBindingResponse>]

  /// - Returns: Interceptors to use when handling 'disableServiceBinding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisableServiceBindingInterceptors() -> [ServerInterceptor<Irismod_Service_MsgDisableServiceBinding, Irismod_Service_MsgDisableServiceBindingResponse>]

  /// - Returns: Interceptors to use when handling 'refundServiceDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRefundServiceDepositInterceptors() -> [ServerInterceptor<Irismod_Service_MsgRefundServiceDeposit, Irismod_Service_MsgRefundServiceDepositResponse>]

  /// - Returns: Interceptors to use when handling 'callService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCallServiceInterceptors() -> [ServerInterceptor<Irismod_Service_MsgCallService, Irismod_Service_MsgCallServiceResponse>]

  /// - Returns: Interceptors to use when handling 'respondService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRespondServiceInterceptors() -> [ServerInterceptor<Irismod_Service_MsgRespondService, Irismod_Service_MsgRespondServiceResponse>]

  /// - Returns: Interceptors to use when handling 'pauseRequestContext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseRequestContextInterceptors() -> [ServerInterceptor<Irismod_Service_MsgPauseRequestContext, Irismod_Service_MsgPauseRequestContextResponse>]

  /// - Returns: Interceptors to use when handling 'startRequestContext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartRequestContextInterceptors() -> [ServerInterceptor<Irismod_Service_MsgStartRequestContext, Irismod_Service_MsgStartRequestContextResponse>]

  /// - Returns: Interceptors to use when handling 'killRequestContext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKillRequestContextInterceptors() -> [ServerInterceptor<Irismod_Service_MsgKillRequestContext, Irismod_Service_MsgKillRequestContextResponse>]

  /// - Returns: Interceptors to use when handling 'updateRequestContext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateRequestContextInterceptors() -> [ServerInterceptor<Irismod_Service_MsgUpdateRequestContext, Irismod_Service_MsgUpdateRequestContextResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawEarnedFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawEarnedFeesInterceptors() -> [ServerInterceptor<Irismod_Service_MsgWithdrawEarnedFees, Irismod_Service_MsgWithdrawEarnedFeesResponse>]
}

internal enum Irismod_Service_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "irismod.service.Msg",
    methods: [
      Irismod_Service_MsgServerMetadata.Methods.defineService,
      Irismod_Service_MsgServerMetadata.Methods.bindService,
      Irismod_Service_MsgServerMetadata.Methods.updateServiceBinding,
      Irismod_Service_MsgServerMetadata.Methods.setWithdrawAddress,
      Irismod_Service_MsgServerMetadata.Methods.enableServiceBinding,
      Irismod_Service_MsgServerMetadata.Methods.disableServiceBinding,
      Irismod_Service_MsgServerMetadata.Methods.refundServiceDeposit,
      Irismod_Service_MsgServerMetadata.Methods.callService,
      Irismod_Service_MsgServerMetadata.Methods.respondService,
      Irismod_Service_MsgServerMetadata.Methods.pauseRequestContext,
      Irismod_Service_MsgServerMetadata.Methods.startRequestContext,
      Irismod_Service_MsgServerMetadata.Methods.killRequestContext,
      Irismod_Service_MsgServerMetadata.Methods.updateRequestContext,
      Irismod_Service_MsgServerMetadata.Methods.withdrawEarnedFees,
    ]
  )

  internal enum Methods {
    internal static let defineService = GRPCMethodDescriptor(
      name: "DefineService",
      path: "/irismod.service.Msg/DefineService",
      type: GRPCCallType.unary
    )

    internal static let bindService = GRPCMethodDescriptor(
      name: "BindService",
      path: "/irismod.service.Msg/BindService",
      type: GRPCCallType.unary
    )

    internal static let updateServiceBinding = GRPCMethodDescriptor(
      name: "UpdateServiceBinding",
      path: "/irismod.service.Msg/UpdateServiceBinding",
      type: GRPCCallType.unary
    )

    internal static let setWithdrawAddress = GRPCMethodDescriptor(
      name: "SetWithdrawAddress",
      path: "/irismod.service.Msg/SetWithdrawAddress",
      type: GRPCCallType.unary
    )

    internal static let enableServiceBinding = GRPCMethodDescriptor(
      name: "EnableServiceBinding",
      path: "/irismod.service.Msg/EnableServiceBinding",
      type: GRPCCallType.unary
    )

    internal static let disableServiceBinding = GRPCMethodDescriptor(
      name: "DisableServiceBinding",
      path: "/irismod.service.Msg/DisableServiceBinding",
      type: GRPCCallType.unary
    )

    internal static let refundServiceDeposit = GRPCMethodDescriptor(
      name: "RefundServiceDeposit",
      path: "/irismod.service.Msg/RefundServiceDeposit",
      type: GRPCCallType.unary
    )

    internal static let callService = GRPCMethodDescriptor(
      name: "CallService",
      path: "/irismod.service.Msg/CallService",
      type: GRPCCallType.unary
    )

    internal static let respondService = GRPCMethodDescriptor(
      name: "RespondService",
      path: "/irismod.service.Msg/RespondService",
      type: GRPCCallType.unary
    )

    internal static let pauseRequestContext = GRPCMethodDescriptor(
      name: "PauseRequestContext",
      path: "/irismod.service.Msg/PauseRequestContext",
      type: GRPCCallType.unary
    )

    internal static let startRequestContext = GRPCMethodDescriptor(
      name: "StartRequestContext",
      path: "/irismod.service.Msg/StartRequestContext",
      type: GRPCCallType.unary
    )

    internal static let killRequestContext = GRPCMethodDescriptor(
      name: "KillRequestContext",
      path: "/irismod.service.Msg/KillRequestContext",
      type: GRPCCallType.unary
    )

    internal static let updateRequestContext = GRPCMethodDescriptor(
      name: "UpdateRequestContext",
      path: "/irismod.service.Msg/UpdateRequestContext",
      type: GRPCCallType.unary
    )

    internal static let withdrawEarnedFees = GRPCMethodDescriptor(
      name: "WithdrawEarnedFees",
      path: "/irismod.service.Msg/WithdrawEarnedFees",
      type: GRPCCallType.unary
    )
  }
}
