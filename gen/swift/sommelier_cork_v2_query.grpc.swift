//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sommelier/cork/v2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC query service for the cork module.
///
/// Usage: instantiate `Cork_V2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cork_V2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? { get }

  func queryParams(
    _ request: Cork_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryParamsRequest, Cork_V2_QueryParamsResponse>

  func queryCellarIDs(
    _ request: Cork_V2_QueryCellarIDsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryCellarIDsRequest, Cork_V2_QueryCellarIDsResponse>

  func queryScheduledCorks(
    _ request: Cork_V2_QueryScheduledCorksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryScheduledCorksRequest, Cork_V2_QueryScheduledCorksResponse>

  func queryScheduledBlockHeights(
    _ request: Cork_V2_QueryScheduledBlockHeightsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryScheduledBlockHeightsRequest, Cork_V2_QueryScheduledBlockHeightsResponse>

  func queryScheduledCorksByBlockHeight(
    _ request: Cork_V2_QueryScheduledCorksByBlockHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryScheduledCorksByBlockHeightRequest, Cork_V2_QueryScheduledCorksByBlockHeightResponse>

  func queryScheduledCorksByID(
    _ request: Cork_V2_QueryScheduledCorksByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryScheduledCorksByIDRequest, Cork_V2_QueryScheduledCorksByIDResponse>

  func queryCorkResult(
    _ request: Cork_V2_QueryCorkResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryCorkResultRequest, Cork_V2_QueryCorkResultResponse>

  func queryCorkResults(
    _ request: Cork_V2_QueryCorkResultsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cork_V2_QueryCorkResultsRequest, Cork_V2_QueryCorkResultsResponse>
}

extension Cork_V2_QueryClientProtocol {
  internal var serviceName: String {
    return "cork.v2.Query"
  }

  /// QueryParams queries the allocation module parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Cork_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryParamsRequest, Cork_V2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  /// QueryCellarIDs returns all cellars and current tick ranges
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryCellarIDs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryCellarIDs(
    _ request: Cork_V2_QueryCellarIDsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryCellarIDsRequest, Cork_V2_QueryCellarIDsResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCellarIDs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCellarIDsInterceptors() ?? []
    )
  }

  /// QueryScheduledCorks returns all scheduled corks
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryScheduledCorks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryScheduledCorks(
    _ request: Cork_V2_QueryScheduledCorksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryScheduledCorksRequest, Cork_V2_QueryScheduledCorksResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksInterceptors() ?? []
    )
  }

  /// QueryScheduledBlockHeights returns all scheduled block heights
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryScheduledBlockHeights.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryScheduledBlockHeights(
    _ request: Cork_V2_QueryScheduledBlockHeightsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryScheduledBlockHeightsRequest, Cork_V2_QueryScheduledBlockHeightsResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledBlockHeights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledBlockHeightsInterceptors() ?? []
    )
  }

  /// QueryScheduledCorks returns all scheduled corks at a block height
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryScheduledCorksByBlockHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryScheduledCorksByBlockHeight(
    _ request: Cork_V2_QueryScheduledCorksByBlockHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryScheduledCorksByBlockHeightRequest, Cork_V2_QueryScheduledCorksByBlockHeightResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByBlockHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksByBlockHeightInterceptors() ?? []
    )
  }

  /// QueryScheduledCorks returns all scheduled corks with the specified ID
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryScheduledCorksByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryScheduledCorksByID(
    _ request: Cork_V2_QueryScheduledCorksByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryScheduledCorksByIDRequest, Cork_V2_QueryScheduledCorksByIDResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksByIDInterceptors() ?? []
    )
  }

  /// Unary call to QueryCorkResult
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryCorkResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryCorkResult(
    _ request: Cork_V2_QueryCorkResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryCorkResultRequest, Cork_V2_QueryCorkResultResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCorkResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCorkResultInterceptors() ?? []
    )
  }

  /// Unary call to QueryCorkResults
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryCorkResults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryCorkResults(
    _ request: Cork_V2_QueryCorkResultsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cork_V2_QueryCorkResultsRequest, Cork_V2_QueryCorkResultsResponse> {
    return self.makeUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCorkResults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCorkResultsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cork_V2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cork_V2_QueryNIOClient")
internal final class Cork_V2_QueryClient: Cork_V2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cork.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cork_V2_QueryNIOClient: Cork_V2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cork.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC query service for the cork module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cork_V2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? { get }

  func makeQueryParamsCall(
    _ request: Cork_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryParamsRequest, Cork_V2_QueryParamsResponse>

  func makeQueryCellarIdsCall(
    _ request: Cork_V2_QueryCellarIDsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryCellarIDsRequest, Cork_V2_QueryCellarIDsResponse>

  func makeQueryScheduledCorksCall(
    _ request: Cork_V2_QueryScheduledCorksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledCorksRequest, Cork_V2_QueryScheduledCorksResponse>

  func makeQueryScheduledBlockHeightsCall(
    _ request: Cork_V2_QueryScheduledBlockHeightsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledBlockHeightsRequest, Cork_V2_QueryScheduledBlockHeightsResponse>

  func makeQueryScheduledCorksByBlockHeightCall(
    _ request: Cork_V2_QueryScheduledCorksByBlockHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledCorksByBlockHeightRequest, Cork_V2_QueryScheduledCorksByBlockHeightResponse>

  func makeQueryScheduledCorksByIDCall(
    _ request: Cork_V2_QueryScheduledCorksByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledCorksByIDRequest, Cork_V2_QueryScheduledCorksByIDResponse>

  func makeQueryCorkResultCall(
    _ request: Cork_V2_QueryCorkResultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryCorkResultRequest, Cork_V2_QueryCorkResultResponse>

  func makeQueryCorkResultsCall(
    _ request: Cork_V2_QueryCorkResultsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryCorkResultsRequest, Cork_V2_QueryCorkResultsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cork_V2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cork_V2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQueryParamsCall(
    _ request: Cork_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryParamsRequest, Cork_V2_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  internal func makeQueryCellarIdsCall(
    _ request: Cork_V2_QueryCellarIDsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryCellarIDsRequest, Cork_V2_QueryCellarIDsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCellarIDs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCellarIDsInterceptors() ?? []
    )
  }

  internal func makeQueryScheduledCorksCall(
    _ request: Cork_V2_QueryScheduledCorksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledCorksRequest, Cork_V2_QueryScheduledCorksResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksInterceptors() ?? []
    )
  }

  internal func makeQueryScheduledBlockHeightsCall(
    _ request: Cork_V2_QueryScheduledBlockHeightsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledBlockHeightsRequest, Cork_V2_QueryScheduledBlockHeightsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledBlockHeights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledBlockHeightsInterceptors() ?? []
    )
  }

  internal func makeQueryScheduledCorksByBlockHeightCall(
    _ request: Cork_V2_QueryScheduledCorksByBlockHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledCorksByBlockHeightRequest, Cork_V2_QueryScheduledCorksByBlockHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByBlockHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksByBlockHeightInterceptors() ?? []
    )
  }

  internal func makeQueryScheduledCorksByIDCall(
    _ request: Cork_V2_QueryScheduledCorksByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryScheduledCorksByIDRequest, Cork_V2_QueryScheduledCorksByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksByIDInterceptors() ?? []
    )
  }

  internal func makeQueryCorkResultCall(
    _ request: Cork_V2_QueryCorkResultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryCorkResultRequest, Cork_V2_QueryCorkResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCorkResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCorkResultInterceptors() ?? []
    )
  }

  internal func makeQueryCorkResultsCall(
    _ request: Cork_V2_QueryCorkResultsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cork_V2_QueryCorkResultsRequest, Cork_V2_QueryCorkResultsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCorkResults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCorkResultsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cork_V2_QueryAsyncClientProtocol {
  internal func queryParams(
    _ request: Cork_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }

  internal func queryCellarIDs(
    _ request: Cork_V2_QueryCellarIDsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryCellarIDsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCellarIDs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCellarIDsInterceptors() ?? []
    )
  }

  internal func queryScheduledCorks(
    _ request: Cork_V2_QueryScheduledCorksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryScheduledCorksResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksInterceptors() ?? []
    )
  }

  internal func queryScheduledBlockHeights(
    _ request: Cork_V2_QueryScheduledBlockHeightsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryScheduledBlockHeightsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledBlockHeights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledBlockHeightsInterceptors() ?? []
    )
  }

  internal func queryScheduledCorksByBlockHeight(
    _ request: Cork_V2_QueryScheduledCorksByBlockHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryScheduledCorksByBlockHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByBlockHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksByBlockHeightInterceptors() ?? []
    )
  }

  internal func queryScheduledCorksByID(
    _ request: Cork_V2_QueryScheduledCorksByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryScheduledCorksByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryScheduledCorksByIDInterceptors() ?? []
    )
  }

  internal func queryCorkResult(
    _ request: Cork_V2_QueryCorkResultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryCorkResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCorkResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCorkResultInterceptors() ?? []
    )
  }

  internal func queryCorkResults(
    _ request: Cork_V2_QueryCorkResultsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cork_V2_QueryCorkResultsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cork_V2_QueryClientMetadata.Methods.queryCorkResults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryCorkResultsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cork_V2_QueryAsyncClient: Cork_V2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cork_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cork_V2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Cork_V2_QueryParamsRequest, Cork_V2_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryCellarIDs'.
  func makeQueryCellarIDsInterceptors() -> [ClientInterceptor<Cork_V2_QueryCellarIDsRequest, Cork_V2_QueryCellarIDsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryScheduledCorks'.
  func makeQueryScheduledCorksInterceptors() -> [ClientInterceptor<Cork_V2_QueryScheduledCorksRequest, Cork_V2_QueryScheduledCorksResponse>]

  /// - Returns: Interceptors to use when invoking 'queryScheduledBlockHeights'.
  func makeQueryScheduledBlockHeightsInterceptors() -> [ClientInterceptor<Cork_V2_QueryScheduledBlockHeightsRequest, Cork_V2_QueryScheduledBlockHeightsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryScheduledCorksByBlockHeight'.
  func makeQueryScheduledCorksByBlockHeightInterceptors() -> [ClientInterceptor<Cork_V2_QueryScheduledCorksByBlockHeightRequest, Cork_V2_QueryScheduledCorksByBlockHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'queryScheduledCorksByID'.
  func makeQueryScheduledCorksByIDInterceptors() -> [ClientInterceptor<Cork_V2_QueryScheduledCorksByIDRequest, Cork_V2_QueryScheduledCorksByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'queryCorkResult'.
  func makeQueryCorkResultInterceptors() -> [ClientInterceptor<Cork_V2_QueryCorkResultRequest, Cork_V2_QueryCorkResultResponse>]

  /// - Returns: Interceptors to use when invoking 'queryCorkResults'.
  func makeQueryCorkResultsInterceptors() -> [ClientInterceptor<Cork_V2_QueryCorkResultsRequest, Cork_V2_QueryCorkResultsResponse>]
}

internal enum Cork_V2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cork.v2.Query",
    methods: [
      Cork_V2_QueryClientMetadata.Methods.queryParams,
      Cork_V2_QueryClientMetadata.Methods.queryCellarIDs,
      Cork_V2_QueryClientMetadata.Methods.queryScheduledCorks,
      Cork_V2_QueryClientMetadata.Methods.queryScheduledBlockHeights,
      Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByBlockHeight,
      Cork_V2_QueryClientMetadata.Methods.queryScheduledCorksByID,
      Cork_V2_QueryClientMetadata.Methods.queryCorkResult,
      Cork_V2_QueryClientMetadata.Methods.queryCorkResults,
    ]
  )

  internal enum Methods {
    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/cork.v2.Query/QueryParams",
      type: GRPCCallType.unary
    )

    internal static let queryCellarIDs = GRPCMethodDescriptor(
      name: "QueryCellarIDs",
      path: "/cork.v2.Query/QueryCellarIDs",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledCorks = GRPCMethodDescriptor(
      name: "QueryScheduledCorks",
      path: "/cork.v2.Query/QueryScheduledCorks",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledBlockHeights = GRPCMethodDescriptor(
      name: "QueryScheduledBlockHeights",
      path: "/cork.v2.Query/QueryScheduledBlockHeights",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledCorksByBlockHeight = GRPCMethodDescriptor(
      name: "QueryScheduledCorksByBlockHeight",
      path: "/cork.v2.Query/QueryScheduledCorksByBlockHeight",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledCorksByID = GRPCMethodDescriptor(
      name: "QueryScheduledCorksByID",
      path: "/cork.v2.Query/QueryScheduledCorksByID",
      type: GRPCCallType.unary
    )

    internal static let queryCorkResult = GRPCMethodDescriptor(
      name: "QueryCorkResult",
      path: "/cork.v2.Query/QueryCorkResult",
      type: GRPCCallType.unary
    )

    internal static let queryCorkResults = GRPCMethodDescriptor(
      name: "QueryCorkResults",
      path: "/cork.v2.Query/QueryCorkResults",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC query service for the cork module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cork_V2_QueryProvider: CallHandlerProvider {
  var interceptors: Cork_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// QueryParams queries the allocation module parameters.
  func queryParams(request: Cork_V2_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryParamsResponse>

  /// QueryCellarIDs returns all cellars and current tick ranges
  func queryCellarIDs(request: Cork_V2_QueryCellarIDsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryCellarIDsResponse>

  /// QueryScheduledCorks returns all scheduled corks
  func queryScheduledCorks(request: Cork_V2_QueryScheduledCorksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryScheduledCorksResponse>

  /// QueryScheduledBlockHeights returns all scheduled block heights
  func queryScheduledBlockHeights(request: Cork_V2_QueryScheduledBlockHeightsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryScheduledBlockHeightsResponse>

  /// QueryScheduledCorks returns all scheduled corks at a block height
  func queryScheduledCorksByBlockHeight(request: Cork_V2_QueryScheduledCorksByBlockHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryScheduledCorksByBlockHeightResponse>

  /// QueryScheduledCorks returns all scheduled corks with the specified ID
  func queryScheduledCorksByID(request: Cork_V2_QueryScheduledCorksByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryScheduledCorksByIDResponse>

  func queryCorkResult(request: Cork_V2_QueryCorkResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryCorkResultResponse>

  func queryCorkResults(request: Cork_V2_QueryCorkResultsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cork_V2_QueryCorkResultsResponse>
}

extension Cork_V2_QueryProvider {
  internal var serviceName: Substring {
    return Cork_V2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    case "QueryCellarIDs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryCellarIDsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryCellarIDsResponse>(),
        interceptors: self.interceptors?.makeQueryCellarIDsInterceptors() ?? [],
        userFunction: self.queryCellarIDs(request:context:)
      )

    case "QueryScheduledCorks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledCorksRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledCorksResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledCorksInterceptors() ?? [],
        userFunction: self.queryScheduledCorks(request:context:)
      )

    case "QueryScheduledBlockHeights":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledBlockHeightsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledBlockHeightsResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledBlockHeightsInterceptors() ?? [],
        userFunction: self.queryScheduledBlockHeights(request:context:)
      )

    case "QueryScheduledCorksByBlockHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledCorksByBlockHeightRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledCorksByBlockHeightResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledCorksByBlockHeightInterceptors() ?? [],
        userFunction: self.queryScheduledCorksByBlockHeight(request:context:)
      )

    case "QueryScheduledCorksByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledCorksByIDRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledCorksByIDResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledCorksByIDInterceptors() ?? [],
        userFunction: self.queryScheduledCorksByID(request:context:)
      )

    case "QueryCorkResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryCorkResultRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryCorkResultResponse>(),
        interceptors: self.interceptors?.makeQueryCorkResultInterceptors() ?? [],
        userFunction: self.queryCorkResult(request:context:)
      )

    case "QueryCorkResults":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryCorkResultsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryCorkResultsResponse>(),
        interceptors: self.interceptors?.makeQueryCorkResultsInterceptors() ?? [],
        userFunction: self.queryCorkResults(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC query service for the cork module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cork_V2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cork_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// QueryParams queries the allocation module parameters.
  @Sendable func queryParams(
    request: Cork_V2_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryParamsResponse

  /// QueryCellarIDs returns all cellars and current tick ranges
  @Sendable func queryCellarIDs(
    request: Cork_V2_QueryCellarIDsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryCellarIDsResponse

  /// QueryScheduledCorks returns all scheduled corks
  @Sendable func queryScheduledCorks(
    request: Cork_V2_QueryScheduledCorksRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryScheduledCorksResponse

  /// QueryScheduledBlockHeights returns all scheduled block heights
  @Sendable func queryScheduledBlockHeights(
    request: Cork_V2_QueryScheduledBlockHeightsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryScheduledBlockHeightsResponse

  /// QueryScheduledCorks returns all scheduled corks at a block height
  @Sendable func queryScheduledCorksByBlockHeight(
    request: Cork_V2_QueryScheduledCorksByBlockHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryScheduledCorksByBlockHeightResponse

  /// QueryScheduledCorks returns all scheduled corks with the specified ID
  @Sendable func queryScheduledCorksByID(
    request: Cork_V2_QueryScheduledCorksByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryScheduledCorksByIDResponse

  @Sendable func queryCorkResult(
    request: Cork_V2_QueryCorkResultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryCorkResultResponse

  @Sendable func queryCorkResults(
    request: Cork_V2_QueryCorkResultsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cork_V2_QueryCorkResultsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cork_V2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cork_V2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cork_V2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cork_V2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        wrapping: self.queryParams(request:context:)
      )

    case "QueryCellarIDs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryCellarIDsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryCellarIDsResponse>(),
        interceptors: self.interceptors?.makeQueryCellarIDsInterceptors() ?? [],
        wrapping: self.queryCellarIDs(request:context:)
      )

    case "QueryScheduledCorks":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledCorksRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledCorksResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledCorksInterceptors() ?? [],
        wrapping: self.queryScheduledCorks(request:context:)
      )

    case "QueryScheduledBlockHeights":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledBlockHeightsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledBlockHeightsResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledBlockHeightsInterceptors() ?? [],
        wrapping: self.queryScheduledBlockHeights(request:context:)
      )

    case "QueryScheduledCorksByBlockHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledCorksByBlockHeightRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledCorksByBlockHeightResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledCorksByBlockHeightInterceptors() ?? [],
        wrapping: self.queryScheduledCorksByBlockHeight(request:context:)
      )

    case "QueryScheduledCorksByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryScheduledCorksByIDRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryScheduledCorksByIDResponse>(),
        interceptors: self.interceptors?.makeQueryScheduledCorksByIDInterceptors() ?? [],
        wrapping: self.queryScheduledCorksByID(request:context:)
      )

    case "QueryCorkResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryCorkResultRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryCorkResultResponse>(),
        interceptors: self.interceptors?.makeQueryCorkResultInterceptors() ?? [],
        wrapping: self.queryCorkResult(request:context:)
      )

    case "QueryCorkResults":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cork_V2_QueryCorkResultsRequest>(),
        responseSerializer: ProtobufSerializer<Cork_V2_QueryCorkResultsResponse>(),
        interceptors: self.interceptors?.makeQueryCorkResultsInterceptors() ?? [],
        wrapping: self.queryCorkResults(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cork_V2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Cork_V2_QueryParamsRequest, Cork_V2_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryCellarIDs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryCellarIDsInterceptors() -> [ServerInterceptor<Cork_V2_QueryCellarIDsRequest, Cork_V2_QueryCellarIDsResponse>]

  /// - Returns: Interceptors to use when handling 'queryScheduledCorks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryScheduledCorksInterceptors() -> [ServerInterceptor<Cork_V2_QueryScheduledCorksRequest, Cork_V2_QueryScheduledCorksResponse>]

  /// - Returns: Interceptors to use when handling 'queryScheduledBlockHeights'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryScheduledBlockHeightsInterceptors() -> [ServerInterceptor<Cork_V2_QueryScheduledBlockHeightsRequest, Cork_V2_QueryScheduledBlockHeightsResponse>]

  /// - Returns: Interceptors to use when handling 'queryScheduledCorksByBlockHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryScheduledCorksByBlockHeightInterceptors() -> [ServerInterceptor<Cork_V2_QueryScheduledCorksByBlockHeightRequest, Cork_V2_QueryScheduledCorksByBlockHeightResponse>]

  /// - Returns: Interceptors to use when handling 'queryScheduledCorksByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryScheduledCorksByIDInterceptors() -> [ServerInterceptor<Cork_V2_QueryScheduledCorksByIDRequest, Cork_V2_QueryScheduledCorksByIDResponse>]

  /// - Returns: Interceptors to use when handling 'queryCorkResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryCorkResultInterceptors() -> [ServerInterceptor<Cork_V2_QueryCorkResultRequest, Cork_V2_QueryCorkResultResponse>]

  /// - Returns: Interceptors to use when handling 'queryCorkResults'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryCorkResultsInterceptors() -> [ServerInterceptor<Cork_V2_QueryCorkResultsRequest, Cork_V2_QueryCorkResultsResponse>]
}

internal enum Cork_V2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cork.v2.Query",
    methods: [
      Cork_V2_QueryServerMetadata.Methods.queryParams,
      Cork_V2_QueryServerMetadata.Methods.queryCellarIDs,
      Cork_V2_QueryServerMetadata.Methods.queryScheduledCorks,
      Cork_V2_QueryServerMetadata.Methods.queryScheduledBlockHeights,
      Cork_V2_QueryServerMetadata.Methods.queryScheduledCorksByBlockHeight,
      Cork_V2_QueryServerMetadata.Methods.queryScheduledCorksByID,
      Cork_V2_QueryServerMetadata.Methods.queryCorkResult,
      Cork_V2_QueryServerMetadata.Methods.queryCorkResults,
    ]
  )

  internal enum Methods {
    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/cork.v2.Query/QueryParams",
      type: GRPCCallType.unary
    )

    internal static let queryCellarIDs = GRPCMethodDescriptor(
      name: "QueryCellarIDs",
      path: "/cork.v2.Query/QueryCellarIDs",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledCorks = GRPCMethodDescriptor(
      name: "QueryScheduledCorks",
      path: "/cork.v2.Query/QueryScheduledCorks",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledBlockHeights = GRPCMethodDescriptor(
      name: "QueryScheduledBlockHeights",
      path: "/cork.v2.Query/QueryScheduledBlockHeights",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledCorksByBlockHeight = GRPCMethodDescriptor(
      name: "QueryScheduledCorksByBlockHeight",
      path: "/cork.v2.Query/QueryScheduledCorksByBlockHeight",
      type: GRPCCallType.unary
    )

    internal static let queryScheduledCorksByID = GRPCMethodDescriptor(
      name: "QueryScheduledCorksByID",
      path: "/cork.v2.Query/QueryScheduledCorksByID",
      type: GRPCCallType.unary
    )

    internal static let queryCorkResult = GRPCMethodDescriptor(
      name: "QueryCorkResult",
      path: "/cork.v2.Query/QueryCorkResult",
      type: GRPCCallType.unary
    )

    internal static let queryCorkResults = GRPCMethodDescriptor(
      name: "QueryCorkResults",
      path: "/cork.v2.Query/QueryCorkResults",
      type: GRPCCallType.unary
    )
  }
}
