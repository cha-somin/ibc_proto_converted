// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dymension/sequencer/sequencer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Sequencer defines a sequencer identified by its' address (sequencerAddress).
/// The sequencer could be attached to only one rollapp (rollappId).
struct Dymensionxyz_Dymension_Sequencer_Sequencer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sequencerAddress is the bech32-encoded address of the sequencer account which is the account that the message was sent from.
  var sequencerAddress: String = String()

  /// pubkey is the public key of the sequencers' dymint client, as a Protobuf Any.
  var dymintPubKey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _dymintPubKey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_dymintPubKey = newValue}
  }
  /// Returns true if `dymintPubKey` has been explicitly set.
  var hasDymintPubKey: Bool {return self._dymintPubKey != nil}
  /// Clears the value of `dymintPubKey`. Subsequent reads from it will return its default value.
  mutating func clearDymintPubKey() {self._dymintPubKey = nil}

  /// rollappId defines the rollapp to which the sequencer belongs.
  var rollappIds: [String] = []

  /// description defines the descriptive terms for the sequencer.
  var description_p: Dymensionxyz_Dymension_Sequencer_Description {
    get {return _description_p ?? Dymensionxyz_Dymension_Sequencer_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dymintPubKey: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _description_p: Dymensionxyz_Dymension_Sequencer_Description? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dymensionxyz_Dymension_Sequencer_Sequencer: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dymensionxyz.dymension.sequencer"

extension Dymensionxyz_Dymension_Sequencer_Sequencer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Sequencer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequencerAddress"),
    2: .same(proto: "dymintPubKey"),
    3: .same(proto: "rollappIDs"),
    4: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sequencerAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dymintPubKey) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.rollappIds) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sequencerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.sequencerAddress, fieldNumber: 1)
    }
    try { if let v = self._dymintPubKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.rollappIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rollappIds, fieldNumber: 3)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Sequencer_Sequencer, rhs: Dymensionxyz_Dymension_Sequencer_Sequencer) -> Bool {
    if lhs.sequencerAddress != rhs.sequencerAddress {return false}
    if lhs._dymintPubKey != rhs._dymintPubKey {return false}
    if lhs.rollappIds != rhs.rollappIds {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
