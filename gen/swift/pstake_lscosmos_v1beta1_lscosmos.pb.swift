// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pstake/lscosmos/v1beta1/lscosmos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pstake_Lscosmos_V1beta1_AllowListedValidators {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allowListedValidators: [Pstake_Lscosmos_V1beta1_AllowListedValidator] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_AllowListedValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// validator_address defines the bech32-encoded address the allowlisted
  /// validator
  var validatorAddress: String = String()

  /// target_weight specifies the target weight for liquid staking, unstaking
  /// amount, which is a value for calculating the real weight to be derived
  /// according to the active status
  var targetWeight: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_PstakeParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// protocol fee in percentage
  var pstakeDepositFee: String = String()

  /// protocol fee in percentage
  var pstakeRestakeFee: String = String()

  /// protocol fee in percentage
  var pstakeUnstakeFee: String = String()

  /// protocol fee in percentage
  var pstakeRedemptionFee: String = String()

  var pstakeFeeAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// HostChainParams go into the DB
struct Pstake_Lscosmos_V1beta1_HostChainParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var connectionID: String = String()

  var transferChannel: String = String()

  var transferPort: String = String()

  var baseDenom: String = String()

  var mintDenom: String = String()

  var minDeposit: String = String()

  var pstakeParams: Pstake_Lscosmos_V1beta1_PstakeParams {
    get {return _pstakeParams ?? Pstake_Lscosmos_V1beta1_PstakeParams()}
    set {_pstakeParams = newValue}
  }
  /// Returns true if `pstakeParams` has been explicitly set.
  var hasPstakeParams: Bool {return self._pstakeParams != nil}
  /// Clears the value of `pstakeParams`. Subsequent reads from it will return its default value.
  mutating func clearPstakeParams() {self._pstakeParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pstakeParams: Pstake_Lscosmos_V1beta1_PstakeParams? = nil
}

/// DelegationState stores module account balance, ica account balance,
/// delegation state, undelegation state
struct Pstake_Lscosmos_V1beta1_DelegationState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This field is necessary as the address of not blocked for send coins,
  /// we only should care about funds that have come via proper channels.
  var hostDelegationAccountBalance: [Cosmos_Base_V1beta1_Coin] = []

  var hostChainDelegationAddress: String = String()

  var hostAccountDelegations: [Pstake_Lscosmos_V1beta1_HostAccountDelegation] = []

  var hostAccountUndelegations: [Pstake_Lscosmos_V1beta1_HostAccountUndelegation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_HostAccountDelegation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_HostAccountUndelegation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epochNumber: Int64 = 0

  var totalUndelegationAmount: Cosmos_Base_V1beta1_Coin {
    get {return _totalUndelegationAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalUndelegationAmount = newValue}
  }
  /// Returns true if `totalUndelegationAmount` has been explicitly set.
  var hasTotalUndelegationAmount: Bool {return self._totalUndelegationAmount != nil}
  /// Clears the value of `totalUndelegationAmount`. Subsequent reads from it will return its default value.
  mutating func clearTotalUndelegationAmount() {self._totalUndelegationAmount = nil}

  var completionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return self._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {self._completionTime = nil}

  var undelegationEntries: [Pstake_Lscosmos_V1beta1_UndelegationEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalUndelegationAmount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _completionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Pstake_Lscosmos_V1beta1_UndelegationEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_HostChainRewardAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_IBCAmountTransientStore {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ibc_transfer stores only tokens which have ibc denoms "ibc/HEXHASH"
  var iBCTransfer: [Cosmos_Base_V1beta1_Coin] = []

  /// ica_delegate stores only token which has staking baseDenom
  var iCADelegate: Cosmos_Base_V1beta1_Coin {
    get {return _iCADelegate ?? Cosmos_Base_V1beta1_Coin()}
    set {_iCADelegate = newValue}
  }
  /// Returns true if `iCADelegate` has been explicitly set.
  var hasICADelegate: Bool {return self._iCADelegate != nil}
  /// Clears the value of `iCADelegate`. Subsequent reads from it will return its default value.
  mutating func clearICADelegate() {self._iCADelegate = nil}

  var undelegatonCompleteIBCTransfer: [Pstake_Lscosmos_V1beta1_TransientUndelegationTransfer] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _iCADelegate: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_TransientUndelegationTransfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epochNumber: Int64 = 0

  var amountUnbonded: Cosmos_Base_V1beta1_Coin {
    get {return _amountUnbonded ?? Cosmos_Base_V1beta1_Coin()}
    set {_amountUnbonded = newValue}
  }
  /// Returns true if `amountUnbonded` has been explicitly set.
  var hasAmountUnbonded: Bool {return self._amountUnbonded != nil}
  /// Clears the value of `amountUnbonded`. Subsequent reads from it will return its default value.
  mutating func clearAmountUnbonded() {self._amountUnbonded = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amountUnbonded: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_UnbondingEpochCValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epochNumber: Int64 = 0

  /// c_value = stk_burn.Amount/amount_unbonded.Amount
  var sTKBurn: Cosmos_Base_V1beta1_Coin {
    get {return _sTKBurn ?? Cosmos_Base_V1beta1_Coin()}
    set {_sTKBurn = newValue}
  }
  /// Returns true if `sTKBurn` has been explicitly set.
  var hasSTKBurn: Bool {return self._sTKBurn != nil}
  /// Clears the value of `sTKBurn`. Subsequent reads from it will return its default value.
  mutating func clearSTKBurn() {self._sTKBurn = nil}

  var amountUnbonded: Cosmos_Base_V1beta1_Coin {
    get {return _amountUnbonded ?? Cosmos_Base_V1beta1_Coin()}
    set {_amountUnbonded = newValue}
  }
  /// Returns true if `amountUnbonded` has been explicitly set.
  var hasAmountUnbonded: Bool {return self._amountUnbonded != nil}
  /// Clears the value of `amountUnbonded`. Subsequent reads from it will return its default value.
  mutating func clearAmountUnbonded() {self._amountUnbonded = nil}

  var isMatured: Bool = false

  var isFailed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sTKBurn: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _amountUnbonded: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_DelegatorUnbondingEpochEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var epochNumber: Int64 = 0

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_HostAccounts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAccountOwnerID: String = String()

  var rewardsAccountOwnerID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pstake_Lscosmos_V1beta1_AllowListedValidators: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_AllowListedValidator: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_PstakeParams: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_HostChainParams: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_DelegationState: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_HostAccountDelegation: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_HostAccountUndelegation: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_UndelegationEntry: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_HostChainRewardAddress: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_IBCAmountTransientStore: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_TransientUndelegationTransfer: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_UnbondingEpochCValue: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_DelegatorUnbondingEpochEntry: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_HostAccounts: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pstake.lscosmos.v1beta1"

extension Pstake_Lscosmos_V1beta1_AllowListedValidators: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllowListedValidators"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allow_listed_validators"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.allowListedValidators) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.allowListedValidators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.allowListedValidators, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_AllowListedValidators, rhs: Pstake_Lscosmos_V1beta1_AllowListedValidators) -> Bool {
    if lhs.allowListedValidators != rhs.allowListedValidators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_AllowListedValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllowListedValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .standard(proto: "target_weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.targetWeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 1)
    }
    if !self.targetWeight.isEmpty {
      try visitor.visitSingularStringField(value: self.targetWeight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_AllowListedValidator, rhs: Pstake_Lscosmos_V1beta1_AllowListedValidator) -> Bool {
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.targetWeight != rhs.targetWeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_PstakeParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PstakeParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pstake_deposit_fee"),
    2: .standard(proto: "pstake_restake_fee"),
    3: .standard(proto: "pstake_unstake_fee"),
    4: .standard(proto: "pstake_redemption_fee"),
    5: .standard(proto: "pstake_fee_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pstakeDepositFee) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pstakeRestakeFee) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pstakeUnstakeFee) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pstakeRedemptionFee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pstakeFeeAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pstakeDepositFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeDepositFee, fieldNumber: 1)
    }
    if !self.pstakeRestakeFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeRestakeFee, fieldNumber: 2)
    }
    if !self.pstakeUnstakeFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeUnstakeFee, fieldNumber: 3)
    }
    if !self.pstakeRedemptionFee.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeRedemptionFee, fieldNumber: 4)
    }
    if !self.pstakeFeeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeFeeAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_PstakeParams, rhs: Pstake_Lscosmos_V1beta1_PstakeParams) -> Bool {
    if lhs.pstakeDepositFee != rhs.pstakeDepositFee {return false}
    if lhs.pstakeRestakeFee != rhs.pstakeRestakeFee {return false}
    if lhs.pstakeUnstakeFee != rhs.pstakeUnstakeFee {return false}
    if lhs.pstakeRedemptionFee != rhs.pstakeRedemptionFee {return false}
    if lhs.pstakeFeeAddress != rhs.pstakeFeeAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_HostChainParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostChainParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_i_d"),
    2: .standard(proto: "connection_i_d"),
    3: .standard(proto: "transfer_channel"),
    4: .standard(proto: "transfer_port"),
    5: .standard(proto: "base_denom"),
    6: .standard(proto: "mint_denom"),
    7: .standard(proto: "min_deposit"),
    8: .standard(proto: "pstake_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.transferChannel) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.transferPort) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.baseDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.mintDenom) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.minDeposit) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._pstakeParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 2)
    }
    if !self.transferChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.transferChannel, fieldNumber: 3)
    }
    if !self.transferPort.isEmpty {
      try visitor.visitSingularStringField(value: self.transferPort, fieldNumber: 4)
    }
    if !self.baseDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseDenom, fieldNumber: 5)
    }
    if !self.mintDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.mintDenom, fieldNumber: 6)
    }
    if !self.minDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minDeposit, fieldNumber: 7)
    }
    try { if let v = self._pstakeParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_HostChainParams, rhs: Pstake_Lscosmos_V1beta1_HostChainParams) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.transferChannel != rhs.transferChannel {return false}
    if lhs.transferPort != rhs.transferPort {return false}
    if lhs.baseDenom != rhs.baseDenom {return false}
    if lhs.mintDenom != rhs.mintDenom {return false}
    if lhs.minDeposit != rhs.minDeposit {return false}
    if lhs._pstakeParams != rhs._pstakeParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_DelegationState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegationState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_delegation_account_balance"),
    2: .standard(proto: "host_chain_delegation_address"),
    3: .standard(proto: "host_account_delegations"),
    4: .standard(proto: "host_account_undelegations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.hostDelegationAccountBalance) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hostChainDelegationAddress) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.hostAccountDelegations) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.hostAccountUndelegations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostDelegationAccountBalance.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hostDelegationAccountBalance, fieldNumber: 1)
    }
    if !self.hostChainDelegationAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.hostChainDelegationAddress, fieldNumber: 2)
    }
    if !self.hostAccountDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hostAccountDelegations, fieldNumber: 3)
    }
    if !self.hostAccountUndelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hostAccountUndelegations, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_DelegationState, rhs: Pstake_Lscosmos_V1beta1_DelegationState) -> Bool {
    if lhs.hostDelegationAccountBalance != rhs.hostDelegationAccountBalance {return false}
    if lhs.hostChainDelegationAddress != rhs.hostChainDelegationAddress {return false}
    if lhs.hostAccountDelegations != rhs.hostAccountDelegations {return false}
    if lhs.hostAccountUndelegations != rhs.hostAccountUndelegations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_HostAccountDelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostAccountDelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_HostAccountDelegation, rhs: Pstake_Lscosmos_V1beta1_HostAccountDelegation) -> Bool {
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_HostAccountUndelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostAccountUndelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epoch_number"),
    2: .standard(proto: "total_undelegation_amount"),
    3: .standard(proto: "completion_time"),
    4: .standard(proto: "undelegation_entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.epochNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._totalUndelegationAmount) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._completionTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.undelegationEntries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.epochNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.epochNumber, fieldNumber: 1)
    }
    try { if let v = self._totalUndelegationAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._completionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.undelegationEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undelegationEntries, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_HostAccountUndelegation, rhs: Pstake_Lscosmos_V1beta1_HostAccountUndelegation) -> Bool {
    if lhs.epochNumber != rhs.epochNumber {return false}
    if lhs._totalUndelegationAmount != rhs._totalUndelegationAmount {return false}
    if lhs._completionTime != rhs._completionTime {return false}
    if lhs.undelegationEntries != rhs.undelegationEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_UndelegationEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UndelegationEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_UndelegationEntry, rhs: Pstake_Lscosmos_V1beta1_UndelegationEntry) -> Bool {
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_HostChainRewardAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostChainRewardAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_HostChainRewardAddress, rhs: Pstake_Lscosmos_V1beta1_HostChainRewardAddress) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_IBCAmountTransientStore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IBCAmountTransientStore"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "i_b_c_transfer"),
    2: .standard(proto: "i_c_a_delegate"),
    3: .standard(proto: "undelegaton_complete_i_b_c_transfer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.iBCTransfer) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._iCADelegate) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.undelegatonCompleteIBCTransfer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.iBCTransfer.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.iBCTransfer, fieldNumber: 1)
    }
    try { if let v = self._iCADelegate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.undelegatonCompleteIBCTransfer.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.undelegatonCompleteIBCTransfer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_IBCAmountTransientStore, rhs: Pstake_Lscosmos_V1beta1_IBCAmountTransientStore) -> Bool {
    if lhs.iBCTransfer != rhs.iBCTransfer {return false}
    if lhs._iCADelegate != rhs._iCADelegate {return false}
    if lhs.undelegatonCompleteIBCTransfer != rhs.undelegatonCompleteIBCTransfer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_TransientUndelegationTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransientUndelegationTransfer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epoch_number"),
    2: .standard(proto: "amount_unbonded"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.epochNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amountUnbonded) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.epochNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.epochNumber, fieldNumber: 1)
    }
    try { if let v = self._amountUnbonded {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_TransientUndelegationTransfer, rhs: Pstake_Lscosmos_V1beta1_TransientUndelegationTransfer) -> Bool {
    if lhs.epochNumber != rhs.epochNumber {return false}
    if lhs._amountUnbonded != rhs._amountUnbonded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_UnbondingEpochCValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnbondingEpochCValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epoch_number"),
    2: .standard(proto: "s_t_k_burn"),
    3: .standard(proto: "amount_unbonded"),
    4: .standard(proto: "is_matured"),
    5: .standard(proto: "is_failed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.epochNumber) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sTKBurn) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amountUnbonded) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isMatured) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isFailed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.epochNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.epochNumber, fieldNumber: 1)
    }
    try { if let v = self._sTKBurn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._amountUnbonded {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.isMatured != false {
      try visitor.visitSingularBoolField(value: self.isMatured, fieldNumber: 4)
    }
    if self.isFailed != false {
      try visitor.visitSingularBoolField(value: self.isFailed, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_UnbondingEpochCValue, rhs: Pstake_Lscosmos_V1beta1_UnbondingEpochCValue) -> Bool {
    if lhs.epochNumber != rhs.epochNumber {return false}
    if lhs._sTKBurn != rhs._sTKBurn {return false}
    if lhs._amountUnbonded != rhs._amountUnbonded {return false}
    if lhs.isMatured != rhs.isMatured {return false}
    if lhs.isFailed != rhs.isFailed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_DelegatorUnbondingEpochEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegatorUnbondingEpochEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "epoch_number"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.epochNumber) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if self.epochNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.epochNumber, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_DelegatorUnbondingEpochEntry, rhs: Pstake_Lscosmos_V1beta1_DelegatorUnbondingEpochEntry) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.epochNumber != rhs.epochNumber {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_HostAccounts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostAccounts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_account_owner_i_d"),
    2: .standard(proto: "rewards_account_owner_i_d"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAccountOwnerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rewardsAccountOwnerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAccountOwnerID.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAccountOwnerID, fieldNumber: 1)
    }
    if !self.rewardsAccountOwnerID.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardsAccountOwnerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_HostAccounts, rhs: Pstake_Lscosmos_V1beta1_HostAccounts) -> Bool {
    if lhs.delegatorAccountOwnerID != rhs.delegatorAccountOwnerID {return false}
    if lhs.rewardsAccountOwnerID != rhs.rewardsAccountOwnerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
