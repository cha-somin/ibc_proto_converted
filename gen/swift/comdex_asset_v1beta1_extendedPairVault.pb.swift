// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/asset/v1beta1/extendedPairVault.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Asset_V1beta1_ExtendedPairVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var appID: UInt64 {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var pairID: UInt64 {
    get {return _storage._pairID}
    set {_uniqueStorage()._pairID = newValue}
  }

  var stabilityFee: String {
    get {return _storage._stabilityFee}
    set {_uniqueStorage()._stabilityFee = newValue}
  }

  var closingFee: String {
    get {return _storage._closingFee}
    set {_uniqueStorage()._closingFee = newValue}
  }

  var liquidationPenalty: String {
    get {return _storage._liquidationPenalty}
    set {_uniqueStorage()._liquidationPenalty = newValue}
  }

  var drawDownFee: String {
    get {return _storage._drawDownFee}
    set {_uniqueStorage()._drawDownFee = newValue}
  }

  var isVaultActive: Bool {
    get {return _storage._isVaultActive}
    set {_uniqueStorage()._isVaultActive = newValue}
  }

  var debtCeiling: String {
    get {return _storage._debtCeiling}
    set {_uniqueStorage()._debtCeiling = newValue}
  }

  var debtFloor: String {
    get {return _storage._debtFloor}
    set {_uniqueStorage()._debtFloor = newValue}
  }

  var isStableMintVault: Bool {
    get {return _storage._isStableMintVault}
    set {_uniqueStorage()._isStableMintVault = newValue}
  }

  var minCr: String {
    get {return _storage._minCr}
    set {_uniqueStorage()._minCr = newValue}
  }

  var pairName: String {
    get {return _storage._pairName}
    set {_uniqueStorage()._pairName = newValue}
  }

  var assetOutOraclePrice: Bool {
    get {return _storage._assetOutOraclePrice}
    set {_uniqueStorage()._assetOutOraclePrice = newValue}
  }

  var assetOutPrice: UInt64 {
    get {return _storage._assetOutPrice}
    set {_uniqueStorage()._assetOutPrice = newValue}
  }

  var minUsdValueLeft: UInt64 {
    get {return _storage._minUsdValueLeft}
    set {_uniqueStorage()._minUsdValueLeft = newValue}
  }

  var blockHeight: Int64 {
    get {return _storage._blockHeight}
    set {_uniqueStorage()._blockHeight = newValue}
  }

  var blockTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._blockTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._blockTime = newValue}
  }
  /// Returns true if `blockTime` has been explicitly set.
  var hasBlockTime: Bool {return _storage._blockTime != nil}
  /// Clears the value of `blockTime`. Subsequent reads from it will return its default value.
  mutating func clearBlockTime() {_uniqueStorage()._blockTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Asset_V1beta1_ExtendedPairVault: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.asset.v1beta1"

extension Comdex_Asset_V1beta1_ExtendedPairVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtendedPairVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "pair_id"),
    4: .standard(proto: "stability_fee"),
    5: .standard(proto: "closing_fee"),
    6: .standard(proto: "liquidation_penalty"),
    7: .standard(proto: "draw_down_fee"),
    8: .standard(proto: "is_vault_active"),
    9: .standard(proto: "debt_ceiling"),
    10: .standard(proto: "debt_floor"),
    11: .standard(proto: "is_stable_mint_vault"),
    12: .standard(proto: "min_cr"),
    13: .standard(proto: "pair_name"),
    14: .standard(proto: "asset_out_oracle_price"),
    15: .standard(proto: "asset_out_price"),
    16: .standard(proto: "min_usd_value_left"),
    17: .standard(proto: "block_height"),
    18: .standard(proto: "block_time"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _appID: UInt64 = 0
    var _pairID: UInt64 = 0
    var _stabilityFee: String = String()
    var _closingFee: String = String()
    var _liquidationPenalty: String = String()
    var _drawDownFee: String = String()
    var _isVaultActive: Bool = false
    var _debtCeiling: String = String()
    var _debtFloor: String = String()
    var _isStableMintVault: Bool = false
    var _minCr: String = String()
    var _pairName: String = String()
    var _assetOutOraclePrice: Bool = false
    var _assetOutPrice: UInt64 = 0
    var _minUsdValueLeft: UInt64 = 0
    var _blockHeight: Int64 = 0
    var _blockTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _appID = source._appID
      _pairID = source._pairID
      _stabilityFee = source._stabilityFee
      _closingFee = source._closingFee
      _liquidationPenalty = source._liquidationPenalty
      _drawDownFee = source._drawDownFee
      _isVaultActive = source._isVaultActive
      _debtCeiling = source._debtCeiling
      _debtFloor = source._debtFloor
      _isStableMintVault = source._isStableMintVault
      _minCr = source._minCr
      _pairName = source._pairName
      _assetOutOraclePrice = source._assetOutOraclePrice
      _assetOutPrice = source._assetOutPrice
      _minUsdValueLeft = source._minUsdValueLeft
      _blockHeight = source._blockHeight
      _blockTime = source._blockTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._appID) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._pairID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._stabilityFee) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._closingFee) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._liquidationPenalty) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._drawDownFee) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isVaultActive) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._debtCeiling) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._debtFloor) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isStableMintVault) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._minCr) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._pairName) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._assetOutOraclePrice) }()
        case 15: try { try decoder.decodeSingularUInt64Field(value: &_storage._assetOutPrice) }()
        case 16: try { try decoder.decodeSingularUInt64Field(value: &_storage._minUsdValueLeft) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._blockHeight) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._blockTime) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._appID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._appID, fieldNumber: 2)
      }
      if _storage._pairID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._pairID, fieldNumber: 3)
      }
      if !_storage._stabilityFee.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stabilityFee, fieldNumber: 4)
      }
      if !_storage._closingFee.isEmpty {
        try visitor.visitSingularStringField(value: _storage._closingFee, fieldNumber: 5)
      }
      if !_storage._liquidationPenalty.isEmpty {
        try visitor.visitSingularStringField(value: _storage._liquidationPenalty, fieldNumber: 6)
      }
      if !_storage._drawDownFee.isEmpty {
        try visitor.visitSingularStringField(value: _storage._drawDownFee, fieldNumber: 7)
      }
      if _storage._isVaultActive != false {
        try visitor.visitSingularBoolField(value: _storage._isVaultActive, fieldNumber: 8)
      }
      if !_storage._debtCeiling.isEmpty {
        try visitor.visitSingularStringField(value: _storage._debtCeiling, fieldNumber: 9)
      }
      if !_storage._debtFloor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._debtFloor, fieldNumber: 10)
      }
      if _storage._isStableMintVault != false {
        try visitor.visitSingularBoolField(value: _storage._isStableMintVault, fieldNumber: 11)
      }
      if !_storage._minCr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minCr, fieldNumber: 12)
      }
      if !_storage._pairName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pairName, fieldNumber: 13)
      }
      if _storage._assetOutOraclePrice != false {
        try visitor.visitSingularBoolField(value: _storage._assetOutOraclePrice, fieldNumber: 14)
      }
      if _storage._assetOutPrice != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._assetOutPrice, fieldNumber: 15)
      }
      if _storage._minUsdValueLeft != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._minUsdValueLeft, fieldNumber: 16)
      }
      if _storage._blockHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._blockHeight, fieldNumber: 17)
      }
      try { if let v = _storage._blockTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Asset_V1beta1_ExtendedPairVault, rhs: Comdex_Asset_V1beta1_ExtendedPairVault) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._pairID != rhs_storage._pairID {return false}
        if _storage._stabilityFee != rhs_storage._stabilityFee {return false}
        if _storage._closingFee != rhs_storage._closingFee {return false}
        if _storage._liquidationPenalty != rhs_storage._liquidationPenalty {return false}
        if _storage._drawDownFee != rhs_storage._drawDownFee {return false}
        if _storage._isVaultActive != rhs_storage._isVaultActive {return false}
        if _storage._debtCeiling != rhs_storage._debtCeiling {return false}
        if _storage._debtFloor != rhs_storage._debtFloor {return false}
        if _storage._isStableMintVault != rhs_storage._isStableMintVault {return false}
        if _storage._minCr != rhs_storage._minCr {return false}
        if _storage._pairName != rhs_storage._pairName {return false}
        if _storage._assetOutOraclePrice != rhs_storage._assetOutOraclePrice {return false}
        if _storage._assetOutPrice != rhs_storage._assetOutPrice {return false}
        if _storage._minUsdValueLeft != rhs_storage._minUsdValueLeft {return false}
        if _storage._blockHeight != rhs_storage._blockHeight {return false}
        if _storage._blockTime != rhs_storage._blockTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
