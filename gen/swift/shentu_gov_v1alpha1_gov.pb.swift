// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/gov/v1alpha1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Shentu_Gov_V1alpha1_CustomParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var certifierUpdateSecurityVoteTally: Cosmos_Gov_V1beta1_TallyParams {
    get {return _certifierUpdateSecurityVoteTally ?? Cosmos_Gov_V1beta1_TallyParams()}
    set {_certifierUpdateSecurityVoteTally = newValue}
  }
  /// Returns true if `certifierUpdateSecurityVoteTally` has been explicitly set.
  var hasCertifierUpdateSecurityVoteTally: Bool {return self._certifierUpdateSecurityVoteTally != nil}
  /// Clears the value of `certifierUpdateSecurityVoteTally`. Subsequent reads from it will return its default value.
  mutating func clearCertifierUpdateSecurityVoteTally() {self._certifierUpdateSecurityVoteTally = nil}

  var certifierUpdateStakeVoteTally: Cosmos_Gov_V1beta1_TallyParams {
    get {return _certifierUpdateStakeVoteTally ?? Cosmos_Gov_V1beta1_TallyParams()}
    set {_certifierUpdateStakeVoteTally = newValue}
  }
  /// Returns true if `certifierUpdateStakeVoteTally` has been explicitly set.
  var hasCertifierUpdateStakeVoteTally: Bool {return self._certifierUpdateStakeVoteTally != nil}
  /// Clears the value of `certifierUpdateStakeVoteTally`. Subsequent reads from it will return its default value.
  mutating func clearCertifierUpdateStakeVoteTally() {self._certifierUpdateStakeVoteTally = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _certifierUpdateSecurityVoteTally: Cosmos_Gov_V1beta1_TallyParams? = nil
  fileprivate var _certifierUpdateStakeVoteTally: Cosmos_Gov_V1beta1_TallyParams? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Shentu_Gov_V1alpha1_CustomParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shentu.gov.v1alpha1"

extension Shentu_Gov_V1alpha1_CustomParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "certifier_update_security_vote_tally"),
    2: .standard(proto: "certifier_update_stake_vote_tally"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._certifierUpdateSecurityVoteTally) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._certifierUpdateStakeVoteTally) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._certifierUpdateSecurityVoteTally {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._certifierUpdateStakeVoteTally {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Gov_V1alpha1_CustomParams, rhs: Shentu_Gov_V1alpha1_CustomParams) -> Bool {
    if lhs._certifierUpdateSecurityVoteTally != rhs._certifierUpdateSecurityVoteTally {return false}
    if lhs._certifierUpdateStakeVoteTally != rhs._certifierUpdateStakeVoteTally {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
