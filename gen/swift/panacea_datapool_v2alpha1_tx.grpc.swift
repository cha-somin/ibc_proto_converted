//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: panacea/datapool/v2alpha1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Panacea_Datapool_V2alpha1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Panacea_Datapool_V2alpha1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func createPool(
    _ request: Panacea_Datapool_V2alpha1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgCreatePool, Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>

  func sellData(
    _ request: Panacea_Datapool_V2alpha1_MsgSellData,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgSellData, Panacea_Datapool_V2alpha1_MsgSellDataResponse>

  func buyDataPass(
    _ request: Panacea_Datapool_V2alpha1_MsgBuyDataPass,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgBuyDataPass, Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>

  func redeemDataPass(
    _ request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgRedeemDataPass, Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>
}

extension Panacea_Datapool_V2alpha1_MsgClientProtocol {
  internal var serviceName: String {
    return "panacea.datapool.v2alpha1.Msg"
  }

  /// CreatePool defines a method for creating data pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPool(
    _ request: Panacea_Datapool_V2alpha1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgCreatePool, Panacea_Datapool_V2alpha1_MsgCreatePoolResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  /// SellData defines a method for selling data
  ///
  /// - Parameters:
  ///   - request: Request to send to SellData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellData(
    _ request: Panacea_Datapool_V2alpha1_MsgSellData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgSellData, Panacea_Datapool_V2alpha1_MsgSellDataResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.sellData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellDataInterceptors() ?? []
    )
  }

  /// BuyDataPass defines a method for buying data pass
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyDataPass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyDataPass(
    _ request: Panacea_Datapool_V2alpha1_MsgBuyDataPass,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgBuyDataPass, Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.buyDataPass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyDataPassInterceptors() ?? []
    )
  }

  /// RedeemDataPass defines a method for redeeming data pass to get data
  ///
  /// - Parameters:
  ///   - request: Request to send to RedeemDataPass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redeemDataPass(
    _ request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_MsgRedeemDataPass, Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.redeemDataPass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemDataPassInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Panacea_Datapool_V2alpha1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Panacea_Datapool_V2alpha1_MsgNIOClient")
internal final class Panacea_Datapool_V2alpha1_MsgClient: Panacea_Datapool_V2alpha1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the panacea.datapool.v2alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Panacea_Datapool_V2alpha1_MsgNIOClient: Panacea_Datapool_V2alpha1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the panacea.datapool.v2alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Datapool_V2alpha1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreatePoolCall(
    _ request: Panacea_Datapool_V2alpha1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgCreatePool, Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>

  func makeSellDataCall(
    _ request: Panacea_Datapool_V2alpha1_MsgSellData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgSellData, Panacea_Datapool_V2alpha1_MsgSellDataResponse>

  func makeBuyDataPassCall(
    _ request: Panacea_Datapool_V2alpha1_MsgBuyDataPass,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgBuyDataPass, Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>

  func makeRedeemDataPassCall(
    _ request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgRedeemDataPass, Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datapool_V2alpha1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Datapool_V2alpha1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreatePoolCall(
    _ request: Panacea_Datapool_V2alpha1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgCreatePool, Panacea_Datapool_V2alpha1_MsgCreatePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func makeSellDataCall(
    _ request: Panacea_Datapool_V2alpha1_MsgSellData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgSellData, Panacea_Datapool_V2alpha1_MsgSellDataResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.sellData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellDataInterceptors() ?? []
    )
  }

  internal func makeBuyDataPassCall(
    _ request: Panacea_Datapool_V2alpha1_MsgBuyDataPass,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgBuyDataPass, Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.buyDataPass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyDataPassInterceptors() ?? []
    )
  }

  internal func makeRedeemDataPassCall(
    _ request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_MsgRedeemDataPass, Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.redeemDataPass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemDataPassInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datapool_V2alpha1_MsgAsyncClientProtocol {
  internal func createPool(
    _ request: Panacea_Datapool_V2alpha1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_MsgCreatePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func sellData(
    _ request: Panacea_Datapool_V2alpha1_MsgSellData,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_MsgSellDataResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.sellData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellDataInterceptors() ?? []
    )
  }

  internal func buyDataPass(
    _ request: Panacea_Datapool_V2alpha1_MsgBuyDataPass,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.buyDataPass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyDataPassInterceptors() ?? []
    )
  }

  internal func redeemDataPass(
    _ request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.redeemDataPass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedeemDataPassInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Panacea_Datapool_V2alpha1_MsgAsyncClient: Panacea_Datapool_V2alpha1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Panacea_Datapool_V2alpha1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createPool'.
  func makeCreatePoolInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_MsgCreatePool, Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'sellData'.
  func makeSellDataInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_MsgSellData, Panacea_Datapool_V2alpha1_MsgSellDataResponse>]

  /// - Returns: Interceptors to use when invoking 'buyDataPass'.
  func makeBuyDataPassInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_MsgBuyDataPass, Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>]

  /// - Returns: Interceptors to use when invoking 'redeemDataPass'.
  func makeRedeemDataPassInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_MsgRedeemDataPass, Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>]
}

internal enum Panacea_Datapool_V2alpha1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "panacea.datapool.v2alpha1.Msg",
    methods: [
      Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.createPool,
      Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.sellData,
      Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.buyDataPass,
      Panacea_Datapool_V2alpha1_MsgClientMetadata.Methods.redeemDataPass,
    ]
  )

  internal enum Methods {
    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/panacea.datapool.v2alpha1.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let sellData = GRPCMethodDescriptor(
      name: "SellData",
      path: "/panacea.datapool.v2alpha1.Msg/SellData",
      type: GRPCCallType.unary
    )

    internal static let buyDataPass = GRPCMethodDescriptor(
      name: "BuyDataPass",
      path: "/panacea.datapool.v2alpha1.Msg/BuyDataPass",
      type: GRPCCallType.unary
    )

    internal static let redeemDataPass = GRPCMethodDescriptor(
      name: "RedeemDataPass",
      path: "/panacea.datapool.v2alpha1.Msg/RedeemDataPass",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Panacea_Datapool_V2alpha1_MsgProvider: CallHandlerProvider {
  var interceptors: Panacea_Datapool_V2alpha1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreatePool defines a method for creating data pool.
  func createPool(request: Panacea_Datapool_V2alpha1_MsgCreatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>

  /// SellData defines a method for selling data
  func sellData(request: Panacea_Datapool_V2alpha1_MsgSellData, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_MsgSellDataResponse>

  /// BuyDataPass defines a method for buying data pass
  func buyDataPass(request: Panacea_Datapool_V2alpha1_MsgBuyDataPass, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>

  /// RedeemDataPass defines a method for redeeming data pass to get data
  func redeemDataPass(request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>
}

extension Panacea_Datapool_V2alpha1_MsgProvider {
  internal var serviceName: Substring {
    return Panacea_Datapool_V2alpha1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        userFunction: self.createPool(request:context:)
      )

    case "SellData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgSellData>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgSellDataResponse>(),
        interceptors: self.interceptors?.makeSellDataInterceptors() ?? [],
        userFunction: self.sellData(request:context:)
      )

    case "BuyDataPass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgBuyDataPass>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>(),
        interceptors: self.interceptors?.makeBuyDataPassInterceptors() ?? [],
        userFunction: self.buyDataPass(request:context:)
      )

    case "RedeemDataPass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgRedeemDataPass>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>(),
        interceptors: self.interceptors?.makeRedeemDataPassInterceptors() ?? [],
        userFunction: self.redeemDataPass(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Datapool_V2alpha1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Datapool_V2alpha1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreatePool defines a method for creating data pool.
  @Sendable func createPool(
    request: Panacea_Datapool_V2alpha1_MsgCreatePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_MsgCreatePoolResponse

  /// SellData defines a method for selling data
  @Sendable func sellData(
    request: Panacea_Datapool_V2alpha1_MsgSellData,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_MsgSellDataResponse

  /// BuyDataPass defines a method for buying data pass
  @Sendable func buyDataPass(
    request: Panacea_Datapool_V2alpha1_MsgBuyDataPass,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse

  /// RedeemDataPass defines a method for redeeming data pass to get data
  @Sendable func redeemDataPass(
    request: Panacea_Datapool_V2alpha1_MsgRedeemDataPass,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datapool_V2alpha1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Datapool_V2alpha1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Panacea_Datapool_V2alpha1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Panacea_Datapool_V2alpha1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        wrapping: self.createPool(request:context:)
      )

    case "SellData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgSellData>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgSellDataResponse>(),
        interceptors: self.interceptors?.makeSellDataInterceptors() ?? [],
        wrapping: self.sellData(request:context:)
      )

    case "BuyDataPass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgBuyDataPass>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>(),
        interceptors: self.interceptors?.makeBuyDataPassInterceptors() ?? [],
        wrapping: self.buyDataPass(request:context:)
      )

    case "RedeemDataPass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_MsgRedeemDataPass>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>(),
        interceptors: self.interceptors?.makeRedeemDataPassInterceptors() ?? [],
        wrapping: self.redeemDataPass(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Panacea_Datapool_V2alpha1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePoolInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_MsgCreatePool, Panacea_Datapool_V2alpha1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'sellData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellDataInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_MsgSellData, Panacea_Datapool_V2alpha1_MsgSellDataResponse>]

  /// - Returns: Interceptors to use when handling 'buyDataPass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyDataPassInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_MsgBuyDataPass, Panacea_Datapool_V2alpha1_MsgBuyDataPassResponse>]

  /// - Returns: Interceptors to use when handling 'redeemDataPass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedeemDataPassInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_MsgRedeemDataPass, Panacea_Datapool_V2alpha1_MsgRedeemDataPassResponse>]
}

internal enum Panacea_Datapool_V2alpha1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "panacea.datapool.v2alpha1.Msg",
    methods: [
      Panacea_Datapool_V2alpha1_MsgServerMetadata.Methods.createPool,
      Panacea_Datapool_V2alpha1_MsgServerMetadata.Methods.sellData,
      Panacea_Datapool_V2alpha1_MsgServerMetadata.Methods.buyDataPass,
      Panacea_Datapool_V2alpha1_MsgServerMetadata.Methods.redeemDataPass,
    ]
  )

  internal enum Methods {
    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/panacea.datapool.v2alpha1.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let sellData = GRPCMethodDescriptor(
      name: "SellData",
      path: "/panacea.datapool.v2alpha1.Msg/SellData",
      type: GRPCCallType.unary
    )

    internal static let buyDataPass = GRPCMethodDescriptor(
      name: "BuyDataPass",
      path: "/panacea.datapool.v2alpha1.Msg/BuyDataPass",
      type: GRPCCallType.unary
    )

    internal static let redeemDataPass = GRPCMethodDescriptor(
      name: "RedeemDataPass",
      path: "/panacea.datapool.v2alpha1.Msg/RedeemDataPass",
      type: GRPCCallType.unary
    )
  }
}
