// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: initia/gov/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the gov module's genesis state.
struct Initia_Gov_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// starting_proposal_id is the ID of the starting proposal.
  var startingProposalID: UInt64 = 0

  /// deposits defines all the deposits present at genesis.
  var deposits: [Cosmos_Gov_V1_Deposit] = []

  /// votes defines all the votes present at genesis.
  var votes: [Cosmos_Gov_V1_Vote] = []

  /// proposals defines all the proposals present at genesis.
  var proposals: [Initia_Gov_V1_Proposal] = []

  /// params defines all the paramaters of x/gov module.
  var params: Initia_Gov_V1_Params {
    get {return _params ?? Initia_Gov_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// The constitution allows builders to lay a foundation and define purpose.
  /// This is an immutable string set in genesis.
  /// There are no amendments, to go outside of scope, just fork.
  /// constitution is an immutable string in genesis for a chain builder to lay out their vision, ideas and ideals.
  ///
  /// Since: cosmos-sdk 0.50
  var constitution: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Initia_Gov_V1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Initia_Gov_V1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "initia.gov.v1"

extension Initia_Gov_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "starting_proposal_id"),
    2: .same(proto: "deposits"),
    3: .same(proto: "votes"),
    4: .same(proto: "proposals"),
    5: .same(proto: "params"),
    6: .same(proto: "constitution"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.startingProposalID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.deposits) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.votes) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.proposals) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.constitution) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.startingProposalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.startingProposalID, fieldNumber: 1)
    }
    if !self.deposits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposits, fieldNumber: 2)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.votes, fieldNumber: 3)
    }
    if !self.proposals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proposals, fieldNumber: 4)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.constitution.isEmpty {
      try visitor.visitSingularStringField(value: self.constitution, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Gov_V1_GenesisState, rhs: Initia_Gov_V1_GenesisState) -> Bool {
    if lhs.startingProposalID != rhs.startingProposalID {return false}
    if lhs.deposits != rhs.deposits {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.proposals != rhs.proposals {return false}
    if lhs._params != rhs._params {return false}
    if lhs.constitution != rhs.constitution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
