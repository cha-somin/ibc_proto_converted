// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/cosmwasmpool/v1beta1/model/v3/pool_query_msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== ShareDenomResponse
struct Osmosis_Cosmwasmpool_V1beta1_Model_V3_ShareDenomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// share_denom is the share denomination.
  var shareDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== TotalPoolLiquidityResponse
struct Osmosis_Cosmwasmpool_V1beta1_Model_V3_TotalPoolLiquidityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// total_pool_liquidity is the total liquidity in the pool denominated in
  /// coins.
  var totalPoolLiquidity: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== AssetConfig
struct Osmosis_Cosmwasmpool_V1beta1_Model_V3_AssetConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// denom is the asset denomination.
  var denom: String = String()

  /// normalization_factor is the normalization factor for the asset.
  var normalizationFactor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== ListAssetConfigsResponse
struct Osmosis_Cosmwasmpool_V1beta1_Model_V3_ListAssetConfigsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// asset_configs is the list of asset configurations.
  var assetConfigs: [Osmosis_Cosmwasmpool_V1beta1_Model_V3_AssetConfig] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_ShareDenomResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_TotalPoolLiquidityResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_AssetConfig: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_ListAssetConfigsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.cosmwasmpool.v1beta1.model.v3"

extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_ShareDenomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShareDenomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "share_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.shareDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shareDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.shareDenom, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_ShareDenomResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_ShareDenomResponse) -> Bool {
    if lhs.shareDenom != rhs.shareDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_TotalPoolLiquidityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TotalPoolLiquidityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pool_liquidity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.totalPoolLiquidity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.totalPoolLiquidity.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalPoolLiquidity, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_TotalPoolLiquidityResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_TotalPoolLiquidityResponse) -> Bool {
    if lhs.totalPoolLiquidity != rhs.totalPoolLiquidity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_AssetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssetConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "normalization_factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.normalizationFactor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.normalizationFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.normalizationFactor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_AssetConfig, rhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_AssetConfig) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.normalizationFactor != rhs.normalizationFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_Model_V3_ListAssetConfigsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListAssetConfigsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_configs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assetConfigs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetConfigs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_ListAssetConfigsResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_Model_V3_ListAssetConfigsResponse) -> Bool {
    if lhs.assetConfigs != rhs.assetConfigs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
