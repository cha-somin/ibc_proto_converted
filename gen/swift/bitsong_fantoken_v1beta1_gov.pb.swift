// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bitsong/fantoken/v1beta1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bitsong_Fantoken_V1beta1_UpdateFeesProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var issueFee: Cosmos_Base_V1beta1_Coin {
    get {return _issueFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_issueFee = newValue}
  }
  /// Returns true if `issueFee` has been explicitly set.
  var hasIssueFee: Bool {return self._issueFee != nil}
  /// Clears the value of `issueFee`. Subsequent reads from it will return its default value.
  mutating func clearIssueFee() {self._issueFee = nil}

  var mintFee: Cosmos_Base_V1beta1_Coin {
    get {return _mintFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_mintFee = newValue}
  }
  /// Returns true if `mintFee` has been explicitly set.
  var hasMintFee: Bool {return self._mintFee != nil}
  /// Clears the value of `mintFee`. Subsequent reads from it will return its default value.
  mutating func clearMintFee() {self._mintFee = nil}

  var burnFee: Cosmos_Base_V1beta1_Coin {
    get {return _burnFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_burnFee = newValue}
  }
  /// Returns true if `burnFee` has been explicitly set.
  var hasBurnFee: Bool {return self._burnFee != nil}
  /// Clears the value of `burnFee`. Subsequent reads from it will return its default value.
  mutating func clearBurnFee() {self._burnFee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _issueFee: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _mintFee: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _burnFee: Cosmos_Base_V1beta1_Coin? = nil
}

struct Bitsong_Fantoken_V1beta1_UpdateFeesProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var issueFee: String = String()

  var mintFee: String = String()

  var burnFee: String = String()

  var deposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bitsong_Fantoken_V1beta1_UpdateFeesProposal: @unchecked Sendable {}
extension Bitsong_Fantoken_V1beta1_UpdateFeesProposalWithDeposit: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bitsong.fantoken.v1beta1"

extension Bitsong_Fantoken_V1beta1_UpdateFeesProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateFeesProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "issue_fee"),
    4: .standard(proto: "mint_fee"),
    5: .standard(proto: "burn_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._issueFee) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._mintFee) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._burnFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._issueFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._mintFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._burnFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bitsong_Fantoken_V1beta1_UpdateFeesProposal, rhs: Bitsong_Fantoken_V1beta1_UpdateFeesProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._issueFee != rhs._issueFee {return false}
    if lhs._mintFee != rhs._mintFee {return false}
    if lhs._burnFee != rhs._burnFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bitsong_Fantoken_V1beta1_UpdateFeesProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateFeesProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "issue_fee"),
    4: .standard(proto: "mint_fee"),
    5: .standard(proto: "burn_fee"),
    7: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.issueFee) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mintFee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.burnFee) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.issueFee.isEmpty {
      try visitor.visitSingularStringField(value: self.issueFee, fieldNumber: 3)
    }
    if !self.mintFee.isEmpty {
      try visitor.visitSingularStringField(value: self.mintFee, fieldNumber: 4)
    }
    if !self.burnFee.isEmpty {
      try visitor.visitSingularStringField(value: self.burnFee, fieldNumber: 5)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bitsong_Fantoken_V1beta1_UpdateFeesProposalWithDeposit, rhs: Bitsong_Fantoken_V1beta1_UpdateFeesProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.issueFee != rhs.issueFee {return false}
    if lhs.mintFee != rhs.mintFee {return false}
    if lhs.burnFee != rhs.burnFee {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
