// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/utils/v1beta1/bitmap.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Utils_V1beta1_Bitmap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trueCountCache: Axelar_Utils_V1beta1_CircularBuffer {
    get {return _trueCountCache ?? Axelar_Utils_V1beta1_CircularBuffer()}
    set {_trueCountCache = newValue}
  }
  /// Returns true if `trueCountCache` has been explicitly set.
  var hasTrueCountCache: Bool {return self._trueCountCache != nil}
  /// Clears the value of `trueCountCache`. Subsequent reads from it will return its default value.
  mutating func clearTrueCountCache() {self._trueCountCache = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trueCountCache: Axelar_Utils_V1beta1_CircularBuffer? = nil
}

struct Axelar_Utils_V1beta1_CircularBuffer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cumulativeValue: [UInt64] = []

  var index: Int32 = 0

  var maxSize: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Axelar_Utils_V1beta1_Bitmap: @unchecked Sendable {}
extension Axelar_Utils_V1beta1_CircularBuffer: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.utils.v1beta1"

extension Axelar_Utils_V1beta1_Bitmap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Bitmap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "true_count_cache"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._trueCountCache) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._trueCountCache {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Utils_V1beta1_Bitmap, rhs: Axelar_Utils_V1beta1_Bitmap) -> Bool {
    if lhs._trueCountCache != rhs._trueCountCache {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Utils_V1beta1_CircularBuffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CircularBuffer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cumulative_value"),
    2: .same(proto: "index"),
    3: .standard(proto: "max_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.cumulativeValue) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.maxSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cumulativeValue.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.cumulativeValue, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 2)
    }
    if self.maxSize != 0 {
      try visitor.visitSingularInt32Field(value: self.maxSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Utils_V1beta1_CircularBuffer, rhs: Axelar_Utils_V1beta1_CircularBuffer) -> Bool {
    if lhs.cumulativeValue != rhs.cumulativeValue {return false}
    if lhs.index != rhs.index {return false}
    if lhs.maxSize != rhs.maxSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
