//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/cert/v1alpha1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for cert module.
///
/// Usage: instantiate `Shentu_Cert_V1alpha1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Cert_V1alpha1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func certifier(
    _ request: Shentu_Cert_V1alpha1_QueryCertifierRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertifierRequest, Shentu_Cert_V1alpha1_QueryCertifierResponse>

  func certifiers(
    _ request: Shentu_Cert_V1alpha1_QueryCertifiersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertifiersRequest, Shentu_Cert_V1alpha1_QueryCertifiersResponse>

  func platform(
    _ request: Shentu_Cert_V1alpha1_QueryPlatformRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryPlatformRequest, Shentu_Cert_V1alpha1_QueryPlatformResponse>

  func certificate(
    _ request: Shentu_Cert_V1alpha1_QueryCertificateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertificateRequest, Shentu_Cert_V1alpha1_QueryCertificateResponse>

  func certificates(
    _ request: Shentu_Cert_V1alpha1_QueryCertificatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertificatesRequest, Shentu_Cert_V1alpha1_QueryCertificatesResponse>
}

extension Shentu_Cert_V1alpha1_QueryClientProtocol {
  internal var serviceName: String {
    return "shentu.cert.v1alpha1.Query"
  }

  /// Unary call to Certifier
  ///
  /// - Parameters:
  ///   - request: Request to send to Certifier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func certifier(
    _ request: Shentu_Cert_V1alpha1_QueryCertifierRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertifierRequest, Shentu_Cert_V1alpha1_QueryCertifierResponse> {
    return self.makeUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifierInterceptors() ?? []
    )
  }

  /// Unary call to Certifiers
  ///
  /// - Parameters:
  ///   - request: Request to send to Certifiers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func certifiers(
    _ request: Shentu_Cert_V1alpha1_QueryCertifiersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertifiersRequest, Shentu_Cert_V1alpha1_QueryCertifiersResponse> {
    return self.makeUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifiers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifiersInterceptors() ?? []
    )
  }

  /// Unary call to Platform
  ///
  /// - Parameters:
  ///   - request: Request to send to Platform.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func platform(
    _ request: Shentu_Cert_V1alpha1_QueryPlatformRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryPlatformRequest, Shentu_Cert_V1alpha1_QueryPlatformResponse> {
    return self.makeUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.platform.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlatformInterceptors() ?? []
    )
  }

  /// Unary call to Certificate
  ///
  /// - Parameters:
  ///   - request: Request to send to Certificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func certificate(
    _ request: Shentu_Cert_V1alpha1_QueryCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertificateRequest, Shentu_Cert_V1alpha1_QueryCertificateResponse> {
    return self.makeUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertificateInterceptors() ?? []
    )
  }

  /// Unary call to Certificates
  ///
  /// - Parameters:
  ///   - request: Request to send to Certificates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func certificates(
    _ request: Shentu_Cert_V1alpha1_QueryCertificatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_QueryCertificatesRequest, Shentu_Cert_V1alpha1_QueryCertificatesResponse> {
    return self.makeUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertificatesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Shentu_Cert_V1alpha1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Shentu_Cert_V1alpha1_QueryNIOClient")
internal final class Shentu_Cert_V1alpha1_QueryClient: Shentu_Cert_V1alpha1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the shentu.cert.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Shentu_Cert_V1alpha1_QueryNIOClient: Shentu_Cert_V1alpha1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.cert.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for cert module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Cert_V1alpha1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func makeCertifierCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertifierRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertifierRequest, Shentu_Cert_V1alpha1_QueryCertifierResponse>

  func makeCertifiersCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertifiersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertifiersRequest, Shentu_Cert_V1alpha1_QueryCertifiersResponse>

  func makePlatformCall(
    _ request: Shentu_Cert_V1alpha1_QueryPlatformRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryPlatformRequest, Shentu_Cert_V1alpha1_QueryPlatformResponse>

  func makeCertificateCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertificateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertificateRequest, Shentu_Cert_V1alpha1_QueryCertificateResponse>

  func makeCertificatesCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertificatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertificatesRequest, Shentu_Cert_V1alpha1_QueryCertificatesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Cert_V1alpha1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Cert_V1alpha1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCertifierCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertifierRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertifierRequest, Shentu_Cert_V1alpha1_QueryCertifierResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifierInterceptors() ?? []
    )
  }

  internal func makeCertifiersCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertifiersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertifiersRequest, Shentu_Cert_V1alpha1_QueryCertifiersResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifiers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifiersInterceptors() ?? []
    )
  }

  internal func makePlatformCall(
    _ request: Shentu_Cert_V1alpha1_QueryPlatformRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryPlatformRequest, Shentu_Cert_V1alpha1_QueryPlatformResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.platform.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlatformInterceptors() ?? []
    )
  }

  internal func makeCertificateCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertificateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertificateRequest, Shentu_Cert_V1alpha1_QueryCertificateResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertificateInterceptors() ?? []
    )
  }

  internal func makeCertificatesCall(
    _ request: Shentu_Cert_V1alpha1_QueryCertificatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Cert_V1alpha1_QueryCertificatesRequest, Shentu_Cert_V1alpha1_QueryCertificatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertificatesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Cert_V1alpha1_QueryAsyncClientProtocol {
  internal func certifier(
    _ request: Shentu_Cert_V1alpha1_QueryCertifierRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertifierResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifierInterceptors() ?? []
    )
  }

  internal func certifiers(
    _ request: Shentu_Cert_V1alpha1_QueryCertifiersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertifiersResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifiers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifiersInterceptors() ?? []
    )
  }

  internal func platform(
    _ request: Shentu_Cert_V1alpha1_QueryPlatformRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Cert_V1alpha1_QueryPlatformResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.platform.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlatformInterceptors() ?? []
    )
  }

  internal func certificate(
    _ request: Shentu_Cert_V1alpha1_QueryCertificateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertificateResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertificateInterceptors() ?? []
    )
  }

  internal func certificates(
    _ request: Shentu_Cert_V1alpha1_QueryCertificatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertificatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertificatesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Shentu_Cert_V1alpha1_QueryAsyncClient: Shentu_Cert_V1alpha1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Shentu_Cert_V1alpha1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'certifier'.
  func makeCertifierInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_QueryCertifierRequest, Shentu_Cert_V1alpha1_QueryCertifierResponse>]

  /// - Returns: Interceptors to use when invoking 'certifiers'.
  func makeCertifiersInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_QueryCertifiersRequest, Shentu_Cert_V1alpha1_QueryCertifiersResponse>]

  /// - Returns: Interceptors to use when invoking 'platform'.
  func makePlatformInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_QueryPlatformRequest, Shentu_Cert_V1alpha1_QueryPlatformResponse>]

  /// - Returns: Interceptors to use when invoking 'certificate'.
  func makeCertificateInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_QueryCertificateRequest, Shentu_Cert_V1alpha1_QueryCertificateResponse>]

  /// - Returns: Interceptors to use when invoking 'certificates'.
  func makeCertificatesInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_QueryCertificatesRequest, Shentu_Cert_V1alpha1_QueryCertificatesResponse>]
}

internal enum Shentu_Cert_V1alpha1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "shentu.cert.v1alpha1.Query",
    methods: [
      Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifier,
      Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certifiers,
      Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.platform,
      Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificate,
      Shentu_Cert_V1alpha1_QueryClientMetadata.Methods.certificates,
    ]
  )

  internal enum Methods {
    internal static let certifier = GRPCMethodDescriptor(
      name: "Certifier",
      path: "/shentu.cert.v1alpha1.Query/Certifier",
      type: GRPCCallType.unary
    )

    internal static let certifiers = GRPCMethodDescriptor(
      name: "Certifiers",
      path: "/shentu.cert.v1alpha1.Query/Certifiers",
      type: GRPCCallType.unary
    )

    internal static let platform = GRPCMethodDescriptor(
      name: "Platform",
      path: "/shentu.cert.v1alpha1.Query/Platform",
      type: GRPCCallType.unary
    )

    internal static let certificate = GRPCMethodDescriptor(
      name: "Certificate",
      path: "/shentu.cert.v1alpha1.Query/Certificate",
      type: GRPCCallType.unary
    )

    internal static let certificates = GRPCMethodDescriptor(
      name: "Certificates",
      path: "/shentu.cert.v1alpha1.Query/Certificates",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for cert module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Cert_V1alpha1_QueryProvider: CallHandlerProvider {
  var interceptors: Shentu_Cert_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  func certifier(request: Shentu_Cert_V1alpha1_QueryCertifierRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_QueryCertifierResponse>

  func certifiers(request: Shentu_Cert_V1alpha1_QueryCertifiersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_QueryCertifiersResponse>

  func platform(request: Shentu_Cert_V1alpha1_QueryPlatformRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_QueryPlatformResponse>

  func certificate(request: Shentu_Cert_V1alpha1_QueryCertificateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_QueryCertificateResponse>

  func certificates(request: Shentu_Cert_V1alpha1_QueryCertificatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_QueryCertificatesResponse>
}

extension Shentu_Cert_V1alpha1_QueryProvider {
  internal var serviceName: Substring {
    return Shentu_Cert_V1alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Certifier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertifierRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertifierResponse>(),
        interceptors: self.interceptors?.makeCertifierInterceptors() ?? [],
        userFunction: self.certifier(request:context:)
      )

    case "Certifiers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertifiersRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertifiersResponse>(),
        interceptors: self.interceptors?.makeCertifiersInterceptors() ?? [],
        userFunction: self.certifiers(request:context:)
      )

    case "Platform":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryPlatformRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryPlatformResponse>(),
        interceptors: self.interceptors?.makePlatformInterceptors() ?? [],
        userFunction: self.platform(request:context:)
      )

    case "Certificate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertificateRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertificateResponse>(),
        interceptors: self.interceptors?.makeCertificateInterceptors() ?? [],
        userFunction: self.certificate(request:context:)
      )

    case "Certificates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertificatesRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertificatesResponse>(),
        interceptors: self.interceptors?.makeCertificatesInterceptors() ?? [],
        userFunction: self.certificates(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for cert module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Cert_V1alpha1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Cert_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func certifier(
    request: Shentu_Cert_V1alpha1_QueryCertifierRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertifierResponse

  @Sendable func certifiers(
    request: Shentu_Cert_V1alpha1_QueryCertifiersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertifiersResponse

  @Sendable func platform(
    request: Shentu_Cert_V1alpha1_QueryPlatformRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Cert_V1alpha1_QueryPlatformResponse

  @Sendable func certificate(
    request: Shentu_Cert_V1alpha1_QueryCertificateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertificateResponse

  @Sendable func certificates(
    request: Shentu_Cert_V1alpha1_QueryCertificatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Cert_V1alpha1_QueryCertificatesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Cert_V1alpha1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Cert_V1alpha1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Shentu_Cert_V1alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Shentu_Cert_V1alpha1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Certifier":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertifierRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertifierResponse>(),
        interceptors: self.interceptors?.makeCertifierInterceptors() ?? [],
        wrapping: self.certifier(request:context:)
      )

    case "Certifiers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertifiersRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertifiersResponse>(),
        interceptors: self.interceptors?.makeCertifiersInterceptors() ?? [],
        wrapping: self.certifiers(request:context:)
      )

    case "Platform":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryPlatformRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryPlatformResponse>(),
        interceptors: self.interceptors?.makePlatformInterceptors() ?? [],
        wrapping: self.platform(request:context:)
      )

    case "Certificate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertificateRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertificateResponse>(),
        interceptors: self.interceptors?.makeCertificateInterceptors() ?? [],
        wrapping: self.certificate(request:context:)
      )

    case "Certificates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_QueryCertificatesRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_QueryCertificatesResponse>(),
        interceptors: self.interceptors?.makeCertificatesInterceptors() ?? [],
        wrapping: self.certificates(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Cert_V1alpha1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'certifier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCertifierInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_QueryCertifierRequest, Shentu_Cert_V1alpha1_QueryCertifierResponse>]

  /// - Returns: Interceptors to use when handling 'certifiers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCertifiersInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_QueryCertifiersRequest, Shentu_Cert_V1alpha1_QueryCertifiersResponse>]

  /// - Returns: Interceptors to use when handling 'platform'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlatformInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_QueryPlatformRequest, Shentu_Cert_V1alpha1_QueryPlatformResponse>]

  /// - Returns: Interceptors to use when handling 'certificate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCertificateInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_QueryCertificateRequest, Shentu_Cert_V1alpha1_QueryCertificateResponse>]

  /// - Returns: Interceptors to use when handling 'certificates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCertificatesInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_QueryCertificatesRequest, Shentu_Cert_V1alpha1_QueryCertificatesResponse>]
}

internal enum Shentu_Cert_V1alpha1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "shentu.cert.v1alpha1.Query",
    methods: [
      Shentu_Cert_V1alpha1_QueryServerMetadata.Methods.certifier,
      Shentu_Cert_V1alpha1_QueryServerMetadata.Methods.certifiers,
      Shentu_Cert_V1alpha1_QueryServerMetadata.Methods.platform,
      Shentu_Cert_V1alpha1_QueryServerMetadata.Methods.certificate,
      Shentu_Cert_V1alpha1_QueryServerMetadata.Methods.certificates,
    ]
  )

  internal enum Methods {
    internal static let certifier = GRPCMethodDescriptor(
      name: "Certifier",
      path: "/shentu.cert.v1alpha1.Query/Certifier",
      type: GRPCCallType.unary
    )

    internal static let certifiers = GRPCMethodDescriptor(
      name: "Certifiers",
      path: "/shentu.cert.v1alpha1.Query/Certifiers",
      type: GRPCCallType.unary
    )

    internal static let platform = GRPCMethodDescriptor(
      name: "Platform",
      path: "/shentu.cert.v1alpha1.Query/Platform",
      type: GRPCCallType.unary
    )

    internal static let certificate = GRPCMethodDescriptor(
      name: "Certificate",
      path: "/shentu.cert.v1alpha1.Query/Certificate",
      type: GRPCCallType.unary
    )

    internal static let certificates = GRPCMethodDescriptor(
      name: "Certificates",
      path: "/shentu.cert.v1alpha1.Query/Certificates",
      type: GRPCCallType.unary
    )
  }
}
