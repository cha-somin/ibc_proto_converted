//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/leverage/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Umee_Leverage_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Umee_Leverage_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Umee_Leverage_V1_QueryParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryParams, Umee_Leverage_V1_QueryParamsResponse>

  func registeredTokens(
    _ request: Umee_Leverage_V1_QueryRegisteredTokens,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryRegisteredTokens, Umee_Leverage_V1_QueryRegisteredTokensResponse>

  func marketSummary(
    _ request: Umee_Leverage_V1_QueryMarketSummary,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryMarketSummary, Umee_Leverage_V1_QueryMarketSummaryResponse>

  func accountBalances(
    _ request: Umee_Leverage_V1_QueryAccountBalances,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryAccountBalances, Umee_Leverage_V1_QueryAccountBalancesResponse>

  func accountSummary(
    _ request: Umee_Leverage_V1_QueryAccountSummary,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryAccountSummary, Umee_Leverage_V1_QueryAccountSummaryResponse>

  func liquidationTargets(
    _ request: Umee_Leverage_V1_QueryLiquidationTargets,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryLiquidationTargets, Umee_Leverage_V1_QueryLiquidationTargetsResponse>

  func badDebts(
    _ request: Umee_Leverage_V1_QueryBadDebts,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryBadDebts, Umee_Leverage_V1_QueryBadDebtsResponse>

  func maxWithdraw(
    _ request: Umee_Leverage_V1_QueryMaxWithdraw,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryMaxWithdraw, Umee_Leverage_V1_QueryMaxWithdrawResponse>

  func maxBorrow(
    _ request: Umee_Leverage_V1_QueryMaxBorrow,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Leverage_V1_QueryMaxBorrow, Umee_Leverage_V1_QueryMaxBorrowResponse>
}

extension Umee_Leverage_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "umee.leverage.v1.Query"
  }

  /// Params queries the parameters of the x/leverage module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Umee_Leverage_V1_QueryParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryParams, Umee_Leverage_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// RegisteredTokens queries for all the registered tokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisteredTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registeredTokens(
    _ request: Umee_Leverage_V1_QueryRegisteredTokens,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryRegisteredTokens, Umee_Leverage_V1_QueryRegisteredTokensResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.registeredTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? []
    )
  }

  /// MarketSummary queries a base asset's current borrowing and supplying conditions.
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketSummary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marketSummary(
    _ request: Umee_Leverage_V1_QueryMarketSummary,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryMarketSummary, Umee_Leverage_V1_QueryMarketSummaryResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.marketSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketSummaryInterceptors() ?? []
    )
  }

  /// AccountBalances queries an account's current supply, collateral, and borrow positions.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountBalances(
    _ request: Umee_Leverage_V1_QueryAccountBalances,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryAccountBalances, Umee_Leverage_V1_QueryAccountBalancesResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.accountBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountBalancesInterceptors() ?? []
    )
  }

  /// AccountSummary queries USD values representing an account's total positions and borrowing limits. It requires oracle prices to return successfully.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountSummary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountSummary(
    _ request: Umee_Leverage_V1_QueryAccountSummary,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryAccountSummary, Umee_Leverage_V1_QueryAccountSummaryResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.accountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountSummaryInterceptors() ?? []
    )
  }

  /// LiquidationTargets queries a list of all borrower account addresses eligible for liquidation.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidationTargets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidationTargets(
    _ request: Umee_Leverage_V1_QueryLiquidationTargets,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryLiquidationTargets, Umee_Leverage_V1_QueryLiquidationTargetsResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.liquidationTargets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidationTargetsInterceptors() ?? []
    )
  }

  /// BadDebts queries a list of borrow positions that have been marked for bad debt repayment.
  ///
  /// - Parameters:
  ///   - request: Request to send to BadDebts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func badDebts(
    _ request: Umee_Leverage_V1_QueryBadDebts,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryBadDebts, Umee_Leverage_V1_QueryBadDebtsResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.badDebts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBadDebtsInterceptors() ?? []
    )
  }

  /// MaxWithdraw queries the maximum amount of a given token an address can withdraw.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxWithdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxWithdraw(
    _ request: Umee_Leverage_V1_QueryMaxWithdraw,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryMaxWithdraw, Umee_Leverage_V1_QueryMaxWithdrawResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.maxWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? []
    )
  }

  /// MaxBorrow queries the maximum amount of a given token an address can borrow.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxBorrow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxBorrow(
    _ request: Umee_Leverage_V1_QueryMaxBorrow,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Leverage_V1_QueryMaxBorrow, Umee_Leverage_V1_QueryMaxBorrowResponse> {
    return self.makeUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.maxBorrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Umee_Leverage_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Umee_Leverage_V1_QueryNIOClient")
internal final class Umee_Leverage_V1_QueryClient: Umee_Leverage_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the umee.leverage.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Umee_Leverage_V1_QueryNIOClient: Umee_Leverage_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the umee.leverage.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Leverage_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Umee_Leverage_V1_QueryParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryParams, Umee_Leverage_V1_QueryParamsResponse>

  func makeRegisteredTokensCall(
    _ request: Umee_Leverage_V1_QueryRegisteredTokens,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryRegisteredTokens, Umee_Leverage_V1_QueryRegisteredTokensResponse>

  func makeMarketSummaryCall(
    _ request: Umee_Leverage_V1_QueryMarketSummary,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryMarketSummary, Umee_Leverage_V1_QueryMarketSummaryResponse>

  func makeAccountBalancesCall(
    _ request: Umee_Leverage_V1_QueryAccountBalances,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryAccountBalances, Umee_Leverage_V1_QueryAccountBalancesResponse>

  func makeAccountSummaryCall(
    _ request: Umee_Leverage_V1_QueryAccountSummary,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryAccountSummary, Umee_Leverage_V1_QueryAccountSummaryResponse>

  func makeLiquidationTargetsCall(
    _ request: Umee_Leverage_V1_QueryLiquidationTargets,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryLiquidationTargets, Umee_Leverage_V1_QueryLiquidationTargetsResponse>

  func makeBadDebtsCall(
    _ request: Umee_Leverage_V1_QueryBadDebts,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryBadDebts, Umee_Leverage_V1_QueryBadDebtsResponse>

  func makeMaxWithdrawCall(
    _ request: Umee_Leverage_V1_QueryMaxWithdraw,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryMaxWithdraw, Umee_Leverage_V1_QueryMaxWithdrawResponse>

  func makeMaxBorrowCall(
    _ request: Umee_Leverage_V1_QueryMaxBorrow,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryMaxBorrow, Umee_Leverage_V1_QueryMaxBorrowResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Leverage_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Leverage_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Umee_Leverage_V1_QueryParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryParams, Umee_Leverage_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeRegisteredTokensCall(
    _ request: Umee_Leverage_V1_QueryRegisteredTokens,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryRegisteredTokens, Umee_Leverage_V1_QueryRegisteredTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.registeredTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? []
    )
  }

  internal func makeMarketSummaryCall(
    _ request: Umee_Leverage_V1_QueryMarketSummary,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryMarketSummary, Umee_Leverage_V1_QueryMarketSummaryResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.marketSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketSummaryInterceptors() ?? []
    )
  }

  internal func makeAccountBalancesCall(
    _ request: Umee_Leverage_V1_QueryAccountBalances,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryAccountBalances, Umee_Leverage_V1_QueryAccountBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.accountBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountBalancesInterceptors() ?? []
    )
  }

  internal func makeAccountSummaryCall(
    _ request: Umee_Leverage_V1_QueryAccountSummary,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryAccountSummary, Umee_Leverage_V1_QueryAccountSummaryResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.accountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountSummaryInterceptors() ?? []
    )
  }

  internal func makeLiquidationTargetsCall(
    _ request: Umee_Leverage_V1_QueryLiquidationTargets,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryLiquidationTargets, Umee_Leverage_V1_QueryLiquidationTargetsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.liquidationTargets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidationTargetsInterceptors() ?? []
    )
  }

  internal func makeBadDebtsCall(
    _ request: Umee_Leverage_V1_QueryBadDebts,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryBadDebts, Umee_Leverage_V1_QueryBadDebtsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.badDebts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBadDebtsInterceptors() ?? []
    )
  }

  internal func makeMaxWithdrawCall(
    _ request: Umee_Leverage_V1_QueryMaxWithdraw,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryMaxWithdraw, Umee_Leverage_V1_QueryMaxWithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.maxWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? []
    )
  }

  internal func makeMaxBorrowCall(
    _ request: Umee_Leverage_V1_QueryMaxBorrow,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Leverage_V1_QueryMaxBorrow, Umee_Leverage_V1_QueryMaxBorrowResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.maxBorrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Leverage_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Umee_Leverage_V1_QueryParams,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func registeredTokens(
    _ request: Umee_Leverage_V1_QueryRegisteredTokens,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryRegisteredTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.registeredTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? []
    )
  }

  internal func marketSummary(
    _ request: Umee_Leverage_V1_QueryMarketSummary,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryMarketSummaryResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.marketSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketSummaryInterceptors() ?? []
    )
  }

  internal func accountBalances(
    _ request: Umee_Leverage_V1_QueryAccountBalances,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryAccountBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.accountBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountBalancesInterceptors() ?? []
    )
  }

  internal func accountSummary(
    _ request: Umee_Leverage_V1_QueryAccountSummary,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryAccountSummaryResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.accountSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountSummaryInterceptors() ?? []
    )
  }

  internal func liquidationTargets(
    _ request: Umee_Leverage_V1_QueryLiquidationTargets,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryLiquidationTargetsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.liquidationTargets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidationTargetsInterceptors() ?? []
    )
  }

  internal func badDebts(
    _ request: Umee_Leverage_V1_QueryBadDebts,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryBadDebtsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.badDebts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBadDebtsInterceptors() ?? []
    )
  }

  internal func maxWithdraw(
    _ request: Umee_Leverage_V1_QueryMaxWithdraw,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryMaxWithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.maxWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? []
    )
  }

  internal func maxBorrow(
    _ request: Umee_Leverage_V1_QueryMaxBorrow,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Leverage_V1_QueryMaxBorrowResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Leverage_V1_QueryClientMetadata.Methods.maxBorrow.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Umee_Leverage_V1_QueryAsyncClient: Umee_Leverage_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Umee_Leverage_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryParams, Umee_Leverage_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'registeredTokens'.
  func makeRegisteredTokensInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryRegisteredTokens, Umee_Leverage_V1_QueryRegisteredTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'marketSummary'.
  func makeMarketSummaryInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryMarketSummary, Umee_Leverage_V1_QueryMarketSummaryResponse>]

  /// - Returns: Interceptors to use when invoking 'accountBalances'.
  func makeAccountBalancesInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryAccountBalances, Umee_Leverage_V1_QueryAccountBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'accountSummary'.
  func makeAccountSummaryInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryAccountSummary, Umee_Leverage_V1_QueryAccountSummaryResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidationTargets'.
  func makeLiquidationTargetsInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryLiquidationTargets, Umee_Leverage_V1_QueryLiquidationTargetsResponse>]

  /// - Returns: Interceptors to use when invoking 'badDebts'.
  func makeBadDebtsInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryBadDebts, Umee_Leverage_V1_QueryBadDebtsResponse>]

  /// - Returns: Interceptors to use when invoking 'maxWithdraw'.
  func makeMaxWithdrawInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryMaxWithdraw, Umee_Leverage_V1_QueryMaxWithdrawResponse>]

  /// - Returns: Interceptors to use when invoking 'maxBorrow'.
  func makeMaxBorrowInterceptors() -> [ClientInterceptor<Umee_Leverage_V1_QueryMaxBorrow, Umee_Leverage_V1_QueryMaxBorrowResponse>]
}

internal enum Umee_Leverage_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "umee.leverage.v1.Query",
    methods: [
      Umee_Leverage_V1_QueryClientMetadata.Methods.params,
      Umee_Leverage_V1_QueryClientMetadata.Methods.registeredTokens,
      Umee_Leverage_V1_QueryClientMetadata.Methods.marketSummary,
      Umee_Leverage_V1_QueryClientMetadata.Methods.accountBalances,
      Umee_Leverage_V1_QueryClientMetadata.Methods.accountSummary,
      Umee_Leverage_V1_QueryClientMetadata.Methods.liquidationTargets,
      Umee_Leverage_V1_QueryClientMetadata.Methods.badDebts,
      Umee_Leverage_V1_QueryClientMetadata.Methods.maxWithdraw,
      Umee_Leverage_V1_QueryClientMetadata.Methods.maxBorrow,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/umee.leverage.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let registeredTokens = GRPCMethodDescriptor(
      name: "RegisteredTokens",
      path: "/umee.leverage.v1.Query/RegisteredTokens",
      type: GRPCCallType.unary
    )

    internal static let marketSummary = GRPCMethodDescriptor(
      name: "MarketSummary",
      path: "/umee.leverage.v1.Query/MarketSummary",
      type: GRPCCallType.unary
    )

    internal static let accountBalances = GRPCMethodDescriptor(
      name: "AccountBalances",
      path: "/umee.leverage.v1.Query/AccountBalances",
      type: GRPCCallType.unary
    )

    internal static let accountSummary = GRPCMethodDescriptor(
      name: "AccountSummary",
      path: "/umee.leverage.v1.Query/AccountSummary",
      type: GRPCCallType.unary
    )

    internal static let liquidationTargets = GRPCMethodDescriptor(
      name: "LiquidationTargets",
      path: "/umee.leverage.v1.Query/LiquidationTargets",
      type: GRPCCallType.unary
    )

    internal static let badDebts = GRPCMethodDescriptor(
      name: "BadDebts",
      path: "/umee.leverage.v1.Query/BadDebts",
      type: GRPCCallType.unary
    )

    internal static let maxWithdraw = GRPCMethodDescriptor(
      name: "MaxWithdraw",
      path: "/umee.leverage.v1.Query/MaxWithdraw",
      type: GRPCCallType.unary
    )

    internal static let maxBorrow = GRPCMethodDescriptor(
      name: "MaxBorrow",
      path: "/umee.leverage.v1.Query/MaxBorrow",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umee_Leverage_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Umee_Leverage_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the x/leverage module.
  func params(request: Umee_Leverage_V1_QueryParams, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryParamsResponse>

  /// RegisteredTokens queries for all the registered tokens.
  func registeredTokens(request: Umee_Leverage_V1_QueryRegisteredTokens, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryRegisteredTokensResponse>

  /// MarketSummary queries a base asset's current borrowing and supplying conditions.
  func marketSummary(request: Umee_Leverage_V1_QueryMarketSummary, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryMarketSummaryResponse>

  /// AccountBalances queries an account's current supply, collateral, and borrow positions.
  func accountBalances(request: Umee_Leverage_V1_QueryAccountBalances, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryAccountBalancesResponse>

  /// AccountSummary queries USD values representing an account's total positions and borrowing limits. It requires oracle prices to return successfully.
  func accountSummary(request: Umee_Leverage_V1_QueryAccountSummary, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryAccountSummaryResponse>

  /// LiquidationTargets queries a list of all borrower account addresses eligible for liquidation.
  func liquidationTargets(request: Umee_Leverage_V1_QueryLiquidationTargets, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryLiquidationTargetsResponse>

  /// BadDebts queries a list of borrow positions that have been marked for bad debt repayment.
  func badDebts(request: Umee_Leverage_V1_QueryBadDebts, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryBadDebtsResponse>

  /// MaxWithdraw queries the maximum amount of a given token an address can withdraw.
  func maxWithdraw(request: Umee_Leverage_V1_QueryMaxWithdraw, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryMaxWithdrawResponse>

  /// MaxBorrow queries the maximum amount of a given token an address can borrow.
  func maxBorrow(request: Umee_Leverage_V1_QueryMaxBorrow, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Leverage_V1_QueryMaxBorrowResponse>
}

extension Umee_Leverage_V1_QueryProvider {
  internal var serviceName: Substring {
    return Umee_Leverage_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryParams>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "RegisteredTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryRegisteredTokens>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryRegisteredTokensResponse>(),
        interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? [],
        userFunction: self.registeredTokens(request:context:)
      )

    case "MarketSummary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryMarketSummary>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryMarketSummaryResponse>(),
        interceptors: self.interceptors?.makeMarketSummaryInterceptors() ?? [],
        userFunction: self.marketSummary(request:context:)
      )

    case "AccountBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryAccountBalances>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryAccountBalancesResponse>(),
        interceptors: self.interceptors?.makeAccountBalancesInterceptors() ?? [],
        userFunction: self.accountBalances(request:context:)
      )

    case "AccountSummary":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryAccountSummary>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryAccountSummaryResponse>(),
        interceptors: self.interceptors?.makeAccountSummaryInterceptors() ?? [],
        userFunction: self.accountSummary(request:context:)
      )

    case "LiquidationTargets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryLiquidationTargets>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryLiquidationTargetsResponse>(),
        interceptors: self.interceptors?.makeLiquidationTargetsInterceptors() ?? [],
        userFunction: self.liquidationTargets(request:context:)
      )

    case "BadDebts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryBadDebts>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryBadDebtsResponse>(),
        interceptors: self.interceptors?.makeBadDebtsInterceptors() ?? [],
        userFunction: self.badDebts(request:context:)
      )

    case "MaxWithdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryMaxWithdraw>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryMaxWithdrawResponse>(),
        interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? [],
        userFunction: self.maxWithdraw(request:context:)
      )

    case "MaxBorrow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryMaxBorrow>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryMaxBorrowResponse>(),
        interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? [],
        userFunction: self.maxBorrow(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Leverage_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Leverage_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the x/leverage module.
  @Sendable func params(
    request: Umee_Leverage_V1_QueryParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryParamsResponse

  /// RegisteredTokens queries for all the registered tokens.
  @Sendable func registeredTokens(
    request: Umee_Leverage_V1_QueryRegisteredTokens,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryRegisteredTokensResponse

  /// MarketSummary queries a base asset's current borrowing and supplying conditions.
  @Sendable func marketSummary(
    request: Umee_Leverage_V1_QueryMarketSummary,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryMarketSummaryResponse

  /// AccountBalances queries an account's current supply, collateral, and borrow positions.
  @Sendable func accountBalances(
    request: Umee_Leverage_V1_QueryAccountBalances,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryAccountBalancesResponse

  /// AccountSummary queries USD values representing an account's total positions and borrowing limits. It requires oracle prices to return successfully.
  @Sendable func accountSummary(
    request: Umee_Leverage_V1_QueryAccountSummary,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryAccountSummaryResponse

  /// LiquidationTargets queries a list of all borrower account addresses eligible for liquidation.
  @Sendable func liquidationTargets(
    request: Umee_Leverage_V1_QueryLiquidationTargets,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryLiquidationTargetsResponse

  /// BadDebts queries a list of borrow positions that have been marked for bad debt repayment.
  @Sendable func badDebts(
    request: Umee_Leverage_V1_QueryBadDebts,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryBadDebtsResponse

  /// MaxWithdraw queries the maximum amount of a given token an address can withdraw.
  @Sendable func maxWithdraw(
    request: Umee_Leverage_V1_QueryMaxWithdraw,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryMaxWithdrawResponse

  /// MaxBorrow queries the maximum amount of a given token an address can borrow.
  @Sendable func maxBorrow(
    request: Umee_Leverage_V1_QueryMaxBorrow,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Leverage_V1_QueryMaxBorrowResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Leverage_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Leverage_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Umee_Leverage_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Umee_Leverage_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryParams>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "RegisteredTokens":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryRegisteredTokens>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryRegisteredTokensResponse>(),
        interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? [],
        wrapping: self.registeredTokens(request:context:)
      )

    case "MarketSummary":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryMarketSummary>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryMarketSummaryResponse>(),
        interceptors: self.interceptors?.makeMarketSummaryInterceptors() ?? [],
        wrapping: self.marketSummary(request:context:)
      )

    case "AccountBalances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryAccountBalances>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryAccountBalancesResponse>(),
        interceptors: self.interceptors?.makeAccountBalancesInterceptors() ?? [],
        wrapping: self.accountBalances(request:context:)
      )

    case "AccountSummary":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryAccountSummary>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryAccountSummaryResponse>(),
        interceptors: self.interceptors?.makeAccountSummaryInterceptors() ?? [],
        wrapping: self.accountSummary(request:context:)
      )

    case "LiquidationTargets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryLiquidationTargets>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryLiquidationTargetsResponse>(),
        interceptors: self.interceptors?.makeLiquidationTargetsInterceptors() ?? [],
        wrapping: self.liquidationTargets(request:context:)
      )

    case "BadDebts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryBadDebts>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryBadDebtsResponse>(),
        interceptors: self.interceptors?.makeBadDebtsInterceptors() ?? [],
        wrapping: self.badDebts(request:context:)
      )

    case "MaxWithdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryMaxWithdraw>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryMaxWithdrawResponse>(),
        interceptors: self.interceptors?.makeMaxWithdrawInterceptors() ?? [],
        wrapping: self.maxWithdraw(request:context:)
      )

    case "MaxBorrow":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Leverage_V1_QueryMaxBorrow>(),
        responseSerializer: ProtobufSerializer<Umee_Leverage_V1_QueryMaxBorrowResponse>(),
        interceptors: self.interceptors?.makeMaxBorrowInterceptors() ?? [],
        wrapping: self.maxBorrow(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umee_Leverage_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryParams, Umee_Leverage_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'registeredTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisteredTokensInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryRegisteredTokens, Umee_Leverage_V1_QueryRegisteredTokensResponse>]

  /// - Returns: Interceptors to use when handling 'marketSummary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketSummaryInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryMarketSummary, Umee_Leverage_V1_QueryMarketSummaryResponse>]

  /// - Returns: Interceptors to use when handling 'accountBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountBalancesInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryAccountBalances, Umee_Leverage_V1_QueryAccountBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'accountSummary'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountSummaryInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryAccountSummary, Umee_Leverage_V1_QueryAccountSummaryResponse>]

  /// - Returns: Interceptors to use when handling 'liquidationTargets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidationTargetsInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryLiquidationTargets, Umee_Leverage_V1_QueryLiquidationTargetsResponse>]

  /// - Returns: Interceptors to use when handling 'badDebts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBadDebtsInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryBadDebts, Umee_Leverage_V1_QueryBadDebtsResponse>]

  /// - Returns: Interceptors to use when handling 'maxWithdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxWithdrawInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryMaxWithdraw, Umee_Leverage_V1_QueryMaxWithdrawResponse>]

  /// - Returns: Interceptors to use when handling 'maxBorrow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxBorrowInterceptors() -> [ServerInterceptor<Umee_Leverage_V1_QueryMaxBorrow, Umee_Leverage_V1_QueryMaxBorrowResponse>]
}

internal enum Umee_Leverage_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "umee.leverage.v1.Query",
    methods: [
      Umee_Leverage_V1_QueryServerMetadata.Methods.params,
      Umee_Leverage_V1_QueryServerMetadata.Methods.registeredTokens,
      Umee_Leverage_V1_QueryServerMetadata.Methods.marketSummary,
      Umee_Leverage_V1_QueryServerMetadata.Methods.accountBalances,
      Umee_Leverage_V1_QueryServerMetadata.Methods.accountSummary,
      Umee_Leverage_V1_QueryServerMetadata.Methods.liquidationTargets,
      Umee_Leverage_V1_QueryServerMetadata.Methods.badDebts,
      Umee_Leverage_V1_QueryServerMetadata.Methods.maxWithdraw,
      Umee_Leverage_V1_QueryServerMetadata.Methods.maxBorrow,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/umee.leverage.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let registeredTokens = GRPCMethodDescriptor(
      name: "RegisteredTokens",
      path: "/umee.leverage.v1.Query/RegisteredTokens",
      type: GRPCCallType.unary
    )

    internal static let marketSummary = GRPCMethodDescriptor(
      name: "MarketSummary",
      path: "/umee.leverage.v1.Query/MarketSummary",
      type: GRPCCallType.unary
    )

    internal static let accountBalances = GRPCMethodDescriptor(
      name: "AccountBalances",
      path: "/umee.leverage.v1.Query/AccountBalances",
      type: GRPCCallType.unary
    )

    internal static let accountSummary = GRPCMethodDescriptor(
      name: "AccountSummary",
      path: "/umee.leverage.v1.Query/AccountSummary",
      type: GRPCCallType.unary
    )

    internal static let liquidationTargets = GRPCMethodDescriptor(
      name: "LiquidationTargets",
      path: "/umee.leverage.v1.Query/LiquidationTargets",
      type: GRPCCallType.unary
    )

    internal static let badDebts = GRPCMethodDescriptor(
      name: "BadDebts",
      path: "/umee.leverage.v1.Query/BadDebts",
      type: GRPCCallType.unary
    )

    internal static let maxWithdraw = GRPCMethodDescriptor(
      name: "MaxWithdraw",
      path: "/umee.leverage.v1.Query/MaxWithdraw",
      type: GRPCCallType.unary
    )

    internal static let maxBorrow = GRPCMethodDescriptor(
      name: "MaxBorrow",
      path: "/umee.leverage.v1.Query/MaxBorrow",
      type: GRPCCallType.unary
    )
  }
}
