// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_vault.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Types_VaultType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownVault // = 0
  case asgardVault // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownVault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownVault
    case 1: self = .asgardVault
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownVault: return 0
    case .asgardVault: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Types_VaultType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Types_VaultType] = [
    .unknownVault,
    .asgardVault,
  ]
}

#endif  // swift(>=4.2)

enum Types_VaultStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case inactiveVault // = 0
  case activeVault // = 1
  case retiringVault // = 2
  case initVault // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .inactiveVault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .inactiveVault
    case 1: self = .activeVault
    case 2: self = .retiringVault
    case 3: self = .initVault
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .inactiveVault: return 0
    case .activeVault: return 1
    case .retiringVault: return 2
    case .initVault: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Types_VaultStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Types_VaultStatus] = [
    .inactiveVault,
    .activeVault,
    .retiringVault,
    .initVault,
  ]
}

#endif  // swift(>=4.2)

struct Types_Vault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockHeight: Int64 = 0

  var pubKey: String = String()

  var coins: [Common_Coin] = []

  var type: Types_VaultType = .unknownVault

  var status: Types_VaultStatus = .inactiveVault

  var statusSince: Int64 = 0

  var membership: [String] = []

  var chains: [String] = []

  var inboundTxCount: Int64 = 0

  var outboundTxCount: Int64 = 0

  var pendingTxBlockHeights: [Int64] = []

  var routers: [Types_ChainContract] = []

  var frozen: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_VaultType: @unchecked Sendable {}
extension Types_VaultStatus: @unchecked Sendable {}
extension Types_Vault: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_VaultType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UnknownVault"),
    1: .same(proto: "AsgardVault"),
  ]
}

extension Types_VaultStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "InactiveVault"),
    1: .same(proto: "ActiveVault"),
    2: .same(proto: "RetiringVault"),
    3: .same(proto: "InitVault"),
  ]
}

extension Types_Vault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_height"),
    2: .standard(proto: "pub_key"),
    3: .same(proto: "coins"),
    4: .same(proto: "type"),
    5: .same(proto: "status"),
    6: .standard(proto: "status_since"),
    7: .same(proto: "membership"),
    8: .same(proto: "chains"),
    9: .standard(proto: "inbound_tx_count"),
    10: .standard(proto: "outbound_tx_count"),
    11: .standard(proto: "pending_tx_block_heights"),
    22: .same(proto: "routers"),
    23: .same(proto: "frozen"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.blockHeight) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pubKey) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.statusSince) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.membership) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.chains) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.inboundTxCount) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.outboundTxCount) }()
      case 11: try { try decoder.decodeRepeatedInt64Field(value: &self.pendingTxBlockHeights) }()
      case 22: try { try decoder.decodeRepeatedMessageField(value: &self.routers) }()
      case 23: try { try decoder.decodeRepeatedStringField(value: &self.frozen) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.blockHeight, fieldNumber: 1)
    }
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 2)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 3)
    }
    if self.type != .unknownVault {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    if self.status != .inactiveVault {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    if self.statusSince != 0 {
      try visitor.visitSingularInt64Field(value: self.statusSince, fieldNumber: 6)
    }
    if !self.membership.isEmpty {
      try visitor.visitRepeatedStringField(value: self.membership, fieldNumber: 7)
    }
    if !self.chains.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chains, fieldNumber: 8)
    }
    if self.inboundTxCount != 0 {
      try visitor.visitSingularInt64Field(value: self.inboundTxCount, fieldNumber: 9)
    }
    if self.outboundTxCount != 0 {
      try visitor.visitSingularInt64Field(value: self.outboundTxCount, fieldNumber: 10)
    }
    if !self.pendingTxBlockHeights.isEmpty {
      try visitor.visitPackedInt64Field(value: self.pendingTxBlockHeights, fieldNumber: 11)
    }
    if !self.routers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routers, fieldNumber: 22)
    }
    if !self.frozen.isEmpty {
      try visitor.visitRepeatedStringField(value: self.frozen, fieldNumber: 23)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_Vault, rhs: Types_Vault) -> Bool {
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.pubKey != rhs.pubKey {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.type != rhs.type {return false}
    if lhs.status != rhs.status {return false}
    if lhs.statusSince != rhs.statusSince {return false}
    if lhs.membership != rhs.membership {return false}
    if lhs.chains != rhs.chains {return false}
    if lhs.inboundTxCount != rhs.inboundTxCount {return false}
    if lhs.outboundTxCount != rhs.outboundTxCount {return false}
    if lhs.pendingTxBlockHeights != rhs.pendingTxBlockHeights {return false}
    if lhs.routers != rhs.routers {return false}
    if lhs.frozen != rhs.frozen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
