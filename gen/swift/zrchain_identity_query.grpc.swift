//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: zrchain/identity/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Zrchain_Identity_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Zrchain_Identity_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Zrchain_Identity_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_QueryParamsRequest, Zrchain_Identity_QueryParamsResponse>

  func workspaces(
    _ request: Zrchain_Identity_QueryWorkspacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_QueryWorkspacesRequest, Zrchain_Identity_QueryWorkspacesResponse>

  func workspaceByAddress(
    _ request: Zrchain_Identity_QueryWorkspaceByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_QueryWorkspaceByAddressRequest, Zrchain_Identity_QueryWorkspaceByAddressResponse>

  func keyrings(
    _ request: Zrchain_Identity_QueryKeyringsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_QueryKeyringsRequest, Zrchain_Identity_QueryKeyringsResponse>

  func keyringByAddress(
    _ request: Zrchain_Identity_QueryKeyringByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_QueryKeyringByAddressRequest, Zrchain_Identity_QueryKeyringByAddressResponse>
}

extension Zrchain_Identity_QueryClientProtocol {
  internal var serviceName: String {
    return "zrchain.identity.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Zrchain_Identity_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_QueryParamsRequest, Zrchain_Identity_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a list of Workspaces items.
  ///
  /// - Parameters:
  ///   - request: Request to send to Workspaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspaces(
    _ request: Zrchain_Identity_QueryWorkspacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_QueryWorkspacesRequest, Zrchain_Identity_QueryWorkspacesResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.workspaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWorkspacesInterceptors() ?? []
    )
  }

  /// Queries a list of WorkspaceByAddress items.
  ///
  /// - Parameters:
  ///   - request: Request to send to WorkspaceByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspaceByAddress(
    _ request: Zrchain_Identity_QueryWorkspaceByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_QueryWorkspaceByAddressRequest, Zrchain_Identity_QueryWorkspaceByAddressResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.workspaceByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWorkspaceByAddressInterceptors() ?? []
    )
  }

  /// Queries a list of Keyrings items.
  ///
  /// - Parameters:
  ///   - request: Request to send to Keyrings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyrings(
    _ request: Zrchain_Identity_QueryKeyringsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_QueryKeyringsRequest, Zrchain_Identity_QueryKeyringsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.keyrings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyringsInterceptors() ?? []
    )
  }

  /// Queries a list of KeyringByAddress items.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyringByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyringByAddress(
    _ request: Zrchain_Identity_QueryKeyringByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_QueryKeyringByAddressRequest, Zrchain_Identity_QueryKeyringByAddressResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.keyringByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyringByAddressInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Zrchain_Identity_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Zrchain_Identity_QueryNIOClient")
internal final class Zrchain_Identity_QueryClient: Zrchain_Identity_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the zrchain.identity.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Zrchain_Identity_QueryNIOClient: Zrchain_Identity_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the zrchain.identity.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Identity_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Zrchain_Identity_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryParamsRequest, Zrchain_Identity_QueryParamsResponse>

  func makeWorkspacesCall(
    _ request: Zrchain_Identity_QueryWorkspacesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryWorkspacesRequest, Zrchain_Identity_QueryWorkspacesResponse>

  func makeWorkspaceByAddressCall(
    _ request: Zrchain_Identity_QueryWorkspaceByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryWorkspaceByAddressRequest, Zrchain_Identity_QueryWorkspaceByAddressResponse>

  func makeKeyringsCall(
    _ request: Zrchain_Identity_QueryKeyringsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryKeyringsRequest, Zrchain_Identity_QueryKeyringsResponse>

  func makeKeyringByAddressCall(
    _ request: Zrchain_Identity_QueryKeyringByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryKeyringByAddressRequest, Zrchain_Identity_QueryKeyringByAddressResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Identity_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Identity_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Zrchain_Identity_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryParamsRequest, Zrchain_Identity_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeWorkspacesCall(
    _ request: Zrchain_Identity_QueryWorkspacesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryWorkspacesRequest, Zrchain_Identity_QueryWorkspacesResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.workspaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWorkspacesInterceptors() ?? []
    )
  }

  internal func makeWorkspaceByAddressCall(
    _ request: Zrchain_Identity_QueryWorkspaceByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryWorkspaceByAddressRequest, Zrchain_Identity_QueryWorkspaceByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.workspaceByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWorkspaceByAddressInterceptors() ?? []
    )
  }

  internal func makeKeyringsCall(
    _ request: Zrchain_Identity_QueryKeyringsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryKeyringsRequest, Zrchain_Identity_QueryKeyringsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.keyrings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyringsInterceptors() ?? []
    )
  }

  internal func makeKeyringByAddressCall(
    _ request: Zrchain_Identity_QueryKeyringByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_QueryKeyringByAddressRequest, Zrchain_Identity_QueryKeyringByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.keyringByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyringByAddressInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Identity_QueryAsyncClientProtocol {
  internal func params(
    _ request: Zrchain_Identity_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func workspaces(
    _ request: Zrchain_Identity_QueryWorkspacesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_QueryWorkspacesResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.workspaces.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWorkspacesInterceptors() ?? []
    )
  }

  internal func workspaceByAddress(
    _ request: Zrchain_Identity_QueryWorkspaceByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_QueryWorkspaceByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.workspaceByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWorkspaceByAddressInterceptors() ?? []
    )
  }

  internal func keyrings(
    _ request: Zrchain_Identity_QueryKeyringsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_QueryKeyringsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.keyrings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyringsInterceptors() ?? []
    )
  }

  internal func keyringByAddress(
    _ request: Zrchain_Identity_QueryKeyringByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_QueryKeyringByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_QueryClientMetadata.Methods.keyringByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyringByAddressInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Zrchain_Identity_QueryAsyncClient: Zrchain_Identity_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Identity_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Zrchain_Identity_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Zrchain_Identity_QueryParamsRequest, Zrchain_Identity_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'workspaces'.
  func makeWorkspacesInterceptors() -> [ClientInterceptor<Zrchain_Identity_QueryWorkspacesRequest, Zrchain_Identity_QueryWorkspacesResponse>]

  /// - Returns: Interceptors to use when invoking 'workspaceByAddress'.
  func makeWorkspaceByAddressInterceptors() -> [ClientInterceptor<Zrchain_Identity_QueryWorkspaceByAddressRequest, Zrchain_Identity_QueryWorkspaceByAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'keyrings'.
  func makeKeyringsInterceptors() -> [ClientInterceptor<Zrchain_Identity_QueryKeyringsRequest, Zrchain_Identity_QueryKeyringsResponse>]

  /// - Returns: Interceptors to use when invoking 'keyringByAddress'.
  func makeKeyringByAddressInterceptors() -> [ClientInterceptor<Zrchain_Identity_QueryKeyringByAddressRequest, Zrchain_Identity_QueryKeyringByAddressResponse>]
}

internal enum Zrchain_Identity_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "zrchain.identity.Query",
    methods: [
      Zrchain_Identity_QueryClientMetadata.Methods.params,
      Zrchain_Identity_QueryClientMetadata.Methods.workspaces,
      Zrchain_Identity_QueryClientMetadata.Methods.workspaceByAddress,
      Zrchain_Identity_QueryClientMetadata.Methods.keyrings,
      Zrchain_Identity_QueryClientMetadata.Methods.keyringByAddress,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/zrchain.identity.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let workspaces = GRPCMethodDescriptor(
      name: "Workspaces",
      path: "/zrchain.identity.Query/Workspaces",
      type: GRPCCallType.unary
    )

    internal static let workspaceByAddress = GRPCMethodDescriptor(
      name: "WorkspaceByAddress",
      path: "/zrchain.identity.Query/WorkspaceByAddress",
      type: GRPCCallType.unary
    )

    internal static let keyrings = GRPCMethodDescriptor(
      name: "Keyrings",
      path: "/zrchain.identity.Query/Keyrings",
      type: GRPCCallType.unary
    )

    internal static let keyringByAddress = GRPCMethodDescriptor(
      name: "KeyringByAddress",
      path: "/zrchain.identity.Query/KeyringByAddress",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Zrchain_Identity_QueryProvider: CallHandlerProvider {
  var interceptors: Zrchain_Identity_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Zrchain_Identity_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_QueryParamsResponse>

  /// Queries a list of Workspaces items.
  func workspaces(request: Zrchain_Identity_QueryWorkspacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_QueryWorkspacesResponse>

  /// Queries a list of WorkspaceByAddress items.
  func workspaceByAddress(request: Zrchain_Identity_QueryWorkspaceByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_QueryWorkspaceByAddressResponse>

  /// Queries a list of Keyrings items.
  func keyrings(request: Zrchain_Identity_QueryKeyringsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_QueryKeyringsResponse>

  /// Queries a list of KeyringByAddress items.
  func keyringByAddress(request: Zrchain_Identity_QueryKeyringByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_QueryKeyringByAddressResponse>
}

extension Zrchain_Identity_QueryProvider {
  internal var serviceName: Substring {
    return Zrchain_Identity_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Workspaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryWorkspacesRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryWorkspacesResponse>(),
        interceptors: self.interceptors?.makeWorkspacesInterceptors() ?? [],
        userFunction: self.workspaces(request:context:)
      )

    case "WorkspaceByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryWorkspaceByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryWorkspaceByAddressResponse>(),
        interceptors: self.interceptors?.makeWorkspaceByAddressInterceptors() ?? [],
        userFunction: self.workspaceByAddress(request:context:)
      )

    case "Keyrings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryKeyringsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryKeyringsResponse>(),
        interceptors: self.interceptors?.makeKeyringsInterceptors() ?? [],
        userFunction: self.keyrings(request:context:)
      )

    case "KeyringByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryKeyringByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryKeyringByAddressResponse>(),
        interceptors: self.interceptors?.makeKeyringByAddressInterceptors() ?? [],
        userFunction: self.keyringByAddress(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Identity_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Identity_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Zrchain_Identity_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_QueryParamsResponse

  /// Queries a list of Workspaces items.
  @Sendable func workspaces(
    request: Zrchain_Identity_QueryWorkspacesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_QueryWorkspacesResponse

  /// Queries a list of WorkspaceByAddress items.
  @Sendable func workspaceByAddress(
    request: Zrchain_Identity_QueryWorkspaceByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_QueryWorkspaceByAddressResponse

  /// Queries a list of Keyrings items.
  @Sendable func keyrings(
    request: Zrchain_Identity_QueryKeyringsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_QueryKeyringsResponse

  /// Queries a list of KeyringByAddress items.
  @Sendable func keyringByAddress(
    request: Zrchain_Identity_QueryKeyringByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_QueryKeyringByAddressResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Identity_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Identity_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Zrchain_Identity_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Zrchain_Identity_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Workspaces":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryWorkspacesRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryWorkspacesResponse>(),
        interceptors: self.interceptors?.makeWorkspacesInterceptors() ?? [],
        wrapping: self.workspaces(request:context:)
      )

    case "WorkspaceByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryWorkspaceByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryWorkspaceByAddressResponse>(),
        interceptors: self.interceptors?.makeWorkspaceByAddressInterceptors() ?? [],
        wrapping: self.workspaceByAddress(request:context:)
      )

    case "Keyrings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryKeyringsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryKeyringsResponse>(),
        interceptors: self.interceptors?.makeKeyringsInterceptors() ?? [],
        wrapping: self.keyrings(request:context:)
      )

    case "KeyringByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_QueryKeyringByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_QueryKeyringByAddressResponse>(),
        interceptors: self.interceptors?.makeKeyringByAddressInterceptors() ?? [],
        wrapping: self.keyringByAddress(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Zrchain_Identity_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Zrchain_Identity_QueryParamsRequest, Zrchain_Identity_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'workspaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWorkspacesInterceptors() -> [ServerInterceptor<Zrchain_Identity_QueryWorkspacesRequest, Zrchain_Identity_QueryWorkspacesResponse>]

  /// - Returns: Interceptors to use when handling 'workspaceByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWorkspaceByAddressInterceptors() -> [ServerInterceptor<Zrchain_Identity_QueryWorkspaceByAddressRequest, Zrchain_Identity_QueryWorkspaceByAddressResponse>]

  /// - Returns: Interceptors to use when handling 'keyrings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyringsInterceptors() -> [ServerInterceptor<Zrchain_Identity_QueryKeyringsRequest, Zrchain_Identity_QueryKeyringsResponse>]

  /// - Returns: Interceptors to use when handling 'keyringByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyringByAddressInterceptors() -> [ServerInterceptor<Zrchain_Identity_QueryKeyringByAddressRequest, Zrchain_Identity_QueryKeyringByAddressResponse>]
}

internal enum Zrchain_Identity_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "zrchain.identity.Query",
    methods: [
      Zrchain_Identity_QueryServerMetadata.Methods.params,
      Zrchain_Identity_QueryServerMetadata.Methods.workspaces,
      Zrchain_Identity_QueryServerMetadata.Methods.workspaceByAddress,
      Zrchain_Identity_QueryServerMetadata.Methods.keyrings,
      Zrchain_Identity_QueryServerMetadata.Methods.keyringByAddress,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/zrchain.identity.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let workspaces = GRPCMethodDescriptor(
      name: "Workspaces",
      path: "/zrchain.identity.Query/Workspaces",
      type: GRPCCallType.unary
    )

    internal static let workspaceByAddress = GRPCMethodDescriptor(
      name: "WorkspaceByAddress",
      path: "/zrchain.identity.Query/WorkspaceByAddress",
      type: GRPCCallType.unary
    )

    internal static let keyrings = GRPCMethodDescriptor(
      name: "Keyrings",
      path: "/zrchain.identity.Query/Keyrings",
      type: GRPCCallType.unary
    )

    internal static let keyringByAddress = GRPCMethodDescriptor(
      name: "KeyringByAddress",
      path: "/zrchain.identity.Query/KeyringByAddress",
      type: GRPCCallType.unary
    )
  }
}
