//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/wasmx/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the wasmx Msg service.
///
/// Usage: instantiate `Injective_Wasmx_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Wasmx_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? { get }

  func updateRegistryContractParams(
    _ request: Injective_Wasmx_V1_MsgUpdateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Wasmx_V1_MsgUpdateContract, Injective_Wasmx_V1_MsgUpdateContractResponse>

  func activateRegistryContract(
    _ request: Injective_Wasmx_V1_MsgActivateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Wasmx_V1_MsgActivateContract, Injective_Wasmx_V1_MsgActivateContractResponse>

  func deactivateRegistryContract(
    _ request: Injective_Wasmx_V1_MsgDeactivateContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Wasmx_V1_MsgDeactivateContract, Injective_Wasmx_V1_MsgDeactivateContractResponse>

  func executeContractCompat(
    _ request: Injective_Wasmx_V1_MsgExecuteContractCompat,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Wasmx_V1_MsgExecuteContractCompat, Injective_Wasmx_V1_MsgExecuteContractCompatResponse>

  func updateParams(
    _ request: Injective_Wasmx_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Wasmx_V1_MsgUpdateParams, Injective_Wasmx_V1_MsgUpdateParamsResponse>

  func registerContract(
    _ request: Injective_Wasmx_V1_MsgRegisterContract,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Wasmx_V1_MsgRegisterContract, Injective_Wasmx_V1_MsgRegisterContractResponse>
}

extension Injective_Wasmx_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "injective.wasmx.v1.Msg"
  }

  /// Unary call to UpdateRegistryContractParams
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateRegistryContractParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateRegistryContractParams(
    _ request: Injective_Wasmx_V1_MsgUpdateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Wasmx_V1_MsgUpdateContract, Injective_Wasmx_V1_MsgUpdateContractResponse> {
    return self.makeUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.updateRegistryContractParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRegistryContractParamsInterceptors() ?? []
    )
  }

  /// Unary call to ActivateRegistryContract
  ///
  /// - Parameters:
  ///   - request: Request to send to ActivateRegistryContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activateRegistryContract(
    _ request: Injective_Wasmx_V1_MsgActivateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Wasmx_V1_MsgActivateContract, Injective_Wasmx_V1_MsgActivateContractResponse> {
    return self.makeUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.activateRegistryContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateRegistryContractInterceptors() ?? []
    )
  }

  /// Unary call to DeactivateRegistryContract
  ///
  /// - Parameters:
  ///   - request: Request to send to DeactivateRegistryContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deactivateRegistryContract(
    _ request: Injective_Wasmx_V1_MsgDeactivateContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Wasmx_V1_MsgDeactivateContract, Injective_Wasmx_V1_MsgDeactivateContractResponse> {
    return self.makeUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.deactivateRegistryContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateRegistryContractInterceptors() ?? []
    )
  }

  /// Unary call to ExecuteContractCompat
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecuteContractCompat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func executeContractCompat(
    _ request: Injective_Wasmx_V1_MsgExecuteContractCompat,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Wasmx_V1_MsgExecuteContractCompat, Injective_Wasmx_V1_MsgExecuteContractCompatResponse> {
    return self.makeUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.executeContractCompat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteContractCompatInterceptors() ?? []
    )
  }

  /// Unary call to UpdateParams
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Injective_Wasmx_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Wasmx_V1_MsgUpdateParams, Injective_Wasmx_V1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  /// Unary call to RegisterContract
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerContract(
    _ request: Injective_Wasmx_V1_MsgRegisterContract,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Wasmx_V1_MsgRegisterContract, Injective_Wasmx_V1_MsgRegisterContractResponse> {
    return self.makeUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.registerContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterContractInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Wasmx_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Wasmx_V1_MsgNIOClient")
internal final class Injective_Wasmx_V1_MsgClient: Injective_Wasmx_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.wasmx.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Wasmx_V1_MsgNIOClient: Injective_Wasmx_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.wasmx.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the wasmx Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Wasmx_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeUpdateRegistryContractParamsCall(
    _ request: Injective_Wasmx_V1_MsgUpdateContract,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgUpdateContract, Injective_Wasmx_V1_MsgUpdateContractResponse>

  func makeActivateRegistryContractCall(
    _ request: Injective_Wasmx_V1_MsgActivateContract,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgActivateContract, Injective_Wasmx_V1_MsgActivateContractResponse>

  func makeDeactivateRegistryContractCall(
    _ request: Injective_Wasmx_V1_MsgDeactivateContract,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgDeactivateContract, Injective_Wasmx_V1_MsgDeactivateContractResponse>

  func makeExecuteContractCompatCall(
    _ request: Injective_Wasmx_V1_MsgExecuteContractCompat,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgExecuteContractCompat, Injective_Wasmx_V1_MsgExecuteContractCompatResponse>

  func makeUpdateParamsCall(
    _ request: Injective_Wasmx_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgUpdateParams, Injective_Wasmx_V1_MsgUpdateParamsResponse>

  func makeRegisterContractCall(
    _ request: Injective_Wasmx_V1_MsgRegisterContract,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgRegisterContract, Injective_Wasmx_V1_MsgRegisterContractResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Wasmx_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Wasmx_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateRegistryContractParamsCall(
    _ request: Injective_Wasmx_V1_MsgUpdateContract,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgUpdateContract, Injective_Wasmx_V1_MsgUpdateContractResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.updateRegistryContractParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRegistryContractParamsInterceptors() ?? []
    )
  }

  internal func makeActivateRegistryContractCall(
    _ request: Injective_Wasmx_V1_MsgActivateContract,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgActivateContract, Injective_Wasmx_V1_MsgActivateContractResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.activateRegistryContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateRegistryContractInterceptors() ?? []
    )
  }

  internal func makeDeactivateRegistryContractCall(
    _ request: Injective_Wasmx_V1_MsgDeactivateContract,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgDeactivateContract, Injective_Wasmx_V1_MsgDeactivateContractResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.deactivateRegistryContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateRegistryContractInterceptors() ?? []
    )
  }

  internal func makeExecuteContractCompatCall(
    _ request: Injective_Wasmx_V1_MsgExecuteContractCompat,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgExecuteContractCompat, Injective_Wasmx_V1_MsgExecuteContractCompatResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.executeContractCompat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteContractCompatInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Injective_Wasmx_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgUpdateParams, Injective_Wasmx_V1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func makeRegisterContractCall(
    _ request: Injective_Wasmx_V1_MsgRegisterContract,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Wasmx_V1_MsgRegisterContract, Injective_Wasmx_V1_MsgRegisterContractResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.registerContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterContractInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Wasmx_V1_MsgAsyncClientProtocol {
  internal func updateRegistryContractParams(
    _ request: Injective_Wasmx_V1_MsgUpdateContract,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Wasmx_V1_MsgUpdateContractResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.updateRegistryContractParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateRegistryContractParamsInterceptors() ?? []
    )
  }

  internal func activateRegistryContract(
    _ request: Injective_Wasmx_V1_MsgActivateContract,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Wasmx_V1_MsgActivateContractResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.activateRegistryContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateRegistryContractInterceptors() ?? []
    )
  }

  internal func deactivateRegistryContract(
    _ request: Injective_Wasmx_V1_MsgDeactivateContract,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Wasmx_V1_MsgDeactivateContractResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.deactivateRegistryContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateRegistryContractInterceptors() ?? []
    )
  }

  internal func executeContractCompat(
    _ request: Injective_Wasmx_V1_MsgExecuteContractCompat,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Wasmx_V1_MsgExecuteContractCompatResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.executeContractCompat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteContractCompatInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Injective_Wasmx_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Wasmx_V1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func registerContract(
    _ request: Injective_Wasmx_V1_MsgRegisterContract,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Wasmx_V1_MsgRegisterContractResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Wasmx_V1_MsgClientMetadata.Methods.registerContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterContractInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Wasmx_V1_MsgAsyncClient: Injective_Wasmx_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Wasmx_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateRegistryContractParams'.
  func makeUpdateRegistryContractParamsInterceptors() -> [ClientInterceptor<Injective_Wasmx_V1_MsgUpdateContract, Injective_Wasmx_V1_MsgUpdateContractResponse>]

  /// - Returns: Interceptors to use when invoking 'activateRegistryContract'.
  func makeActivateRegistryContractInterceptors() -> [ClientInterceptor<Injective_Wasmx_V1_MsgActivateContract, Injective_Wasmx_V1_MsgActivateContractResponse>]

  /// - Returns: Interceptors to use when invoking 'deactivateRegistryContract'.
  func makeDeactivateRegistryContractInterceptors() -> [ClientInterceptor<Injective_Wasmx_V1_MsgDeactivateContract, Injective_Wasmx_V1_MsgDeactivateContractResponse>]

  /// - Returns: Interceptors to use when invoking 'executeContractCompat'.
  func makeExecuteContractCompatInterceptors() -> [ClientInterceptor<Injective_Wasmx_V1_MsgExecuteContractCompat, Injective_Wasmx_V1_MsgExecuteContractCompatResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Injective_Wasmx_V1_MsgUpdateParams, Injective_Wasmx_V1_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'registerContract'.
  func makeRegisterContractInterceptors() -> [ClientInterceptor<Injective_Wasmx_V1_MsgRegisterContract, Injective_Wasmx_V1_MsgRegisterContractResponse>]
}

internal enum Injective_Wasmx_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.wasmx.v1.Msg",
    methods: [
      Injective_Wasmx_V1_MsgClientMetadata.Methods.updateRegistryContractParams,
      Injective_Wasmx_V1_MsgClientMetadata.Methods.activateRegistryContract,
      Injective_Wasmx_V1_MsgClientMetadata.Methods.deactivateRegistryContract,
      Injective_Wasmx_V1_MsgClientMetadata.Methods.executeContractCompat,
      Injective_Wasmx_V1_MsgClientMetadata.Methods.updateParams,
      Injective_Wasmx_V1_MsgClientMetadata.Methods.registerContract,
    ]
  )

  internal enum Methods {
    internal static let updateRegistryContractParams = GRPCMethodDescriptor(
      name: "UpdateRegistryContractParams",
      path: "/injective.wasmx.v1.Msg/UpdateRegistryContractParams",
      type: GRPCCallType.unary
    )

    internal static let activateRegistryContract = GRPCMethodDescriptor(
      name: "ActivateRegistryContract",
      path: "/injective.wasmx.v1.Msg/ActivateRegistryContract",
      type: GRPCCallType.unary
    )

    internal static let deactivateRegistryContract = GRPCMethodDescriptor(
      name: "DeactivateRegistryContract",
      path: "/injective.wasmx.v1.Msg/DeactivateRegistryContract",
      type: GRPCCallType.unary
    )

    internal static let executeContractCompat = GRPCMethodDescriptor(
      name: "ExecuteContractCompat",
      path: "/injective.wasmx.v1.Msg/ExecuteContractCompat",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.wasmx.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let registerContract = GRPCMethodDescriptor(
      name: "RegisterContract",
      path: "/injective.wasmx.v1.Msg/RegisterContract",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the wasmx Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Wasmx_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Injective_Wasmx_V1_MsgServerInterceptorFactoryProtocol? { get }

  func updateRegistryContractParams(request: Injective_Wasmx_V1_MsgUpdateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Wasmx_V1_MsgUpdateContractResponse>

  func activateRegistryContract(request: Injective_Wasmx_V1_MsgActivateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Wasmx_V1_MsgActivateContractResponse>

  func deactivateRegistryContract(request: Injective_Wasmx_V1_MsgDeactivateContract, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Wasmx_V1_MsgDeactivateContractResponse>

  func executeContractCompat(request: Injective_Wasmx_V1_MsgExecuteContractCompat, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Wasmx_V1_MsgExecuteContractCompatResponse>

  func updateParams(request: Injective_Wasmx_V1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Wasmx_V1_MsgUpdateParamsResponse>

  func registerContract(request: Injective_Wasmx_V1_MsgRegisterContract, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Wasmx_V1_MsgRegisterContractResponse>
}

extension Injective_Wasmx_V1_MsgProvider {
  internal var serviceName: Substring {
    return Injective_Wasmx_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateRegistryContractParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgUpdateContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgUpdateContractResponse>(),
        interceptors: self.interceptors?.makeUpdateRegistryContractParamsInterceptors() ?? [],
        userFunction: self.updateRegistryContractParams(request:context:)
      )

    case "ActivateRegistryContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgActivateContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgActivateContractResponse>(),
        interceptors: self.interceptors?.makeActivateRegistryContractInterceptors() ?? [],
        userFunction: self.activateRegistryContract(request:context:)
      )

    case "DeactivateRegistryContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgDeactivateContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgDeactivateContractResponse>(),
        interceptors: self.interceptors?.makeDeactivateRegistryContractInterceptors() ?? [],
        userFunction: self.deactivateRegistryContract(request:context:)
      )

    case "ExecuteContractCompat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgExecuteContractCompat>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgExecuteContractCompatResponse>(),
        interceptors: self.interceptors?.makeExecuteContractCompatInterceptors() ?? [],
        userFunction: self.executeContractCompat(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    case "RegisterContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgRegisterContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgRegisterContractResponse>(),
        interceptors: self.interceptors?.makeRegisterContractInterceptors() ?? [],
        userFunction: self.registerContract(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the wasmx Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Wasmx_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Wasmx_V1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func updateRegistryContractParams(
    request: Injective_Wasmx_V1_MsgUpdateContract,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Wasmx_V1_MsgUpdateContractResponse

  @Sendable func activateRegistryContract(
    request: Injective_Wasmx_V1_MsgActivateContract,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Wasmx_V1_MsgActivateContractResponse

  @Sendable func deactivateRegistryContract(
    request: Injective_Wasmx_V1_MsgDeactivateContract,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Wasmx_V1_MsgDeactivateContractResponse

  @Sendable func executeContractCompat(
    request: Injective_Wasmx_V1_MsgExecuteContractCompat,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Wasmx_V1_MsgExecuteContractCompatResponse

  @Sendable func updateParams(
    request: Injective_Wasmx_V1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Wasmx_V1_MsgUpdateParamsResponse

  @Sendable func registerContract(
    request: Injective_Wasmx_V1_MsgRegisterContract,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Wasmx_V1_MsgRegisterContractResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Wasmx_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Wasmx_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Wasmx_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Wasmx_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateRegistryContractParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgUpdateContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgUpdateContractResponse>(),
        interceptors: self.interceptors?.makeUpdateRegistryContractParamsInterceptors() ?? [],
        wrapping: self.updateRegistryContractParams(request:context:)
      )

    case "ActivateRegistryContract":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgActivateContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgActivateContractResponse>(),
        interceptors: self.interceptors?.makeActivateRegistryContractInterceptors() ?? [],
        wrapping: self.activateRegistryContract(request:context:)
      )

    case "DeactivateRegistryContract":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgDeactivateContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgDeactivateContractResponse>(),
        interceptors: self.interceptors?.makeDeactivateRegistryContractInterceptors() ?? [],
        wrapping: self.deactivateRegistryContract(request:context:)
      )

    case "ExecuteContractCompat":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgExecuteContractCompat>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgExecuteContractCompatResponse>(),
        interceptors: self.interceptors?.makeExecuteContractCompatInterceptors() ?? [],
        wrapping: self.executeContractCompat(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    case "RegisterContract":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Wasmx_V1_MsgRegisterContract>(),
        responseSerializer: ProtobufSerializer<Injective_Wasmx_V1_MsgRegisterContractResponse>(),
        interceptors: self.interceptors?.makeRegisterContractInterceptors() ?? [],
        wrapping: self.registerContract(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Wasmx_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'updateRegistryContractParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateRegistryContractParamsInterceptors() -> [ServerInterceptor<Injective_Wasmx_V1_MsgUpdateContract, Injective_Wasmx_V1_MsgUpdateContractResponse>]

  /// - Returns: Interceptors to use when handling 'activateRegistryContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateRegistryContractInterceptors() -> [ServerInterceptor<Injective_Wasmx_V1_MsgActivateContract, Injective_Wasmx_V1_MsgActivateContractResponse>]

  /// - Returns: Interceptors to use when handling 'deactivateRegistryContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeactivateRegistryContractInterceptors() -> [ServerInterceptor<Injective_Wasmx_V1_MsgDeactivateContract, Injective_Wasmx_V1_MsgDeactivateContractResponse>]

  /// - Returns: Interceptors to use when handling 'executeContractCompat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteContractCompatInterceptors() -> [ServerInterceptor<Injective_Wasmx_V1_MsgExecuteContractCompat, Injective_Wasmx_V1_MsgExecuteContractCompatResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Injective_Wasmx_V1_MsgUpdateParams, Injective_Wasmx_V1_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when handling 'registerContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterContractInterceptors() -> [ServerInterceptor<Injective_Wasmx_V1_MsgRegisterContract, Injective_Wasmx_V1_MsgRegisterContractResponse>]
}

internal enum Injective_Wasmx_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.wasmx.v1.Msg",
    methods: [
      Injective_Wasmx_V1_MsgServerMetadata.Methods.updateRegistryContractParams,
      Injective_Wasmx_V1_MsgServerMetadata.Methods.activateRegistryContract,
      Injective_Wasmx_V1_MsgServerMetadata.Methods.deactivateRegistryContract,
      Injective_Wasmx_V1_MsgServerMetadata.Methods.executeContractCompat,
      Injective_Wasmx_V1_MsgServerMetadata.Methods.updateParams,
      Injective_Wasmx_V1_MsgServerMetadata.Methods.registerContract,
    ]
  )

  internal enum Methods {
    internal static let updateRegistryContractParams = GRPCMethodDescriptor(
      name: "UpdateRegistryContractParams",
      path: "/injective.wasmx.v1.Msg/UpdateRegistryContractParams",
      type: GRPCCallType.unary
    )

    internal static let activateRegistryContract = GRPCMethodDescriptor(
      name: "ActivateRegistryContract",
      path: "/injective.wasmx.v1.Msg/ActivateRegistryContract",
      type: GRPCCallType.unary
    )

    internal static let deactivateRegistryContract = GRPCMethodDescriptor(
      name: "DeactivateRegistryContract",
      path: "/injective.wasmx.v1.Msg/DeactivateRegistryContract",
      type: GRPCCallType.unary
    )

    internal static let executeContractCompat = GRPCMethodDescriptor(
      name: "ExecuteContractCompat",
      path: "/injective.wasmx.v1.Msg/ExecuteContractCompat",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.wasmx.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let registerContract = GRPCMethodDescriptor(
      name: "RegisterContract",
      path: "/injective.wasmx.v1.Msg/RegisterContract",
      type: GRPCCallType.unary
    )
  }
}
