// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/rewards/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Rewards_V1beta1_MsgCreateGauge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var gaugeTypeID: UInt64 = 0

  var triggerDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _triggerDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_triggerDuration = newValue}
  }
  /// Returns true if `triggerDuration` has been explicitly set.
  var hasTriggerDuration: Bool {return self._triggerDuration != nil}
  /// Clears the value of `triggerDuration`. Subsequent reads from it will return its default value.
  mutating func clearTriggerDuration() {self._triggerDuration = nil}

  var depositAmount: Cosmos_Base_V1beta1_Coin {
    get {return _depositAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_depositAmount = newValue}
  }
  /// Returns true if `depositAmount` has been explicitly set.
  var hasDepositAmount: Bool {return self._depositAmount != nil}
  /// Clears the value of `depositAmount`. Subsequent reads from it will return its default value.
  mutating func clearDepositAmount() {self._depositAmount = nil}

  var totalTriggers: UInt64 = 0

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var kind: Comdex_Rewards_V1beta1_MsgCreateGauge.OneOf_Kind? = nil

  var liquidityMetaData: Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData {
    get {
      if case .liquidityMetaData(let v)? = kind {return v}
      return Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData()
    }
    set {kind = .liquidityMetaData(newValue)}
  }

  var appID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Kind: Equatable {
    case liquidityMetaData(Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData)

  #if !swift(>=4.1)
    static func ==(lhs: Comdex_Rewards_V1beta1_MsgCreateGauge.OneOf_Kind, rhs: Comdex_Rewards_V1beta1_MsgCreateGauge.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.liquidityMetaData, .liquidityMetaData): return {
        guard case .liquidityMetaData(let l) = lhs, case .liquidityMetaData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}

  fileprivate var _triggerDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _depositAmount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Rewards_V1beta1_MsgCreateGaugeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_WhitelistAsset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var from: String = String()

  var assetID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_RemoveWhitelistAsset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var from: String = String()

  var assetID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_MsgWhitelistAssetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_MsgRemoveWhitelistAssetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_WhitelistAppIdVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var from: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_RemoveWhitelistAppIdVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var from: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_MsgWhitelistAppIdVaultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_MsgRemoveWhitelistAppIdVaultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsLockers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var assetID: UInt64 = 0

  var totalRewards: Cosmos_Base_V1beta1_Coin {
    get {return _totalRewards ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalRewards = newValue}
  }
  /// Returns true if `totalRewards` has been explicitly set.
  var hasTotalRewards: Bool {return self._totalRewards != nil}
  /// Clears the value of `totalRewards`. Subsequent reads from it will return its default value.
  mutating func clearTotalRewards() {self._totalRewards = nil}

  var durationDays: Int64 = 0

  var depositor: String = String()

  var minLockupTimeSeconds: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalRewards: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsLockersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var extendedPairID: UInt64 = 0

  var totalRewards: Cosmos_Base_V1beta1_Coin {
    get {return _totalRewards ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalRewards = newValue}
  }
  /// Returns true if `totalRewards` has been explicitly set.
  var hasTotalRewards: Bool {return self._totalRewards != nil}
  /// Clears the value of `totalRewards`. Subsequent reads from it will return its default value.
  mutating func clearTotalRewards() {self._totalRewards = nil}

  var durationDays: Int64 = 0

  var depositor: String = String()

  var minLockupTimeSeconds: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalRewards: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsVaultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsLend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appMappingID: UInt64 = 0

  var cPoolID: UInt64 = 0

  var assetID: [UInt64] = []

  var cSwapAppID: UInt64 = 0

  var cSwapMinLockAmount: UInt64 = 0

  var totalRewards: Cosmos_Base_V1beta1_Coin {
    get {return _totalRewards ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalRewards = newValue}
  }
  /// Returns true if `totalRewards` has been explicitly set.
  var hasTotalRewards: Bool {return self._totalRewards != nil}
  /// Clears the value of `totalRewards`. Subsequent reads from it will return its default value.
  mutating func clearTotalRewards() {self._totalRewards = nil}

  var masterPoolID: Int64 = 0

  var durationDays: Int64 = 0

  var minLockupTimeSeconds: Int64 = 0

  var depositor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalRewards: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsLendResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var cswapAppID: UInt64 = 0

  var commodoAppID: UInt64 = 0

  var totalRewards: Cosmos_Base_V1beta1_Coin {
    get {return _totalRewards ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalRewards = newValue}
  }
  /// Returns true if `totalRewards` has been explicitly set.
  var hasTotalRewards: Bool {return self._totalRewards != nil}
  /// Clears the value of `totalRewards`. Subsequent reads from it will return its default value.
  mutating func clearTotalRewards() {self._totalRewards = nil}

  var durationDays: Int64 = 0

  var depositor: String = String()

  var acceptedBlockHeight: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalRewards: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMintResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Rewards_V1beta1_MsgCreateGauge: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_MsgCreateGauge.OneOf_Kind: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_MsgCreateGaugeResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_WhitelistAsset: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_RemoveWhitelistAsset: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_MsgWhitelistAssetResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_MsgRemoveWhitelistAssetResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_WhitelistAppIdVault: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_RemoveWhitelistAppIdVault: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_MsgWhitelistAppIdVaultResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_MsgRemoveWhitelistAppIdVaultResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLockers: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLockersResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsVault: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsVaultResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLend: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLendResponse: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMint: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMintResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.rewards.v1beta1"

extension Comdex_Rewards_V1beta1_MsgCreateGauge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateGauge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "gauge_type_id"),
    3: .standard(proto: "trigger_duration"),
    4: .standard(proto: "deposit_amount"),
    5: .standard(proto: "total_triggers"),
    6: .standard(proto: "start_time"),
    7: .standard(proto: "liquidity_meta_data"),
    8: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.gaugeTypeID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._triggerDuration) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._depositAmount) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.totalTriggers) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 7: try {
        var v: Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .liquidityMetaData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .liquidityMetaData(v)
        }
      }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if self.gaugeTypeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.gaugeTypeID, fieldNumber: 2)
    }
    try { if let v = self._triggerDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._depositAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.totalTriggers != 0 {
      try visitor.visitSingularUInt64Field(value: self.totalTriggers, fieldNumber: 5)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if case .liquidityMetaData(let v)? = self.kind {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_MsgCreateGauge, rhs: Comdex_Rewards_V1beta1_MsgCreateGauge) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.gaugeTypeID != rhs.gaugeTypeID {return false}
    if lhs._triggerDuration != rhs._triggerDuration {return false}
    if lhs._depositAmount != rhs._depositAmount {return false}
    if lhs.totalTriggers != rhs.totalTriggers {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_MsgCreateGaugeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateGaugeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_MsgCreateGaugeResponse, rhs: Comdex_Rewards_V1beta1_MsgCreateGaugeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_WhitelistAsset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WhitelistAsset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .same(proto: "from"),
    3: .standard(proto: "asset_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_WhitelistAsset, rhs: Comdex_Rewards_V1beta1_WhitelistAsset) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.from != rhs.from {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_RemoveWhitelistAsset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveWhitelistAsset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .same(proto: "from"),
    3: .standard(proto: "asset_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_RemoveWhitelistAsset, rhs: Comdex_Rewards_V1beta1_RemoveWhitelistAsset) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.from != rhs.from {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_MsgWhitelistAssetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWhitelistAssetResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_MsgWhitelistAssetResponse, rhs: Comdex_Rewards_V1beta1_MsgWhitelistAssetResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_MsgRemoveWhitelistAssetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveWhitelistAssetResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_MsgRemoveWhitelistAssetResponse, rhs: Comdex_Rewards_V1beta1_MsgRemoveWhitelistAssetResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_WhitelistAppIdVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WhitelistAppIdVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_WhitelistAppIdVault, rhs: Comdex_Rewards_V1beta1_WhitelistAppIdVault) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_RemoveWhitelistAppIdVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveWhitelistAppIdVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_RemoveWhitelistAppIdVault, rhs: Comdex_Rewards_V1beta1_RemoveWhitelistAppIdVault) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_MsgWhitelistAppIdVaultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWhitelistAppIdVaultResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_MsgWhitelistAppIdVaultResponse, rhs: Comdex_Rewards_V1beta1_MsgWhitelistAppIdVaultResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_MsgRemoveWhitelistAppIdVaultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveWhitelistAppIdVaultResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_MsgRemoveWhitelistAppIdVaultResponse, rhs: Comdex_Rewards_V1beta1_MsgRemoveWhitelistAppIdVaultResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLockers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsLockers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .standard(proto: "asset_id"),
    3: .standard(proto: "total_rewards"),
    4: .standard(proto: "duration_days"),
    5: .same(proto: "depositor"),
    6: .standard(proto: "min_lockup_time_seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._totalRewards) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.durationDays) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.minLockupTimeSeconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 2)
    }
    try { if let v = self._totalRewards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.durationDays != 0 {
      try visitor.visitSingularInt64Field(value: self.durationDays, fieldNumber: 4)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 5)
    }
    if self.minLockupTimeSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.minLockupTimeSeconds, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLockers, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLockers) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs._totalRewards != rhs._totalRewards {return false}
    if lhs.durationDays != rhs.durationDays {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs.minLockupTimeSeconds != rhs.minLockupTimeSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLockersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsLockersResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLockersResponse, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLockersResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .standard(proto: "extended_pair_id"),
    3: .standard(proto: "total_rewards"),
    4: .standard(proto: "duration_days"),
    5: .same(proto: "depositor"),
    6: .standard(proto: "min_lockup_time_seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.extendedPairID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._totalRewards) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.durationDays) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.minLockupTimeSeconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if self.extendedPairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.extendedPairID, fieldNumber: 2)
    }
    try { if let v = self._totalRewards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.durationDays != 0 {
      try visitor.visitSingularInt64Field(value: self.durationDays, fieldNumber: 4)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 5)
    }
    if self.minLockupTimeSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.minLockupTimeSeconds, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsVault, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsVault) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.extendedPairID != rhs.extendedPairID {return false}
    if lhs._totalRewards != rhs._totalRewards {return false}
    if lhs.durationDays != rhs.durationDays {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs.minLockupTimeSeconds != rhs.minLockupTimeSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsVaultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsVaultResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsVaultResponse, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsVaultResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsLend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_mapping_id"),
    2: .standard(proto: "c_pool_id"),
    3: .standard(proto: "asset_id"),
    4: .standard(proto: "c_swap_app_id"),
    5: .standard(proto: "c_swap_min_lock_amount"),
    6: .standard(proto: "total_rewards"),
    7: .standard(proto: "master_pool_id"),
    8: .standard(proto: "duration_days"),
    9: .standard(proto: "min_lockup_time_seconds"),
    10: .same(proto: "depositor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appMappingID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cPoolID) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.assetID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.cSwapAppID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.cSwapMinLockAmount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._totalRewards) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.masterPoolID) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.durationDays) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.minLockupTimeSeconds) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appMappingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appMappingID, fieldNumber: 1)
    }
    if self.cPoolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.cPoolID, fieldNumber: 2)
    }
    if !self.assetID.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.assetID, fieldNumber: 3)
    }
    if self.cSwapAppID != 0 {
      try visitor.visitSingularUInt64Field(value: self.cSwapAppID, fieldNumber: 4)
    }
    if self.cSwapMinLockAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.cSwapMinLockAmount, fieldNumber: 5)
    }
    try { if let v = self._totalRewards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.masterPoolID != 0 {
      try visitor.visitSingularInt64Field(value: self.masterPoolID, fieldNumber: 7)
    }
    if self.durationDays != 0 {
      try visitor.visitSingularInt64Field(value: self.durationDays, fieldNumber: 8)
    }
    if self.minLockupTimeSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.minLockupTimeSeconds, fieldNumber: 9)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLend, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLend) -> Bool {
    if lhs.appMappingID != rhs.appMappingID {return false}
    if lhs.cPoolID != rhs.cPoolID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.cSwapAppID != rhs.cSwapAppID {return false}
    if lhs.cSwapMinLockAmount != rhs.cSwapMinLockAmount {return false}
    if lhs._totalRewards != rhs._totalRewards {return false}
    if lhs.masterPoolID != rhs.masterPoolID {return false}
    if lhs.durationDays != rhs.durationDays {return false}
    if lhs.minLockupTimeSeconds != rhs.minLockupTimeSeconds {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsLendResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsLendResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLendResponse, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsLendResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsStableMint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "cswap_app_id"),
    3: .standard(proto: "commodo_app_id"),
    4: .standard(proto: "total_rewards"),
    5: .standard(proto: "duration_days"),
    6: .same(proto: "depositor"),
    7: .standard(proto: "accepted_block_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cswapAppID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.commodoAppID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._totalRewards) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.durationDays) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.acceptedBlockHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.cswapAppID != 0 {
      try visitor.visitSingularUInt64Field(value: self.cswapAppID, fieldNumber: 2)
    }
    if self.commodoAppID != 0 {
      try visitor.visitSingularUInt64Field(value: self.commodoAppID, fieldNumber: 3)
    }
    try { if let v = self._totalRewards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.durationDays != 0 {
      try visitor.visitSingularInt64Field(value: self.durationDays, fieldNumber: 5)
    }
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 6)
    }
    if self.acceptedBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.acceptedBlockHeight, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMint, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMint) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.cswapAppID != rhs.cswapAppID {return false}
    if lhs.commodoAppID != rhs.commodoAppID {return false}
    if lhs._totalRewards != rhs._totalRewards {return false}
    if lhs.durationDays != rhs.durationDays {return false}
    if lhs.depositor != rhs.depositor {return false}
    if lhs.acceptedBlockHeight != rhs.acceptedBlockHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMintResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivateExternalRewardsStableMintResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMintResponse, rhs: Comdex_Rewards_V1beta1_ActivateExternalRewardsStableMintResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
