//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: regen/group/v1alpha1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg is the regen.group.v1alpha1 Msg service.
///
/// Usage: instantiate `Regen_Group_V1alpha1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Regen_Group_V1alpha1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func createGroup(
    _ request: Regen_Group_V1alpha1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgCreateGroup, Regen_Group_V1alpha1_MsgCreateGroupResponse>

  func updateGroupMembers(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMembers, Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>

  func updateGroupAdmin(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>

  func updateGroupMetadata(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMetadata, Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>

  func createGroupAccount(
    _ request: Regen_Group_V1alpha1_MsgCreateGroupAccount,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgCreateGroupAccount, Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>

  func updateGroupAccountAdmin(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>

  func updateGroupAccountDecisionPolicy(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>

  func updateGroupAccountMetadata(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>

  func createProposal(
    _ request: Regen_Group_V1alpha1_MsgCreateProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgCreateProposal, Regen_Group_V1alpha1_MsgCreateProposalResponse>

  func vote(
    _ request: Regen_Group_V1alpha1_MsgVote,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgVote, Regen_Group_V1alpha1_MsgVoteResponse>

  func exec(
    _ request: Regen_Group_V1alpha1_MsgExec,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgExec, Regen_Group_V1alpha1_MsgExecResponse>
}

extension Regen_Group_V1alpha1_MsgClientProtocol {
  internal var serviceName: String {
    return "regen.group.v1alpha1.Msg"
  }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Regen_Group_V1alpha1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgCreateGroup, Regen_Group_V1alpha1_MsgCreateGroupResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMembers(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMembers, Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAdmin(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMetadata(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMetadata, Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  /// CreateGroupAccount creates a new group account using given DecisionPolicy. 
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroupAccount(
    _ request: Regen_Group_V1alpha1_MsgCreateGroupAccount,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgCreateGroupAccount, Regen_Group_V1alpha1_MsgCreateGroupAccountResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroupAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? []
    )
  }

  /// UpdateGroupAccountAdmin updates a group account admin. 
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAccountAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAccountAdmin(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupAccountDecisionPolicy allows a group account decision policy to be updated.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAccountDecisionPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAccountDecisionPolicy(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupAccountMetadata updates a group account metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAccountMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAccountMetadata(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? []
    )
  }

  /// CreateProposal submits a new proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createProposal(
    _ request: Regen_Group_V1alpha1_MsgCreateProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgCreateProposal, Regen_Group_V1alpha1_MsgCreateProposalResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? []
    )
  }

  /// Vote allows a voter to vote on a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vote(
    _ request: Regen_Group_V1alpha1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgVote, Regen_Group_V1alpha1_MsgVoteResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Exec executes a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Exec.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exec(
    _ request: Regen_Group_V1alpha1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Group_V1alpha1_MsgExec, Regen_Group_V1alpha1_MsgExecResponse> {
    return self.makeUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Regen_Group_V1alpha1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Regen_Group_V1alpha1_MsgNIOClient")
internal final class Regen_Group_V1alpha1_MsgClient: Regen_Group_V1alpha1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the regen.group.v1alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Regen_Group_V1alpha1_MsgNIOClient: Regen_Group_V1alpha1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the regen.group.v1alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg is the regen.group.v1alpha1 Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Regen_Group_V1alpha1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateGroupCall(
    _ request: Regen_Group_V1alpha1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgCreateGroup, Regen_Group_V1alpha1_MsgCreateGroupResponse>

  func makeUpdateGroupMembersCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMembers, Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>

  func makeUpdateGroupAdminCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>

  func makeUpdateGroupMetadataCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMetadata, Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>

  func makeCreateGroupAccountCall(
    _ request: Regen_Group_V1alpha1_MsgCreateGroupAccount,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgCreateGroupAccount, Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>

  func makeUpdateGroupAccountAdminCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>

  func makeUpdateGroupAccountDecisionPolicyCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>

  func makeUpdateGroupAccountMetadataCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>

  func makeCreateProposalCall(
    _ request: Regen_Group_V1alpha1_MsgCreateProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgCreateProposal, Regen_Group_V1alpha1_MsgCreateProposalResponse>

  func makeVoteCall(
    _ request: Regen_Group_V1alpha1_MsgVote,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgVote, Regen_Group_V1alpha1_MsgVoteResponse>

  func makeExecCall(
    _ request: Regen_Group_V1alpha1_MsgExec,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgExec, Regen_Group_V1alpha1_MsgExecResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Group_V1alpha1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Regen_Group_V1alpha1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateGroupCall(
    _ request: Regen_Group_V1alpha1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgCreateGroup, Regen_Group_V1alpha1_MsgCreateGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupMembersCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMembers, Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupAdminCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupMetadataCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupMetadata, Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  internal func makeCreateGroupAccountCall(
    _ request: Regen_Group_V1alpha1_MsgCreateGroupAccount,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgCreateGroupAccount, Regen_Group_V1alpha1_MsgCreateGroupAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroupAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupAccountAdminCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupAccountDecisionPolicyCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupAccountMetadataCall(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? []
    )
  }

  internal func makeCreateProposalCall(
    _ request: Regen_Group_V1alpha1_MsgCreateProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgCreateProposal, Regen_Group_V1alpha1_MsgCreateProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? []
    )
  }

  internal func makeVoteCall(
    _ request: Regen_Group_V1alpha1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgVote, Regen_Group_V1alpha1_MsgVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  internal func makeExecCall(
    _ request: Regen_Group_V1alpha1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Group_V1alpha1_MsgExec, Regen_Group_V1alpha1_MsgExecResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Group_V1alpha1_MsgAsyncClientProtocol {
  internal func createGroup(
    _ request: Regen_Group_V1alpha1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgCreateGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  internal func updateGroupMembers(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  internal func updateGroupAdmin(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  internal func updateGroupMetadata(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  internal func createGroupAccount(
    _ request: Regen_Group_V1alpha1_MsgCreateGroupAccount,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgCreateGroupAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroupAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? []
    )
  }

  internal func updateGroupAccountAdmin(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? []
    )
  }

  internal func updateGroupAccountDecisionPolicy(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? []
    )
  }

  internal func updateGroupAccountMetadata(
    _ request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? []
    )
  }

  internal func createProposal(
    _ request: Regen_Group_V1alpha1_MsgCreateProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgCreateProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.createProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? []
    )
  }

  internal func vote(
    _ request: Regen_Group_V1alpha1_MsgVote,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  internal func exec(
    _ request: Regen_Group_V1alpha1_MsgExec,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Group_V1alpha1_MsgExecResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Group_V1alpha1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Regen_Group_V1alpha1_MsgAsyncClient: Regen_Group_V1alpha1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Regen_Group_V1alpha1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgCreateGroup, Regen_Group_V1alpha1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMembers'.
  func makeUpdateGroupMembersInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupMembers, Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAdmin'.
  func makeUpdateGroupAdminInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMetadata'.
  func makeUpdateGroupMetadataInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupMetadata, Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupAccount'.
  func makeCreateGroupAccountInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgCreateGroupAccount, Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAccountAdmin'.
  func makeUpdateGroupAccountAdminInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAccountDecisionPolicy'.
  func makeUpdateGroupAccountDecisionPolicyInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAccountMetadata'.
  func makeUpdateGroupAccountMetadataInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createProposal'.
  func makeCreateProposalInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgCreateProposal, Regen_Group_V1alpha1_MsgCreateProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgVote, Regen_Group_V1alpha1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'exec'.
  func makeExecInterceptors() -> [ClientInterceptor<Regen_Group_V1alpha1_MsgExec, Regen_Group_V1alpha1_MsgExecResponse>]
}

internal enum Regen_Group_V1alpha1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "regen.group.v1alpha1.Msg",
    methods: [
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroup,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMembers,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAdmin,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupMetadata,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.createGroupAccount,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountAdmin,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountDecisionPolicy,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.updateGroupAccountMetadata,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.createProposal,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.vote,
      Regen_Group_V1alpha1_MsgClientMetadata.Methods.exec,
    ]
  )

  internal enum Methods {
    internal static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/regen.group.v1alpha1.Msg/CreateGroup",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMembers = GRPCMethodDescriptor(
      name: "UpdateGroupMembers",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupMembers",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAdmin",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupMetadata",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupMetadata",
      type: GRPCCallType.unary
    )

    internal static let createGroupAccount = GRPCMethodDescriptor(
      name: "CreateGroupAccount",
      path: "/regen.group.v1alpha1.Msg/CreateGroupAccount",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAccountAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAccountAdmin",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAccountAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAccountDecisionPolicy = GRPCMethodDescriptor(
      name: "UpdateGroupAccountDecisionPolicy",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAccountDecisionPolicy",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAccountMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupAccountMetadata",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAccountMetadata",
      type: GRPCCallType.unary
    )

    internal static let createProposal = GRPCMethodDescriptor(
      name: "CreateProposal",
      path: "/regen.group.v1alpha1.Msg/CreateProposal",
      type: GRPCCallType.unary
    )

    internal static let vote = GRPCMethodDescriptor(
      name: "Vote",
      path: "/regen.group.v1alpha1.Msg/Vote",
      type: GRPCCallType.unary
    )

    internal static let exec = GRPCMethodDescriptor(
      name: "Exec",
      path: "/regen.group.v1alpha1.Msg/Exec",
      type: GRPCCallType.unary
    )
  }
}

/// Msg is the regen.group.v1alpha1 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Regen_Group_V1alpha1_MsgProvider: CallHandlerProvider {
  var interceptors: Regen_Group_V1alpha1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  func createGroup(request: Regen_Group_V1alpha1_MsgCreateGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgCreateGroupResponse>

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  func updateGroupMembers(request: Regen_Group_V1alpha1_MsgUpdateGroupMembers, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  func updateGroupAdmin(request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  func updateGroupMetadata(request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>

  /// CreateGroupAccount creates a new group account using given DecisionPolicy. 
  func createGroupAccount(request: Regen_Group_V1alpha1_MsgCreateGroupAccount, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>

  /// UpdateGroupAccountAdmin updates a group account admin. 
  func updateGroupAccountAdmin(request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>

  /// UpdateGroupAccountDecisionPolicy allows a group account decision policy to be updated.
  func updateGroupAccountDecisionPolicy(request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>

  /// UpdateGroupAccountMetadata updates a group account metadata.
  func updateGroupAccountMetadata(request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>

  /// CreateProposal submits a new proposal.
  func createProposal(request: Regen_Group_V1alpha1_MsgCreateProposal, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgCreateProposalResponse>

  /// Vote allows a voter to vote on a proposal.
  func vote(request: Regen_Group_V1alpha1_MsgVote, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgVoteResponse>

  /// Exec executes a proposal.
  func exec(request: Regen_Group_V1alpha1_MsgExec, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Group_V1alpha1_MsgExecResponse>
}

extension Regen_Group_V1alpha1_MsgProvider {
  internal var serviceName: Substring {
    return Regen_Group_V1alpha1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgCreateGroup>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgCreateGroupResponse>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        userFunction: self.createGroup(request:context:)
      )

    case "UpdateGroupMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupMembers>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? [],
        userFunction: self.updateGroupMembers(request:context:)
      )

    case "UpdateGroupAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAdmin>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? [],
        userFunction: self.updateGroupAdmin(request:context:)
      )

    case "UpdateGroupMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupMetadata>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? [],
        userFunction: self.updateGroupMetadata(request:context:)
      )

    case "CreateGroupAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgCreateGroupAccount>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>(),
        interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? [],
        userFunction: self.createGroupAccount(request:context:)
      )

    case "UpdateGroupAccountAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? [],
        userFunction: self.updateGroupAccountAdmin(request:context:)
      )

    case "UpdateGroupAccountDecisionPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? [],
        userFunction: self.updateGroupAccountDecisionPolicy(request:context:)
      )

    case "UpdateGroupAccountMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? [],
        userFunction: self.updateGroupAccountMetadata(request:context:)
      )

    case "CreateProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgCreateProposal>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgCreateProposalResponse>(),
        interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? [],
        userFunction: self.createProposal(request:context:)
      )

    case "Vote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgVote>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        userFunction: self.vote(request:context:)
      )

    case "Exec":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgExec>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgExecResponse>(),
        interceptors: self.interceptors?.makeExecInterceptors() ?? [],
        userFunction: self.exec(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg is the regen.group.v1alpha1 Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Regen_Group_V1alpha1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Regen_Group_V1alpha1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  @Sendable func createGroup(
    request: Regen_Group_V1alpha1_MsgCreateGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgCreateGroupResponse

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  @Sendable func updateGroupMembers(
    request: Regen_Group_V1alpha1_MsgUpdateGroupMembers,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  @Sendable func updateGroupAdmin(
    request: Regen_Group_V1alpha1_MsgUpdateGroupAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  @Sendable func updateGroupMetadata(
    request: Regen_Group_V1alpha1_MsgUpdateGroupMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse

  /// CreateGroupAccount creates a new group account using given DecisionPolicy. 
  @Sendable func createGroupAccount(
    request: Regen_Group_V1alpha1_MsgCreateGroupAccount,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgCreateGroupAccountResponse

  /// UpdateGroupAccountAdmin updates a group account admin. 
  @Sendable func updateGroupAccountAdmin(
    request: Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse

  /// UpdateGroupAccountDecisionPolicy allows a group account decision policy to be updated.
  @Sendable func updateGroupAccountDecisionPolicy(
    request: Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse

  /// UpdateGroupAccountMetadata updates a group account metadata.
  @Sendable func updateGroupAccountMetadata(
    request: Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse

  /// CreateProposal submits a new proposal.
  @Sendable func createProposal(
    request: Regen_Group_V1alpha1_MsgCreateProposal,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgCreateProposalResponse

  /// Vote allows a voter to vote on a proposal.
  @Sendable func vote(
    request: Regen_Group_V1alpha1_MsgVote,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgVoteResponse

  /// Exec executes a proposal.
  @Sendable func exec(
    request: Regen_Group_V1alpha1_MsgExec,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Group_V1alpha1_MsgExecResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Group_V1alpha1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Regen_Group_V1alpha1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Regen_Group_V1alpha1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Regen_Group_V1alpha1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgCreateGroup>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgCreateGroupResponse>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        wrapping: self.createGroup(request:context:)
      )

    case "UpdateGroupMembers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupMembers>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? [],
        wrapping: self.updateGroupMembers(request:context:)
      )

    case "UpdateGroupAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAdmin>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? [],
        wrapping: self.updateGroupAdmin(request:context:)
      )

    case "UpdateGroupMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupMetadata>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? [],
        wrapping: self.updateGroupMetadata(request:context:)
      )

    case "CreateGroupAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgCreateGroupAccount>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>(),
        interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? [],
        wrapping: self.createGroupAccount(request:context:)
      )

    case "UpdateGroupAccountAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? [],
        wrapping: self.updateGroupAccountAdmin(request:context:)
      )

    case "UpdateGroupAccountDecisionPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? [],
        wrapping: self.updateGroupAccountDecisionPolicy(request:context:)
      )

    case "UpdateGroupAccountMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? [],
        wrapping: self.updateGroupAccountMetadata(request:context:)
      )

    case "CreateProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgCreateProposal>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgCreateProposalResponse>(),
        interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? [],
        wrapping: self.createProposal(request:context:)
      )

    case "Vote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgVote>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        wrapping: self.vote(request:context:)
      )

    case "Exec":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Group_V1alpha1_MsgExec>(),
        responseSerializer: ProtobufSerializer<Regen_Group_V1alpha1_MsgExecResponse>(),
        interceptors: self.interceptors?.makeExecInterceptors() ?? [],
        wrapping: self.exec(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Regen_Group_V1alpha1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgCreateGroup, Regen_Group_V1alpha1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupMembersInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupMembers, Regen_Group_V1alpha1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAdminInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupMetadataInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupMetadata, Regen_Group_V1alpha1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'createGroupAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupAccountInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgCreateGroupAccount, Regen_Group_V1alpha1_MsgCreateGroupAccountResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAccountAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAccountAdminInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAccountAdmin, Regen_Group_V1alpha1_MsgUpdateGroupAccountAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAccountDecisionPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAccountDecisionPolicyInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicy, Regen_Group_V1alpha1_MsgUpdateGroupAccountDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAccountMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAccountMetadataInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadata, Regen_Group_V1alpha1_MsgUpdateGroupAccountMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'createProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateProposalInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgCreateProposal, Regen_Group_V1alpha1_MsgCreateProposalResponse>]

  /// - Returns: Interceptors to use when handling 'vote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgVote, Regen_Group_V1alpha1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when handling 'exec'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecInterceptors() -> [ServerInterceptor<Regen_Group_V1alpha1_MsgExec, Regen_Group_V1alpha1_MsgExecResponse>]
}

internal enum Regen_Group_V1alpha1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "regen.group.v1alpha1.Msg",
    methods: [
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.createGroup,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.updateGroupMembers,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.updateGroupAdmin,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.updateGroupMetadata,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.createGroupAccount,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.updateGroupAccountAdmin,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.updateGroupAccountDecisionPolicy,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.updateGroupAccountMetadata,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.createProposal,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.vote,
      Regen_Group_V1alpha1_MsgServerMetadata.Methods.exec,
    ]
  )

  internal enum Methods {
    internal static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/regen.group.v1alpha1.Msg/CreateGroup",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMembers = GRPCMethodDescriptor(
      name: "UpdateGroupMembers",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupMembers",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAdmin",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupMetadata",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupMetadata",
      type: GRPCCallType.unary
    )

    internal static let createGroupAccount = GRPCMethodDescriptor(
      name: "CreateGroupAccount",
      path: "/regen.group.v1alpha1.Msg/CreateGroupAccount",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAccountAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAccountAdmin",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAccountAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAccountDecisionPolicy = GRPCMethodDescriptor(
      name: "UpdateGroupAccountDecisionPolicy",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAccountDecisionPolicy",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAccountMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupAccountMetadata",
      path: "/regen.group.v1alpha1.Msg/UpdateGroupAccountMetadata",
      type: GRPCCallType.unary
    )

    internal static let createProposal = GRPCMethodDescriptor(
      name: "CreateProposal",
      path: "/regen.group.v1alpha1.Msg/CreateProposal",
      type: GRPCCallType.unary
    )

    internal static let vote = GRPCMethodDescriptor(
      name: "Vote",
      path: "/regen.group.v1alpha1.Msg/Vote",
      type: GRPCCallType.unary
    )

    internal static let exec = GRPCMethodDescriptor(
      name: "Exec",
      path: "/regen.group.v1alpha1.Msg/Exec",
      type: GRPCCallType.unary
    )
  }
}
