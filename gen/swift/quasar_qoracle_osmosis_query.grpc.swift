//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: quasar/qoracle/osmosis/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>

  func state(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>

  func chainParams(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>

  func incentivizedPools(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>

  func pools(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientProtocol {
  internal var serviceName: String {
    return "quasarlabs.quasarnode.qoracle.osmosis.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries the state of oracle requests.
  ///
  /// - Parameters:
  ///   - request: Request to send to State.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func state(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse> {
    return self.makeUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.state.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStateInterceptors() ?? []
    )
  }

  /// Queries latest fetched params from osmosis chain.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainParams(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse> {
    return self.makeUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.chainParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParamsInterceptors() ?? []
    )
  }

  /// Queries latest fetched list of incentivized pools from osmosis.
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPools(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse> {
    return self.makeUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.incentivizedPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? []
    )
  }

  /// Queries latest fetched list of pool details from osmosis.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pools(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse> {
    return self.makeUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryNIOClient")
internal final class Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClient: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the quasarlabs.quasarnode.qoracle.osmosis.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryNIOClient: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the quasarlabs.quasarnode.qoracle.osmosis.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>

  func makeStateCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>

  func makeChainParamsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>

  func makeIncentivizedPoolsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>

  func makePoolsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeStateCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.state.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStateInterceptors() ?? []
    )
  }

  internal func makeChainParamsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.chainParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParamsInterceptors() ?? []
    )
  }

  internal func makeIncentivizedPoolsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.incentivizedPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? []
    )
  }

  internal func makePoolsCall(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncClientProtocol {
  internal func params(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func state(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.state.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStateInterceptors() ?? []
    )
  }

  internal func chainParams(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.chainParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParamsInterceptors() ?? []
    )
  }

  internal func incentivizedPools(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.incentivizedPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? []
    )
  }

  internal func pools(
    _ request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.pools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncClient: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'state'.
  func makeStateInterceptors() -> [ClientInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>]

  /// - Returns: Interceptors to use when invoking 'chainParams'.
  func makeChainParamsInterceptors() -> [ClientInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'incentivizedPools'.
  func makeIncentivizedPoolsInterceptors() -> [ClientInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'pools'.
  func makePoolsInterceptors() -> [ClientInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>]
}

internal enum Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "quasarlabs.quasarnode.qoracle.osmosis.Query",
    methods: [
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.params,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.state,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.chainParams,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.incentivizedPools,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryClientMetadata.Methods.pools,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let state = GRPCMethodDescriptor(
      name: "State",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/State",
      type: GRPCCallType.unary
    )

    internal static let chainParams = GRPCMethodDescriptor(
      name: "ChainParams",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/ChainParams",
      type: GRPCCallType.unary
    )

    internal static let incentivizedPools = GRPCMethodDescriptor(
      name: "IncentivizedPools",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/IncentivizedPools",
      type: GRPCCallType.unary
    )

    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/Pools",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryProvider: CallHandlerProvider {
  var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>

  /// Queries the state of oracle requests.
  func state(request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>

  /// Queries latest fetched params from osmosis chain.
  func chainParams(request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>

  /// Queries latest fetched list of incentivized pools from osmosis.
  func incentivizedPools(request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>

  /// Queries latest fetched list of pool details from osmosis.
  func pools(request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryProvider {
  internal var serviceName: Substring {
    return Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "State":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>(),
        interceptors: self.interceptors?.makeStateInterceptors() ?? [],
        userFunction: self.state(request:context:)
      )

    case "ChainParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>(),
        interceptors: self.interceptors?.makeChainParamsInterceptors() ?? [],
        userFunction: self.chainParams(request:context:)
      )

    case "IncentivizedPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? [],
        userFunction: self.incentivizedPools(request:context:)
      )

    case "Pools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        userFunction: self.pools(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse

  /// Queries the state of oracle requests.
  @Sendable func state(
    request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse

  /// Queries latest fetched params from osmosis chain.
  @Sendable func chainParams(
    request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse

  /// Queries latest fetched list of incentivized pools from osmosis.
  @Sendable func incentivizedPools(
    request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse

  /// Queries latest fetched list of pool details from osmosis.
  @Sendable func pools(
    request: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "State":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>(),
        interceptors: self.interceptors?.makeStateInterceptors() ?? [],
        wrapping: self.state(request:context:)
      )

    case "ChainParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>(),
        interceptors: self.interceptors?.makeChainParamsInterceptors() ?? [],
        wrapping: self.chainParams(request:context:)
      )

    case "IncentivizedPools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? [],
        wrapping: self.incentivizedPools(request:context:)
      )

    case "Pools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        wrapping: self.pools(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'state'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStateInterceptors() -> [ServerInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse>]

  /// - Returns: Interceptors to use when handling 'chainParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainParamsInterceptors() -> [ServerInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse>]

  /// - Returns: Interceptors to use when handling 'incentivizedPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentivizedPoolsInterceptors() -> [ServerInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'pools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolsInterceptors() -> [ServerInterceptor<Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse>]
}

internal enum Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "quasarlabs.quasarnode.qoracle.osmosis.Query",
    methods: [
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.Methods.params,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.Methods.state,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.Methods.chainParams,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.Methods.incentivizedPools,
      Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryServerMetadata.Methods.pools,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let state = GRPCMethodDescriptor(
      name: "State",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/State",
      type: GRPCCallType.unary
    )

    internal static let chainParams = GRPCMethodDescriptor(
      name: "ChainParams",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/ChainParams",
      type: GRPCCallType.unary
    )

    internal static let incentivizedPools = GRPCMethodDescriptor(
      name: "IncentivizedPools",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/IncentivizedPools",
      type: GRPCCallType.unary
    )

    internal static let pools = GRPCMethodDescriptor(
      name: "Pools",
      path: "/quasarlabs.quasarnode.qoracle.osmosis.Query/Pools",
      type: GRPCCallType.unary
    )
  }
}
