//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/stakers/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Kyve_Stakers_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Stakers_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createStaker(
    _ request: Kyve_Stakers_V1beta1_MsgCreateStaker,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgCreateStaker, Kyve_Stakers_V1beta1_MsgCreateStakerResponse>

  func updateMetadata(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgUpdateMetadata, Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>

  func updateCommission(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateCommission,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgUpdateCommission, Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>

  func claimCommissionRewards(
    _ request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>

  func joinPool(
    _ request: Kyve_Stakers_V1beta1_MsgJoinPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgJoinPool, Kyve_Stakers_V1beta1_MsgJoinPoolResponse>

  func leavePool(
    _ request: Kyve_Stakers_V1beta1_MsgLeavePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgLeavePool, Kyve_Stakers_V1beta1_MsgLeavePoolResponse>

  func updateParams(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgUpdateParams, Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>
}

extension Kyve_Stakers_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "kyve.stakers.v1beta1.Msg"
  }

  /// CreateStaker ...
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateStaker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createStaker(
    _ request: Kyve_Stakers_V1beta1_MsgCreateStaker,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgCreateStaker, Kyve_Stakers_V1beta1_MsgCreateStakerResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.createStaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateStakerInterceptors() ?? []
    )
  }

  /// UpdateMetadata ...
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateMetadata(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgUpdateMetadata, Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMetadataInterceptors() ?? []
    )
  }

  /// UpdateCommission ...
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCommission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateCommission(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateCommission,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgUpdateCommission, Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCommissionInterceptors() ?? []
    )
  }

  /// ClaimCommissionRewards ...
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimCommissionRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimCommissionRewards(
    _ request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.claimCommissionRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimCommissionRewardsInterceptors() ?? []
    )
  }

  /// JoinPool ...
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinPool(
    _ request: Kyve_Stakers_V1beta1_MsgJoinPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgJoinPool, Kyve_Stakers_V1beta1_MsgJoinPoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.joinPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? []
    )
  }

  /// LeavePool ...
  ///
  /// - Parameters:
  ///   - request: Request to send to LeavePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leavePool(
    _ request: Kyve_Stakers_V1beta1_MsgLeavePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgLeavePool, Kyve_Stakers_V1beta1_MsgLeavePoolResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.leavePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeavePoolInterceptors() ?? []
    )
  }

  /// UpdateParams defines a governance operation for updating the x/stakers module
  /// parameters. The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Stakers_V1beta1_MsgUpdateParams, Kyve_Stakers_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Stakers_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Stakers_V1beta1_MsgNIOClient")
internal final class Kyve_Stakers_V1beta1_MsgClient: Kyve_Stakers_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.stakers.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Stakers_V1beta1_MsgNIOClient: Kyve_Stakers_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.stakers.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Stakers_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateStakerCall(
    _ request: Kyve_Stakers_V1beta1_MsgCreateStaker,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgCreateStaker, Kyve_Stakers_V1beta1_MsgCreateStakerResponse>

  func makeUpdateMetadataCall(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgUpdateMetadata, Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>

  func makeUpdateCommissionCall(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateCommission,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgUpdateCommission, Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>

  func makeClaimCommissionRewardsCall(
    _ request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>

  func makeJoinPoolCall(
    _ request: Kyve_Stakers_V1beta1_MsgJoinPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgJoinPool, Kyve_Stakers_V1beta1_MsgJoinPoolResponse>

  func makeLeavePoolCall(
    _ request: Kyve_Stakers_V1beta1_MsgLeavePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgLeavePool, Kyve_Stakers_V1beta1_MsgLeavePoolResponse>

  func makeUpdateParamsCall(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgUpdateParams, Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Stakers_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Stakers_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateStakerCall(
    _ request: Kyve_Stakers_V1beta1_MsgCreateStaker,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgCreateStaker, Kyve_Stakers_V1beta1_MsgCreateStakerResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.createStaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateStakerInterceptors() ?? []
    )
  }

  internal func makeUpdateMetadataCall(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgUpdateMetadata, Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMetadataInterceptors() ?? []
    )
  }

  internal func makeUpdateCommissionCall(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateCommission,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgUpdateCommission, Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCommissionInterceptors() ?? []
    )
  }

  internal func makeClaimCommissionRewardsCall(
    _ request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.claimCommissionRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimCommissionRewardsInterceptors() ?? []
    )
  }

  internal func makeJoinPoolCall(
    _ request: Kyve_Stakers_V1beta1_MsgJoinPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgJoinPool, Kyve_Stakers_V1beta1_MsgJoinPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.joinPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? []
    )
  }

  internal func makeLeavePoolCall(
    _ request: Kyve_Stakers_V1beta1_MsgLeavePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgLeavePool, Kyve_Stakers_V1beta1_MsgLeavePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.leavePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeavePoolInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Stakers_V1beta1_MsgUpdateParams, Kyve_Stakers_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Stakers_V1beta1_MsgAsyncClientProtocol {
  internal func createStaker(
    _ request: Kyve_Stakers_V1beta1_MsgCreateStaker,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgCreateStakerResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.createStaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateStakerInterceptors() ?? []
    )
  }

  internal func updateMetadata(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMetadataInterceptors() ?? []
    )
  }

  internal func updateCommission(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateCommission,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateCommission.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCommissionInterceptors() ?? []
    )
  }

  internal func claimCommissionRewards(
    _ request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.claimCommissionRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimCommissionRewardsInterceptors() ?? []
    )
  }

  internal func joinPool(
    _ request: Kyve_Stakers_V1beta1_MsgJoinPool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgJoinPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.joinPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? []
    )
  }

  internal func leavePool(
    _ request: Kyve_Stakers_V1beta1_MsgLeavePool,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgLeavePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.leavePool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeavePoolInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Kyve_Stakers_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Stakers_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Stakers_V1beta1_MsgAsyncClient: Kyve_Stakers_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Stakers_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createStaker'.
  func makeCreateStakerInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgCreateStaker, Kyve_Stakers_V1beta1_MsgCreateStakerResponse>]

  /// - Returns: Interceptors to use when invoking 'updateMetadata'.
  func makeUpdateMetadataInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgUpdateMetadata, Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'updateCommission'.
  func makeUpdateCommissionInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgUpdateCommission, Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>]

  /// - Returns: Interceptors to use when invoking 'claimCommissionRewards'.
  func makeClaimCommissionRewardsInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'joinPool'.
  func makeJoinPoolInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgJoinPool, Kyve_Stakers_V1beta1_MsgJoinPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'leavePool'.
  func makeLeavePoolInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgLeavePool, Kyve_Stakers_V1beta1_MsgLeavePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Kyve_Stakers_V1beta1_MsgUpdateParams, Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Kyve_Stakers_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.stakers.v1beta1.Msg",
    methods: [
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.createStaker,
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateMetadata,
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateCommission,
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.claimCommissionRewards,
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.joinPool,
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.leavePool,
      Kyve_Stakers_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createStaker = GRPCMethodDescriptor(
      name: "CreateStaker",
      path: "/kyve.stakers.v1beta1.Msg/CreateStaker",
      type: GRPCCallType.unary
    )

    internal static let updateMetadata = GRPCMethodDescriptor(
      name: "UpdateMetadata",
      path: "/kyve.stakers.v1beta1.Msg/UpdateMetadata",
      type: GRPCCallType.unary
    )

    internal static let updateCommission = GRPCMethodDescriptor(
      name: "UpdateCommission",
      path: "/kyve.stakers.v1beta1.Msg/UpdateCommission",
      type: GRPCCallType.unary
    )

    internal static let claimCommissionRewards = GRPCMethodDescriptor(
      name: "ClaimCommissionRewards",
      path: "/kyve.stakers.v1beta1.Msg/ClaimCommissionRewards",
      type: GRPCCallType.unary
    )

    internal static let joinPool = GRPCMethodDescriptor(
      name: "JoinPool",
      path: "/kyve.stakers.v1beta1.Msg/JoinPool",
      type: GRPCCallType.unary
    )

    internal static let leavePool = GRPCMethodDescriptor(
      name: "LeavePool",
      path: "/kyve.stakers.v1beta1.Msg/LeavePool",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/kyve.stakers.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Stakers_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Kyve_Stakers_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateStaker ...
  func createStaker(request: Kyve_Stakers_V1beta1_MsgCreateStaker, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgCreateStakerResponse>

  /// UpdateMetadata ...
  func updateMetadata(request: Kyve_Stakers_V1beta1_MsgUpdateMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>

  /// UpdateCommission ...
  func updateCommission(request: Kyve_Stakers_V1beta1_MsgUpdateCommission, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>

  /// ClaimCommissionRewards ...
  func claimCommissionRewards(request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>

  /// JoinPool ...
  func joinPool(request: Kyve_Stakers_V1beta1_MsgJoinPool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgJoinPoolResponse>

  /// LeavePool ...
  func leavePool(request: Kyve_Stakers_V1beta1_MsgLeavePool, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgLeavePoolResponse>

  /// UpdateParams defines a governance operation for updating the x/stakers module
  /// parameters. The authority is hard-coded to the x/gov module account.
  func updateParams(request: Kyve_Stakers_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>
}

extension Kyve_Stakers_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Kyve_Stakers_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateStaker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgCreateStaker>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgCreateStakerResponse>(),
        interceptors: self.interceptors?.makeCreateStakerInterceptors() ?? [],
        userFunction: self.createStaker(request:context:)
      )

    case "UpdateMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgUpdateMetadata>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateMetadataInterceptors() ?? [],
        userFunction: self.updateMetadata(request:context:)
      )

    case "UpdateCommission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgUpdateCommission>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>(),
        interceptors: self.interceptors?.makeUpdateCommissionInterceptors() ?? [],
        userFunction: self.updateCommission(request:context:)
      )

    case "ClaimCommissionRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimCommissionRewardsInterceptors() ?? [],
        userFunction: self.claimCommissionRewards(request:context:)
      )

    case "JoinPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgJoinPool>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgJoinPoolResponse>(),
        interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? [],
        userFunction: self.joinPool(request:context:)
      )

    case "LeavePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgLeavePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgLeavePoolResponse>(),
        interceptors: self.interceptors?.makeLeavePoolInterceptors() ?? [],
        userFunction: self.leavePool(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Stakers_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Stakers_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateStaker ...
  @Sendable func createStaker(
    request: Kyve_Stakers_V1beta1_MsgCreateStaker,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgCreateStakerResponse

  /// UpdateMetadata ...
  @Sendable func updateMetadata(
    request: Kyve_Stakers_V1beta1_MsgUpdateMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse

  /// UpdateCommission ...
  @Sendable func updateCommission(
    request: Kyve_Stakers_V1beta1_MsgUpdateCommission,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse

  /// ClaimCommissionRewards ...
  @Sendable func claimCommissionRewards(
    request: Kyve_Stakers_V1beta1_MsgClaimCommissionRewards,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse

  /// JoinPool ...
  @Sendable func joinPool(
    request: Kyve_Stakers_V1beta1_MsgJoinPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgJoinPoolResponse

  /// LeavePool ...
  @Sendable func leavePool(
    request: Kyve_Stakers_V1beta1_MsgLeavePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgLeavePoolResponse

  /// UpdateParams defines a governance operation for updating the x/stakers module
  /// parameters. The authority is hard-coded to the x/gov module account.
  @Sendable func updateParams(
    request: Kyve_Stakers_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Stakers_V1beta1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Stakers_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Stakers_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Stakers_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Stakers_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateStaker":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgCreateStaker>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgCreateStakerResponse>(),
        interceptors: self.interceptors?.makeCreateStakerInterceptors() ?? [],
        wrapping: self.createStaker(request:context:)
      )

    case "UpdateMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgUpdateMetadata>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateMetadataInterceptors() ?? [],
        wrapping: self.updateMetadata(request:context:)
      )

    case "UpdateCommission":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgUpdateCommission>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>(),
        interceptors: self.interceptors?.makeUpdateCommissionInterceptors() ?? [],
        wrapping: self.updateCommission(request:context:)
      )

    case "ClaimCommissionRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>(),
        interceptors: self.interceptors?.makeClaimCommissionRewardsInterceptors() ?? [],
        wrapping: self.claimCommissionRewards(request:context:)
      )

    case "JoinPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgJoinPool>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgJoinPoolResponse>(),
        interceptors: self.interceptors?.makeJoinPoolInterceptors() ?? [],
        wrapping: self.joinPool(request:context:)
      )

    case "LeavePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgLeavePool>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgLeavePoolResponse>(),
        interceptors: self.interceptors?.makeLeavePoolInterceptors() ?? [],
        wrapping: self.leavePool(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Stakers_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Stakers_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createStaker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateStakerInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgCreateStaker, Kyve_Stakers_V1beta1_MsgCreateStakerResponse>]

  /// - Returns: Interceptors to use when handling 'updateMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateMetadataInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgUpdateMetadata, Kyve_Stakers_V1beta1_MsgUpdateMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'updateCommission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateCommissionInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgUpdateCommission, Kyve_Stakers_V1beta1_MsgUpdateCommissionResponse>]

  /// - Returns: Interceptors to use when handling 'claimCommissionRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimCommissionRewardsInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgClaimCommissionRewards, Kyve_Stakers_V1beta1_MsgClaimCommissionRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'joinPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeJoinPoolInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgJoinPool, Kyve_Stakers_V1beta1_MsgJoinPoolResponse>]

  /// - Returns: Interceptors to use when handling 'leavePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeavePoolInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgLeavePool, Kyve_Stakers_V1beta1_MsgLeavePoolResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Kyve_Stakers_V1beta1_MsgUpdateParams, Kyve_Stakers_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Kyve_Stakers_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.stakers.v1beta1.Msg",
    methods: [
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.createStaker,
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.updateMetadata,
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.updateCommission,
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.claimCommissionRewards,
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.joinPool,
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.leavePool,
      Kyve_Stakers_V1beta1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createStaker = GRPCMethodDescriptor(
      name: "CreateStaker",
      path: "/kyve.stakers.v1beta1.Msg/CreateStaker",
      type: GRPCCallType.unary
    )

    internal static let updateMetadata = GRPCMethodDescriptor(
      name: "UpdateMetadata",
      path: "/kyve.stakers.v1beta1.Msg/UpdateMetadata",
      type: GRPCCallType.unary
    )

    internal static let updateCommission = GRPCMethodDescriptor(
      name: "UpdateCommission",
      path: "/kyve.stakers.v1beta1.Msg/UpdateCommission",
      type: GRPCCallType.unary
    )

    internal static let claimCommissionRewards = GRPCMethodDescriptor(
      name: "ClaimCommissionRewards",
      path: "/kyve.stakers.v1beta1.Msg/ClaimCommissionRewards",
      type: GRPCCallType.unary
    )

    internal static let joinPool = GRPCMethodDescriptor(
      name: "JoinPool",
      path: "/kyve.stakers.v1beta1.Msg/JoinPool",
      type: GRPCCallType.unary
    )

    internal static let leavePool = GRPCMethodDescriptor(
      name: "LeavePool",
      path: "/kyve.stakers.v1beta1.Msg/LeavePool",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/kyve.stakers.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
