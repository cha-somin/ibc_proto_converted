// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: likechain/likenft/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the likenft module's genesis state.
struct Likechain_Likenft_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Likechain_Likenft_V1_Params {
    get {return _params ?? Likechain_Likenft_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var classesByIscnList: [Likechain_Likenft_V1_ClassesByISCN] = []

  var classesByAccountList: [Likechain_Likenft_V1_ClassesByAccount] = []

  var blindBoxContentList: [Likechain_Likenft_V1_BlindBoxContent] = []

  var classRevealQueue: [Likechain_Likenft_V1_ClassRevealQueueEntry] = []

  var offerList: [Likechain_Likenft_V1_Offer] = []

  var listingList: [Likechain_Likenft_V1_Listing] = []

  var offerExpireQueue: [Likechain_Likenft_V1_OfferExpireQueueEntry] = []

  var listingExpireQueue: [Likechain_Likenft_V1_ListingExpireQueueEntry] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var royaltyConfigByClassList: [Likechain_Likenft_V1_RoyaltyConfigByClass] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Likechain_Likenft_V1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Likechain_Likenft_V1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "likechain.likenft.v1"

extension Likechain_Likenft_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "classes_by_iscn_list"),
    3: .standard(proto: "classes_by_account_list"),
    4: .standard(proto: "blind_box_content_list"),
    5: .standard(proto: "class_reveal_queue"),
    6: .standard(proto: "offer_list"),
    7: .standard(proto: "listing_list"),
    8: .standard(proto: "offer_expire_queue"),
    9: .standard(proto: "listing_expire_queue"),
    10: .standard(proto: "royalty_config_by_class_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.classesByIscnList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.classesByAccountList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.blindBoxContentList) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.classRevealQueue) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.offerList) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.listingList) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.offerExpireQueue) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.listingExpireQueue) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.royaltyConfigByClassList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.classesByIscnList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classesByIscnList, fieldNumber: 2)
    }
    if !self.classesByAccountList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classesByAccountList, fieldNumber: 3)
    }
    if !self.blindBoxContentList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blindBoxContentList, fieldNumber: 4)
    }
    if !self.classRevealQueue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classRevealQueue, fieldNumber: 5)
    }
    if !self.offerList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.offerList, fieldNumber: 6)
    }
    if !self.listingList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listingList, fieldNumber: 7)
    }
    if !self.offerExpireQueue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.offerExpireQueue, fieldNumber: 8)
    }
    if !self.listingExpireQueue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listingExpireQueue, fieldNumber: 9)
    }
    if !self.royaltyConfigByClassList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.royaltyConfigByClassList, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Likenft_V1_GenesisState, rhs: Likechain_Likenft_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.classesByIscnList != rhs.classesByIscnList {return false}
    if lhs.classesByAccountList != rhs.classesByAccountList {return false}
    if lhs.blindBoxContentList != rhs.blindBoxContentList {return false}
    if lhs.classRevealQueue != rhs.classRevealQueue {return false}
    if lhs.offerList != rhs.offerList {return false}
    if lhs.listingList != rhs.listingList {return false}
    if lhs.offerExpireQueue != rhs.offerExpireQueue {return false}
    if lhs.listingExpireQueue != rhs.listingExpireQueue {return false}
    if lhs.royaltyConfigByClassList != rhs.royaltyConfigByClassList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
