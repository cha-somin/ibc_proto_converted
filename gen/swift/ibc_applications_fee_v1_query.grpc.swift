//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/applications/fee/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the ICS29 gRPC querier service.
///
/// Usage: instantiate `Ibc_Applications_Fee_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Applications_Fee_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? { get }

  func incentivizedPackets(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>

  func incentivizedPacket(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>

  func incentivizedPacketsForChannel(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>

  func totalRecvFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>

  func totalAckFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>

  func totalTimeoutFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>

  func payee(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse>

  func counterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>

  func feeEnabledChannels(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>

  func feeEnabledChannel(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>
}

extension Ibc_Applications_Fee_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "ibc.applications.fee.v1.Query"
  }

  /// IncentivizedPackets returns all incentivized packets and their associated fees
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPackets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPackets(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPackets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsInterceptors() ?? []
    )
  }

  /// IncentivizedPacket returns all packet fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPacket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPacket(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketInterceptors() ?? []
    )
  }

  /// Gets all incentivized packets for a specific channel
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPacketsForChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPacketsForChannel(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacketsForChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsForChannelInterceptors() ?? []
    )
  }

  /// TotalRecvFees returns the total receive fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalRecvFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalRecvFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalRecvFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRecvFeesInterceptors() ?? []
    )
  }

  /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalAckFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalAckFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalAckFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalAckFeesInterceptors() ?? []
    )
  }

  /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalTimeoutFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalTimeoutFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalTimeoutFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalTimeoutFeesInterceptors() ?? []
    )
  }

  /// Payee returns the registered payee address for a specific channel given the relayer address
  ///
  /// - Parameters:
  ///   - request: Request to send to Payee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func payee(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.payee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayeeInterceptors() ?? []
    )
  }

  /// CounterpartyPayee returns the registered counterparty payee for forward relaying
  ///
  /// - Parameters:
  ///   - request: Request to send to CounterpartyPayee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func counterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.counterpartyPayee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyPayeeInterceptors() ?? []
    )
  }

  /// FeeEnabledChannels returns a list of all fee enabled channels
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeEnabledChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeEnabledChannels(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelsInterceptors() ?? []
    )
  }

  /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeEnabledChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeEnabledChannel(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse> {
    return self.makeUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ibc_Applications_Fee_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ibc_Applications_Fee_V1_QueryNIOClient")
internal final class Ibc_Applications_Fee_V1_QueryClient: Ibc_Applications_Fee_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.applications.fee.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ibc_Applications_Fee_V1_QueryNIOClient: Ibc_Applications_Fee_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.applications.fee.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the ICS29 gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Applications_Fee_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeIncentivizedPacketsCall(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>

  func makeIncentivizedPacketCall(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>

  func makeIncentivizedPacketsForChannelCall(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>

  func makeTotalRecvFeesCall(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>

  func makeTotalAckFeesCall(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>

  func makeTotalTimeoutFeesCall(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>

  func makePayeeCall(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse>

  func makeCounterpartyPayeeCall(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>

  func makeFeeEnabledChannelsCall(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>

  func makeFeeEnabledChannelCall(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Applications_Fee_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Applications_Fee_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeIncentivizedPacketsCall(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPackets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsInterceptors() ?? []
    )
  }

  internal func makeIncentivizedPacketCall(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketInterceptors() ?? []
    )
  }

  internal func makeIncentivizedPacketsForChannelCall(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacketsForChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsForChannelInterceptors() ?? []
    )
  }

  internal func makeTotalRecvFeesCall(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalRecvFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRecvFeesInterceptors() ?? []
    )
  }

  internal func makeTotalAckFeesCall(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalAckFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalAckFeesInterceptors() ?? []
    )
  }

  internal func makeTotalTimeoutFeesCall(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalTimeoutFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalTimeoutFeesInterceptors() ?? []
    )
  }

  internal func makePayeeCall(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.payee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayeeInterceptors() ?? []
    )
  }

  internal func makeCounterpartyPayeeCall(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.counterpartyPayee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyPayeeInterceptors() ?? []
    )
  }

  internal func makeFeeEnabledChannelsCall(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelsInterceptors() ?? []
    )
  }

  internal func makeFeeEnabledChannelCall(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Applications_Fee_V1_QueryAsyncClientProtocol {
  internal func incentivizedPackets(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPackets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsInterceptors() ?? []
    )
  }

  internal func incentivizedPacket(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketInterceptors() ?? []
    )
  }

  internal func incentivizedPacketsForChannel(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacketsForChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsForChannelInterceptors() ?? []
    )
  }

  internal func totalRecvFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalRecvFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRecvFeesInterceptors() ?? []
    )
  }

  internal func totalAckFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalAckFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalAckFeesInterceptors() ?? []
    )
  }

  internal func totalTimeoutFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalTimeoutFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalTimeoutFeesInterceptors() ?? []
    )
  }

  internal func payee(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryPayeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.payee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayeeInterceptors() ?? []
    )
  }

  internal func counterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.counterpartyPayee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyPayeeInterceptors() ?? []
    )
  }

  internal func feeEnabledChannels(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannels.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelsInterceptors() ?? []
    )
  }

  internal func feeEnabledChannel(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ibc_Applications_Fee_V1_QueryAsyncClient: Ibc_Applications_Fee_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'incentivizedPackets'.
  func makeIncentivizedPacketsInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>]

  /// - Returns: Interceptors to use when invoking 'incentivizedPacket'.
  func makeIncentivizedPacketInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>]

  /// - Returns: Interceptors to use when invoking 'incentivizedPacketsForChannel'.
  func makeIncentivizedPacketsForChannelInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'totalRecvFees'.
  func makeTotalRecvFeesInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'totalAckFees'.
  func makeTotalAckFeesInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'totalTimeoutFees'.
  func makeTotalTimeoutFeesInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'payee'.
  func makePayeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse>]

  /// - Returns: Interceptors to use when invoking 'counterpartyPayee'.
  func makeCounterpartyPayeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>]

  /// - Returns: Interceptors to use when invoking 'feeEnabledChannels'.
  func makeFeeEnabledChannelsInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>]

  /// - Returns: Interceptors to use when invoking 'feeEnabledChannel'.
  func makeFeeEnabledChannelInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>]
}

internal enum Ibc_Applications_Fee_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.applications.fee.v1.Query",
    methods: [
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPackets,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacket,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.incentivizedPacketsForChannel,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalRecvFees,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalAckFees,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.totalTimeoutFees,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.payee,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.counterpartyPayee,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannels,
      Ibc_Applications_Fee_V1_QueryClientMetadata.Methods.feeEnabledChannel,
    ]
  )

  internal enum Methods {
    internal static let incentivizedPackets = GRPCMethodDescriptor(
      name: "IncentivizedPackets",
      path: "/ibc.applications.fee.v1.Query/IncentivizedPackets",
      type: GRPCCallType.unary
    )

    internal static let incentivizedPacket = GRPCMethodDescriptor(
      name: "IncentivizedPacket",
      path: "/ibc.applications.fee.v1.Query/IncentivizedPacket",
      type: GRPCCallType.unary
    )

    internal static let incentivizedPacketsForChannel = GRPCMethodDescriptor(
      name: "IncentivizedPacketsForChannel",
      path: "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel",
      type: GRPCCallType.unary
    )

    internal static let totalRecvFees = GRPCMethodDescriptor(
      name: "TotalRecvFees",
      path: "/ibc.applications.fee.v1.Query/TotalRecvFees",
      type: GRPCCallType.unary
    )

    internal static let totalAckFees = GRPCMethodDescriptor(
      name: "TotalAckFees",
      path: "/ibc.applications.fee.v1.Query/TotalAckFees",
      type: GRPCCallType.unary
    )

    internal static let totalTimeoutFees = GRPCMethodDescriptor(
      name: "TotalTimeoutFees",
      path: "/ibc.applications.fee.v1.Query/TotalTimeoutFees",
      type: GRPCCallType.unary
    )

    internal static let payee = GRPCMethodDescriptor(
      name: "Payee",
      path: "/ibc.applications.fee.v1.Query/Payee",
      type: GRPCCallType.unary
    )

    internal static let counterpartyPayee = GRPCMethodDescriptor(
      name: "CounterpartyPayee",
      path: "/ibc.applications.fee.v1.Query/CounterpartyPayee",
      type: GRPCCallType.unary
    )

    internal static let feeEnabledChannels = GRPCMethodDescriptor(
      name: "FeeEnabledChannels",
      path: "/ibc.applications.fee.v1.Query/FeeEnabledChannels",
      type: GRPCCallType.unary
    )

    internal static let feeEnabledChannel = GRPCMethodDescriptor(
      name: "FeeEnabledChannel",
      path: "/ibc.applications.fee.v1.Query/FeeEnabledChannel",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the ICS29 gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ibc_Applications_Fee_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Ibc_Applications_Fee_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// IncentivizedPackets returns all incentivized packets and their associated fees
  func incentivizedPackets(request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>

  /// IncentivizedPacket returns all packet fees for a packet given its identifier
  func incentivizedPacket(request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>

  /// Gets all incentivized packets for a specific channel
  func incentivizedPacketsForChannel(request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>

  /// TotalRecvFees returns the total receive fees for a packet given its identifier
  func totalRecvFees(request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>

  /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
  func totalAckFees(request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>

  /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
  func totalTimeoutFees(request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>

  /// Payee returns the registered payee address for a specific channel given the relayer address
  func payee(request: Ibc_Applications_Fee_V1_QueryPayeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryPayeeResponse>

  /// CounterpartyPayee returns the registered counterparty payee for forward relaying
  func counterpartyPayee(request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>

  /// FeeEnabledChannels returns a list of all fee enabled channels
  func feeEnabledChannels(request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>

  /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
  func feeEnabledChannel(request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>
}

extension Ibc_Applications_Fee_V1_QueryProvider {
  internal var serviceName: Substring {
    return Ibc_Applications_Fee_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IncentivizedPackets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPacketsInterceptors() ?? [],
        userFunction: self.incentivizedPackets(request:context:)
      )

    case "IncentivizedPacket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPacketInterceptors() ?? [],
        userFunction: self.incentivizedPacket(request:context:)
      )

    case "IncentivizedPacketsForChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPacketsForChannelInterceptors() ?? [],
        userFunction: self.incentivizedPacketsForChannel(request:context:)
      )

    case "TotalRecvFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>(),
        interceptors: self.interceptors?.makeTotalRecvFeesInterceptors() ?? [],
        userFunction: self.totalRecvFees(request:context:)
      )

    case "TotalAckFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>(),
        interceptors: self.interceptors?.makeTotalAckFeesInterceptors() ?? [],
        userFunction: self.totalAckFees(request:context:)
      )

    case "TotalTimeoutFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>(),
        interceptors: self.interceptors?.makeTotalTimeoutFeesInterceptors() ?? [],
        userFunction: self.totalTimeoutFees(request:context:)
      )

    case "Payee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryPayeeRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryPayeeResponse>(),
        interceptors: self.interceptors?.makePayeeInterceptors() ?? [],
        userFunction: self.payee(request:context:)
      )

    case "CounterpartyPayee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>(),
        interceptors: self.interceptors?.makeCounterpartyPayeeInterceptors() ?? [],
        userFunction: self.counterpartyPayee(request:context:)
      )

    case "FeeEnabledChannels":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>(),
        interceptors: self.interceptors?.makeFeeEnabledChannelsInterceptors() ?? [],
        userFunction: self.feeEnabledChannels(request:context:)
      )

    case "FeeEnabledChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>(),
        interceptors: self.interceptors?.makeFeeEnabledChannelInterceptors() ?? [],
        userFunction: self.feeEnabledChannel(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the ICS29 gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ibc_Applications_Fee_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Applications_Fee_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// IncentivizedPackets returns all incentivized packets and their associated fees
  @Sendable func incentivizedPackets(
    request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse

  /// IncentivizedPacket returns all packet fees for a packet given its identifier
  @Sendable func incentivizedPacket(
    request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse

  /// Gets all incentivized packets for a specific channel
  @Sendable func incentivizedPacketsForChannel(
    request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse

  /// TotalRecvFees returns the total receive fees for a packet given its identifier
  @Sendable func totalRecvFees(
    request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse

  /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
  @Sendable func totalAckFees(
    request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse

  /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
  @Sendable func totalTimeoutFees(
    request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse

  /// Payee returns the registered payee address for a specific channel given the relayer address
  @Sendable func payee(
    request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryPayeeResponse

  /// CounterpartyPayee returns the registered counterparty payee for forward relaying
  @Sendable func counterpartyPayee(
    request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse

  /// FeeEnabledChannels returns a list of all fee enabled channels
  @Sendable func feeEnabledChannels(
    request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse

  /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
  @Sendable func feeEnabledChannel(
    request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Applications_Fee_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Applications_Fee_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ibc_Applications_Fee_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ibc_Applications_Fee_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IncentivizedPackets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPacketsInterceptors() ?? [],
        wrapping: self.incentivizedPackets(request:context:)
      )

    case "IncentivizedPacket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPacketInterceptors() ?? [],
        wrapping: self.incentivizedPacket(request:context:)
      )

    case "IncentivizedPacketsForChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPacketsForChannelInterceptors() ?? [],
        wrapping: self.incentivizedPacketsForChannel(request:context:)
      )

    case "TotalRecvFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>(),
        interceptors: self.interceptors?.makeTotalRecvFeesInterceptors() ?? [],
        wrapping: self.totalRecvFees(request:context:)
      )

    case "TotalAckFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>(),
        interceptors: self.interceptors?.makeTotalAckFeesInterceptors() ?? [],
        wrapping: self.totalAckFees(request:context:)
      )

    case "TotalTimeoutFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>(),
        interceptors: self.interceptors?.makeTotalTimeoutFeesInterceptors() ?? [],
        wrapping: self.totalTimeoutFees(request:context:)
      )

    case "Payee":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryPayeeRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryPayeeResponse>(),
        interceptors: self.interceptors?.makePayeeInterceptors() ?? [],
        wrapping: self.payee(request:context:)
      )

    case "CounterpartyPayee":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>(),
        interceptors: self.interceptors?.makeCounterpartyPayeeInterceptors() ?? [],
        wrapping: self.counterpartyPayee(request:context:)
      )

    case "FeeEnabledChannels":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>(),
        interceptors: self.interceptors?.makeFeeEnabledChannelsInterceptors() ?? [],
        wrapping: self.feeEnabledChannels(request:context:)
      )

    case "FeeEnabledChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>(),
        interceptors: self.interceptors?.makeFeeEnabledChannelInterceptors() ?? [],
        wrapping: self.feeEnabledChannel(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ibc_Applications_Fee_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'incentivizedPackets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentivizedPacketsInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>]

  /// - Returns: Interceptors to use when handling 'incentivizedPacket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentivizedPacketInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>]

  /// - Returns: Interceptors to use when handling 'incentivizedPacketsForChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentivizedPacketsForChannelInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>]

  /// - Returns: Interceptors to use when handling 'totalRecvFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalRecvFeesInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>]

  /// - Returns: Interceptors to use when handling 'totalAckFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalAckFeesInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>]

  /// - Returns: Interceptors to use when handling 'totalTimeoutFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalTimeoutFeesInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>]

  /// - Returns: Interceptors to use when handling 'payee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePayeeInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse>]

  /// - Returns: Interceptors to use when handling 'counterpartyPayee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCounterpartyPayeeInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>]

  /// - Returns: Interceptors to use when handling 'feeEnabledChannels'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeEnabledChannelsInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>]

  /// - Returns: Interceptors to use when handling 'feeEnabledChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeEnabledChannelInterceptors() -> [ServerInterceptor<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>]
}

internal enum Ibc_Applications_Fee_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.applications.fee.v1.Query",
    methods: [
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.incentivizedPackets,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.incentivizedPacket,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.incentivizedPacketsForChannel,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.totalRecvFees,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.totalAckFees,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.totalTimeoutFees,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.payee,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.counterpartyPayee,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.feeEnabledChannels,
      Ibc_Applications_Fee_V1_QueryServerMetadata.Methods.feeEnabledChannel,
    ]
  )

  internal enum Methods {
    internal static let incentivizedPackets = GRPCMethodDescriptor(
      name: "IncentivizedPackets",
      path: "/ibc.applications.fee.v1.Query/IncentivizedPackets",
      type: GRPCCallType.unary
    )

    internal static let incentivizedPacket = GRPCMethodDescriptor(
      name: "IncentivizedPacket",
      path: "/ibc.applications.fee.v1.Query/IncentivizedPacket",
      type: GRPCCallType.unary
    )

    internal static let incentivizedPacketsForChannel = GRPCMethodDescriptor(
      name: "IncentivizedPacketsForChannel",
      path: "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel",
      type: GRPCCallType.unary
    )

    internal static let totalRecvFees = GRPCMethodDescriptor(
      name: "TotalRecvFees",
      path: "/ibc.applications.fee.v1.Query/TotalRecvFees",
      type: GRPCCallType.unary
    )

    internal static let totalAckFees = GRPCMethodDescriptor(
      name: "TotalAckFees",
      path: "/ibc.applications.fee.v1.Query/TotalAckFees",
      type: GRPCCallType.unary
    )

    internal static let totalTimeoutFees = GRPCMethodDescriptor(
      name: "TotalTimeoutFees",
      path: "/ibc.applications.fee.v1.Query/TotalTimeoutFees",
      type: GRPCCallType.unary
    )

    internal static let payee = GRPCMethodDescriptor(
      name: "Payee",
      path: "/ibc.applications.fee.v1.Query/Payee",
      type: GRPCCallType.unary
    )

    internal static let counterpartyPayee = GRPCMethodDescriptor(
      name: "CounterpartyPayee",
      path: "/ibc.applications.fee.v1.Query/CounterpartyPayee",
      type: GRPCCallType.unary
    )

    internal static let feeEnabledChannels = GRPCMethodDescriptor(
      name: "FeeEnabledChannels",
      path: "/ibc.applications.fee.v1.Query/FeeEnabledChannels",
      type: GRPCCallType.unary
    )

    internal static let feeEnabledChannel = GRPCMethodDescriptor(
      name: "FeeEnabledChannel",
      path: "/ibc.applications.fee.v1.Query/FeeEnabledChannel",
      type: GRPCCallType.unary
    )
  }
}
