// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/ratelimit/ratelimit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Stride_Ratelimit_PacketDirection: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case packetSend // = 0
  case packetRecv // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .packetSend
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .packetSend
    case 1: self = .packetRecv
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .packetSend: return 0
    case .packetRecv: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Stride_Ratelimit_PacketDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Stride_Ratelimit_PacketDirection] = [
    .packetSend,
    .packetRecv,
  ]
}

#endif  // swift(>=4.2)

struct Stride_Ratelimit_Path {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var channelID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Ratelimit_Quota {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var maxPercentSend: String = String()

  var maxPercentRecv: String = String()

  var durationHours: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Ratelimit_Flow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inflow: String = String()

  var outflow: String = String()

  var channelValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stride_Ratelimit_RateLimit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Stride_Ratelimit_Path {
    get {return _path ?? Stride_Ratelimit_Path()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {self._path = nil}

  var quota: Stride_Ratelimit_Quota {
    get {return _quota ?? Stride_Ratelimit_Quota()}
    set {_quota = newValue}
  }
  /// Returns true if `quota` has been explicitly set.
  var hasQuota: Bool {return self._quota != nil}
  /// Clears the value of `quota`. Subsequent reads from it will return its default value.
  mutating func clearQuota() {self._quota = nil}

  var flow: Stride_Ratelimit_Flow {
    get {return _flow ?? Stride_Ratelimit_Flow()}
    set {_flow = newValue}
  }
  /// Returns true if `flow` has been explicitly set.
  var hasFlow: Bool {return self._flow != nil}
  /// Clears the value of `flow`. Subsequent reads from it will return its default value.
  mutating func clearFlow() {self._flow = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _path: Stride_Ratelimit_Path? = nil
  fileprivate var _quota: Stride_Ratelimit_Quota? = nil
  fileprivate var _flow: Stride_Ratelimit_Flow? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stride_Ratelimit_PacketDirection: @unchecked Sendable {}
extension Stride_Ratelimit_Path: @unchecked Sendable {}
extension Stride_Ratelimit_Quota: @unchecked Sendable {}
extension Stride_Ratelimit_Flow: @unchecked Sendable {}
extension Stride_Ratelimit_RateLimit: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.ratelimit"

extension Stride_Ratelimit_PacketDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PACKET_SEND"),
    1: .same(proto: "PACKET_RECV"),
  ]
}

extension Stride_Ratelimit_Path: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Path"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "channel_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channelID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Ratelimit_Path, rhs: Stride_Ratelimit_Path) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Ratelimit_Quota: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Quota"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_percent_send"),
    2: .standard(proto: "max_percent_recv"),
    3: .standard(proto: "duration_hours"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.maxPercentSend) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.maxPercentRecv) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.durationHours) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.maxPercentSend.isEmpty {
      try visitor.visitSingularStringField(value: self.maxPercentSend, fieldNumber: 1)
    }
    if !self.maxPercentRecv.isEmpty {
      try visitor.visitSingularStringField(value: self.maxPercentRecv, fieldNumber: 2)
    }
    if self.durationHours != 0 {
      try visitor.visitSingularUInt64Field(value: self.durationHours, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Ratelimit_Quota, rhs: Stride_Ratelimit_Quota) -> Bool {
    if lhs.maxPercentSend != rhs.maxPercentSend {return false}
    if lhs.maxPercentRecv != rhs.maxPercentRecv {return false}
    if lhs.durationHours != rhs.durationHours {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Ratelimit_Flow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Flow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inflow"),
    2: .same(proto: "outflow"),
    3: .standard(proto: "channel_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inflow) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.outflow) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.channelValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inflow.isEmpty {
      try visitor.visitSingularStringField(value: self.inflow, fieldNumber: 1)
    }
    if !self.outflow.isEmpty {
      try visitor.visitSingularStringField(value: self.outflow, fieldNumber: 2)
    }
    if !self.channelValue.isEmpty {
      try visitor.visitSingularStringField(value: self.channelValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Ratelimit_Flow, rhs: Stride_Ratelimit_Flow) -> Bool {
    if lhs.inflow != rhs.inflow {return false}
    if lhs.outflow != rhs.outflow {return false}
    if lhs.channelValue != rhs.channelValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stride_Ratelimit_RateLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RateLimit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "quota"),
    3: .same(proto: "flow"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._quota) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._flow) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._quota {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._flow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Ratelimit_RateLimit, rhs: Stride_Ratelimit_RateLimit) -> Bool {
    if lhs._path != rhs._path {return false}
    if lhs._quota != rhs._quota {return false}
    if lhs._flow != rhs._flow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
