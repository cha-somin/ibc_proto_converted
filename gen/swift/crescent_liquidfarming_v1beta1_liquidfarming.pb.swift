// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/liquidfarming/v1beta1/liquidfarming.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AuctionStatus enumerates the valid status of an auction.
enum Crescent_Liquidfarming_V1beta1_AuctionStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// AUCTION_STATUS_UNSPECIFIED defines the default auction status
  case unspecified // = 0

  /// AUCTION_STATUS_STARTED defines the started auction status
  case started // = 1

  /// AUCTION_STATUS_FINISHED defines the finished auction status
  case finished // = 2

  /// AUCTION_STATUS_SKIPPED defines the skipped auction status
  case skipped // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .started
    case 2: self = .finished
    case 3: self = .skipped
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .started: return 1
    case .finished: return 2
    case .skipped: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Crescent_Liquidfarming_V1beta1_AuctionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Crescent_Liquidfarming_V1beta1_AuctionStatus] = [
    .unspecified,
    .started,
    .finished,
    .skipped,
  ]
}

#endif  // swift(>=4.2)

/// RewardsAuction defines rewards auction that is created by the module
/// for every rewards_auction_duration in params.
struct Crescent_Liquidfarming_V1beta1_RewardsAuction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id specifies the unique auction id
  var id: UInt64 = 0

  /// pool_id specifies the liquidity pool id
  var poolID: UInt64 = 0

  /// bidding_coin_denom specifies the bidding coin denomination
  var biddingCoinDenom: String = String()

  /// paying_reserve_address specfies the account that reserves bidding amounts placed by bidders
  var payingReserveAddress: String = String()

  /// start_time specifies the start time of an auction
  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  /// end_time specifies the end time of an auction
  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  /// status specifies the status of an auction
  var status: Crescent_Liquidfarming_V1beta1_AuctionStatus = .unspecified

  /// winner specifies the bidder who won the auction
  /// the value is determined when an auction is finished
  var winner: String = String()

  /// winning_amount specifies the winning amount for the uaction
  var winningAmount: Cosmos_Base_V1beta1_Coin {
    get {return _winningAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_winningAmount = newValue}
  }
  /// Returns true if `winningAmount` has been explicitly set.
  var hasWinningAmount: Bool {return self._winningAmount != nil}
  /// Clears the value of `winningAmount`. Subsequent reads from it will return its default value.
  mutating func clearWinningAmount() {self._winningAmount = nil}

  /// rewards specifies the farming rewards for are accumulated in the farm module
  /// the value is determined when an auction is finished
  var rewards: [Cosmos_Base_V1beta1_Coin] = []

  var fees: [Cosmos_Base_V1beta1_Coin] = []

  var feeRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _winningAmount: Cosmos_Base_V1beta1_Coin? = nil
}

/// CompoundingRewards records the amount of pool coin that is used for a bidder to place a bid
/// for an auction. It is used internally to calculate unfarm amount.
struct Crescent_Liquidfarming_V1beta1_CompoundingRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Bid defines standard bid for a rewards auction.
struct Crescent_Liquidfarming_V1beta1_Bid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id specifies the pool id
  var poolID: UInt64 = 0

  /// bidder specifies the bech32-encoded address that places a bid for the auction
  var bidder: String = String()

  /// amount specifies the amount to place a bid
  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Crescent_Liquidfarming_V1beta1_AuctionStatus: @unchecked Sendable {}
extension Crescent_Liquidfarming_V1beta1_RewardsAuction: @unchecked Sendable {}
extension Crescent_Liquidfarming_V1beta1_CompoundingRewards: @unchecked Sendable {}
extension Crescent_Liquidfarming_V1beta1_Bid: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.liquidfarming.v1beta1"

extension Crescent_Liquidfarming_V1beta1_AuctionStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUCTION_STATUS_UNSPECIFIED"),
    1: .same(proto: "AUCTION_STATUS_STARTED"),
    2: .same(proto: "AUCTION_STATUS_FINISHED"),
    3: .same(proto: "AUCTION_STATUS_SKIPPED"),
  ]
}

extension Crescent_Liquidfarming_V1beta1_RewardsAuction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RewardsAuction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "bidding_coin_denom"),
    4: .standard(proto: "paying_reserve_address"),
    5: .standard(proto: "start_time"),
    6: .standard(proto: "end_time"),
    7: .same(proto: "status"),
    8: .same(proto: "winner"),
    9: .standard(proto: "winning_amount"),
    10: .same(proto: "rewards"),
    11: .same(proto: "fees"),
    12: .standard(proto: "fee_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.biddingCoinDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.payingReserveAddress) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.winner) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._winningAmount) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.rewards) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.feeRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.biddingCoinDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.biddingCoinDenom, fieldNumber: 3)
    }
    if !self.payingReserveAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.payingReserveAddress, fieldNumber: 4)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 7)
    }
    if !self.winner.isEmpty {
      try visitor.visitSingularStringField(value: self.winner, fieldNumber: 8)
    }
    try { if let v = self._winningAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.rewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewards, fieldNumber: 10)
    }
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 11)
    }
    if !self.feeRate.isEmpty {
      try visitor.visitSingularStringField(value: self.feeRate, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Liquidfarming_V1beta1_RewardsAuction, rhs: Crescent_Liquidfarming_V1beta1_RewardsAuction) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.biddingCoinDenom != rhs.biddingCoinDenom {return false}
    if lhs.payingReserveAddress != rhs.payingReserveAddress {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.status != rhs.status {return false}
    if lhs.winner != rhs.winner {return false}
    if lhs._winningAmount != rhs._winningAmount {return false}
    if lhs.rewards != rhs.rewards {return false}
    if lhs.fees != rhs.fees {return false}
    if lhs.feeRate != rhs.feeRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Liquidfarming_V1beta1_CompoundingRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompoundingRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Liquidfarming_V1beta1_CompoundingRewards, rhs: Crescent_Liquidfarming_V1beta1_CompoundingRewards) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Liquidfarming_V1beta1_Bid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Bid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "bidder"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bidder) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.bidder.isEmpty {
      try visitor.visitSingularStringField(value: self.bidder, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Liquidfarming_V1beta1_Bid, rhs: Crescent_Liquidfarming_V1beta1_Bid) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.bidder != rhs.bidder {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
