//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/reactions/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the reactions Msg service.
///
/// Usage: instantiate `Desmos_Reactions_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Reactions_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? { get }

  func addReaction(
    _ request: Desmos_Reactions_V1_MsgAddReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reactions_V1_MsgAddReaction, Desmos_Reactions_V1_MsgAddReactionResponse>

  func removeReaction(
    _ request: Desmos_Reactions_V1_MsgRemoveReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reactions_V1_MsgRemoveReaction, Desmos_Reactions_V1_MsgRemoveReactionResponse>

  func addRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgAddRegisteredReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reactions_V1_MsgAddRegisteredReaction, Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>

  func editRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgEditRegisteredReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reactions_V1_MsgEditRegisteredReaction, Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>

  func removeRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reactions_V1_MsgRemoveRegisteredReaction, Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>

  func setReactionsParams(
    _ request: Desmos_Reactions_V1_MsgSetReactionsParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Reactions_V1_MsgSetReactionsParams, Desmos_Reactions_V1_MsgSetReactionsParamsResponse>
}

extension Desmos_Reactions_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.reactions.v1.Msg"
  }

  /// AddReaction allows to add a post reaction
  ///
  /// - Parameters:
  ///   - request: Request to send to AddReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addReaction(
    _ request: Desmos_Reactions_V1_MsgAddReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reactions_V1_MsgAddReaction, Desmos_Reactions_V1_MsgAddReactionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.addReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddReactionInterceptors() ?? []
    )
  }

  /// RemoveReaction allows to remove an existing post reaction
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeReaction(
    _ request: Desmos_Reactions_V1_MsgRemoveReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reactions_V1_MsgRemoveReaction, Desmos_Reactions_V1_MsgRemoveReactionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.removeReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveReactionInterceptors() ?? []
    )
  }

  /// AddRegisteredReaction allows to registered a new supported reaction
  ///
  /// - Parameters:
  ///   - request: Request to send to AddRegisteredReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgAddRegisteredReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reactions_V1_MsgAddRegisteredReaction, Desmos_Reactions_V1_MsgAddRegisteredReactionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.addRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddRegisteredReactionInterceptors() ?? []
    )
  }

  /// EditRegisteredReaction allows to edit a registered reaction
  ///
  /// - Parameters:
  ///   - request: Request to send to EditRegisteredReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgEditRegisteredReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reactions_V1_MsgEditRegisteredReaction, Desmos_Reactions_V1_MsgEditRegisteredReactionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.editRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditRegisteredReactionInterceptors() ?? []
    )
  }

  /// RemoveRegisteredReaction allows to remove an existing supported reaction
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveRegisteredReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reactions_V1_MsgRemoveRegisteredReaction, Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.removeRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveRegisteredReactionInterceptors() ?? []
    )
  }

  /// SetReactionsParams allows to set the reactions params
  ///
  /// - Parameters:
  ///   - request: Request to send to SetReactionsParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setReactionsParams(
    _ request: Desmos_Reactions_V1_MsgSetReactionsParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Reactions_V1_MsgSetReactionsParams, Desmos_Reactions_V1_MsgSetReactionsParamsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.setReactionsParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetReactionsParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Desmos_Reactions_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Desmos_Reactions_V1_MsgNIOClient")
internal final class Desmos_Reactions_V1_MsgClient: Desmos_Reactions_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the desmos.reactions.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Desmos_Reactions_V1_MsgNIOClient: Desmos_Reactions_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.reactions.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the reactions Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Reactions_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeAddReactionCall(
    _ request: Desmos_Reactions_V1_MsgAddReaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgAddReaction, Desmos_Reactions_V1_MsgAddReactionResponse>

  func makeRemoveReactionCall(
    _ request: Desmos_Reactions_V1_MsgRemoveReaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgRemoveReaction, Desmos_Reactions_V1_MsgRemoveReactionResponse>

  func makeAddRegisteredReactionCall(
    _ request: Desmos_Reactions_V1_MsgAddRegisteredReaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgAddRegisteredReaction, Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>

  func makeEditRegisteredReactionCall(
    _ request: Desmos_Reactions_V1_MsgEditRegisteredReaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgEditRegisteredReaction, Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>

  func makeRemoveRegisteredReactionCall(
    _ request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgRemoveRegisteredReaction, Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>

  func makeSetReactionsParamsCall(
    _ request: Desmos_Reactions_V1_MsgSetReactionsParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgSetReactionsParams, Desmos_Reactions_V1_MsgSetReactionsParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Reactions_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Reactions_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddReactionCall(
    _ request: Desmos_Reactions_V1_MsgAddReaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgAddReaction, Desmos_Reactions_V1_MsgAddReactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.addReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddReactionInterceptors() ?? []
    )
  }

  internal func makeRemoveReactionCall(
    _ request: Desmos_Reactions_V1_MsgRemoveReaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgRemoveReaction, Desmos_Reactions_V1_MsgRemoveReactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.removeReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveReactionInterceptors() ?? []
    )
  }

  internal func makeAddRegisteredReactionCall(
    _ request: Desmos_Reactions_V1_MsgAddRegisteredReaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgAddRegisteredReaction, Desmos_Reactions_V1_MsgAddRegisteredReactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.addRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddRegisteredReactionInterceptors() ?? []
    )
  }

  internal func makeEditRegisteredReactionCall(
    _ request: Desmos_Reactions_V1_MsgEditRegisteredReaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgEditRegisteredReaction, Desmos_Reactions_V1_MsgEditRegisteredReactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.editRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditRegisteredReactionInterceptors() ?? []
    )
  }

  internal func makeRemoveRegisteredReactionCall(
    _ request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgRemoveRegisteredReaction, Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.removeRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveRegisteredReactionInterceptors() ?? []
    )
  }

  internal func makeSetReactionsParamsCall(
    _ request: Desmos_Reactions_V1_MsgSetReactionsParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Reactions_V1_MsgSetReactionsParams, Desmos_Reactions_V1_MsgSetReactionsParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.setReactionsParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetReactionsParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Reactions_V1_MsgAsyncClientProtocol {
  internal func addReaction(
    _ request: Desmos_Reactions_V1_MsgAddReaction,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reactions_V1_MsgAddReactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.addReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddReactionInterceptors() ?? []
    )
  }

  internal func removeReaction(
    _ request: Desmos_Reactions_V1_MsgRemoveReaction,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reactions_V1_MsgRemoveReactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.removeReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveReactionInterceptors() ?? []
    )
  }

  internal func addRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgAddRegisteredReaction,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reactions_V1_MsgAddRegisteredReactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.addRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddRegisteredReactionInterceptors() ?? []
    )
  }

  internal func editRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgEditRegisteredReaction,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reactions_V1_MsgEditRegisteredReactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.editRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditRegisteredReactionInterceptors() ?? []
    )
  }

  internal func removeRegisteredReaction(
    _ request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.removeRegisteredReaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveRegisteredReactionInterceptors() ?? []
    )
  }

  internal func setReactionsParams(
    _ request: Desmos_Reactions_V1_MsgSetReactionsParams,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Reactions_V1_MsgSetReactionsParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Reactions_V1_MsgClientMetadata.Methods.setReactionsParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetReactionsParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Desmos_Reactions_V1_MsgAsyncClient: Desmos_Reactions_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Desmos_Reactions_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addReaction'.
  func makeAddReactionInterceptors() -> [ClientInterceptor<Desmos_Reactions_V1_MsgAddReaction, Desmos_Reactions_V1_MsgAddReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'removeReaction'.
  func makeRemoveReactionInterceptors() -> [ClientInterceptor<Desmos_Reactions_V1_MsgRemoveReaction, Desmos_Reactions_V1_MsgRemoveReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'addRegisteredReaction'.
  func makeAddRegisteredReactionInterceptors() -> [ClientInterceptor<Desmos_Reactions_V1_MsgAddRegisteredReaction, Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'editRegisteredReaction'.
  func makeEditRegisteredReactionInterceptors() -> [ClientInterceptor<Desmos_Reactions_V1_MsgEditRegisteredReaction, Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'removeRegisteredReaction'.
  func makeRemoveRegisteredReactionInterceptors() -> [ClientInterceptor<Desmos_Reactions_V1_MsgRemoveRegisteredReaction, Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'setReactionsParams'.
  func makeSetReactionsParamsInterceptors() -> [ClientInterceptor<Desmos_Reactions_V1_MsgSetReactionsParams, Desmos_Reactions_V1_MsgSetReactionsParamsResponse>]
}

internal enum Desmos_Reactions_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.reactions.v1.Msg",
    methods: [
      Desmos_Reactions_V1_MsgClientMetadata.Methods.addReaction,
      Desmos_Reactions_V1_MsgClientMetadata.Methods.removeReaction,
      Desmos_Reactions_V1_MsgClientMetadata.Methods.addRegisteredReaction,
      Desmos_Reactions_V1_MsgClientMetadata.Methods.editRegisteredReaction,
      Desmos_Reactions_V1_MsgClientMetadata.Methods.removeRegisteredReaction,
      Desmos_Reactions_V1_MsgClientMetadata.Methods.setReactionsParams,
    ]
  )

  internal enum Methods {
    internal static let addReaction = GRPCMethodDescriptor(
      name: "AddReaction",
      path: "/desmos.reactions.v1.Msg/AddReaction",
      type: GRPCCallType.unary
    )

    internal static let removeReaction = GRPCMethodDescriptor(
      name: "RemoveReaction",
      path: "/desmos.reactions.v1.Msg/RemoveReaction",
      type: GRPCCallType.unary
    )

    internal static let addRegisteredReaction = GRPCMethodDescriptor(
      name: "AddRegisteredReaction",
      path: "/desmos.reactions.v1.Msg/AddRegisteredReaction",
      type: GRPCCallType.unary
    )

    internal static let editRegisteredReaction = GRPCMethodDescriptor(
      name: "EditRegisteredReaction",
      path: "/desmos.reactions.v1.Msg/EditRegisteredReaction",
      type: GRPCCallType.unary
    )

    internal static let removeRegisteredReaction = GRPCMethodDescriptor(
      name: "RemoveRegisteredReaction",
      path: "/desmos.reactions.v1.Msg/RemoveRegisteredReaction",
      type: GRPCCallType.unary
    )

    internal static let setReactionsParams = GRPCMethodDescriptor(
      name: "SetReactionsParams",
      path: "/desmos.reactions.v1.Msg/SetReactionsParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the reactions Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Reactions_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Reactions_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// AddReaction allows to add a post reaction
  func addReaction(request: Desmos_Reactions_V1_MsgAddReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reactions_V1_MsgAddReactionResponse>

  /// RemoveReaction allows to remove an existing post reaction
  func removeReaction(request: Desmos_Reactions_V1_MsgRemoveReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reactions_V1_MsgRemoveReactionResponse>

  /// AddRegisteredReaction allows to registered a new supported reaction
  func addRegisteredReaction(request: Desmos_Reactions_V1_MsgAddRegisteredReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>

  /// EditRegisteredReaction allows to edit a registered reaction
  func editRegisteredReaction(request: Desmos_Reactions_V1_MsgEditRegisteredReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>

  /// RemoveRegisteredReaction allows to remove an existing supported reaction
  func removeRegisteredReaction(request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>

  /// SetReactionsParams allows to set the reactions params
  func setReactionsParams(request: Desmos_Reactions_V1_MsgSetReactionsParams, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Reactions_V1_MsgSetReactionsParamsResponse>
}

extension Desmos_Reactions_V1_MsgProvider {
  internal var serviceName: Substring {
    return Desmos_Reactions_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgAddReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgAddReactionResponse>(),
        interceptors: self.interceptors?.makeAddReactionInterceptors() ?? [],
        userFunction: self.addReaction(request:context:)
      )

    case "RemoveReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgRemoveReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgRemoveReactionResponse>(),
        interceptors: self.interceptors?.makeRemoveReactionInterceptors() ?? [],
        userFunction: self.removeReaction(request:context:)
      )

    case "AddRegisteredReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgAddRegisteredReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>(),
        interceptors: self.interceptors?.makeAddRegisteredReactionInterceptors() ?? [],
        userFunction: self.addRegisteredReaction(request:context:)
      )

    case "EditRegisteredReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgEditRegisteredReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>(),
        interceptors: self.interceptors?.makeEditRegisteredReactionInterceptors() ?? [],
        userFunction: self.editRegisteredReaction(request:context:)
      )

    case "RemoveRegisteredReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgRemoveRegisteredReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>(),
        interceptors: self.interceptors?.makeRemoveRegisteredReactionInterceptors() ?? [],
        userFunction: self.removeRegisteredReaction(request:context:)
      )

    case "SetReactionsParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgSetReactionsParams>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgSetReactionsParamsResponse>(),
        interceptors: self.interceptors?.makeSetReactionsParamsInterceptors() ?? [],
        userFunction: self.setReactionsParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the reactions Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Reactions_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Reactions_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// AddReaction allows to add a post reaction
  @Sendable func addReaction(
    request: Desmos_Reactions_V1_MsgAddReaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reactions_V1_MsgAddReactionResponse

  /// RemoveReaction allows to remove an existing post reaction
  @Sendable func removeReaction(
    request: Desmos_Reactions_V1_MsgRemoveReaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reactions_V1_MsgRemoveReactionResponse

  /// AddRegisteredReaction allows to registered a new supported reaction
  @Sendable func addRegisteredReaction(
    request: Desmos_Reactions_V1_MsgAddRegisteredReaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reactions_V1_MsgAddRegisteredReactionResponse

  /// EditRegisteredReaction allows to edit a registered reaction
  @Sendable func editRegisteredReaction(
    request: Desmos_Reactions_V1_MsgEditRegisteredReaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reactions_V1_MsgEditRegisteredReactionResponse

  /// RemoveRegisteredReaction allows to remove an existing supported reaction
  @Sendable func removeRegisteredReaction(
    request: Desmos_Reactions_V1_MsgRemoveRegisteredReaction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse

  /// SetReactionsParams allows to set the reactions params
  @Sendable func setReactionsParams(
    request: Desmos_Reactions_V1_MsgSetReactionsParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Reactions_V1_MsgSetReactionsParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Reactions_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Reactions_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Desmos_Reactions_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Desmos_Reactions_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddReaction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgAddReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgAddReactionResponse>(),
        interceptors: self.interceptors?.makeAddReactionInterceptors() ?? [],
        wrapping: self.addReaction(request:context:)
      )

    case "RemoveReaction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgRemoveReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgRemoveReactionResponse>(),
        interceptors: self.interceptors?.makeRemoveReactionInterceptors() ?? [],
        wrapping: self.removeReaction(request:context:)
      )

    case "AddRegisteredReaction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgAddRegisteredReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>(),
        interceptors: self.interceptors?.makeAddRegisteredReactionInterceptors() ?? [],
        wrapping: self.addRegisteredReaction(request:context:)
      )

    case "EditRegisteredReaction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgEditRegisteredReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>(),
        interceptors: self.interceptors?.makeEditRegisteredReactionInterceptors() ?? [],
        wrapping: self.editRegisteredReaction(request:context:)
      )

    case "RemoveRegisteredReaction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgRemoveRegisteredReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>(),
        interceptors: self.interceptors?.makeRemoveRegisteredReactionInterceptors() ?? [],
        wrapping: self.removeRegisteredReaction(request:context:)
      )

    case "SetReactionsParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Reactions_V1_MsgSetReactionsParams>(),
        responseSerializer: ProtobufSerializer<Desmos_Reactions_V1_MsgSetReactionsParamsResponse>(),
        interceptors: self.interceptors?.makeSetReactionsParamsInterceptors() ?? [],
        wrapping: self.setReactionsParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Reactions_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddReactionInterceptors() -> [ServerInterceptor<Desmos_Reactions_V1_MsgAddReaction, Desmos_Reactions_V1_MsgAddReactionResponse>]

  /// - Returns: Interceptors to use when handling 'removeReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveReactionInterceptors() -> [ServerInterceptor<Desmos_Reactions_V1_MsgRemoveReaction, Desmos_Reactions_V1_MsgRemoveReactionResponse>]

  /// - Returns: Interceptors to use when handling 'addRegisteredReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddRegisteredReactionInterceptors() -> [ServerInterceptor<Desmos_Reactions_V1_MsgAddRegisteredReaction, Desmos_Reactions_V1_MsgAddRegisteredReactionResponse>]

  /// - Returns: Interceptors to use when handling 'editRegisteredReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditRegisteredReactionInterceptors() -> [ServerInterceptor<Desmos_Reactions_V1_MsgEditRegisteredReaction, Desmos_Reactions_V1_MsgEditRegisteredReactionResponse>]

  /// - Returns: Interceptors to use when handling 'removeRegisteredReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveRegisteredReactionInterceptors() -> [ServerInterceptor<Desmos_Reactions_V1_MsgRemoveRegisteredReaction, Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse>]

  /// - Returns: Interceptors to use when handling 'setReactionsParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetReactionsParamsInterceptors() -> [ServerInterceptor<Desmos_Reactions_V1_MsgSetReactionsParams, Desmos_Reactions_V1_MsgSetReactionsParamsResponse>]
}

internal enum Desmos_Reactions_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.reactions.v1.Msg",
    methods: [
      Desmos_Reactions_V1_MsgServerMetadata.Methods.addReaction,
      Desmos_Reactions_V1_MsgServerMetadata.Methods.removeReaction,
      Desmos_Reactions_V1_MsgServerMetadata.Methods.addRegisteredReaction,
      Desmos_Reactions_V1_MsgServerMetadata.Methods.editRegisteredReaction,
      Desmos_Reactions_V1_MsgServerMetadata.Methods.removeRegisteredReaction,
      Desmos_Reactions_V1_MsgServerMetadata.Methods.setReactionsParams,
    ]
  )

  internal enum Methods {
    internal static let addReaction = GRPCMethodDescriptor(
      name: "AddReaction",
      path: "/desmos.reactions.v1.Msg/AddReaction",
      type: GRPCCallType.unary
    )

    internal static let removeReaction = GRPCMethodDescriptor(
      name: "RemoveReaction",
      path: "/desmos.reactions.v1.Msg/RemoveReaction",
      type: GRPCCallType.unary
    )

    internal static let addRegisteredReaction = GRPCMethodDescriptor(
      name: "AddRegisteredReaction",
      path: "/desmos.reactions.v1.Msg/AddRegisteredReaction",
      type: GRPCCallType.unary
    )

    internal static let editRegisteredReaction = GRPCMethodDescriptor(
      name: "EditRegisteredReaction",
      path: "/desmos.reactions.v1.Msg/EditRegisteredReaction",
      type: GRPCCallType.unary
    )

    internal static let removeRegisteredReaction = GRPCMethodDescriptor(
      name: "RemoveRegisteredReaction",
      path: "/desmos.reactions.v1.Msg/RemoveRegisteredReaction",
      type: GRPCCallType.unary
    )

    internal static let setReactionsParams = GRPCMethodDescriptor(
      name: "SetReactionsParams",
      path: "/desmos.reactions.v1.Msg/SetReactionsParams",
      type: GRPCCallType.unary
    )
  }
}
