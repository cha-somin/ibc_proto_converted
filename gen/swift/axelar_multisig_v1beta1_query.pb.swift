// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/multisig/v1beta1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Multisig_V1beta1_KeyIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// KeyIDResponse contains the key ID of the key assigned to a given chain.
struct Axelar_Multisig_V1beta1_KeyIDResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Multisig_V1beta1_NextKeyIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// NextKeyIDResponse contains the key ID for the next rotation on the given
/// chain
struct Axelar_Multisig_V1beta1_NextKeyIDResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Multisig_V1beta1_KeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Multisig_V1beta1_KeygenParticipant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var weight: Data = Data()

  var pubKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// KeyResponse contains the key corresponding to a given key id.
struct Axelar_Multisig_V1beta1_KeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var state: Axelar_Multisig_Exported_V1beta1_KeyState = .unspecified

  var startedAt: Int64 = 0

  var startedAtTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedAtTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedAtTimestamp = newValue}
  }
  /// Returns true if `startedAtTimestamp` has been explicitly set.
  var hasStartedAtTimestamp: Bool {return self._startedAtTimestamp != nil}
  /// Clears the value of `startedAtTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearStartedAtTimestamp() {self._startedAtTimestamp = nil}

  var thresholdWeight: Data = Data()

  var bondedWeight: Data = Data()

  /// Keygen participants in descending order by weight
  var participants: [Axelar_Multisig_V1beta1_KeygenParticipant] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startedAtTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Axelar_Multisig_V1beta1_KeygenSessionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// KeygenSessionResponse contains the keygen session info for a given key ID.
struct Axelar_Multisig_V1beta1_KeygenSessionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startedAt: Int64 = 0

  var startedAtTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedAtTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedAtTimestamp = newValue}
  }
  /// Returns true if `startedAtTimestamp` has been explicitly set.
  var hasStartedAtTimestamp: Bool {return self._startedAtTimestamp != nil}
  /// Clears the value of `startedAtTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearStartedAtTimestamp() {self._startedAtTimestamp = nil}

  var expiresAt: Int64 = 0

  var completedAt: Int64 = 0

  var gracePeriod: Int64 = 0

  var state: Axelar_Multisig_Exported_V1beta1_MultisigState = .unspecified

  var keygenThresholdWeight: Data = Data()

  var signingThresholdWeight: Data = Data()

  var bondedWeight: Data = Data()

  /// Keygen candidates in descending order by weight
  var participants: [Axelar_Multisig_V1beta1_KeygenParticipant] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startedAtTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Axelar_Multisig_V1beta1_KeyIDRequest: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeyIDResponse: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_NextKeyIDRequest: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_NextKeyIDResponse: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeyRequest: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeygenParticipant: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeyResponse: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeygenSessionRequest: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeygenSessionResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.multisig.v1beta1"

extension Axelar_Multisig_V1beta1_KeyIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeyIDRequest, rhs: Axelar_Multisig_V1beta1_KeyIDRequest) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeyIDResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyIDResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeyIDResponse, rhs: Axelar_Multisig_V1beta1_KeyIDResponse) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_NextKeyIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NextKeyIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_NextKeyIDRequest, rhs: Axelar_Multisig_V1beta1_NextKeyIDRequest) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_NextKeyIDResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NextKeyIDResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_NextKeyIDResponse, rhs: Axelar_Multisig_V1beta1_NextKeyIDResponse) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeyRequest, rhs: Axelar_Multisig_V1beta1_KeyRequest) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeygenParticipant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeygenParticipant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "weight"),
    3: .standard(proto: "pub_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.weight) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pubKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.weight.isEmpty {
      try visitor.visitSingularBytesField(value: self.weight, fieldNumber: 2)
    }
    if !self.pubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.pubKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeygenParticipant, rhs: Axelar_Multisig_V1beta1_KeygenParticipant) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.pubKey != rhs.pubKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
    2: .same(proto: "state"),
    3: .standard(proto: "started_at"),
    4: .standard(proto: "started_at_timestamp"),
    5: .standard(proto: "threshold_weight"),
    6: .standard(proto: "bonded_weight"),
    7: .same(proto: "participants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.startedAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._startedAtTimestamp) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.thresholdWeight) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.bondedWeight) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.participants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if self.startedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.startedAt, fieldNumber: 3)
    }
    try { if let v = self._startedAtTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.thresholdWeight.isEmpty {
      try visitor.visitSingularBytesField(value: self.thresholdWeight, fieldNumber: 5)
    }
    if !self.bondedWeight.isEmpty {
      try visitor.visitSingularBytesField(value: self.bondedWeight, fieldNumber: 6)
    }
    if !self.participants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.participants, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeyResponse, rhs: Axelar_Multisig_V1beta1_KeyResponse) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.startedAt != rhs.startedAt {return false}
    if lhs._startedAtTimestamp != rhs._startedAtTimestamp {return false}
    if lhs.thresholdWeight != rhs.thresholdWeight {return false}
    if lhs.bondedWeight != rhs.bondedWeight {return false}
    if lhs.participants != rhs.participants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeygenSessionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeygenSessionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeygenSessionRequest, rhs: Axelar_Multisig_V1beta1_KeygenSessionRequest) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeygenSessionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeygenSessionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "started_at"),
    2: .standard(proto: "started_at_timestamp"),
    3: .standard(proto: "expires_at"),
    4: .standard(proto: "completed_at"),
    5: .standard(proto: "grace_period"),
    6: .same(proto: "state"),
    7: .standard(proto: "keygen_threshold_weight"),
    8: .standard(proto: "signing_threshold_weight"),
    9: .standard(proto: "bonded_weight"),
    10: .same(proto: "participants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.startedAt) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startedAtTimestamp) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.expiresAt) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.completedAt) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.gracePeriod) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.keygenThresholdWeight) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.signingThresholdWeight) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.bondedWeight) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.participants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.startedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.startedAt, fieldNumber: 1)
    }
    try { if let v = self._startedAtTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.expiresAt != 0 {
      try visitor.visitSingularInt64Field(value: self.expiresAt, fieldNumber: 3)
    }
    if self.completedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.completedAt, fieldNumber: 4)
    }
    if self.gracePeriod != 0 {
      try visitor.visitSingularInt64Field(value: self.gracePeriod, fieldNumber: 5)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 6)
    }
    if !self.keygenThresholdWeight.isEmpty {
      try visitor.visitSingularBytesField(value: self.keygenThresholdWeight, fieldNumber: 7)
    }
    if !self.signingThresholdWeight.isEmpty {
      try visitor.visitSingularBytesField(value: self.signingThresholdWeight, fieldNumber: 8)
    }
    if !self.bondedWeight.isEmpty {
      try visitor.visitSingularBytesField(value: self.bondedWeight, fieldNumber: 9)
    }
    if !self.participants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.participants, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeygenSessionResponse, rhs: Axelar_Multisig_V1beta1_KeygenSessionResponse) -> Bool {
    if lhs.startedAt != rhs.startedAt {return false}
    if lhs._startedAtTimestamp != rhs._startedAtTimestamp {return false}
    if lhs.expiresAt != rhs.expiresAt {return false}
    if lhs.completedAt != rhs.completedAt {return false}
    if lhs.gracePeriod != rhs.gracePeriod {return false}
    if lhs.state != rhs.state {return false}
    if lhs.keygenThresholdWeight != rhs.keygenThresholdWeight {return false}
    if lhs.signingThresholdWeight != rhs.signingThresholdWeight {return false}
    if lhs.bondedWeight != rhs.bondedWeight {return false}
    if lhs.participants != rhs.participants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
