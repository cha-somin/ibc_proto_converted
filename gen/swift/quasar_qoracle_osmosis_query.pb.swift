// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quasar/qoracle/osmosis/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryParamsRequest is request type for the Query/Params RPC method.
struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is response type for the Query/Params RPC method.
struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params holds all the parameters of this module.
  var params: Quasarlabs_Quasarnode_Qoracle_Osmosis_Params {
    get {return _params ?? Quasarlabs_Quasarnode_Qoracle_Osmosis_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Quasarlabs_Quasarnode_Qoracle_Osmosis_Params? = nil
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var paramsRequestState: Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState {
    get {return _paramsRequestState ?? Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState()}
    set {_paramsRequestState = newValue}
  }
  /// Returns true if `paramsRequestState` has been explicitly set.
  var hasParamsRequestState: Bool {return self._paramsRequestState != nil}
  /// Clears the value of `paramsRequestState`. Subsequent reads from it will return its default value.
  mutating func clearParamsRequestState() {self._paramsRequestState = nil}

  var incentivizedPoolsState: Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState {
    get {return _incentivizedPoolsState ?? Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState()}
    set {_incentivizedPoolsState = newValue}
  }
  /// Returns true if `incentivizedPoolsState` has been explicitly set.
  var hasIncentivizedPoolsState: Bool {return self._incentivizedPoolsState != nil}
  /// Clears the value of `incentivizedPoolsState`. Subsequent reads from it will return its default value.
  mutating func clearIncentivizedPoolsState() {self._incentivizedPoolsState = nil}

  var poolsState: Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState {
    get {return _poolsState ?? Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState()}
    set {_poolsState = newValue}
  }
  /// Returns true if `poolsState` has been explicitly set.
  var hasPoolsState: Bool {return self._poolsState != nil}
  /// Clears the value of `poolsState`. Subsequent reads from it will return its default value.
  mutating func clearPoolsState() {self._poolsState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _paramsRequestState: Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState? = nil
  fileprivate var _incentivizedPoolsState: Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState? = nil
  fileprivate var _poolsState: Quasarlabs_Quasarnode_Qoracle_Osmosis_OsmosisRequestState? = nil
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epochsInfo: [Osmosis_Epochs_V1beta1_EpochInfo] = []

  var lockableDurations: [Int64] = []

  var mintParams: Osmosis_Mint_V1beta1_Params {
    get {return _mintParams ?? Osmosis_Mint_V1beta1_Params()}
    set {_mintParams = newValue}
  }
  /// Returns true if `mintParams` has been explicitly set.
  var hasMintParams: Bool {return self._mintParams != nil}
  /// Clears the value of `mintParams`. Subsequent reads from it will return its default value.
  mutating func clearMintParams() {self._mintParams = nil}

  var mintEpochProvisions: Data = Data()

  var distrInfo: Osmosis_Poolincentives_V1beta1_DistrInfo {
    get {return _distrInfo ?? Osmosis_Poolincentives_V1beta1_DistrInfo()}
    set {_distrInfo = newValue}
  }
  /// Returns true if `distrInfo` has been explicitly set.
  var hasDistrInfo: Bool {return self._distrInfo != nil}
  /// Clears the value of `distrInfo`. Subsequent reads from it will return its default value.
  mutating func clearDistrInfo() {self._distrInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mintParams: Osmosis_Mint_V1beta1_Params? = nil
  fileprivate var _distrInfo: Osmosis_Poolincentives_V1beta1_DistrInfo? = nil
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var incentivizedPools: [Osmosis_Poolincentives_V1beta1_IncentivizedPool] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

struct Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pools: [Osmosis_Gamm_V1beta1_Pool] = []

  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest: @unchecked Sendable {}
extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quasarlabs.quasarnode.qoracle.osmosis"

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryParamsResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryStateRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryStateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "params_request_state"),
    3: .standard(proto: "incentivized_pools_state"),
    4: .standard(proto: "pools_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._paramsRequestState) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._incentivizedPoolsState) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._poolsState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._paramsRequestState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._incentivizedPoolsState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._poolsState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryStateResponse) -> Bool {
    if lhs._paramsRequestState != rhs._paramsRequestState {return false}
    if lhs._incentivizedPoolsState != rhs._incentivizedPoolsState {return false}
    if lhs._poolsState != rhs._poolsState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryChainParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryChainParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epochs_info"),
    2: .standard(proto: "lockable_durations"),
    3: .standard(proto: "mint_params"),
    4: .standard(proto: "mint_epoch_provisions"),
    5: .standard(proto: "distr_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.epochsInfo) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.lockableDurations) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._mintParams) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.mintEpochProvisions) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._distrInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.epochsInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.epochsInfo, fieldNumber: 1)
    }
    if !self.lockableDurations.isEmpty {
      try visitor.visitPackedInt64Field(value: self.lockableDurations, fieldNumber: 2)
    }
    try { if let v = self._mintParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.mintEpochProvisions.isEmpty {
      try visitor.visitSingularBytesField(value: self.mintEpochProvisions, fieldNumber: 4)
    }
    try { if let v = self._distrInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryChainParamsResponse) -> Bool {
    if lhs.epochsInfo != rhs.epochsInfo {return false}
    if lhs.lockableDurations != rhs.lockableDurations {return false}
    if lhs._mintParams != rhs._mintParams {return false}
    if lhs.mintEpochProvisions != rhs.mintEpochProvisions {return false}
    if lhs._distrInfo != rhs._distrInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryIncentivizedPoolsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryIncentivizedPoolsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "incentivized_pools"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.incentivizedPools) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.incentivizedPools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.incentivizedPools, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryIncentivizedPoolsResponse) -> Bool {
    if lhs.incentivizedPools != rhs.incentivizedPools {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryPoolsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryPoolsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pools"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pools) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.pools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pools, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse, rhs: Quasarlabs_Quasarnode_Qoracle_Osmosis_QueryPoolsResponse) -> Bool {
    if lhs.pools != rhs.pools {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
