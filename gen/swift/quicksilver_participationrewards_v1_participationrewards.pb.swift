// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quicksilver/participationrewards/v1/participationrewards.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Quicksilver_Participationrewards_V1_ProtocolDataType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Undefined action (per protobuf spec)
  case undefined // = 0
  case connection // = 1
  case osmosisParams // = 2
  case liquidToken // = 3
  case osmosisPool // = 4
  case crescentPool // = 5
  case sifchainPool // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .connection
    case 2: self = .osmosisParams
    case 3: self = .liquidToken
    case 4: self = .osmosisPool
    case 5: self = .crescentPool
    case 6: self = .sifchainPool
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .connection: return 1
    case .osmosisParams: return 2
    case .liquidToken: return 3
    case .osmosisPool: return 4
    case .crescentPool: return 5
    case .sifchainPool: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Quicksilver_Participationrewards_V1_ProtocolDataType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Quicksilver_Participationrewards_V1_ProtocolDataType] = [
    .undefined,
    .connection,
    .osmosisParams,
    .liquidToken,
    .osmosisPool,
    .crescentPool,
    .sifchainPool,
  ]
}

#endif  // swift(>=4.2)

/// DistributionProportions defines the proportions of minted QCK that is to be
/// allocated as participation rewards.
struct Quicksilver_Participationrewards_V1_DistributionProportions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validatorSelectionAllocation: String = String()

  var holdingsAllocation: String = String()

  var lockupAllocation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Params holds parameters for the participationrewards module.
struct Quicksilver_Participationrewards_V1_Params_v1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// distribution_proportions defines the proportions of the minted
  /// participation rewards;
  var distributionProportions: Quicksilver_Participationrewards_V1_DistributionProportions {
    get {return _distributionProportions ?? Quicksilver_Participationrewards_V1_DistributionProportions()}
    set {_distributionProportions = newValue}
  }
  /// Returns true if `distributionProportions` has been explicitly set.
  var hasDistributionProportions: Bool {return self._distributionProportions != nil}
  /// Clears the value of `distributionProportions`. Subsequent reads from it will return its default value.
  mutating func clearDistributionProportions() {self._distributionProportions = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _distributionProportions: Quicksilver_Participationrewards_V1_DistributionProportions? = nil
}

/// Params holds parameters for the participationrewards module.
struct Quicksilver_Participationrewards_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// distribution_proportions defines the proportions of the minted
  /// participation rewards;
  var distributionProportions: Quicksilver_Participationrewards_V1_DistributionProportions {
    get {return _distributionProportions ?? Quicksilver_Participationrewards_V1_DistributionProportions()}
    set {_distributionProportions = newValue}
  }
  /// Returns true if `distributionProportions` has been explicitly set.
  var hasDistributionProportions: Bool {return self._distributionProportions != nil}
  /// Clears the value of `distributionProportions`. Subsequent reads from it will return its default value.
  mutating func clearDistributionProportions() {self._distributionProportions = nil}

  var claimsEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _distributionProportions: Quicksilver_Participationrewards_V1_DistributionProportions? = nil
}

struct Quicksilver_Participationrewards_V1_KeyedProtocolData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var protocolData: Quicksilver_Participationrewards_V1_ProtocolData {
    get {return _protocolData ?? Quicksilver_Participationrewards_V1_ProtocolData()}
    set {_protocolData = newValue}
  }
  /// Returns true if `protocolData` has been explicitly set.
  var hasProtocolData: Bool {return self._protocolData != nil}
  /// Clears the value of `protocolData`. Subsequent reads from it will return its default value.
  mutating func clearProtocolData() {self._protocolData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _protocolData: Quicksilver_Participationrewards_V1_ProtocolData? = nil
}

/// Protocol Data is an arbitrary data type held against a given zone for the
/// determination of rewards.
struct Quicksilver_Participationrewards_V1_ProtocolData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String = String()

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quicksilver_Participationrewards_V1_ProtocolDataType: @unchecked Sendable {}
extension Quicksilver_Participationrewards_V1_DistributionProportions: @unchecked Sendable {}
extension Quicksilver_Participationrewards_V1_Params_v1: @unchecked Sendable {}
extension Quicksilver_Participationrewards_V1_Params: @unchecked Sendable {}
extension Quicksilver_Participationrewards_V1_KeyedProtocolData: @unchecked Sendable {}
extension Quicksilver_Participationrewards_V1_ProtocolData: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quicksilver.participationrewards.v1"

extension Quicksilver_Participationrewards_V1_ProtocolDataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ProtocolDataTypeUndefined"),
    1: .same(proto: "ProtocolDataTypeConnection"),
    2: .same(proto: "ProtocolDataTypeOsmosisParams"),
    3: .same(proto: "ProtocolDataTypeLiquidToken"),
    4: .same(proto: "ProtocolDataTypeOsmosisPool"),
    5: .same(proto: "ProtocolDataTypeCrescentPool"),
    6: .same(proto: "ProtocolDataTypeSifchainPool"),
  ]
}

extension Quicksilver_Participationrewards_V1_DistributionProportions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DistributionProportions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_selection_allocation"),
    2: .standard(proto: "holdings_allocation"),
    3: .standard(proto: "lockup_allocation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorSelectionAllocation) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.holdingsAllocation) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lockupAllocation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validatorSelectionAllocation.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorSelectionAllocation, fieldNumber: 1)
    }
    if !self.holdingsAllocation.isEmpty {
      try visitor.visitSingularStringField(value: self.holdingsAllocation, fieldNumber: 2)
    }
    if !self.lockupAllocation.isEmpty {
      try visitor.visitSingularStringField(value: self.lockupAllocation, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_DistributionProportions, rhs: Quicksilver_Participationrewards_V1_DistributionProportions) -> Bool {
    if lhs.validatorSelectionAllocation != rhs.validatorSelectionAllocation {return false}
    if lhs.holdingsAllocation != rhs.holdingsAllocation {return false}
    if lhs.lockupAllocation != rhs.lockupAllocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Participationrewards_V1_Params_v1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params_v1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "distribution_proportions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._distributionProportions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._distributionProportions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_Params_v1, rhs: Quicksilver_Participationrewards_V1_Params_v1) -> Bool {
    if lhs._distributionProportions != rhs._distributionProportions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Participationrewards_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "distribution_proportions"),
    2: .standard(proto: "claims_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._distributionProportions) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.claimsEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._distributionProportions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.claimsEnabled != false {
      try visitor.visitSingularBoolField(value: self.claimsEnabled, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_Params, rhs: Quicksilver_Participationrewards_V1_Params) -> Bool {
    if lhs._distributionProportions != rhs._distributionProportions {return false}
    if lhs.claimsEnabled != rhs.claimsEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Participationrewards_V1_KeyedProtocolData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyedProtocolData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "protocol_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._protocolData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try { if let v = self._protocolData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_KeyedProtocolData, rhs: Quicksilver_Participationrewards_V1_KeyedProtocolData) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._protocolData != rhs._protocolData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Participationrewards_V1_ProtocolData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProtocolData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Participationrewards_V1_ProtocolData, rhs: Quicksilver_Participationrewards_V1_ProtocolData) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
