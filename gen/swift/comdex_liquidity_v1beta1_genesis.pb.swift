// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/liquidity/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Liquidity_V1beta1_AppGenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var genericParams: Comdex_Liquidity_V1beta1_GenericParams {
    get {return _genericParams ?? Comdex_Liquidity_V1beta1_GenericParams()}
    set {_genericParams = newValue}
  }
  /// Returns true if `genericParams` has been explicitly set.
  var hasGenericParams: Bool {return self._genericParams != nil}
  /// Clears the value of `genericParams`. Subsequent reads from it will return its default value.
  mutating func clearGenericParams() {self._genericParams = nil}

  var lastPairID: UInt64 = 0

  var lastPoolID: UInt64 = 0

  var pairs: [Comdex_Liquidity_V1beta1_Pair] = []

  var pools: [Comdex_Liquidity_V1beta1_Pool] = []

  var depositRequests: [Comdex_Liquidity_V1beta1_DepositRequest] = []

  var withdrawRequests: [Comdex_Liquidity_V1beta1_WithdrawRequest] = []

  var orders: [Comdex_Liquidity_V1beta1_Order] = []

  var activeFarmers: [Comdex_Liquidity_V1beta1_ActiveFarmer] = []

  var queuedFarmers: [Comdex_Liquidity_V1beta1_QueuedFarmer] = []

  var marketMakingOrderIndexes: [Comdex_Liquidity_V1beta1_MMOrderIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _genericParams: Comdex_Liquidity_V1beta1_GenericParams? = nil
}

/// GenesisState defines the liquidity module's genesis state.
struct Comdex_Liquidity_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Comdex_Liquidity_V1beta1_Params {
    get {return _params ?? Comdex_Liquidity_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var appGenesisState: [Comdex_Liquidity_V1beta1_AppGenesisState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Comdex_Liquidity_V1beta1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Liquidity_V1beta1_AppGenesisState: @unchecked Sendable {}
extension Comdex_Liquidity_V1beta1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.liquidity.v1beta1"

extension Comdex_Liquidity_V1beta1_AppGenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppGenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "generic_params"),
    3: .standard(proto: "last_pair_id"),
    4: .standard(proto: "last_pool_id"),
    5: .same(proto: "pairs"),
    6: .same(proto: "pools"),
    7: .standard(proto: "deposit_requests"),
    8: .standard(proto: "withdraw_requests"),
    9: .same(proto: "orders"),
    10: .standard(proto: "active_farmers"),
    11: .standard(proto: "queued_farmers"),
    12: .standard(proto: "market_making_order_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._genericParams) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.lastPairID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.lastPoolID) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.pairs) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.pools) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.depositRequests) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.withdrawRequests) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.orders) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.activeFarmers) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.queuedFarmers) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.marketMakingOrderIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    try { if let v = self._genericParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.lastPairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastPairID, fieldNumber: 3)
    }
    if self.lastPoolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastPoolID, fieldNumber: 4)
    }
    if !self.pairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pairs, fieldNumber: 5)
    }
    if !self.pools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pools, fieldNumber: 6)
    }
    if !self.depositRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositRequests, fieldNumber: 7)
    }
    if !self.withdrawRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.withdrawRequests, fieldNumber: 8)
    }
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 9)
    }
    if !self.activeFarmers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activeFarmers, fieldNumber: 10)
    }
    if !self.queuedFarmers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queuedFarmers, fieldNumber: 11)
    }
    if !self.marketMakingOrderIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.marketMakingOrderIndexes, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_AppGenesisState, rhs: Comdex_Liquidity_V1beta1_AppGenesisState) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs._genericParams != rhs._genericParams {return false}
    if lhs.lastPairID != rhs.lastPairID {return false}
    if lhs.lastPoolID != rhs.lastPoolID {return false}
    if lhs.pairs != rhs.pairs {return false}
    if lhs.pools != rhs.pools {return false}
    if lhs.depositRequests != rhs.depositRequests {return false}
    if lhs.withdrawRequests != rhs.withdrawRequests {return false}
    if lhs.orders != rhs.orders {return false}
    if lhs.activeFarmers != rhs.activeFarmers {return false}
    if lhs.queuedFarmers != rhs.queuedFarmers {return false}
    if lhs.marketMakingOrderIndexes != rhs.marketMakingOrderIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidity_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "app_genesis_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.appGenesisState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.appGenesisState.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appGenesisState, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidity_V1beta1_GenesisState, rhs: Comdex_Liquidity_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.appGenesisState != rhs.appGenesisState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
