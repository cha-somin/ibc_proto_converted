//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/btcstkconsumer/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Btcstkconsumer_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Btcstkconsumer_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Babylon_Btcstkconsumer_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryParamsRequest, Babylon_Btcstkconsumer_V1_QueryParamsResponse>

  func consumerRegistryList(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>

  func consumersRegistry(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>

  func finalityProviderConsumer(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>

  func finalityProviders(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>

  func finalityProvider(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>
}

extension Babylon_Btcstkconsumer_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.btcstkconsumer.v1.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Babylon_Btcstkconsumer_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryParamsRequest, Babylon_Btcstkconsumer_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ConsumerRegistryList queries the list of consumers that are registered to Babylon
  ///
  /// - Parameters:
  ///   - request: Request to send to ConsumerRegistryList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func consumerRegistryList(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumerRegistryList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsumerRegistryListInterceptors() ?? []
    )
  }

  /// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
  ///
  /// - Parameters:
  ///   - request: Request to send to ConsumersRegistry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func consumersRegistry(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumersRegistry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsumersRegistryInterceptors() ?? []
    )
  }

  /// FinalityProviderConsumer info about one finality provider's consumer id
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalityProviderConsumer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalityProviderConsumer(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviderConsumer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderConsumerInterceptors() ?? []
    )
  }

  /// FinalityProviders queries all finality providers for a given consumer
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalityProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalityProviders(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? []
    )
  }

  /// FinalityProvider info about one finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to FinalityProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func finalityProvider(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Btcstkconsumer_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Btcstkconsumer_V1_QueryNIOClient")
internal final class Babylon_Btcstkconsumer_V1_QueryClient: Babylon_Btcstkconsumer_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.btcstkconsumer.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Btcstkconsumer_V1_QueryNIOClient: Babylon_Btcstkconsumer_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.btcstkconsumer.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btcstkconsumer_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryParamsRequest, Babylon_Btcstkconsumer_V1_QueryParamsResponse>

  func makeConsumerRegistryListCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>

  func makeConsumersRegistryCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>

  func makeFinalityProviderConsumerCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>

  func makeFinalityProvidersCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>

  func makeFinalityProviderCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstkconsumer_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btcstkconsumer_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryParamsRequest, Babylon_Btcstkconsumer_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeConsumerRegistryListCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumerRegistryList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsumerRegistryListInterceptors() ?? []
    )
  }

  internal func makeConsumersRegistryCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumersRegistry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsumersRegistryInterceptors() ?? []
    )
  }

  internal func makeFinalityProviderConsumerCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviderConsumer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderConsumerInterceptors() ?? []
    )
  }

  internal func makeFinalityProvidersCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? []
    )
  }

  internal func makeFinalityProviderCall(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstkconsumer_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Babylon_Btcstkconsumer_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func consumerRegistryList(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumerRegistryList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsumerRegistryListInterceptors() ?? []
    )
  }

  internal func consumersRegistry(
    _ request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumersRegistry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsumersRegistryInterceptors() ?? []
    )
  }

  internal func finalityProviderConsumer(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviderConsumer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderConsumerInterceptors() ?? []
    )
  }

  internal func finalityProviders(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? []
    )
  }

  internal func finalityProvider(
    _ request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Btcstkconsumer_V1_QueryAsyncClient: Babylon_Btcstkconsumer_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Btcstkconsumer_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Babylon_Btcstkconsumer_V1_QueryParamsRequest, Babylon_Btcstkconsumer_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'consumerRegistryList'.
  func makeConsumerRegistryListInterceptors() -> [ClientInterceptor<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>]

  /// - Returns: Interceptors to use when invoking 'consumersRegistry'.
  func makeConsumersRegistryInterceptors() -> [ClientInterceptor<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>]

  /// - Returns: Interceptors to use when invoking 'finalityProviderConsumer'.
  func makeFinalityProviderConsumerInterceptors() -> [ClientInterceptor<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>]

  /// - Returns: Interceptors to use when invoking 'finalityProviders'.
  func makeFinalityProvidersInterceptors() -> [ClientInterceptor<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'finalityProvider'.
  func makeFinalityProviderInterceptors() -> [ClientInterceptor<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>]
}

internal enum Babylon_Btcstkconsumer_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.btcstkconsumer.v1.Query",
    methods: [
      Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.params,
      Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumerRegistryList,
      Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.consumersRegistry,
      Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviderConsumer,
      Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProviders,
      Babylon_Btcstkconsumer_V1_QueryClientMetadata.Methods.finalityProvider,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.btcstkconsumer.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let consumerRegistryList = GRPCMethodDescriptor(
      name: "ConsumerRegistryList",
      path: "/babylon.btcstkconsumer.v1.Query/ConsumerRegistryList",
      type: GRPCCallType.unary
    )

    internal static let consumersRegistry = GRPCMethodDescriptor(
      name: "ConsumersRegistry",
      path: "/babylon.btcstkconsumer.v1.Query/ConsumersRegistry",
      type: GRPCCallType.unary
    )

    internal static let finalityProviderConsumer = GRPCMethodDescriptor(
      name: "FinalityProviderConsumer",
      path: "/babylon.btcstkconsumer.v1.Query/FinalityProviderConsumer",
      type: GRPCCallType.unary
    )

    internal static let finalityProviders = GRPCMethodDescriptor(
      name: "FinalityProviders",
      path: "/babylon.btcstkconsumer.v1.Query/FinalityProviders",
      type: GRPCCallType.unary
    )

    internal static let finalityProvider = GRPCMethodDescriptor(
      name: "FinalityProvider",
      path: "/babylon.btcstkconsumer.v1.Query/FinalityProvider",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Btcstkconsumer_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Btcstkconsumer_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Babylon_Btcstkconsumer_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstkconsumer_V1_QueryParamsResponse>

  /// ConsumerRegistryList queries the list of consumers that are registered to Babylon
  func consumerRegistryList(request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>

  /// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
  func consumersRegistry(request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>

  /// FinalityProviderConsumer info about one finality provider's consumer id
  func finalityProviderConsumer(request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>

  /// FinalityProviders queries all finality providers for a given consumer
  func finalityProviders(request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>

  /// FinalityProvider info about one finality provider
  func finalityProvider(request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>
}

extension Babylon_Btcstkconsumer_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Btcstkconsumer_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ConsumerRegistryList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>(),
        interceptors: self.interceptors?.makeConsumerRegistryListInterceptors() ?? [],
        userFunction: self.consumerRegistryList(request:context:)
      )

    case "ConsumersRegistry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>(),
        interceptors: self.interceptors?.makeConsumersRegistryInterceptors() ?? [],
        userFunction: self.consumersRegistry(request:context:)
      )

    case "FinalityProviderConsumer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderConsumerInterceptors() ?? [],
        userFunction: self.finalityProviderConsumer(request:context:)
      )

    case "FinalityProviders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>(),
        interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? [],
        userFunction: self.finalityProviders(request:context:)
      )

    case "FinalityProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? [],
        userFunction: self.finalityProvider(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btcstkconsumer_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btcstkconsumer_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Babylon_Btcstkconsumer_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryParamsResponse

  /// ConsumerRegistryList queries the list of consumers that are registered to Babylon
  @Sendable func consumerRegistryList(
    request: Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse

  /// ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view
  @Sendable func consumersRegistry(
    request: Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse

  /// FinalityProviderConsumer info about one finality provider's consumer id
  @Sendable func finalityProviderConsumer(
    request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse

  /// FinalityProviders queries all finality providers for a given consumer
  @Sendable func finalityProviders(
    request: Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse

  /// FinalityProvider info about one finality provider
  @Sendable func finalityProvider(
    request: Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstkconsumer_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btcstkconsumer_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Btcstkconsumer_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Btcstkconsumer_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ConsumerRegistryList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>(),
        interceptors: self.interceptors?.makeConsumerRegistryListInterceptors() ?? [],
        wrapping: self.consumerRegistryList(request:context:)
      )

    case "ConsumersRegistry":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>(),
        interceptors: self.interceptors?.makeConsumersRegistryInterceptors() ?? [],
        wrapping: self.consumersRegistry(request:context:)
      )

    case "FinalityProviderConsumer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderConsumerInterceptors() ?? [],
        wrapping: self.finalityProviderConsumer(request:context:)
      )

    case "FinalityProviders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>(),
        interceptors: self.interceptors?.makeFinalityProvidersInterceptors() ?? [],
        wrapping: self.finalityProviders(request:context:)
      )

    case "FinalityProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeFinalityProviderInterceptors() ?? [],
        wrapping: self.finalityProvider(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Btcstkconsumer_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Babylon_Btcstkconsumer_V1_QueryParamsRequest, Babylon_Btcstkconsumer_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'consumerRegistryList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConsumerRegistryListInterceptors() -> [ServerInterceptor<Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListRequest, Babylon_Btcstkconsumer_V1_QueryConsumerRegistryListResponse>]

  /// - Returns: Interceptors to use when handling 'consumersRegistry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConsumersRegistryInterceptors() -> [ServerInterceptor<Babylon_Btcstkconsumer_V1_QueryConsumersRegistryRequest, Babylon_Btcstkconsumer_V1_QueryConsumersRegistryResponse>]

  /// - Returns: Interceptors to use when handling 'finalityProviderConsumer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalityProviderConsumerInterceptors() -> [ServerInterceptor<Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderConsumerResponse>]

  /// - Returns: Interceptors to use when handling 'finalityProviders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalityProvidersInterceptors() -> [ServerInterceptor<Babylon_Btcstkconsumer_V1_QueryFinalityProvidersRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProvidersResponse>]

  /// - Returns: Interceptors to use when handling 'finalityProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalityProviderInterceptors() -> [ServerInterceptor<Babylon_Btcstkconsumer_V1_QueryFinalityProviderRequest, Babylon_Btcstkconsumer_V1_QueryFinalityProviderResponse>]
}

internal enum Babylon_Btcstkconsumer_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.btcstkconsumer.v1.Query",
    methods: [
      Babylon_Btcstkconsumer_V1_QueryServerMetadata.Methods.params,
      Babylon_Btcstkconsumer_V1_QueryServerMetadata.Methods.consumerRegistryList,
      Babylon_Btcstkconsumer_V1_QueryServerMetadata.Methods.consumersRegistry,
      Babylon_Btcstkconsumer_V1_QueryServerMetadata.Methods.finalityProviderConsumer,
      Babylon_Btcstkconsumer_V1_QueryServerMetadata.Methods.finalityProviders,
      Babylon_Btcstkconsumer_V1_QueryServerMetadata.Methods.finalityProvider,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.btcstkconsumer.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let consumerRegistryList = GRPCMethodDescriptor(
      name: "ConsumerRegistryList",
      path: "/babylon.btcstkconsumer.v1.Query/ConsumerRegistryList",
      type: GRPCCallType.unary
    )

    internal static let consumersRegistry = GRPCMethodDescriptor(
      name: "ConsumersRegistry",
      path: "/babylon.btcstkconsumer.v1.Query/ConsumersRegistry",
      type: GRPCCallType.unary
    )

    internal static let finalityProviderConsumer = GRPCMethodDescriptor(
      name: "FinalityProviderConsumer",
      path: "/babylon.btcstkconsumer.v1.Query/FinalityProviderConsumer",
      type: GRPCCallType.unary
    )

    internal static let finalityProviders = GRPCMethodDescriptor(
      name: "FinalityProviders",
      path: "/babylon.btcstkconsumer.v1.Query/FinalityProviders",
      type: GRPCCallType.unary
    )

    internal static let finalityProvider = GRPCMethodDescriptor(
      name: "FinalityProvider",
      path: "/babylon.btcstkconsumer.v1.Query/FinalityProvider",
      type: GRPCCallType.unary
    )
  }
}
