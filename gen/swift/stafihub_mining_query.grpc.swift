//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: stafihub/mining/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Stafihub_Stafihub_Mining_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Stafihub_Stafihub_Mining_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Stafihub_Stafihub_Mining_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryParamsRequest, Stafihub_Stafihub_Mining_QueryParamsResponse>

  func stakePoolInfo(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>

  func stakeItemList(
    _ request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeItemListRequest, Stafihub_Stafihub_Mining_QueryStakeItemListResponse>

  func stakeReward(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRewardRequest, Stafihub_Stafihub_Mining_QueryStakeRewardResponse>

  func stakeRecordCount(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>

  func stakeRecord(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordRequest, Stafihub_Stafihub_Mining_QueryStakeRecordResponse>

  func stakeRecordList(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>

  func stakePoolList(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolListRequest, Stafihub_Stafihub_Mining_QueryStakePoolListResponse>

  func miningProviderList(
    _ request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>

  func rewardTokenList(
    _ request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>

  func maxRewardPoolNumber(
    _ request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>

  func maxStakeItemNumber(
    _ request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>

  func providerSwitch(
    _ request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>
}

extension Stafihub_Stafihub_Mining_QueryClientProtocol {
  internal var serviceName: String {
    return "stafihub.stafihub.mining.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Stafihub_Stafihub_Mining_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryParamsRequest, Stafihub_Stafihub_Mining_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a list of StakePoolInfo items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakePoolInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakePoolInfo(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakePoolInfoInterceptors() ?? []
    )
  }

  /// Queries a list of StakeItemList items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakeItemList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakeItemList(
    _ request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeItemListRequest, Stafihub_Stafihub_Mining_QueryStakeItemListResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeItemList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeItemListInterceptors() ?? []
    )
  }

  /// Queries a list of StakeReward items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakeReward.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakeReward(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRewardRequest, Stafihub_Stafihub_Mining_QueryStakeRewardResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRewardInterceptors() ?? []
    )
  }

  /// Queries a list of StakeRecordCount items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakeRecordCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakeRecordCount(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordCountInterceptors() ?? []
    )
  }

  /// Queries a list of StakeRecord items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakeRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakeRecord(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordRequest, Stafihub_Stafihub_Mining_QueryStakeRecordResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordInterceptors() ?? []
    )
  }

  /// Queries a list of StakeRecordList items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakeRecordList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakeRecordList(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, Stafihub_Stafihub_Mining_QueryStakeRecordListResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordListInterceptors() ?? []
    )
  }

  /// Queries a list of StakePoolList items.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakePoolList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakePoolList(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolListRequest, Stafihub_Stafihub_Mining_QueryStakePoolListResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakePoolListInterceptors() ?? []
    )
  }

  /// Queries a list of MiningProviderList items.
  ///
  /// - Parameters:
  ///   - request: Request to send to MiningProviderList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func miningProviderList(
    _ request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, Stafihub_Stafihub_Mining_QueryMiningProviderListResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.miningProviderList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMiningProviderListInterceptors() ?? []
    )
  }

  /// Queries a list of RewardTokenList items.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardTokenList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardTokenList(
    _ request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, Stafihub_Stafihub_Mining_QueryRewardTokenListResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.rewardTokenList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardTokenListInterceptors() ?? []
    )
  }

  /// Queries a list of MaxRewardPoolNumber items.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxRewardPoolNumber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxRewardPoolNumber(
    _ request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxRewardPoolNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxRewardPoolNumberInterceptors() ?? []
    )
  }

  /// Queries a list of MaxStakeItemNumber items.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxStakeItemNumber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func maxStakeItemNumber(
    _ request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxStakeItemNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxStakeItemNumberInterceptors() ?? []
    )
  }

  /// Queries a list of ProviderSwitch items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProviderSwitch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func providerSwitch(
    _ request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, Stafihub_Stafihub_Mining_QueryProviderSwitchResponse> {
    return self.makeUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.providerSwitch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderSwitchInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Stafihub_Stafihub_Mining_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Stafihub_Stafihub_Mining_QueryNIOClient")
internal final class Stafihub_Stafihub_Mining_QueryClient: Stafihub_Stafihub_Mining_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the stafihub.stafihub.mining.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Stafihub_Stafihub_Mining_QueryNIOClient: Stafihub_Stafihub_Mining_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the stafihub.stafihub.mining.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stafihub_Stafihub_Mining_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Stafihub_Stafihub_Mining_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryParamsRequest, Stafihub_Stafihub_Mining_QueryParamsResponse>

  func makeStakePoolInfoCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>

  func makeStakeItemListCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeItemListRequest, Stafihub_Stafihub_Mining_QueryStakeItemListResponse>

  func makeStakeRewardCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRewardRequest, Stafihub_Stafihub_Mining_QueryStakeRewardResponse>

  func makeStakeRecordCountCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>

  func makeStakeRecordCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordRequest, Stafihub_Stafihub_Mining_QueryStakeRecordResponse>

  func makeStakeRecordListCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>

  func makeStakePoolListCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolListRequest, Stafihub_Stafihub_Mining_QueryStakePoolListResponse>

  func makeMiningProviderListCall(
    _ request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>

  func makeRewardTokenListCall(
    _ request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>

  func makeMaxRewardPoolNumberCall(
    _ request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>

  func makeMaxStakeItemNumberCall(
    _ request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>

  func makeProviderSwitchCall(
    _ request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stafihub_Stafihub_Mining_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stafihub_Stafihub_Mining_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Stafihub_Stafihub_Mining_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryParamsRequest, Stafihub_Stafihub_Mining_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeStakePoolInfoCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakePoolInfoInterceptors() ?? []
    )
  }

  internal func makeStakeItemListCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeItemListRequest, Stafihub_Stafihub_Mining_QueryStakeItemListResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeItemList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeItemListInterceptors() ?? []
    )
  }

  internal func makeStakeRewardCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRewardRequest, Stafihub_Stafihub_Mining_QueryStakeRewardResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRewardInterceptors() ?? []
    )
  }

  internal func makeStakeRecordCountCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordCountInterceptors() ?? []
    )
  }

  internal func makeStakeRecordCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordRequest, Stafihub_Stafihub_Mining_QueryStakeRecordResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordInterceptors() ?? []
    )
  }

  internal func makeStakeRecordListCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, Stafihub_Stafihub_Mining_QueryStakeRecordListResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordListInterceptors() ?? []
    )
  }

  internal func makeStakePoolListCall(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryStakePoolListRequest, Stafihub_Stafihub_Mining_QueryStakePoolListResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakePoolListInterceptors() ?? []
    )
  }

  internal func makeMiningProviderListCall(
    _ request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, Stafihub_Stafihub_Mining_QueryMiningProviderListResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.miningProviderList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMiningProviderListInterceptors() ?? []
    )
  }

  internal func makeRewardTokenListCall(
    _ request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, Stafihub_Stafihub_Mining_QueryRewardTokenListResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.rewardTokenList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardTokenListInterceptors() ?? []
    )
  }

  internal func makeMaxRewardPoolNumberCall(
    _ request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxRewardPoolNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxRewardPoolNumberInterceptors() ?? []
    )
  }

  internal func makeMaxStakeItemNumberCall(
    _ request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxStakeItemNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxStakeItemNumberInterceptors() ?? []
    )
  }

  internal func makeProviderSwitchCall(
    _ request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, Stafihub_Stafihub_Mining_QueryProviderSwitchResponse> {
    return self.makeAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.providerSwitch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderSwitchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stafihub_Stafihub_Mining_QueryAsyncClientProtocol {
  internal func params(
    _ request: Stafihub_Stafihub_Mining_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func stakePoolInfo(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakePoolInfoInterceptors() ?? []
    )
  }

  internal func stakeItemList(
    _ request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeItemListResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeItemList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeItemListInterceptors() ?? []
    )
  }

  internal func stakeReward(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRewardResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRewardInterceptors() ?? []
    )
  }

  internal func stakeRecordCount(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordCountInterceptors() ?? []
    )
  }

  internal func stakeRecord(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRecordResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordInterceptors() ?? []
    )
  }

  internal func stakeRecordList(
    _ request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRecordListResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeRecordListInterceptors() ?? []
    )
  }

  internal func stakePoolList(
    _ request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakePoolListResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakePoolListInterceptors() ?? []
    )
  }

  internal func miningProviderList(
    _ request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryMiningProviderListResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.miningProviderList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMiningProviderListInterceptors() ?? []
    )
  }

  internal func rewardTokenList(
    _ request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryRewardTokenListResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.rewardTokenList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardTokenListInterceptors() ?? []
    )
  }

  internal func maxRewardPoolNumber(
    _ request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxRewardPoolNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxRewardPoolNumberInterceptors() ?? []
    )
  }

  internal func maxStakeItemNumber(
    _ request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxStakeItemNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxStakeItemNumberInterceptors() ?? []
    )
  }

  internal func providerSwitch(
    _ request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Stafihub_Stafihub_Mining_QueryProviderSwitchResponse {
    return try await self.performAsyncUnaryCall(
      path: Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.providerSwitch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderSwitchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Stafihub_Stafihub_Mining_QueryAsyncClient: Stafihub_Stafihub_Mining_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Stafihub_Stafihub_Mining_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryParamsRequest, Stafihub_Stafihub_Mining_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'stakePoolInfo'.
  func makeStakePoolInfoInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'stakeItemList'.
  func makeStakeItemListInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakeItemListRequest, Stafihub_Stafihub_Mining_QueryStakeItemListResponse>]

  /// - Returns: Interceptors to use when invoking 'stakeReward'.
  func makeStakeRewardInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakeRewardRequest, Stafihub_Stafihub_Mining_QueryStakeRewardResponse>]

  /// - Returns: Interceptors to use when invoking 'stakeRecordCount'.
  func makeStakeRecordCountInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>]

  /// - Returns: Interceptors to use when invoking 'stakeRecord'.
  func makeStakeRecordInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakeRecordRequest, Stafihub_Stafihub_Mining_QueryStakeRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'stakeRecordList'.
  func makeStakeRecordListInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>]

  /// - Returns: Interceptors to use when invoking 'stakePoolList'.
  func makeStakePoolListInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryStakePoolListRequest, Stafihub_Stafihub_Mining_QueryStakePoolListResponse>]

  /// - Returns: Interceptors to use when invoking 'miningProviderList'.
  func makeMiningProviderListInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardTokenList'.
  func makeRewardTokenListInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>]

  /// - Returns: Interceptors to use when invoking 'maxRewardPoolNumber'.
  func makeMaxRewardPoolNumberInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>]

  /// - Returns: Interceptors to use when invoking 'maxStakeItemNumber'.
  func makeMaxStakeItemNumberInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>]

  /// - Returns: Interceptors to use when invoking 'providerSwitch'.
  func makeProviderSwitchInterceptors() -> [ClientInterceptor<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>]
}

internal enum Stafihub_Stafihub_Mining_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "stafihub.stafihub.mining.Query",
    methods: [
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.params,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolInfo,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeItemList,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeReward,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordCount,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecord,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakeRecordList,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.stakePoolList,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.miningProviderList,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.rewardTokenList,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxRewardPoolNumber,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.maxStakeItemNumber,
      Stafihub_Stafihub_Mining_QueryClientMetadata.Methods.providerSwitch,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/stafihub.stafihub.mining.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let stakePoolInfo = GRPCMethodDescriptor(
      name: "StakePoolInfo",
      path: "/stafihub.stafihub.mining.Query/StakePoolInfo",
      type: GRPCCallType.unary
    )

    internal static let stakeItemList = GRPCMethodDescriptor(
      name: "StakeItemList",
      path: "/stafihub.stafihub.mining.Query/StakeItemList",
      type: GRPCCallType.unary
    )

    internal static let stakeReward = GRPCMethodDescriptor(
      name: "StakeReward",
      path: "/stafihub.stafihub.mining.Query/StakeReward",
      type: GRPCCallType.unary
    )

    internal static let stakeRecordCount = GRPCMethodDescriptor(
      name: "StakeRecordCount",
      path: "/stafihub.stafihub.mining.Query/StakeRecordCount",
      type: GRPCCallType.unary
    )

    internal static let stakeRecord = GRPCMethodDescriptor(
      name: "StakeRecord",
      path: "/stafihub.stafihub.mining.Query/StakeRecord",
      type: GRPCCallType.unary
    )

    internal static let stakeRecordList = GRPCMethodDescriptor(
      name: "StakeRecordList",
      path: "/stafihub.stafihub.mining.Query/StakeRecordList",
      type: GRPCCallType.unary
    )

    internal static let stakePoolList = GRPCMethodDescriptor(
      name: "StakePoolList",
      path: "/stafihub.stafihub.mining.Query/StakePoolList",
      type: GRPCCallType.unary
    )

    internal static let miningProviderList = GRPCMethodDescriptor(
      name: "MiningProviderList",
      path: "/stafihub.stafihub.mining.Query/MiningProviderList",
      type: GRPCCallType.unary
    )

    internal static let rewardTokenList = GRPCMethodDescriptor(
      name: "RewardTokenList",
      path: "/stafihub.stafihub.mining.Query/RewardTokenList",
      type: GRPCCallType.unary
    )

    internal static let maxRewardPoolNumber = GRPCMethodDescriptor(
      name: "MaxRewardPoolNumber",
      path: "/stafihub.stafihub.mining.Query/MaxRewardPoolNumber",
      type: GRPCCallType.unary
    )

    internal static let maxStakeItemNumber = GRPCMethodDescriptor(
      name: "MaxStakeItemNumber",
      path: "/stafihub.stafihub.mining.Query/MaxStakeItemNumber",
      type: GRPCCallType.unary
    )

    internal static let providerSwitch = GRPCMethodDescriptor(
      name: "ProviderSwitch",
      path: "/stafihub.stafihub.mining.Query/ProviderSwitch",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Stafihub_Stafihub_Mining_QueryProvider: CallHandlerProvider {
  var interceptors: Stafihub_Stafihub_Mining_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Stafihub_Stafihub_Mining_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryParamsResponse>

  /// Queries a list of StakePoolInfo items.
  func stakePoolInfo(request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>

  /// Queries a list of StakeItemList items.
  func stakeItemList(request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakeItemListResponse>

  /// Queries a list of StakeReward items.
  func stakeReward(request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakeRewardResponse>

  /// Queries a list of StakeRecordCount items.
  func stakeRecordCount(request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>

  /// Queries a list of StakeRecord items.
  func stakeRecord(request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakeRecordResponse>

  /// Queries a list of StakeRecordList items.
  func stakeRecordList(request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>

  /// Queries a list of StakePoolList items.
  func stakePoolList(request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryStakePoolListResponse>

  /// Queries a list of MiningProviderList items.
  func miningProviderList(request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>

  /// Queries a list of RewardTokenList items.
  func rewardTokenList(request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>

  /// Queries a list of MaxRewardPoolNumber items.
  func maxRewardPoolNumber(request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>

  /// Queries a list of MaxStakeItemNumber items.
  func maxStakeItemNumber(request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>

  /// Queries a list of ProviderSwitch items.
  func providerSwitch(request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>
}

extension Stafihub_Stafihub_Mining_QueryProvider {
  internal var serviceName: Substring {
    return Stafihub_Stafihub_Mining_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "StakePoolInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>(),
        interceptors: self.interceptors?.makeStakePoolInfoInterceptors() ?? [],
        userFunction: self.stakePoolInfo(request:context:)
      )

    case "StakeItemList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeItemListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeItemListResponse>(),
        interceptors: self.interceptors?.makeStakeItemListInterceptors() ?? [],
        userFunction: self.stakeItemList(request:context:)
      )

    case "StakeReward":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRewardRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRewardResponse>(),
        interceptors: self.interceptors?.makeStakeRewardInterceptors() ?? [],
        userFunction: self.stakeReward(request:context:)
      )

    case "StakeRecordCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>(),
        interceptors: self.interceptors?.makeStakeRecordCountInterceptors() ?? [],
        userFunction: self.stakeRecordCount(request:context:)
      )

    case "StakeRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRecordResponse>(),
        interceptors: self.interceptors?.makeStakeRecordInterceptors() ?? [],
        userFunction: self.stakeRecord(request:context:)
      )

    case "StakeRecordList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>(),
        interceptors: self.interceptors?.makeStakeRecordListInterceptors() ?? [],
        userFunction: self.stakeRecordList(request:context:)
      )

    case "StakePoolList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakePoolListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakePoolListResponse>(),
        interceptors: self.interceptors?.makeStakePoolListInterceptors() ?? [],
        userFunction: self.stakePoolList(request:context:)
      )

    case "MiningProviderList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>(),
        interceptors: self.interceptors?.makeMiningProviderListInterceptors() ?? [],
        userFunction: self.miningProviderList(request:context:)
      )

    case "RewardTokenList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>(),
        interceptors: self.interceptors?.makeRewardTokenListInterceptors() ?? [],
        userFunction: self.rewardTokenList(request:context:)
      )

    case "MaxRewardPoolNumber":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>(),
        interceptors: self.interceptors?.makeMaxRewardPoolNumberInterceptors() ?? [],
        userFunction: self.maxRewardPoolNumber(request:context:)
      )

    case "MaxStakeItemNumber":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>(),
        interceptors: self.interceptors?.makeMaxStakeItemNumberInterceptors() ?? [],
        userFunction: self.maxStakeItemNumber(request:context:)
      )

    case "ProviderSwitch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>(),
        interceptors: self.interceptors?.makeProviderSwitchInterceptors() ?? [],
        userFunction: self.providerSwitch(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Stafihub_Stafihub_Mining_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Stafihub_Stafihub_Mining_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Stafihub_Stafihub_Mining_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryParamsResponse

  /// Queries a list of StakePoolInfo items.
  @Sendable func stakePoolInfo(
    request: Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse

  /// Queries a list of StakeItemList items.
  @Sendable func stakeItemList(
    request: Stafihub_Stafihub_Mining_QueryStakeItemListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeItemListResponse

  /// Queries a list of StakeReward items.
  @Sendable func stakeReward(
    request: Stafihub_Stafihub_Mining_QueryStakeRewardRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRewardResponse

  /// Queries a list of StakeRecordCount items.
  @Sendable func stakeRecordCount(
    request: Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse

  /// Queries a list of StakeRecord items.
  @Sendable func stakeRecord(
    request: Stafihub_Stafihub_Mining_QueryStakeRecordRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRecordResponse

  /// Queries a list of StakeRecordList items.
  @Sendable func stakeRecordList(
    request: Stafihub_Stafihub_Mining_QueryStakeRecordListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakeRecordListResponse

  /// Queries a list of StakePoolList items.
  @Sendable func stakePoolList(
    request: Stafihub_Stafihub_Mining_QueryStakePoolListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryStakePoolListResponse

  /// Queries a list of MiningProviderList items.
  @Sendable func miningProviderList(
    request: Stafihub_Stafihub_Mining_QueryMiningProviderListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryMiningProviderListResponse

  /// Queries a list of RewardTokenList items.
  @Sendable func rewardTokenList(
    request: Stafihub_Stafihub_Mining_QueryRewardTokenListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryRewardTokenListResponse

  /// Queries a list of MaxRewardPoolNumber items.
  @Sendable func maxRewardPoolNumber(
    request: Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse

  /// Queries a list of MaxStakeItemNumber items.
  @Sendable func maxStakeItemNumber(
    request: Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse

  /// Queries a list of ProviderSwitch items.
  @Sendable func providerSwitch(
    request: Stafihub_Stafihub_Mining_QueryProviderSwitchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Stafihub_Stafihub_Mining_QueryProviderSwitchResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Stafihub_Stafihub_Mining_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Stafihub_Stafihub_Mining_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Stafihub_Stafihub_Mining_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Stafihub_Stafihub_Mining_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "StakePoolInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>(),
        interceptors: self.interceptors?.makeStakePoolInfoInterceptors() ?? [],
        wrapping: self.stakePoolInfo(request:context:)
      )

    case "StakeItemList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeItemListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeItemListResponse>(),
        interceptors: self.interceptors?.makeStakeItemListInterceptors() ?? [],
        wrapping: self.stakeItemList(request:context:)
      )

    case "StakeReward":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRewardRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRewardResponse>(),
        interceptors: self.interceptors?.makeStakeRewardInterceptors() ?? [],
        wrapping: self.stakeReward(request:context:)
      )

    case "StakeRecordCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>(),
        interceptors: self.interceptors?.makeStakeRecordCountInterceptors() ?? [],
        wrapping: self.stakeRecordCount(request:context:)
      )

    case "StakeRecord":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRecordRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRecordResponse>(),
        interceptors: self.interceptors?.makeStakeRecordInterceptors() ?? [],
        wrapping: self.stakeRecord(request:context:)
      )

    case "StakeRecordList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>(),
        interceptors: self.interceptors?.makeStakeRecordListInterceptors() ?? [],
        wrapping: self.stakeRecordList(request:context:)
      )

    case "StakePoolList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryStakePoolListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryStakePoolListResponse>(),
        interceptors: self.interceptors?.makeStakePoolListInterceptors() ?? [],
        wrapping: self.stakePoolList(request:context:)
      )

    case "MiningProviderList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>(),
        interceptors: self.interceptors?.makeMiningProviderListInterceptors() ?? [],
        wrapping: self.miningProviderList(request:context:)
      )

    case "RewardTokenList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>(),
        interceptors: self.interceptors?.makeRewardTokenListInterceptors() ?? [],
        wrapping: self.rewardTokenList(request:context:)
      )

    case "MaxRewardPoolNumber":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>(),
        interceptors: self.interceptors?.makeMaxRewardPoolNumberInterceptors() ?? [],
        wrapping: self.maxRewardPoolNumber(request:context:)
      )

    case "MaxStakeItemNumber":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>(),
        interceptors: self.interceptors?.makeMaxStakeItemNumberInterceptors() ?? [],
        wrapping: self.maxStakeItemNumber(request:context:)
      )

    case "ProviderSwitch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest>(),
        responseSerializer: ProtobufSerializer<Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>(),
        interceptors: self.interceptors?.makeProviderSwitchInterceptors() ?? [],
        wrapping: self.providerSwitch(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Stafihub_Stafihub_Mining_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryParamsRequest, Stafihub_Stafihub_Mining_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'stakePoolInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakePoolInfoInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakePoolInfoRequest, Stafihub_Stafihub_Mining_QueryStakePoolInfoResponse>]

  /// - Returns: Interceptors to use when handling 'stakeItemList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeItemListInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakeItemListRequest, Stafihub_Stafihub_Mining_QueryStakeItemListResponse>]

  /// - Returns: Interceptors to use when handling 'stakeReward'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeRewardInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakeRewardRequest, Stafihub_Stafihub_Mining_QueryStakeRewardResponse>]

  /// - Returns: Interceptors to use when handling 'stakeRecordCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeRecordCountInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakeRecordCountRequest, Stafihub_Stafihub_Mining_QueryStakeRecordCountResponse>]

  /// - Returns: Interceptors to use when handling 'stakeRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeRecordInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakeRecordRequest, Stafihub_Stafihub_Mining_QueryStakeRecordResponse>]

  /// - Returns: Interceptors to use when handling 'stakeRecordList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeRecordListInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakeRecordListRequest, Stafihub_Stafihub_Mining_QueryStakeRecordListResponse>]

  /// - Returns: Interceptors to use when handling 'stakePoolList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakePoolListInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryStakePoolListRequest, Stafihub_Stafihub_Mining_QueryStakePoolListResponse>]

  /// - Returns: Interceptors to use when handling 'miningProviderList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMiningProviderListInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryMiningProviderListRequest, Stafihub_Stafihub_Mining_QueryMiningProviderListResponse>]

  /// - Returns: Interceptors to use when handling 'rewardTokenList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardTokenListInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryRewardTokenListRequest, Stafihub_Stafihub_Mining_QueryRewardTokenListResponse>]

  /// - Returns: Interceptors to use when handling 'maxRewardPoolNumber'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxRewardPoolNumberInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberRequest, Stafihub_Stafihub_Mining_QueryMaxRewardPoolNumberResponse>]

  /// - Returns: Interceptors to use when handling 'maxStakeItemNumber'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxStakeItemNumberInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberRequest, Stafihub_Stafihub_Mining_QueryMaxStakeItemNumberResponse>]

  /// - Returns: Interceptors to use when handling 'providerSwitch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProviderSwitchInterceptors() -> [ServerInterceptor<Stafihub_Stafihub_Mining_QueryProviderSwitchRequest, Stafihub_Stafihub_Mining_QueryProviderSwitchResponse>]
}

internal enum Stafihub_Stafihub_Mining_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "stafihub.stafihub.mining.Query",
    methods: [
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.params,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakePoolInfo,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakeItemList,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakeReward,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakeRecordCount,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakeRecord,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakeRecordList,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.stakePoolList,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.miningProviderList,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.rewardTokenList,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.maxRewardPoolNumber,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.maxStakeItemNumber,
      Stafihub_Stafihub_Mining_QueryServerMetadata.Methods.providerSwitch,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/stafihub.stafihub.mining.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let stakePoolInfo = GRPCMethodDescriptor(
      name: "StakePoolInfo",
      path: "/stafihub.stafihub.mining.Query/StakePoolInfo",
      type: GRPCCallType.unary
    )

    internal static let stakeItemList = GRPCMethodDescriptor(
      name: "StakeItemList",
      path: "/stafihub.stafihub.mining.Query/StakeItemList",
      type: GRPCCallType.unary
    )

    internal static let stakeReward = GRPCMethodDescriptor(
      name: "StakeReward",
      path: "/stafihub.stafihub.mining.Query/StakeReward",
      type: GRPCCallType.unary
    )

    internal static let stakeRecordCount = GRPCMethodDescriptor(
      name: "StakeRecordCount",
      path: "/stafihub.stafihub.mining.Query/StakeRecordCount",
      type: GRPCCallType.unary
    )

    internal static let stakeRecord = GRPCMethodDescriptor(
      name: "StakeRecord",
      path: "/stafihub.stafihub.mining.Query/StakeRecord",
      type: GRPCCallType.unary
    )

    internal static let stakeRecordList = GRPCMethodDescriptor(
      name: "StakeRecordList",
      path: "/stafihub.stafihub.mining.Query/StakeRecordList",
      type: GRPCCallType.unary
    )

    internal static let stakePoolList = GRPCMethodDescriptor(
      name: "StakePoolList",
      path: "/stafihub.stafihub.mining.Query/StakePoolList",
      type: GRPCCallType.unary
    )

    internal static let miningProviderList = GRPCMethodDescriptor(
      name: "MiningProviderList",
      path: "/stafihub.stafihub.mining.Query/MiningProviderList",
      type: GRPCCallType.unary
    )

    internal static let rewardTokenList = GRPCMethodDescriptor(
      name: "RewardTokenList",
      path: "/stafihub.stafihub.mining.Query/RewardTokenList",
      type: GRPCCallType.unary
    )

    internal static let maxRewardPoolNumber = GRPCMethodDescriptor(
      name: "MaxRewardPoolNumber",
      path: "/stafihub.stafihub.mining.Query/MaxRewardPoolNumber",
      type: GRPCCallType.unary
    )

    internal static let maxStakeItemNumber = GRPCMethodDescriptor(
      name: "MaxStakeItemNumber",
      path: "/stafihub.stafihub.mining.Query/MaxStakeItemNumber",
      type: GRPCCallType.unary
    )

    internal static let providerSwitch = GRPCMethodDescriptor(
      name: "ProviderSwitch",
      path: "/stafihub.stafihub.mining.Query/ProviderSwitch",
      type: GRPCCallType.unary
    )
  }
}
