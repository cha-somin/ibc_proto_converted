// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/liquid/v1beta1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryDelegatedBalanceRequest defines the request type for Query/DelegatedBalance method.
struct Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the address of the account to query
  var delegator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DelegatedBalanceResponse defines the response type for the Query/DelegatedBalance method.
struct Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// vested is the amount of all delegated coins that have vested (ie not locked)
  var vested: Cosmos_Base_V1beta1_Coin {
    get {return _vested ?? Cosmos_Base_V1beta1_Coin()}
    set {_vested = newValue}
  }
  /// Returns true if `vested` has been explicitly set.
  var hasVested: Bool {return self._vested != nil}
  /// Clears the value of `vested`. Subsequent reads from it will return its default value.
  mutating func clearVested() {self._vested = nil}

  /// vesting is the amount of all delegated coins that are still vesting (ie locked)
  var vesting: Cosmos_Base_V1beta1_Coin {
    get {return _vesting ?? Cosmos_Base_V1beta1_Coin()}
    set {_vesting = newValue}
  }
  /// Returns true if `vesting` has been explicitly set.
  var hasVesting: Bool {return self._vesting != nil}
  /// Clears the value of `vesting`. Subsequent reads from it will return its default value.
  mutating func clearVesting() {self._vesting = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vested: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _vesting: Cosmos_Base_V1beta1_Coin? = nil
}

/// QueryTotalSupplyRequest defines the request type for Query/TotalSupply method.
struct Kava_Liquid_V1beta1_QueryTotalSupplyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TotalSupplyResponse defines the response type for the Query/TotalSupply method.
struct Kava_Liquid_V1beta1_QueryTotalSupplyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Height is the block height at which these totals apply
  var height: Int64 = 0

  /// Result is a list of coins supplied to liquid
  var result: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest: @unchecked Sendable {}
extension Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse: @unchecked Sendable {}
extension Kava_Liquid_V1beta1_QueryTotalSupplyRequest: @unchecked Sendable {}
extension Kava_Liquid_V1beta1_QueryTotalSupplyResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.liquid.v1beta1"

extension Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDelegatedBalanceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest, rhs: Kava_Liquid_V1beta1_QueryDelegatedBalanceRequest) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDelegatedBalanceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vested"),
    2: .same(proto: "vesting"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._vested) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._vesting) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._vested {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._vesting {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse, rhs: Kava_Liquid_V1beta1_QueryDelegatedBalanceResponse) -> Bool {
    if lhs._vested != rhs._vested {return false}
    if lhs._vesting != rhs._vesting {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Liquid_V1beta1_QueryTotalSupplyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryTotalSupplyRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Liquid_V1beta1_QueryTotalSupplyRequest, rhs: Kava_Liquid_V1beta1_QueryTotalSupplyRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Liquid_V1beta1_QueryTotalSupplyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryTotalSupplyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    if !self.result.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.result, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Liquid_V1beta1_QueryTotalSupplyResponse, rhs: Kava_Liquid_V1beta1_QueryTotalSupplyResponse) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
