//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: comdex/rewards/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Comdex_Rewards_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Comdex_Rewards_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Comdex_Rewards_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryParamsRequest, Comdex_Rewards_V1beta1_QueryParamsResponse>

  func queryAllEpochsInfo(
    _ request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>

  func queryEpochInfoByDuration(
    _ request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>

  func queryAllGauges(
    _ request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryAllGaugesRequest, Comdex_Rewards_V1beta1_QueryAllGaugesResponse>

  func queryGaugeByID(
    _ request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>

  func queryGaugeByDuration(
    _ request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>

  func queryRewards(
    _ request: Comdex_Rewards_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryRewardsRequest, Comdex_Rewards_V1beta1_QueryRewardsResponse>

  func queryReward(
    _ request: Comdex_Rewards_V1beta1_QueryRewardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryRewardRequest, Comdex_Rewards_V1beta1_QueryRewardResponse>

  func queryExternalRewardsLockers(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>

  func queryExternalRewardVaults(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>

  func queryWhitelistedAppIdsVault(
    _ request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>

  func queryExternalRewardLends(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>

  func queryExternalRewardStableMint(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>

  func queryEpochTime(
    _ request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryEpochTimeRequest, Comdex_Rewards_V1beta1_QueryEpochTimeResponse>

  func queryExtLendRewardsAPR(
    _ request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>
}

extension Comdex_Rewards_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "comdex.rewards.v1beta1.Query"
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Comdex_Rewards_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryParamsRequest, Comdex_Rewards_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to QueryAllEpochsInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAllEpochsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAllEpochsInfo(
    _ request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllEpochsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllEpochsInfoInterceptors() ?? []
    )
  }

  /// Unary call to QueryEpochInfoByDuration
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryEpochInfoByDuration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryEpochInfoByDuration(
    _ request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochInfoByDuration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEpochInfoByDurationInterceptors() ?? []
    )
  }

  /// Unary call to QueryAllGauges
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAllGauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAllGauges(
    _ request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryAllGaugesRequest, Comdex_Rewards_V1beta1_QueryAllGaugesResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllGaugesInterceptors() ?? []
    )
  }

  /// Unary call to QueryGaugeByID
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryGaugeByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryGaugeByID(
    _ request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, Comdex_Rewards_V1beta1_QueryGaugeByIdResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryGaugeByIDInterceptors() ?? []
    )
  }

  /// Unary call to QueryGaugeByDuration
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryGaugeByDuration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryGaugeByDuration(
    _ request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByDuration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryGaugeByDurationInterceptors() ?? []
    )
  }

  /// Unary call to QueryRewards
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryRewards(
    _ request: Comdex_Rewards_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryRewardsRequest, Comdex_Rewards_V1beta1_QueryRewardsResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardsInterceptors() ?? []
    )
  }

  /// Unary call to QueryReward
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryReward.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryReward(
    _ request: Comdex_Rewards_V1beta1_QueryRewardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryRewardRequest, Comdex_Rewards_V1beta1_QueryRewardResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardInterceptors() ?? []
    )
  }

  /// Unary call to QueryExternalRewardsLockers
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExternalRewardsLockers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExternalRewardsLockers(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardsLockers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardsLockersInterceptors() ?? []
    )
  }

  /// Unary call to QueryExternalRewardVaults
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExternalRewardVaults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExternalRewardVaults(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardVaults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardVaultsInterceptors() ?? []
    )
  }

  /// Unary call to QueryWhitelistedAppIdsVault
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryWhitelistedAppIdsVault.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryWhitelistedAppIdsVault(
    _ request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryWhitelistedAppIdsVault.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryWhitelistedAppIdsVaultInterceptors() ?? []
    )
  }

  /// Unary call to QueryExternalRewardLends
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExternalRewardLends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExternalRewardLends(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardLends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardLendsInterceptors() ?? []
    )
  }

  /// Unary call to QueryExternalRewardStableMint
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExternalRewardStableMint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExternalRewardStableMint(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardStableMint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardStableMintInterceptors() ?? []
    )
  }

  /// Unary call to QueryEpochTime
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryEpochTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryEpochTime(
    _ request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryEpochTimeRequest, Comdex_Rewards_V1beta1_QueryEpochTimeResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEpochTimeInterceptors() ?? []
    )
  }

  /// Unary call to QueryExtLendRewardsAPR
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExtLendRewardsAPR.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExtLendRewardsAPR(
    _ request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse> {
    return self.makeUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExtLendRewardsAPR.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExtLendRewardsAPRInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Comdex_Rewards_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Comdex_Rewards_V1beta1_QueryNIOClient")
internal final class Comdex_Rewards_V1beta1_QueryClient: Comdex_Rewards_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the comdex.rewards.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Comdex_Rewards_V1beta1_QueryNIOClient: Comdex_Rewards_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the comdex.rewards.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Comdex_Rewards_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Comdex_Rewards_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryParamsRequest, Comdex_Rewards_V1beta1_QueryParamsResponse>

  func makeQueryAllEpochsInfoCall(
    _ request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>

  func makeQueryEpochInfoByDurationCall(
    _ request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>

  func makeQueryAllGaugesCall(
    _ request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryAllGaugesRequest, Comdex_Rewards_V1beta1_QueryAllGaugesResponse>

  func makeQueryGaugeByIDCall(
    _ request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>

  func makeQueryGaugeByDurationCall(
    _ request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>

  func makeQueryRewardsCall(
    _ request: Comdex_Rewards_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryRewardsRequest, Comdex_Rewards_V1beta1_QueryRewardsResponse>

  func makeQueryRewardCall(
    _ request: Comdex_Rewards_V1beta1_QueryRewardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryRewardRequest, Comdex_Rewards_V1beta1_QueryRewardResponse>

  func makeQueryExternalRewardsLockersCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>

  func makeQueryExternalRewardVaultsCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>

  func makeQueryWhitelistedAppIdsVaultCall(
    _ request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>

  func makeQueryExternalRewardLendsCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>

  func makeQueryExternalRewardStableMintCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>

  func makeQueryEpochTimeCall(
    _ request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryEpochTimeRequest, Comdex_Rewards_V1beta1_QueryEpochTimeResponse>

  func makeQueryExtLendRewardsAprCall(
    _ request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Rewards_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Comdex_Rewards_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Comdex_Rewards_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryParamsRequest, Comdex_Rewards_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeQueryAllEpochsInfoCall(
    _ request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllEpochsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllEpochsInfoInterceptors() ?? []
    )
  }

  internal func makeQueryEpochInfoByDurationCall(
    _ request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochInfoByDuration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEpochInfoByDurationInterceptors() ?? []
    )
  }

  internal func makeQueryAllGaugesCall(
    _ request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryAllGaugesRequest, Comdex_Rewards_V1beta1_QueryAllGaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllGaugesInterceptors() ?? []
    )
  }

  internal func makeQueryGaugeByIDCall(
    _ request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, Comdex_Rewards_V1beta1_QueryGaugeByIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryGaugeByIDInterceptors() ?? []
    )
  }

  internal func makeQueryGaugeByDurationCall(
    _ request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByDuration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryGaugeByDurationInterceptors() ?? []
    )
  }

  internal func makeQueryRewardsCall(
    _ request: Comdex_Rewards_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryRewardsRequest, Comdex_Rewards_V1beta1_QueryRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardsInterceptors() ?? []
    )
  }

  internal func makeQueryRewardCall(
    _ request: Comdex_Rewards_V1beta1_QueryRewardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryRewardRequest, Comdex_Rewards_V1beta1_QueryRewardResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardInterceptors() ?? []
    )
  }

  internal func makeQueryExternalRewardsLockersCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardsLockers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardsLockersInterceptors() ?? []
    )
  }

  internal func makeQueryExternalRewardVaultsCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardVaults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardVaultsInterceptors() ?? []
    )
  }

  internal func makeQueryWhitelistedAppIdsVaultCall(
    _ request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryWhitelistedAppIdsVault.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryWhitelistedAppIdsVaultInterceptors() ?? []
    )
  }

  internal func makeQueryExternalRewardLendsCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardLends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardLendsInterceptors() ?? []
    )
  }

  internal func makeQueryExternalRewardStableMintCall(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardStableMint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardStableMintInterceptors() ?? []
    )
  }

  internal func makeQueryEpochTimeCall(
    _ request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryEpochTimeRequest, Comdex_Rewards_V1beta1_QueryEpochTimeResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEpochTimeInterceptors() ?? []
    )
  }

  internal func makeQueryExtLendRewardsAprCall(
    _ request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExtLendRewardsAPR.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExtLendRewardsAPRInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Rewards_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Comdex_Rewards_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func queryAllEpochsInfo(
    _ request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllEpochsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllEpochsInfoInterceptors() ?? []
    )
  }

  internal func queryEpochInfoByDuration(
    _ request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochInfoByDuration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEpochInfoByDurationInterceptors() ?? []
    )
  }

  internal func queryAllGauges(
    _ request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryAllGaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllGaugesInterceptors() ?? []
    )
  }

  internal func queryGaugeByID(
    _ request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryGaugeByIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryGaugeByIDInterceptors() ?? []
    )
  }

  internal func queryGaugeByDuration(
    _ request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByDuration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryGaugeByDurationInterceptors() ?? []
    )
  }

  internal func queryRewards(
    _ request: Comdex_Rewards_V1beta1_QueryRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardsInterceptors() ?? []
    )
  }

  internal func queryReward(
    _ request: Comdex_Rewards_V1beta1_QueryRewardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryRewardResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryRewardInterceptors() ?? []
    )
  }

  internal func queryExternalRewardsLockers(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardsLockers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardsLockersInterceptors() ?? []
    )
  }

  internal func queryExternalRewardVaults(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardVaults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardVaultsInterceptors() ?? []
    )
  }

  internal func queryWhitelistedAppIdsVault(
    _ request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryWhitelistedAppIdsVault.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryWhitelistedAppIdsVaultInterceptors() ?? []
    )
  }

  internal func queryExternalRewardLends(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardLends.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardLendsInterceptors() ?? []
    )
  }

  internal func queryExternalRewardStableMint(
    _ request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardStableMint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExternalRewardStableMintInterceptors() ?? []
    )
  }

  internal func queryEpochTime(
    _ request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryEpochTimeResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryEpochTimeInterceptors() ?? []
    )
  }

  internal func queryExtLendRewardsAPR(
    _ request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExtLendRewardsAPR.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExtLendRewardsAPRInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Comdex_Rewards_V1beta1_QueryAsyncClient: Comdex_Rewards_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Comdex_Rewards_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryParamsRequest, Comdex_Rewards_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAllEpochsInfo'.
  func makeQueryAllEpochsInfoInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'queryEpochInfoByDuration'.
  func makeQueryEpochInfoByDurationInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAllGauges'.
  func makeQueryAllGaugesInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryAllGaugesRequest, Comdex_Rewards_V1beta1_QueryAllGaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'queryGaugeByID'.
  func makeQueryGaugeByIDInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>]

  /// - Returns: Interceptors to use when invoking 'queryGaugeByDuration'.
  func makeQueryGaugeByDurationInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>]

  /// - Returns: Interceptors to use when invoking 'queryRewards'.
  func makeQueryRewardsInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryRewardsRequest, Comdex_Rewards_V1beta1_QueryRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryReward'.
  func makeQueryRewardInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryRewardRequest, Comdex_Rewards_V1beta1_QueryRewardResponse>]

  /// - Returns: Interceptors to use when invoking 'queryExternalRewardsLockers'.
  func makeQueryExternalRewardsLockersInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>]

  /// - Returns: Interceptors to use when invoking 'queryExternalRewardVaults'.
  func makeQueryExternalRewardVaultsInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryWhitelistedAppIdsVault'.
  func makeQueryWhitelistedAppIdsVaultInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>]

  /// - Returns: Interceptors to use when invoking 'queryExternalRewardLends'.
  func makeQueryExternalRewardLendsInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryExternalRewardStableMint'.
  func makeQueryExternalRewardStableMintInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>]

  /// - Returns: Interceptors to use when invoking 'queryEpochTime'.
  func makeQueryEpochTimeInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryEpochTimeRequest, Comdex_Rewards_V1beta1_QueryEpochTimeResponse>]

  /// - Returns: Interceptors to use when invoking 'queryExtLendRewardsAPR'.
  func makeQueryExtLendRewardsAPRInterceptors() -> [ClientInterceptor<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>]
}

internal enum Comdex_Rewards_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "comdex.rewards.v1beta1.Query",
    methods: [
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.params,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllEpochsInfo,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochInfoByDuration,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryAllGauges,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByID,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryGaugeByDuration,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryRewards,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryReward,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardsLockers,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardVaults,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryWhitelistedAppIdsVault,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardLends,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExternalRewardStableMint,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryEpochTime,
      Comdex_Rewards_V1beta1_QueryClientMetadata.Methods.queryExtLendRewardsAPR,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/comdex.rewards.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryAllEpochsInfo = GRPCMethodDescriptor(
      name: "QueryAllEpochsInfo",
      path: "/comdex.rewards.v1beta1.Query/QueryAllEpochsInfo",
      type: GRPCCallType.unary
    )

    internal static let queryEpochInfoByDuration = GRPCMethodDescriptor(
      name: "QueryEpochInfoByDuration",
      path: "/comdex.rewards.v1beta1.Query/QueryEpochInfoByDuration",
      type: GRPCCallType.unary
    )

    internal static let queryAllGauges = GRPCMethodDescriptor(
      name: "QueryAllGauges",
      path: "/comdex.rewards.v1beta1.Query/QueryAllGauges",
      type: GRPCCallType.unary
    )

    internal static let queryGaugeByID = GRPCMethodDescriptor(
      name: "QueryGaugeByID",
      path: "/comdex.rewards.v1beta1.Query/QueryGaugeByID",
      type: GRPCCallType.unary
    )

    internal static let queryGaugeByDuration = GRPCMethodDescriptor(
      name: "QueryGaugeByDuration",
      path: "/comdex.rewards.v1beta1.Query/QueryGaugeByDuration",
      type: GRPCCallType.unary
    )

    internal static let queryRewards = GRPCMethodDescriptor(
      name: "QueryRewards",
      path: "/comdex.rewards.v1beta1.Query/QueryRewards",
      type: GRPCCallType.unary
    )

    internal static let queryReward = GRPCMethodDescriptor(
      name: "QueryReward",
      path: "/comdex.rewards.v1beta1.Query/QueryReward",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardsLockers = GRPCMethodDescriptor(
      name: "QueryExternalRewardsLockers",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardsLockers",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardVaults = GRPCMethodDescriptor(
      name: "QueryExternalRewardVaults",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardVaults",
      type: GRPCCallType.unary
    )

    internal static let queryWhitelistedAppIdsVault = GRPCMethodDescriptor(
      name: "QueryWhitelistedAppIdsVault",
      path: "/comdex.rewards.v1beta1.Query/QueryWhitelistedAppIdsVault",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardLends = GRPCMethodDescriptor(
      name: "QueryExternalRewardLends",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardLends",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardStableMint = GRPCMethodDescriptor(
      name: "QueryExternalRewardStableMint",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardStableMint",
      type: GRPCCallType.unary
    )

    internal static let queryEpochTime = GRPCMethodDescriptor(
      name: "QueryEpochTime",
      path: "/comdex.rewards.v1beta1.Query/QueryEpochTime",
      type: GRPCCallType.unary
    )

    internal static let queryExtLendRewardsAPR = GRPCMethodDescriptor(
      name: "QueryExtLendRewardsAPR",
      path: "/comdex.rewards.v1beta1.Query/QueryExtLendRewardsAPR",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Comdex_Rewards_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Comdex_Rewards_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  func params(request: Comdex_Rewards_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryParamsResponse>

  func queryAllEpochsInfo(request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>

  func queryEpochInfoByDuration(request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>

  func queryAllGauges(request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryAllGaugesResponse>

  func queryGaugeByID(request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>

  func queryGaugeByDuration(request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>

  func queryRewards(request: Comdex_Rewards_V1beta1_QueryRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryRewardsResponse>

  func queryReward(request: Comdex_Rewards_V1beta1_QueryRewardRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryRewardResponse>

  func queryExternalRewardsLockers(request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>

  func queryExternalRewardVaults(request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>

  func queryWhitelistedAppIdsVault(request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>

  func queryExternalRewardLends(request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>

  func queryExternalRewardStableMint(request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>

  func queryEpochTime(request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryEpochTimeResponse>

  func queryExtLendRewardsAPR(request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>
}

extension Comdex_Rewards_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Comdex_Rewards_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "QueryAllEpochsInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>(),
        interceptors: self.interceptors?.makeQueryAllEpochsInfoInterceptors() ?? [],
        userFunction: self.queryAllEpochsInfo(request:context:)
      )

    case "QueryEpochInfoByDuration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>(),
        interceptors: self.interceptors?.makeQueryEpochInfoByDurationInterceptors() ?? [],
        userFunction: self.queryEpochInfoByDuration(request:context:)
      )

    case "QueryAllGauges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryAllGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryAllGaugesResponse>(),
        interceptors: self.interceptors?.makeQueryAllGaugesInterceptors() ?? [],
        userFunction: self.queryAllGauges(request:context:)
      )

    case "QueryGaugeByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>(),
        interceptors: self.interceptors?.makeQueryGaugeByIDInterceptors() ?? [],
        userFunction: self.queryGaugeByID(request:context:)
      )

    case "QueryGaugeByDuration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>(),
        interceptors: self.interceptors?.makeQueryGaugeByDurationInterceptors() ?? [],
        userFunction: self.queryGaugeByDuration(request:context:)
      )

    case "QueryRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeQueryRewardsInterceptors() ?? [],
        userFunction: self.queryRewards(request:context:)
      )

    case "QueryReward":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryRewardRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryRewardResponse>(),
        interceptors: self.interceptors?.makeQueryRewardInterceptors() ?? [],
        userFunction: self.queryReward(request:context:)
      )

    case "QueryExternalRewardsLockers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardsLockersInterceptors() ?? [],
        userFunction: self.queryExternalRewardsLockers(request:context:)
      )

    case "QueryExternalRewardVaults":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardVaultsInterceptors() ?? [],
        userFunction: self.queryExternalRewardVaults(request:context:)
      )

    case "QueryWhitelistedAppIdsVault":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>(),
        interceptors: self.interceptors?.makeQueryWhitelistedAppIdsVaultInterceptors() ?? [],
        userFunction: self.queryWhitelistedAppIdsVault(request:context:)
      )

    case "QueryExternalRewardLends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardLendsInterceptors() ?? [],
        userFunction: self.queryExternalRewardLends(request:context:)
      )

    case "QueryExternalRewardStableMint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardStableMintInterceptors() ?? [],
        userFunction: self.queryExternalRewardStableMint(request:context:)
      )

    case "QueryEpochTime":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryEpochTimeRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryEpochTimeResponse>(),
        interceptors: self.interceptors?.makeQueryEpochTimeInterceptors() ?? [],
        userFunction: self.queryEpochTime(request:context:)
      )

    case "QueryExtLendRewardsAPR":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>(),
        interceptors: self.interceptors?.makeQueryExtLendRewardsAPRInterceptors() ?? [],
        userFunction: self.queryExtLendRewardsAPR(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Comdex_Rewards_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Comdex_Rewards_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func params(
    request: Comdex_Rewards_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryParamsResponse

  @Sendable func queryAllEpochsInfo(
    request: Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse

  @Sendable func queryEpochInfoByDuration(
    request: Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse

  @Sendable func queryAllGauges(
    request: Comdex_Rewards_V1beta1_QueryAllGaugesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryAllGaugesResponse

  @Sendable func queryGaugeByID(
    request: Comdex_Rewards_V1beta1_QueryGaugeByIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryGaugeByIdResponse

  @Sendable func queryGaugeByDuration(
    request: Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse

  @Sendable func queryRewards(
    request: Comdex_Rewards_V1beta1_QueryRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryRewardsResponse

  @Sendable func queryReward(
    request: Comdex_Rewards_V1beta1_QueryRewardRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryRewardResponse

  @Sendable func queryExternalRewardsLockers(
    request: Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse

  @Sendable func queryExternalRewardVaults(
    request: Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse

  @Sendable func queryWhitelistedAppIdsVault(
    request: Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse

  @Sendable func queryExternalRewardLends(
    request: Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse

  @Sendable func queryExternalRewardStableMint(
    request: Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse

  @Sendable func queryEpochTime(
    request: Comdex_Rewards_V1beta1_QueryEpochTimeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryEpochTimeResponse

  @Sendable func queryExtLendRewardsAPR(
    request: Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Rewards_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Comdex_Rewards_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Comdex_Rewards_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Comdex_Rewards_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "QueryAllEpochsInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>(),
        interceptors: self.interceptors?.makeQueryAllEpochsInfoInterceptors() ?? [],
        wrapping: self.queryAllEpochsInfo(request:context:)
      )

    case "QueryEpochInfoByDuration":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>(),
        interceptors: self.interceptors?.makeQueryEpochInfoByDurationInterceptors() ?? [],
        wrapping: self.queryEpochInfoByDuration(request:context:)
      )

    case "QueryAllGauges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryAllGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryAllGaugesResponse>(),
        interceptors: self.interceptors?.makeQueryAllGaugesInterceptors() ?? [],
        wrapping: self.queryAllGauges(request:context:)
      )

    case "QueryGaugeByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>(),
        interceptors: self.interceptors?.makeQueryGaugeByIDInterceptors() ?? [],
        wrapping: self.queryGaugeByID(request:context:)
      )

    case "QueryGaugeByDuration":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>(),
        interceptors: self.interceptors?.makeQueryGaugeByDurationInterceptors() ?? [],
        wrapping: self.queryGaugeByDuration(request:context:)
      )

    case "QueryRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryRewardsResponse>(),
        interceptors: self.interceptors?.makeQueryRewardsInterceptors() ?? [],
        wrapping: self.queryRewards(request:context:)
      )

    case "QueryReward":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryRewardRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryRewardResponse>(),
        interceptors: self.interceptors?.makeQueryRewardInterceptors() ?? [],
        wrapping: self.queryReward(request:context:)
      )

    case "QueryExternalRewardsLockers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardsLockersInterceptors() ?? [],
        wrapping: self.queryExternalRewardsLockers(request:context:)
      )

    case "QueryExternalRewardVaults":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardVaultsInterceptors() ?? [],
        wrapping: self.queryExternalRewardVaults(request:context:)
      )

    case "QueryWhitelistedAppIdsVault":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>(),
        interceptors: self.interceptors?.makeQueryWhitelistedAppIdsVaultInterceptors() ?? [],
        wrapping: self.queryWhitelistedAppIdsVault(request:context:)
      )

    case "QueryExternalRewardLends":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardLendsInterceptors() ?? [],
        wrapping: self.queryExternalRewardLends(request:context:)
      )

    case "QueryExternalRewardStableMint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>(),
        interceptors: self.interceptors?.makeQueryExternalRewardStableMintInterceptors() ?? [],
        wrapping: self.queryExternalRewardStableMint(request:context:)
      )

    case "QueryEpochTime":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryEpochTimeRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryEpochTimeResponse>(),
        interceptors: self.interceptors?.makeQueryEpochTimeInterceptors() ?? [],
        wrapping: self.queryEpochTime(request:context:)
      )

    case "QueryExtLendRewardsAPR":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>(),
        interceptors: self.interceptors?.makeQueryExtLendRewardsAPRInterceptors() ?? [],
        wrapping: self.queryExtLendRewardsAPR(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Comdex_Rewards_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryParamsRequest, Comdex_Rewards_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryAllEpochsInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAllEpochsInfoInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryAllEpochsInfoRequest, Comdex_Rewards_V1beta1_QueryAllEpochsInfoResponse>]

  /// - Returns: Interceptors to use when handling 'queryEpochInfoByDuration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryEpochInfoByDurationInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryEpochInfoByDurationRequest, Comdex_Rewards_V1beta1_QueryEpochInfoByDurationResponse>]

  /// - Returns: Interceptors to use when handling 'queryAllGauges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAllGaugesInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryAllGaugesRequest, Comdex_Rewards_V1beta1_QueryAllGaugesResponse>]

  /// - Returns: Interceptors to use when handling 'queryGaugeByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryGaugeByIDInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryGaugeByIdRequest, Comdex_Rewards_V1beta1_QueryGaugeByIdResponse>]

  /// - Returns: Interceptors to use when handling 'queryGaugeByDuration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryGaugeByDurationInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryGaugesByDurationRequest, Comdex_Rewards_V1beta1_QueryGaugeByDurationResponse>]

  /// - Returns: Interceptors to use when handling 'queryRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryRewardsInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryRewardsRequest, Comdex_Rewards_V1beta1_QueryRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'queryReward'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryRewardInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryRewardRequest, Comdex_Rewards_V1beta1_QueryRewardResponse>]

  /// - Returns: Interceptors to use when handling 'queryExternalRewardsLockers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExternalRewardsLockersInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardsLockersRequest, Comdex_Rewards_V1beta1_QueryExternalRewardsLockersResponse>]

  /// - Returns: Interceptors to use when handling 'queryExternalRewardVaults'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExternalRewardVaultsInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardVaultsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardVaultsResponse>]

  /// - Returns: Interceptors to use when handling 'queryWhitelistedAppIdsVault'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryWhitelistedAppIdsVaultInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultRequest, Comdex_Rewards_V1beta1_QueryWhitelistedAppIdsVaultResponse>]

  /// - Returns: Interceptors to use when handling 'queryExternalRewardLends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExternalRewardLendsInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardLendsRequest, Comdex_Rewards_V1beta1_QueryExternalRewardLendsResponse>]

  /// - Returns: Interceptors to use when handling 'queryExternalRewardStableMint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExternalRewardStableMintInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryExternalRewardStableMintRequest, Comdex_Rewards_V1beta1_QueryExternalRewardStableMintResponse>]

  /// - Returns: Interceptors to use when handling 'queryEpochTime'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryEpochTimeInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryEpochTimeRequest, Comdex_Rewards_V1beta1_QueryEpochTimeResponse>]

  /// - Returns: Interceptors to use when handling 'queryExtLendRewardsAPR'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExtLendRewardsAPRInterceptors() -> [ServerInterceptor<Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRRequest, Comdex_Rewards_V1beta1_QueryExtLendRewardsAPRResponse>]
}

internal enum Comdex_Rewards_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "comdex.rewards.v1beta1.Query",
    methods: [
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.params,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryAllEpochsInfo,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryEpochInfoByDuration,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryAllGauges,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryGaugeByID,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryGaugeByDuration,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryRewards,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryReward,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryExternalRewardsLockers,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryExternalRewardVaults,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryWhitelistedAppIdsVault,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryExternalRewardLends,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryExternalRewardStableMint,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryEpochTime,
      Comdex_Rewards_V1beta1_QueryServerMetadata.Methods.queryExtLendRewardsAPR,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/comdex.rewards.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryAllEpochsInfo = GRPCMethodDescriptor(
      name: "QueryAllEpochsInfo",
      path: "/comdex.rewards.v1beta1.Query/QueryAllEpochsInfo",
      type: GRPCCallType.unary
    )

    internal static let queryEpochInfoByDuration = GRPCMethodDescriptor(
      name: "QueryEpochInfoByDuration",
      path: "/comdex.rewards.v1beta1.Query/QueryEpochInfoByDuration",
      type: GRPCCallType.unary
    )

    internal static let queryAllGauges = GRPCMethodDescriptor(
      name: "QueryAllGauges",
      path: "/comdex.rewards.v1beta1.Query/QueryAllGauges",
      type: GRPCCallType.unary
    )

    internal static let queryGaugeByID = GRPCMethodDescriptor(
      name: "QueryGaugeByID",
      path: "/comdex.rewards.v1beta1.Query/QueryGaugeByID",
      type: GRPCCallType.unary
    )

    internal static let queryGaugeByDuration = GRPCMethodDescriptor(
      name: "QueryGaugeByDuration",
      path: "/comdex.rewards.v1beta1.Query/QueryGaugeByDuration",
      type: GRPCCallType.unary
    )

    internal static let queryRewards = GRPCMethodDescriptor(
      name: "QueryRewards",
      path: "/comdex.rewards.v1beta1.Query/QueryRewards",
      type: GRPCCallType.unary
    )

    internal static let queryReward = GRPCMethodDescriptor(
      name: "QueryReward",
      path: "/comdex.rewards.v1beta1.Query/QueryReward",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardsLockers = GRPCMethodDescriptor(
      name: "QueryExternalRewardsLockers",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardsLockers",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardVaults = GRPCMethodDescriptor(
      name: "QueryExternalRewardVaults",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardVaults",
      type: GRPCCallType.unary
    )

    internal static let queryWhitelistedAppIdsVault = GRPCMethodDescriptor(
      name: "QueryWhitelistedAppIdsVault",
      path: "/comdex.rewards.v1beta1.Query/QueryWhitelistedAppIdsVault",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardLends = GRPCMethodDescriptor(
      name: "QueryExternalRewardLends",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardLends",
      type: GRPCCallType.unary
    )

    internal static let queryExternalRewardStableMint = GRPCMethodDescriptor(
      name: "QueryExternalRewardStableMint",
      path: "/comdex.rewards.v1beta1.Query/QueryExternalRewardStableMint",
      type: GRPCCallType.unary
    )

    internal static let queryEpochTime = GRPCMethodDescriptor(
      name: "QueryEpochTime",
      path: "/comdex.rewards.v1beta1.Query/QueryEpochTime",
      type: GRPCCallType.unary
    )

    internal static let queryExtLendRewardsAPR = GRPCMethodDescriptor(
      name: "QueryExtLendRewardsAPR",
      path: "/comdex.rewards.v1beta1.Query/QueryExtLendRewardsAPR",
      type: GRPCCallType.unary
    )
  }
}
