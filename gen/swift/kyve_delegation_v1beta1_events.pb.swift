// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/delegation/v1beta1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventUpdateParams is an event emitted when the module parameters are updated.
/// emitted_by: MsgUpdateParams
struct Kyve_Delegation_V1beta1_EventUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// old_params is the module's old parameters.
  var oldParams: Kyve_Delegation_V1beta1_Params {
    get {return _oldParams ?? Kyve_Delegation_V1beta1_Params()}
    set {_oldParams = newValue}
  }
  /// Returns true if `oldParams` has been explicitly set.
  var hasOldParams: Bool {return self._oldParams != nil}
  /// Clears the value of `oldParams`. Subsequent reads from it will return its default value.
  mutating func clearOldParams() {self._oldParams = nil}

  /// new_params is the module's new parameters.
  var newParams: Kyve_Delegation_V1beta1_Params {
    get {return _newParams ?? Kyve_Delegation_V1beta1_Params()}
    set {_newParams = newValue}
  }
  /// Returns true if `newParams` has been explicitly set.
  var hasNewParams: Bool {return self._newParams != nil}
  /// Clears the value of `newParams`. Subsequent reads from it will return its default value.
  mutating func clearNewParams() {self._newParams = nil}

  /// payload is the parameter updates that were performed.
  var payload: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _oldParams: Kyve_Delegation_V1beta1_Params? = nil
  fileprivate var _newParams: Kyve_Delegation_V1beta1_Params? = nil
}

/// EventDelegate is an event emitted when someone delegates to a protocol node.
/// emitted_by: MsgDelegate
struct Kyve_Delegation_V1beta1_EventDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the account address of the delegator.
  var address: String = String()

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventStartUndelegation is an event emitted when someone starts an undelegation from a protocol node.
/// emitted_by: EndBlock
struct Kyve_Delegation_V1beta1_EventStartUndelegation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the address of the delegator.
  var address: String = String()

  /// staker is the address of the protocol node.
  var staker: String = String()

  /// amount is the amount to be undelegated from the protocol node.
  var amount: UInt64 = 0

  /// estimated_undelegation_date is the date in UNIX seconds on when the undelegation will be performed.
  /// Note, this number will be incorrect if a governance proposal changes `UnbondingDelegationTime` while unbonding.
  var estimatedUndelegationDate: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventUndelegate is an event emitted when someone undelegates from a protocol node.
/// emitted_by: EndBlock
struct Kyve_Delegation_V1beta1_EventUndelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the account address of the delegator.
  var address: String = String()

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRedelegate is an event emitted when someone redelegates from one protocol node to another.
/// emitted_by: MsgRedelegate
struct Kyve_Delegation_V1beta1_EventRedelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the account address of the delegator.
  var address: String = String()

  /// from_staker ...
  var fromStaker: String = String()

  /// to_staker is the account address of the new staker in the the pool
  var toStaker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventWithdrawRewards ...
/// emitted_by: MsgRedelegate, MsgDelegate, MsgWithdrawRewards, EndBlock
struct Kyve_Delegation_V1beta1_EventWithdrawRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the account address of the delegator.
  var address: String = String()

  /// staker is the account address of the protocol node the users withdraws from.
  var staker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventSlash is an event emitted when a protocol node is slashed.
/// emitted_by: MsgSubmitBundleProposal, EndBlock
struct Kyve_Delegation_V1beta1_EventSlash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id is the unique ID of the pool.
  var poolID: UInt64 = 0

  /// staker is the account address of the protocol node.
  var staker: String = String()

  /// amount ...
  var amount: UInt64 = 0

  /// slash_type
  var slashType: Kyve_Delegation_V1beta1_SlashType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Delegation_V1beta1_EventUpdateParams: @unchecked Sendable {}
extension Kyve_Delegation_V1beta1_EventDelegate: @unchecked Sendable {}
extension Kyve_Delegation_V1beta1_EventStartUndelegation: @unchecked Sendable {}
extension Kyve_Delegation_V1beta1_EventUndelegate: @unchecked Sendable {}
extension Kyve_Delegation_V1beta1_EventRedelegate: @unchecked Sendable {}
extension Kyve_Delegation_V1beta1_EventWithdrawRewards: @unchecked Sendable {}
extension Kyve_Delegation_V1beta1_EventSlash: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.delegation.v1beta1"

extension Kyve_Delegation_V1beta1_EventUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "old_params"),
    2: .standard(proto: "new_params"),
    3: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._oldParams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._newParams) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._oldParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._newParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventUpdateParams, rhs: Kyve_Delegation_V1beta1_EventUpdateParams) -> Bool {
    if lhs._oldParams != rhs._oldParams {return false}
    if lhs._newParams != rhs._newParams {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Delegation_V1beta1_EventDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventDelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "staker"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventDelegate, rhs: Kyve_Delegation_V1beta1_EventDelegate) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Delegation_V1beta1_EventStartUndelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventStartUndelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "staker"),
    3: .same(proto: "amount"),
    4: .standard(proto: "estimated_undelegation_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.estimatedUndelegationDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if self.estimatedUndelegationDate != 0 {
      try visitor.visitSingularUInt64Field(value: self.estimatedUndelegationDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventStartUndelegation, rhs: Kyve_Delegation_V1beta1_EventStartUndelegation) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.estimatedUndelegationDate != rhs.estimatedUndelegationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Delegation_V1beta1_EventUndelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUndelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "staker"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventUndelegate, rhs: Kyve_Delegation_V1beta1_EventUndelegate) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Delegation_V1beta1_EventRedelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRedelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "from_staker"),
    3: .standard(proto: "to_staker"),
    4: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fromStaker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.toStaker) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.fromStaker.isEmpty {
      try visitor.visitSingularStringField(value: self.fromStaker, fieldNumber: 2)
    }
    if !self.toStaker.isEmpty {
      try visitor.visitSingularStringField(value: self.toStaker, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventRedelegate, rhs: Kyve_Delegation_V1beta1_EventRedelegate) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.fromStaker != rhs.fromStaker {return false}
    if lhs.toStaker != rhs.toStaker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Delegation_V1beta1_EventWithdrawRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventWithdrawRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "staker"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventWithdrawRewards, rhs: Kyve_Delegation_V1beta1_EventWithdrawRewards) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Delegation_V1beta1_EventSlash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventSlash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
    3: .same(proto: "amount"),
    4: .standard(proto: "slash_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.slashType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if self.slashType != .unspecified {
      try visitor.visitSingularEnumField(value: self.slashType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Delegation_V1beta1_EventSlash, rhs: Kyve_Delegation_V1beta1_EventSlash) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.slashType != rhs.slashType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
