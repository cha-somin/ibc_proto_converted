//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/incentive/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Umee_Incentive_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Umee_Incentive_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Umee_Incentive_V1_QueryParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryParams, Umee_Incentive_V1_QueryParamsResponse>

  func totalBonded(
    _ request: Umee_Incentive_V1_QueryTotalBonded,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryTotalBonded, Umee_Incentive_V1_QueryTotalBondedResponse>

  func totalUnbonding(
    _ request: Umee_Incentive_V1_QueryTotalUnbonding,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryTotalUnbonding, Umee_Incentive_V1_QueryTotalUnbondingResponse>

  func accountBonds(
    _ request: Umee_Incentive_V1_QueryAccountBonds,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryAccountBonds, Umee_Incentive_V1_QueryAccountBondsResponse>

  func pendingRewards(
    _ request: Umee_Incentive_V1_QueryPendingRewards,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryPendingRewards, Umee_Incentive_V1_QueryPendingRewardsResponse>

  func completedIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryCompletedIncentivePrograms,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryCompletedIncentivePrograms, Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>

  func ongoingIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryOngoingIncentivePrograms,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryOngoingIncentivePrograms, Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>

  func upcomingIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryUpcomingIncentivePrograms, Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>

  func incentiveProgram(
    _ request: Umee_Incentive_V1_QueryIncentiveProgram,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryIncentiveProgram, Umee_Incentive_V1_QueryIncentiveProgramResponse>

  func currentRates(
    _ request: Umee_Incentive_V1_QueryCurrentRates,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryCurrentRates, Umee_Incentive_V1_QueryCurrentRatesResponse>

  func actualRates(
    _ request: Umee_Incentive_V1_QueryActualRates,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryActualRates, Umee_Incentive_V1_QueryActualRatesResponse>

  func lastRewardTime(
    _ request: Umee_Incentive_V1_QueryLastRewardTime,
    callOptions: CallOptions?
  ) -> UnaryCall<Umee_Incentive_V1_QueryLastRewardTime, Umee_Incentive_V1_QueryLastRewardTimeResponse>
}

extension Umee_Incentive_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "umee.incentive.v1.Query"
  }

  /// Params queries the parameters of the x/incentive module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Umee_Incentive_V1_QueryParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryParams, Umee_Incentive_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// TotalBonded queries the sum of all bonded collateral uTokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalBonded.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalBonded(
    _ request: Umee_Incentive_V1_QueryTotalBonded,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryTotalBonded, Umee_Incentive_V1_QueryTotalBondedResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.totalBonded.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalBondedInterceptors() ?? []
    )
  }

  /// TotalUnbonding queries the sum of all unbonding collateral uTokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalUnbonding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalUnbonding(
    _ request: Umee_Incentive_V1_QueryTotalUnbonding,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryTotalUnbonding, Umee_Incentive_V1_QueryTotalUnbondingResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.totalUnbonding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalUnbondingInterceptors() ?? []
    )
  }

  /// AccountBonds queries all bonded collateral and unbondings associated with an account.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountBonds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountBonds(
    _ request: Umee_Incentive_V1_QueryAccountBonds,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryAccountBonds, Umee_Incentive_V1_QueryAccountBondsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.accountBonds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountBondsInterceptors() ?? []
    )
  }

  /// PendingRewards queries unclaimed incentive rewards associated with an account.
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pendingRewards(
    _ request: Umee_Incentive_V1_QueryPendingRewards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryPendingRewards, Umee_Incentive_V1_QueryPendingRewardsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.pendingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingRewardsInterceptors() ?? []
    )
  }

  /// CompletedIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, and either run to completion or expired immediately due to not being funded.
  ///
  /// - Parameters:
  ///   - request: Request to send to CompletedIncentivePrograms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func completedIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryCompletedIncentivePrograms,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryCompletedIncentivePrograms, Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.completedIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompletedIncentiveProgramsInterceptors() ?? []
    )
  }

  /// OngoingIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, funded, and started but not yet completed.
  ///
  /// - Parameters:
  ///   - request: Request to send to OngoingIncentivePrograms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ongoingIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryOngoingIncentivePrograms,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryOngoingIncentivePrograms, Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.ongoingIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOngoingIncentiveProgramsInterceptors() ?? []
    )
  }

  /// UpcomingIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, but not yet started. They may or may not have been funded.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpcomingIncentivePrograms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upcomingIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryUpcomingIncentivePrograms, Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.upcomingIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingIncentiveProgramsInterceptors() ?? []
    )
  }

  /// IncentiveProgram queries a single incentive program by ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentiveProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentiveProgram(
    _ request: Umee_Incentive_V1_QueryIncentiveProgram,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryIncentiveProgram, Umee_Incentive_V1_QueryIncentiveProgramResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.incentiveProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveProgramInterceptors() ?? []
    )
  }

  /// CurrentRates queries the hypothetical return of a bonded uToken denomination
  /// if current incentive rewards continued for one year. The response is an sdk.Coins
  /// of base token rewards, per reference amount (usually 10^exponent of the uToken.)
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentRates(
    _ request: Umee_Incentive_V1_QueryCurrentRates,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryCurrentRates, Umee_Incentive_V1_QueryCurrentRatesResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.currentRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentRatesInterceptors() ?? []
    )
  }

  /// ActualRates queries the hypothetical return of a bonded uToken denomination
  /// if current incentive rewards continued for one year. The response is an sdk.Dec
  /// representing an oracle-adjusted APY.
  ///
  /// - Parameters:
  ///   - request: Request to send to ActualRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func actualRates(
    _ request: Umee_Incentive_V1_QueryActualRates,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryActualRates, Umee_Incentive_V1_QueryActualRatesResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.actualRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActualRatesInterceptors() ?? []
    )
  }

  /// LastRewardTime queries the last block time at which incentive rewards were calculated.
  ///
  /// - Parameters:
  ///   - request: Request to send to LastRewardTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastRewardTime(
    _ request: Umee_Incentive_V1_QueryLastRewardTime,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umee_Incentive_V1_QueryLastRewardTime, Umee_Incentive_V1_QueryLastRewardTimeResponse> {
    return self.makeUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.lastRewardTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastRewardTimeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Umee_Incentive_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Umee_Incentive_V1_QueryNIOClient")
internal final class Umee_Incentive_V1_QueryClient: Umee_Incentive_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the umee.incentive.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Umee_Incentive_V1_QueryNIOClient: Umee_Incentive_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the umee.incentive.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Incentive_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Umee_Incentive_V1_QueryParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryParams, Umee_Incentive_V1_QueryParamsResponse>

  func makeTotalBondedCall(
    _ request: Umee_Incentive_V1_QueryTotalBonded,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryTotalBonded, Umee_Incentive_V1_QueryTotalBondedResponse>

  func makeTotalUnbondingCall(
    _ request: Umee_Incentive_V1_QueryTotalUnbonding,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryTotalUnbonding, Umee_Incentive_V1_QueryTotalUnbondingResponse>

  func makeAccountBondsCall(
    _ request: Umee_Incentive_V1_QueryAccountBonds,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryAccountBonds, Umee_Incentive_V1_QueryAccountBondsResponse>

  func makePendingRewardsCall(
    _ request: Umee_Incentive_V1_QueryPendingRewards,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryPendingRewards, Umee_Incentive_V1_QueryPendingRewardsResponse>

  func makeCompletedIncentiveProgramsCall(
    _ request: Umee_Incentive_V1_QueryCompletedIncentivePrograms,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryCompletedIncentivePrograms, Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>

  func makeOngoingIncentiveProgramsCall(
    _ request: Umee_Incentive_V1_QueryOngoingIncentivePrograms,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryOngoingIncentivePrograms, Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>

  func makeUpcomingIncentiveProgramsCall(
    _ request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryUpcomingIncentivePrograms, Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>

  func makeIncentiveProgramCall(
    _ request: Umee_Incentive_V1_QueryIncentiveProgram,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryIncentiveProgram, Umee_Incentive_V1_QueryIncentiveProgramResponse>

  func makeCurrentRatesCall(
    _ request: Umee_Incentive_V1_QueryCurrentRates,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryCurrentRates, Umee_Incentive_V1_QueryCurrentRatesResponse>

  func makeActualRatesCall(
    _ request: Umee_Incentive_V1_QueryActualRates,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryActualRates, Umee_Incentive_V1_QueryActualRatesResponse>

  func makeLastRewardTimeCall(
    _ request: Umee_Incentive_V1_QueryLastRewardTime,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryLastRewardTime, Umee_Incentive_V1_QueryLastRewardTimeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Incentive_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Incentive_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Umee_Incentive_V1_QueryParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryParams, Umee_Incentive_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeTotalBondedCall(
    _ request: Umee_Incentive_V1_QueryTotalBonded,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryTotalBonded, Umee_Incentive_V1_QueryTotalBondedResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.totalBonded.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalBondedInterceptors() ?? []
    )
  }

  internal func makeTotalUnbondingCall(
    _ request: Umee_Incentive_V1_QueryTotalUnbonding,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryTotalUnbonding, Umee_Incentive_V1_QueryTotalUnbondingResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.totalUnbonding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalUnbondingInterceptors() ?? []
    )
  }

  internal func makeAccountBondsCall(
    _ request: Umee_Incentive_V1_QueryAccountBonds,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryAccountBonds, Umee_Incentive_V1_QueryAccountBondsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.accountBonds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountBondsInterceptors() ?? []
    )
  }

  internal func makePendingRewardsCall(
    _ request: Umee_Incentive_V1_QueryPendingRewards,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryPendingRewards, Umee_Incentive_V1_QueryPendingRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.pendingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingRewardsInterceptors() ?? []
    )
  }

  internal func makeCompletedIncentiveProgramsCall(
    _ request: Umee_Incentive_V1_QueryCompletedIncentivePrograms,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryCompletedIncentivePrograms, Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.completedIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompletedIncentiveProgramsInterceptors() ?? []
    )
  }

  internal func makeOngoingIncentiveProgramsCall(
    _ request: Umee_Incentive_V1_QueryOngoingIncentivePrograms,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryOngoingIncentivePrograms, Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.ongoingIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOngoingIncentiveProgramsInterceptors() ?? []
    )
  }

  internal func makeUpcomingIncentiveProgramsCall(
    _ request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryUpcomingIncentivePrograms, Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.upcomingIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingIncentiveProgramsInterceptors() ?? []
    )
  }

  internal func makeIncentiveProgramCall(
    _ request: Umee_Incentive_V1_QueryIncentiveProgram,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryIncentiveProgram, Umee_Incentive_V1_QueryIncentiveProgramResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.incentiveProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveProgramInterceptors() ?? []
    )
  }

  internal func makeCurrentRatesCall(
    _ request: Umee_Incentive_V1_QueryCurrentRates,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryCurrentRates, Umee_Incentive_V1_QueryCurrentRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.currentRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentRatesInterceptors() ?? []
    )
  }

  internal func makeActualRatesCall(
    _ request: Umee_Incentive_V1_QueryActualRates,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryActualRates, Umee_Incentive_V1_QueryActualRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.actualRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActualRatesInterceptors() ?? []
    )
  }

  internal func makeLastRewardTimeCall(
    _ request: Umee_Incentive_V1_QueryLastRewardTime,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Umee_Incentive_V1_QueryLastRewardTime, Umee_Incentive_V1_QueryLastRewardTimeResponse> {
    return self.makeAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.lastRewardTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastRewardTimeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Incentive_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Umee_Incentive_V1_QueryParams,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func totalBonded(
    _ request: Umee_Incentive_V1_QueryTotalBonded,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryTotalBondedResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.totalBonded.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalBondedInterceptors() ?? []
    )
  }

  internal func totalUnbonding(
    _ request: Umee_Incentive_V1_QueryTotalUnbonding,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryTotalUnbondingResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.totalUnbonding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalUnbondingInterceptors() ?? []
    )
  }

  internal func accountBonds(
    _ request: Umee_Incentive_V1_QueryAccountBonds,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryAccountBondsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.accountBonds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountBondsInterceptors() ?? []
    )
  }

  internal func pendingRewards(
    _ request: Umee_Incentive_V1_QueryPendingRewards,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryPendingRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.pendingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingRewardsInterceptors() ?? []
    )
  }

  internal func completedIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryCompletedIncentivePrograms,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.completedIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompletedIncentiveProgramsInterceptors() ?? []
    )
  }

  internal func ongoingIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryOngoingIncentivePrograms,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.ongoingIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOngoingIncentiveProgramsInterceptors() ?? []
    )
  }

  internal func upcomingIncentivePrograms(
    _ request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.upcomingIncentivePrograms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingIncentiveProgramsInterceptors() ?? []
    )
  }

  internal func incentiveProgram(
    _ request: Umee_Incentive_V1_QueryIncentiveProgram,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryIncentiveProgramResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.incentiveProgram.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveProgramInterceptors() ?? []
    )
  }

  internal func currentRates(
    _ request: Umee_Incentive_V1_QueryCurrentRates,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryCurrentRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.currentRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentRatesInterceptors() ?? []
    )
  }

  internal func actualRates(
    _ request: Umee_Incentive_V1_QueryActualRates,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryActualRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.actualRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActualRatesInterceptors() ?? []
    )
  }

  internal func lastRewardTime(
    _ request: Umee_Incentive_V1_QueryLastRewardTime,
    callOptions: CallOptions? = nil
  ) async throws -> Umee_Incentive_V1_QueryLastRewardTimeResponse {
    return try await self.performAsyncUnaryCall(
      path: Umee_Incentive_V1_QueryClientMetadata.Methods.lastRewardTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastRewardTimeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Umee_Incentive_V1_QueryAsyncClient: Umee_Incentive_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Umee_Incentive_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryParams, Umee_Incentive_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalBonded'.
  func makeTotalBondedInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryTotalBonded, Umee_Incentive_V1_QueryTotalBondedResponse>]

  /// - Returns: Interceptors to use when invoking 'totalUnbonding'.
  func makeTotalUnbondingInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryTotalUnbonding, Umee_Incentive_V1_QueryTotalUnbondingResponse>]

  /// - Returns: Interceptors to use when invoking 'accountBonds'.
  func makeAccountBondsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryAccountBonds, Umee_Incentive_V1_QueryAccountBondsResponse>]

  /// - Returns: Interceptors to use when invoking 'pendingRewards'.
  func makePendingRewardsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryPendingRewards, Umee_Incentive_V1_QueryPendingRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'completedIncentivePrograms'.
  func makeCompletedIncentiveProgramsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryCompletedIncentivePrograms, Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>]

  /// - Returns: Interceptors to use when invoking 'ongoingIncentivePrograms'.
  func makeOngoingIncentiveProgramsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryOngoingIncentivePrograms, Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>]

  /// - Returns: Interceptors to use when invoking 'upcomingIncentivePrograms'.
  func makeUpcomingIncentiveProgramsInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryUpcomingIncentivePrograms, Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>]

  /// - Returns: Interceptors to use when invoking 'incentiveProgram'.
  func makeIncentiveProgramInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryIncentiveProgram, Umee_Incentive_V1_QueryIncentiveProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'currentRates'.
  func makeCurrentRatesInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryCurrentRates, Umee_Incentive_V1_QueryCurrentRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'actualRates'.
  func makeActualRatesInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryActualRates, Umee_Incentive_V1_QueryActualRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'lastRewardTime'.
  func makeLastRewardTimeInterceptors() -> [ClientInterceptor<Umee_Incentive_V1_QueryLastRewardTime, Umee_Incentive_V1_QueryLastRewardTimeResponse>]
}

internal enum Umee_Incentive_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "umee.incentive.v1.Query",
    methods: [
      Umee_Incentive_V1_QueryClientMetadata.Methods.params,
      Umee_Incentive_V1_QueryClientMetadata.Methods.totalBonded,
      Umee_Incentive_V1_QueryClientMetadata.Methods.totalUnbonding,
      Umee_Incentive_V1_QueryClientMetadata.Methods.accountBonds,
      Umee_Incentive_V1_QueryClientMetadata.Methods.pendingRewards,
      Umee_Incentive_V1_QueryClientMetadata.Methods.completedIncentivePrograms,
      Umee_Incentive_V1_QueryClientMetadata.Methods.ongoingIncentivePrograms,
      Umee_Incentive_V1_QueryClientMetadata.Methods.upcomingIncentivePrograms,
      Umee_Incentive_V1_QueryClientMetadata.Methods.incentiveProgram,
      Umee_Incentive_V1_QueryClientMetadata.Methods.currentRates,
      Umee_Incentive_V1_QueryClientMetadata.Methods.actualRates,
      Umee_Incentive_V1_QueryClientMetadata.Methods.lastRewardTime,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/umee.incentive.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let totalBonded = GRPCMethodDescriptor(
      name: "TotalBonded",
      path: "/umee.incentive.v1.Query/TotalBonded",
      type: GRPCCallType.unary
    )

    internal static let totalUnbonding = GRPCMethodDescriptor(
      name: "TotalUnbonding",
      path: "/umee.incentive.v1.Query/TotalUnbonding",
      type: GRPCCallType.unary
    )

    internal static let accountBonds = GRPCMethodDescriptor(
      name: "AccountBonds",
      path: "/umee.incentive.v1.Query/AccountBonds",
      type: GRPCCallType.unary
    )

    internal static let pendingRewards = GRPCMethodDescriptor(
      name: "PendingRewards",
      path: "/umee.incentive.v1.Query/PendingRewards",
      type: GRPCCallType.unary
    )

    internal static let completedIncentivePrograms = GRPCMethodDescriptor(
      name: "CompletedIncentivePrograms",
      path: "/umee.incentive.v1.Query/CompletedIncentivePrograms",
      type: GRPCCallType.unary
    )

    internal static let ongoingIncentivePrograms = GRPCMethodDescriptor(
      name: "OngoingIncentivePrograms",
      path: "/umee.incentive.v1.Query/OngoingIncentivePrograms",
      type: GRPCCallType.unary
    )

    internal static let upcomingIncentivePrograms = GRPCMethodDescriptor(
      name: "UpcomingIncentivePrograms",
      path: "/umee.incentive.v1.Query/UpcomingIncentivePrograms",
      type: GRPCCallType.unary
    )

    internal static let incentiveProgram = GRPCMethodDescriptor(
      name: "IncentiveProgram",
      path: "/umee.incentive.v1.Query/IncentiveProgram",
      type: GRPCCallType.unary
    )

    internal static let currentRates = GRPCMethodDescriptor(
      name: "CurrentRates",
      path: "/umee.incentive.v1.Query/CurrentRates",
      type: GRPCCallType.unary
    )

    internal static let actualRates = GRPCMethodDescriptor(
      name: "ActualRates",
      path: "/umee.incentive.v1.Query/ActualRates",
      type: GRPCCallType.unary
    )

    internal static let lastRewardTime = GRPCMethodDescriptor(
      name: "LastRewardTime",
      path: "/umee.incentive.v1.Query/LastRewardTime",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umee_Incentive_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Umee_Incentive_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the x/incentive module.
  func params(request: Umee_Incentive_V1_QueryParams, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryParamsResponse>

  /// TotalBonded queries the sum of all bonded collateral uTokens.
  func totalBonded(request: Umee_Incentive_V1_QueryTotalBonded, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryTotalBondedResponse>

  /// TotalUnbonding queries the sum of all unbonding collateral uTokens.
  func totalUnbonding(request: Umee_Incentive_V1_QueryTotalUnbonding, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryTotalUnbondingResponse>

  /// AccountBonds queries all bonded collateral and unbondings associated with an account.
  func accountBonds(request: Umee_Incentive_V1_QueryAccountBonds, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryAccountBondsResponse>

  /// PendingRewards queries unclaimed incentive rewards associated with an account.
  func pendingRewards(request: Umee_Incentive_V1_QueryPendingRewards, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryPendingRewardsResponse>

  /// CompletedIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, and either run to completion or expired immediately due to not being funded.
  func completedIncentivePrograms(request: Umee_Incentive_V1_QueryCompletedIncentivePrograms, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>

  /// OngoingIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, funded, and started but not yet completed.
  func ongoingIncentivePrograms(request: Umee_Incentive_V1_QueryOngoingIncentivePrograms, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>

  /// UpcomingIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, but not yet started. They may or may not have been funded.
  func upcomingIncentivePrograms(request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>

  /// IncentiveProgram queries a single incentive program by ID.
  func incentiveProgram(request: Umee_Incentive_V1_QueryIncentiveProgram, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryIncentiveProgramResponse>

  /// CurrentRates queries the hypothetical return of a bonded uToken denomination
  /// if current incentive rewards continued for one year. The response is an sdk.Coins
  /// of base token rewards, per reference amount (usually 10^exponent of the uToken.)
  func currentRates(request: Umee_Incentive_V1_QueryCurrentRates, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryCurrentRatesResponse>

  /// ActualRates queries the hypothetical return of a bonded uToken denomination
  /// if current incentive rewards continued for one year. The response is an sdk.Dec
  /// representing an oracle-adjusted APY.
  func actualRates(request: Umee_Incentive_V1_QueryActualRates, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryActualRatesResponse>

  /// LastRewardTime queries the last block time at which incentive rewards were calculated.
  func lastRewardTime(request: Umee_Incentive_V1_QueryLastRewardTime, context: StatusOnlyCallContext) -> EventLoopFuture<Umee_Incentive_V1_QueryLastRewardTimeResponse>
}

extension Umee_Incentive_V1_QueryProvider {
  internal var serviceName: Substring {
    return Umee_Incentive_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryParams>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "TotalBonded":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryTotalBonded>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryTotalBondedResponse>(),
        interceptors: self.interceptors?.makeTotalBondedInterceptors() ?? [],
        userFunction: self.totalBonded(request:context:)
      )

    case "TotalUnbonding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryTotalUnbonding>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryTotalUnbondingResponse>(),
        interceptors: self.interceptors?.makeTotalUnbondingInterceptors() ?? [],
        userFunction: self.totalUnbonding(request:context:)
      )

    case "AccountBonds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryAccountBonds>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryAccountBondsResponse>(),
        interceptors: self.interceptors?.makeAccountBondsInterceptors() ?? [],
        userFunction: self.accountBonds(request:context:)
      )

    case "PendingRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryPendingRewards>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryPendingRewardsResponse>(),
        interceptors: self.interceptors?.makePendingRewardsInterceptors() ?? [],
        userFunction: self.pendingRewards(request:context:)
      )

    case "CompletedIncentivePrograms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryCompletedIncentivePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>(),
        interceptors: self.interceptors?.makeCompletedIncentiveProgramsInterceptors() ?? [],
        userFunction: self.completedIncentivePrograms(request:context:)
      )

    case "OngoingIncentivePrograms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryOngoingIncentivePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>(),
        interceptors: self.interceptors?.makeOngoingIncentiveProgramsInterceptors() ?? [],
        userFunction: self.ongoingIncentivePrograms(request:context:)
      )

    case "UpcomingIncentivePrograms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryUpcomingIncentivePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>(),
        interceptors: self.interceptors?.makeUpcomingIncentiveProgramsInterceptors() ?? [],
        userFunction: self.upcomingIncentivePrograms(request:context:)
      )

    case "IncentiveProgram":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryIncentiveProgram>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryIncentiveProgramResponse>(),
        interceptors: self.interceptors?.makeIncentiveProgramInterceptors() ?? [],
        userFunction: self.incentiveProgram(request:context:)
      )

    case "CurrentRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryCurrentRates>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryCurrentRatesResponse>(),
        interceptors: self.interceptors?.makeCurrentRatesInterceptors() ?? [],
        userFunction: self.currentRates(request:context:)
      )

    case "ActualRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryActualRates>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryActualRatesResponse>(),
        interceptors: self.interceptors?.makeActualRatesInterceptors() ?? [],
        userFunction: self.actualRates(request:context:)
      )

    case "LastRewardTime":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryLastRewardTime>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryLastRewardTimeResponse>(),
        interceptors: self.interceptors?.makeLastRewardTimeInterceptors() ?? [],
        userFunction: self.lastRewardTime(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Umee_Incentive_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Umee_Incentive_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the x/incentive module.
  @Sendable func params(
    request: Umee_Incentive_V1_QueryParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryParamsResponse

  /// TotalBonded queries the sum of all bonded collateral uTokens.
  @Sendable func totalBonded(
    request: Umee_Incentive_V1_QueryTotalBonded,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryTotalBondedResponse

  /// TotalUnbonding queries the sum of all unbonding collateral uTokens.
  @Sendable func totalUnbonding(
    request: Umee_Incentive_V1_QueryTotalUnbonding,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryTotalUnbondingResponse

  /// AccountBonds queries all bonded collateral and unbondings associated with an account.
  @Sendable func accountBonds(
    request: Umee_Incentive_V1_QueryAccountBonds,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryAccountBondsResponse

  /// PendingRewards queries unclaimed incentive rewards associated with an account.
  @Sendable func pendingRewards(
    request: Umee_Incentive_V1_QueryPendingRewards,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryPendingRewardsResponse

  /// CompletedIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, and either run to completion or expired immediately due to not being funded.
  @Sendable func completedIncentivePrograms(
    request: Umee_Incentive_V1_QueryCompletedIncentivePrograms,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse

  /// OngoingIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, funded, and started but not yet completed.
  @Sendable func ongoingIncentivePrograms(
    request: Umee_Incentive_V1_QueryOngoingIncentivePrograms,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse

  /// UpcomingIncentivePrograms queries for all incentives programs that have been passed
  /// by governance, but not yet started. They may or may not have been funded.
  @Sendable func upcomingIncentivePrograms(
    request: Umee_Incentive_V1_QueryUpcomingIncentivePrograms,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse

  /// IncentiveProgram queries a single incentive program by ID.
  @Sendable func incentiveProgram(
    request: Umee_Incentive_V1_QueryIncentiveProgram,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryIncentiveProgramResponse

  /// CurrentRates queries the hypothetical return of a bonded uToken denomination
  /// if current incentive rewards continued for one year. The response is an sdk.Coins
  /// of base token rewards, per reference amount (usually 10^exponent of the uToken.)
  @Sendable func currentRates(
    request: Umee_Incentive_V1_QueryCurrentRates,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryCurrentRatesResponse

  /// ActualRates queries the hypothetical return of a bonded uToken denomination
  /// if current incentive rewards continued for one year. The response is an sdk.Dec
  /// representing an oracle-adjusted APY.
  @Sendable func actualRates(
    request: Umee_Incentive_V1_QueryActualRates,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryActualRatesResponse

  /// LastRewardTime queries the last block time at which incentive rewards were calculated.
  @Sendable func lastRewardTime(
    request: Umee_Incentive_V1_QueryLastRewardTime,
    context: GRPCAsyncServerCallContext
  ) async throws -> Umee_Incentive_V1_QueryLastRewardTimeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Umee_Incentive_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Umee_Incentive_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Umee_Incentive_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Umee_Incentive_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryParams>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "TotalBonded":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryTotalBonded>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryTotalBondedResponse>(),
        interceptors: self.interceptors?.makeTotalBondedInterceptors() ?? [],
        wrapping: self.totalBonded(request:context:)
      )

    case "TotalUnbonding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryTotalUnbonding>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryTotalUnbondingResponse>(),
        interceptors: self.interceptors?.makeTotalUnbondingInterceptors() ?? [],
        wrapping: self.totalUnbonding(request:context:)
      )

    case "AccountBonds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryAccountBonds>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryAccountBondsResponse>(),
        interceptors: self.interceptors?.makeAccountBondsInterceptors() ?? [],
        wrapping: self.accountBonds(request:context:)
      )

    case "PendingRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryPendingRewards>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryPendingRewardsResponse>(),
        interceptors: self.interceptors?.makePendingRewardsInterceptors() ?? [],
        wrapping: self.pendingRewards(request:context:)
      )

    case "CompletedIncentivePrograms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryCompletedIncentivePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>(),
        interceptors: self.interceptors?.makeCompletedIncentiveProgramsInterceptors() ?? [],
        wrapping: self.completedIncentivePrograms(request:context:)
      )

    case "OngoingIncentivePrograms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryOngoingIncentivePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>(),
        interceptors: self.interceptors?.makeOngoingIncentiveProgramsInterceptors() ?? [],
        wrapping: self.ongoingIncentivePrograms(request:context:)
      )

    case "UpcomingIncentivePrograms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryUpcomingIncentivePrograms>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>(),
        interceptors: self.interceptors?.makeUpcomingIncentiveProgramsInterceptors() ?? [],
        wrapping: self.upcomingIncentivePrograms(request:context:)
      )

    case "IncentiveProgram":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryIncentiveProgram>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryIncentiveProgramResponse>(),
        interceptors: self.interceptors?.makeIncentiveProgramInterceptors() ?? [],
        wrapping: self.incentiveProgram(request:context:)
      )

    case "CurrentRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryCurrentRates>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryCurrentRatesResponse>(),
        interceptors: self.interceptors?.makeCurrentRatesInterceptors() ?? [],
        wrapping: self.currentRates(request:context:)
      )

    case "ActualRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryActualRates>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryActualRatesResponse>(),
        interceptors: self.interceptors?.makeActualRatesInterceptors() ?? [],
        wrapping: self.actualRates(request:context:)
      )

    case "LastRewardTime":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umee_Incentive_V1_QueryLastRewardTime>(),
        responseSerializer: ProtobufSerializer<Umee_Incentive_V1_QueryLastRewardTimeResponse>(),
        interceptors: self.interceptors?.makeLastRewardTimeInterceptors() ?? [],
        wrapping: self.lastRewardTime(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umee_Incentive_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryParams, Umee_Incentive_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'totalBonded'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalBondedInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryTotalBonded, Umee_Incentive_V1_QueryTotalBondedResponse>]

  /// - Returns: Interceptors to use when handling 'totalUnbonding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalUnbondingInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryTotalUnbonding, Umee_Incentive_V1_QueryTotalUnbondingResponse>]

  /// - Returns: Interceptors to use when handling 'accountBonds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountBondsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryAccountBonds, Umee_Incentive_V1_QueryAccountBondsResponse>]

  /// - Returns: Interceptors to use when handling 'pendingRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePendingRewardsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryPendingRewards, Umee_Incentive_V1_QueryPendingRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'completedIncentivePrograms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCompletedIncentiveProgramsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryCompletedIncentivePrograms, Umee_Incentive_V1_QueryCompletedIncentiveProgramsResponse>]

  /// - Returns: Interceptors to use when handling 'ongoingIncentivePrograms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOngoingIncentiveProgramsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryOngoingIncentivePrograms, Umee_Incentive_V1_QueryOngoingIncentiveProgramsResponse>]

  /// - Returns: Interceptors to use when handling 'upcomingIncentivePrograms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpcomingIncentiveProgramsInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryUpcomingIncentivePrograms, Umee_Incentive_V1_QueryUpcomingIncentiveProgramsResponse>]

  /// - Returns: Interceptors to use when handling 'incentiveProgram'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentiveProgramInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryIncentiveProgram, Umee_Incentive_V1_QueryIncentiveProgramResponse>]

  /// - Returns: Interceptors to use when handling 'currentRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentRatesInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryCurrentRates, Umee_Incentive_V1_QueryCurrentRatesResponse>]

  /// - Returns: Interceptors to use when handling 'actualRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActualRatesInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryActualRates, Umee_Incentive_V1_QueryActualRatesResponse>]

  /// - Returns: Interceptors to use when handling 'lastRewardTime'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastRewardTimeInterceptors() -> [ServerInterceptor<Umee_Incentive_V1_QueryLastRewardTime, Umee_Incentive_V1_QueryLastRewardTimeResponse>]
}

internal enum Umee_Incentive_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "umee.incentive.v1.Query",
    methods: [
      Umee_Incentive_V1_QueryServerMetadata.Methods.params,
      Umee_Incentive_V1_QueryServerMetadata.Methods.totalBonded,
      Umee_Incentive_V1_QueryServerMetadata.Methods.totalUnbonding,
      Umee_Incentive_V1_QueryServerMetadata.Methods.accountBonds,
      Umee_Incentive_V1_QueryServerMetadata.Methods.pendingRewards,
      Umee_Incentive_V1_QueryServerMetadata.Methods.completedIncentivePrograms,
      Umee_Incentive_V1_QueryServerMetadata.Methods.ongoingIncentivePrograms,
      Umee_Incentive_V1_QueryServerMetadata.Methods.upcomingIncentivePrograms,
      Umee_Incentive_V1_QueryServerMetadata.Methods.incentiveProgram,
      Umee_Incentive_V1_QueryServerMetadata.Methods.currentRates,
      Umee_Incentive_V1_QueryServerMetadata.Methods.actualRates,
      Umee_Incentive_V1_QueryServerMetadata.Methods.lastRewardTime,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/umee.incentive.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let totalBonded = GRPCMethodDescriptor(
      name: "TotalBonded",
      path: "/umee.incentive.v1.Query/TotalBonded",
      type: GRPCCallType.unary
    )

    internal static let totalUnbonding = GRPCMethodDescriptor(
      name: "TotalUnbonding",
      path: "/umee.incentive.v1.Query/TotalUnbonding",
      type: GRPCCallType.unary
    )

    internal static let accountBonds = GRPCMethodDescriptor(
      name: "AccountBonds",
      path: "/umee.incentive.v1.Query/AccountBonds",
      type: GRPCCallType.unary
    )

    internal static let pendingRewards = GRPCMethodDescriptor(
      name: "PendingRewards",
      path: "/umee.incentive.v1.Query/PendingRewards",
      type: GRPCCallType.unary
    )

    internal static let completedIncentivePrograms = GRPCMethodDescriptor(
      name: "CompletedIncentivePrograms",
      path: "/umee.incentive.v1.Query/CompletedIncentivePrograms",
      type: GRPCCallType.unary
    )

    internal static let ongoingIncentivePrograms = GRPCMethodDescriptor(
      name: "OngoingIncentivePrograms",
      path: "/umee.incentive.v1.Query/OngoingIncentivePrograms",
      type: GRPCCallType.unary
    )

    internal static let upcomingIncentivePrograms = GRPCMethodDescriptor(
      name: "UpcomingIncentivePrograms",
      path: "/umee.incentive.v1.Query/UpcomingIncentivePrograms",
      type: GRPCCallType.unary
    )

    internal static let incentiveProgram = GRPCMethodDescriptor(
      name: "IncentiveProgram",
      path: "/umee.incentive.v1.Query/IncentiveProgram",
      type: GRPCCallType.unary
    )

    internal static let currentRates = GRPCMethodDescriptor(
      name: "CurrentRates",
      path: "/umee.incentive.v1.Query/CurrentRates",
      type: GRPCCallType.unary
    )

    internal static let actualRates = GRPCMethodDescriptor(
      name: "ActualRates",
      path: "/umee.incentive.v1.Query/ActualRates",
      type: GRPCCallType.unary
    )

    internal static let lastRewardTime = GRPCMethodDescriptor(
      name: "LastRewardTime",
      path: "/umee.incentive.v1.Query/LastRewardTime",
      type: GRPCCallType.unary
    )
  }
}
