// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/liquidation/v1beta1/locked_vault.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Liquidation_V1beta1_LockedVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var appID: UInt64 {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var originalVaultID: UInt64 {
    get {return _storage._originalVaultID}
    set {_uniqueStorage()._originalVaultID = newValue}
  }

  var extendedPairVaultID: UInt64 {
    get {return _storage._extendedPairVaultID}
    set {_uniqueStorage()._extendedPairVaultID = newValue}
  }

  var owner: String {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  var amountIn: String {
    get {return _storage._amountIn}
    set {_uniqueStorage()._amountIn = newValue}
  }

  var amountOut: String {
    get {return _storage._amountOut}
    set {_uniqueStorage()._amountOut = newValue}
  }

  ///updated_amount_out = amount_out + interest_accumulated + opening_fee_accumulated
  /// + closing_fee_accumulated
  var updatedAmountOut: String {
    get {return _storage._updatedAmountOut}
    set {_uniqueStorage()._updatedAmountOut = newValue}
  }

  var initiator: String {
    get {return _storage._initiator}
    set {_uniqueStorage()._initiator = newValue}
  }

  var isAuctionComplete: Bool {
    get {return _storage._isAuctionComplete}
    set {_uniqueStorage()._isAuctionComplete = newValue}
  }

  var isAuctionInProgress: Bool {
    get {return _storage._isAuctionInProgress}
    set {_uniqueStorage()._isAuctionInProgress = newValue}
  }

  var crAtLiquidation: String {
    get {return _storage._crAtLiquidation}
    set {_uniqueStorage()._crAtLiquidation = newValue}
  }

  var currentCollateralisationRatio: String {
    get {return _storage._currentCollateralisationRatio}
    set {_uniqueStorage()._currentCollateralisationRatio = newValue}
  }

  var collateralToBeAuctioned: String {
    get {return _storage._collateralToBeAuctioned}
    set {_uniqueStorage()._collateralToBeAuctioned = newValue}
  }

  var liquidationTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._liquidationTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._liquidationTimestamp = newValue}
  }
  /// Returns true if `liquidationTimestamp` has been explicitly set.
  var hasLiquidationTimestamp: Bool {return _storage._liquidationTimestamp != nil}
  /// Clears the value of `liquidationTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearLiquidationTimestamp() {_uniqueStorage()._liquidationTimestamp = nil}

  var selloffHistory: [String] {
    get {return _storage._selloffHistory}
    set {_uniqueStorage()._selloffHistory = newValue}
  }

  var interestAccumulated: String {
    get {return _storage._interestAccumulated}
    set {_uniqueStorage()._interestAccumulated = newValue}
  }

  var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  var borrowMetaData: Comdex_Liquidation_V1beta1_BorrowMetaData {
    get {
      if case .borrowMetaData(let v)? = _storage._kind {return v}
      return Comdex_Liquidation_V1beta1_BorrowMetaData()
    }
    set {_uniqueStorage()._kind = .borrowMetaData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Kind: Equatable {
    case borrowMetaData(Comdex_Liquidation_V1beta1_BorrowMetaData)

  #if !swift(>=4.1)
    static func ==(lhs: Comdex_Liquidation_V1beta1_LockedVault.OneOf_Kind, rhs: Comdex_Liquidation_V1beta1_LockedVault.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.borrowMetaData, .borrowMetaData): return {
        guard case .borrowMetaData(let l) = lhs, case .borrowMetaData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Comdex_Liquidation_V1beta1_BorrowMetaData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lendingID: UInt64 = 0

  var isStableBorrow: Bool = false

  var stableBorrowRate: String = String()

  var bridgedAssetAmount: Cosmos_Base_V1beta1_Coin {
    get {return _bridgedAssetAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_bridgedAssetAmount = newValue}
  }
  /// Returns true if `bridgedAssetAmount` has been explicitly set.
  var hasBridgedAssetAmount: Bool {return self._bridgedAssetAmount != nil}
  /// Clears the value of `bridgedAssetAmount`. Subsequent reads from it will return its default value.
  mutating func clearBridgedAssetAmount() {self._bridgedAssetAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bridgedAssetAmount: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Liquidation_V1beta1_LockedVault: @unchecked Sendable {}
extension Comdex_Liquidation_V1beta1_LockedVault.OneOf_Kind: @unchecked Sendable {}
extension Comdex_Liquidation_V1beta1_BorrowMetaData: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.liquidation.v1beta1"

extension Comdex_Liquidation_V1beta1_LockedVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LockedVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "original_vault_id"),
    4: .standard(proto: "extended_pair_vault_id"),
    5: .same(proto: "owner"),
    6: .standard(proto: "amount_in"),
    7: .standard(proto: "amount_out"),
    8: .standard(proto: "updated_amount_out"),
    9: .same(proto: "initiator"),
    10: .standard(proto: "is_auction_complete"),
    11: .standard(proto: "is_auction_in_progress"),
    12: .standard(proto: "cr_at_liquidation"),
    13: .standard(proto: "current_collateralisation_ratio"),
    14: .standard(proto: "collateral_to_be_auctioned"),
    15: .standard(proto: "liquidation_timestamp"),
    16: .standard(proto: "selloff_history"),
    17: .standard(proto: "interest_accumulated"),
    18: .standard(proto: "borrow_meta_data"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _appID: UInt64 = 0
    var _originalVaultID: UInt64 = 0
    var _extendedPairVaultID: UInt64 = 0
    var _owner: String = String()
    var _amountIn: String = String()
    var _amountOut: String = String()
    var _updatedAmountOut: String = String()
    var _initiator: String = String()
    var _isAuctionComplete: Bool = false
    var _isAuctionInProgress: Bool = false
    var _crAtLiquidation: String = String()
    var _currentCollateralisationRatio: String = String()
    var _collateralToBeAuctioned: String = String()
    var _liquidationTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _selloffHistory: [String] = []
    var _interestAccumulated: String = String()
    var _kind: Comdex_Liquidation_V1beta1_LockedVault.OneOf_Kind?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _appID = source._appID
      _originalVaultID = source._originalVaultID
      _extendedPairVaultID = source._extendedPairVaultID
      _owner = source._owner
      _amountIn = source._amountIn
      _amountOut = source._amountOut
      _updatedAmountOut = source._updatedAmountOut
      _initiator = source._initiator
      _isAuctionComplete = source._isAuctionComplete
      _isAuctionInProgress = source._isAuctionInProgress
      _crAtLiquidation = source._crAtLiquidation
      _currentCollateralisationRatio = source._currentCollateralisationRatio
      _collateralToBeAuctioned = source._collateralToBeAuctioned
      _liquidationTimestamp = source._liquidationTimestamp
      _selloffHistory = source._selloffHistory
      _interestAccumulated = source._interestAccumulated
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._appID) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._originalVaultID) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._extendedPairVaultID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._owner) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._amountIn) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._amountOut) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._updatedAmountOut) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._initiator) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isAuctionComplete) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isAuctionInProgress) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._crAtLiquidation) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._currentCollateralisationRatio) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._collateralToBeAuctioned) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._liquidationTimestamp) }()
        case 16: try { try decoder.decodeRepeatedStringField(value: &_storage._selloffHistory) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._interestAccumulated) }()
        case 18: try {
          var v: Comdex_Liquidation_V1beta1_BorrowMetaData?
          var hadOneofValue = false
          if let current = _storage._kind {
            hadOneofValue = true
            if case .borrowMetaData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._kind = .borrowMetaData(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._appID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._appID, fieldNumber: 2)
      }
      if _storage._originalVaultID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._originalVaultID, fieldNumber: 3)
      }
      if _storage._extendedPairVaultID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._extendedPairVaultID, fieldNumber: 4)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 5)
      }
      if !_storage._amountIn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._amountIn, fieldNumber: 6)
      }
      if !_storage._amountOut.isEmpty {
        try visitor.visitSingularStringField(value: _storage._amountOut, fieldNumber: 7)
      }
      if !_storage._updatedAmountOut.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updatedAmountOut, fieldNumber: 8)
      }
      if !_storage._initiator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._initiator, fieldNumber: 9)
      }
      if _storage._isAuctionComplete != false {
        try visitor.visitSingularBoolField(value: _storage._isAuctionComplete, fieldNumber: 10)
      }
      if _storage._isAuctionInProgress != false {
        try visitor.visitSingularBoolField(value: _storage._isAuctionInProgress, fieldNumber: 11)
      }
      if !_storage._crAtLiquidation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._crAtLiquidation, fieldNumber: 12)
      }
      if !_storage._currentCollateralisationRatio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currentCollateralisationRatio, fieldNumber: 13)
      }
      if !_storage._collateralToBeAuctioned.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collateralToBeAuctioned, fieldNumber: 14)
      }
      try { if let v = _storage._liquidationTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._selloffHistory.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._selloffHistory, fieldNumber: 16)
      }
      if !_storage._interestAccumulated.isEmpty {
        try visitor.visitSingularStringField(value: _storage._interestAccumulated, fieldNumber: 17)
      }
      try { if case .borrowMetaData(let v)? = _storage._kind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidation_V1beta1_LockedVault, rhs: Comdex_Liquidation_V1beta1_LockedVault) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._originalVaultID != rhs_storage._originalVaultID {return false}
        if _storage._extendedPairVaultID != rhs_storage._extendedPairVaultID {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._amountIn != rhs_storage._amountIn {return false}
        if _storage._amountOut != rhs_storage._amountOut {return false}
        if _storage._updatedAmountOut != rhs_storage._updatedAmountOut {return false}
        if _storage._initiator != rhs_storage._initiator {return false}
        if _storage._isAuctionComplete != rhs_storage._isAuctionComplete {return false}
        if _storage._isAuctionInProgress != rhs_storage._isAuctionInProgress {return false}
        if _storage._crAtLiquidation != rhs_storage._crAtLiquidation {return false}
        if _storage._currentCollateralisationRatio != rhs_storage._currentCollateralisationRatio {return false}
        if _storage._collateralToBeAuctioned != rhs_storage._collateralToBeAuctioned {return false}
        if _storage._liquidationTimestamp != rhs_storage._liquidationTimestamp {return false}
        if _storage._selloffHistory != rhs_storage._selloffHistory {return false}
        if _storage._interestAccumulated != rhs_storage._interestAccumulated {return false}
        if _storage._kind != rhs_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Liquidation_V1beta1_BorrowMetaData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BorrowMetaData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lending_id"),
    2: .standard(proto: "is_stable_borrow"),
    3: .standard(proto: "stable_borrow_rate"),
    4: .standard(proto: "bridged_asset_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.lendingID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStableBorrow) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.stableBorrowRate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._bridgedAssetAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.lendingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lendingID, fieldNumber: 1)
    }
    if self.isStableBorrow != false {
      try visitor.visitSingularBoolField(value: self.isStableBorrow, fieldNumber: 2)
    }
    if !self.stableBorrowRate.isEmpty {
      try visitor.visitSingularStringField(value: self.stableBorrowRate, fieldNumber: 3)
    }
    try { if let v = self._bridgedAssetAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Liquidation_V1beta1_BorrowMetaData, rhs: Comdex_Liquidation_V1beta1_BorrowMetaData) -> Bool {
    if lhs.lendingID != rhs.lendingID {return false}
    if lhs.isStableBorrow != rhs.isStableBorrow {return false}
    if lhs.stableBorrowRate != rhs.stableBorrowRate {return false}
    if lhs._bridgedAssetAmount != rhs._bridgedAssetAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
