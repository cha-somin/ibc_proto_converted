// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lum-network/millions/callbacks.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Lum_Network_Millions_TransferType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case claim // = 1
  case withdraw // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .claim
    case 2: self = .withdraw
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .claim: return 1
    case .withdraw: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Lum_Network_Millions_TransferType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Lum_Network_Millions_TransferType] = [
    .unspecified,
    .claim,
    .withdraw,
  ]
}

#endif  // swift(>=4.2)

struct Lum_Network_Millions_SplitDelegation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validatorAddress: String = String()

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_DelegateCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var depositID: UInt64 = 0

  var splitDelegations: [Lum_Network_Millions_SplitDelegation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_UndelegateCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var withdrawalID: UInt64 = 0

  var splitDelegations: [Lum_Network_Millions_SplitDelegation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_RedelegateCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var splitDelegation: Lum_Network_Millions_SplitDelegation {
    get {return _splitDelegation ?? Lum_Network_Millions_SplitDelegation()}
    set {_splitDelegation = newValue}
  }
  /// Returns true if `splitDelegation` has been explicitly set.
  var hasSplitDelegation: Bool {return self._splitDelegation != nil}
  /// Clears the value of `splitDelegation`. Subsequent reads from it will return its default value.
  mutating func clearSplitDelegation() {self._splitDelegation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _splitDelegation: Lum_Network_Millions_SplitDelegation? = nil
}

struct Lum_Network_Millions_ClaimRewardsCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var drawID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_TransferToNativeCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var depositID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_TransferFromNativeCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Lum_Network_Millions_TransferType = .unspecified

  var poolID: UInt64 = 0

  var drawID: UInt64 = 0

  var withdrawalID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_SetWithdrawAddressCallback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lum_Network_Millions_TransferType: @unchecked Sendable {}
extension Lum_Network_Millions_SplitDelegation: @unchecked Sendable {}
extension Lum_Network_Millions_DelegateCallback: @unchecked Sendable {}
extension Lum_Network_Millions_UndelegateCallback: @unchecked Sendable {}
extension Lum_Network_Millions_RedelegateCallback: @unchecked Sendable {}
extension Lum_Network_Millions_ClaimRewardsCallback: @unchecked Sendable {}
extension Lum_Network_Millions_TransferToNativeCallback: @unchecked Sendable {}
extension Lum_Network_Millions_TransferFromNativeCallback: @unchecked Sendable {}
extension Lum_Network_Millions_SetWithdrawAddressCallback: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lum.network.millions"

extension Lum_Network_Millions_TransferType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRANSFER_TYPE_UNSPECIFIED"),
    1: .same(proto: "TRANSFER_TYPE_CLAIM"),
    2: .same(proto: "TRANSFER_TYPE_WITHDRAW"),
  ]
}

extension Lum_Network_Millions_SplitDelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SplitDelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_SplitDelegation, rhs: Lum_Network_Millions_SplitDelegation) -> Bool {
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_DelegateCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegateCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "deposit_id"),
    3: .standard(proto: "split_delegations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.depositID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.splitDelegations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.depositID != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositID, fieldNumber: 2)
    }
    if !self.splitDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.splitDelegations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_DelegateCallback, rhs: Lum_Network_Millions_DelegateCallback) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.depositID != rhs.depositID {return false}
    if lhs.splitDelegations != rhs.splitDelegations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_UndelegateCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UndelegateCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "withdrawal_id"),
    3: .standard(proto: "split_delegations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.withdrawalID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.splitDelegations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.withdrawalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.withdrawalID, fieldNumber: 2)
    }
    if !self.splitDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.splitDelegations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_UndelegateCallback, rhs: Lum_Network_Millions_UndelegateCallback) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.withdrawalID != rhs.withdrawalID {return false}
    if lhs.splitDelegations != rhs.splitDelegations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_RedelegateCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedelegateCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "split_delegation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._splitDelegation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    try { if let v = self._splitDelegation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_RedelegateCallback, rhs: Lum_Network_Millions_RedelegateCallback) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs._splitDelegation != rhs._splitDelegation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_ClaimRewardsCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimRewardsCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "draw_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.drawID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.drawID != 0 {
      try visitor.visitSingularUInt64Field(value: self.drawID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_ClaimRewardsCallback, rhs: Lum_Network_Millions_ClaimRewardsCallback) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.drawID != rhs.drawID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_TransferToNativeCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferToNativeCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "deposit_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.depositID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.depositID != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_TransferToNativeCallback, rhs: Lum_Network_Millions_TransferToNativeCallback) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.depositID != rhs.depositID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_TransferFromNativeCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferFromNativeCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "draw_id"),
    4: .standard(proto: "withdrawal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.drawID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.withdrawalID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if self.drawID != 0 {
      try visitor.visitSingularUInt64Field(value: self.drawID, fieldNumber: 3)
    }
    if self.withdrawalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.withdrawalID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_TransferFromNativeCallback, rhs: Lum_Network_Millions_TransferFromNativeCallback) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.drawID != rhs.drawID {return false}
    if lhs.withdrawalID != rhs.withdrawalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_SetWithdrawAddressCallback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetWithdrawAddressCallback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_SetWithdrawAddressCallback, rhs: Lum_Network_Millions_SetWithdrawAddressCallback) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
