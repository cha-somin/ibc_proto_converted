//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/axelarnet/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the axelarnet Msg service.
///
/// Usage: instantiate `Axelar_Axelarnet_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Axelarnet_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func link(
    _ request: Axelar_Axelarnet_V1beta1_LinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_LinkRequest, Axelar_Axelarnet_V1beta1_LinkResponse>

  func confirmDeposit(
    _ request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>

  func executePendingTransfers(
    _ request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>

  func addCosmosBasedChain(
    _ request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>

  func registerAsset(
    _ request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RegisterAssetRequest, Axelar_Axelarnet_V1beta1_RegisterAssetResponse>

  func routeIBCTransfers(
    _ request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>

  func registerFeeCollector(
    _ request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>

  func retryIBCTransfer(
    _ request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>

  func routeMessage(
    _ request: Axelar_Axelarnet_V1beta1_RouteMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RouteMessageRequest, Axelar_Axelarnet_V1beta1_RouteMessageResponse>

  func callContract(
    _ request: Axelar_Axelarnet_V1beta1_CallContractRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_CallContractRequest, Axelar_Axelarnet_V1beta1_CallContractResponse>
}

extension Axelar_Axelarnet_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.axelarnet.v1beta1.MsgService"
  }

  /// Unary call to Link
  ///
  /// - Parameters:
  ///   - request: Request to send to Link.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func link(
    _ request: Axelar_Axelarnet_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_LinkRequest, Axelar_Axelarnet_V1beta1_LinkResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.link.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmDeposit
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmDeposit(
    _ request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, Axelar_Axelarnet_V1beta1_ConfirmDepositResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  /// Unary call to ExecutePendingTransfers
  ///
  /// - Parameters:
  ///   - request: Request to send to ExecutePendingTransfers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func executePendingTransfers(
    _ request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.executePendingTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecutePendingTransfersInterceptors() ?? []
    )
  }

  /// Unary call to AddCosmosBasedChain
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCosmosBasedChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addCosmosBasedChain(
    _ request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.addCosmosBasedChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCosmosBasedChainInterceptors() ?? []
    )
  }

  /// Unary call to RegisterAsset
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerAsset(
    _ request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RegisterAssetRequest, Axelar_Axelarnet_V1beta1_RegisterAssetResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterAssetInterceptors() ?? []
    )
  }

  /// Unary call to RouteIBCTransfers
  ///
  /// - Parameters:
  ///   - request: Request to send to RouteIBCTransfers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func routeIBCTransfers(
    _ request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeIBCTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteIBCTransfersInterceptors() ?? []
    )
  }

  /// Unary call to RegisterFeeCollector
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterFeeCollector.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerFeeCollector(
    _ request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerFeeCollector.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterFeeCollectorInterceptors() ?? []
    )
  }

  /// Unary call to RetryIBCTransfer
  ///
  /// - Parameters:
  ///   - request: Request to send to RetryIBCTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func retryIBCTransfer(
    _ request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.retryIBCTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetryIBCTransferInterceptors() ?? []
    )
  }

  /// Unary call to RouteMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to RouteMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func routeMessage(
    _ request: Axelar_Axelarnet_V1beta1_RouteMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_RouteMessageRequest, Axelar_Axelarnet_V1beta1_RouteMessageResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteMessageInterceptors() ?? []
    )
  }

  /// Unary call to CallContract
  ///
  /// - Parameters:
  ///   - request: Request to send to CallContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func callContract(
    _ request: Axelar_Axelarnet_V1beta1_CallContractRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_CallContractRequest, Axelar_Axelarnet_V1beta1_CallContractResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.callContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallContractInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Axelarnet_V1beta1_MsgServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Axelarnet_V1beta1_MsgServiceNIOClient")
internal final class Axelar_Axelarnet_V1beta1_MsgServiceClient: Axelar_Axelarnet_V1beta1_MsgServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.axelarnet.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Axelarnet_V1beta1_MsgServiceNIOClient: Axelar_Axelarnet_V1beta1_MsgServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.axelarnet.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the axelarnet Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Axelarnet_V1beta1_MsgServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func makeLinkCall(
    _ request: Axelar_Axelarnet_V1beta1_LinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_LinkRequest, Axelar_Axelarnet_V1beta1_LinkResponse>

  func makeConfirmDepositCall(
    _ request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>

  func makeExecutePendingTransfersCall(
    _ request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>

  func makeAddCosmosBasedChainCall(
    _ request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>

  func makeRegisterAssetCall(
    _ request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RegisterAssetRequest, Axelar_Axelarnet_V1beta1_RegisterAssetResponse>

  func makeRouteIbctransfersCall(
    _ request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>

  func makeRegisterFeeCollectorCall(
    _ request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>

  func makeRetryIbctransferCall(
    _ request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>

  func makeRouteMessageCall(
    _ request: Axelar_Axelarnet_V1beta1_RouteMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RouteMessageRequest, Axelar_Axelarnet_V1beta1_RouteMessageResponse>

  func makeCallContractCall(
    _ request: Axelar_Axelarnet_V1beta1_CallContractRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_CallContractRequest, Axelar_Axelarnet_V1beta1_CallContractResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Axelarnet_V1beta1_MsgServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeLinkCall(
    _ request: Axelar_Axelarnet_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_LinkRequest, Axelar_Axelarnet_V1beta1_LinkResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.link.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  internal func makeConfirmDepositCall(
    _ request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, Axelar_Axelarnet_V1beta1_ConfirmDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  internal func makeExecutePendingTransfersCall(
    _ request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.executePendingTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecutePendingTransfersInterceptors() ?? []
    )
  }

  internal func makeAddCosmosBasedChainCall(
    _ request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.addCosmosBasedChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCosmosBasedChainInterceptors() ?? []
    )
  }

  internal func makeRegisterAssetCall(
    _ request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RegisterAssetRequest, Axelar_Axelarnet_V1beta1_RegisterAssetResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterAssetInterceptors() ?? []
    )
  }

  internal func makeRouteIbctransfersCall(
    _ request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeIBCTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteIBCTransfersInterceptors() ?? []
    )
  }

  internal func makeRegisterFeeCollectorCall(
    _ request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerFeeCollector.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterFeeCollectorInterceptors() ?? []
    )
  }

  internal func makeRetryIbctransferCall(
    _ request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.retryIBCTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetryIBCTransferInterceptors() ?? []
    )
  }

  internal func makeRouteMessageCall(
    _ request: Axelar_Axelarnet_V1beta1_RouteMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_RouteMessageRequest, Axelar_Axelarnet_V1beta1_RouteMessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteMessageInterceptors() ?? []
    )
  }

  internal func makeCallContractCall(
    _ request: Axelar_Axelarnet_V1beta1_CallContractRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_CallContractRequest, Axelar_Axelarnet_V1beta1_CallContractResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.callContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallContractInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Axelarnet_V1beta1_MsgServiceAsyncClientProtocol {
  internal func link(
    _ request: Axelar_Axelarnet_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_LinkResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.link.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  internal func confirmDeposit(
    _ request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_ConfirmDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  internal func executePendingTransfers(
    _ request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.executePendingTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecutePendingTransfersInterceptors() ?? []
    )
  }

  internal func addCosmosBasedChain(
    _ request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.addCosmosBasedChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCosmosBasedChainInterceptors() ?? []
    )
  }

  internal func registerAsset(
    _ request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_RegisterAssetResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterAssetInterceptors() ?? []
    )
  }

  internal func routeIBCTransfers(
    _ request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeIBCTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteIBCTransfersInterceptors() ?? []
    )
  }

  internal func registerFeeCollector(
    _ request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerFeeCollector.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterFeeCollectorInterceptors() ?? []
    )
  }

  internal func retryIBCTransfer(
    _ request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.retryIBCTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetryIBCTransferInterceptors() ?? []
    )
  }

  internal func routeMessage(
    _ request: Axelar_Axelarnet_V1beta1_RouteMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_RouteMessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRouteMessageInterceptors() ?? []
    )
  }

  internal func callContract(
    _ request: Axelar_Axelarnet_V1beta1_CallContractRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_CallContractResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.callContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCallContractInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Axelarnet_V1beta1_MsgServiceAsyncClient: Axelar_Axelarnet_V1beta1_MsgServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Axelarnet_V1beta1_MsgServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'link'.
  func makeLinkInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_LinkRequest, Axelar_Axelarnet_V1beta1_LinkResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmDeposit'.
  func makeConfirmDepositInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'executePendingTransfers'.
  func makeExecutePendingTransfersInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>]

  /// - Returns: Interceptors to use when invoking 'addCosmosBasedChain'.
  func makeAddCosmosBasedChainInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>]

  /// - Returns: Interceptors to use when invoking 'registerAsset'.
  func makeRegisterAssetInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_RegisterAssetRequest, Axelar_Axelarnet_V1beta1_RegisterAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'routeIBCTransfers'.
  func makeRouteIBCTransfersInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>]

  /// - Returns: Interceptors to use when invoking 'registerFeeCollector'.
  func makeRegisterFeeCollectorInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>]

  /// - Returns: Interceptors to use when invoking 'retryIBCTransfer'.
  func makeRetryIBCTransferInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'routeMessage'.
  func makeRouteMessageInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_RouteMessageRequest, Axelar_Axelarnet_V1beta1_RouteMessageResponse>]

  /// - Returns: Interceptors to use when invoking 'callContract'.
  func makeCallContractInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_CallContractRequest, Axelar_Axelarnet_V1beta1_CallContractResponse>]
}

internal enum Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.axelarnet.v1beta1.MsgService",
    methods: [
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.link,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.executePendingTransfers,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.addCosmosBasedChain,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerAsset,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeIBCTransfers,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.registerFeeCollector,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.retryIBCTransfer,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.routeMessage,
      Axelar_Axelarnet_V1beta1_MsgServiceClientMetadata.Methods.callContract,
    ]
  )

  internal enum Methods {
    internal static let link = GRPCMethodDescriptor(
      name: "Link",
      path: "/axelar.axelarnet.v1beta1.MsgService/Link",
      type: GRPCCallType.unary
    )

    internal static let confirmDeposit = GRPCMethodDescriptor(
      name: "ConfirmDeposit",
      path: "/axelar.axelarnet.v1beta1.MsgService/ConfirmDeposit",
      type: GRPCCallType.unary
    )

    internal static let executePendingTransfers = GRPCMethodDescriptor(
      name: "ExecutePendingTransfers",
      path: "/axelar.axelarnet.v1beta1.MsgService/ExecutePendingTransfers",
      type: GRPCCallType.unary
    )

    internal static let addCosmosBasedChain = GRPCMethodDescriptor(
      name: "AddCosmosBasedChain",
      path: "/axelar.axelarnet.v1beta1.MsgService/AddCosmosBasedChain",
      type: GRPCCallType.unary
    )

    internal static let registerAsset = GRPCMethodDescriptor(
      name: "RegisterAsset",
      path: "/axelar.axelarnet.v1beta1.MsgService/RegisterAsset",
      type: GRPCCallType.unary
    )

    internal static let routeIBCTransfers = GRPCMethodDescriptor(
      name: "RouteIBCTransfers",
      path: "/axelar.axelarnet.v1beta1.MsgService/RouteIBCTransfers",
      type: GRPCCallType.unary
    )

    internal static let registerFeeCollector = GRPCMethodDescriptor(
      name: "RegisterFeeCollector",
      path: "/axelar.axelarnet.v1beta1.MsgService/RegisterFeeCollector",
      type: GRPCCallType.unary
    )

    internal static let retryIBCTransfer = GRPCMethodDescriptor(
      name: "RetryIBCTransfer",
      path: "/axelar.axelarnet.v1beta1.MsgService/RetryIBCTransfer",
      type: GRPCCallType.unary
    )

    internal static let routeMessage = GRPCMethodDescriptor(
      name: "RouteMessage",
      path: "/axelar.axelarnet.v1beta1.MsgService/RouteMessage",
      type: GRPCCallType.unary
    )

    internal static let callContract = GRPCMethodDescriptor(
      name: "CallContract",
      path: "/axelar.axelarnet.v1beta1.MsgService/CallContract",
      type: GRPCCallType.unary
    )
  }
}

/// QueryService defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Axelarnet_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Axelarnet_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func pendingIBCTransferCount(
    _ request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>
}

extension Axelar_Axelarnet_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.axelarnet.v1beta1.QueryService"
  }

  /// PendingIBCTransferCount queries the pending ibc transfers for all chains
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingIBCTransferCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pendingIBCTransferCount(
    _ request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse> {
    return self.makeUnaryCall(
      path: Axelar_Axelarnet_V1beta1_QueryServiceClientMetadata.Methods.pendingIBCTransferCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingIBCTransferCountInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Axelarnet_V1beta1_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Axelarnet_V1beta1_QueryServiceNIOClient")
internal final class Axelar_Axelarnet_V1beta1_QueryServiceClient: Axelar_Axelarnet_V1beta1_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.axelarnet.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Axelarnet_V1beta1_QueryServiceNIOClient: Axelar_Axelarnet_V1beta1_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.axelarnet.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryService defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Axelarnet_V1beta1_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makePendingIbctransferCountCall(
    _ request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Axelarnet_V1beta1_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Axelarnet_V1beta1_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makePendingIbctransferCountCall(
    _ request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_QueryServiceClientMetadata.Methods.pendingIBCTransferCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingIBCTransferCountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Axelarnet_V1beta1_QueryServiceAsyncClientProtocol {
  internal func pendingIBCTransferCount(
    _ request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Axelarnet_V1beta1_QueryServiceClientMetadata.Methods.pendingIBCTransferCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingIBCTransferCountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Axelarnet_V1beta1_QueryServiceAsyncClient: Axelar_Axelarnet_V1beta1_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Axelarnet_V1beta1_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'pendingIBCTransferCount'.
  func makePendingIBCTransferCountInterceptors() -> [ClientInterceptor<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>]
}

internal enum Axelar_Axelarnet_V1beta1_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.axelarnet.v1beta1.QueryService",
    methods: [
      Axelar_Axelarnet_V1beta1_QueryServiceClientMetadata.Methods.pendingIBCTransferCount,
    ]
  )

  internal enum Methods {
    internal static let pendingIBCTransferCount = GRPCMethodDescriptor(
      name: "PendingIBCTransferCount",
      path: "/axelar.axelarnet.v1beta1.QueryService/PendingIBCTransferCount",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the axelarnet Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Axelarnet_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func link(request: Axelar_Axelarnet_V1beta1_LinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_LinkResponse>

  func confirmDeposit(request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>

  func executePendingTransfers(request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>

  func addCosmosBasedChain(request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>

  func registerAsset(request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_RegisterAssetResponse>

  func routeIBCTransfers(request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>

  func registerFeeCollector(request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>

  func retryIBCTransfer(request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>

  func routeMessage(request: Axelar_Axelarnet_V1beta1_RouteMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_RouteMessageResponse>

  func callContract(request: Axelar_Axelarnet_V1beta1_CallContractRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_CallContractResponse>
}

extension Axelar_Axelarnet_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Link":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_LinkRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_LinkResponse>(),
        interceptors: self.interceptors?.makeLinkInterceptors() ?? [],
        userFunction: self.link(request:context:)
      )

    case "ConfirmDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>(),
        interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? [],
        userFunction: self.confirmDeposit(request:context:)
      )

    case "ExecutePendingTransfers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>(),
        interceptors: self.interceptors?.makeExecutePendingTransfersInterceptors() ?? [],
        userFunction: self.executePendingTransfers(request:context:)
      )

    case "AddCosmosBasedChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>(),
        interceptors: self.interceptors?.makeAddCosmosBasedChainInterceptors() ?? [],
        userFunction: self.addCosmosBasedChain(request:context:)
      )

    case "RegisterAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RegisterAssetRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RegisterAssetResponse>(),
        interceptors: self.interceptors?.makeRegisterAssetInterceptors() ?? [],
        userFunction: self.registerAsset(request:context:)
      )

    case "RouteIBCTransfers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>(),
        interceptors: self.interceptors?.makeRouteIBCTransfersInterceptors() ?? [],
        userFunction: self.routeIBCTransfers(request:context:)
      )

    case "RegisterFeeCollector":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>(),
        interceptors: self.interceptors?.makeRegisterFeeCollectorInterceptors() ?? [],
        userFunction: self.registerFeeCollector(request:context:)
      )

    case "RetryIBCTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>(),
        interceptors: self.interceptors?.makeRetryIBCTransferInterceptors() ?? [],
        userFunction: self.retryIBCTransfer(request:context:)
      )

    case "RouteMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RouteMessageRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RouteMessageResponse>(),
        interceptors: self.interceptors?.makeRouteMessageInterceptors() ?? [],
        userFunction: self.routeMessage(request:context:)
      )

    case "CallContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_CallContractRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_CallContractResponse>(),
        interceptors: self.interceptors?.makeCallContractInterceptors() ?? [],
        userFunction: self.callContract(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the axelarnet Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Axelarnet_V1beta1_MsgServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func link(
    request: Axelar_Axelarnet_V1beta1_LinkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_LinkResponse

  @Sendable func confirmDeposit(
    request: Axelar_Axelarnet_V1beta1_ConfirmDepositRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_ConfirmDepositResponse

  @Sendable func executePendingTransfers(
    request: Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse

  @Sendable func addCosmosBasedChain(
    request: Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse

  @Sendable func registerAsset(
    request: Axelar_Axelarnet_V1beta1_RegisterAssetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_RegisterAssetResponse

  @Sendable func routeIBCTransfers(
    request: Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse

  @Sendable func registerFeeCollector(
    request: Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse

  @Sendable func retryIBCTransfer(
    request: Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse

  @Sendable func routeMessage(
    request: Axelar_Axelarnet_V1beta1_RouteMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_RouteMessageResponse

  @Sendable func callContract(
    request: Axelar_Axelarnet_V1beta1_CallContractRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_CallContractResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Axelarnet_V1beta1_MsgServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Axelarnet_V1beta1_MsgServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Link":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_LinkRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_LinkResponse>(),
        interceptors: self.interceptors?.makeLinkInterceptors() ?? [],
        wrapping: self.link(request:context:)
      )

    case "ConfirmDeposit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>(),
        interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? [],
        wrapping: self.confirmDeposit(request:context:)
      )

    case "ExecutePendingTransfers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>(),
        interceptors: self.interceptors?.makeExecutePendingTransfersInterceptors() ?? [],
        wrapping: self.executePendingTransfers(request:context:)
      )

    case "AddCosmosBasedChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>(),
        interceptors: self.interceptors?.makeAddCosmosBasedChainInterceptors() ?? [],
        wrapping: self.addCosmosBasedChain(request:context:)
      )

    case "RegisterAsset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RegisterAssetRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RegisterAssetResponse>(),
        interceptors: self.interceptors?.makeRegisterAssetInterceptors() ?? [],
        wrapping: self.registerAsset(request:context:)
      )

    case "RouteIBCTransfers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>(),
        interceptors: self.interceptors?.makeRouteIBCTransfersInterceptors() ?? [],
        wrapping: self.routeIBCTransfers(request:context:)
      )

    case "RegisterFeeCollector":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>(),
        interceptors: self.interceptors?.makeRegisterFeeCollectorInterceptors() ?? [],
        wrapping: self.registerFeeCollector(request:context:)
      )

    case "RetryIBCTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>(),
        interceptors: self.interceptors?.makeRetryIBCTransferInterceptors() ?? [],
        wrapping: self.retryIBCTransfer(request:context:)
      )

    case "RouteMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_RouteMessageRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_RouteMessageResponse>(),
        interceptors: self.interceptors?.makeRouteMessageInterceptors() ?? [],
        wrapping: self.routeMessage(request:context:)
      )

    case "CallContract":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_CallContractRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_CallContractResponse>(),
        interceptors: self.interceptors?.makeCallContractInterceptors() ?? [],
        wrapping: self.callContract(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Axelarnet_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'link'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_LinkRequest, Axelar_Axelarnet_V1beta1_LinkResponse>]

  /// - Returns: Interceptors to use when handling 'confirmDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmDepositInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_ConfirmDepositRequest, Axelar_Axelarnet_V1beta1_ConfirmDepositResponse>]

  /// - Returns: Interceptors to use when handling 'executePendingTransfers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecutePendingTransfersInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_ExecutePendingTransfersRequest, Axelar_Axelarnet_V1beta1_ExecutePendingTransfersResponse>]

  /// - Returns: Interceptors to use when handling 'addCosmosBasedChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddCosmosBasedChainInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_AddCosmosBasedChainRequest, Axelar_Axelarnet_V1beta1_AddCosmosBasedChainResponse>]

  /// - Returns: Interceptors to use when handling 'registerAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterAssetInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_RegisterAssetRequest, Axelar_Axelarnet_V1beta1_RegisterAssetResponse>]

  /// - Returns: Interceptors to use when handling 'routeIBCTransfers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRouteIBCTransfersInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_RouteIBCTransfersRequest, Axelar_Axelarnet_V1beta1_RouteIBCTransfersResponse>]

  /// - Returns: Interceptors to use when handling 'registerFeeCollector'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterFeeCollectorInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_RegisterFeeCollectorRequest, Axelar_Axelarnet_V1beta1_RegisterFeeCollectorResponse>]

  /// - Returns: Interceptors to use when handling 'retryIBCTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetryIBCTransferInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_RetryIBCTransferRequest, Axelar_Axelarnet_V1beta1_RetryIBCTransferResponse>]

  /// - Returns: Interceptors to use when handling 'routeMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRouteMessageInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_RouteMessageRequest, Axelar_Axelarnet_V1beta1_RouteMessageResponse>]

  /// - Returns: Interceptors to use when handling 'callContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCallContractInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_CallContractRequest, Axelar_Axelarnet_V1beta1_CallContractResponse>]
}

internal enum Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.axelarnet.v1beta1.MsgService",
    methods: [
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.link,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.confirmDeposit,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.executePendingTransfers,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.addCosmosBasedChain,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.registerAsset,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.routeIBCTransfers,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.registerFeeCollector,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.retryIBCTransfer,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.routeMessage,
      Axelar_Axelarnet_V1beta1_MsgServiceServerMetadata.Methods.callContract,
    ]
  )

  internal enum Methods {
    internal static let link = GRPCMethodDescriptor(
      name: "Link",
      path: "/axelar.axelarnet.v1beta1.MsgService/Link",
      type: GRPCCallType.unary
    )

    internal static let confirmDeposit = GRPCMethodDescriptor(
      name: "ConfirmDeposit",
      path: "/axelar.axelarnet.v1beta1.MsgService/ConfirmDeposit",
      type: GRPCCallType.unary
    )

    internal static let executePendingTransfers = GRPCMethodDescriptor(
      name: "ExecutePendingTransfers",
      path: "/axelar.axelarnet.v1beta1.MsgService/ExecutePendingTransfers",
      type: GRPCCallType.unary
    )

    internal static let addCosmosBasedChain = GRPCMethodDescriptor(
      name: "AddCosmosBasedChain",
      path: "/axelar.axelarnet.v1beta1.MsgService/AddCosmosBasedChain",
      type: GRPCCallType.unary
    )

    internal static let registerAsset = GRPCMethodDescriptor(
      name: "RegisterAsset",
      path: "/axelar.axelarnet.v1beta1.MsgService/RegisterAsset",
      type: GRPCCallType.unary
    )

    internal static let routeIBCTransfers = GRPCMethodDescriptor(
      name: "RouteIBCTransfers",
      path: "/axelar.axelarnet.v1beta1.MsgService/RouteIBCTransfers",
      type: GRPCCallType.unary
    )

    internal static let registerFeeCollector = GRPCMethodDescriptor(
      name: "RegisterFeeCollector",
      path: "/axelar.axelarnet.v1beta1.MsgService/RegisterFeeCollector",
      type: GRPCCallType.unary
    )

    internal static let retryIBCTransfer = GRPCMethodDescriptor(
      name: "RetryIBCTransfer",
      path: "/axelar.axelarnet.v1beta1.MsgService/RetryIBCTransfer",
      type: GRPCCallType.unary
    )

    internal static let routeMessage = GRPCMethodDescriptor(
      name: "RouteMessage",
      path: "/axelar.axelarnet.v1beta1.MsgService/RouteMessage",
      type: GRPCCallType.unary
    )

    internal static let callContract = GRPCMethodDescriptor(
      name: "CallContract",
      path: "/axelar.axelarnet.v1beta1.MsgService/CallContract",
      type: GRPCCallType.unary
    )
  }
}
/// QueryService defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Axelarnet_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// PendingIBCTransferCount queries the pending ibc transfers for all chains
  func pendingIBCTransferCount(request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>
}

extension Axelar_Axelarnet_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Axelarnet_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PendingIBCTransferCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>(),
        interceptors: self.interceptors?.makePendingIBCTransferCountInterceptors() ?? [],
        userFunction: self.pendingIBCTransferCount(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryService defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Axelarnet_V1beta1_QueryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// PendingIBCTransferCount queries the pending ibc transfers for all chains
  @Sendable func pendingIBCTransferCount(
    request: Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Axelarnet_V1beta1_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Axelarnet_V1beta1_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Axelarnet_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Axelarnet_V1beta1_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PendingIBCTransferCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>(),
        interceptors: self.interceptors?.makePendingIBCTransferCountInterceptors() ?? [],
        wrapping: self.pendingIBCTransferCount(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Axelarnet_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'pendingIBCTransferCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePendingIBCTransferCountInterceptors() -> [ServerInterceptor<Axelar_Axelarnet_V1beta1_PendingIBCTransferCountRequest, Axelar_Axelarnet_V1beta1_PendingIBCTransferCountResponse>]
}

internal enum Axelar_Axelarnet_V1beta1_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.axelarnet.v1beta1.QueryService",
    methods: [
      Axelar_Axelarnet_V1beta1_QueryServiceServerMetadata.Methods.pendingIBCTransferCount,
    ]
  )

  internal enum Methods {
    internal static let pendingIBCTransferCount = GRPCMethodDescriptor(
      name: "PendingIBCTransferCount",
      path: "/axelar.axelarnet.v1beta1.QueryService/PendingIBCTransferCount",
      type: GRPCCallType.unary
    )
  }
}
