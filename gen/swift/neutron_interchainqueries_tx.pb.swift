// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/interchainqueries/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Interchainqueries_MsgRegisterInterchainQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// defines a query type: `kv` or `tx` now
  var queryType: String = String()

  /// is used to define KV-storage keys for which we want to get values from
  /// remote chain
  var keys: [Neutron_Interchainqueries_KVKey] = []

  /// is used to define a filter for transaction search ICQ
  var transactionsFilter: String = String()

  /// is IBC connection ID for getting ConsensusState to verify proofs
  var connectionID: String = String()

  /// is used to specify how often (in neutron blocks) the query must be updated
  var updatePeriod: UInt64 = 0

  /// is the signer of the message
  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutron_Interchainqueries_MsgSubmitQueryResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var queryID: UInt64 = 0

  var sender: String = String()

  /// is the IBC client ID for an IBC connection between Neutron chain and target
  /// chain (where the result was obtained from)
  /// Deprecated: populating this field does not make any affect
  var clientID: String = String()

  var result: Neutron_Interchainqueries_QueryResult {
    get {return _result ?? Neutron_Interchainqueries_QueryResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _result: Neutron_Interchainqueries_QueryResult? = nil
}

struct Neutron_Interchainqueries_QueryResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kvResults: [Neutron_Interchainqueries_StorageValue] = []

  var block: Neutron_Interchainqueries_Block {
    get {return _block ?? Neutron_Interchainqueries_Block()}
    set {_block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  var hasBlock: Bool {return self._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  mutating func clearBlock() {self._block = nil}

  var height: UInt64 = 0

  var revision: UInt64 = 0

  var allowKvCallbacks: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _block: Neutron_Interchainqueries_Block? = nil
}

struct Neutron_Interchainqueries_StorageValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// is the substore name (acc, staking, etc.)
  var storagePrefix: String = String()

  /// is the key in IAVL store
  var key: Data = Data()

  /// is the value in IAVL store
  var value: Data = Data()

  /// is the Merkle Proof which proves existence of key-value pair in IAVL
  /// storage
  var proof: Tendermint_Crypto_ProofOps {
    get {return _proof ?? Tendermint_Crypto_ProofOps()}
    set {_proof = newValue}
  }
  /// Returns true if `proof` has been explicitly set.
  var hasProof: Bool {return self._proof != nil}
  /// Clears the value of `proof`. Subsequent reads from it will return its default value.
  mutating func clearProof() {self._proof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proof: Tendermint_Crypto_ProofOps? = nil
}

struct Neutron_Interchainqueries_Block {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// We need to know block X+1 to verify response of transaction for block X
  /// since LastResultsHash is root hash of all results from the txs from the
  /// previous block
  var nextBlockHeader: SwiftProtobuf.Google_Protobuf_Any {
    get {return _nextBlockHeader ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_nextBlockHeader = newValue}
  }
  /// Returns true if `nextBlockHeader` has been explicitly set.
  var hasNextBlockHeader: Bool {return self._nextBlockHeader != nil}
  /// Clears the value of `nextBlockHeader`. Subsequent reads from it will return its default value.
  mutating func clearNextBlockHeader() {self._nextBlockHeader = nil}

  /// We need to know block X to verify inclusion of transaction for block X
  var header: SwiftProtobuf.Google_Protobuf_Any {
    get {return _header ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var tx: Neutron_Interchainqueries_TxValue {
    get {return _tx ?? Neutron_Interchainqueries_TxValue()}
    set {_tx = newValue}
  }
  /// Returns true if `tx` has been explicitly set.
  var hasTx: Bool {return self._tx != nil}
  /// Clears the value of `tx`. Subsequent reads from it will return its default value.
  mutating func clearTx() {self._tx = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nextBlockHeader: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _header: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _tx: Neutron_Interchainqueries_TxValue? = nil
}

struct Neutron_Interchainqueries_TxValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: Tendermint_Abci_ExecTxResult {
    get {return _storage._response ?? Tendermint_Abci_ExecTxResult()}
    set {_uniqueStorage()._response = newValue}
  }
  /// Returns true if `response` has been explicitly set.
  var hasResponse: Bool {return _storage._response != nil}
  /// Clears the value of `response`. Subsequent reads from it will return its default value.
  mutating func clearResponse() {_uniqueStorage()._response = nil}

  /// is the Merkle Proof which proves existence of response in block with height
  /// next_block_header.Height
  var deliveryProof: Tendermint_Crypto_Proof {
    get {return _storage._deliveryProof ?? Tendermint_Crypto_Proof()}
    set {_uniqueStorage()._deliveryProof = newValue}
  }
  /// Returns true if `deliveryProof` has been explicitly set.
  var hasDeliveryProof: Bool {return _storage._deliveryProof != nil}
  /// Clears the value of `deliveryProof`. Subsequent reads from it will return its default value.
  mutating func clearDeliveryProof() {_uniqueStorage()._deliveryProof = nil}

  /// is the Merkle Proof which proves existence of data in block with height
  /// header.Height
  var inclusionProof: Tendermint_Crypto_Proof {
    get {return _storage._inclusionProof ?? Tendermint_Crypto_Proof()}
    set {_uniqueStorage()._inclusionProof = newValue}
  }
  /// Returns true if `inclusionProof` has been explicitly set.
  var hasInclusionProof: Bool {return _storage._inclusionProof != nil}
  /// Clears the value of `inclusionProof`. Subsequent reads from it will return its default value.
  mutating func clearInclusionProof() {_uniqueStorage()._inclusionProof = nil}

  /// is body of the transaction
  var data: Data {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Neutron_Interchainqueries_MsgSubmitQueryResultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var queryID: UInt64 = 0

  /// is the signer of the message
  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var queryID: UInt64 = 0

  var newKeys: [Neutron_Interchainqueries_KVKey] = []

  var newUpdatePeriod: UInt64 = 0

  var newTransactionsFilter: String = String()

  /// is the signer of the message
  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateParams is the MsgUpdateParams request type.
///
/// Since: 0.47
struct Neutron_Interchainqueries_MsgUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Authority is the address of the governance account.
  var authority: String = String()

  /// params defines the x/interchainqueries parameters to update.
  ///
  /// NOTE: All parameters must be supplied.
  var params: Neutron_Interchainqueries_Params {
    get {return _params ?? Neutron_Interchainqueries_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Neutron_Interchainqueries_Params? = nil
}

/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
///
/// Since: 0.47
struct Neutron_Interchainqueries_MsgUpdateParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Interchainqueries_MsgRegisterInterchainQuery: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgSubmitQueryResult: @unchecked Sendable {}
extension Neutron_Interchainqueries_QueryResult: @unchecked Sendable {}
extension Neutron_Interchainqueries_StorageValue: @unchecked Sendable {}
extension Neutron_Interchainqueries_Block: @unchecked Sendable {}
extension Neutron_Interchainqueries_TxValue: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgSubmitQueryResultResponse: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgUpdateParams: @unchecked Sendable {}
extension Neutron_Interchainqueries_MsgUpdateParamsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.interchainqueries"

extension Neutron_Interchainqueries_MsgRegisterInterchainQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterInterchainQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_type"),
    2: .same(proto: "keys"),
    3: .standard(proto: "transactions_filter"),
    4: .standard(proto: "connection_id"),
    5: .standard(proto: "update_period"),
    6: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.queryType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.keys) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.transactionsFilter) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.updatePeriod) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queryType.isEmpty {
      try visitor.visitSingularStringField(value: self.queryType, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keys, fieldNumber: 2)
    }
    if !self.transactionsFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionsFilter, fieldNumber: 3)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 4)
    }
    if self.updatePeriod != 0 {
      try visitor.visitSingularUInt64Field(value: self.updatePeriod, fieldNumber: 5)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgRegisterInterchainQuery, rhs: Neutron_Interchainqueries_MsgRegisterInterchainQuery) -> Bool {
    if lhs.queryType != rhs.queryType {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.transactionsFilter != rhs.transactionsFilter {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.updatePeriod != rhs.updatePeriod {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterInterchainQueryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse, rhs: Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgSubmitQueryResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitQueryResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_id"),
    2: .same(proto: "sender"),
    3: .standard(proto: "client_id"),
    4: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.queryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.queryID != 0 {
      try visitor.visitSingularUInt64Field(value: self.queryID, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 3)
    }
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgSubmitQueryResult, rhs: Neutron_Interchainqueries_MsgSubmitQueryResult) -> Bool {
    if lhs.queryID != rhs.queryID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_QueryResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "kv_results"),
    2: .same(proto: "block"),
    3: .same(proto: "height"),
    4: .same(proto: "revision"),
    5: .standard(proto: "allow_kv_callbacks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.kvResults) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._block) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.revision) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.allowKvCallbacks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.kvResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.kvResults, fieldNumber: 1)
    }
    try { if let v = self._block {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 3)
    }
    if self.revision != 0 {
      try visitor.visitSingularUInt64Field(value: self.revision, fieldNumber: 4)
    }
    if self.allowKvCallbacks != false {
      try visitor.visitSingularBoolField(value: self.allowKvCallbacks, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_QueryResult, rhs: Neutron_Interchainqueries_QueryResult) -> Bool {
    if lhs.kvResults != rhs.kvResults {return false}
    if lhs._block != rhs._block {return false}
    if lhs.height != rhs.height {return false}
    if lhs.revision != rhs.revision {return false}
    if lhs.allowKvCallbacks != rhs.allowKvCallbacks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_StorageValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StorageValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "storage_prefix"),
    2: .same(proto: "key"),
    3: .same(proto: "value"),
    4: .same(proto: "Proof"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.storagePrefix) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._proof) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.storagePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.storagePrefix, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 3)
    }
    try { if let v = self._proof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_StorageValue, rhs: Neutron_Interchainqueries_StorageValue) -> Bool {
    if lhs.storagePrefix != rhs.storagePrefix {return false}
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs._proof != rhs._proof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Block"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "next_block_header"),
    2: .same(proto: "header"),
    3: .same(proto: "tx"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._nextBlockHeader) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tx) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._nextBlockHeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._tx {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_Block, rhs: Neutron_Interchainqueries_Block) -> Bool {
    if lhs._nextBlockHeader != rhs._nextBlockHeader {return false}
    if lhs._header != rhs._header {return false}
    if lhs._tx != rhs._tx {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_TxValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
    2: .standard(proto: "delivery_proof"),
    3: .standard(proto: "inclusion_proof"),
    4: .same(proto: "data"),
  ]

  fileprivate class _StorageClass {
    var _response: Tendermint_Abci_ExecTxResult? = nil
    var _deliveryProof: Tendermint_Crypto_Proof? = nil
    var _inclusionProof: Tendermint_Crypto_Proof? = nil
    var _data: Data = Data()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _response = source._response
      _deliveryProof = source._deliveryProof
      _inclusionProof = source._inclusionProof
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._response) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._deliveryProof) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._inclusionProof) }()
        case 4: try { try decoder.decodeSingularBytesField(value: &_storage._data) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._deliveryProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._inclusionProof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._data.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._data, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_TxValue, rhs: Neutron_Interchainqueries_TxValue) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._response != rhs_storage._response {return false}
        if _storage._deliveryProof != rhs_storage._deliveryProof {return false}
        if _storage._inclusionProof != rhs_storage._inclusionProof {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgSubmitQueryResultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitQueryResultResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgSubmitQueryResultResponse, rhs: Neutron_Interchainqueries_MsgSubmitQueryResultResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveInterchainQueryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_id"),
    2: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.queryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.queryID != 0 {
      try visitor.visitSingularUInt64Field(value: self.queryID, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, rhs: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest) -> Bool {
    if lhs.queryID != rhs.queryID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveInterchainQueryResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse, rhs: Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateInterchainQueryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "query_id"),
    2: .standard(proto: "new_keys"),
    3: .standard(proto: "new_update_period"),
    4: .standard(proto: "new_transactions_filter"),
    5: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.queryID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.newKeys) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.newUpdatePeriod) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.newTransactionsFilter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.queryID != 0 {
      try visitor.visitSingularUInt64Field(value: self.queryID, fieldNumber: 1)
    }
    if !self.newKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.newKeys, fieldNumber: 2)
    }
    if self.newUpdatePeriod != 0 {
      try visitor.visitSingularUInt64Field(value: self.newUpdatePeriod, fieldNumber: 3)
    }
    if !self.newTransactionsFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.newTransactionsFilter, fieldNumber: 4)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, rhs: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest) -> Bool {
    if lhs.queryID != rhs.queryID {return false}
    if lhs.newKeys != rhs.newKeys {return false}
    if lhs.newUpdatePeriod != rhs.newUpdatePeriod {return false}
    if lhs.newTransactionsFilter != rhs.newTransactionsFilter {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateInterchainQueryResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse, rhs: Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgUpdateParams, rhs: Neutron_Interchainqueries_MsgUpdateParams) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_MsgUpdateParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateParamsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_MsgUpdateParamsResponse, rhs: Neutron_Interchainqueries_MsgUpdateParamsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
