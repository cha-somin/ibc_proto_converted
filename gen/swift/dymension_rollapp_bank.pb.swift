// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dymension/rollapp/bank.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DenomUnit represents a struct that describes a given
/// denomination unit of the basic token.
struct Dymensionxyz_Dymension_Rollapp_DenomUnit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// denom represents the string name of the given denom unit (e.g uatom).
  var denom: String = String()

  /// exponent represents power of 10 exponent that one must
  /// raise the base_denom to in order to equal the given DenomUnit's denom
  /// 1 denom = 10^exponent base_denom
  /// (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
  /// exponent = 6, thus: 1 atom = 10^6 uatom).
  var exponent: UInt32 = 0

  /// aliases is a list of string aliases for the given denom
  var aliases: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Metadata represents a struct that describes
/// a basic token.
struct Dymensionxyz_Dymension_Rollapp_TokenMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: String = String()

  /// denom_units represents the list of DenomUnit's for a given coin
  var denomUnits: [Dymensionxyz_Dymension_Rollapp_DenomUnit] = []

  /// base represents the base denom (should be the DenomUnit with exponent = 0).
  var base: String = String()

  /// display indicates the suggested denom that should be
  /// displayed in clients.
  var display: String = String()

  /// name defines the name of the token (eg: Cosmos Atom)
  ///
  /// Since: cosmos-sdk 0.43
  var name: String = String()

  /// symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
  /// be the same as the display.
  ///
  /// Since: cosmos-sdk 0.43
  var symbol: String = String()

  /// URI to a document (on or off-chain) that contains additional information. Optional.
  ///
  /// Since: cosmos-sdk 0.46
  var uri: String = String()

  /// URIHash is a sha256 hash of a document pointed by URI. It's used to verify that
  /// the document didn't change. Optional.
  ///
  /// Since: cosmos-sdk 0.46
  var uriHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dymensionxyz_Dymension_Rollapp_DenomUnit: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Rollapp_TokenMetadata: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dymensionxyz.dymension.rollapp"

extension Dymensionxyz_Dymension_Rollapp_DenomUnit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DenomUnit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "exponent"),
    3: .same(proto: "aliases"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.exponent) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.aliases) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.exponent != 0 {
      try visitor.visitSingularUInt32Field(value: self.exponent, fieldNumber: 2)
    }
    if !self.aliases.isEmpty {
      try visitor.visitRepeatedStringField(value: self.aliases, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_DenomUnit, rhs: Dymensionxyz_Dymension_Rollapp_DenomUnit) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.exponent != rhs.exponent {return false}
    if lhs.aliases != rhs.aliases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Rollapp_TokenMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .standard(proto: "denom_units"),
    3: .same(proto: "base"),
    4: .same(proto: "display"),
    5: .same(proto: "name"),
    6: .same(proto: "symbol"),
    7: .same(proto: "uri"),
    8: .standard(proto: "uri_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.denomUnits) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.base) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.display) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.uriHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.denomUnits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.denomUnits, fieldNumber: 2)
    }
    if !self.base.isEmpty {
      try visitor.visitSingularStringField(value: self.base, fieldNumber: 3)
    }
    if !self.display.isEmpty {
      try visitor.visitSingularStringField(value: self.display, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 6)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 7)
    }
    if !self.uriHash.isEmpty {
      try visitor.visitSingularStringField(value: self.uriHash, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_TokenMetadata, rhs: Dymensionxyz_Dymension_Rollapp_TokenMetadata) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.denomUnits != rhs.denomUnits {return false}
    if lhs.base != rhs.base {return false}
    if lhs.display != rhs.display {return false}
    if lhs.name != rhs.name {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.uriHash != rhs.uriHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
