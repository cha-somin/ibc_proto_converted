// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/collector/v1beta1/collector.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Collector_V1beta1_CollectorData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collectedStabilityFee: String = String()

  var collectedClosingFee: String = String()

  var collectedOpeningFee: String = String()

  var liquidationRewardsCollected: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Collector_V1beta1_AppAssetIdToFeeCollectedData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var assetID: UInt64 = 0

  var netFeesCollected: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Collector_V1beta1_AppToAssetIdCollectorMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var assetID: UInt64 = 0

  var collector: Comdex_Collector_V1beta1_CollectorData {
    get {return _collector ?? Comdex_Collector_V1beta1_CollectorData()}
    set {_collector = newValue}
  }
  /// Returns true if `collector` has been explicitly set.
  var hasCollector: Bool {return self._collector != nil}
  /// Clears the value of `collector`. Subsequent reads from it will return its default value.
  mutating func clearCollector() {self._collector = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collector: Comdex_Collector_V1beta1_CollectorData? = nil
}

struct Comdex_Collector_V1beta1_CollectorLookupTableData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var collectorAssetID: UInt64 = 0

  var secondaryAssetID: UInt64 = 0

  var surplusThreshold: String = String()

  var debtThreshold: String = String()

  var lockerSavingRate: String = String()

  var lotSize: String = String()

  var bidFactor: String = String()

  var debtLotSize: String = String()

  var blockHeight: Int64 = 0

  var blockTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _blockTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_blockTime = newValue}
  }
  /// Returns true if `blockTime` has been explicitly set.
  var hasBlockTime: Bool {return self._blockTime != nil}
  /// Clears the value of `blockTime`. Subsequent reads from it will return its default value.
  mutating func clearBlockTime() {self._blockTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _blockTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Comdex_Collector_V1beta1_AppToDenomsMapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var assetIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Collector_V1beta1_AppAssetIdToAuctionLookupTable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: UInt64 = 0

  var assetID: UInt64 = 0

  var isSurplusAuction: Bool = false

  var isDebtAuction: Bool = false

  var isDistributor: Bool = false

  var isAuctionActive: Bool = false

  var assetOutOraclePrice: Bool = false

  var assetOutPrice: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Collector_V1beta1_CollectorData: @unchecked Sendable {}
extension Comdex_Collector_V1beta1_AppAssetIdToFeeCollectedData: @unchecked Sendable {}
extension Comdex_Collector_V1beta1_AppToAssetIdCollectorMapping: @unchecked Sendable {}
extension Comdex_Collector_V1beta1_CollectorLookupTableData: @unchecked Sendable {}
extension Comdex_Collector_V1beta1_AppToDenomsMapping: @unchecked Sendable {}
extension Comdex_Collector_V1beta1_AppAssetIdToAuctionLookupTable: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.collector.v1beta1"

extension Comdex_Collector_V1beta1_CollectorData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectorData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collected_stability_fee"),
    2: .standard(proto: "collected_closing_fee"),
    3: .standard(proto: "collected_opening_fee"),
    4: .standard(proto: "liquidation_rewards_collected"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collectedStabilityFee) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collectedClosingFee) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.collectedOpeningFee) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.liquidationRewardsCollected) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collectedStabilityFee.isEmpty {
      try visitor.visitSingularStringField(value: self.collectedStabilityFee, fieldNumber: 1)
    }
    if !self.collectedClosingFee.isEmpty {
      try visitor.visitSingularStringField(value: self.collectedClosingFee, fieldNumber: 2)
    }
    if !self.collectedOpeningFee.isEmpty {
      try visitor.visitSingularStringField(value: self.collectedOpeningFee, fieldNumber: 3)
    }
    if !self.liquidationRewardsCollected.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidationRewardsCollected, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Collector_V1beta1_CollectorData, rhs: Comdex_Collector_V1beta1_CollectorData) -> Bool {
    if lhs.collectedStabilityFee != rhs.collectedStabilityFee {return false}
    if lhs.collectedClosingFee != rhs.collectedClosingFee {return false}
    if lhs.collectedOpeningFee != rhs.collectedOpeningFee {return false}
    if lhs.liquidationRewardsCollected != rhs.liquidationRewardsCollected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Collector_V1beta1_AppAssetIdToFeeCollectedData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppAssetIdToFeeCollectedData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "asset_id"),
    3: .standard(proto: "net_fees_collected"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.netFeesCollected) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 2)
    }
    if !self.netFeesCollected.isEmpty {
      try visitor.visitSingularStringField(value: self.netFeesCollected, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Collector_V1beta1_AppAssetIdToFeeCollectedData, rhs: Comdex_Collector_V1beta1_AppAssetIdToFeeCollectedData) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.netFeesCollected != rhs.netFeesCollected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Collector_V1beta1_AppToAssetIdCollectorMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppToAssetIdCollectorMapping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "asset_id"),
    3: .same(proto: "collector"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._collector) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 2)
    }
    try { if let v = self._collector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Collector_V1beta1_AppToAssetIdCollectorMapping, rhs: Comdex_Collector_V1beta1_AppToAssetIdCollectorMapping) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs._collector != rhs._collector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Collector_V1beta1_CollectorLookupTableData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectorLookupTableData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "collector_asset_id"),
    3: .standard(proto: "secondary_asset_id"),
    4: .standard(proto: "surplus_threshold"),
    5: .standard(proto: "debt_threshold"),
    6: .standard(proto: "locker_saving_rate"),
    7: .standard(proto: "lot_size"),
    8: .standard(proto: "bid_factor"),
    9: .standard(proto: "debt_lot_size"),
    10: .standard(proto: "block_height"),
    11: .standard(proto: "block_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.collectorAssetID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.secondaryAssetID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.surplusThreshold) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.debtThreshold) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.lockerSavingRate) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.lotSize) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.bidFactor) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.debtLotSize) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.blockHeight) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._blockTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.collectorAssetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.collectorAssetID, fieldNumber: 2)
    }
    if self.secondaryAssetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.secondaryAssetID, fieldNumber: 3)
    }
    if !self.surplusThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.surplusThreshold, fieldNumber: 4)
    }
    if !self.debtThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.debtThreshold, fieldNumber: 5)
    }
    if !self.lockerSavingRate.isEmpty {
      try visitor.visitSingularStringField(value: self.lockerSavingRate, fieldNumber: 6)
    }
    if !self.lotSize.isEmpty {
      try visitor.visitSingularStringField(value: self.lotSize, fieldNumber: 7)
    }
    if !self.bidFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.bidFactor, fieldNumber: 8)
    }
    if !self.debtLotSize.isEmpty {
      try visitor.visitSingularStringField(value: self.debtLotSize, fieldNumber: 9)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.blockHeight, fieldNumber: 10)
    }
    try { if let v = self._blockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Collector_V1beta1_CollectorLookupTableData, rhs: Comdex_Collector_V1beta1_CollectorLookupTableData) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.collectorAssetID != rhs.collectorAssetID {return false}
    if lhs.secondaryAssetID != rhs.secondaryAssetID {return false}
    if lhs.surplusThreshold != rhs.surplusThreshold {return false}
    if lhs.debtThreshold != rhs.debtThreshold {return false}
    if lhs.lockerSavingRate != rhs.lockerSavingRate {return false}
    if lhs.lotSize != rhs.lotSize {return false}
    if lhs.bidFactor != rhs.bidFactor {return false}
    if lhs.debtLotSize != rhs.debtLotSize {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs._blockTime != rhs._blockTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Collector_V1beta1_AppToDenomsMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppToDenomsMapping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "asset_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.assetIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if !self.assetIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.assetIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Collector_V1beta1_AppToDenomsMapping, rhs: Comdex_Collector_V1beta1_AppToDenomsMapping) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.assetIds != rhs.assetIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Collector_V1beta1_AppAssetIdToAuctionLookupTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppAssetIdToAuctionLookupTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "asset_id"),
    3: .standard(proto: "is_surplus_auction"),
    4: .standard(proto: "is_debt_auction"),
    5: .standard(proto: "is_distributor"),
    6: .standard(proto: "is_auction_active"),
    7: .standard(proto: "asset_out_oracle_price"),
    8: .standard(proto: "asset_out_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.appID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isSurplusAuction) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isDebtAuction) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isDistributor) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isAuctionActive) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.assetOutOraclePrice) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.assetOutPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appID != 0 {
      try visitor.visitSingularUInt64Field(value: self.appID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetID, fieldNumber: 2)
    }
    if self.isSurplusAuction != false {
      try visitor.visitSingularBoolField(value: self.isSurplusAuction, fieldNumber: 3)
    }
    if self.isDebtAuction != false {
      try visitor.visitSingularBoolField(value: self.isDebtAuction, fieldNumber: 4)
    }
    if self.isDistributor != false {
      try visitor.visitSingularBoolField(value: self.isDistributor, fieldNumber: 5)
    }
    if self.isAuctionActive != false {
      try visitor.visitSingularBoolField(value: self.isAuctionActive, fieldNumber: 6)
    }
    if self.assetOutOraclePrice != false {
      try visitor.visitSingularBoolField(value: self.assetOutOraclePrice, fieldNumber: 7)
    }
    if self.assetOutPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.assetOutPrice, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Collector_V1beta1_AppAssetIdToAuctionLookupTable, rhs: Comdex_Collector_V1beta1_AppAssetIdToAuctionLookupTable) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.isSurplusAuction != rhs.isSurplusAuction {return false}
    if lhs.isDebtAuction != rhs.isDebtAuction {return false}
    if lhs.isDistributor != rhs.isDistributor {return false}
    if lhs.isAuctionActive != rhs.isAuctionActive {return false}
    if lhs.assetOutOraclePrice != rhs.assetOutOraclePrice {return false}
    if lhs.assetOutPrice != rhs.assetOutPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
