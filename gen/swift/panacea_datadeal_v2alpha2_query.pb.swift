// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/datadeal/v2alpha2/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryDealRequest defines the request type for the Query/Deal RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDealRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryDealResponse defines the response type for the Query/Deal RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDealResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deal: Panacea_Datadeal_V2alpha2_Deal {
    get {return _deal ?? Panacea_Datadeal_V2alpha2_Deal()}
    set {_deal = newValue}
  }
  /// Returns true if `deal` has been explicitly set.
  var hasDeal: Bool {return self._deal != nil}
  /// Clears the value of `deal`. Subsequent reads from it will return its default value.
  mutating func clearDeal() {self._deal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deal: Panacea_Datadeal_V2alpha2_Deal? = nil
}

/// QueryDealsRequest defines the request type for the Query/Deals RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDealsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryDealsResponse defines the response type for the Query/Deals RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDealsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deal: [Panacea_Datadeal_V2alpha2_Deal] = []

  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryDataSaleRequest defines the request type for the Query/DataSale RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataSaleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var dataHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryDataSaleResponse defines the response type for the Query/DataSale RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataSaleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataSale: Panacea_Datadeal_V2alpha2_DataSale {
    get {return _dataSale ?? Panacea_Datadeal_V2alpha2_DataSale()}
    set {_dataSale = newValue}
  }
  /// Returns true if `dataSale` has been explicitly set.
  var hasDataSale: Bool {return self._dataSale != nil}
  /// Clears the value of `dataSale`. Subsequent reads from it will return its default value.
  mutating func clearDataSale() {self._dataSale = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataSale: Panacea_Datadeal_V2alpha2_DataSale? = nil
}

/// QueryDataSalesRequest defines the request type for the Query/DataSales RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataSalesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryDataSalesResponse defines the response type for the Query/DataSales RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataSalesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataSale: [Panacea_Datadeal_V2alpha2_DataSale] = []

  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryDataVerificationRequest defines the request type for the Query/DataVerificationVote RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var dataHash: String = String()

  var voterAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryDataVerificationVoteResponse defines the response type for the Query/DataVerificationVote RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataVerificationVote: Panacea_Datadeal_V2alpha2_DataVerificationVote {
    get {return _dataVerificationVote ?? Panacea_Datadeal_V2alpha2_DataVerificationVote()}
    set {_dataVerificationVote = newValue}
  }
  /// Returns true if `dataVerificationVote` has been explicitly set.
  var hasDataVerificationVote: Bool {return self._dataVerificationVote != nil}
  /// Clears the value of `dataVerificationVote`. Subsequent reads from it will return its default value.
  mutating func clearDataVerificationVote() {self._dataVerificationVote = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataVerificationVote: Panacea_Datadeal_V2alpha2_DataVerificationVote? = nil
}

/// QueryDataDeliveryVoteRequest defines the request type for the Query/DataDeliveryVote RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var dataHash: String = String()

  var voterAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryDataDeliveryVoteResponse defines the response type for the Query/DataDeliveryVote RPC method.
struct Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataDeliveryVote: Panacea_Datadeal_V2alpha2_DataDeliveryVote {
    get {return _dataDeliveryVote ?? Panacea_Datadeal_V2alpha2_DataDeliveryVote()}
    set {_dataDeliveryVote = newValue}
  }
  /// Returns true if `dataDeliveryVote` has been explicitly set.
  var hasDataDeliveryVote: Bool {return self._dataDeliveryVote != nil}
  /// Clears the value of `dataDeliveryVote`. Subsequent reads from it will return its default value.
  mutating func clearDataDeliveryVote() {self._dataDeliveryVote = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataDeliveryVote: Panacea_Datadeal_V2alpha2_DataDeliveryVote? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Datadeal_V2alpha2_QueryDealRequest: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDealResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDealsRequest: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDealsResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataSaleRequest: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataSaleResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataSalesRequest: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataSalesResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.datadeal.v2alpha2"

extension Panacea_Datadeal_V2alpha2_QueryDealRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDealRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDealRequest, rhs: Panacea_Datadeal_V2alpha2_QueryDealRequest) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDealResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDealResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._deal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDealResponse, rhs: Panacea_Datadeal_V2alpha2_QueryDealResponse) -> Bool {
    if lhs._deal != rhs._deal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDealsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDealsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDealsRequest, rhs: Panacea_Datadeal_V2alpha2_QueryDealsRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDealsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDealsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deal"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.deal) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.deal.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deal, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDealsResponse, rhs: Panacea_Datadeal_V2alpha2_QueryDealsResponse) -> Bool {
    if lhs.deal != rhs.deal {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataSaleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataSaleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "data_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, rhs: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataSaleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataSaleResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_sale"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dataSale) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dataSale {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataSaleResponse, rhs: Panacea_Datadeal_V2alpha2_QueryDataSaleResponse) -> Bool {
    if lhs._dataSale != rhs._dataSale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataSalesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataSalesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, rhs: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataSalesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataSalesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_sale"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dataSale) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataSale.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataSale, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataSalesResponse, rhs: Panacea_Datadeal_V2alpha2_QueryDataSalesResponse) -> Bool {
    if lhs.dataSale != rhs.dataSale {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataVerificationVoteRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "data_hash"),
    3: .standard(proto: "voter_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.voterAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 2)
    }
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, rhs: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataVerificationVoteResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_verification_vote"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dataVerificationVote) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dataVerificationVote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse, rhs: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse) -> Bool {
    if lhs._dataVerificationVote != rhs._dataVerificationVote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataDeliveryVoteRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "data_hash"),
    3: .standard(proto: "voter_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.voterAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 2)
    }
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, rhs: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryDataDeliveryVoteResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_delivery_vote"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dataDeliveryVote) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dataDeliveryVote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse, rhs: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse) -> Bool {
    if lhs._dataDeliveryVote != rhs._dataDeliveryVote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
