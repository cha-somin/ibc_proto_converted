// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/multisig/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Multisig_V1beta1_Key {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var snapshot: Axelar_Snapshot_Exported_V1beta1_Snapshot {
    get {return _snapshot ?? Axelar_Snapshot_Exported_V1beta1_Snapshot()}
    set {_snapshot = newValue}
  }
  /// Returns true if `snapshot` has been explicitly set.
  var hasSnapshot: Bool {return self._snapshot != nil}
  /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
  mutating func clearSnapshot() {self._snapshot = nil}

  var pubKeys: Dictionary<String,Data> = [:]

  var signingThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _signingThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_signingThreshold = newValue}
  }
  /// Returns true if `signingThreshold` has been explicitly set.
  var hasSigningThreshold: Bool {return self._signingThreshold != nil}
  /// Clears the value of `signingThreshold`. Subsequent reads from it will return its default value.
  mutating func clearSigningThreshold() {self._signingThreshold = nil}

  var state: Axelar_Multisig_Exported_V1beta1_KeyState = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _snapshot: Axelar_Snapshot_Exported_V1beta1_Snapshot? = nil
  fileprivate var _signingThreshold: Axelar_Utils_V1beta1_Threshold? = nil
}

struct Axelar_Multisig_V1beta1_KeygenSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Axelar_Multisig_V1beta1_Key {
    get {return _storage._key ?? Axelar_Multisig_V1beta1_Key()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {_uniqueStorage()._key = nil}

  var state: Axelar_Multisig_Exported_V1beta1_MultisigState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var keygenThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _storage._keygenThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_uniqueStorage()._keygenThreshold = newValue}
  }
  /// Returns true if `keygenThreshold` has been explicitly set.
  var hasKeygenThreshold: Bool {return _storage._keygenThreshold != nil}
  /// Clears the value of `keygenThreshold`. Subsequent reads from it will return its default value.
  mutating func clearKeygenThreshold() {_uniqueStorage()._keygenThreshold = nil}

  var expiresAt: Int64 {
    get {return _storage._expiresAt}
    set {_uniqueStorage()._expiresAt = newValue}
  }

  var completedAt: Int64 {
    get {return _storage._completedAt}
    set {_uniqueStorage()._completedAt = newValue}
  }

  var isPubKeyReceived: Dictionary<String,Bool> {
    get {return _storage._isPubKeyReceived}
    set {_uniqueStorage()._isPubKeyReceived = newValue}
  }

  var gracePeriod: Int64 {
    get {return _storage._gracePeriod}
    set {_uniqueStorage()._gracePeriod = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Axelar_Multisig_V1beta1_MultiSig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var payloadHash: Data = Data()

  var sigs: Dictionary<String,Data> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Multisig_V1beta1_SigningSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var multiSig: Axelar_Multisig_V1beta1_MultiSig {
    get {return _storage._multiSig ?? Axelar_Multisig_V1beta1_MultiSig()}
    set {_uniqueStorage()._multiSig = newValue}
  }
  /// Returns true if `multiSig` has been explicitly set.
  var hasMultiSig: Bool {return _storage._multiSig != nil}
  /// Clears the value of `multiSig`. Subsequent reads from it will return its default value.
  mutating func clearMultiSig() {_uniqueStorage()._multiSig = nil}

  var state: Axelar_Multisig_Exported_V1beta1_MultisigState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var key: Axelar_Multisig_V1beta1_Key {
    get {return _storage._key ?? Axelar_Multisig_V1beta1_Key()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {_uniqueStorage()._key = nil}

  var expiresAt: Int64 {
    get {return _storage._expiresAt}
    set {_uniqueStorage()._expiresAt = newValue}
  }

  var completedAt: Int64 {
    get {return _storage._completedAt}
    set {_uniqueStorage()._completedAt = newValue}
  }

  var gracePeriod: Int64 {
    get {return _storage._gracePeriod}
    set {_uniqueStorage()._gracePeriod = newValue}
  }

  var module: String {
    get {return _storage._module}
    set {_uniqueStorage()._module = newValue}
  }

  var moduleMetadata: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._moduleMetadata ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._moduleMetadata = newValue}
  }
  /// Returns true if `moduleMetadata` has been explicitly set.
  var hasModuleMetadata: Bool {return _storage._moduleMetadata != nil}
  /// Clears the value of `moduleMetadata`. Subsequent reads from it will return its default value.
  mutating func clearModuleMetadata() {_uniqueStorage()._moduleMetadata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Axelar_Multisig_V1beta1_KeyEpoch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epoch: UInt64 = 0

  var chain: String = String()

  var keyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Axelar_Multisig_V1beta1_Key: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeygenSession: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_MultiSig: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_SigningSession: @unchecked Sendable {}
extension Axelar_Multisig_V1beta1_KeyEpoch: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.multisig.v1beta1"

extension Axelar_Multisig_V1beta1_Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Key"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "snapshot"),
    3: .standard(proto: "pub_keys"),
    4: .standard(proto: "signing_threshold"),
    5: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._snapshot) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.pubKeys) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._signingThreshold) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._snapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.pubKeys.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.pubKeys, fieldNumber: 3)
    }
    try { if let v = self._signingThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_Key, rhs: Axelar_Multisig_V1beta1_Key) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._snapshot != rhs._snapshot {return false}
    if lhs.pubKeys != rhs.pubKeys {return false}
    if lhs._signingThreshold != rhs._signingThreshold {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeygenSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeygenSession"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "state"),
    3: .standard(proto: "keygen_threshold"),
    4: .standard(proto: "expires_at"),
    5: .standard(proto: "completed_at"),
    6: .standard(proto: "is_pub_key_received"),
    7: .standard(proto: "grace_period"),
  ]

  fileprivate class _StorageClass {
    var _key: Axelar_Multisig_V1beta1_Key? = nil
    var _state: Axelar_Multisig_Exported_V1beta1_MultisigState = .unspecified
    var _keygenThreshold: Axelar_Utils_V1beta1_Threshold? = nil
    var _expiresAt: Int64 = 0
    var _completedAt: Int64 = 0
    var _isPubKeyReceived: Dictionary<String,Bool> = [:]
    var _gracePeriod: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _state = source._state
      _keygenThreshold = source._keygenThreshold
      _expiresAt = source._expiresAt
      _completedAt = source._completedAt
      _isPubKeyReceived = source._isPubKeyReceived
      _gracePeriod = source._gracePeriod
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._key) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._keygenThreshold) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._expiresAt) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._completedAt) }()
        case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: &_storage._isPubKeyReceived) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._gracePeriod) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 2)
      }
      try { if let v = _storage._keygenThreshold {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._expiresAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expiresAt, fieldNumber: 4)
      }
      if _storage._completedAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._completedAt, fieldNumber: 5)
      }
      if !_storage._isPubKeyReceived.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: _storage._isPubKeyReceived, fieldNumber: 6)
      }
      if _storage._gracePeriod != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gracePeriod, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeygenSession, rhs: Axelar_Multisig_V1beta1_KeygenSession) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._keygenThreshold != rhs_storage._keygenThreshold {return false}
        if _storage._expiresAt != rhs_storage._expiresAt {return false}
        if _storage._completedAt != rhs_storage._completedAt {return false}
        if _storage._isPubKeyReceived != rhs_storage._isPubKeyReceived {return false}
        if _storage._gracePeriod != rhs_storage._gracePeriod {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_MultiSig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultiSig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
    2: .standard(proto: "payload_hash"),
    3: .same(proto: "sigs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.payloadHash) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.sigs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    if !self.payloadHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.payloadHash, fieldNumber: 2)
    }
    if !self.sigs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.sigs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_MultiSig, rhs: Axelar_Multisig_V1beta1_MultiSig) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.payloadHash != rhs.payloadHash {return false}
    if lhs.sigs != rhs.sigs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_SigningSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SigningSession"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "multi_sig"),
    3: .same(proto: "state"),
    4: .same(proto: "key"),
    5: .standard(proto: "expires_at"),
    6: .standard(proto: "completed_at"),
    7: .standard(proto: "grace_period"),
    8: .same(proto: "module"),
    9: .standard(proto: "module_metadata"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _multiSig: Axelar_Multisig_V1beta1_MultiSig? = nil
    var _state: Axelar_Multisig_Exported_V1beta1_MultisigState = .unspecified
    var _key: Axelar_Multisig_V1beta1_Key? = nil
    var _expiresAt: Int64 = 0
    var _completedAt: Int64 = 0
    var _gracePeriod: Int64 = 0
    var _module: String = String()
    var _moduleMetadata: SwiftProtobuf.Google_Protobuf_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _multiSig = source._multiSig
      _state = source._state
      _key = source._key
      _expiresAt = source._expiresAt
      _completedAt = source._completedAt
      _gracePeriod = source._gracePeriod
      _module = source._module
      _moduleMetadata = source._moduleMetadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._multiSig) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._key) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._expiresAt) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._completedAt) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._gracePeriod) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._module) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._moduleMetadata) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      try { if let v = _storage._multiSig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 3)
      }
      try { if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._expiresAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expiresAt, fieldNumber: 5)
      }
      if _storage._completedAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._completedAt, fieldNumber: 6)
      }
      if _storage._gracePeriod != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gracePeriod, fieldNumber: 7)
      }
      if !_storage._module.isEmpty {
        try visitor.visitSingularStringField(value: _storage._module, fieldNumber: 8)
      }
      try { if let v = _storage._moduleMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_SigningSession, rhs: Axelar_Multisig_V1beta1_SigningSession) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._multiSig != rhs_storage._multiSig {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._expiresAt != rhs_storage._expiresAt {return false}
        if _storage._completedAt != rhs_storage._completedAt {return false}
        if _storage._gracePeriod != rhs_storage._gracePeriod {return false}
        if _storage._module != rhs_storage._module {return false}
        if _storage._moduleMetadata != rhs_storage._moduleMetadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Multisig_V1beta1_KeyEpoch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyEpoch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "epoch"),
    2: .same(proto: "chain"),
    3: .standard(proto: "key_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.epoch) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.epoch, fieldNumber: 1)
    }
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 2)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Multisig_V1beta1_KeyEpoch, rhs: Axelar_Multisig_V1beta1_KeyEpoch) -> Bool {
    if lhs.epoch != rhs.epoch {return false}
    if lhs.chain != rhs.chain {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
