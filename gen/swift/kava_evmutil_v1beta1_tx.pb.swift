// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/evmutil/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgConvertCoinToERC20 defines a conversion from sdk.Coin to Kava ERC20.
struct Kava_Evmutil_V1beta1_MsgConvertCoinToERC20 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Kava bech32 address initiating the conversion.
  var initiator: String = String()

  /// EVM 0x hex address that will receive the converted Kava ERC20 tokens.
  var receiver: String = String()

  /// Amount is the sdk.Coin amount to convert.
  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgConvertCoinToERC20Response defines the response value from Msg/ConvertCoinToERC20.
struct Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgConvertERC20ToCoin defines a conversion from Kava ERC20 to sdk.Coin.
struct Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// EVM 0x hex address initiating the conversion.
  var initiator: String = String()

  /// Kava bech32 address that will receive the converted sdk.Coin.
  var receiver: String = String()

  /// EVM 0x hex address of the ERC20 contract.
  var kavaErc20Address: String = String()

  /// ERC20 token amount to convert.
  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgConvertERC20ToCoinResponse defines the response value from
/// Msg/MsgConvertERC20ToCoin.
struct Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ConvertCosmosCoinToERC20 defines a conversion from cosmos sdk.Coin to ERC20.
struct Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Kava bech32 address initiating the conversion.
  var initiator: String = String()

  /// EVM hex address that will receive the ERC20 tokens.
  var receiver: String = String()

  /// Amount is the sdk.Coin amount to convert.
  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgConvertCosmosCoinToERC20Response defines the response value from Msg/MsgConvertCosmosCoinToERC20.
struct Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kava_Evmutil_V1beta1_MsgConvertCoinToERC20: @unchecked Sendable {}
extension Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response: @unchecked Sendable {}
extension Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin: @unchecked Sendable {}
extension Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse: @unchecked Sendable {}
extension Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20: @unchecked Sendable {}
extension Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20Response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.evmutil.v1beta1"

extension Kava_Evmutil_V1beta1_MsgConvertCoinToERC20: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgConvertCoinToERC20"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "initiator"),
    2: .same(proto: "receiver"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.initiator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.initiator.isEmpty {
      try visitor.visitSingularStringField(value: self.initiator, fieldNumber: 1)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20, rhs: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20) -> Bool {
    if lhs.initiator != rhs.initiator {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgConvertCoinToERC20Response"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response, rhs: Kava_Evmutil_V1beta1_MsgConvertCoinToERC20Response) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgConvertERC20ToCoin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "initiator"),
    2: .same(proto: "receiver"),
    3: .standard(proto: "kava_erc20_address"),
    4: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.initiator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.kavaErc20Address) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.initiator.isEmpty {
      try visitor.visitSingularStringField(value: self.initiator, fieldNumber: 1)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 2)
    }
    if !self.kavaErc20Address.isEmpty {
      try visitor.visitSingularStringField(value: self.kavaErc20Address, fieldNumber: 3)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin, rhs: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoin) -> Bool {
    if lhs.initiator != rhs.initiator {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs.kavaErc20Address != rhs.kavaErc20Address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgConvertERC20ToCoinResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse, rhs: Kava_Evmutil_V1beta1_MsgConvertERC20ToCoinResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgConvertCosmosCoinToERC20"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "initiator"),
    2: .same(proto: "receiver"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.initiator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.initiator.isEmpty {
      try visitor.visitSingularStringField(value: self.initiator, fieldNumber: 1)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20, rhs: Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20) -> Bool {
    if lhs.initiator != rhs.initiator {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgConvertCosmosCoinToERC20Response"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20Response, rhs: Kava_Evmutil_V1beta1_MsgConvertCosmosCoinToERC20Response) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
