// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/pool/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgFundPool defines a SDK message for funding a pool.
struct Kyve_Pool_V1beta1_MsgFundPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator ...
  var creator: String = String()

  /// id ...
  var id: UInt64 = 0

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgFundPoolResponse defines the Msg/DefundPool response type.
struct Kyve_Pool_V1beta1_MsgFundPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDefundPool defines a SDK message for defunding a pool.
struct Kyve_Pool_V1beta1_MsgDefundPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creator ...
  var creator: String = String()

  /// id ...
  var id: UInt64 = 0

  /// amount ...
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDefundPoolResponse defines the Msg/DefundPool response type.
struct Kyve_Pool_V1beta1_MsgDefundPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreatePool defines a SDK message for creating a new pool.
struct Kyve_Pool_V1beta1_MsgCreatePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// name ...
  var name: String = String()

  /// runtime ...
  var runtime: String = String()

  /// logo ...
  var logo: String = String()

  /// config ...
  var config: String = String()

  /// start_key ...
  var startKey: String = String()

  /// upload_interval ...
  var uploadInterval: UInt64 = 0

  /// operating_cost ...
  var operatingCost: UInt64 = 0

  /// min_delegation ...
  var minDelegation: UInt64 = 0

  /// max_bundle_size ...
  var maxBundleSize: UInt64 = 0

  /// version ...
  var version: String = String()

  /// binaries ...
  var binaries: String = String()

  /// storage_provider_id ...
  var storageProviderID: UInt32 = 0

  /// compression_id ...
  var compressionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreatePoolResponse defines the Msg/CreatePool response type.
struct Kyve_Pool_V1beta1_MsgCreatePoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdatePool defines a SDK message for updating an existing pool.
struct Kyve_Pool_V1beta1_MsgUpdatePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// id ...
  var id: UInt64 = 0

  /// payload ...
  var payload: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdatePoolResponse defines the Msg/UpdatePool response type.
struct Kyve_Pool_V1beta1_MsgUpdatePoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDisablePool defines a SDK message for disabling an existing pool.
struct Kyve_Pool_V1beta1_MsgDisablePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// id ...
  var id: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDisablePoolResponse defines the Msg/DisablePool response type.
struct Kyve_Pool_V1beta1_MsgDisablePoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEnablePool defines a SDK message for enabling an existing pool.
struct Kyve_Pool_V1beta1_MsgEnablePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// id ...
  var id: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEnablePoolResponse defines the Msg/EnablePool response type.
struct Kyve_Pool_V1beta1_MsgEnablePoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgScheduleRuntimeUpgrade defines a SDK message for scheduling a runtime upgrade.
struct Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// runtime ...
  var runtime: String = String()

  /// version ...
  var version: String = String()

  /// scheduled_at ...
  var scheduledAt: UInt64 = 0

  /// duration ...
  var duration: UInt64 = 0

  /// binaries ...
  var binaries: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgScheduleRuntimeUpgradeResponse defines the Msg/ScheduleRuntimeUpgrade response type.
struct Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelRuntimeUpgrade defines a SDK message for cancelling a runtime upgrade.
struct Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account.
  var authority: String = String()

  /// runtime ...
  var runtime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCancelRuntimeUpgradeResponse defines the Msg/CancelRuntimeUpgrade response type.
struct Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Pool_V1beta1_MsgFundPool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgFundPoolResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgDefundPool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgDefundPoolResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgCreatePool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgCreatePoolResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgUpdatePool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgUpdatePoolResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgDisablePool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgDisablePoolResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgEnablePool: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgEnablePoolResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade: @unchecked Sendable {}
extension Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.pool.v1beta1"

extension Kyve_Pool_V1beta1_MsgFundPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFundPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "id"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgFundPool, rhs: Kyve_Pool_V1beta1_MsgFundPool) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.id != rhs.id {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgFundPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFundPoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgFundPoolResponse, rhs: Kyve_Pool_V1beta1_MsgFundPoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgDefundPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDefundPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "id"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgDefundPool, rhs: Kyve_Pool_V1beta1_MsgDefundPool) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs.id != rhs.id {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgDefundPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDefundPoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgDefundPoolResponse, rhs: Kyve_Pool_V1beta1_MsgDefundPoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgCreatePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "name"),
    3: .same(proto: "runtime"),
    4: .same(proto: "logo"),
    5: .same(proto: "config"),
    6: .standard(proto: "start_key"),
    7: .standard(proto: "upload_interval"),
    8: .standard(proto: "operating_cost"),
    9: .standard(proto: "min_delegation"),
    10: .standard(proto: "max_bundle_size"),
    11: .same(proto: "version"),
    12: .same(proto: "binaries"),
    13: .standard(proto: "storage_provider_id"),
    14: .standard(proto: "compression_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.logo) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.config) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.startKey) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.uploadInterval) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.operatingCost) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.minDelegation) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.maxBundleSize) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.binaries) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self.storageProviderID) }()
      case 14: try { try decoder.decodeSingularUInt32Field(value: &self.compressionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 3)
    }
    if !self.logo.isEmpty {
      try visitor.visitSingularStringField(value: self.logo, fieldNumber: 4)
    }
    if !self.config.isEmpty {
      try visitor.visitSingularStringField(value: self.config, fieldNumber: 5)
    }
    if !self.startKey.isEmpty {
      try visitor.visitSingularStringField(value: self.startKey, fieldNumber: 6)
    }
    if self.uploadInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.uploadInterval, fieldNumber: 7)
    }
    if self.operatingCost != 0 {
      try visitor.visitSingularUInt64Field(value: self.operatingCost, fieldNumber: 8)
    }
    if self.minDelegation != 0 {
      try visitor.visitSingularUInt64Field(value: self.minDelegation, fieldNumber: 9)
    }
    if self.maxBundleSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxBundleSize, fieldNumber: 10)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 11)
    }
    if !self.binaries.isEmpty {
      try visitor.visitSingularStringField(value: self.binaries, fieldNumber: 12)
    }
    if self.storageProviderID != 0 {
      try visitor.visitSingularUInt32Field(value: self.storageProviderID, fieldNumber: 13)
    }
    if self.compressionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.compressionID, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgCreatePool, rhs: Kyve_Pool_V1beta1_MsgCreatePool) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.name != rhs.name {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs.logo != rhs.logo {return false}
    if lhs.config != rhs.config {return false}
    if lhs.startKey != rhs.startKey {return false}
    if lhs.uploadInterval != rhs.uploadInterval {return false}
    if lhs.operatingCost != rhs.operatingCost {return false}
    if lhs.minDelegation != rhs.minDelegation {return false}
    if lhs.maxBundleSize != rhs.maxBundleSize {return false}
    if lhs.version != rhs.version {return false}
    if lhs.binaries != rhs.binaries {return false}
    if lhs.storageProviderID != rhs.storageProviderID {return false}
    if lhs.compressionID != rhs.compressionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgCreatePoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgCreatePoolResponse, rhs: Kyve_Pool_V1beta1_MsgCreatePoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgUpdatePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdatePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "id"),
    3: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgUpdatePool, rhs: Kyve_Pool_V1beta1_MsgUpdatePool) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.id != rhs.id {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgUpdatePoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdatePoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgUpdatePoolResponse, rhs: Kyve_Pool_V1beta1_MsgUpdatePoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgDisablePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDisablePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgDisablePool, rhs: Kyve_Pool_V1beta1_MsgDisablePool) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgDisablePoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDisablePoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgDisablePoolResponse, rhs: Kyve_Pool_V1beta1_MsgDisablePoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgEnablePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEnablePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgEnablePool, rhs: Kyve_Pool_V1beta1_MsgEnablePool) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgEnablePoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEnablePoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgEnablePoolResponse, rhs: Kyve_Pool_V1beta1_MsgEnablePoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgScheduleRuntimeUpgrade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "runtime"),
    3: .same(proto: "version"),
    4: .standard(proto: "scheduled_at"),
    5: .same(proto: "duration"),
    6: .same(proto: "binaries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.scheduledAt) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.duration) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.binaries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 2)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    if self.scheduledAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.scheduledAt, fieldNumber: 4)
    }
    if self.duration != 0 {
      try visitor.visitSingularUInt64Field(value: self.duration, fieldNumber: 5)
    }
    if !self.binaries.isEmpty {
      try visitor.visitSingularStringField(value: self.binaries, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade, rhs: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgrade) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs.version != rhs.version {return false}
    if lhs.scheduledAt != rhs.scheduledAt {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.binaries != rhs.binaries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgScheduleRuntimeUpgradeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse, rhs: Kyve_Pool_V1beta1_MsgScheduleRuntimeUpgradeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelRuntimeUpgrade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .same(proto: "runtime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.runtime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.runtime.isEmpty {
      try visitor.visitSingularStringField(value: self.runtime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade, rhs: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgrade) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.runtime != rhs.runtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelRuntimeUpgradeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse, rhs: Kyve_Pool_V1beta1_MsgCancelRuntimeUpgradeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
