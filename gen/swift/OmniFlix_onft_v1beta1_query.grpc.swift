//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: OmniFlix/onft/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `OmniFlix_Onft_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol OmniFlix_Onft_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func collection(
    _ request: OmniFlix_Onft_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>

  func iBCCollection(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>

  func denom(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>

  func iBCDenom(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>

  func denoms(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryDenomsRequest, OmniFlix_Onft_V1beta1_QueryDenomsResponse>

  func oNFT(
    _ request: OmniFlix_Onft_V1beta1_QueryONFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>

  func iBCDenomONFT(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>

  func ownerONFTs(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>

  func ownerIBCDenomONFTs(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>

  func supply(
    _ request: OmniFlix_Onft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QuerySupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>

  func iBCDenomSupply(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>

  func params(
    _ request: OmniFlix_Onft_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryParamsRequest, OmniFlix_Onft_V1beta1_QueryParamsResponse>
}

extension OmniFlix_Onft_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "OmniFlix.onft.v1beta1.Query"
  }

  /// Unary call to Collection
  ///
  /// - Parameters:
  ///   - request: Request to send to Collection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collection(
    _ request: OmniFlix_Onft_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  /// Unary call to IBCCollection
  ///
  /// - Parameters:
  ///   - request: Request to send to IBCCollection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func iBCCollection(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCCollection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCCollectionInterceptors() ?? []
    )
  }

  /// Unary call to Denom
  ///
  /// - Parameters:
  ///   - request: Request to send to Denom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denom(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }

  /// Unary call to IBCDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to IBCDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func iBCDenom(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomInterceptors() ?? []
    )
  }

  /// Unary call to Denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to Denoms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denoms(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryDenomsRequest, OmniFlix_Onft_V1beta1_QueryDenomsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsInterceptors() ?? []
    )
  }

  /// Unary call to ONFT
  ///
  /// - Parameters:
  ///   - request: Request to send to ONFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oNFT(
    _ request: OmniFlix_Onft_V1beta1_QueryONFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.oNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeONFTInterceptors() ?? []
    )
  }

  /// Unary call to IBCDenomONFT
  ///
  /// - Parameters:
  ///   - request: Request to send to IBCDenomONFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func iBCDenomONFT(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomONFTInterceptors() ?? []
    )
  }

  /// Unary call to OwnerONFTs
  ///
  /// - Parameters:
  ///   - request: Request to send to OwnerONFTs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ownerONFTs(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerONFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerONFTsInterceptors() ?? []
    )
  }

  /// Unary call to OwnerIBCDenomONFTs
  ///
  /// - Parameters:
  ///   - request: Request to send to OwnerIBCDenomONFTs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ownerIBCDenomONFTs(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerIBCDenomONFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerIBCDenomONFTsInterceptors() ?? []
    )
  }

  /// Unary call to Supply
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: OmniFlix_Onft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QuerySupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// Unary call to IBCDenomSupply
  ///
  /// - Parameters:
  ///   - request: Request to send to IBCDenomSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func iBCDenomSupply(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomSupplyInterceptors() ?? []
    )
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: OmniFlix_Onft_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OmniFlix_Onft_V1beta1_QueryParamsRequest, OmniFlix_Onft_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension OmniFlix_Onft_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "OmniFlix_Onft_V1beta1_QueryNIOClient")
internal final class OmniFlix_Onft_V1beta1_QueryClient: OmniFlix_Onft_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the OmniFlix.onft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct OmniFlix_Onft_V1beta1_QueryNIOClient: OmniFlix_Onft_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the OmniFlix.onft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Onft_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeCollectionCall(
    _ request: OmniFlix_Onft_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>

  func makeIbccollectionCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>

  func makeDenomCall(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>

  func makeIbcdenomCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>

  func makeDenomsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryDenomsRequest, OmniFlix_Onft_V1beta1_QueryDenomsResponse>

  func makeOnftCall(
    _ request: OmniFlix_Onft_V1beta1_QueryONFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>

  func makeIbcdenomOnftCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>

  func makeOwnerOnftsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>

  func makeOwnerIbcdenomOnftsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>

  func makeSupplyCall(
    _ request: OmniFlix_Onft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QuerySupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>

  func makeIbcdenomSupplyCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>

  func makeParamsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryParamsRequest, OmniFlix_Onft_V1beta1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Onft_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Onft_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCollectionCall(
    _ request: OmniFlix_Onft_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func makeIbccollectionCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCCollection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCCollectionInterceptors() ?? []
    )
  }

  internal func makeDenomCall(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }

  internal func makeIbcdenomCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomInterceptors() ?? []
    )
  }

  internal func makeDenomsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryDenomsRequest, OmniFlix_Onft_V1beta1_QueryDenomsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsInterceptors() ?? []
    )
  }

  internal func makeOnftCall(
    _ request: OmniFlix_Onft_V1beta1_QueryONFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.oNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeONFTInterceptors() ?? []
    )
  }

  internal func makeIbcdenomOnftCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomONFTInterceptors() ?? []
    )
  }

  internal func makeOwnerOnftsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerONFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerONFTsInterceptors() ?? []
    )
  }

  internal func makeOwnerIbcdenomOnftsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerIBCDenomONFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerIBCDenomONFTsInterceptors() ?? []
    )
  }

  internal func makeSupplyCall(
    _ request: OmniFlix_Onft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QuerySupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func makeIbcdenomSupplyCall(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomSupplyInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: OmniFlix_Onft_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OmniFlix_Onft_V1beta1_QueryParamsRequest, OmniFlix_Onft_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Onft_V1beta1_QueryAsyncClientProtocol {
  internal func collection(
    _ request: OmniFlix_Onft_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryCollectionResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func iBCCollection(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryCollectionResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCCollection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCCollectionInterceptors() ?? []
    )
  }

  internal func denom(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomInterceptors() ?? []
    )
  }

  internal func iBCDenom(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomInterceptors() ?? []
    )
  }

  internal func denoms(
    _ request: OmniFlix_Onft_V1beta1_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryDenomsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsInterceptors() ?? []
    )
  }

  internal func oNFT(
    _ request: OmniFlix_Onft_V1beta1_QueryONFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryONFTResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.oNFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeONFTInterceptors() ?? []
    )
  }

  internal func iBCDenomONFT(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryONFTResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomONFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomONFTInterceptors() ?? []
    )
  }

  internal func ownerONFTs(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerONFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerONFTsInterceptors() ?? []
    )
  }

  internal func ownerIBCDenomONFTs(
    _ request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerIBCDenomONFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerIBCDenomONFTsInterceptors() ?? []
    )
  }

  internal func supply(
    _ request: OmniFlix_Onft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QuerySupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func iBCDenomSupply(
    _ request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QuerySupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIBCDenomSupplyInterceptors() ?? []
    )
  }

  internal func params(
    _ request: OmniFlix_Onft_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OmniFlix_Onft_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct OmniFlix_Onft_V1beta1_QueryAsyncClient: OmniFlix_Onft_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol OmniFlix_Onft_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'collection'.
  func makeCollectionInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when invoking 'iBCCollection'.
  func makeIBCCollectionInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when invoking 'denom'.
  func makeDenomInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'iBCDenom'.
  func makeIBCDenomInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'denoms'.
  func makeDenomsInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryDenomsRequest, OmniFlix_Onft_V1beta1_QueryDenomsResponse>]

  /// - Returns: Interceptors to use when invoking 'oNFT'.
  func makeONFTInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>]

  /// - Returns: Interceptors to use when invoking 'iBCDenomONFT'.
  func makeIBCDenomONFTInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>]

  /// - Returns: Interceptors to use when invoking 'ownerONFTs'.
  func makeOwnerONFTsInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>]

  /// - Returns: Interceptors to use when invoking 'ownerIBCDenomONFTs'.
  func makeOwnerIBCDenomONFTsInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>]

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QuerySupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'iBCDenomSupply'.
  func makeIBCDenomSupplyInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<OmniFlix_Onft_V1beta1_QueryParamsRequest, OmniFlix_Onft_V1beta1_QueryParamsResponse>]
}

internal enum OmniFlix_Onft_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "OmniFlix.onft.v1beta1.Query",
    methods: [
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.collection,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCCollection,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denom,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenom,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.denoms,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.oNFT,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomONFT,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerONFTs,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.ownerIBCDenomONFTs,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.supply,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.iBCDenomSupply,
      OmniFlix_Onft_V1beta1_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/OmniFlix.onft.v1beta1.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let iBCCollection = GRPCMethodDescriptor(
      name: "IBCCollection",
      path: "/OmniFlix.onft.v1beta1.Query/IBCCollection",
      type: GRPCCallType.unary
    )

    internal static let denom = GRPCMethodDescriptor(
      name: "Denom",
      path: "/OmniFlix.onft.v1beta1.Query/Denom",
      type: GRPCCallType.unary
    )

    internal static let iBCDenom = GRPCMethodDescriptor(
      name: "IBCDenom",
      path: "/OmniFlix.onft.v1beta1.Query/IBCDenom",
      type: GRPCCallType.unary
    )

    internal static let denoms = GRPCMethodDescriptor(
      name: "Denoms",
      path: "/OmniFlix.onft.v1beta1.Query/Denoms",
      type: GRPCCallType.unary
    )

    internal static let oNFT = GRPCMethodDescriptor(
      name: "ONFT",
      path: "/OmniFlix.onft.v1beta1.Query/ONFT",
      type: GRPCCallType.unary
    )

    internal static let iBCDenomONFT = GRPCMethodDescriptor(
      name: "IBCDenomONFT",
      path: "/OmniFlix.onft.v1beta1.Query/IBCDenomONFT",
      type: GRPCCallType.unary
    )

    internal static let ownerONFTs = GRPCMethodDescriptor(
      name: "OwnerONFTs",
      path: "/OmniFlix.onft.v1beta1.Query/OwnerONFTs",
      type: GRPCCallType.unary
    )

    internal static let ownerIBCDenomONFTs = GRPCMethodDescriptor(
      name: "OwnerIBCDenomONFTs",
      path: "/OmniFlix.onft.v1beta1.Query/OwnerIBCDenomONFTs",
      type: GRPCCallType.unary
    )

    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/OmniFlix.onft.v1beta1.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let iBCDenomSupply = GRPCMethodDescriptor(
      name: "IBCDenomSupply",
      path: "/OmniFlix.onft.v1beta1.Query/IBCDenomSupply",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/OmniFlix.onft.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol OmniFlix_Onft_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: OmniFlix_Onft_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  func collection(request: OmniFlix_Onft_V1beta1_QueryCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryCollectionResponse>

  func iBCCollection(request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryCollectionResponse>

  func denom(request: OmniFlix_Onft_V1beta1_QueryDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryDenomResponse>

  func iBCDenom(request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryDenomResponse>

  func denoms(request: OmniFlix_Onft_V1beta1_QueryDenomsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryDenomsResponse>

  func oNFT(request: OmniFlix_Onft_V1beta1_QueryONFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryONFTResponse>

  func iBCDenomONFT(request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryONFTResponse>

  func ownerONFTs(request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>

  func ownerIBCDenomONFTs(request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>

  func supply(request: OmniFlix_Onft_V1beta1_QuerySupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QuerySupplyResponse>

  func iBCDenomSupply(request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QuerySupplyResponse>

  func params(request: OmniFlix_Onft_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OmniFlix_Onft_V1beta1_QueryParamsResponse>
}

extension OmniFlix_Onft_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return OmniFlix_Onft_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Collection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryCollectionRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        userFunction: self.collection(request:context:)
      )

    case "IBCCollection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeIBCCollectionInterceptors() ?? [],
        userFunction: self.iBCCollection(request:context:)
      )

    case "Denom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeDenomInterceptors() ?? [],
        userFunction: self.denom(request:context:)
      )

    case "IBCDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeIBCDenomInterceptors() ?? [],
        userFunction: self.iBCDenom(request:context:)
      )

    case "Denoms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryDenomsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryDenomsResponse>(),
        interceptors: self.interceptors?.makeDenomsInterceptors() ?? [],
        userFunction: self.denoms(request:context:)
      )

    case "ONFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryONFTRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryONFTResponse>(),
        interceptors: self.interceptors?.makeONFTInterceptors() ?? [],
        userFunction: self.oNFT(request:context:)
      )

    case "IBCDenomONFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryONFTResponse>(),
        interceptors: self.interceptors?.makeIBCDenomONFTInterceptors() ?? [],
        userFunction: self.iBCDenomONFT(request:context:)
      )

    case "OwnerONFTs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>(),
        interceptors: self.interceptors?.makeOwnerONFTsInterceptors() ?? [],
        userFunction: self.ownerONFTs(request:context:)
      )

    case "OwnerIBCDenomONFTs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>(),
        interceptors: self.interceptors?.makeOwnerIBCDenomONFTsInterceptors() ?? [],
        userFunction: self.ownerIBCDenomONFTs(request:context:)
      )

    case "Supply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        userFunction: self.supply(request:context:)
      )

    case "IBCDenomSupply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeIBCDenomSupplyInterceptors() ?? [],
        userFunction: self.iBCDenomSupply(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol OmniFlix_Onft_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OmniFlix_Onft_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func collection(
    request: OmniFlix_Onft_V1beta1_QueryCollectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryCollectionResponse

  @Sendable func iBCCollection(
    request: OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryCollectionResponse

  @Sendable func denom(
    request: OmniFlix_Onft_V1beta1_QueryDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryDenomResponse

  @Sendable func iBCDenom(
    request: OmniFlix_Onft_V1beta1_QueryIBCDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryDenomResponse

  @Sendable func denoms(
    request: OmniFlix_Onft_V1beta1_QueryDenomsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryDenomsResponse

  @Sendable func oNFT(
    request: OmniFlix_Onft_V1beta1_QueryONFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryONFTResponse

  @Sendable func iBCDenomONFT(
    request: OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryONFTResponse

  @Sendable func ownerONFTs(
    request: OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse

  @Sendable func ownerIBCDenomONFTs(
    request: OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse

  @Sendable func supply(
    request: OmniFlix_Onft_V1beta1_QuerySupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QuerySupplyResponse

  @Sendable func iBCDenomSupply(
    request: OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QuerySupplyResponse

  @Sendable func params(
    request: OmniFlix_Onft_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OmniFlix_Onft_V1beta1_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OmniFlix_Onft_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return OmniFlix_Onft_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return OmniFlix_Onft_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: OmniFlix_Onft_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Collection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryCollectionRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        wrapping: self.collection(request:context:)
      )

    case "IBCCollection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeIBCCollectionInterceptors() ?? [],
        wrapping: self.iBCCollection(request:context:)
      )

    case "Denom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeDenomInterceptors() ?? [],
        wrapping: self.denom(request:context:)
      )

    case "IBCDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryDenomResponse>(),
        interceptors: self.interceptors?.makeIBCDenomInterceptors() ?? [],
        wrapping: self.iBCDenom(request:context:)
      )

    case "Denoms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryDenomsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryDenomsResponse>(),
        interceptors: self.interceptors?.makeDenomsInterceptors() ?? [],
        wrapping: self.denoms(request:context:)
      )

    case "ONFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryONFTRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryONFTResponse>(),
        interceptors: self.interceptors?.makeONFTInterceptors() ?? [],
        wrapping: self.oNFT(request:context:)
      )

    case "IBCDenomONFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryONFTResponse>(),
        interceptors: self.interceptors?.makeIBCDenomONFTInterceptors() ?? [],
        wrapping: self.iBCDenomONFT(request:context:)
      )

    case "OwnerONFTs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>(),
        interceptors: self.interceptors?.makeOwnerONFTsInterceptors() ?? [],
        wrapping: self.ownerONFTs(request:context:)
      )

    case "OwnerIBCDenomONFTs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>(),
        interceptors: self.interceptors?.makeOwnerIBCDenomONFTsInterceptors() ?? [],
        wrapping: self.ownerIBCDenomONFTs(request:context:)
      )

    case "Supply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        wrapping: self.supply(request:context:)
      )

    case "IBCDenomSupply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeIBCDenomSupplyInterceptors() ?? [],
        wrapping: self.iBCDenomSupply(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OmniFlix_Onft_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<OmniFlix_Onft_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol OmniFlix_Onft_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'collection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when handling 'iBCCollection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIBCCollectionInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryIBCCollectionRequest, OmniFlix_Onft_V1beta1_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when handling 'denom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>]

  /// - Returns: Interceptors to use when handling 'iBCDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIBCDenomInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryIBCDenomRequest, OmniFlix_Onft_V1beta1_QueryDenomResponse>]

  /// - Returns: Interceptors to use when handling 'denoms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomsInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryDenomsRequest, OmniFlix_Onft_V1beta1_QueryDenomsResponse>]

  /// - Returns: Interceptors to use when handling 'oNFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeONFTInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>]

  /// - Returns: Interceptors to use when handling 'iBCDenomONFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIBCDenomONFTInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryIBCDenomONFTRequest, OmniFlix_Onft_V1beta1_QueryONFTResponse>]

  /// - Returns: Interceptors to use when handling 'ownerONFTs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerONFTsInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryOwnerONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>]

  /// - Returns: Interceptors to use when handling 'ownerIBCDenomONFTs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerIBCDenomONFTsInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryOwnerIBCDenomONFTsRequest, OmniFlix_Onft_V1beta1_QueryOwnerONFTsResponse>]

  /// - Returns: Interceptors to use when handling 'supply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QuerySupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when handling 'iBCDenomSupply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIBCDenomSupplyInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryIBCDenomSupplyRequest, OmniFlix_Onft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<OmniFlix_Onft_V1beta1_QueryParamsRequest, OmniFlix_Onft_V1beta1_QueryParamsResponse>]
}

internal enum OmniFlix_Onft_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "OmniFlix.onft.v1beta1.Query",
    methods: [
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.collection,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.iBCCollection,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.denom,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.iBCDenom,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.denoms,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.oNFT,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.iBCDenomONFT,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.ownerONFTs,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.ownerIBCDenomONFTs,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.supply,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.iBCDenomSupply,
      OmniFlix_Onft_V1beta1_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/OmniFlix.onft.v1beta1.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let iBCCollection = GRPCMethodDescriptor(
      name: "IBCCollection",
      path: "/OmniFlix.onft.v1beta1.Query/IBCCollection",
      type: GRPCCallType.unary
    )

    internal static let denom = GRPCMethodDescriptor(
      name: "Denom",
      path: "/OmniFlix.onft.v1beta1.Query/Denom",
      type: GRPCCallType.unary
    )

    internal static let iBCDenom = GRPCMethodDescriptor(
      name: "IBCDenom",
      path: "/OmniFlix.onft.v1beta1.Query/IBCDenom",
      type: GRPCCallType.unary
    )

    internal static let denoms = GRPCMethodDescriptor(
      name: "Denoms",
      path: "/OmniFlix.onft.v1beta1.Query/Denoms",
      type: GRPCCallType.unary
    )

    internal static let oNFT = GRPCMethodDescriptor(
      name: "ONFT",
      path: "/OmniFlix.onft.v1beta1.Query/ONFT",
      type: GRPCCallType.unary
    )

    internal static let iBCDenomONFT = GRPCMethodDescriptor(
      name: "IBCDenomONFT",
      path: "/OmniFlix.onft.v1beta1.Query/IBCDenomONFT",
      type: GRPCCallType.unary
    )

    internal static let ownerONFTs = GRPCMethodDescriptor(
      name: "OwnerONFTs",
      path: "/OmniFlix.onft.v1beta1.Query/OwnerONFTs",
      type: GRPCCallType.unary
    )

    internal static let ownerIBCDenomONFTs = GRPCMethodDescriptor(
      name: "OwnerIBCDenomONFTs",
      path: "/OmniFlix.onft.v1beta1.Query/OwnerIBCDenomONFTs",
      type: GRPCCallType.unary
    )

    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/OmniFlix.onft.v1beta1.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let iBCDenomSupply = GRPCMethodDescriptor(
      name: "IBCDenomSupply",
      path: "/OmniFlix.onft.v1beta1.Query/IBCDenomSupply",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/OmniFlix.onft.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
