//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: em/market/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Em_Market_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Em_Market_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? { get }

  func byAccount(
    _ request: Em_Market_V1_QueryByAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_QueryByAccountRequest, Em_Market_V1_QueryByAccountResponse>

  func instruments(
    _ request: Em_Market_V1_QueryInstrumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_QueryInstrumentsRequest, Em_Market_V1_QueryInstrumentsResponse>

  func instrument(
    _ request: Em_Market_V1_QueryInstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_QueryInstrumentRequest, Em_Market_V1_QueryInstrumentResponse>
}

extension Em_Market_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "em.market.v1.Query"
  }

  /// Unary call to ByAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to ByAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func byAccount(
    _ request: Em_Market_V1_QueryByAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_QueryByAccountRequest, Em_Market_V1_QueryByAccountResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.byAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeByAccountInterceptors() ?? []
    )
  }

  /// Unary call to Instruments
  ///
  /// - Parameters:
  ///   - request: Request to send to Instruments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func instruments(
    _ request: Em_Market_V1_QueryInstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_QueryInstrumentsRequest, Em_Market_V1_QueryInstrumentsResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.instruments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstrumentsInterceptors() ?? []
    )
  }

  /// Unary call to Instrument
  ///
  /// - Parameters:
  ///   - request: Request to send to Instrument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func instrument(
    _ request: Em_Market_V1_QueryInstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_QueryInstrumentRequest, Em_Market_V1_QueryInstrumentResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.instrument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstrumentInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Em_Market_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Em_Market_V1_QueryNIOClient")
internal final class Em_Market_V1_QueryClient: Em_Market_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the em.market.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Em_Market_V1_QueryNIOClient: Em_Market_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the em.market.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Em_Market_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeByAccountCall(
    _ request: Em_Market_V1_QueryByAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_QueryByAccountRequest, Em_Market_V1_QueryByAccountResponse>

  func makeInstrumentsCall(
    _ request: Em_Market_V1_QueryInstrumentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_QueryInstrumentsRequest, Em_Market_V1_QueryInstrumentsResponse>

  func makeInstrumentCall(
    _ request: Em_Market_V1_QueryInstrumentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_QueryInstrumentRequest, Em_Market_V1_QueryInstrumentResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Em_Market_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Em_Market_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeByAccountCall(
    _ request: Em_Market_V1_QueryByAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_QueryByAccountRequest, Em_Market_V1_QueryByAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.byAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeByAccountInterceptors() ?? []
    )
  }

  internal func makeInstrumentsCall(
    _ request: Em_Market_V1_QueryInstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_QueryInstrumentsRequest, Em_Market_V1_QueryInstrumentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.instruments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstrumentsInterceptors() ?? []
    )
  }

  internal func makeInstrumentCall(
    _ request: Em_Market_V1_QueryInstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_QueryInstrumentRequest, Em_Market_V1_QueryInstrumentResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.instrument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstrumentInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Em_Market_V1_QueryAsyncClientProtocol {
  internal func byAccount(
    _ request: Em_Market_V1_QueryByAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_QueryByAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.byAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeByAccountInterceptors() ?? []
    )
  }

  internal func instruments(
    _ request: Em_Market_V1_QueryInstrumentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_QueryInstrumentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.instruments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstrumentsInterceptors() ?? []
    )
  }

  internal func instrument(
    _ request: Em_Market_V1_QueryInstrumentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_QueryInstrumentResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_QueryClientMetadata.Methods.instrument.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstrumentInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Em_Market_V1_QueryAsyncClient: Em_Market_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Em_Market_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'byAccount'.
  func makeByAccountInterceptors() -> [ClientInterceptor<Em_Market_V1_QueryByAccountRequest, Em_Market_V1_QueryByAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'instruments'.
  func makeInstrumentsInterceptors() -> [ClientInterceptor<Em_Market_V1_QueryInstrumentsRequest, Em_Market_V1_QueryInstrumentsResponse>]

  /// - Returns: Interceptors to use when invoking 'instrument'.
  func makeInstrumentInterceptors() -> [ClientInterceptor<Em_Market_V1_QueryInstrumentRequest, Em_Market_V1_QueryInstrumentResponse>]
}

internal enum Em_Market_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "em.market.v1.Query",
    methods: [
      Em_Market_V1_QueryClientMetadata.Methods.byAccount,
      Em_Market_V1_QueryClientMetadata.Methods.instruments,
      Em_Market_V1_QueryClientMetadata.Methods.instrument,
    ]
  )

  internal enum Methods {
    internal static let byAccount = GRPCMethodDescriptor(
      name: "ByAccount",
      path: "/em.market.v1.Query/ByAccount",
      type: GRPCCallType.unary
    )

    internal static let instruments = GRPCMethodDescriptor(
      name: "Instruments",
      path: "/em.market.v1.Query/Instruments",
      type: GRPCCallType.unary
    )

    internal static let instrument = GRPCMethodDescriptor(
      name: "Instrument",
      path: "/em.market.v1.Query/Instrument",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Em_Market_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Em_Market_V1_QueryServerInterceptorFactoryProtocol? { get }

  func byAccount(request: Em_Market_V1_QueryByAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_QueryByAccountResponse>

  func instruments(request: Em_Market_V1_QueryInstrumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_QueryInstrumentsResponse>

  func instrument(request: Em_Market_V1_QueryInstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_QueryInstrumentResponse>
}

extension Em_Market_V1_QueryProvider {
  internal var serviceName: Substring {
    return Em_Market_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ByAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_QueryByAccountRequest>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_QueryByAccountResponse>(),
        interceptors: self.interceptors?.makeByAccountInterceptors() ?? [],
        userFunction: self.byAccount(request:context:)
      )

    case "Instruments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_QueryInstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_QueryInstrumentsResponse>(),
        interceptors: self.interceptors?.makeInstrumentsInterceptors() ?? [],
        userFunction: self.instruments(request:context:)
      )

    case "Instrument":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_QueryInstrumentRequest>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_QueryInstrumentResponse>(),
        interceptors: self.interceptors?.makeInstrumentInterceptors() ?? [],
        userFunction: self.instrument(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Em_Market_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Em_Market_V1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func byAccount(
    request: Em_Market_V1_QueryByAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_QueryByAccountResponse

  @Sendable func instruments(
    request: Em_Market_V1_QueryInstrumentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_QueryInstrumentsResponse

  @Sendable func instrument(
    request: Em_Market_V1_QueryInstrumentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_QueryInstrumentResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Em_Market_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Em_Market_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Em_Market_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Em_Market_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ByAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_QueryByAccountRequest>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_QueryByAccountResponse>(),
        interceptors: self.interceptors?.makeByAccountInterceptors() ?? [],
        wrapping: self.byAccount(request:context:)
      )

    case "Instruments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_QueryInstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_QueryInstrumentsResponse>(),
        interceptors: self.interceptors?.makeInstrumentsInterceptors() ?? [],
        wrapping: self.instruments(request:context:)
      )

    case "Instrument":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_QueryInstrumentRequest>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_QueryInstrumentResponse>(),
        interceptors: self.interceptors?.makeInstrumentInterceptors() ?? [],
        wrapping: self.instrument(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Em_Market_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'byAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeByAccountInterceptors() -> [ServerInterceptor<Em_Market_V1_QueryByAccountRequest, Em_Market_V1_QueryByAccountResponse>]

  /// - Returns: Interceptors to use when handling 'instruments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInstrumentsInterceptors() -> [ServerInterceptor<Em_Market_V1_QueryInstrumentsRequest, Em_Market_V1_QueryInstrumentsResponse>]

  /// - Returns: Interceptors to use when handling 'instrument'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInstrumentInterceptors() -> [ServerInterceptor<Em_Market_V1_QueryInstrumentRequest, Em_Market_V1_QueryInstrumentResponse>]
}

internal enum Em_Market_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "em.market.v1.Query",
    methods: [
      Em_Market_V1_QueryServerMetadata.Methods.byAccount,
      Em_Market_V1_QueryServerMetadata.Methods.instruments,
      Em_Market_V1_QueryServerMetadata.Methods.instrument,
    ]
  )

  internal enum Methods {
    internal static let byAccount = GRPCMethodDescriptor(
      name: "ByAccount",
      path: "/em.market.v1.Query/ByAccount",
      type: GRPCCallType.unary
    )

    internal static let instruments = GRPCMethodDescriptor(
      name: "Instruments",
      path: "/em.market.v1.Query/Instruments",
      type: GRPCCallType.unary
    )

    internal static let instrument = GRPCMethodDescriptor(
      name: "Instrument",
      path: "/em.market.v1.Query/Instrument",
      type: GRPCCallType.unary
    )
  }
}
