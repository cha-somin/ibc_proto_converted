// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/rewards/v1beta1/gauge.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var isMasterPool: Bool = false

  var childPoolIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Rewards_V1beta1_Gauge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var from: String {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  var gaugeTypeID: UInt64 {
    get {return _storage._gaugeTypeID}
    set {_uniqueStorage()._gaugeTypeID = newValue}
  }

  var triggerDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._triggerDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._triggerDuration = newValue}
  }
  /// Returns true if `triggerDuration` has been explicitly set.
  var hasTriggerDuration: Bool {return _storage._triggerDuration != nil}
  /// Clears the value of `triggerDuration`. Subsequent reads from it will return its default value.
  mutating func clearTriggerDuration() {_uniqueStorage()._triggerDuration = nil}

  var depositAmount: Cosmos_Base_V1beta1_Coin {
    get {return _storage._depositAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._depositAmount = newValue}
  }
  /// Returns true if `depositAmount` has been explicitly set.
  var hasDepositAmount: Bool {return _storage._depositAmount != nil}
  /// Clears the value of `depositAmount`. Subsequent reads from it will return its default value.
  mutating func clearDepositAmount() {_uniqueStorage()._depositAmount = nil}

  var totalTriggers: UInt64 {
    get {return _storage._totalTriggers}
    set {_uniqueStorage()._totalTriggers = newValue}
  }

  var triggeredCount: UInt64 {
    get {return _storage._triggeredCount}
    set {_uniqueStorage()._triggeredCount = newValue}
  }

  var distributedAmount: Cosmos_Base_V1beta1_Coin {
    get {return _storage._distributedAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._distributedAmount = newValue}
  }
  /// Returns true if `distributedAmount` has been explicitly set.
  var hasDistributedAmount: Bool {return _storage._distributedAmount != nil}
  /// Clears the value of `distributedAmount`. Subsequent reads from it will return its default value.
  mutating func clearDistributedAmount() {_uniqueStorage()._distributedAmount = nil}

  var isActive: Bool {
    get {return _storage._isActive}
    set {_uniqueStorage()._isActive = newValue}
  }

  var forSwapFee: Bool {
    get {return _storage._forSwapFee}
    set {_uniqueStorage()._forSwapFee = newValue}
  }

  var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  var liquidityMetaData: Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData {
    get {
      if case .liquidityMetaData(let v)? = _storage._kind {return v}
      return Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData()
    }
    set {_uniqueStorage()._kind = .liquidityMetaData(newValue)}
  }

  var appID: UInt64 {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Kind: Equatable {
    case liquidityMetaData(Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData)

  #if !swift(>=4.1)
    static func ==(lhs: Comdex_Rewards_V1beta1_Gauge.OneOf_Kind, rhs: Comdex_Rewards_V1beta1_Gauge.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.liquidityMetaData, .liquidityMetaData): return {
        guard case .liquidityMetaData(let l) = lhs, case .liquidityMetaData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Comdex_Rewards_V1beta1_GaugeByTriggerDuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var triggerDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _triggerDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_triggerDuration = newValue}
  }
  /// Returns true if `triggerDuration` has been explicitly set.
  var hasTriggerDuration: Bool {return self._triggerDuration != nil}
  /// Clears the value of `triggerDuration`. Subsequent reads from it will return its default value.
  mutating func clearTriggerDuration() {self._triggerDuration = nil}

  var gaugeIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _triggerDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_Gauge: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_Gauge.OneOf_Kind: @unchecked Sendable {}
extension Comdex_Rewards_V1beta1_GaugeByTriggerDuration: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.rewards.v1beta1"

extension Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiquidtyGaugeMetaData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "is_master_pool"),
    3: .standard(proto: "child_pool_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isMasterPool) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.childPoolIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.isMasterPool != false {
      try visitor.visitSingularBoolField(value: self.isMasterPool, fieldNumber: 2)
    }
    if !self.childPoolIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.childPoolIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData, rhs: Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.isMasterPool != rhs.isMasterPool {return false}
    if lhs.childPoolIds != rhs.childPoolIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_Gauge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Gauge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "from"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "gauge_type_id"),
    6: .standard(proto: "trigger_duration"),
    7: .standard(proto: "deposit_amount"),
    8: .standard(proto: "total_triggers"),
    9: .standard(proto: "triggered_count"),
    10: .standard(proto: "distributed_amount"),
    11: .standard(proto: "is_active"),
    12: .standard(proto: "for_swap_fee"),
    13: .standard(proto: "liquidity_meta_data"),
    14: .standard(proto: "app_id"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _from: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _gaugeTypeID: UInt64 = 0
    var _triggerDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _depositAmount: Cosmos_Base_V1beta1_Coin? = nil
    var _totalTriggers: UInt64 = 0
    var _triggeredCount: UInt64 = 0
    var _distributedAmount: Cosmos_Base_V1beta1_Coin? = nil
    var _isActive: Bool = false
    var _forSwapFee: Bool = false
    var _kind: Comdex_Rewards_V1beta1_Gauge.OneOf_Kind?
    var _appID: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _from = source._from
      _createdAt = source._createdAt
      _startTime = source._startTime
      _gaugeTypeID = source._gaugeTypeID
      _triggerDuration = source._triggerDuration
      _depositAmount = source._depositAmount
      _totalTriggers = source._totalTriggers
      _triggeredCount = source._triggeredCount
      _distributedAmount = source._distributedAmount
      _isActive = source._isActive
      _forSwapFee = source._forSwapFee
      _kind = source._kind
      _appID = source._appID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._from) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 5: try { try decoder.decodeSingularUInt64Field(value: &_storage._gaugeTypeID) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._triggerDuration) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._depositAmount) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._totalTriggers) }()
        case 9: try { try decoder.decodeSingularUInt64Field(value: &_storage._triggeredCount) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._distributedAmount) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isActive) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._forSwapFee) }()
        case 13: try {
          var v: Comdex_Rewards_V1beta1_LiquidtyGaugeMetaData?
          var hadOneofValue = false
          if let current = _storage._kind {
            hadOneofValue = true
            if case .liquidityMetaData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._kind = .liquidityMetaData(v)
          }
        }()
        case 14: try { try decoder.decodeSingularUInt64Field(value: &_storage._appID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._from.isEmpty {
        try visitor.visitSingularStringField(value: _storage._from, fieldNumber: 2)
      }
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._gaugeTypeID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._gaugeTypeID, fieldNumber: 5)
      }
      try { if let v = _storage._triggerDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._depositAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._totalTriggers != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._totalTriggers, fieldNumber: 8)
      }
      if _storage._triggeredCount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._triggeredCount, fieldNumber: 9)
      }
      try { if let v = _storage._distributedAmount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._isActive != false {
        try visitor.visitSingularBoolField(value: _storage._isActive, fieldNumber: 11)
      }
      if _storage._forSwapFee != false {
        try visitor.visitSingularBoolField(value: _storage._forSwapFee, fieldNumber: 12)
      }
      try { if case .liquidityMetaData(let v)? = _storage._kind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if _storage._appID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._appID, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_Gauge, rhs: Comdex_Rewards_V1beta1_Gauge) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._from != rhs_storage._from {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._gaugeTypeID != rhs_storage._gaugeTypeID {return false}
        if _storage._triggerDuration != rhs_storage._triggerDuration {return false}
        if _storage._depositAmount != rhs_storage._depositAmount {return false}
        if _storage._totalTriggers != rhs_storage._totalTriggers {return false}
        if _storage._triggeredCount != rhs_storage._triggeredCount {return false}
        if _storage._distributedAmount != rhs_storage._distributedAmount {return false}
        if _storage._isActive != rhs_storage._isActive {return false}
        if _storage._forSwapFee != rhs_storage._forSwapFee {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._appID != rhs_storage._appID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Rewards_V1beta1_GaugeByTriggerDuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GaugeByTriggerDuration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trigger_duration"),
    2: .standard(proto: "gauge_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._triggerDuration) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.gaugeIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._triggerDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.gaugeIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.gaugeIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Rewards_V1beta1_GaugeByTriggerDuration, rhs: Comdex_Rewards_V1beta1_GaugeByTriggerDuration) -> Bool {
    if lhs._triggerDuration != rhs._triggerDuration {return false}
    if lhs.gaugeIds != rhs.gaugeIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
