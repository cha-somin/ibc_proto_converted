// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/shield/v1alpha1/shield.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Fees proto wrapper for pool.go methods
struct Shentu_Shield_V1alpha1_Fees {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fees: [Cosmos_Base_V1beta1_DecCoin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Provider tracks total delegation, total collateral, and rewards of a provider.
struct Shentu_Shield_V1alpha1_Provider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address is the address of the provider.
  var address: String = String()

  /// DelegationBonded is the amount of bonded delegation.
  var delegationBonded: String = String()

  /// Collateral is amount of all collaterals for the provider, including
  /// those in withdraw queue but excluding those currently locked, in all
  /// pools.
  var collateral: String = String()

  /// TotalLocked is the amount locked for pending claims.
  var totalLocked: String = String()

  /// Withdrawing is the amount of collateral in withdraw queues.
  var withdrawing: String = String()

  /// Rewards is the pooling rewards to be collected.
  var rewards: [Cosmos_Base_V1beta1_DecCoin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Shentu_Shield_V1alpha1_Fees: @unchecked Sendable {}
extension Shentu_Shield_V1alpha1_Provider: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shentu.shield.v1alpha1"

extension Shentu_Shield_V1alpha1_Fees: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Fees"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Shield_V1alpha1_Fees, rhs: Shentu_Shield_V1alpha1_Fees) -> Bool {
    if lhs.fees != rhs.fees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Shield_V1alpha1_Provider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Provider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "delegation_bonded"),
    3: .same(proto: "collateral"),
    4: .standard(proto: "total_locked"),
    5: .same(proto: "withdrawing"),
    6: .same(proto: "rewards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.delegationBonded) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.collateral) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.totalLocked) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.withdrawing) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.rewards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.delegationBonded.isEmpty {
      try visitor.visitSingularStringField(value: self.delegationBonded, fieldNumber: 2)
    }
    if !self.collateral.isEmpty {
      try visitor.visitSingularStringField(value: self.collateral, fieldNumber: 3)
    }
    if !self.totalLocked.isEmpty {
      try visitor.visitSingularStringField(value: self.totalLocked, fieldNumber: 4)
    }
    if !self.withdrawing.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawing, fieldNumber: 5)
    }
    if !self.rewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewards, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Shield_V1alpha1_Provider, rhs: Shentu_Shield_V1alpha1_Provider) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.delegationBonded != rhs.delegationBonded {return false}
    if lhs.collateral != rhs.collateral {return false}
    if lhs.totalLocked != rhs.totalLocked {return false}
    if lhs.withdrawing != rhs.withdrawing {return false}
    if lhs.rewards != rhs.rewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
