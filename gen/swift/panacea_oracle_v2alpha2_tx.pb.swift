// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/oracle/v2alpha2/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgRegisterOracle defines the Msg/RegisterOracle request type.
struct Panacea_Oracle_V2alpha2_MsgRegisterOracle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String = String()

  /// panacea1.. account address
  var oracleAddress: String = String()

  var nodePubKey: Data = Data()

  var nodePubKeyRemoteReport: Data = Data()

  var trustedBlockHeight: Int64 = 0

  var trustedBlockHash: Data = Data()

  var nonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRegisterOracleResponse defines the Msg/RegisterOracle response type.
struct Panacea_Oracle_V2alpha2_MsgRegisterOracleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgVoteOracleRegistration defines the Msg/VoteOracleRegistration request type.
struct Panacea_Oracle_V2alpha2_MsgVoteOracleRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var oracleRegistrationVote: Panacea_Oracle_V2alpha2_OracleRegistrationVote {
    get {return _oracleRegistrationVote ?? Panacea_Oracle_V2alpha2_OracleRegistrationVote()}
    set {_oracleRegistrationVote = newValue}
  }
  /// Returns true if `oracleRegistrationVote` has been explicitly set.
  var hasOracleRegistrationVote: Bool {return self._oracleRegistrationVote != nil}
  /// Clears the value of `oracleRegistrationVote`. Subsequent reads from it will return its default value.
  mutating func clearOracleRegistrationVote() {self._oracleRegistrationVote = nil}

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _oracleRegistrationVote: Panacea_Oracle_V2alpha2_OracleRegistrationVote? = nil
}

/// MsgVoteOracleRegistrationResponse defines the Msg/VoteOracleRegistration response type.
struct Panacea_Oracle_V2alpha2_MsgVoteOracleRegistrationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpgradeOracle defines the Msg/UpgradeOracle request type.
struct Panacea_Oracle_V2alpha2_MsgUpgradeOracle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String = String()

  /// panacea1.. account address
  var oracleAddress: String = String()

  var nodePubKey: Data = Data()

  var nodePubKeyRemoteReport: Data = Data()

  var trustedBlockHeight: Int64 = 0

  var trustedBlockHash: Data = Data()

  var nonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpgradeOracleResponse defines the Msg/UpgradeOracle response type.
struct Panacea_Oracle_V2alpha2_MsgUpgradeOracleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Oracle_V2alpha2_MsgRegisterOracle: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_MsgRegisterOracleResponse: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_MsgVoteOracleRegistration: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_MsgVoteOracleRegistrationResponse: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_MsgUpgradeOracle: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_MsgUpgradeOracleResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.oracle.v2alpha2"

extension Panacea_Oracle_V2alpha2_MsgRegisterOracle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterOracle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .standard(proto: "oracle_address"),
    3: .standard(proto: "node_pub_key"),
    4: .standard(proto: "node_pub_key_remote_report"),
    5: .standard(proto: "trusted_block_height"),
    6: .standard(proto: "trusted_block_hash"),
    7: .same(proto: "nonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uniqueID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.oracleAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.nodePubKey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.nodePubKeyRemoteReport) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.trustedBlockHeight) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.trustedBlockHash) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.uniqueID, fieldNumber: 1)
    }
    if !self.oracleAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.oracleAddress, fieldNumber: 2)
    }
    if !self.nodePubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodePubKey, fieldNumber: 3)
    }
    if !self.nodePubKeyRemoteReport.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodePubKeyRemoteReport, fieldNumber: 4)
    }
    if self.trustedBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.trustedBlockHeight, fieldNumber: 5)
    }
    if !self.trustedBlockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.trustedBlockHash, fieldNumber: 6)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_MsgRegisterOracle, rhs: Panacea_Oracle_V2alpha2_MsgRegisterOracle) -> Bool {
    if lhs.uniqueID != rhs.uniqueID {return false}
    if lhs.oracleAddress != rhs.oracleAddress {return false}
    if lhs.nodePubKey != rhs.nodePubKey {return false}
    if lhs.nodePubKeyRemoteReport != rhs.nodePubKeyRemoteReport {return false}
    if lhs.trustedBlockHeight != rhs.trustedBlockHeight {return false}
    if lhs.trustedBlockHash != rhs.trustedBlockHash {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_MsgRegisterOracleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterOracleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_MsgRegisterOracleResponse, rhs: Panacea_Oracle_V2alpha2_MsgRegisterOracleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_MsgVoteOracleRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteOracleRegistration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "oracle_registration_vote"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._oracleRegistrationVote) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._oracleRegistrationVote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_MsgVoteOracleRegistration, rhs: Panacea_Oracle_V2alpha2_MsgVoteOracleRegistration) -> Bool {
    if lhs._oracleRegistrationVote != rhs._oracleRegistrationVote {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_MsgVoteOracleRegistrationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteOracleRegistrationResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_MsgVoteOracleRegistrationResponse, rhs: Panacea_Oracle_V2alpha2_MsgVoteOracleRegistrationResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_MsgUpgradeOracle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpgradeOracle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .standard(proto: "oracle_address"),
    3: .standard(proto: "node_pub_key"),
    4: .standard(proto: "node_pub_key_remote_report"),
    5: .standard(proto: "trusted_block_height"),
    6: .standard(proto: "trusted_block_hash"),
    7: .same(proto: "nonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uniqueID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.oracleAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.nodePubKey) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.nodePubKeyRemoteReport) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.trustedBlockHeight) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.trustedBlockHash) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.uniqueID, fieldNumber: 1)
    }
    if !self.oracleAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.oracleAddress, fieldNumber: 2)
    }
    if !self.nodePubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodePubKey, fieldNumber: 3)
    }
    if !self.nodePubKeyRemoteReport.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodePubKeyRemoteReport, fieldNumber: 4)
    }
    if self.trustedBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.trustedBlockHeight, fieldNumber: 5)
    }
    if !self.trustedBlockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.trustedBlockHash, fieldNumber: 6)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_MsgUpgradeOracle, rhs: Panacea_Oracle_V2alpha2_MsgUpgradeOracle) -> Bool {
    if lhs.uniqueID != rhs.uniqueID {return false}
    if lhs.oracleAddress != rhs.oracleAddress {return false}
    if lhs.nodePubKey != rhs.nodePubKey {return false}
    if lhs.nodePubKeyRemoteReport != rhs.nodePubKeyRemoteReport {return false}
    if lhs.trustedBlockHeight != rhs.trustedBlockHeight {return false}
    if lhs.trustedBlockHash != rhs.trustedBlockHash {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_MsgUpgradeOracleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpgradeOracleResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_MsgUpgradeOracleResponse, rhs: Panacea_Oracle_V2alpha2_MsgUpgradeOracleResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
