//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: band/oracle/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the oracle Msg service.
///
/// Usage: instantiate `Oracle_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Oracle_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? { get }

  func requestData(
    _ request: Oracle_V1_MsgRequestData,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgRequestData, Oracle_V1_MsgRequestDataResponse>

  func reportData(
    _ request: Oracle_V1_MsgReportData,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgReportData, Oracle_V1_MsgReportDataResponse>

  func createDataSource(
    _ request: Oracle_V1_MsgCreateDataSource,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgCreateDataSource, Oracle_V1_MsgCreateDataSourceResponse>

  func editDataSource(
    _ request: Oracle_V1_MsgEditDataSource,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgEditDataSource, Oracle_V1_MsgEditDataSourceResponse>

  func createOracleScript(
    _ request: Oracle_V1_MsgCreateOracleScript,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgCreateOracleScript, Oracle_V1_MsgCreateOracleScriptResponse>

  func editOracleScript(
    _ request: Oracle_V1_MsgEditOracleScript,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgEditOracleScript, Oracle_V1_MsgEditOracleScriptResponse>

  func activate(
    _ request: Oracle_V1_MsgActivate,
    callOptions: CallOptions?
  ) -> UnaryCall<Oracle_V1_MsgActivate, Oracle_V1_MsgActivateResponse>
}

extension Oracle_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "oracle.v1.Msg"
  }

  /// RequestData defines a method for submitting a new request.
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestData(
    _ request: Oracle_V1_MsgRequestData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgRequestData, Oracle_V1_MsgRequestDataResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.requestData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestDataInterceptors() ?? []
    )
  }

  /// ReportData defines a method for reporting a data to resolve the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReportData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reportData(
    _ request: Oracle_V1_MsgReportData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgReportData, Oracle_V1_MsgReportDataResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.reportData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportDataInterceptors() ?? []
    )
  }

  /// CreateDataSource defines a method for creating a new data source.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDataSource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDataSource(
    _ request: Oracle_V1_MsgCreateDataSource,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgCreateDataSource, Oracle_V1_MsgCreateDataSourceResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.createDataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDataSourceInterceptors() ?? []
    )
  }

  /// EditDataSource defines a method for editing an existing data source.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditDataSource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editDataSource(
    _ request: Oracle_V1_MsgEditDataSource,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgEditDataSource, Oracle_V1_MsgEditDataSourceResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.editDataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditDataSourceInterceptors() ?? []
    )
  }

  /// CreateOracleScript defines a method for creating a new oracle script.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateOracleScript.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createOracleScript(
    _ request: Oracle_V1_MsgCreateOracleScript,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgCreateOracleScript, Oracle_V1_MsgCreateOracleScriptResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.createOracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOracleScriptInterceptors() ?? []
    )
  }

  /// EditOracleScript defines a method for editing an existing oracle script.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditOracleScript.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editOracleScript(
    _ request: Oracle_V1_MsgEditOracleScript,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgEditOracleScript, Oracle_V1_MsgEditOracleScriptResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.editOracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditOracleScriptInterceptors() ?? []
    )
  }

  /// Activate defines a method for applying to be an oracle validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to Activate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activate(
    _ request: Oracle_V1_MsgActivate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Oracle_V1_MsgActivate, Oracle_V1_MsgActivateResponse> {
    return self.makeUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.activate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Oracle_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Oracle_V1_MsgNIOClient")
internal final class Oracle_V1_MsgClient: Oracle_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the oracle.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Oracle_V1_MsgNIOClient: Oracle_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the oracle.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the oracle Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Oracle_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeRequestDataCall(
    _ request: Oracle_V1_MsgRequestData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgRequestData, Oracle_V1_MsgRequestDataResponse>

  func makeReportDataCall(
    _ request: Oracle_V1_MsgReportData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgReportData, Oracle_V1_MsgReportDataResponse>

  func makeCreateDataSourceCall(
    _ request: Oracle_V1_MsgCreateDataSource,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgCreateDataSource, Oracle_V1_MsgCreateDataSourceResponse>

  func makeEditDataSourceCall(
    _ request: Oracle_V1_MsgEditDataSource,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgEditDataSource, Oracle_V1_MsgEditDataSourceResponse>

  func makeCreateOracleScriptCall(
    _ request: Oracle_V1_MsgCreateOracleScript,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgCreateOracleScript, Oracle_V1_MsgCreateOracleScriptResponse>

  func makeEditOracleScriptCall(
    _ request: Oracle_V1_MsgEditOracleScript,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgEditOracleScript, Oracle_V1_MsgEditOracleScriptResponse>

  func makeActivateCall(
    _ request: Oracle_V1_MsgActivate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgActivate, Oracle_V1_MsgActivateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Oracle_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Oracle_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRequestDataCall(
    _ request: Oracle_V1_MsgRequestData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgRequestData, Oracle_V1_MsgRequestDataResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.requestData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestDataInterceptors() ?? []
    )
  }

  internal func makeReportDataCall(
    _ request: Oracle_V1_MsgReportData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgReportData, Oracle_V1_MsgReportDataResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.reportData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportDataInterceptors() ?? []
    )
  }

  internal func makeCreateDataSourceCall(
    _ request: Oracle_V1_MsgCreateDataSource,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgCreateDataSource, Oracle_V1_MsgCreateDataSourceResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.createDataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDataSourceInterceptors() ?? []
    )
  }

  internal func makeEditDataSourceCall(
    _ request: Oracle_V1_MsgEditDataSource,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgEditDataSource, Oracle_V1_MsgEditDataSourceResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.editDataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditDataSourceInterceptors() ?? []
    )
  }

  internal func makeCreateOracleScriptCall(
    _ request: Oracle_V1_MsgCreateOracleScript,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgCreateOracleScript, Oracle_V1_MsgCreateOracleScriptResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.createOracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOracleScriptInterceptors() ?? []
    )
  }

  internal func makeEditOracleScriptCall(
    _ request: Oracle_V1_MsgEditOracleScript,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgEditOracleScript, Oracle_V1_MsgEditOracleScriptResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.editOracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditOracleScriptInterceptors() ?? []
    )
  }

  internal func makeActivateCall(
    _ request: Oracle_V1_MsgActivate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Oracle_V1_MsgActivate, Oracle_V1_MsgActivateResponse> {
    return self.makeAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.activate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Oracle_V1_MsgAsyncClientProtocol {
  internal func requestData(
    _ request: Oracle_V1_MsgRequestData,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgRequestDataResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.requestData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestDataInterceptors() ?? []
    )
  }

  internal func reportData(
    _ request: Oracle_V1_MsgReportData,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgReportDataResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.reportData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportDataInterceptors() ?? []
    )
  }

  internal func createDataSource(
    _ request: Oracle_V1_MsgCreateDataSource,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgCreateDataSourceResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.createDataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDataSourceInterceptors() ?? []
    )
  }

  internal func editDataSource(
    _ request: Oracle_V1_MsgEditDataSource,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgEditDataSourceResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.editDataSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditDataSourceInterceptors() ?? []
    )
  }

  internal func createOracleScript(
    _ request: Oracle_V1_MsgCreateOracleScript,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgCreateOracleScriptResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.createOracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOracleScriptInterceptors() ?? []
    )
  }

  internal func editOracleScript(
    _ request: Oracle_V1_MsgEditOracleScript,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgEditOracleScriptResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.editOracleScript.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditOracleScriptInterceptors() ?? []
    )
  }

  internal func activate(
    _ request: Oracle_V1_MsgActivate,
    callOptions: CallOptions? = nil
  ) async throws -> Oracle_V1_MsgActivateResponse {
    return try await self.performAsyncUnaryCall(
      path: Oracle_V1_MsgClientMetadata.Methods.activate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Oracle_V1_MsgAsyncClient: Oracle_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Oracle_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Oracle_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'requestData'.
  func makeRequestDataInterceptors() -> [ClientInterceptor<Oracle_V1_MsgRequestData, Oracle_V1_MsgRequestDataResponse>]

  /// - Returns: Interceptors to use when invoking 'reportData'.
  func makeReportDataInterceptors() -> [ClientInterceptor<Oracle_V1_MsgReportData, Oracle_V1_MsgReportDataResponse>]

  /// - Returns: Interceptors to use when invoking 'createDataSource'.
  func makeCreateDataSourceInterceptors() -> [ClientInterceptor<Oracle_V1_MsgCreateDataSource, Oracle_V1_MsgCreateDataSourceResponse>]

  /// - Returns: Interceptors to use when invoking 'editDataSource'.
  func makeEditDataSourceInterceptors() -> [ClientInterceptor<Oracle_V1_MsgEditDataSource, Oracle_V1_MsgEditDataSourceResponse>]

  /// - Returns: Interceptors to use when invoking 'createOracleScript'.
  func makeCreateOracleScriptInterceptors() -> [ClientInterceptor<Oracle_V1_MsgCreateOracleScript, Oracle_V1_MsgCreateOracleScriptResponse>]

  /// - Returns: Interceptors to use when invoking 'editOracleScript'.
  func makeEditOracleScriptInterceptors() -> [ClientInterceptor<Oracle_V1_MsgEditOracleScript, Oracle_V1_MsgEditOracleScriptResponse>]

  /// - Returns: Interceptors to use when invoking 'activate'.
  func makeActivateInterceptors() -> [ClientInterceptor<Oracle_V1_MsgActivate, Oracle_V1_MsgActivateResponse>]
}

internal enum Oracle_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "oracle.v1.Msg",
    methods: [
      Oracle_V1_MsgClientMetadata.Methods.requestData,
      Oracle_V1_MsgClientMetadata.Methods.reportData,
      Oracle_V1_MsgClientMetadata.Methods.createDataSource,
      Oracle_V1_MsgClientMetadata.Methods.editDataSource,
      Oracle_V1_MsgClientMetadata.Methods.createOracleScript,
      Oracle_V1_MsgClientMetadata.Methods.editOracleScript,
      Oracle_V1_MsgClientMetadata.Methods.activate,
    ]
  )

  internal enum Methods {
    internal static let requestData = GRPCMethodDescriptor(
      name: "RequestData",
      path: "/oracle.v1.Msg/RequestData",
      type: GRPCCallType.unary
    )

    internal static let reportData = GRPCMethodDescriptor(
      name: "ReportData",
      path: "/oracle.v1.Msg/ReportData",
      type: GRPCCallType.unary
    )

    internal static let createDataSource = GRPCMethodDescriptor(
      name: "CreateDataSource",
      path: "/oracle.v1.Msg/CreateDataSource",
      type: GRPCCallType.unary
    )

    internal static let editDataSource = GRPCMethodDescriptor(
      name: "EditDataSource",
      path: "/oracle.v1.Msg/EditDataSource",
      type: GRPCCallType.unary
    )

    internal static let createOracleScript = GRPCMethodDescriptor(
      name: "CreateOracleScript",
      path: "/oracle.v1.Msg/CreateOracleScript",
      type: GRPCCallType.unary
    )

    internal static let editOracleScript = GRPCMethodDescriptor(
      name: "EditOracleScript",
      path: "/oracle.v1.Msg/EditOracleScript",
      type: GRPCCallType.unary
    )

    internal static let activate = GRPCMethodDescriptor(
      name: "Activate",
      path: "/oracle.v1.Msg/Activate",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the oracle Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Oracle_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Oracle_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// RequestData defines a method for submitting a new request.
  func requestData(request: Oracle_V1_MsgRequestData, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgRequestDataResponse>

  /// ReportData defines a method for reporting a data to resolve the request.
  func reportData(request: Oracle_V1_MsgReportData, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgReportDataResponse>

  /// CreateDataSource defines a method for creating a new data source.
  func createDataSource(request: Oracle_V1_MsgCreateDataSource, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgCreateDataSourceResponse>

  /// EditDataSource defines a method for editing an existing data source.
  func editDataSource(request: Oracle_V1_MsgEditDataSource, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgEditDataSourceResponse>

  /// CreateOracleScript defines a method for creating a new oracle script.
  func createOracleScript(request: Oracle_V1_MsgCreateOracleScript, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgCreateOracleScriptResponse>

  /// EditOracleScript defines a method for editing an existing oracle script.
  func editOracleScript(request: Oracle_V1_MsgEditOracleScript, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgEditOracleScriptResponse>

  /// Activate defines a method for applying to be an oracle validator.
  func activate(request: Oracle_V1_MsgActivate, context: StatusOnlyCallContext) -> EventLoopFuture<Oracle_V1_MsgActivateResponse>
}

extension Oracle_V1_MsgProvider {
  internal var serviceName: Substring {
    return Oracle_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgRequestData>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgRequestDataResponse>(),
        interceptors: self.interceptors?.makeRequestDataInterceptors() ?? [],
        userFunction: self.requestData(request:context:)
      )

    case "ReportData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgReportData>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgReportDataResponse>(),
        interceptors: self.interceptors?.makeReportDataInterceptors() ?? [],
        userFunction: self.reportData(request:context:)
      )

    case "CreateDataSource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgCreateDataSource>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgCreateDataSourceResponse>(),
        interceptors: self.interceptors?.makeCreateDataSourceInterceptors() ?? [],
        userFunction: self.createDataSource(request:context:)
      )

    case "EditDataSource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgEditDataSource>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgEditDataSourceResponse>(),
        interceptors: self.interceptors?.makeEditDataSourceInterceptors() ?? [],
        userFunction: self.editDataSource(request:context:)
      )

    case "CreateOracleScript":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgCreateOracleScript>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgCreateOracleScriptResponse>(),
        interceptors: self.interceptors?.makeCreateOracleScriptInterceptors() ?? [],
        userFunction: self.createOracleScript(request:context:)
      )

    case "EditOracleScript":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgEditOracleScript>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgEditOracleScriptResponse>(),
        interceptors: self.interceptors?.makeEditOracleScriptInterceptors() ?? [],
        userFunction: self.editOracleScript(request:context:)
      )

    case "Activate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgActivate>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgActivateResponse>(),
        interceptors: self.interceptors?.makeActivateInterceptors() ?? [],
        userFunction: self.activate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the oracle Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Oracle_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Oracle_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// RequestData defines a method for submitting a new request.
  @Sendable func requestData(
    request: Oracle_V1_MsgRequestData,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgRequestDataResponse

  /// ReportData defines a method for reporting a data to resolve the request.
  @Sendable func reportData(
    request: Oracle_V1_MsgReportData,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgReportDataResponse

  /// CreateDataSource defines a method for creating a new data source.
  @Sendable func createDataSource(
    request: Oracle_V1_MsgCreateDataSource,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgCreateDataSourceResponse

  /// EditDataSource defines a method for editing an existing data source.
  @Sendable func editDataSource(
    request: Oracle_V1_MsgEditDataSource,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgEditDataSourceResponse

  /// CreateOracleScript defines a method for creating a new oracle script.
  @Sendable func createOracleScript(
    request: Oracle_V1_MsgCreateOracleScript,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgCreateOracleScriptResponse

  /// EditOracleScript defines a method for editing an existing oracle script.
  @Sendable func editOracleScript(
    request: Oracle_V1_MsgEditOracleScript,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgEditOracleScriptResponse

  /// Activate defines a method for applying to be an oracle validator.
  @Sendable func activate(
    request: Oracle_V1_MsgActivate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Oracle_V1_MsgActivateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Oracle_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Oracle_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Oracle_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Oracle_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgRequestData>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgRequestDataResponse>(),
        interceptors: self.interceptors?.makeRequestDataInterceptors() ?? [],
        wrapping: self.requestData(request:context:)
      )

    case "ReportData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgReportData>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgReportDataResponse>(),
        interceptors: self.interceptors?.makeReportDataInterceptors() ?? [],
        wrapping: self.reportData(request:context:)
      )

    case "CreateDataSource":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgCreateDataSource>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgCreateDataSourceResponse>(),
        interceptors: self.interceptors?.makeCreateDataSourceInterceptors() ?? [],
        wrapping: self.createDataSource(request:context:)
      )

    case "EditDataSource":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgEditDataSource>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgEditDataSourceResponse>(),
        interceptors: self.interceptors?.makeEditDataSourceInterceptors() ?? [],
        wrapping: self.editDataSource(request:context:)
      )

    case "CreateOracleScript":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgCreateOracleScript>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgCreateOracleScriptResponse>(),
        interceptors: self.interceptors?.makeCreateOracleScriptInterceptors() ?? [],
        wrapping: self.createOracleScript(request:context:)
      )

    case "EditOracleScript":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgEditOracleScript>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgEditOracleScriptResponse>(),
        interceptors: self.interceptors?.makeEditOracleScriptInterceptors() ?? [],
        wrapping: self.editOracleScript(request:context:)
      )

    case "Activate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Oracle_V1_MsgActivate>(),
        responseSerializer: ProtobufSerializer<Oracle_V1_MsgActivateResponse>(),
        interceptors: self.interceptors?.makeActivateInterceptors() ?? [],
        wrapping: self.activate(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Oracle_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'requestData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestDataInterceptors() -> [ServerInterceptor<Oracle_V1_MsgRequestData, Oracle_V1_MsgRequestDataResponse>]

  /// - Returns: Interceptors to use when handling 'reportData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReportDataInterceptors() -> [ServerInterceptor<Oracle_V1_MsgReportData, Oracle_V1_MsgReportDataResponse>]

  /// - Returns: Interceptors to use when handling 'createDataSource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDataSourceInterceptors() -> [ServerInterceptor<Oracle_V1_MsgCreateDataSource, Oracle_V1_MsgCreateDataSourceResponse>]

  /// - Returns: Interceptors to use when handling 'editDataSource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditDataSourceInterceptors() -> [ServerInterceptor<Oracle_V1_MsgEditDataSource, Oracle_V1_MsgEditDataSourceResponse>]

  /// - Returns: Interceptors to use when handling 'createOracleScript'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateOracleScriptInterceptors() -> [ServerInterceptor<Oracle_V1_MsgCreateOracleScript, Oracle_V1_MsgCreateOracleScriptResponse>]

  /// - Returns: Interceptors to use when handling 'editOracleScript'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditOracleScriptInterceptors() -> [ServerInterceptor<Oracle_V1_MsgEditOracleScript, Oracle_V1_MsgEditOracleScriptResponse>]

  /// - Returns: Interceptors to use when handling 'activate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateInterceptors() -> [ServerInterceptor<Oracle_V1_MsgActivate, Oracle_V1_MsgActivateResponse>]
}

internal enum Oracle_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "oracle.v1.Msg",
    methods: [
      Oracle_V1_MsgServerMetadata.Methods.requestData,
      Oracle_V1_MsgServerMetadata.Methods.reportData,
      Oracle_V1_MsgServerMetadata.Methods.createDataSource,
      Oracle_V1_MsgServerMetadata.Methods.editDataSource,
      Oracle_V1_MsgServerMetadata.Methods.createOracleScript,
      Oracle_V1_MsgServerMetadata.Methods.editOracleScript,
      Oracle_V1_MsgServerMetadata.Methods.activate,
    ]
  )

  internal enum Methods {
    internal static let requestData = GRPCMethodDescriptor(
      name: "RequestData",
      path: "/oracle.v1.Msg/RequestData",
      type: GRPCCallType.unary
    )

    internal static let reportData = GRPCMethodDescriptor(
      name: "ReportData",
      path: "/oracle.v1.Msg/ReportData",
      type: GRPCCallType.unary
    )

    internal static let createDataSource = GRPCMethodDescriptor(
      name: "CreateDataSource",
      path: "/oracle.v1.Msg/CreateDataSource",
      type: GRPCCallType.unary
    )

    internal static let editDataSource = GRPCMethodDescriptor(
      name: "EditDataSource",
      path: "/oracle.v1.Msg/EditDataSource",
      type: GRPCCallType.unary
    )

    internal static let createOracleScript = GRPCMethodDescriptor(
      name: "CreateOracleScript",
      path: "/oracle.v1.Msg/CreateOracleScript",
      type: GRPCCallType.unary
    )

    internal static let editOracleScript = GRPCMethodDescriptor(
      name: "EditOracleScript",
      path: "/oracle.v1.Msg/EditOracleScript",
      type: GRPCCallType.unary
    )

    internal static let activate = GRPCMethodDescriptor(
      name: "Activate",
      path: "/oracle.v1.Msg/Activate",
      type: GRPCCallType.unary
    )
  }
}
