//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: panacea/datapool/v2alpha1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Panacea_Datapool_V2alpha1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Panacea_Datapool_V2alpha1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func pool(
    _ request: Panacea_Datapool_V2alpha1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryPoolRequest, Panacea_Datapool_V2alpha1_QueryPoolResponse>

  func dataPoolParams(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>

  func dataPoolModuleAddr(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>

  func dataCerts(
    _ request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataCertsRequest, Panacea_Datapool_V2alpha1_QueryDataCertsResponse>

  func dataPassRedeemReceipt(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>

  func dataPassRedeemReceipts(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>

  func dataPassRedeemHistory(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>
}

extension Panacea_Datapool_V2alpha1_QueryClientProtocol {
  internal var serviceName: String {
    return "panacea.datapool.v2alpha1.Query"
  }

  /// Pool returns a Pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Panacea_Datapool_V2alpha1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryPoolRequest, Panacea_Datapool_V2alpha1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// DataPoolParams returns params of x/datapool module.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataPoolParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataPoolParams(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPoolParamsInterceptors() ?? []
    )
  }

  /// DataPoolModuleAddr returns x/datapool module address.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataPoolModuleAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataPoolModuleAddr(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolModuleAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPoolModuleAddrInterceptors() ?? []
    )
  }

  /// DataCert returns DataCerts
  ///
  /// - Parameters:
  ///   - request: Request to send to DataCerts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataCerts(
    _ request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataCertsRequest, Panacea_Datapool_V2alpha1_QueryDataCertsResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataCerts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataCertsInterceptors() ?? []
    )
  }

  /// DataPassRedeemReceipt returns DataPassRedeemReceipt
  ///
  /// - Parameters:
  ///   - request: Request to send to DataPassRedeemReceipt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataPassRedeemReceipt(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemReceiptInterceptors() ?? []
    )
  }

  /// DataPassRedeemReceipts returns DataPassRedeemReceipts
  ///
  /// - Parameters:
  ///   - request: Request to send to DataPassRedeemReceipts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataPassRedeemReceipts(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemReceiptsInterceptors() ?? []
    )
  }

  /// DataPassRedeemHistory returns a list of DataPassRedeemHistories
  ///
  /// - Parameters:
  ///   - request: Request to send to DataPassRedeemHistory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataPassRedeemHistory(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemHistoryInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Panacea_Datapool_V2alpha1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Panacea_Datapool_V2alpha1_QueryNIOClient")
internal final class Panacea_Datapool_V2alpha1_QueryClient: Panacea_Datapool_V2alpha1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the panacea.datapool.v2alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Panacea_Datapool_V2alpha1_QueryNIOClient: Panacea_Datapool_V2alpha1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the panacea.datapool.v2alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Datapool_V2alpha1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func makePoolCall(
    _ request: Panacea_Datapool_V2alpha1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryPoolRequest, Panacea_Datapool_V2alpha1_QueryPoolResponse>

  func makeDataPoolParamsCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>

  func makeDataPoolModuleAddrCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>

  func makeDataCertsCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataCertsRequest, Panacea_Datapool_V2alpha1_QueryDataCertsResponse>

  func makeDataPassRedeemReceiptCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>

  func makeDataPassRedeemReceiptsCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>

  func makeDataPassRedeemHistoryCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datapool_V2alpha1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Datapool_V2alpha1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makePoolCall(
    _ request: Panacea_Datapool_V2alpha1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryPoolRequest, Panacea_Datapool_V2alpha1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func makeDataPoolParamsCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPoolParamsInterceptors() ?? []
    )
  }

  internal func makeDataPoolModuleAddrCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolModuleAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPoolModuleAddrInterceptors() ?? []
    )
  }

  internal func makeDataCertsCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataCertsRequest, Panacea_Datapool_V2alpha1_QueryDataCertsResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataCerts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataCertsInterceptors() ?? []
    )
  }

  internal func makeDataPassRedeemReceiptCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemReceiptInterceptors() ?? []
    )
  }

  internal func makeDataPassRedeemReceiptsCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemReceiptsInterceptors() ?? []
    )
  }

  internal func makeDataPassRedeemHistoryCall(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemHistoryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datapool_V2alpha1_QueryAsyncClientProtocol {
  internal func pool(
    _ request: Panacea_Datapool_V2alpha1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func dataPoolParams(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPoolParamsInterceptors() ?? []
    )
  }

  internal func dataPoolModuleAddr(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolModuleAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPoolModuleAddrInterceptors() ?? []
    )
  }

  internal func dataCerts(
    _ request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataCertsResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataCerts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataCertsInterceptors() ?? []
    )
  }

  internal func dataPassRedeemReceipt(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemReceiptInterceptors() ?? []
    )
  }

  internal func dataPassRedeemReceipts(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemReceiptsInterceptors() ?? []
    )
  }

  internal func dataPassRedeemHistory(
    _ request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataPassRedeemHistoryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Panacea_Datapool_V2alpha1_QueryAsyncClient: Panacea_Datapool_V2alpha1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Panacea_Datapool_V2alpha1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryPoolRequest, Panacea_Datapool_V2alpha1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'dataPoolParams'.
  func makeDataPoolParamsInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'dataPoolModuleAddr'.
  func makeDataPoolModuleAddrInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'dataCerts'.
  func makeDataCertsInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryDataCertsRequest, Panacea_Datapool_V2alpha1_QueryDataCertsResponse>]

  /// - Returns: Interceptors to use when invoking 'dataPassRedeemReceipt'.
  func makeDataPassRedeemReceiptInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>]

  /// - Returns: Interceptors to use when invoking 'dataPassRedeemReceipts'.
  func makeDataPassRedeemReceiptsInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>]

  /// - Returns: Interceptors to use when invoking 'dataPassRedeemHistory'.
  func makeDataPassRedeemHistoryInterceptors() -> [ClientInterceptor<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>]
}

internal enum Panacea_Datapool_V2alpha1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "panacea.datapool.v2alpha1.Query",
    methods: [
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.pool,
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolParams,
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPoolModuleAddr,
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataCerts,
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipt,
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemReceipts,
      Panacea_Datapool_V2alpha1_QueryClientMetadata.Methods.dataPassRedeemHistory,
    ]
  )

  internal enum Methods {
    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/panacea.datapool.v2alpha1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let dataPoolParams = GRPCMethodDescriptor(
      name: "DataPoolParams",
      path: "/panacea.datapool.v2alpha1.Query/DataPoolParams",
      type: GRPCCallType.unary
    )

    internal static let dataPoolModuleAddr = GRPCMethodDescriptor(
      name: "DataPoolModuleAddr",
      path: "/panacea.datapool.v2alpha1.Query/DataPoolModuleAddr",
      type: GRPCCallType.unary
    )

    internal static let dataCerts = GRPCMethodDescriptor(
      name: "DataCerts",
      path: "/panacea.datapool.v2alpha1.Query/DataCerts",
      type: GRPCCallType.unary
    )

    internal static let dataPassRedeemReceipt = GRPCMethodDescriptor(
      name: "DataPassRedeemReceipt",
      path: "/panacea.datapool.v2alpha1.Query/DataPassRedeemReceipt",
      type: GRPCCallType.unary
    )

    internal static let dataPassRedeemReceipts = GRPCMethodDescriptor(
      name: "DataPassRedeemReceipts",
      path: "/panacea.datapool.v2alpha1.Query/DataPassRedeemReceipts",
      type: GRPCCallType.unary
    )

    internal static let dataPassRedeemHistory = GRPCMethodDescriptor(
      name: "DataPassRedeemHistory",
      path: "/panacea.datapool.v2alpha1.Query/DataPassRedeemHistory",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Panacea_Datapool_V2alpha1_QueryProvider: CallHandlerProvider {
  var interceptors: Panacea_Datapool_V2alpha1_QueryServerInterceptorFactoryProtocol? { get }

  /// Pool returns a Pool.
  func pool(request: Panacea_Datapool_V2alpha1_QueryPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryPoolResponse>

  /// DataPoolParams returns params of x/datapool module.
  func dataPoolParams(request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>

  /// DataPoolModuleAddr returns x/datapool module address.
  func dataPoolModuleAddr(request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>

  /// DataCert returns DataCerts
  func dataCerts(request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryDataCertsResponse>

  /// DataPassRedeemReceipt returns DataPassRedeemReceipt
  func dataPassRedeemReceipt(request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>

  /// DataPassRedeemReceipts returns DataPassRedeemReceipts
  func dataPassRedeemReceipts(request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>

  /// DataPassRedeemHistory returns a list of DataPassRedeemHistories
  func dataPassRedeemHistory(request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>
}

extension Panacea_Datapool_V2alpha1_QueryProvider {
  internal var serviceName: Substring {
    return Panacea_Datapool_V2alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "DataPoolParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>(),
        interceptors: self.interceptors?.makeDataPoolParamsInterceptors() ?? [],
        userFunction: self.dataPoolParams(request:context:)
      )

    case "DataPoolModuleAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>(),
        interceptors: self.interceptors?.makeDataPoolModuleAddrInterceptors() ?? [],
        userFunction: self.dataPoolModuleAddr(request:context:)
      )

    case "DataCerts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataCertsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataCertsResponse>(),
        interceptors: self.interceptors?.makeDataCertsInterceptors() ?? [],
        userFunction: self.dataCerts(request:context:)
      )

    case "DataPassRedeemReceipt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>(),
        interceptors: self.interceptors?.makeDataPassRedeemReceiptInterceptors() ?? [],
        userFunction: self.dataPassRedeemReceipt(request:context:)
      )

    case "DataPassRedeemReceipts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>(),
        interceptors: self.interceptors?.makeDataPassRedeemReceiptsInterceptors() ?? [],
        userFunction: self.dataPassRedeemReceipts(request:context:)
      )

    case "DataPassRedeemHistory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>(),
        interceptors: self.interceptors?.makeDataPassRedeemHistoryInterceptors() ?? [],
        userFunction: self.dataPassRedeemHistory(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Datapool_V2alpha1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Datapool_V2alpha1_QueryServerInterceptorFactoryProtocol? { get }

  /// Pool returns a Pool.
  @Sendable func pool(
    request: Panacea_Datapool_V2alpha1_QueryPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryPoolResponse

  /// DataPoolParams returns params of x/datapool module.
  @Sendable func dataPoolParams(
    request: Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse

  /// DataPoolModuleAddr returns x/datapool module address.
  @Sendable func dataPoolModuleAddr(
    request: Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse

  /// DataCert returns DataCerts
  @Sendable func dataCerts(
    request: Panacea_Datapool_V2alpha1_QueryDataCertsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataCertsResponse

  /// DataPassRedeemReceipt returns DataPassRedeemReceipt
  @Sendable func dataPassRedeemReceipt(
    request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse

  /// DataPassRedeemReceipts returns DataPassRedeemReceipts
  @Sendable func dataPassRedeemReceipts(
    request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse

  /// DataPassRedeemHistory returns a list of DataPassRedeemHistories
  @Sendable func dataPassRedeemHistory(
    request: Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datapool_V2alpha1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Datapool_V2alpha1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Panacea_Datapool_V2alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Panacea_Datapool_V2alpha1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Pool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        wrapping: self.pool(request:context:)
      )

    case "DataPoolParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>(),
        interceptors: self.interceptors?.makeDataPoolParamsInterceptors() ?? [],
        wrapping: self.dataPoolParams(request:context:)
      )

    case "DataPoolModuleAddr":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>(),
        interceptors: self.interceptors?.makeDataPoolModuleAddrInterceptors() ?? [],
        wrapping: self.dataPoolModuleAddr(request:context:)
      )

    case "DataCerts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataCertsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataCertsResponse>(),
        interceptors: self.interceptors?.makeDataCertsInterceptors() ?? [],
        wrapping: self.dataCerts(request:context:)
      )

    case "DataPassRedeemReceipt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>(),
        interceptors: self.interceptors?.makeDataPassRedeemReceiptInterceptors() ?? [],
        wrapping: self.dataPassRedeemReceipt(request:context:)
      )

    case "DataPassRedeemReceipts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>(),
        interceptors: self.interceptors?.makeDataPassRedeemReceiptsInterceptors() ?? [],
        wrapping: self.dataPassRedeemReceipts(request:context:)
      )

    case "DataPassRedeemHistory":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>(),
        interceptors: self.interceptors?.makeDataPassRedeemHistoryInterceptors() ?? [],
        wrapping: self.dataPassRedeemHistory(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Panacea_Datapool_V2alpha1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryPoolRequest, Panacea_Datapool_V2alpha1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'dataPoolParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataPoolParamsInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryDataPoolParamsRequest, Panacea_Datapool_V2alpha1_QueryDataPoolParamsResponse>]

  /// - Returns: Interceptors to use when handling 'dataPoolModuleAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataPoolModuleAddrInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrRequest, Panacea_Datapool_V2alpha1_QueryDataPoolModuleAddrResponse>]

  /// - Returns: Interceptors to use when handling 'dataCerts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataCertsInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryDataCertsRequest, Panacea_Datapool_V2alpha1_QueryDataCertsResponse>]

  /// - Returns: Interceptors to use when handling 'dataPassRedeemReceipt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataPassRedeemReceiptInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptResponse>]

  /// - Returns: Interceptors to use when handling 'dataPassRedeemReceipts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataPassRedeemReceiptsInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemReceiptsResponse>]

  /// - Returns: Interceptors to use when handling 'dataPassRedeemHistory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataPassRedeemHistoryInterceptors() -> [ServerInterceptor<Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryRequest, Panacea_Datapool_V2alpha1_QueryDataPassRedeemHistoryResponse>]
}

internal enum Panacea_Datapool_V2alpha1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "panacea.datapool.v2alpha1.Query",
    methods: [
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.pool,
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.dataPoolParams,
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.dataPoolModuleAddr,
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.dataCerts,
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.dataPassRedeemReceipt,
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.dataPassRedeemReceipts,
      Panacea_Datapool_V2alpha1_QueryServerMetadata.Methods.dataPassRedeemHistory,
    ]
  )

  internal enum Methods {
    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/panacea.datapool.v2alpha1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let dataPoolParams = GRPCMethodDescriptor(
      name: "DataPoolParams",
      path: "/panacea.datapool.v2alpha1.Query/DataPoolParams",
      type: GRPCCallType.unary
    )

    internal static let dataPoolModuleAddr = GRPCMethodDescriptor(
      name: "DataPoolModuleAddr",
      path: "/panacea.datapool.v2alpha1.Query/DataPoolModuleAddr",
      type: GRPCCallType.unary
    )

    internal static let dataCerts = GRPCMethodDescriptor(
      name: "DataCerts",
      path: "/panacea.datapool.v2alpha1.Query/DataCerts",
      type: GRPCCallType.unary
    )

    internal static let dataPassRedeemReceipt = GRPCMethodDescriptor(
      name: "DataPassRedeemReceipt",
      path: "/panacea.datapool.v2alpha1.Query/DataPassRedeemReceipt",
      type: GRPCCallType.unary
    )

    internal static let dataPassRedeemReceipts = GRPCMethodDescriptor(
      name: "DataPassRedeemReceipts",
      path: "/panacea.datapool.v2alpha1.Query/DataPassRedeemReceipts",
      type: GRPCCallType.unary
    )

    internal static let dataPassRedeemHistory = GRPCMethodDescriptor(
      name: "DataPassRedeemHistory",
      path: "/panacea.datapool.v2alpha1.Query/DataPassRedeemHistory",
      type: GRPCCallType.unary
    )
  }
}
