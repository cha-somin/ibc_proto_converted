//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: neutron/interchainqueries/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Neutron_Interchainqueries_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Neutron_Interchainqueries_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? { get }

  func registerInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgRegisterInterchainQuery,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Interchainqueries_MsgRegisterInterchainQuery, Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>

  func submitQueryResult(
    _ request: Neutron_Interchainqueries_MsgSubmitQueryResult,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Interchainqueries_MsgSubmitQueryResult, Neutron_Interchainqueries_MsgSubmitQueryResultResponse>

  func removeInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>

  func updateInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>
}

extension Neutron_Interchainqueries_MsgClientProtocol {
  internal var serviceName: String {
    return "neutron.interchainqueries.Msg"
  }

  /// Unary call to RegisterInterchainQuery
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterInterchainQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgRegisterInterchainQuery,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Interchainqueries_MsgRegisterInterchainQuery, Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse> {
    return self.makeUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.registerInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterchainQueryInterceptors() ?? []
    )
  }

  /// Unary call to SubmitQueryResult
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitQueryResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitQueryResult(
    _ request: Neutron_Interchainqueries_MsgSubmitQueryResult,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Interchainqueries_MsgSubmitQueryResult, Neutron_Interchainqueries_MsgSubmitQueryResultResponse> {
    return self.makeUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.submitQueryResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitQueryResultInterceptors() ?? []
    )
  }

  /// Unary call to RemoveInterchainQuery
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveInterchainQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse> {
    return self.makeUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.removeInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveInterchainQueryInterceptors() ?? []
    )
  }

  /// Unary call to UpdateInterchainQuery
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateInterchainQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse> {
    return self.makeUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.updateInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterchainQueryInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Neutron_Interchainqueries_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Neutron_Interchainqueries_MsgNIOClient")
internal final class Neutron_Interchainqueries_MsgClient: Neutron_Interchainqueries_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the neutron.interchainqueries.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Neutron_Interchainqueries_MsgNIOClient: Neutron_Interchainqueries_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the neutron.interchainqueries.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Neutron_Interchainqueries_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? { get }

  func makeRegisterInterchainQueryCall(
    _ request: Neutron_Interchainqueries_MsgRegisterInterchainQuery,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgRegisterInterchainQuery, Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>

  func makeSubmitQueryResultCall(
    _ request: Neutron_Interchainqueries_MsgSubmitQueryResult,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgSubmitQueryResult, Neutron_Interchainqueries_MsgSubmitQueryResultResponse>

  func makeRemoveInterchainQueryCall(
    _ request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>

  func makeUpdateInterchainQueryCall(
    _ request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Interchainqueries_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Neutron_Interchainqueries_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterInterchainQueryCall(
    _ request: Neutron_Interchainqueries_MsgRegisterInterchainQuery,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgRegisterInterchainQuery, Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.registerInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterchainQueryInterceptors() ?? []
    )
  }

  internal func makeSubmitQueryResultCall(
    _ request: Neutron_Interchainqueries_MsgSubmitQueryResult,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgSubmitQueryResult, Neutron_Interchainqueries_MsgSubmitQueryResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.submitQueryResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitQueryResultInterceptors() ?? []
    )
  }

  internal func makeRemoveInterchainQueryCall(
    _ request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.removeInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveInterchainQueryInterceptors() ?? []
    )
  }

  internal func makeUpdateInterchainQueryCall(
    _ request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.updateInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterchainQueryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Interchainqueries_MsgAsyncClientProtocol {
  internal func registerInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgRegisterInterchainQuery,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.registerInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterchainQueryInterceptors() ?? []
    )
  }

  internal func submitQueryResult(
    _ request: Neutron_Interchainqueries_MsgSubmitQueryResult,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Interchainqueries_MsgSubmitQueryResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.submitQueryResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitQueryResultInterceptors() ?? []
    )
  }

  internal func removeInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.removeInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveInterchainQueryInterceptors() ?? []
    )
  }

  internal func updateInterchainQuery(
    _ request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Interchainqueries_MsgClientMetadata.Methods.updateInterchainQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterchainQueryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Neutron_Interchainqueries_MsgAsyncClient: Neutron_Interchainqueries_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Neutron_Interchainqueries_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerInterchainQuery'.
  func makeRegisterInterchainQueryInterceptors() -> [ClientInterceptor<Neutron_Interchainqueries_MsgRegisterInterchainQuery, Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'submitQueryResult'.
  func makeSubmitQueryResultInterceptors() -> [ClientInterceptor<Neutron_Interchainqueries_MsgSubmitQueryResult, Neutron_Interchainqueries_MsgSubmitQueryResultResponse>]

  /// - Returns: Interceptors to use when invoking 'removeInterchainQuery'.
  func makeRemoveInterchainQueryInterceptors() -> [ClientInterceptor<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'updateInterchainQuery'.
  func makeUpdateInterchainQueryInterceptors() -> [ClientInterceptor<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>]
}

internal enum Neutron_Interchainqueries_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "neutron.interchainqueries.Msg",
    methods: [
      Neutron_Interchainqueries_MsgClientMetadata.Methods.registerInterchainQuery,
      Neutron_Interchainqueries_MsgClientMetadata.Methods.submitQueryResult,
      Neutron_Interchainqueries_MsgClientMetadata.Methods.removeInterchainQuery,
      Neutron_Interchainqueries_MsgClientMetadata.Methods.updateInterchainQuery,
    ]
  )

  internal enum Methods {
    internal static let registerInterchainQuery = GRPCMethodDescriptor(
      name: "RegisterInterchainQuery",
      path: "/neutron.interchainqueries.Msg/RegisterInterchainQuery",
      type: GRPCCallType.unary
    )

    internal static let submitQueryResult = GRPCMethodDescriptor(
      name: "SubmitQueryResult",
      path: "/neutron.interchainqueries.Msg/SubmitQueryResult",
      type: GRPCCallType.unary
    )

    internal static let removeInterchainQuery = GRPCMethodDescriptor(
      name: "RemoveInterchainQuery",
      path: "/neutron.interchainqueries.Msg/RemoveInterchainQuery",
      type: GRPCCallType.unary
    )

    internal static let updateInterchainQuery = GRPCMethodDescriptor(
      name: "UpdateInterchainQuery",
      path: "/neutron.interchainqueries.Msg/UpdateInterchainQuery",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Neutron_Interchainqueries_MsgProvider: CallHandlerProvider {
  var interceptors: Neutron_Interchainqueries_MsgServerInterceptorFactoryProtocol? { get }

  func registerInterchainQuery(request: Neutron_Interchainqueries_MsgRegisterInterchainQuery, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>

  func submitQueryResult(request: Neutron_Interchainqueries_MsgSubmitQueryResult, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Interchainqueries_MsgSubmitQueryResultResponse>

  func removeInterchainQuery(request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>

  func updateInterchainQuery(request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>
}

extension Neutron_Interchainqueries_MsgProvider {
  internal var serviceName: Substring {
    return Neutron_Interchainqueries_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterInterchainQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgRegisterInterchainQuery>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>(),
        interceptors: self.interceptors?.makeRegisterInterchainQueryInterceptors() ?? [],
        userFunction: self.registerInterchainQuery(request:context:)
      )

    case "SubmitQueryResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgSubmitQueryResult>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgSubmitQueryResultResponse>(),
        interceptors: self.interceptors?.makeSubmitQueryResultInterceptors() ?? [],
        userFunction: self.submitQueryResult(request:context:)
      )

    case "RemoveInterchainQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>(),
        interceptors: self.interceptors?.makeRemoveInterchainQueryInterceptors() ?? [],
        userFunction: self.removeInterchainQuery(request:context:)
      )

    case "UpdateInterchainQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>(),
        interceptors: self.interceptors?.makeUpdateInterchainQueryInterceptors() ?? [],
        userFunction: self.updateInterchainQuery(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Neutron_Interchainqueries_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Neutron_Interchainqueries_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func registerInterchainQuery(
    request: Neutron_Interchainqueries_MsgRegisterInterchainQuery,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse

  @Sendable func submitQueryResult(
    request: Neutron_Interchainqueries_MsgSubmitQueryResult,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Interchainqueries_MsgSubmitQueryResultResponse

  @Sendable func removeInterchainQuery(
    request: Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse

  @Sendable func updateInterchainQuery(
    request: Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Interchainqueries_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Neutron_Interchainqueries_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Neutron_Interchainqueries_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Neutron_Interchainqueries_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterInterchainQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgRegisterInterchainQuery>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>(),
        interceptors: self.interceptors?.makeRegisterInterchainQueryInterceptors() ?? [],
        wrapping: self.registerInterchainQuery(request:context:)
      )

    case "SubmitQueryResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgSubmitQueryResult>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgSubmitQueryResultResponse>(),
        interceptors: self.interceptors?.makeSubmitQueryResultInterceptors() ?? [],
        wrapping: self.submitQueryResult(request:context:)
      )

    case "RemoveInterchainQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>(),
        interceptors: self.interceptors?.makeRemoveInterchainQueryInterceptors() ?? [],
        wrapping: self.removeInterchainQuery(request:context:)
      )

    case "UpdateInterchainQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>(),
        interceptors: self.interceptors?.makeUpdateInterchainQueryInterceptors() ?? [],
        wrapping: self.updateInterchainQuery(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Neutron_Interchainqueries_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerInterchainQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterInterchainQueryInterceptors() -> [ServerInterceptor<Neutron_Interchainqueries_MsgRegisterInterchainQuery, Neutron_Interchainqueries_MsgRegisterInterchainQueryResponse>]

  /// - Returns: Interceptors to use when handling 'submitQueryResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitQueryResultInterceptors() -> [ServerInterceptor<Neutron_Interchainqueries_MsgSubmitQueryResult, Neutron_Interchainqueries_MsgSubmitQueryResultResponse>]

  /// - Returns: Interceptors to use when handling 'removeInterchainQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveInterchainQueryInterceptors() -> [ServerInterceptor<Neutron_Interchainqueries_MsgRemoveInterchainQueryRequest, Neutron_Interchainqueries_MsgRemoveInterchainQueryResponse>]

  /// - Returns: Interceptors to use when handling 'updateInterchainQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateInterchainQueryInterceptors() -> [ServerInterceptor<Neutron_Interchainqueries_MsgUpdateInterchainQueryRequest, Neutron_Interchainqueries_MsgUpdateInterchainQueryResponse>]
}

internal enum Neutron_Interchainqueries_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "neutron.interchainqueries.Msg",
    methods: [
      Neutron_Interchainqueries_MsgServerMetadata.Methods.registerInterchainQuery,
      Neutron_Interchainqueries_MsgServerMetadata.Methods.submitQueryResult,
      Neutron_Interchainqueries_MsgServerMetadata.Methods.removeInterchainQuery,
      Neutron_Interchainqueries_MsgServerMetadata.Methods.updateInterchainQuery,
    ]
  )

  internal enum Methods {
    internal static let registerInterchainQuery = GRPCMethodDescriptor(
      name: "RegisterInterchainQuery",
      path: "/neutron.interchainqueries.Msg/RegisterInterchainQuery",
      type: GRPCCallType.unary
    )

    internal static let submitQueryResult = GRPCMethodDescriptor(
      name: "SubmitQueryResult",
      path: "/neutron.interchainqueries.Msg/SubmitQueryResult",
      type: GRPCCallType.unary
    )

    internal static let removeInterchainQuery = GRPCMethodDescriptor(
      name: "RemoveInterchainQuery",
      path: "/neutron.interchainqueries.Msg/RemoveInterchainQuery",
      type: GRPCCallType.unary
    )

    internal static let updateInterchainQuery = GRPCMethodDescriptor(
      name: "UpdateInterchainQuery",
      path: "/neutron.interchainqueries.Msg/UpdateInterchainQuery",
      type: GRPCCallType.unary
    )
  }
}
