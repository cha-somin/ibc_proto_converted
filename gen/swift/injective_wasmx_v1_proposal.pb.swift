// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/wasmx/v1/proposal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Injective_Wasmx_V1_FundingMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case selfFunded // = 1
  case grantOnly // = 2
  case dual // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .selfFunded
    case 2: self = .grantOnly
    case 3: self = .dual
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .selfFunded: return 1
    case .grantOnly: return 2
    case .dual: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Injective_Wasmx_V1_FundingMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Injective_Wasmx_V1_FundingMode] = [
    .unspecified,
    .selfFunded,
    .grantOnly,
    .dual,
  ]
}

#endif  // swift(>=4.2)

struct Injective_Wasmx_V1_ContractRegistrationRequestProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var contractRegistrationRequest: Injective_Wasmx_V1_ContractRegistrationRequest {
    get {return _contractRegistrationRequest ?? Injective_Wasmx_V1_ContractRegistrationRequest()}
    set {_contractRegistrationRequest = newValue}
  }
  /// Returns true if `contractRegistrationRequest` has been explicitly set.
  var hasContractRegistrationRequest: Bool {return self._contractRegistrationRequest != nil}
  /// Clears the value of `contractRegistrationRequest`. Subsequent reads from it will return its default value.
  mutating func clearContractRegistrationRequest() {self._contractRegistrationRequest = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contractRegistrationRequest: Injective_Wasmx_V1_ContractRegistrationRequest? = nil
}

struct Injective_Wasmx_V1_BatchContractRegistrationRequestProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var contractRegistrationRequests: [Injective_Wasmx_V1_ContractRegistrationRequest] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Wasmx_V1_BatchContractDeregistrationProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var contracts: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Wasmx_V1_ContractRegistrationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique Identifier for contract instance to be registered.
  var contractAddress: String = String()

  /// Maximum gas to be used for the smart contract execution.
  var gasLimit: UInt64 = 0

  /// gas price to be used for the smart contract execution.
  var gasPrice: UInt64 = 0

  var shouldPinContract: Bool = false

  /// if true contract owner can update it, if false only current code_id will be
  /// allowed to be executed
  var isMigrationAllowed: Bool = false

  /// code_id of the contract being registered - will be verified upon every
  /// execution but only if is_migration_allowed is false
  var codeID: UInt64 = 0

  /// Optional address of admin account (that will be allowed to pause or update
  /// contract params)
  var adminAddress: String = String()

  /// Optional address of the contract that grants fees. Must be set if
  /// funding_mode is other than SelfFunded
  var granterAddress: String = String()

  /// Specifies how the contract will fund its execution
  var fundingMode: Injective_Wasmx_V1_FundingMode = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Wasmx_V1_BatchStoreCodeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var proposals: [Cosmwasm_Wasm_V1_StoreCodeProposal] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Injective_Wasmx_V1_FundingMode: @unchecked Sendable {}
extension Injective_Wasmx_V1_ContractRegistrationRequestProposal: @unchecked Sendable {}
extension Injective_Wasmx_V1_BatchContractRegistrationRequestProposal: @unchecked Sendable {}
extension Injective_Wasmx_V1_BatchContractDeregistrationProposal: @unchecked Sendable {}
extension Injective_Wasmx_V1_ContractRegistrationRequest: @unchecked Sendable {}
extension Injective_Wasmx_V1_BatchStoreCodeProposal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.wasmx.v1"

extension Injective_Wasmx_V1_FundingMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unspecified"),
    1: .same(proto: "SelfFunded"),
    2: .same(proto: "GrantOnly"),
    3: .same(proto: "Dual"),
  ]
}

extension Injective_Wasmx_V1_ContractRegistrationRequestProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractRegistrationRequestProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "contract_registration_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._contractRegistrationRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._contractRegistrationRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_ContractRegistrationRequestProposal, rhs: Injective_Wasmx_V1_ContractRegistrationRequestProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._contractRegistrationRequest != rhs._contractRegistrationRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Wasmx_V1_BatchContractRegistrationRequestProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchContractRegistrationRequestProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "contract_registration_requests"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.contractRegistrationRequests) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.contractRegistrationRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contractRegistrationRequests, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_BatchContractRegistrationRequestProposal, rhs: Injective_Wasmx_V1_BatchContractRegistrationRequestProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.contractRegistrationRequests != rhs.contractRegistrationRequests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Wasmx_V1_BatchContractDeregistrationProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchContractDeregistrationProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "contracts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.contracts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.contracts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.contracts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_BatchContractDeregistrationProposal, rhs: Injective_Wasmx_V1_BatchContractDeregistrationProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.contracts != rhs.contracts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Wasmx_V1_ContractRegistrationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractRegistrationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .standard(proto: "gas_limit"),
    3: .standard(proto: "gas_price"),
    4: .standard(proto: "should_pin_contract"),
    5: .standard(proto: "is_migration_allowed"),
    6: .standard(proto: "code_id"),
    7: .standard(proto: "admin_address"),
    8: .standard(proto: "granter_address"),
    9: .standard(proto: "funding_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.gasLimit) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.gasPrice) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.shouldPinContract) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isMigrationAllowed) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.codeID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.adminAddress) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.granterAddress) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.fundingMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if self.gasLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasLimit, fieldNumber: 2)
    }
    if self.gasPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasPrice, fieldNumber: 3)
    }
    if self.shouldPinContract != false {
      try visitor.visitSingularBoolField(value: self.shouldPinContract, fieldNumber: 4)
    }
    if self.isMigrationAllowed != false {
      try visitor.visitSingularBoolField(value: self.isMigrationAllowed, fieldNumber: 5)
    }
    if self.codeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.codeID, fieldNumber: 6)
    }
    if !self.adminAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAddress, fieldNumber: 7)
    }
    if !self.granterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.granterAddress, fieldNumber: 8)
    }
    if self.fundingMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.fundingMode, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_ContractRegistrationRequest, rhs: Injective_Wasmx_V1_ContractRegistrationRequest) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.gasLimit != rhs.gasLimit {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.shouldPinContract != rhs.shouldPinContract {return false}
    if lhs.isMigrationAllowed != rhs.isMigrationAllowed {return false}
    if lhs.codeID != rhs.codeID {return false}
    if lhs.adminAddress != rhs.adminAddress {return false}
    if lhs.granterAddress != rhs.granterAddress {return false}
    if lhs.fundingMode != rhs.fundingMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Wasmx_V1_BatchStoreCodeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchStoreCodeProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "proposals"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.proposals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.proposals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proposals, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_BatchStoreCodeProposal, rhs: Injective_Wasmx_V1_BatchStoreCodeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.proposals != rhs.proposals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
