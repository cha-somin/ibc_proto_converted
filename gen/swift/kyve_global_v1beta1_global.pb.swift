// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/global/v1beta1/global.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the global module parameters.
struct Kyve_Global_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// min_gas_price defines the minimum gas price value for all transactions.
  var minGasPrice: String = String()

  /// burn_ratio defines the ratio of transaction fees burnt.
  var burnRatio: String = String()

  /// gas_adjustments can add a constant amount of gas to a specific message type.
  /// This gives more control to make certain messages more expensive to avoid spamming
  /// of certain types of messages.
  var gasAdjustments: [Kyve_Global_V1beta1_GasAdjustment] = []

  /// gas_refunds lets the governance specify a fraction of how much gas
  /// a user gets refunded for a certain type of transaction.
  /// This could be used to make transactions which support to network cheaper.
  /// Gas refunds only work if the transaction only included one message.
  var gasRefunds: [Kyve_Global_V1beta1_GasRefund] = []

  /// min_initial_deposit_ratio sets a minimum fraction of initial deposit for a
  /// governance proposal. This is used to avoid spamming of proposals and
  /// polluting the proposals page.
  var minInitialDepositRatio: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GasAdjustment stores for every message type a fixed amount
/// of gas which is added to the message
struct Kyve_Global_V1beta1_GasAdjustment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type of the sdk-message
  var type: String = String()

  /// amount of gas which is added to the message
  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GasRefund stores the fraction of gas which will be refunded for a given
/// type of message.
/// This only works if the transaction only includes one message.
struct Kyve_Global_V1beta1_GasRefund {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type of the sdk-message
  var type: String = String()

  /// fraction in decimal representation between 0 and 1
  var fraction: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Global_V1beta1_Params: @unchecked Sendable {}
extension Kyve_Global_V1beta1_GasAdjustment: @unchecked Sendable {}
extension Kyve_Global_V1beta1_GasRefund: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.global.v1beta1"

extension Kyve_Global_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_gas_price"),
    2: .standard(proto: "burn_ratio"),
    3: .standard(proto: "gas_adjustments"),
    4: .standard(proto: "gas_refunds"),
    5: .standard(proto: "min_initial_deposit_ratio"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.minGasPrice) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.burnRatio) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.gasAdjustments) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.gasRefunds) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minInitialDepositRatio) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.minGasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.minGasPrice, fieldNumber: 1)
    }
    if !self.burnRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.burnRatio, fieldNumber: 2)
    }
    if !self.gasAdjustments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gasAdjustments, fieldNumber: 3)
    }
    if !self.gasRefunds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gasRefunds, fieldNumber: 4)
    }
    if !self.minInitialDepositRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.minInitialDepositRatio, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Global_V1beta1_Params, rhs: Kyve_Global_V1beta1_Params) -> Bool {
    if lhs.minGasPrice != rhs.minGasPrice {return false}
    if lhs.burnRatio != rhs.burnRatio {return false}
    if lhs.gasAdjustments != rhs.gasAdjustments {return false}
    if lhs.gasRefunds != rhs.gasRefunds {return false}
    if lhs.minInitialDepositRatio != rhs.minInitialDepositRatio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Global_V1beta1_GasAdjustment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GasAdjustment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Global_V1beta1_GasAdjustment, rhs: Kyve_Global_V1beta1_GasAdjustment) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Global_V1beta1_GasRefund: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GasRefund"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "fraction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fraction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.fraction.isEmpty {
      try visitor.visitSingularStringField(value: self.fraction, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Global_V1beta1_GasRefund, rhs: Kyve_Global_V1beta1_GasRefund) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.fraction != rhs.fraction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
