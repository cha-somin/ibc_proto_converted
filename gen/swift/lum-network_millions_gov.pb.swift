// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lum-network/millions/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Lum_Network_Millions_ProposalRegisterPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var chainID: String = String()

  var denom: String = String()

  var nativeDenom: String = String()

  var connectionID: String = String()

  var validators: [String] = []

  var minDepositAmount: String = String()

  var drawSchedule: Lum_Network_Millions_DrawSchedule {
    get {return _drawSchedule ?? Lum_Network_Millions_DrawSchedule()}
    set {_drawSchedule = newValue}
  }
  /// Returns true if `drawSchedule` has been explicitly set.
  var hasDrawSchedule: Bool {return self._drawSchedule != nil}
  /// Clears the value of `drawSchedule`. Subsequent reads from it will return its default value.
  mutating func clearDrawSchedule() {self._drawSchedule = nil}

  var prizeStrategy: Lum_Network_Millions_PrizeStrategy {
    get {return _prizeStrategy ?? Lum_Network_Millions_PrizeStrategy()}
    set {_prizeStrategy = newValue}
  }
  /// Returns true if `prizeStrategy` has been explicitly set.
  var hasPrizeStrategy: Bool {return self._prizeStrategy != nil}
  /// Clears the value of `prizeStrategy`. Subsequent reads from it will return its default value.
  mutating func clearPrizeStrategy() {self._prizeStrategy = nil}

  var bech32PrefixAccAddr: String = String()

  var bech32PrefixValAddr: String = String()

  var transferChannelID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _drawSchedule: Lum_Network_Millions_DrawSchedule? = nil
  fileprivate var _prizeStrategy: Lum_Network_Millions_PrizeStrategy? = nil
}

struct Lum_Network_Millions_ProposalUpdatePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var poolID: UInt64 = 0

  var validators: [String] = []

  var minDepositAmount: String = String()

  var drawSchedule: Lum_Network_Millions_DrawSchedule {
    get {return _drawSchedule ?? Lum_Network_Millions_DrawSchedule()}
    set {_drawSchedule = newValue}
  }
  /// Returns true if `drawSchedule` has been explicitly set.
  var hasDrawSchedule: Bool {return self._drawSchedule != nil}
  /// Clears the value of `drawSchedule`. Subsequent reads from it will return its default value.
  mutating func clearDrawSchedule() {self._drawSchedule = nil}

  var prizeStrategy: Lum_Network_Millions_PrizeStrategy {
    get {return _prizeStrategy ?? Lum_Network_Millions_PrizeStrategy()}
    set {_prizeStrategy = newValue}
  }
  /// Returns true if `prizeStrategy` has been explicitly set.
  var hasPrizeStrategy: Bool {return self._prizeStrategy != nil}
  /// Clears the value of `prizeStrategy`. Subsequent reads from it will return its default value.
  mutating func clearPrizeStrategy() {self._prizeStrategy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _drawSchedule: Lum_Network_Millions_DrawSchedule? = nil
  fileprivate var _prizeStrategy: Lum_Network_Millions_PrizeStrategy? = nil
}

struct Lum_Network_Millions_ProposalUpdateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var minDepositAmount: String = String()

  var maxPrizeStrategyBatches: String = String()

  var maxPrizeBatchQuantity: String = String()

  var minDrawScheduleDelta: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _minDrawScheduleDelta ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_minDrawScheduleDelta = newValue}
  }
  /// Returns true if `minDrawScheduleDelta` has been explicitly set.
  var hasMinDrawScheduleDelta: Bool {return self._minDrawScheduleDelta != nil}
  /// Clears the value of `minDrawScheduleDelta`. Subsequent reads from it will return its default value.
  mutating func clearMinDrawScheduleDelta() {self._minDrawScheduleDelta = nil}

  var maxDrawScheduleDelta: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxDrawScheduleDelta ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxDrawScheduleDelta = newValue}
  }
  /// Returns true if `maxDrawScheduleDelta` has been explicitly set.
  var hasMaxDrawScheduleDelta: Bool {return self._maxDrawScheduleDelta != nil}
  /// Clears the value of `maxDrawScheduleDelta`. Subsequent reads from it will return its default value.
  mutating func clearMaxDrawScheduleDelta() {self._maxDrawScheduleDelta = nil}

  var prizeExpirationDelta: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _prizeExpirationDelta ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_prizeExpirationDelta = newValue}
  }
  /// Returns true if `prizeExpirationDelta` has been explicitly set.
  var hasPrizeExpirationDelta: Bool {return self._prizeExpirationDelta != nil}
  /// Clears the value of `prizeExpirationDelta`. Subsequent reads from it will return its default value.
  mutating func clearPrizeExpirationDelta() {self._prizeExpirationDelta = nil}

  var feesStakers: String = String()

  var minDepositDrawDelta: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _minDepositDrawDelta ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_minDepositDrawDelta = newValue}
  }
  /// Returns true if `minDepositDrawDelta` has been explicitly set.
  var hasMinDepositDrawDelta: Bool {return self._minDepositDrawDelta != nil}
  /// Clears the value of `minDepositDrawDelta`. Subsequent reads from it will return its default value.
  mutating func clearMinDepositDrawDelta() {self._minDepositDrawDelta = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _minDrawScheduleDelta: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _maxDrawScheduleDelta: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _prizeExpirationDelta: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _minDepositDrawDelta: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lum_Network_Millions_ProposalRegisterPool: @unchecked Sendable {}
extension Lum_Network_Millions_ProposalUpdatePool: @unchecked Sendable {}
extension Lum_Network_Millions_ProposalUpdateParams: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lum.network.millions"

extension Lum_Network_Millions_ProposalRegisterPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProposalRegisterPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "chain_id"),
    4: .same(proto: "denom"),
    5: .standard(proto: "native_denom"),
    6: .standard(proto: "connection_id"),
    7: .same(proto: "validators"),
    8: .standard(proto: "min_deposit_amount"),
    9: .standard(proto: "draw_schedule"),
    10: .standard(proto: "prize_strategy"),
    11: .standard(proto: "bech32_prefix_acc_addr"),
    12: .standard(proto: "bech32_prefix_val_addr"),
    13: .standard(proto: "transfer_channel_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.nativeDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.validators) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.minDepositAmount) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._drawSchedule) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._prizeStrategy) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.bech32PrefixAccAddr) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.bech32PrefixValAddr) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.transferChannelID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 3)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 4)
    }
    if !self.nativeDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.nativeDenom, fieldNumber: 5)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 6)
    }
    if !self.validators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.validators, fieldNumber: 7)
    }
    if !self.minDepositAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minDepositAmount, fieldNumber: 8)
    }
    try { if let v = self._drawSchedule {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._prizeStrategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if !self.bech32PrefixAccAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.bech32PrefixAccAddr, fieldNumber: 11)
    }
    if !self.bech32PrefixValAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.bech32PrefixValAddr, fieldNumber: 12)
    }
    if !self.transferChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.transferChannelID, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_ProposalRegisterPool, rhs: Lum_Network_Millions_ProposalRegisterPool) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.nativeDenom != rhs.nativeDenom {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.validators != rhs.validators {return false}
    if lhs.minDepositAmount != rhs.minDepositAmount {return false}
    if lhs._drawSchedule != rhs._drawSchedule {return false}
    if lhs._prizeStrategy != rhs._prizeStrategy {return false}
    if lhs.bech32PrefixAccAddr != rhs.bech32PrefixAccAddr {return false}
    if lhs.bech32PrefixValAddr != rhs.bech32PrefixValAddr {return false}
    if lhs.transferChannelID != rhs.transferChannelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_ProposalUpdatePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProposalUpdatePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "pool_id"),
    4: .same(proto: "validators"),
    5: .standard(proto: "min_deposit_amount"),
    6: .standard(proto: "draw_schedule"),
    7: .standard(proto: "prize_strategy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.validators) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minDepositAmount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._drawSchedule) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._prizeStrategy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if !self.validators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.validators, fieldNumber: 4)
    }
    if !self.minDepositAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minDepositAmount, fieldNumber: 5)
    }
    try { if let v = self._drawSchedule {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._prizeStrategy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_ProposalUpdatePool, rhs: Lum_Network_Millions_ProposalUpdatePool) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.validators != rhs.validators {return false}
    if lhs.minDepositAmount != rhs.minDepositAmount {return false}
    if lhs._drawSchedule != rhs._drawSchedule {return false}
    if lhs._prizeStrategy != rhs._prizeStrategy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_ProposalUpdateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProposalUpdateParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "min_deposit_amount"),
    4: .standard(proto: "max_prize_strategy_batches"),
    5: .standard(proto: "max_prize_batch_quantity"),
    6: .standard(proto: "min_draw_schedule_delta"),
    7: .standard(proto: "max_draw_schedule_delta"),
    8: .standard(proto: "prize_expiration_delta"),
    9: .standard(proto: "fees_stakers"),
    10: .standard(proto: "min_deposit_draw_delta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.minDepositAmount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.maxPrizeStrategyBatches) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.maxPrizeBatchQuantity) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._minDrawScheduleDelta) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._maxDrawScheduleDelta) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._prizeExpirationDelta) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.feesStakers) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._minDepositDrawDelta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.minDepositAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minDepositAmount, fieldNumber: 3)
    }
    if !self.maxPrizeStrategyBatches.isEmpty {
      try visitor.visitSingularStringField(value: self.maxPrizeStrategyBatches, fieldNumber: 4)
    }
    if !self.maxPrizeBatchQuantity.isEmpty {
      try visitor.visitSingularStringField(value: self.maxPrizeBatchQuantity, fieldNumber: 5)
    }
    try { if let v = self._minDrawScheduleDelta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._maxDrawScheduleDelta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._prizeExpirationDelta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.feesStakers.isEmpty {
      try visitor.visitSingularStringField(value: self.feesStakers, fieldNumber: 9)
    }
    try { if let v = self._minDepositDrawDelta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_ProposalUpdateParams, rhs: Lum_Network_Millions_ProposalUpdateParams) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.minDepositAmount != rhs.minDepositAmount {return false}
    if lhs.maxPrizeStrategyBatches != rhs.maxPrizeStrategyBatches {return false}
    if lhs.maxPrizeBatchQuantity != rhs.maxPrizeBatchQuantity {return false}
    if lhs._minDrawScheduleDelta != rhs._minDrawScheduleDelta {return false}
    if lhs._maxDrawScheduleDelta != rhs._maxDrawScheduleDelta {return false}
    if lhs._prizeExpirationDelta != rhs._prizeExpirationDelta {return false}
    if lhs.feesStakers != rhs.feesStakers {return false}
    if lhs._minDepositDrawDelta != rhs._minDepositDrawDelta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
