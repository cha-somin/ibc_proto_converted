//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: coreum/asset/ft/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Coreum_Asset_Ft_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Coreum_Asset_Ft_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? { get }

  func issue(
    _ request: Coreum_Asset_Ft_V1_MsgIssue,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgIssue, Coreum_Asset_Ft_V1_EmptyResponse>

  func mint(
    _ request: Coreum_Asset_Ft_V1_MsgMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgMint, Coreum_Asset_Ft_V1_EmptyResponse>

  func burn(
    _ request: Coreum_Asset_Ft_V1_MsgBurn,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgBurn, Coreum_Asset_Ft_V1_EmptyResponse>

  func freeze(
    _ request: Coreum_Asset_Ft_V1_MsgFreeze,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgFreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func unfreeze(
    _ request: Coreum_Asset_Ft_V1_MsgUnfreeze,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func globallyFreeze(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyFreeze,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgGloballyFreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func globallyUnfreeze(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func setWhitelistedLimit(
    _ request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, Coreum_Asset_Ft_V1_EmptyResponse>
}

extension Coreum_Asset_Ft_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "coreum.asset.ft.v1.Msg"
  }

  /// Issue defines a method to issue a new fungible token.
  ///
  /// - Parameters:
  ///   - request: Request to send to Issue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issue(
    _ request: Coreum_Asset_Ft_V1_MsgIssue,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgIssue, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.issue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueInterceptors() ?? []
    )
  }

  /// Mint mints new fungible tokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mint(
    _ request: Coreum_Asset_Ft_V1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgMint, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Burn burns the specified fungible tokens from senders balance if the sender has enough balance.
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burn(
    _ request: Coreum_Asset_Ft_V1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgBurn, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// Freeze freezes a part of the fungible tokens in an
  /// account, only if the freezable feature is enabled on that token.
  ///
  /// - Parameters:
  ///   - request: Request to send to Freeze.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func freeze(
    _ request: Coreum_Asset_Ft_V1_MsgFreeze,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgFreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.freeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFreezeInterceptors() ?? []
    )
  }

  /// Unfreeze unfreezes a part of the frozen fungible tokens in an
  /// account, only if there are such frozen tokens on that account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Unfreeze.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfreeze(
    _ request: Coreum_Asset_Ft_V1_MsgUnfreeze,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.unfreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeInterceptors() ?? []
    )
  }

  /// GloballyFreeze freezes fungible token so no operations are allowed with it before unfrozen.
  /// This operation is idempotent so global freeze of already frozen token does nothing.
  ///
  /// - Parameters:
  ///   - request: Request to send to GloballyFreeze.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func globallyFreeze(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyFreeze,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgGloballyFreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyFreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGloballyFreezeInterceptors() ?? []
    )
  }

  /// GloballyUnfreeze unfreezes fungible token and unblocks basic operations on it.
  /// This operation is idempotent so global unfreezing of non-frozen token does nothing.
  ///
  /// - Parameters:
  ///   - request: Request to send to GloballyUnfreeze.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func globallyUnfreeze(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyUnfreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGloballyUnfreezeInterceptors() ?? []
    )
  }

  /// SetWhitelistedLimit sets the limit of how many tokens a specific account may hold.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetWhitelistedLimit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setWhitelistedLimit(
    _ request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.setWhitelistedLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetWhitelistedLimitInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Coreum_Asset_Ft_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Coreum_Asset_Ft_V1_MsgNIOClient")
internal final class Coreum_Asset_Ft_V1_MsgClient: Coreum_Asset_Ft_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the coreum.asset.ft.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Coreum_Asset_Ft_V1_MsgNIOClient: Coreum_Asset_Ft_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the coreum.asset.ft.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Asset_Ft_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeIssueCall(
    _ request: Coreum_Asset_Ft_V1_MsgIssue,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgIssue, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeMintCall(
    _ request: Coreum_Asset_Ft_V1_MsgMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgMint, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeBurnCall(
    _ request: Coreum_Asset_Ft_V1_MsgBurn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgBurn, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeFreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgFreeze,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgFreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeUnfreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgUnfreeze,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeGloballyFreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyFreeze,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgGloballyFreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeGloballyUnfreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>

  func makeSetWhitelistedLimitCall(
    _ request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, Coreum_Asset_Ft_V1_EmptyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Ft_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Asset_Ft_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeIssueCall(
    _ request: Coreum_Asset_Ft_V1_MsgIssue,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgIssue, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.issue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueInterceptors() ?? []
    )
  }

  internal func makeMintCall(
    _ request: Coreum_Asset_Ft_V1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgMint, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func makeBurnCall(
    _ request: Coreum_Asset_Ft_V1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgBurn, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func makeFreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgFreeze,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgFreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.freeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFreezeInterceptors() ?? []
    )
  }

  internal func makeUnfreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgUnfreeze,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.unfreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeInterceptors() ?? []
    )
  }

  internal func makeGloballyFreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyFreeze,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgGloballyFreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyFreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGloballyFreezeInterceptors() ?? []
    )
  }

  internal func makeGloballyUnfreezeCall(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyUnfreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGloballyUnfreezeInterceptors() ?? []
    )
  }

  internal func makeSetWhitelistedLimitCall(
    _ request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, Coreum_Asset_Ft_V1_EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.setWhitelistedLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetWhitelistedLimitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Ft_V1_MsgAsyncClientProtocol {
  internal func issue(
    _ request: Coreum_Asset_Ft_V1_MsgIssue,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.issue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueInterceptors() ?? []
    )
  }

  internal func mint(
    _ request: Coreum_Asset_Ft_V1_MsgMint,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func burn(
    _ request: Coreum_Asset_Ft_V1_MsgBurn,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func freeze(
    _ request: Coreum_Asset_Ft_V1_MsgFreeze,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.freeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFreezeInterceptors() ?? []
    )
  }

  internal func unfreeze(
    _ request: Coreum_Asset_Ft_V1_MsgUnfreeze,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.unfreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfreezeInterceptors() ?? []
    )
  }

  internal func globallyFreeze(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyFreeze,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyFreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGloballyFreezeInterceptors() ?? []
    )
  }

  internal func globallyUnfreeze(
    _ request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyUnfreeze.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGloballyUnfreezeInterceptors() ?? []
    )
  }

  internal func setWhitelistedLimit(
    _ request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.setWhitelistedLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetWhitelistedLimitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Coreum_Asset_Ft_V1_MsgAsyncClient: Coreum_Asset_Ft_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Coreum_Asset_Ft_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'issue'.
  func makeIssueInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgIssue, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgMint, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgBurn, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'freeze'.
  func makeFreezeInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgFreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'unfreeze'.
  func makeUnfreezeInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'globallyFreeze'.
  func makeGloballyFreezeInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgGloballyFreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'globallyUnfreeze'.
  func makeGloballyUnfreezeInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'setWhitelistedLimit'.
  func makeSetWhitelistedLimitInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, Coreum_Asset_Ft_V1_EmptyResponse>]
}

internal enum Coreum_Asset_Ft_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "coreum.asset.ft.v1.Msg",
    methods: [
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.issue,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.mint,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.burn,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.freeze,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.unfreeze,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyFreeze,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.globallyUnfreeze,
      Coreum_Asset_Ft_V1_MsgClientMetadata.Methods.setWhitelistedLimit,
    ]
  )

  internal enum Methods {
    internal static let issue = GRPCMethodDescriptor(
      name: "Issue",
      path: "/coreum.asset.ft.v1.Msg/Issue",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/coreum.asset.ft.v1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/coreum.asset.ft.v1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let freeze = GRPCMethodDescriptor(
      name: "Freeze",
      path: "/coreum.asset.ft.v1.Msg/Freeze",
      type: GRPCCallType.unary
    )

    internal static let unfreeze = GRPCMethodDescriptor(
      name: "Unfreeze",
      path: "/coreum.asset.ft.v1.Msg/Unfreeze",
      type: GRPCCallType.unary
    )

    internal static let globallyFreeze = GRPCMethodDescriptor(
      name: "GloballyFreeze",
      path: "/coreum.asset.ft.v1.Msg/GloballyFreeze",
      type: GRPCCallType.unary
    )

    internal static let globallyUnfreeze = GRPCMethodDescriptor(
      name: "GloballyUnfreeze",
      path: "/coreum.asset.ft.v1.Msg/GloballyUnfreeze",
      type: GRPCCallType.unary
    )

    internal static let setWhitelistedLimit = GRPCMethodDescriptor(
      name: "SetWhitelistedLimit",
      path: "/coreum.asset.ft.v1.Msg/SetWhitelistedLimit",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Coreum_Asset_Ft_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Coreum_Asset_Ft_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Issue defines a method to issue a new fungible token.
  func issue(request: Coreum_Asset_Ft_V1_MsgIssue, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// Mint mints new fungible tokens.
  func mint(request: Coreum_Asset_Ft_V1_MsgMint, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// Burn burns the specified fungible tokens from senders balance if the sender has enough balance.
  func burn(request: Coreum_Asset_Ft_V1_MsgBurn, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// Freeze freezes a part of the fungible tokens in an
  /// account, only if the freezable feature is enabled on that token.
  func freeze(request: Coreum_Asset_Ft_V1_MsgFreeze, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// Unfreeze unfreezes a part of the frozen fungible tokens in an
  /// account, only if there are such frozen tokens on that account.
  func unfreeze(request: Coreum_Asset_Ft_V1_MsgUnfreeze, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// GloballyFreeze freezes fungible token so no operations are allowed with it before unfrozen.
  /// This operation is idempotent so global freeze of already frozen token does nothing.
  func globallyFreeze(request: Coreum_Asset_Ft_V1_MsgGloballyFreeze, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// GloballyUnfreeze unfreezes fungible token and unblocks basic operations on it.
  /// This operation is idempotent so global unfreezing of non-frozen token does nothing.
  func globallyUnfreeze(request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>

  /// SetWhitelistedLimit sets the limit of how many tokens a specific account may hold.
  func setWhitelistedLimit(request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_EmptyResponse>
}

extension Coreum_Asset_Ft_V1_MsgProvider {
  internal var serviceName: Substring {
    return Coreum_Asset_Ft_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Issue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgIssue>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeIssueInterceptors() ?? [],
        userFunction: self.issue(request:context:)
      )

    case "Mint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgMint>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        userFunction: self.mint(request:context:)
      )

    case "Burn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        userFunction: self.burn(request:context:)
      )

    case "Freeze":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgFreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeFreezeInterceptors() ?? [],
        userFunction: self.freeze(request:context:)
      )

    case "Unfreeze":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgUnfreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeUnfreezeInterceptors() ?? [],
        userFunction: self.unfreeze(request:context:)
      )

    case "GloballyFreeze":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgGloballyFreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeGloballyFreezeInterceptors() ?? [],
        userFunction: self.globallyFreeze(request:context:)
      )

    case "GloballyUnfreeze":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeGloballyUnfreezeInterceptors() ?? [],
        userFunction: self.globallyUnfreeze(request:context:)
      )

    case "SetWhitelistedLimit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeSetWhitelistedLimitInterceptors() ?? [],
        userFunction: self.setWhitelistedLimit(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Asset_Ft_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Asset_Ft_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// Issue defines a method to issue a new fungible token.
  @Sendable func issue(
    request: Coreum_Asset_Ft_V1_MsgIssue,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// Mint mints new fungible tokens.
  @Sendable func mint(
    request: Coreum_Asset_Ft_V1_MsgMint,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// Burn burns the specified fungible tokens from senders balance if the sender has enough balance.
  @Sendable func burn(
    request: Coreum_Asset_Ft_V1_MsgBurn,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// Freeze freezes a part of the fungible tokens in an
  /// account, only if the freezable feature is enabled on that token.
  @Sendable func freeze(
    request: Coreum_Asset_Ft_V1_MsgFreeze,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// Unfreeze unfreezes a part of the frozen fungible tokens in an
  /// account, only if there are such frozen tokens on that account.
  @Sendable func unfreeze(
    request: Coreum_Asset_Ft_V1_MsgUnfreeze,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// GloballyFreeze freezes fungible token so no operations are allowed with it before unfrozen.
  /// This operation is idempotent so global freeze of already frozen token does nothing.
  @Sendable func globallyFreeze(
    request: Coreum_Asset_Ft_V1_MsgGloballyFreeze,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// GloballyUnfreeze unfreezes fungible token and unblocks basic operations on it.
  /// This operation is idempotent so global unfreezing of non-frozen token does nothing.
  @Sendable func globallyUnfreeze(
    request: Coreum_Asset_Ft_V1_MsgGloballyUnfreeze,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse

  /// SetWhitelistedLimit sets the limit of how many tokens a specific account may hold.
  @Sendable func setWhitelistedLimit(
    request: Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_EmptyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Ft_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Asset_Ft_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Coreum_Asset_Ft_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Coreum_Asset_Ft_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Issue":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgIssue>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeIssueInterceptors() ?? [],
        wrapping: self.issue(request:context:)
      )

    case "Mint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgMint>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        wrapping: self.mint(request:context:)
      )

    case "Burn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        wrapping: self.burn(request:context:)
      )

    case "Freeze":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgFreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeFreezeInterceptors() ?? [],
        wrapping: self.freeze(request:context:)
      )

    case "Unfreeze":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgUnfreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeUnfreezeInterceptors() ?? [],
        wrapping: self.unfreeze(request:context:)
      )

    case "GloballyFreeze":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgGloballyFreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeGloballyFreezeInterceptors() ?? [],
        wrapping: self.globallyFreeze(request:context:)
      )

    case "GloballyUnfreeze":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeGloballyUnfreezeInterceptors() ?? [],
        wrapping: self.globallyUnfreeze(request:context:)
      )

    case "SetWhitelistedLimit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_EmptyResponse>(),
        interceptors: self.interceptors?.makeSetWhitelistedLimitInterceptors() ?? [],
        wrapping: self.setWhitelistedLimit(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Coreum_Asset_Ft_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'issue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgIssue, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'mint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgMint, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'burn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgBurn, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'freeze'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFreezeInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgFreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'unfreeze'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfreezeInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'globallyFreeze'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGloballyFreezeInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgGloballyFreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'globallyUnfreeze'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGloballyUnfreezeInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgGloballyUnfreeze, Coreum_Asset_Ft_V1_EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'setWhitelistedLimit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetWhitelistedLimitInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_MsgSetWhitelistedLimit, Coreum_Asset_Ft_V1_EmptyResponse>]
}

internal enum Coreum_Asset_Ft_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "coreum.asset.ft.v1.Msg",
    methods: [
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.issue,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.mint,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.burn,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.freeze,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.unfreeze,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.globallyFreeze,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.globallyUnfreeze,
      Coreum_Asset_Ft_V1_MsgServerMetadata.Methods.setWhitelistedLimit,
    ]
  )

  internal enum Methods {
    internal static let issue = GRPCMethodDescriptor(
      name: "Issue",
      path: "/coreum.asset.ft.v1.Msg/Issue",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/coreum.asset.ft.v1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/coreum.asset.ft.v1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let freeze = GRPCMethodDescriptor(
      name: "Freeze",
      path: "/coreum.asset.ft.v1.Msg/Freeze",
      type: GRPCCallType.unary
    )

    internal static let unfreeze = GRPCMethodDescriptor(
      name: "Unfreeze",
      path: "/coreum.asset.ft.v1.Msg/Unfreeze",
      type: GRPCCallType.unary
    )

    internal static let globallyFreeze = GRPCMethodDescriptor(
      name: "GloballyFreeze",
      path: "/coreum.asset.ft.v1.Msg/GloballyFreeze",
      type: GRPCCallType.unary
    )

    internal static let globallyUnfreeze = GRPCMethodDescriptor(
      name: "GloballyUnfreeze",
      path: "/coreum.asset.ft.v1.Msg/GloballyUnfreeze",
      type: GRPCCallType.unary
    )

    internal static let setWhitelistedLimit = GRPCMethodDescriptor(
      name: "SetWhitelistedLimit",
      path: "/coreum.asset.ft.v1.Msg/SetWhitelistedLimit",
      type: GRPCCallType.unary
    )
  }
}
