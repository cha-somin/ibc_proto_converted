//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: irismod/service/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query creates service with iservice as rpc
///
/// Usage: instantiate `Irismod_Service_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Irismod_Service_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? { get }

  func definition(
    _ request: Irismod_Service_QueryDefinitionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryDefinitionRequest, Irismod_Service_QueryDefinitionResponse>

  func binding(
    _ request: Irismod_Service_QueryBindingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryBindingRequest, Irismod_Service_QueryBindingResponse>

  func bindings(
    _ request: Irismod_Service_QueryBindingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryBindingsRequest, Irismod_Service_QueryBindingsResponse>

  func withdrawAddress(
    _ request: Irismod_Service_QueryWithdrawAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryWithdrawAddressRequest, Irismod_Service_QueryWithdrawAddressResponse>

  func requestContext(
    _ request: Irismod_Service_QueryRequestContextRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryRequestContextRequest, Irismod_Service_QueryRequestContextResponse>

  func request(
    _ request: Irismod_Service_QueryRequestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryRequestRequest, Irismod_Service_QueryRequestResponse>

  func requests(
    _ request: Irismod_Service_QueryRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryRequestsRequest, Irismod_Service_QueryRequestsResponse>

  func requestsByReqCtx(
    _ request: Irismod_Service_QueryRequestsByReqCtxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryRequestsByReqCtxRequest, Irismod_Service_QueryRequestsByReqCtxResponse>

  func response(
    _ request: Irismod_Service_QueryResponseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryResponseRequest, Irismod_Service_QueryResponseResponse>

  func responses(
    _ request: Irismod_Service_QueryResponsesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryResponsesRequest, Irismod_Service_QueryResponsesResponse>

  func earnedFees(
    _ request: Irismod_Service_QueryEarnedFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryEarnedFeesRequest, Irismod_Service_QueryEarnedFeesResponse>

  func schema(
    _ request: Irismod_Service_QuerySchemaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QuerySchemaRequest, Irismod_Service_QuerySchemaResponse>

  func params(
    _ request: Irismod_Service_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Service_QueryParamsRequest, Irismod_Service_QueryParamsResponse>
}

extension Irismod_Service_QueryClientProtocol {
  internal var serviceName: String {
    return "irismod.service.Query"
  }

  /// Definition returns service definition
  ///
  /// - Parameters:
  ///   - request: Request to send to Definition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func definition(
    _ request: Irismod_Service_QueryDefinitionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryDefinitionRequest, Irismod_Service_QueryDefinitionResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.definition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefinitionInterceptors() ?? []
    )
  }

  /// Binding returns service Binding with service name and provider
  ///
  /// - Parameters:
  ///   - request: Request to send to Binding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func binding(
    _ request: Irismod_Service_QueryBindingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryBindingRequest, Irismod_Service_QueryBindingResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.binding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindingInterceptors() ?? []
    )
  }

  /// Bindings returns all service Bindings with service name and owner
  ///
  /// - Parameters:
  ///   - request: Request to send to Bindings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bindings(
    _ request: Irismod_Service_QueryBindingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryBindingsRequest, Irismod_Service_QueryBindingsResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.bindings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindingsInterceptors() ?? []
    )
  }

  /// WithdrawAddress returns the withdraw address of the binding owner
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawAddress(
    _ request: Irismod_Service_QueryWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryWithdrawAddressRequest, Irismod_Service_QueryWithdrawAddressResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.withdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawAddressInterceptors() ?? []
    )
  }

  /// RequestContext returns the request context
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestContext.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestContext(
    _ request: Irismod_Service_QueryRequestContextRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryRequestContextRequest, Irismod_Service_QueryRequestContextResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestContextInterceptors() ?? []
    )
  }

  /// Request returns the request
  ///
  /// - Parameters:
  ///   - request: Request to send to Request.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func request(
    _ request: Irismod_Service_QueryRequestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryRequestRequest, Irismod_Service_QueryRequestResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.request.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }

  /// Request returns all requests of one service with provider
  ///
  /// - Parameters:
  ///   - request: Request to send to Requests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requests(
    _ request: Irismod_Service_QueryRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryRequestsRequest, Irismod_Service_QueryRequestsResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestsInterceptors() ?? []
    )
  }

  /// RequestsByReqCtx returns all requests of one service call batch
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestsByReqCtx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestsByReqCtx(
    _ request: Irismod_Service_QueryRequestsByReqCtxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryRequestsByReqCtxRequest, Irismod_Service_QueryRequestsByReqCtxResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requestsByReqCtx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestsByReqCtxInterceptors() ?? []
    )
  }

  /// Response returns the response of request
  ///
  /// - Parameters:
  ///   - request: Request to send to Response.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func response(
    _ request: Irismod_Service_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryResponseRequest, Irismod_Service_QueryResponseResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.response.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }

  /// Responses returns all responses of one service call batch
  ///
  /// - Parameters:
  ///   - request: Request to send to Responses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func responses(
    _ request: Irismod_Service_QueryResponsesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryResponsesRequest, Irismod_Service_QueryResponsesResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.responses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponsesInterceptors() ?? []
    )
  }

  /// EarnedFees returns the earned service fee of one provider
  ///
  /// - Parameters:
  ///   - request: Request to send to EarnedFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func earnedFees(
    _ request: Irismod_Service_QueryEarnedFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryEarnedFeesRequest, Irismod_Service_QueryEarnedFeesResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.earnedFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEarnedFeesInterceptors() ?? []
    )
  }

  /// Schema returns the schema
  ///
  /// - Parameters:
  ///   - request: Request to send to Schema.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func schema(
    _ request: Irismod_Service_QuerySchemaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QuerySchemaRequest, Irismod_Service_QuerySchemaResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.schema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchemaInterceptors() ?? []
    )
  }

  /// Params queries the service parameters
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Irismod_Service_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Service_QueryParamsRequest, Irismod_Service_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Irismod_Service_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Irismod_Service_QueryNIOClient")
internal final class Irismod_Service_QueryClient: Irismod_Service_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the irismod.service.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Irismod_Service_QueryNIOClient: Irismod_Service_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the irismod.service.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query creates service with iservice as rpc
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Irismod_Service_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? { get }

  func makeDefinitionCall(
    _ request: Irismod_Service_QueryDefinitionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryDefinitionRequest, Irismod_Service_QueryDefinitionResponse>

  func makeBindingCall(
    _ request: Irismod_Service_QueryBindingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryBindingRequest, Irismod_Service_QueryBindingResponse>

  func makeBindingsCall(
    _ request: Irismod_Service_QueryBindingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryBindingsRequest, Irismod_Service_QueryBindingsResponse>

  func makeWithdrawAddressCall(
    _ request: Irismod_Service_QueryWithdrawAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryWithdrawAddressRequest, Irismod_Service_QueryWithdrawAddressResponse>

  func makeRequestContextCall(
    _ request: Irismod_Service_QueryRequestContextRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestContextRequest, Irismod_Service_QueryRequestContextResponse>

  func makeRequestCall(
    _ request: Irismod_Service_QueryRequestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestRequest, Irismod_Service_QueryRequestResponse>

  func makeRequestsCall(
    _ request: Irismod_Service_QueryRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestsRequest, Irismod_Service_QueryRequestsResponse>

  func makeRequestsByReqCtxCall(
    _ request: Irismod_Service_QueryRequestsByReqCtxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestsByReqCtxRequest, Irismod_Service_QueryRequestsByReqCtxResponse>

  func makeResponseCall(
    _ request: Irismod_Service_QueryResponseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryResponseRequest, Irismod_Service_QueryResponseResponse>

  func makeResponsesCall(
    _ request: Irismod_Service_QueryResponsesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryResponsesRequest, Irismod_Service_QueryResponsesResponse>

  func makeEarnedFeesCall(
    _ request: Irismod_Service_QueryEarnedFeesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryEarnedFeesRequest, Irismod_Service_QueryEarnedFeesResponse>

  func makeSchemaCall(
    _ request: Irismod_Service_QuerySchemaRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QuerySchemaRequest, Irismod_Service_QuerySchemaResponse>

  func makeParamsCall(
    _ request: Irismod_Service_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryParamsRequest, Irismod_Service_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Irismod_Service_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Irismod_Service_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDefinitionCall(
    _ request: Irismod_Service_QueryDefinitionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryDefinitionRequest, Irismod_Service_QueryDefinitionResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.definition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefinitionInterceptors() ?? []
    )
  }

  internal func makeBindingCall(
    _ request: Irismod_Service_QueryBindingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryBindingRequest, Irismod_Service_QueryBindingResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.binding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindingInterceptors() ?? []
    )
  }

  internal func makeBindingsCall(
    _ request: Irismod_Service_QueryBindingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryBindingsRequest, Irismod_Service_QueryBindingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.bindings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindingsInterceptors() ?? []
    )
  }

  internal func makeWithdrawAddressCall(
    _ request: Irismod_Service_QueryWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryWithdrawAddressRequest, Irismod_Service_QueryWithdrawAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.withdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawAddressInterceptors() ?? []
    )
  }

  internal func makeRequestContextCall(
    _ request: Irismod_Service_QueryRequestContextRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestContextRequest, Irismod_Service_QueryRequestContextResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestContextInterceptors() ?? []
    )
  }

  internal func makeRequestCall(
    _ request: Irismod_Service_QueryRequestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestRequest, Irismod_Service_QueryRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.request.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }

  internal func makeRequestsCall(
    _ request: Irismod_Service_QueryRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestsRequest, Irismod_Service_QueryRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestsInterceptors() ?? []
    )
  }

  internal func makeRequestsByReqCtxCall(
    _ request: Irismod_Service_QueryRequestsByReqCtxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryRequestsByReqCtxRequest, Irismod_Service_QueryRequestsByReqCtxResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requestsByReqCtx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestsByReqCtxInterceptors() ?? []
    )
  }

  internal func makeResponseCall(
    _ request: Irismod_Service_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryResponseRequest, Irismod_Service_QueryResponseResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.response.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }

  internal func makeResponsesCall(
    _ request: Irismod_Service_QueryResponsesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryResponsesRequest, Irismod_Service_QueryResponsesResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.responses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponsesInterceptors() ?? []
    )
  }

  internal func makeEarnedFeesCall(
    _ request: Irismod_Service_QueryEarnedFeesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryEarnedFeesRequest, Irismod_Service_QueryEarnedFeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.earnedFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEarnedFeesInterceptors() ?? []
    )
  }

  internal func makeSchemaCall(
    _ request: Irismod_Service_QuerySchemaRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QuerySchemaRequest, Irismod_Service_QuerySchemaResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.schema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchemaInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Irismod_Service_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Irismod_Service_QueryParamsRequest, Irismod_Service_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Irismod_Service_QueryAsyncClientProtocol {
  internal func definition(
    _ request: Irismod_Service_QueryDefinitionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryDefinitionResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.definition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefinitionInterceptors() ?? []
    )
  }

  internal func binding(
    _ request: Irismod_Service_QueryBindingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryBindingResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.binding.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindingInterceptors() ?? []
    )
  }

  internal func bindings(
    _ request: Irismod_Service_QueryBindingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryBindingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.bindings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBindingsInterceptors() ?? []
    )
  }

  internal func withdrawAddress(
    _ request: Irismod_Service_QueryWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryWithdrawAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.withdrawAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawAddressInterceptors() ?? []
    )
  }

  internal func requestContext(
    _ request: Irismod_Service_QueryRequestContextRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryRequestContextResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requestContext.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestContextInterceptors() ?? []
    )
  }

  internal func request(
    _ request: Irismod_Service_QueryRequestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.request.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }

  internal func requests(
    _ request: Irismod_Service_QueryRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestsInterceptors() ?? []
    )
  }

  internal func requestsByReqCtx(
    _ request: Irismod_Service_QueryRequestsByReqCtxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryRequestsByReqCtxResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.requestsByReqCtx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestsByReqCtxInterceptors() ?? []
    )
  }

  internal func response(
    _ request: Irismod_Service_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryResponseResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.response.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }

  internal func responses(
    _ request: Irismod_Service_QueryResponsesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryResponsesResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.responses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponsesInterceptors() ?? []
    )
  }

  internal func earnedFees(
    _ request: Irismod_Service_QueryEarnedFeesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryEarnedFeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.earnedFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEarnedFeesInterceptors() ?? []
    )
  }

  internal func schema(
    _ request: Irismod_Service_QuerySchemaRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QuerySchemaResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.schema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchemaInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Irismod_Service_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Irismod_Service_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Irismod_Service_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Irismod_Service_QueryAsyncClient: Irismod_Service_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Service_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Irismod_Service_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'definition'.
  func makeDefinitionInterceptors() -> [ClientInterceptor<Irismod_Service_QueryDefinitionRequest, Irismod_Service_QueryDefinitionResponse>]

  /// - Returns: Interceptors to use when invoking 'binding'.
  func makeBindingInterceptors() -> [ClientInterceptor<Irismod_Service_QueryBindingRequest, Irismod_Service_QueryBindingResponse>]

  /// - Returns: Interceptors to use when invoking 'bindings'.
  func makeBindingsInterceptors() -> [ClientInterceptor<Irismod_Service_QueryBindingsRequest, Irismod_Service_QueryBindingsResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawAddress'.
  func makeWithdrawAddressInterceptors() -> [ClientInterceptor<Irismod_Service_QueryWithdrawAddressRequest, Irismod_Service_QueryWithdrawAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'requestContext'.
  func makeRequestContextInterceptors() -> [ClientInterceptor<Irismod_Service_QueryRequestContextRequest, Irismod_Service_QueryRequestContextResponse>]

  /// - Returns: Interceptors to use when invoking 'request'.
  func makeRequestInterceptors() -> [ClientInterceptor<Irismod_Service_QueryRequestRequest, Irismod_Service_QueryRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'requests'.
  func makeRequestsInterceptors() -> [ClientInterceptor<Irismod_Service_QueryRequestsRequest, Irismod_Service_QueryRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'requestsByReqCtx'.
  func makeRequestsByReqCtxInterceptors() -> [ClientInterceptor<Irismod_Service_QueryRequestsByReqCtxRequest, Irismod_Service_QueryRequestsByReqCtxResponse>]

  /// - Returns: Interceptors to use when invoking 'response'.
  func makeResponseInterceptors() -> [ClientInterceptor<Irismod_Service_QueryResponseRequest, Irismod_Service_QueryResponseResponse>]

  /// - Returns: Interceptors to use when invoking 'responses'.
  func makeResponsesInterceptors() -> [ClientInterceptor<Irismod_Service_QueryResponsesRequest, Irismod_Service_QueryResponsesResponse>]

  /// - Returns: Interceptors to use when invoking 'earnedFees'.
  func makeEarnedFeesInterceptors() -> [ClientInterceptor<Irismod_Service_QueryEarnedFeesRequest, Irismod_Service_QueryEarnedFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'schema'.
  func makeSchemaInterceptors() -> [ClientInterceptor<Irismod_Service_QuerySchemaRequest, Irismod_Service_QuerySchemaResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Irismod_Service_QueryParamsRequest, Irismod_Service_QueryParamsResponse>]
}

internal enum Irismod_Service_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "irismod.service.Query",
    methods: [
      Irismod_Service_QueryClientMetadata.Methods.definition,
      Irismod_Service_QueryClientMetadata.Methods.binding,
      Irismod_Service_QueryClientMetadata.Methods.bindings,
      Irismod_Service_QueryClientMetadata.Methods.withdrawAddress,
      Irismod_Service_QueryClientMetadata.Methods.requestContext,
      Irismod_Service_QueryClientMetadata.Methods.request,
      Irismod_Service_QueryClientMetadata.Methods.requests,
      Irismod_Service_QueryClientMetadata.Methods.requestsByReqCtx,
      Irismod_Service_QueryClientMetadata.Methods.response,
      Irismod_Service_QueryClientMetadata.Methods.responses,
      Irismod_Service_QueryClientMetadata.Methods.earnedFees,
      Irismod_Service_QueryClientMetadata.Methods.schema,
      Irismod_Service_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let definition = GRPCMethodDescriptor(
      name: "Definition",
      path: "/irismod.service.Query/Definition",
      type: GRPCCallType.unary
    )

    internal static let binding = GRPCMethodDescriptor(
      name: "Binding",
      path: "/irismod.service.Query/Binding",
      type: GRPCCallType.unary
    )

    internal static let bindings = GRPCMethodDescriptor(
      name: "Bindings",
      path: "/irismod.service.Query/Bindings",
      type: GRPCCallType.unary
    )

    internal static let withdrawAddress = GRPCMethodDescriptor(
      name: "WithdrawAddress",
      path: "/irismod.service.Query/WithdrawAddress",
      type: GRPCCallType.unary
    )

    internal static let requestContext = GRPCMethodDescriptor(
      name: "RequestContext",
      path: "/irismod.service.Query/RequestContext",
      type: GRPCCallType.unary
    )

    internal static let request = GRPCMethodDescriptor(
      name: "Request",
      path: "/irismod.service.Query/Request",
      type: GRPCCallType.unary
    )

    internal static let requests = GRPCMethodDescriptor(
      name: "Requests",
      path: "/irismod.service.Query/Requests",
      type: GRPCCallType.unary
    )

    internal static let requestsByReqCtx = GRPCMethodDescriptor(
      name: "RequestsByReqCtx",
      path: "/irismod.service.Query/RequestsByReqCtx",
      type: GRPCCallType.unary
    )

    internal static let response = GRPCMethodDescriptor(
      name: "Response",
      path: "/irismod.service.Query/Response",
      type: GRPCCallType.unary
    )

    internal static let responses = GRPCMethodDescriptor(
      name: "Responses",
      path: "/irismod.service.Query/Responses",
      type: GRPCCallType.unary
    )

    internal static let earnedFees = GRPCMethodDescriptor(
      name: "EarnedFees",
      path: "/irismod.service.Query/EarnedFees",
      type: GRPCCallType.unary
    )

    internal static let schema = GRPCMethodDescriptor(
      name: "Schema",
      path: "/irismod.service.Query/Schema",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/irismod.service.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// Query creates service with iservice as rpc
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Service_QueryProvider: CallHandlerProvider {
  var interceptors: Irismod_Service_QueryServerInterceptorFactoryProtocol? { get }

  /// Definition returns service definition
  func definition(request: Irismod_Service_QueryDefinitionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryDefinitionResponse>

  /// Binding returns service Binding with service name and provider
  func binding(request: Irismod_Service_QueryBindingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryBindingResponse>

  /// Bindings returns all service Bindings with service name and owner
  func bindings(request: Irismod_Service_QueryBindingsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryBindingsResponse>

  /// WithdrawAddress returns the withdraw address of the binding owner
  func withdrawAddress(request: Irismod_Service_QueryWithdrawAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryWithdrawAddressResponse>

  /// RequestContext returns the request context
  func requestContext(request: Irismod_Service_QueryRequestContextRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryRequestContextResponse>

  /// Request returns the request
  func request(request: Irismod_Service_QueryRequestRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryRequestResponse>

  /// Request returns all requests of one service with provider
  func requests(request: Irismod_Service_QueryRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryRequestsResponse>

  /// RequestsByReqCtx returns all requests of one service call batch
  func requestsByReqCtx(request: Irismod_Service_QueryRequestsByReqCtxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryRequestsByReqCtxResponse>

  /// Response returns the response of request
  func response(request: Irismod_Service_QueryResponseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryResponseResponse>

  /// Responses returns all responses of one service call batch
  func responses(request: Irismod_Service_QueryResponsesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryResponsesResponse>

  /// EarnedFees returns the earned service fee of one provider
  func earnedFees(request: Irismod_Service_QueryEarnedFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryEarnedFeesResponse>

  /// Schema returns the schema
  func schema(request: Irismod_Service_QuerySchemaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QuerySchemaResponse>

  /// Params queries the service parameters
  func params(request: Irismod_Service_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Service_QueryParamsResponse>
}

extension Irismod_Service_QueryProvider {
  internal var serviceName: Substring {
    return Irismod_Service_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Definition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryDefinitionRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryDefinitionResponse>(),
        interceptors: self.interceptors?.makeDefinitionInterceptors() ?? [],
        userFunction: self.definition(request:context:)
      )

    case "Binding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryBindingRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryBindingResponse>(),
        interceptors: self.interceptors?.makeBindingInterceptors() ?? [],
        userFunction: self.binding(request:context:)
      )

    case "Bindings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryBindingsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryBindingsResponse>(),
        interceptors: self.interceptors?.makeBindingsInterceptors() ?? [],
        userFunction: self.bindings(request:context:)
      )

    case "WithdrawAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryWithdrawAddressRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryWithdrawAddressResponse>(),
        interceptors: self.interceptors?.makeWithdrawAddressInterceptors() ?? [],
        userFunction: self.withdrawAddress(request:context:)
      )

    case "RequestContext":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestContextRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestContextResponse>(),
        interceptors: self.interceptors?.makeRequestContextInterceptors() ?? [],
        userFunction: self.requestContext(request:context:)
      )

    case "Request":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestResponse>(),
        interceptors: self.interceptors?.makeRequestInterceptors() ?? [],
        userFunction: self.request(request:context:)
      )

    case "Requests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestsResponse>(),
        interceptors: self.interceptors?.makeRequestsInterceptors() ?? [],
        userFunction: self.requests(request:context:)
      )

    case "RequestsByReqCtx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestsByReqCtxRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestsByReqCtxResponse>(),
        interceptors: self.interceptors?.makeRequestsByReqCtxInterceptors() ?? [],
        userFunction: self.requestsByReqCtx(request:context:)
      )

    case "Response":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryResponseRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryResponseResponse>(),
        interceptors: self.interceptors?.makeResponseInterceptors() ?? [],
        userFunction: self.response(request:context:)
      )

    case "Responses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryResponsesRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryResponsesResponse>(),
        interceptors: self.interceptors?.makeResponsesInterceptors() ?? [],
        userFunction: self.responses(request:context:)
      )

    case "EarnedFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryEarnedFeesRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryEarnedFeesResponse>(),
        interceptors: self.interceptors?.makeEarnedFeesInterceptors() ?? [],
        userFunction: self.earnedFees(request:context:)
      )

    case "Schema":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QuerySchemaRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QuerySchemaResponse>(),
        interceptors: self.interceptors?.makeSchemaInterceptors() ?? [],
        userFunction: self.schema(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query creates service with iservice as rpc
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Irismod_Service_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Irismod_Service_QueryServerInterceptorFactoryProtocol? { get }

  /// Definition returns service definition
  @Sendable func definition(
    request: Irismod_Service_QueryDefinitionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryDefinitionResponse

  /// Binding returns service Binding with service name and provider
  @Sendable func binding(
    request: Irismod_Service_QueryBindingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryBindingResponse

  /// Bindings returns all service Bindings with service name and owner
  @Sendable func bindings(
    request: Irismod_Service_QueryBindingsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryBindingsResponse

  /// WithdrawAddress returns the withdraw address of the binding owner
  @Sendable func withdrawAddress(
    request: Irismod_Service_QueryWithdrawAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryWithdrawAddressResponse

  /// RequestContext returns the request context
  @Sendable func requestContext(
    request: Irismod_Service_QueryRequestContextRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryRequestContextResponse

  /// Request returns the request
  @Sendable func request(
    request: Irismod_Service_QueryRequestRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryRequestResponse

  /// Request returns all requests of one service with provider
  @Sendable func requests(
    request: Irismod_Service_QueryRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryRequestsResponse

  /// RequestsByReqCtx returns all requests of one service call batch
  @Sendable func requestsByReqCtx(
    request: Irismod_Service_QueryRequestsByReqCtxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryRequestsByReqCtxResponse

  /// Response returns the response of request
  @Sendable func response(
    request: Irismod_Service_QueryResponseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryResponseResponse

  /// Responses returns all responses of one service call batch
  @Sendable func responses(
    request: Irismod_Service_QueryResponsesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryResponsesResponse

  /// EarnedFees returns the earned service fee of one provider
  @Sendable func earnedFees(
    request: Irismod_Service_QueryEarnedFeesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryEarnedFeesResponse

  /// Schema returns the schema
  @Sendable func schema(
    request: Irismod_Service_QuerySchemaRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QuerySchemaResponse

  /// Params queries the service parameters
  @Sendable func params(
    request: Irismod_Service_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Irismod_Service_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Irismod_Service_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Irismod_Service_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Irismod_Service_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Irismod_Service_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Definition":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryDefinitionRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryDefinitionResponse>(),
        interceptors: self.interceptors?.makeDefinitionInterceptors() ?? [],
        wrapping: self.definition(request:context:)
      )

    case "Binding":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryBindingRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryBindingResponse>(),
        interceptors: self.interceptors?.makeBindingInterceptors() ?? [],
        wrapping: self.binding(request:context:)
      )

    case "Bindings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryBindingsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryBindingsResponse>(),
        interceptors: self.interceptors?.makeBindingsInterceptors() ?? [],
        wrapping: self.bindings(request:context:)
      )

    case "WithdrawAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryWithdrawAddressRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryWithdrawAddressResponse>(),
        interceptors: self.interceptors?.makeWithdrawAddressInterceptors() ?? [],
        wrapping: self.withdrawAddress(request:context:)
      )

    case "RequestContext":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestContextRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestContextResponse>(),
        interceptors: self.interceptors?.makeRequestContextInterceptors() ?? [],
        wrapping: self.requestContext(request:context:)
      )

    case "Request":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestResponse>(),
        interceptors: self.interceptors?.makeRequestInterceptors() ?? [],
        wrapping: self.request(request:context:)
      )

    case "Requests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestsResponse>(),
        interceptors: self.interceptors?.makeRequestsInterceptors() ?? [],
        wrapping: self.requests(request:context:)
      )

    case "RequestsByReqCtx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryRequestsByReqCtxRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryRequestsByReqCtxResponse>(),
        interceptors: self.interceptors?.makeRequestsByReqCtxInterceptors() ?? [],
        wrapping: self.requestsByReqCtx(request:context:)
      )

    case "Response":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryResponseRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryResponseResponse>(),
        interceptors: self.interceptors?.makeResponseInterceptors() ?? [],
        wrapping: self.response(request:context:)
      )

    case "Responses":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryResponsesRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryResponsesResponse>(),
        interceptors: self.interceptors?.makeResponsesInterceptors() ?? [],
        wrapping: self.responses(request:context:)
      )

    case "EarnedFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryEarnedFeesRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryEarnedFeesResponse>(),
        interceptors: self.interceptors?.makeEarnedFeesInterceptors() ?? [],
        wrapping: self.earnedFees(request:context:)
      )

    case "Schema":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QuerySchemaRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QuerySchemaResponse>(),
        interceptors: self.interceptors?.makeSchemaInterceptors() ?? [],
        wrapping: self.schema(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Service_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Service_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Irismod_Service_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'definition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDefinitionInterceptors() -> [ServerInterceptor<Irismod_Service_QueryDefinitionRequest, Irismod_Service_QueryDefinitionResponse>]

  /// - Returns: Interceptors to use when handling 'binding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBindingInterceptors() -> [ServerInterceptor<Irismod_Service_QueryBindingRequest, Irismod_Service_QueryBindingResponse>]

  /// - Returns: Interceptors to use when handling 'bindings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBindingsInterceptors() -> [ServerInterceptor<Irismod_Service_QueryBindingsRequest, Irismod_Service_QueryBindingsResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawAddressInterceptors() -> [ServerInterceptor<Irismod_Service_QueryWithdrawAddressRequest, Irismod_Service_QueryWithdrawAddressResponse>]

  /// - Returns: Interceptors to use when handling 'requestContext'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestContextInterceptors() -> [ServerInterceptor<Irismod_Service_QueryRequestContextRequest, Irismod_Service_QueryRequestContextResponse>]

  /// - Returns: Interceptors to use when handling 'request'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestInterceptors() -> [ServerInterceptor<Irismod_Service_QueryRequestRequest, Irismod_Service_QueryRequestResponse>]

  /// - Returns: Interceptors to use when handling 'requests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestsInterceptors() -> [ServerInterceptor<Irismod_Service_QueryRequestsRequest, Irismod_Service_QueryRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'requestsByReqCtx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestsByReqCtxInterceptors() -> [ServerInterceptor<Irismod_Service_QueryRequestsByReqCtxRequest, Irismod_Service_QueryRequestsByReqCtxResponse>]

  /// - Returns: Interceptors to use when handling 'response'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResponseInterceptors() -> [ServerInterceptor<Irismod_Service_QueryResponseRequest, Irismod_Service_QueryResponseResponse>]

  /// - Returns: Interceptors to use when handling 'responses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResponsesInterceptors() -> [ServerInterceptor<Irismod_Service_QueryResponsesRequest, Irismod_Service_QueryResponsesResponse>]

  /// - Returns: Interceptors to use when handling 'earnedFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEarnedFeesInterceptors() -> [ServerInterceptor<Irismod_Service_QueryEarnedFeesRequest, Irismod_Service_QueryEarnedFeesResponse>]

  /// - Returns: Interceptors to use when handling 'schema'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSchemaInterceptors() -> [ServerInterceptor<Irismod_Service_QuerySchemaRequest, Irismod_Service_QuerySchemaResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Irismod_Service_QueryParamsRequest, Irismod_Service_QueryParamsResponse>]
}

internal enum Irismod_Service_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "irismod.service.Query",
    methods: [
      Irismod_Service_QueryServerMetadata.Methods.definition,
      Irismod_Service_QueryServerMetadata.Methods.binding,
      Irismod_Service_QueryServerMetadata.Methods.bindings,
      Irismod_Service_QueryServerMetadata.Methods.withdrawAddress,
      Irismod_Service_QueryServerMetadata.Methods.requestContext,
      Irismod_Service_QueryServerMetadata.Methods.request,
      Irismod_Service_QueryServerMetadata.Methods.requests,
      Irismod_Service_QueryServerMetadata.Methods.requestsByReqCtx,
      Irismod_Service_QueryServerMetadata.Methods.response,
      Irismod_Service_QueryServerMetadata.Methods.responses,
      Irismod_Service_QueryServerMetadata.Methods.earnedFees,
      Irismod_Service_QueryServerMetadata.Methods.schema,
      Irismod_Service_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let definition = GRPCMethodDescriptor(
      name: "Definition",
      path: "/irismod.service.Query/Definition",
      type: GRPCCallType.unary
    )

    internal static let binding = GRPCMethodDescriptor(
      name: "Binding",
      path: "/irismod.service.Query/Binding",
      type: GRPCCallType.unary
    )

    internal static let bindings = GRPCMethodDescriptor(
      name: "Bindings",
      path: "/irismod.service.Query/Bindings",
      type: GRPCCallType.unary
    )

    internal static let withdrawAddress = GRPCMethodDescriptor(
      name: "WithdrawAddress",
      path: "/irismod.service.Query/WithdrawAddress",
      type: GRPCCallType.unary
    )

    internal static let requestContext = GRPCMethodDescriptor(
      name: "RequestContext",
      path: "/irismod.service.Query/RequestContext",
      type: GRPCCallType.unary
    )

    internal static let request = GRPCMethodDescriptor(
      name: "Request",
      path: "/irismod.service.Query/Request",
      type: GRPCCallType.unary
    )

    internal static let requests = GRPCMethodDescriptor(
      name: "Requests",
      path: "/irismod.service.Query/Requests",
      type: GRPCCallType.unary
    )

    internal static let requestsByReqCtx = GRPCMethodDescriptor(
      name: "RequestsByReqCtx",
      path: "/irismod.service.Query/RequestsByReqCtx",
      type: GRPCCallType.unary
    )

    internal static let response = GRPCMethodDescriptor(
      name: "Response",
      path: "/irismod.service.Query/Response",
      type: GRPCCallType.unary
    )

    internal static let responses = GRPCMethodDescriptor(
      name: "Responses",
      path: "/irismod.service.Query/Responses",
      type: GRPCCallType.unary
    )

    internal static let earnedFees = GRPCMethodDescriptor(
      name: "EarnedFees",
      path: "/irismod.service.Query/EarnedFees",
      type: GRPCCallType.unary
    )

    internal static let schema = GRPCMethodDescriptor(
      name: "Schema",
      path: "/irismod.service.Query/Schema",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/irismod.service.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
