// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/interchainqueries/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Interchainqueries_RegisteredQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique id of the registered query.
  var id: UInt64 = 0

  /// The address that registered the query.
  var owner: String = String()

  /// The query type identifier: `kv` or `tx` now
  var queryType: String = String()

  /// The KV-storage keys for which we want to get values from remote chain
  var keys: [Neutron_Interchainqueries_KVKey] = []

  /// The filter for transaction search ICQ
  var transactionsFilter: String = String()

  /// The IBC connection ID for getting ConsensusState to verify proofs
  var connectionID: String = String()

  /// Parameter that defines how often the query must be updated.
  var updatePeriod: UInt64 = 0

  /// The local chain last block height when the query result was updated.
  var lastSubmittedResultLocalHeight: UInt64 = 0

  /// The remote chain last block height when the query result was updated.
  var lastSubmittedResultRemoteHeight: Ibc_Core_Client_V1_Height {
    get {return _lastSubmittedResultRemoteHeight ?? Ibc_Core_Client_V1_Height()}
    set {_lastSubmittedResultRemoteHeight = newValue}
  }
  /// Returns true if `lastSubmittedResultRemoteHeight` has been explicitly set.
  var hasLastSubmittedResultRemoteHeight: Bool {return self._lastSubmittedResultRemoteHeight != nil}
  /// Clears the value of `lastSubmittedResultRemoteHeight`. Subsequent reads from it will return its default value.
  mutating func clearLastSubmittedResultRemoteHeight() {self._lastSubmittedResultRemoteHeight = nil}

  /// Amount of coins deposited for the query.
  var deposit: [Cosmos_Base_V1beta1_Coin] = []

  /// Timeout before query becomes available for everybody to remove.
  var submitTimeout: UInt64 = 0

  /// The local chain height when the query was registered.
  var registeredAtHeight: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastSubmittedResultRemoteHeight: Ibc_Core_Client_V1_Height? = nil
}

struct Neutron_Interchainqueries_KVKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Path (storage prefix) to the storage where you want to read value by key
  /// (usually name of cosmos-sdk module: 'staking', 'bank', etc.)
  var path: String = String()

  /// Key you want to read from the storage
  var key: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GenesisState defines the interchainqueries module's genesis state.
struct Neutron_Interchainqueries_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Neutron_Interchainqueries_Params {
    get {return _params ?? Neutron_Interchainqueries_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var registeredQueries: [Neutron_Interchainqueries_RegisteredQuery] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Neutron_Interchainqueries_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Interchainqueries_RegisteredQuery: @unchecked Sendable {}
extension Neutron_Interchainqueries_KVKey: @unchecked Sendable {}
extension Neutron_Interchainqueries_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.interchainqueries"

extension Neutron_Interchainqueries_RegisteredQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisteredQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "owner"),
    3: .standard(proto: "query_type"),
    4: .same(proto: "keys"),
    5: .standard(proto: "transactions_filter"),
    6: .standard(proto: "connection_id"),
    7: .standard(proto: "update_period"),
    8: .standard(proto: "last_submitted_result_local_height"),
    9: .standard(proto: "last_submitted_result_remote_height"),
    10: .same(proto: "deposit"),
    11: .standard(proto: "submit_timeout"),
    12: .standard(proto: "registered_at_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.queryType) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.keys) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.transactionsFilter) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.updatePeriod) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.lastSubmittedResultLocalHeight) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._lastSubmittedResultRemoteHeight) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.deposit) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.submitTimeout) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.registeredAtHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 2)
    }
    if !self.queryType.isEmpty {
      try visitor.visitSingularStringField(value: self.queryType, fieldNumber: 3)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keys, fieldNumber: 4)
    }
    if !self.transactionsFilter.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionsFilter, fieldNumber: 5)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 6)
    }
    if self.updatePeriod != 0 {
      try visitor.visitSingularUInt64Field(value: self.updatePeriod, fieldNumber: 7)
    }
    if self.lastSubmittedResultLocalHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastSubmittedResultLocalHeight, fieldNumber: 8)
    }
    try { if let v = self._lastSubmittedResultRemoteHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.deposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposit, fieldNumber: 10)
    }
    if self.submitTimeout != 0 {
      try visitor.visitSingularUInt64Field(value: self.submitTimeout, fieldNumber: 11)
    }
    if self.registeredAtHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.registeredAtHeight, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_RegisteredQuery, rhs: Neutron_Interchainqueries_RegisteredQuery) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.queryType != rhs.queryType {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.transactionsFilter != rhs.transactionsFilter {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.updatePeriod != rhs.updatePeriod {return false}
    if lhs.lastSubmittedResultLocalHeight != rhs.lastSubmittedResultLocalHeight {return false}
    if lhs._lastSubmittedResultRemoteHeight != rhs._lastSubmittedResultRemoteHeight {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.submitTimeout != rhs.submitTimeout {return false}
    if lhs.registeredAtHeight != rhs.registeredAtHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_KVKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KVKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_KVKey, rhs: Neutron_Interchainqueries_KVKey) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Interchainqueries_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "registered_queries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.registeredQueries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.registeredQueries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.registeredQueries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Interchainqueries_GenesisState, rhs: Neutron_Interchainqueries_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.registeredQueries != rhs.registeredQueries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
