// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/lpfarm/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Crescent_Lpfarm_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Crescent_Lpfarm_V1beta1_Params {
    get {return _params ?? Crescent_Lpfarm_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var lastBlockTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastBlockTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastBlockTime = newValue}
  }
  /// Returns true if `lastBlockTime` has been explicitly set.
  var hasLastBlockTime: Bool {return self._lastBlockTime != nil}
  /// Clears the value of `lastBlockTime`. Subsequent reads from it will return its default value.
  mutating func clearLastBlockTime() {self._lastBlockTime = nil}

  var lastPlanID: UInt64 = 0

  var numPrivatePlans: UInt64 = 0

  var plans: [Crescent_Lpfarm_V1beta1_Plan] = []

  var farms: [Crescent_Lpfarm_V1beta1_FarmRecord] = []

  var positions: [Crescent_Lpfarm_V1beta1_Position] = []

  var historicalRewards: [Crescent_Lpfarm_V1beta1_HistoricalRewardsRecord] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Crescent_Lpfarm_V1beta1_Params? = nil
  fileprivate var _lastBlockTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Crescent_Lpfarm_V1beta1_FarmRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var farm: Crescent_Lpfarm_V1beta1_Farm {
    get {return _farm ?? Crescent_Lpfarm_V1beta1_Farm()}
    set {_farm = newValue}
  }
  /// Returns true if `farm` has been explicitly set.
  var hasFarm: Bool {return self._farm != nil}
  /// Clears the value of `farm`. Subsequent reads from it will return its default value.
  mutating func clearFarm() {self._farm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _farm: Crescent_Lpfarm_V1beta1_Farm? = nil
}

struct Crescent_Lpfarm_V1beta1_HistoricalRewardsRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var period: UInt64 = 0

  var historicalRewards: Crescent_Lpfarm_V1beta1_HistoricalRewards {
    get {return _historicalRewards ?? Crescent_Lpfarm_V1beta1_HistoricalRewards()}
    set {_historicalRewards = newValue}
  }
  /// Returns true if `historicalRewards` has been explicitly set.
  var hasHistoricalRewards: Bool {return self._historicalRewards != nil}
  /// Clears the value of `historicalRewards`. Subsequent reads from it will return its default value.
  mutating func clearHistoricalRewards() {self._historicalRewards = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _historicalRewards: Crescent_Lpfarm_V1beta1_HistoricalRewards? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Crescent_Lpfarm_V1beta1_GenesisState: @unchecked Sendable {}
extension Crescent_Lpfarm_V1beta1_FarmRecord: @unchecked Sendable {}
extension Crescent_Lpfarm_V1beta1_HistoricalRewardsRecord: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.lpfarm.v1beta1"

extension Crescent_Lpfarm_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "last_block_time"),
    3: .standard(proto: "last_plan_id"),
    4: .standard(proto: "num_private_plans"),
    5: .same(proto: "plans"),
    6: .same(proto: "farms"),
    7: .same(proto: "positions"),
    8: .standard(proto: "historical_rewards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastBlockTime) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.lastPlanID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.numPrivatePlans) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.plans) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.farms) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.positions) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.historicalRewards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastBlockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.lastPlanID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastPlanID, fieldNumber: 3)
    }
    if self.numPrivatePlans != 0 {
      try visitor.visitSingularUInt64Field(value: self.numPrivatePlans, fieldNumber: 4)
    }
    if !self.plans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.plans, fieldNumber: 5)
    }
    if !self.farms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.farms, fieldNumber: 6)
    }
    if !self.positions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.positions, fieldNumber: 7)
    }
    if !self.historicalRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.historicalRewards, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Lpfarm_V1beta1_GenesisState, rhs: Crescent_Lpfarm_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs._lastBlockTime != rhs._lastBlockTime {return false}
    if lhs.lastPlanID != rhs.lastPlanID {return false}
    if lhs.numPrivatePlans != rhs.numPrivatePlans {return false}
    if lhs.plans != rhs.plans {return false}
    if lhs.farms != rhs.farms {return false}
    if lhs.positions != rhs.positions {return false}
    if lhs.historicalRewards != rhs.historicalRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Lpfarm_V1beta1_FarmRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FarmRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "farm"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._farm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    try { if let v = self._farm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Lpfarm_V1beta1_FarmRecord, rhs: Crescent_Lpfarm_V1beta1_FarmRecord) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs._farm != rhs._farm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Lpfarm_V1beta1_HistoricalRewardsRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HistoricalRewardsRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "period"),
    3: .standard(proto: "historical_rewards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.period) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._historicalRewards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.period != 0 {
      try visitor.visitSingularUInt64Field(value: self.period, fieldNumber: 2)
    }
    try { if let v = self._historicalRewards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Lpfarm_V1beta1_HistoricalRewardsRecord, rhs: Crescent_Lpfarm_V1beta1_HistoricalRewardsRecord) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.period != rhs.period {return false}
    if lhs._historicalRewards != rhs._historicalRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
