//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/relationships/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the relationships Msg service.
///
/// Usage: instantiate `Desmos_Relationships_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Relationships_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createRelationship(
    _ request: Desmos_Relationships_V1_MsgCreateRelationship,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Relationships_V1_MsgCreateRelationship, Desmos_Relationships_V1_MsgCreateRelationshipResponse>

  func deleteRelationship(
    _ request: Desmos_Relationships_V1_MsgDeleteRelationship,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Relationships_V1_MsgDeleteRelationship, Desmos_Relationships_V1_MsgDeleteRelationshipResponse>

  func blockUser(
    _ request: Desmos_Relationships_V1_MsgBlockUser,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Relationships_V1_MsgBlockUser, Desmos_Relationships_V1_MsgBlockUserResponse>

  func unblockUser(
    _ request: Desmos_Relationships_V1_MsgUnblockUser,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Relationships_V1_MsgUnblockUser, Desmos_Relationships_V1_MsgUnblockUserResponse>
}

extension Desmos_Relationships_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.relationships.v1.Msg"
  }

  /// CreateRelationship defines a method for creating a new relationship
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRelationship.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRelationship(
    _ request: Desmos_Relationships_V1_MsgCreateRelationship,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Relationships_V1_MsgCreateRelationship, Desmos_Relationships_V1_MsgCreateRelationshipResponse> {
    return self.makeUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.createRelationship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRelationshipInterceptors() ?? []
    )
  }

  /// DeleteRelationship defines a method for deleting a relationship
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRelationship.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteRelationship(
    _ request: Desmos_Relationships_V1_MsgDeleteRelationship,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Relationships_V1_MsgDeleteRelationship, Desmos_Relationships_V1_MsgDeleteRelationshipResponse> {
    return self.makeUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.deleteRelationship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRelationshipInterceptors() ?? []
    )
  }

  /// BlockUser defines a method for blocking a user
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockUser(
    _ request: Desmos_Relationships_V1_MsgBlockUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Relationships_V1_MsgBlockUser, Desmos_Relationships_V1_MsgBlockUserResponse> {
    return self.makeUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.blockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockUserInterceptors() ?? []
    )
  }

  /// UnblockUser defines a method for unblocking a user
  ///
  /// - Parameters:
  ///   - request: Request to send to UnblockUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unblockUser(
    _ request: Desmos_Relationships_V1_MsgUnblockUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Relationships_V1_MsgUnblockUser, Desmos_Relationships_V1_MsgUnblockUserResponse> {
    return self.makeUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.unblockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Desmos_Relationships_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Desmos_Relationships_V1_MsgNIOClient")
internal final class Desmos_Relationships_V1_MsgClient: Desmos_Relationships_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the desmos.relationships.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Desmos_Relationships_V1_MsgNIOClient: Desmos_Relationships_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.relationships.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the relationships Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Relationships_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateRelationshipCall(
    _ request: Desmos_Relationships_V1_MsgCreateRelationship,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgCreateRelationship, Desmos_Relationships_V1_MsgCreateRelationshipResponse>

  func makeDeleteRelationshipCall(
    _ request: Desmos_Relationships_V1_MsgDeleteRelationship,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgDeleteRelationship, Desmos_Relationships_V1_MsgDeleteRelationshipResponse>

  func makeBlockUserCall(
    _ request: Desmos_Relationships_V1_MsgBlockUser,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgBlockUser, Desmos_Relationships_V1_MsgBlockUserResponse>

  func makeUnblockUserCall(
    _ request: Desmos_Relationships_V1_MsgUnblockUser,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgUnblockUser, Desmos_Relationships_V1_MsgUnblockUserResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Relationships_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Relationships_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateRelationshipCall(
    _ request: Desmos_Relationships_V1_MsgCreateRelationship,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgCreateRelationship, Desmos_Relationships_V1_MsgCreateRelationshipResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.createRelationship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRelationshipInterceptors() ?? []
    )
  }

  internal func makeDeleteRelationshipCall(
    _ request: Desmos_Relationships_V1_MsgDeleteRelationship,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgDeleteRelationship, Desmos_Relationships_V1_MsgDeleteRelationshipResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.deleteRelationship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRelationshipInterceptors() ?? []
    )
  }

  internal func makeBlockUserCall(
    _ request: Desmos_Relationships_V1_MsgBlockUser,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgBlockUser, Desmos_Relationships_V1_MsgBlockUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.blockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockUserInterceptors() ?? []
    )
  }

  internal func makeUnblockUserCall(
    _ request: Desmos_Relationships_V1_MsgUnblockUser,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Relationships_V1_MsgUnblockUser, Desmos_Relationships_V1_MsgUnblockUserResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.unblockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Relationships_V1_MsgAsyncClientProtocol {
  internal func createRelationship(
    _ request: Desmos_Relationships_V1_MsgCreateRelationship,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Relationships_V1_MsgCreateRelationshipResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.createRelationship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRelationshipInterceptors() ?? []
    )
  }

  internal func deleteRelationship(
    _ request: Desmos_Relationships_V1_MsgDeleteRelationship,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Relationships_V1_MsgDeleteRelationshipResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.deleteRelationship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRelationshipInterceptors() ?? []
    )
  }

  internal func blockUser(
    _ request: Desmos_Relationships_V1_MsgBlockUser,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Relationships_V1_MsgBlockUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.blockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockUserInterceptors() ?? []
    )
  }

  internal func unblockUser(
    _ request: Desmos_Relationships_V1_MsgUnblockUser,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Relationships_V1_MsgUnblockUserResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Relationships_V1_MsgClientMetadata.Methods.unblockUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Desmos_Relationships_V1_MsgAsyncClient: Desmos_Relationships_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Desmos_Relationships_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createRelationship'.
  func makeCreateRelationshipInterceptors() -> [ClientInterceptor<Desmos_Relationships_V1_MsgCreateRelationship, Desmos_Relationships_V1_MsgCreateRelationshipResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteRelationship'.
  func makeDeleteRelationshipInterceptors() -> [ClientInterceptor<Desmos_Relationships_V1_MsgDeleteRelationship, Desmos_Relationships_V1_MsgDeleteRelationshipResponse>]

  /// - Returns: Interceptors to use when invoking 'blockUser'.
  func makeBlockUserInterceptors() -> [ClientInterceptor<Desmos_Relationships_V1_MsgBlockUser, Desmos_Relationships_V1_MsgBlockUserResponse>]

  /// - Returns: Interceptors to use when invoking 'unblockUser'.
  func makeUnblockUserInterceptors() -> [ClientInterceptor<Desmos_Relationships_V1_MsgUnblockUser, Desmos_Relationships_V1_MsgUnblockUserResponse>]
}

internal enum Desmos_Relationships_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.relationships.v1.Msg",
    methods: [
      Desmos_Relationships_V1_MsgClientMetadata.Methods.createRelationship,
      Desmos_Relationships_V1_MsgClientMetadata.Methods.deleteRelationship,
      Desmos_Relationships_V1_MsgClientMetadata.Methods.blockUser,
      Desmos_Relationships_V1_MsgClientMetadata.Methods.unblockUser,
    ]
  )

  internal enum Methods {
    internal static let createRelationship = GRPCMethodDescriptor(
      name: "CreateRelationship",
      path: "/desmos.relationships.v1.Msg/CreateRelationship",
      type: GRPCCallType.unary
    )

    internal static let deleteRelationship = GRPCMethodDescriptor(
      name: "DeleteRelationship",
      path: "/desmos.relationships.v1.Msg/DeleteRelationship",
      type: GRPCCallType.unary
    )

    internal static let blockUser = GRPCMethodDescriptor(
      name: "BlockUser",
      path: "/desmos.relationships.v1.Msg/BlockUser",
      type: GRPCCallType.unary
    )

    internal static let unblockUser = GRPCMethodDescriptor(
      name: "UnblockUser",
      path: "/desmos.relationships.v1.Msg/UnblockUser",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the relationships Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Relationships_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Relationships_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateRelationship defines a method for creating a new relationship
  func createRelationship(request: Desmos_Relationships_V1_MsgCreateRelationship, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Relationships_V1_MsgCreateRelationshipResponse>

  /// DeleteRelationship defines a method for deleting a relationship
  func deleteRelationship(request: Desmos_Relationships_V1_MsgDeleteRelationship, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Relationships_V1_MsgDeleteRelationshipResponse>

  /// BlockUser defines a method for blocking a user
  func blockUser(request: Desmos_Relationships_V1_MsgBlockUser, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Relationships_V1_MsgBlockUserResponse>

  /// UnblockUser defines a method for unblocking a user
  func unblockUser(request: Desmos_Relationships_V1_MsgUnblockUser, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Relationships_V1_MsgUnblockUserResponse>
}

extension Desmos_Relationships_V1_MsgProvider {
  internal var serviceName: Substring {
    return Desmos_Relationships_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateRelationship":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgCreateRelationship>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgCreateRelationshipResponse>(),
        interceptors: self.interceptors?.makeCreateRelationshipInterceptors() ?? [],
        userFunction: self.createRelationship(request:context:)
      )

    case "DeleteRelationship":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgDeleteRelationship>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgDeleteRelationshipResponse>(),
        interceptors: self.interceptors?.makeDeleteRelationshipInterceptors() ?? [],
        userFunction: self.deleteRelationship(request:context:)
      )

    case "BlockUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgBlockUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgBlockUserResponse>(),
        interceptors: self.interceptors?.makeBlockUserInterceptors() ?? [],
        userFunction: self.blockUser(request:context:)
      )

    case "UnblockUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgUnblockUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgUnblockUserResponse>(),
        interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? [],
        userFunction: self.unblockUser(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the relationships Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Relationships_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Relationships_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateRelationship defines a method for creating a new relationship
  @Sendable func createRelationship(
    request: Desmos_Relationships_V1_MsgCreateRelationship,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Relationships_V1_MsgCreateRelationshipResponse

  /// DeleteRelationship defines a method for deleting a relationship
  @Sendable func deleteRelationship(
    request: Desmos_Relationships_V1_MsgDeleteRelationship,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Relationships_V1_MsgDeleteRelationshipResponse

  /// BlockUser defines a method for blocking a user
  @Sendable func blockUser(
    request: Desmos_Relationships_V1_MsgBlockUser,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Relationships_V1_MsgBlockUserResponse

  /// UnblockUser defines a method for unblocking a user
  @Sendable func unblockUser(
    request: Desmos_Relationships_V1_MsgUnblockUser,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Relationships_V1_MsgUnblockUserResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Relationships_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Relationships_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Desmos_Relationships_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Desmos_Relationships_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateRelationship":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgCreateRelationship>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgCreateRelationshipResponse>(),
        interceptors: self.interceptors?.makeCreateRelationshipInterceptors() ?? [],
        wrapping: self.createRelationship(request:context:)
      )

    case "DeleteRelationship":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgDeleteRelationship>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgDeleteRelationshipResponse>(),
        interceptors: self.interceptors?.makeDeleteRelationshipInterceptors() ?? [],
        wrapping: self.deleteRelationship(request:context:)
      )

    case "BlockUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgBlockUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgBlockUserResponse>(),
        interceptors: self.interceptors?.makeBlockUserInterceptors() ?? [],
        wrapping: self.blockUser(request:context:)
      )

    case "UnblockUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Relationships_V1_MsgUnblockUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Relationships_V1_MsgUnblockUserResponse>(),
        interceptors: self.interceptors?.makeUnblockUserInterceptors() ?? [],
        wrapping: self.unblockUser(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Relationships_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createRelationship'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRelationshipInterceptors() -> [ServerInterceptor<Desmos_Relationships_V1_MsgCreateRelationship, Desmos_Relationships_V1_MsgCreateRelationshipResponse>]

  /// - Returns: Interceptors to use when handling 'deleteRelationship'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteRelationshipInterceptors() -> [ServerInterceptor<Desmos_Relationships_V1_MsgDeleteRelationship, Desmos_Relationships_V1_MsgDeleteRelationshipResponse>]

  /// - Returns: Interceptors to use when handling 'blockUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockUserInterceptors() -> [ServerInterceptor<Desmos_Relationships_V1_MsgBlockUser, Desmos_Relationships_V1_MsgBlockUserResponse>]

  /// - Returns: Interceptors to use when handling 'unblockUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnblockUserInterceptors() -> [ServerInterceptor<Desmos_Relationships_V1_MsgUnblockUser, Desmos_Relationships_V1_MsgUnblockUserResponse>]
}

internal enum Desmos_Relationships_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "desmos.relationships.v1.Msg",
    methods: [
      Desmos_Relationships_V1_MsgServerMetadata.Methods.createRelationship,
      Desmos_Relationships_V1_MsgServerMetadata.Methods.deleteRelationship,
      Desmos_Relationships_V1_MsgServerMetadata.Methods.blockUser,
      Desmos_Relationships_V1_MsgServerMetadata.Methods.unblockUser,
    ]
  )

  internal enum Methods {
    internal static let createRelationship = GRPCMethodDescriptor(
      name: "CreateRelationship",
      path: "/desmos.relationships.v1.Msg/CreateRelationship",
      type: GRPCCallType.unary
    )

    internal static let deleteRelationship = GRPCMethodDescriptor(
      name: "DeleteRelationship",
      path: "/desmos.relationships.v1.Msg/DeleteRelationship",
      type: GRPCCallType.unary
    )

    internal static let blockUser = GRPCMethodDescriptor(
      name: "BlockUser",
      path: "/desmos.relationships.v1.Msg/BlockUser",
      type: GRPCCallType.unary
    )

    internal static let unblockUser = GRPCMethodDescriptor(
      name: "UnblockUser",
      path: "/desmos.relationships.v1.Msg/UnblockUser",
      type: GRPCCallType.unary
    )
  }
}
