//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: initia/gov/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for gov module.
///
/// Usage: instantiate `Initia_Gov_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Initia_Gov_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Initia_Gov_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Gov_V1_QueryParamsRequest, Initia_Gov_V1_QueryParamsResponse>

  func emergencyProposals(
    _ request: Initia_Gov_V1_QueryEmergencyProposalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Gov_V1_QueryEmergencyProposalsRequest, Initia_Gov_V1_QueryEmergencyProposalsResponse>

  func proposal(
    _ request: Initia_Gov_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Gov_V1_QueryProposalRequest, Initia_Gov_V1_QueryProposalResponse>

  func proposals(
    _ request: Initia_Gov_V1_QueryProposalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Gov_V1_QueryProposalsRequest, Initia_Gov_V1_QueryProposalsResponse>

  func tallyResult(
    _ request: Initia_Gov_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Initia_Gov_V1_QueryTallyResultRequest, Initia_Gov_V1_QueryTallyResultResponse>
}

extension Initia_Gov_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "initia.gov.v1.Query"
  }

  /// Params queries params of the gov module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Initia_Gov_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Gov_V1_QueryParamsRequest, Initia_Gov_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// EmergencyProposals queries emergency proposals.
  ///
  /// - Parameters:
  ///   - request: Request to send to EmergencyProposals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func emergencyProposals(
    _ request: Initia_Gov_V1_QueryEmergencyProposalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Gov_V1_QueryEmergencyProposalsRequest, Initia_Gov_V1_QueryEmergencyProposalsResponse> {
    return self.makeUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.emergencyProposals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmergencyProposalsInterceptors() ?? []
    )
  }

  /// Proposal queries proposal details based on ProposalID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposal(
    _ request: Initia_Gov_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Gov_V1_QueryProposalRequest, Initia_Gov_V1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// Proposals queries all proposals based on given status.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposals(
    _ request: Initia_Gov_V1_QueryProposalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Gov_V1_QueryProposalsRequest, Initia_Gov_V1_QueryProposalsResponse> {
    return self.makeUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.proposals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsInterceptors() ?? []
    )
  }

  /// TallyResult queries the tally of a proposal vote.
  ///
  /// - Parameters:
  ///   - request: Request to send to TallyResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tallyResult(
    _ request: Initia_Gov_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Initia_Gov_V1_QueryTallyResultRequest, Initia_Gov_V1_QueryTallyResultResponse> {
    return self.makeUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Initia_Gov_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Initia_Gov_V1_QueryNIOClient")
internal final class Initia_Gov_V1_QueryClient: Initia_Gov_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the initia.gov.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Initia_Gov_V1_QueryNIOClient: Initia_Gov_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the initia.gov.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for gov module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Initia_Gov_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Initia_Gov_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryParamsRequest, Initia_Gov_V1_QueryParamsResponse>

  func makeEmergencyProposalsCall(
    _ request: Initia_Gov_V1_QueryEmergencyProposalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryEmergencyProposalsRequest, Initia_Gov_V1_QueryEmergencyProposalsResponse>

  func makeProposalCall(
    _ request: Initia_Gov_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryProposalRequest, Initia_Gov_V1_QueryProposalResponse>

  func makeProposalsCall(
    _ request: Initia_Gov_V1_QueryProposalsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryProposalsRequest, Initia_Gov_V1_QueryProposalsResponse>

  func makeTallyResultCall(
    _ request: Initia_Gov_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryTallyResultRequest, Initia_Gov_V1_QueryTallyResultResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Gov_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Initia_Gov_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Initia_Gov_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryParamsRequest, Initia_Gov_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeEmergencyProposalsCall(
    _ request: Initia_Gov_V1_QueryEmergencyProposalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryEmergencyProposalsRequest, Initia_Gov_V1_QueryEmergencyProposalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.emergencyProposals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmergencyProposalsInterceptors() ?? []
    )
  }

  internal func makeProposalCall(
    _ request: Initia_Gov_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryProposalRequest, Initia_Gov_V1_QueryProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  internal func makeProposalsCall(
    _ request: Initia_Gov_V1_QueryProposalsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryProposalsRequest, Initia_Gov_V1_QueryProposalsResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.proposals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsInterceptors() ?? []
    )
  }

  internal func makeTallyResultCall(
    _ request: Initia_Gov_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Initia_Gov_V1_QueryTallyResultRequest, Initia_Gov_V1_QueryTallyResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Gov_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Initia_Gov_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Gov_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func emergencyProposals(
    _ request: Initia_Gov_V1_QueryEmergencyProposalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Gov_V1_QueryEmergencyProposalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.emergencyProposals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEmergencyProposalsInterceptors() ?? []
    )
  }

  internal func proposal(
    _ request: Initia_Gov_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Gov_V1_QueryProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  internal func proposals(
    _ request: Initia_Gov_V1_QueryProposalsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Gov_V1_QueryProposalsResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.proposals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsInterceptors() ?? []
    )
  }

  internal func tallyResult(
    _ request: Initia_Gov_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Initia_Gov_V1_QueryTallyResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Initia_Gov_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Initia_Gov_V1_QueryAsyncClient: Initia_Gov_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Initia_Gov_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Initia_Gov_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Initia_Gov_V1_QueryParamsRequest, Initia_Gov_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'emergencyProposals'.
  func makeEmergencyProposalsInterceptors() -> [ClientInterceptor<Initia_Gov_V1_QueryEmergencyProposalsRequest, Initia_Gov_V1_QueryEmergencyProposalsResponse>]

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Initia_Gov_V1_QueryProposalRequest, Initia_Gov_V1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'proposals'.
  func makeProposalsInterceptors() -> [ClientInterceptor<Initia_Gov_V1_QueryProposalsRequest, Initia_Gov_V1_QueryProposalsResponse>]

  /// - Returns: Interceptors to use when invoking 'tallyResult'.
  func makeTallyResultInterceptors() -> [ClientInterceptor<Initia_Gov_V1_QueryTallyResultRequest, Initia_Gov_V1_QueryTallyResultResponse>]
}

internal enum Initia_Gov_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "initia.gov.v1.Query",
    methods: [
      Initia_Gov_V1_QueryClientMetadata.Methods.params,
      Initia_Gov_V1_QueryClientMetadata.Methods.emergencyProposals,
      Initia_Gov_V1_QueryClientMetadata.Methods.proposal,
      Initia_Gov_V1_QueryClientMetadata.Methods.proposals,
      Initia_Gov_V1_QueryClientMetadata.Methods.tallyResult,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/initia.gov.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let emergencyProposals = GRPCMethodDescriptor(
      name: "EmergencyProposals",
      path: "/initia.gov.v1.Query/EmergencyProposals",
      type: GRPCCallType.unary
    )

    internal static let proposal = GRPCMethodDescriptor(
      name: "Proposal",
      path: "/initia.gov.v1.Query/Proposal",
      type: GRPCCallType.unary
    )

    internal static let proposals = GRPCMethodDescriptor(
      name: "Proposals",
      path: "/initia.gov.v1.Query/Proposals",
      type: GRPCCallType.unary
    )

    internal static let tallyResult = GRPCMethodDescriptor(
      name: "TallyResult",
      path: "/initia.gov.v1.Query/TallyResult",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for gov module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Initia_Gov_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Initia_Gov_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries params of the gov module.
  func params(request: Initia_Gov_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Gov_V1_QueryParamsResponse>

  /// EmergencyProposals queries emergency proposals.
  func emergencyProposals(request: Initia_Gov_V1_QueryEmergencyProposalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Gov_V1_QueryEmergencyProposalsResponse>

  /// Proposal queries proposal details based on ProposalID.
  func proposal(request: Initia_Gov_V1_QueryProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Gov_V1_QueryProposalResponse>

  /// Proposals queries all proposals based on given status.
  func proposals(request: Initia_Gov_V1_QueryProposalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Gov_V1_QueryProposalsResponse>

  /// TallyResult queries the tally of a proposal vote.
  func tallyResult(request: Initia_Gov_V1_QueryTallyResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Initia_Gov_V1_QueryTallyResultResponse>
}

extension Initia_Gov_V1_QueryProvider {
  internal var serviceName: Substring {
    return Initia_Gov_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "EmergencyProposals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryEmergencyProposalsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryEmergencyProposalsResponse>(),
        interceptors: self.interceptors?.makeEmergencyProposalsInterceptors() ?? [],
        userFunction: self.emergencyProposals(request:context:)
      )

    case "Proposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        userFunction: self.proposal(request:context:)
      )

    case "Proposals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryProposalsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryProposalsResponse>(),
        interceptors: self.interceptors?.makeProposalsInterceptors() ?? [],
        userFunction: self.proposals(request:context:)
      )

    case "TallyResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryTallyResultRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryTallyResultResponse>(),
        interceptors: self.interceptors?.makeTallyResultInterceptors() ?? [],
        userFunction: self.tallyResult(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for gov module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Initia_Gov_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Initia_Gov_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries params of the gov module.
  @Sendable func params(
    request: Initia_Gov_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Gov_V1_QueryParamsResponse

  /// EmergencyProposals queries emergency proposals.
  @Sendable func emergencyProposals(
    request: Initia_Gov_V1_QueryEmergencyProposalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Gov_V1_QueryEmergencyProposalsResponse

  /// Proposal queries proposal details based on ProposalID.
  @Sendable func proposal(
    request: Initia_Gov_V1_QueryProposalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Gov_V1_QueryProposalResponse

  /// Proposals queries all proposals based on given status.
  @Sendable func proposals(
    request: Initia_Gov_V1_QueryProposalsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Gov_V1_QueryProposalsResponse

  /// TallyResult queries the tally of a proposal vote.
  @Sendable func tallyResult(
    request: Initia_Gov_V1_QueryTallyResultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Initia_Gov_V1_QueryTallyResultResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Initia_Gov_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Initia_Gov_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Initia_Gov_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Initia_Gov_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "EmergencyProposals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryEmergencyProposalsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryEmergencyProposalsResponse>(),
        interceptors: self.interceptors?.makeEmergencyProposalsInterceptors() ?? [],
        wrapping: self.emergencyProposals(request:context:)
      )

    case "Proposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        wrapping: self.proposal(request:context:)
      )

    case "Proposals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryProposalsRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryProposalsResponse>(),
        interceptors: self.interceptors?.makeProposalsInterceptors() ?? [],
        wrapping: self.proposals(request:context:)
      )

    case "TallyResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Initia_Gov_V1_QueryTallyResultRequest>(),
        responseSerializer: ProtobufSerializer<Initia_Gov_V1_QueryTallyResultResponse>(),
        interceptors: self.interceptors?.makeTallyResultInterceptors() ?? [],
        wrapping: self.tallyResult(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Initia_Gov_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Initia_Gov_V1_QueryParamsRequest, Initia_Gov_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'emergencyProposals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEmergencyProposalsInterceptors() -> [ServerInterceptor<Initia_Gov_V1_QueryEmergencyProposalsRequest, Initia_Gov_V1_QueryEmergencyProposalsResponse>]

  /// - Returns: Interceptors to use when handling 'proposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalInterceptors() -> [ServerInterceptor<Initia_Gov_V1_QueryProposalRequest, Initia_Gov_V1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when handling 'proposals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalsInterceptors() -> [ServerInterceptor<Initia_Gov_V1_QueryProposalsRequest, Initia_Gov_V1_QueryProposalsResponse>]

  /// - Returns: Interceptors to use when handling 'tallyResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTallyResultInterceptors() -> [ServerInterceptor<Initia_Gov_V1_QueryTallyResultRequest, Initia_Gov_V1_QueryTallyResultResponse>]
}

internal enum Initia_Gov_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "initia.gov.v1.Query",
    methods: [
      Initia_Gov_V1_QueryServerMetadata.Methods.params,
      Initia_Gov_V1_QueryServerMetadata.Methods.emergencyProposals,
      Initia_Gov_V1_QueryServerMetadata.Methods.proposal,
      Initia_Gov_V1_QueryServerMetadata.Methods.proposals,
      Initia_Gov_V1_QueryServerMetadata.Methods.tallyResult,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/initia.gov.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let emergencyProposals = GRPCMethodDescriptor(
      name: "EmergencyProposals",
      path: "/initia.gov.v1.Query/EmergencyProposals",
      type: GRPCCallType.unary
    )

    internal static let proposal = GRPCMethodDescriptor(
      name: "Proposal",
      path: "/initia.gov.v1.Query/Proposal",
      type: GRPCCallType.unary
    )

    internal static let proposals = GRPCMethodDescriptor(
      name: "Proposals",
      path: "/initia.gov.v1.Query/Proposals",
      type: GRPCCallType.unary
    )

    internal static let tallyResult = GRPCMethodDescriptor(
      name: "TallyResult",
      path: "/initia.gov.v1.Query/TallyResult",
      type: GRPCCallType.unary
    )
  }
}
