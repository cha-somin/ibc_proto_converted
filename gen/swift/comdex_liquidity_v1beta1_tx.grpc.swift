//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: comdex/liquidity/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Comdex_Liquidity_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Comdex_Liquidity_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createPair(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePair,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePair, Comdex_Liquidity_V1beta1_MsgCreatePairResponse>

  func createPool(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePool, Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>

  func createRangedPool(
    _ request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCreateRangedPool, Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>

  func deposit(
    _ request: Comdex_Liquidity_V1beta1_MsgDeposit,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgDeposit, Comdex_Liquidity_V1beta1_MsgDepositResponse>

  func withdraw(
    _ request: Comdex_Liquidity_V1beta1_MsgWithdraw,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgWithdraw, Comdex_Liquidity_V1beta1_MsgWithdrawResponse>

  func limitOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgLimitOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgLimitOrder, Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>

  func marketOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgMarketOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgMarketOrder, Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>

  func mMOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgMMOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgMMOrder, Comdex_Liquidity_V1beta1_MsgMMOrderResponse>

  func cancelOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCancelOrder, Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>

  func cancelAllOrders(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCancelAllOrders, Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>

  func cancelMMOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCancelMMOrder, Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>

  func farm(
    _ request: Comdex_Liquidity_V1beta1_MsgFarm,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgFarm, Comdex_Liquidity_V1beta1_MsgFarmResponse>

  func unfarm(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarm,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarm, Comdex_Liquidity_V1beta1_MsgUnfarmResponse>

  func depositAndFarm(
    _ request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgDepositAndFarm, Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>

  func unfarmAndWithdraw(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>
}

extension Comdex_Liquidity_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "comdex.liquidity.v1beta1.Msg"
  }

  /// CreatePair defines a method for creating a pair
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePair.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPair(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePair,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePair, Comdex_Liquidity_V1beta1_MsgCreatePairResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePairInterceptors() ?? []
    )
  }

  /// CreatePool defines a method for creating a pool
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPool(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePool, Comdex_Liquidity_V1beta1_MsgCreatePoolResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  /// CreateRangePool defines a method for creating a ranged pool
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRangedPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRangedPool(
    _ request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCreateRangedPool, Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createRangedPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRangedPoolInterceptors() ?? []
    )
  }

  /// Deposit defines a method for depositing coins to the pool
  ///
  /// - Parameters:
  ///   - request: Request to send to Deposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deposit(
    _ request: Comdex_Liquidity_V1beta1_MsgDeposit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgDeposit, Comdex_Liquidity_V1beta1_MsgDepositResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.deposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }

  /// Withdraw defines a method for withdrawing pool coin from the pool
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdraw(
    _ request: Comdex_Liquidity_V1beta1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgWithdraw, Comdex_Liquidity_V1beta1_MsgWithdrawResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  /// LimitOrder defines a method for making a limit order
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func limitOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgLimitOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgLimitOrder, Comdex_Liquidity_V1beta1_MsgLimitOrderResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.limitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? []
    )
  }

  /// MarketOrder defines a method for making a market order
  ///
  /// - Parameters:
  ///   - request: Request to send to MarketOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marketOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgMarketOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgMarketOrder, Comdex_Liquidity_V1beta1_MsgMarketOrderResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.marketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketOrderInterceptors() ?? []
    )
  }

  /// MsgMMOrder defines a method for making a MM(market making) order
  ///
  /// - Parameters:
  ///   - request: Request to send to MMOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mMOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgMMOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgMMOrder, Comdex_Liquidity_V1beta1_MsgMMOrderResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.mMOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMMOrderInterceptors() ?? []
    )
  }

  /// CancelOrder defines a method for cancelling an order
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCancelOrder, Comdex_Liquidity_V1beta1_MsgCancelOrderResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  /// CancelAllOrders defines a method for cancelling all orders
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelAllOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelAllOrders(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCancelAllOrders, Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelAllOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelAllOrdersInterceptors() ?? []
    )
  }

  /// CancelMMOrder defines a method for cancelling previously placed market making orders
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelMMOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelMMOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgCancelMMOrder, Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelMMOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMMOrderInterceptors() ?? []
    )
  }

  /// MsgFarm defines a method to farm the pool token, for incentivization
  ///
  /// - Parameters:
  ///   - request: Request to send to Farm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func farm(
    _ request: Comdex_Liquidity_V1beta1_MsgFarm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgFarm, Comdex_Liquidity_V1beta1_MsgFarmResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  /// Unfarm defines a method to unfarm the farmed pool token
  ///
  /// - Parameters:
  ///   - request: Request to send to Unfarm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfarm(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarm, Comdex_Liquidity_V1beta1_MsgUnfarmResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmInterceptors() ?? []
    )
  }

  /// DepositAndFarm defines an SDK message for depositing coins to the pool and farming the pool coin
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositAndFarm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositAndFarm(
    _ request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgDepositAndFarm, Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.depositAndFarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositAndFarmInterceptors() ?? []
    )
  }

  /// UnfarmAndWithdraw defines a SDK message for performing unfarm of the farmed coins and withdrawing liquidity from pool
  ///
  /// - Parameters:
  ///   - request: Request to send to UnfarmAndWithdraw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfarmAndWithdraw(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse> {
    return self.makeUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarmAndWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmAndWithdrawInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Comdex_Liquidity_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Comdex_Liquidity_V1beta1_MsgNIOClient")
internal final class Comdex_Liquidity_V1beta1_MsgClient: Comdex_Liquidity_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the comdex.liquidity.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Comdex_Liquidity_V1beta1_MsgNIOClient: Comdex_Liquidity_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the comdex.liquidity.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Comdex_Liquidity_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreatePairCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePair,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePair, Comdex_Liquidity_V1beta1_MsgCreatePairResponse>

  func makeCreatePoolCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePool, Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>

  func makeCreateRangedPoolCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCreateRangedPool, Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>

  func makeDepositCall(
    _ request: Comdex_Liquidity_V1beta1_MsgDeposit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgDeposit, Comdex_Liquidity_V1beta1_MsgDepositResponse>

  func makeWithdrawCall(
    _ request: Comdex_Liquidity_V1beta1_MsgWithdraw,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgWithdraw, Comdex_Liquidity_V1beta1_MsgWithdrawResponse>

  func makeLimitOrderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgLimitOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgLimitOrder, Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>

  func makeMarketOrderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgMarketOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgMarketOrder, Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>

  func makeMmorderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgMMOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgMMOrder, Comdex_Liquidity_V1beta1_MsgMMOrderResponse>

  func makeCancelOrderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCancelOrder, Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>

  func makeCancelAllOrdersCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCancelAllOrders, Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>

  func makeCancelMmorderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCancelMMOrder, Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>

  func makeFarmCall(
    _ request: Comdex_Liquidity_V1beta1_MsgFarm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgFarm, Comdex_Liquidity_V1beta1_MsgFarmResponse>

  func makeUnfarmCall(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarm, Comdex_Liquidity_V1beta1_MsgUnfarmResponse>

  func makeDepositAndFarmCall(
    _ request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgDepositAndFarm, Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>

  func makeUnfarmAndWithdrawCall(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Liquidity_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Comdex_Liquidity_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreatePairCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePair,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePair, Comdex_Liquidity_V1beta1_MsgCreatePairResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePairInterceptors() ?? []
    )
  }

  internal func makeCreatePoolCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCreatePool, Comdex_Liquidity_V1beta1_MsgCreatePoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func makeCreateRangedPoolCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCreateRangedPool, Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createRangedPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRangedPoolInterceptors() ?? []
    )
  }

  internal func makeDepositCall(
    _ request: Comdex_Liquidity_V1beta1_MsgDeposit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgDeposit, Comdex_Liquidity_V1beta1_MsgDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.deposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }

  internal func makeWithdrawCall(
    _ request: Comdex_Liquidity_V1beta1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgWithdraw, Comdex_Liquidity_V1beta1_MsgWithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func makeLimitOrderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgLimitOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgLimitOrder, Comdex_Liquidity_V1beta1_MsgLimitOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.limitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? []
    )
  }

  internal func makeMarketOrderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgMarketOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgMarketOrder, Comdex_Liquidity_V1beta1_MsgMarketOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.marketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketOrderInterceptors() ?? []
    )
  }

  internal func makeMmorderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgMMOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgMMOrder, Comdex_Liquidity_V1beta1_MsgMMOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.mMOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMMOrderInterceptors() ?? []
    )
  }

  internal func makeCancelOrderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCancelOrder, Comdex_Liquidity_V1beta1_MsgCancelOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func makeCancelAllOrdersCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCancelAllOrders, Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelAllOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelAllOrdersInterceptors() ?? []
    )
  }

  internal func makeCancelMmorderCall(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgCancelMMOrder, Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelMMOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMMOrderInterceptors() ?? []
    )
  }

  internal func makeFarmCall(
    _ request: Comdex_Liquidity_V1beta1_MsgFarm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgFarm, Comdex_Liquidity_V1beta1_MsgFarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  internal func makeUnfarmCall(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarm, Comdex_Liquidity_V1beta1_MsgUnfarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmInterceptors() ?? []
    )
  }

  internal func makeDepositAndFarmCall(
    _ request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgDepositAndFarm, Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.depositAndFarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositAndFarmInterceptors() ?? []
    )
  }

  internal func makeUnfarmAndWithdrawCall(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse> {
    return self.makeAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarmAndWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmAndWithdrawInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Liquidity_V1beta1_MsgAsyncClientProtocol {
  internal func createPair(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePair,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCreatePairResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPair.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePairInterceptors() ?? []
    )
  }

  internal func createPool(
    _ request: Comdex_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCreatePoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  internal func createRangedPool(
    _ request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createRangedPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRangedPoolInterceptors() ?? []
    )
  }

  internal func deposit(
    _ request: Comdex_Liquidity_V1beta1_MsgDeposit,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.deposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }

  internal func withdraw(
    _ request: Comdex_Liquidity_V1beta1_MsgWithdraw,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgWithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.withdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawInterceptors() ?? []
    )
  }

  internal func limitOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgLimitOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgLimitOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.limitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? []
    )
  }

  internal func marketOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgMarketOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgMarketOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.marketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketOrderInterceptors() ?? []
    )
  }

  internal func mMOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgMMOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgMMOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.mMOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMMOrderInterceptors() ?? []
    )
  }

  internal func cancelOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCancelOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func cancelAllOrders(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelAllOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelAllOrdersInterceptors() ?? []
    )
  }

  internal func cancelMMOrder(
    _ request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelMMOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelMMOrderInterceptors() ?? []
    )
  }

  internal func farm(
    _ request: Comdex_Liquidity_V1beta1_MsgFarm,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgFarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  internal func unfarm(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarm,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgUnfarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmInterceptors() ?? []
    )
  }

  internal func depositAndFarm(
    _ request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.depositAndFarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositAndFarmInterceptors() ?? []
    )
  }

  internal func unfarmAndWithdraw(
    _ request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw,
    callOptions: CallOptions? = nil
  ) async throws -> Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse {
    return try await self.performAsyncUnaryCall(
      path: Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarmAndWithdraw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmAndWithdrawInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Comdex_Liquidity_V1beta1_MsgAsyncClient: Comdex_Liquidity_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Comdex_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createPair'.
  func makeCreatePairInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgCreatePair, Comdex_Liquidity_V1beta1_MsgCreatePairResponse>]

  /// - Returns: Interceptors to use when invoking 'createPool'.
  func makeCreatePoolInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgCreatePool, Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'createRangedPool'.
  func makeCreateRangedPoolInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgCreateRangedPool, Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'deposit'.
  func makeDepositInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgDeposit, Comdex_Liquidity_V1beta1_MsgDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'withdraw'.
  func makeWithdrawInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgWithdraw, Comdex_Liquidity_V1beta1_MsgWithdrawResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrder'.
  func makeLimitOrderInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgLimitOrder, Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'marketOrder'.
  func makeMarketOrderInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgMarketOrder, Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'mMOrder'.
  func makeMMOrderInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgMMOrder, Comdex_Liquidity_V1beta1_MsgMMOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelOrder'.
  func makeCancelOrderInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgCancelOrder, Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelAllOrders'.
  func makeCancelAllOrdersInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgCancelAllOrders, Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelMMOrder'.
  func makeCancelMMOrderInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgCancelMMOrder, Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'farm'.
  func makeFarmInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgFarm, Comdex_Liquidity_V1beta1_MsgFarmResponse>]

  /// - Returns: Interceptors to use when invoking 'unfarm'.
  func makeUnfarmInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgUnfarm, Comdex_Liquidity_V1beta1_MsgUnfarmResponse>]

  /// - Returns: Interceptors to use when invoking 'depositAndFarm'.
  func makeDepositAndFarmInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgDepositAndFarm, Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>]

  /// - Returns: Interceptors to use when invoking 'unfarmAndWithdraw'.
  func makeUnfarmAndWithdrawInterceptors() -> [ClientInterceptor<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>]
}

internal enum Comdex_Liquidity_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "comdex.liquidity.v1beta1.Msg",
    methods: [
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPair,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createPool,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.createRangedPool,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.deposit,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.withdraw,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.limitOrder,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.marketOrder,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.mMOrder,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelOrder,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelAllOrders,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.cancelMMOrder,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.farm,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarm,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.depositAndFarm,
      Comdex_Liquidity_V1beta1_MsgClientMetadata.Methods.unfarmAndWithdraw,
    ]
  )

  internal enum Methods {
    internal static let createPair = GRPCMethodDescriptor(
      name: "CreatePair",
      path: "/comdex.liquidity.v1beta1.Msg/CreatePair",
      type: GRPCCallType.unary
    )

    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/comdex.liquidity.v1beta1.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let createRangedPool = GRPCMethodDescriptor(
      name: "CreateRangedPool",
      path: "/comdex.liquidity.v1beta1.Msg/CreateRangedPool",
      type: GRPCCallType.unary
    )

    internal static let deposit = GRPCMethodDescriptor(
      name: "Deposit",
      path: "/comdex.liquidity.v1beta1.Msg/Deposit",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/comdex.liquidity.v1beta1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let limitOrder = GRPCMethodDescriptor(
      name: "LimitOrder",
      path: "/comdex.liquidity.v1beta1.Msg/LimitOrder",
      type: GRPCCallType.unary
    )

    internal static let marketOrder = GRPCMethodDescriptor(
      name: "MarketOrder",
      path: "/comdex.liquidity.v1beta1.Msg/MarketOrder",
      type: GRPCCallType.unary
    )

    internal static let mMOrder = GRPCMethodDescriptor(
      name: "MMOrder",
      path: "/comdex.liquidity.v1beta1.Msg/MMOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/comdex.liquidity.v1beta1.Msg/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelAllOrders = GRPCMethodDescriptor(
      name: "CancelAllOrders",
      path: "/comdex.liquidity.v1beta1.Msg/CancelAllOrders",
      type: GRPCCallType.unary
    )

    internal static let cancelMMOrder = GRPCMethodDescriptor(
      name: "CancelMMOrder",
      path: "/comdex.liquidity.v1beta1.Msg/CancelMMOrder",
      type: GRPCCallType.unary
    )

    internal static let farm = GRPCMethodDescriptor(
      name: "Farm",
      path: "/comdex.liquidity.v1beta1.Msg/Farm",
      type: GRPCCallType.unary
    )

    internal static let unfarm = GRPCMethodDescriptor(
      name: "Unfarm",
      path: "/comdex.liquidity.v1beta1.Msg/Unfarm",
      type: GRPCCallType.unary
    )

    internal static let depositAndFarm = GRPCMethodDescriptor(
      name: "DepositAndFarm",
      path: "/comdex.liquidity.v1beta1.Msg/DepositAndFarm",
      type: GRPCCallType.unary
    )

    internal static let unfarmAndWithdraw = GRPCMethodDescriptor(
      name: "UnfarmAndWithdraw",
      path: "/comdex.liquidity.v1beta1.Msg/UnfarmAndWithdraw",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Comdex_Liquidity_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Comdex_Liquidity_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreatePair defines a method for creating a pair
  func createPair(request: Comdex_Liquidity_V1beta1_MsgCreatePair, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgCreatePairResponse>

  /// CreatePool defines a method for creating a pool
  func createPool(request: Comdex_Liquidity_V1beta1_MsgCreatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>

  /// CreateRangePool defines a method for creating a ranged pool
  func createRangedPool(request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>

  /// Deposit defines a method for depositing coins to the pool
  func deposit(request: Comdex_Liquidity_V1beta1_MsgDeposit, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgDepositResponse>

  /// Withdraw defines a method for withdrawing pool coin from the pool
  func withdraw(request: Comdex_Liquidity_V1beta1_MsgWithdraw, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgWithdrawResponse>

  /// LimitOrder defines a method for making a limit order
  func limitOrder(request: Comdex_Liquidity_V1beta1_MsgLimitOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>

  /// MarketOrder defines a method for making a market order
  func marketOrder(request: Comdex_Liquidity_V1beta1_MsgMarketOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>

  /// MsgMMOrder defines a method for making a MM(market making) order
  func mMOrder(request: Comdex_Liquidity_V1beta1_MsgMMOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgMMOrderResponse>

  /// CancelOrder defines a method for cancelling an order
  func cancelOrder(request: Comdex_Liquidity_V1beta1_MsgCancelOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>

  /// CancelAllOrders defines a method for cancelling all orders
  func cancelAllOrders(request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>

  /// CancelMMOrder defines a method for cancelling previously placed market making orders
  func cancelMMOrder(request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>

  /// MsgFarm defines a method to farm the pool token, for incentivization
  func farm(request: Comdex_Liquidity_V1beta1_MsgFarm, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgFarmResponse>

  /// Unfarm defines a method to unfarm the farmed pool token
  func unfarm(request: Comdex_Liquidity_V1beta1_MsgUnfarm, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgUnfarmResponse>

  /// DepositAndFarm defines an SDK message for depositing coins to the pool and farming the pool coin
  func depositAndFarm(request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>

  /// UnfarmAndWithdraw defines a SDK message for performing unfarm of the farmed coins and withdrawing liquidity from pool
  func unfarmAndWithdraw(request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>
}

extension Comdex_Liquidity_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Comdex_Liquidity_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePair":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCreatePair>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCreatePairResponse>(),
        interceptors: self.interceptors?.makeCreatePairInterceptors() ?? [],
        userFunction: self.createPair(request:context:)
      )

    case "CreatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        userFunction: self.createPool(request:context:)
      )

    case "CreateRangedPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCreateRangedPool>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>(),
        interceptors: self.interceptors?.makeCreateRangedPoolInterceptors() ?? [],
        userFunction: self.createRangedPool(request:context:)
      )

    case "Deposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgDeposit>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgDepositResponse>(),
        interceptors: self.interceptors?.makeDepositInterceptors() ?? [],
        userFunction: self.deposit(request:context:)
      )

    case "Withdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgWithdraw>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgWithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        userFunction: self.withdraw(request:context:)
      )

    case "LimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgLimitOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>(),
        interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? [],
        userFunction: self.limitOrder(request:context:)
      )

    case "MarketOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgMarketOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>(),
        interceptors: self.interceptors?.makeMarketOrderInterceptors() ?? [],
        userFunction: self.marketOrder(request:context:)
      )

    case "MMOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgMMOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgMMOrderResponse>(),
        interceptors: self.interceptors?.makeMMOrderInterceptors() ?? [],
        userFunction: self.mMOrder(request:context:)
      )

    case "CancelOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCancelOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        userFunction: self.cancelOrder(request:context:)
      )

    case "CancelAllOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCancelAllOrders>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>(),
        interceptors: self.interceptors?.makeCancelAllOrdersInterceptors() ?? [],
        userFunction: self.cancelAllOrders(request:context:)
      )

    case "CancelMMOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCancelMMOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>(),
        interceptors: self.interceptors?.makeCancelMMOrderInterceptors() ?? [],
        userFunction: self.cancelMMOrder(request:context:)
      )

    case "Farm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgFarm>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgFarmResponse>(),
        interceptors: self.interceptors?.makeFarmInterceptors() ?? [],
        userFunction: self.farm(request:context:)
      )

    case "Unfarm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgUnfarm>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgUnfarmResponse>(),
        interceptors: self.interceptors?.makeUnfarmInterceptors() ?? [],
        userFunction: self.unfarm(request:context:)
      )

    case "DepositAndFarm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgDepositAndFarm>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>(),
        interceptors: self.interceptors?.makeDepositAndFarmInterceptors() ?? [],
        userFunction: self.depositAndFarm(request:context:)
      )

    case "UnfarmAndWithdraw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>(),
        interceptors: self.interceptors?.makeUnfarmAndWithdrawInterceptors() ?? [],
        userFunction: self.unfarmAndWithdraw(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Comdex_Liquidity_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Comdex_Liquidity_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreatePair defines a method for creating a pair
  @Sendable func createPair(
    request: Comdex_Liquidity_V1beta1_MsgCreatePair,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCreatePairResponse

  /// CreatePool defines a method for creating a pool
  @Sendable func createPool(
    request: Comdex_Liquidity_V1beta1_MsgCreatePool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCreatePoolResponse

  /// CreateRangePool defines a method for creating a ranged pool
  @Sendable func createRangedPool(
    request: Comdex_Liquidity_V1beta1_MsgCreateRangedPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse

  /// Deposit defines a method for depositing coins to the pool
  @Sendable func deposit(
    request: Comdex_Liquidity_V1beta1_MsgDeposit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgDepositResponse

  /// Withdraw defines a method for withdrawing pool coin from the pool
  @Sendable func withdraw(
    request: Comdex_Liquidity_V1beta1_MsgWithdraw,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgWithdrawResponse

  /// LimitOrder defines a method for making a limit order
  @Sendable func limitOrder(
    request: Comdex_Liquidity_V1beta1_MsgLimitOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgLimitOrderResponse

  /// MarketOrder defines a method for making a market order
  @Sendable func marketOrder(
    request: Comdex_Liquidity_V1beta1_MsgMarketOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgMarketOrderResponse

  /// MsgMMOrder defines a method for making a MM(market making) order
  @Sendable func mMOrder(
    request: Comdex_Liquidity_V1beta1_MsgMMOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgMMOrderResponse

  /// CancelOrder defines a method for cancelling an order
  @Sendable func cancelOrder(
    request: Comdex_Liquidity_V1beta1_MsgCancelOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCancelOrderResponse

  /// CancelAllOrders defines a method for cancelling all orders
  @Sendable func cancelAllOrders(
    request: Comdex_Liquidity_V1beta1_MsgCancelAllOrders,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse

  /// CancelMMOrder defines a method for cancelling previously placed market making orders
  @Sendable func cancelMMOrder(
    request: Comdex_Liquidity_V1beta1_MsgCancelMMOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse

  /// MsgFarm defines a method to farm the pool token, for incentivization
  @Sendable func farm(
    request: Comdex_Liquidity_V1beta1_MsgFarm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgFarmResponse

  /// Unfarm defines a method to unfarm the farmed pool token
  @Sendable func unfarm(
    request: Comdex_Liquidity_V1beta1_MsgUnfarm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgUnfarmResponse

  /// DepositAndFarm defines an SDK message for depositing coins to the pool and farming the pool coin
  @Sendable func depositAndFarm(
    request: Comdex_Liquidity_V1beta1_MsgDepositAndFarm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse

  /// UnfarmAndWithdraw defines a SDK message for performing unfarm of the farmed coins and withdrawing liquidity from pool
  @Sendable func unfarmAndWithdraw(
    request: Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw,
    context: GRPCAsyncServerCallContext
  ) async throws -> Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Comdex_Liquidity_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Comdex_Liquidity_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Comdex_Liquidity_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Comdex_Liquidity_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePair":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCreatePair>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCreatePairResponse>(),
        interceptors: self.interceptors?.makeCreatePairInterceptors() ?? [],
        wrapping: self.createPair(request:context:)
      )

    case "CreatePool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        wrapping: self.createPool(request:context:)
      )

    case "CreateRangedPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCreateRangedPool>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>(),
        interceptors: self.interceptors?.makeCreateRangedPoolInterceptors() ?? [],
        wrapping: self.createRangedPool(request:context:)
      )

    case "Deposit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgDeposit>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgDepositResponse>(),
        interceptors: self.interceptors?.makeDepositInterceptors() ?? [],
        wrapping: self.deposit(request:context:)
      )

    case "Withdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgWithdraw>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgWithdrawResponse>(),
        interceptors: self.interceptors?.makeWithdrawInterceptors() ?? [],
        wrapping: self.withdraw(request:context:)
      )

    case "LimitOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgLimitOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>(),
        interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? [],
        wrapping: self.limitOrder(request:context:)
      )

    case "MarketOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgMarketOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>(),
        interceptors: self.interceptors?.makeMarketOrderInterceptors() ?? [],
        wrapping: self.marketOrder(request:context:)
      )

    case "MMOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgMMOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgMMOrderResponse>(),
        interceptors: self.interceptors?.makeMMOrderInterceptors() ?? [],
        wrapping: self.mMOrder(request:context:)
      )

    case "CancelOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCancelOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        wrapping: self.cancelOrder(request:context:)
      )

    case "CancelAllOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCancelAllOrders>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>(),
        interceptors: self.interceptors?.makeCancelAllOrdersInterceptors() ?? [],
        wrapping: self.cancelAllOrders(request:context:)
      )

    case "CancelMMOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgCancelMMOrder>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>(),
        interceptors: self.interceptors?.makeCancelMMOrderInterceptors() ?? [],
        wrapping: self.cancelMMOrder(request:context:)
      )

    case "Farm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgFarm>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgFarmResponse>(),
        interceptors: self.interceptors?.makeFarmInterceptors() ?? [],
        wrapping: self.farm(request:context:)
      )

    case "Unfarm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgUnfarm>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgUnfarmResponse>(),
        interceptors: self.interceptors?.makeUnfarmInterceptors() ?? [],
        wrapping: self.unfarm(request:context:)
      )

    case "DepositAndFarm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgDepositAndFarm>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>(),
        interceptors: self.interceptors?.makeDepositAndFarmInterceptors() ?? [],
        wrapping: self.depositAndFarm(request:context:)
      )

    case "UnfarmAndWithdraw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw>(),
        responseSerializer: ProtobufSerializer<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>(),
        interceptors: self.interceptors?.makeUnfarmAndWithdrawInterceptors() ?? [],
        wrapping: self.unfarmAndWithdraw(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Comdex_Liquidity_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPair'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePairInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgCreatePair, Comdex_Liquidity_V1beta1_MsgCreatePairResponse>]

  /// - Returns: Interceptors to use when handling 'createPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePoolInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgCreatePool, Comdex_Liquidity_V1beta1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'createRangedPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRangedPoolInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgCreateRangedPool, Comdex_Liquidity_V1beta1_MsgCreateRangedPoolResponse>]

  /// - Returns: Interceptors to use when handling 'deposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgDeposit, Comdex_Liquidity_V1beta1_MsgDepositResponse>]

  /// - Returns: Interceptors to use when handling 'withdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgWithdraw, Comdex_Liquidity_V1beta1_MsgWithdrawResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgLimitOrder, Comdex_Liquidity_V1beta1_MsgLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'marketOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketOrderInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgMarketOrder, Comdex_Liquidity_V1beta1_MsgMarketOrderResponse>]

  /// - Returns: Interceptors to use when handling 'mMOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMMOrderInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgMMOrder, Comdex_Liquidity_V1beta1_MsgMMOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelOrderInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgCancelOrder, Comdex_Liquidity_V1beta1_MsgCancelOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelAllOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelAllOrdersInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgCancelAllOrders, Comdex_Liquidity_V1beta1_MsgCancelAllOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'cancelMMOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelMMOrderInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgCancelMMOrder, Comdex_Liquidity_V1beta1_MsgCancelMMOrderResponse>]

  /// - Returns: Interceptors to use when handling 'farm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFarmInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgFarm, Comdex_Liquidity_V1beta1_MsgFarmResponse>]

  /// - Returns: Interceptors to use when handling 'unfarm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfarmInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgUnfarm, Comdex_Liquidity_V1beta1_MsgUnfarmResponse>]

  /// - Returns: Interceptors to use when handling 'depositAndFarm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositAndFarmInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgDepositAndFarm, Comdex_Liquidity_V1beta1_MsgDepositAndFarmResponse>]

  /// - Returns: Interceptors to use when handling 'unfarmAndWithdraw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfarmAndWithdrawInterceptors() -> [ServerInterceptor<Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdraw, Comdex_Liquidity_V1beta1_MsgUnfarmAndWithdrawResponse>]
}

internal enum Comdex_Liquidity_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "comdex.liquidity.v1beta1.Msg",
    methods: [
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.createPair,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.createPool,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.createRangedPool,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.deposit,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.withdraw,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.limitOrder,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.marketOrder,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.mMOrder,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.cancelOrder,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.cancelAllOrders,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.cancelMMOrder,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.farm,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.unfarm,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.depositAndFarm,
      Comdex_Liquidity_V1beta1_MsgServerMetadata.Methods.unfarmAndWithdraw,
    ]
  )

  internal enum Methods {
    internal static let createPair = GRPCMethodDescriptor(
      name: "CreatePair",
      path: "/comdex.liquidity.v1beta1.Msg/CreatePair",
      type: GRPCCallType.unary
    )

    internal static let createPool = GRPCMethodDescriptor(
      name: "CreatePool",
      path: "/comdex.liquidity.v1beta1.Msg/CreatePool",
      type: GRPCCallType.unary
    )

    internal static let createRangedPool = GRPCMethodDescriptor(
      name: "CreateRangedPool",
      path: "/comdex.liquidity.v1beta1.Msg/CreateRangedPool",
      type: GRPCCallType.unary
    )

    internal static let deposit = GRPCMethodDescriptor(
      name: "Deposit",
      path: "/comdex.liquidity.v1beta1.Msg/Deposit",
      type: GRPCCallType.unary
    )

    internal static let withdraw = GRPCMethodDescriptor(
      name: "Withdraw",
      path: "/comdex.liquidity.v1beta1.Msg/Withdraw",
      type: GRPCCallType.unary
    )

    internal static let limitOrder = GRPCMethodDescriptor(
      name: "LimitOrder",
      path: "/comdex.liquidity.v1beta1.Msg/LimitOrder",
      type: GRPCCallType.unary
    )

    internal static let marketOrder = GRPCMethodDescriptor(
      name: "MarketOrder",
      path: "/comdex.liquidity.v1beta1.Msg/MarketOrder",
      type: GRPCCallType.unary
    )

    internal static let mMOrder = GRPCMethodDescriptor(
      name: "MMOrder",
      path: "/comdex.liquidity.v1beta1.Msg/MMOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/comdex.liquidity.v1beta1.Msg/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelAllOrders = GRPCMethodDescriptor(
      name: "CancelAllOrders",
      path: "/comdex.liquidity.v1beta1.Msg/CancelAllOrders",
      type: GRPCCallType.unary
    )

    internal static let cancelMMOrder = GRPCMethodDescriptor(
      name: "CancelMMOrder",
      path: "/comdex.liquidity.v1beta1.Msg/CancelMMOrder",
      type: GRPCCallType.unary
    )

    internal static let farm = GRPCMethodDescriptor(
      name: "Farm",
      path: "/comdex.liquidity.v1beta1.Msg/Farm",
      type: GRPCCallType.unary
    )

    internal static let unfarm = GRPCMethodDescriptor(
      name: "Unfarm",
      path: "/comdex.liquidity.v1beta1.Msg/Unfarm",
      type: GRPCCallType.unary
    )

    internal static let depositAndFarm = GRPCMethodDescriptor(
      name: "DepositAndFarm",
      path: "/comdex.liquidity.v1beta1.Msg/DepositAndFarm",
      type: GRPCCallType.unary
    )

    internal static let unfarmAndWithdraw = GRPCMethodDescriptor(
      name: "UnfarmAndWithdraw",
      path: "/comdex.liquidity.v1beta1.Msg/UnfarmAndWithdraw",
      type: GRPCCallType.unary
    )
  }
}
