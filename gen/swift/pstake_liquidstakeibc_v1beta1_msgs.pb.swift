// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pstake/liquidstakeibc/v1beta1/msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account
  var authority: String = String()

  var connectionID: String = String()

  var depositFee: String = String()

  var restakeFee: String = String()

  var unstakeFee: String = String()

  var redemptionFee: String = String()

  var channelID: String = String()

  var portID: String = String()

  var hostDenom: String = String()

  var minimumDeposit: String = String()

  var unbondingFactor: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authority is the address of the governance account
  var authority: String = String()

  var chainID: String = String()

  var updates: [Pstake_Liquidstakeibc_V1beta1_KVUpdate] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var hostDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Liquidstakeibc_V1beta1_MsgRedeem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var hostDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgRedeem: @unchecked Sendable {}
extension Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pstake.liquidstakeibc.v1beta1"

extension Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterHostChain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .standard(proto: "connection_id"),
    3: .standard(proto: "deposit_fee"),
    4: .standard(proto: "restake_fee"),
    5: .standard(proto: "unstake_fee"),
    6: .standard(proto: "redemption_fee"),
    7: .standard(proto: "channel_id"),
    8: .standard(proto: "port_id"),
    9: .standard(proto: "host_denom"),
    10: .standard(proto: "minimum_deposit"),
    11: .standard(proto: "unbonding_factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.depositFee) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.restakeFee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.unstakeFee) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.redemptionFee) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.channelID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.portID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.hostDenom) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.minimumDeposit) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.unbondingFactor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 2)
    }
    if !self.depositFee.isEmpty {
      try visitor.visitSingularStringField(value: self.depositFee, fieldNumber: 3)
    }
    if !self.restakeFee.isEmpty {
      try visitor.visitSingularStringField(value: self.restakeFee, fieldNumber: 4)
    }
    if !self.unstakeFee.isEmpty {
      try visitor.visitSingularStringField(value: self.unstakeFee, fieldNumber: 5)
    }
    if !self.redemptionFee.isEmpty {
      try visitor.visitSingularStringField(value: self.redemptionFee, fieldNumber: 6)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 7)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 8)
    }
    if !self.hostDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.hostDenom, fieldNumber: 9)
    }
    if !self.minimumDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minimumDeposit, fieldNumber: 10)
    }
    if self.unbondingFactor != 0 {
      try visitor.visitSingularInt64Field(value: self.unbondingFactor, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain, rhs: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChain) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.depositFee != rhs.depositFee {return false}
    if lhs.restakeFee != rhs.restakeFee {return false}
    if lhs.unstakeFee != rhs.unstakeFee {return false}
    if lhs.redemptionFee != rhs.redemptionFee {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs.hostDenom != rhs.hostDenom {return false}
    if lhs.minimumDeposit != rhs.minimumDeposit {return false}
    if lhs.unbondingFactor != rhs.unbondingFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterHostChainResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse, rhs: Pstake_Liquidstakeibc_V1beta1_MsgRegisterHostChainResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateHostChain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authority"),
    2: .standard(proto: "chain_id"),
    3: .same(proto: "updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.authority) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.updates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    if !self.updates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updates, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain, rhs: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChain) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.updates != rhs.updates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateHostChainResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse, rhs: Pstake_Liquidstakeibc_V1beta1_MsgUpdateHostChainResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidStake"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake, rhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStake) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidStakeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse, rhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidStakeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidUnstake"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .same(proto: "amount"),
    3: .standard(proto: "host_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hostDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.hostDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.hostDenom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake, rhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstake) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.hostDenom != rhs.hostDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidUnstakeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse, rhs: Pstake_Liquidstakeibc_V1beta1_MsgLiquidUnstakeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgRedeem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRedeem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .same(proto: "amount"),
    3: .standard(proto: "host_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hostDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.hostDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.hostDenom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgRedeem, rhs: Pstake_Liquidstakeibc_V1beta1_MsgRedeem) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.hostDenom != rhs.hostDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRedeemResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse, rhs: Pstake_Liquidstakeibc_V1beta1_MsgRedeemResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
