//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: regen/ecocredit/v1alpha2/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg is the regen.ecocredit.v1alpha1 Msg service.
///
/// Usage: instantiate `Regen_Ecocredit_V1alpha2_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Regen_Ecocredit_V1alpha2_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? { get }

  func createClass(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateClass,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateClass, Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>

  func createProject(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateProject,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateProject, Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>

  func createBatch(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBatch, Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>

  func send(
    _ request: Regen_Ecocredit_V1alpha2_MsgSend,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgSend, Regen_Ecocredit_V1alpha2_MsgSendResponse>

  func retire(
    _ request: Regen_Ecocredit_V1alpha2_MsgRetire,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgRetire, Regen_Ecocredit_V1alpha2_MsgRetireResponse>

  func cancel(
    _ request: Regen_Ecocredit_V1alpha2_MsgCancel,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCancel, Regen_Ecocredit_V1alpha2_MsgCancelResponse>

  func updateClassAdmin(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>

  func updateClassIssuers(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>

  func updateClassMetadata(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>

  func sell(
    _ request: Regen_Ecocredit_V1alpha2_MsgSell,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgSell, Regen_Ecocredit_V1alpha2_MsgSellResponse>

  func updateSellOrders(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>

  func buy(
    _ request: Regen_Ecocredit_V1alpha2_MsgBuy,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgBuy, Regen_Ecocredit_V1alpha2_MsgBuyResponse>

  func allowAskDenom(
    _ request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>

  func createBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBasket,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBasket, Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>

  func addToBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgAddToBasket,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgAddToBasket, Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>

  func takeFromBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>

  func pickFromBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgPickFromBasket, Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>
}

extension Regen_Ecocredit_V1alpha2_MsgClientProtocol {
  internal var serviceName: String {
    return "regen.ecocredit.v1alpha2.Msg"
  }

  /// CreateClass creates a new credit class with an approved list of issuers and
  /// optional metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateClass.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createClass(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateClass,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateClass, Regen_Ecocredit_V1alpha2_MsgCreateClassResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateClassInterceptors() ?? []
    )
  }

  /// CreateProject creates a new project within a credit class.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createProject(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateProject,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateProject, Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createProject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? []
    )
  }

  /// CreateBatch creates a new batch of credits for an existing project.
  /// This will create a new batch denom with a fixed supply. Issued credits can
  /// be distributed to recipients in either tradable or retired form.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBatch(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBatch, Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBatchInterceptors() ?? []
    )
  }

  /// Send sends tradable credits from one account to another account. Sent
  /// credits can either be tradable or retired on receipt.
  ///
  /// - Parameters:
  ///   - request: Request to send to Send.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func send(
    _ request: Regen_Ecocredit_V1alpha2_MsgSend,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgSend, Regen_Ecocredit_V1alpha2_MsgSendResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  /// Retire retires a specified number of credits in the holder's account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Retire.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func retire(
    _ request: Regen_Ecocredit_V1alpha2_MsgRetire,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgRetire, Regen_Ecocredit_V1alpha2_MsgRetireResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.retire.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetireInterceptors() ?? []
    )
  }

  /// Cancel removes a number of credits from the holder's account and also
  /// deducts them from the tradable supply, effectively cancelling their
  /// issuance on Regen Ledger
  ///
  /// - Parameters:
  ///   - request: Request to send to Cancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancel(
    _ request: Regen_Ecocredit_V1alpha2_MsgCancel,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCancel, Regen_Ecocredit_V1alpha2_MsgCancelResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  /// UpdateClassAdmin updates the credit class admin
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateClassAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateClassAdmin(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassAdminInterceptors() ?? []
    )
  }

  /// UpdateClassIssuers updates the credit class issuer list
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateClassIssuers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateClassIssuers(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassIssuers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassIssuersInterceptors() ?? []
    )
  }

  /// UpdateClassMetadata updates the credit class metadata
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateClassMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateClassMetadata(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassMetadataInterceptors() ?? []
    )
  }

  /// Sell creates new sell orders.
  ///
  /// - Parameters:
  ///   - request: Request to send to Sell.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sell(
    _ request: Regen_Ecocredit_V1alpha2_MsgSell,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgSell, Regen_Ecocredit_V1alpha2_MsgSellResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.sell.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellInterceptors() ?? []
    )
  }

  /// UpdateSellOrders updates existing sell orders.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSellOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSellOrders(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateSellOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSellOrdersInterceptors() ?? []
    )
  }

  /// Buy creates credit buy orders.
  ///
  /// - Parameters:
  ///   - request: Request to send to Buy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buy(
    _ request: Regen_Ecocredit_V1alpha2_MsgBuy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgBuy, Regen_Ecocredit_V1alpha2_MsgBuyResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.buy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyInterceptors() ?? []
    )
  }

  /// AllowAskDenom is a governance operation which authorizes a new ask denom to be used in sell orders
  ///
  /// - Parameters:
  ///   - request: Request to send to AllowAskDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allowAskDenom(
    _ request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.allowAskDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowAskDenomInterceptors() ?? []
    )
  }

  /// CreateBasket creates a bank denom which wraps credits.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBasket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBasket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBasket, Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBasketInterceptors() ?? []
    )
  }

  /// AddToBasket adds credits to a basket in return for basket tokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddToBasket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addToBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgAddToBasket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgAddToBasket, Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.addToBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToBasketInterceptors() ?? []
    )
  }

  /// TakeFromBasket takes credits from a basket without regard for which
  /// credits they are. The credits will be auto-retired if disable_auto_retire
  /// is false. Credits will be chosen randomly using the previous block hash
  /// as a consensus source of randomness.
  /// More concretely, the implementation is as follows:
  /// - take the previous block hash and convert it into an uint64,
  /// - given the total number of different credits within the basket `n`, the
  ///   first credits that will get picked correspond to: hash modulo n (in
  ///   terms of order),
  /// - then if we need to take more credits, we get some from the next one and
  ///   so on.
  ///
  /// - Parameters:
  ///   - request: Request to send to TakeFromBasket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func takeFromBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.takeFromBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTakeFromBasketInterceptors() ?? []
    )
  }

  /// PickFromBasket picks specific credits from a basket. If allow_picking is
  /// set to false, then only an address which deposited credits in the basket
  /// can pick those credits. All other addresses will be blocked from picking
  /// those credits. The credits will be auto-retired if disable_auto_retire is
  /// false unless the credits were previously put into the basket by the
  /// address picking them from the basket, in which case they will remain
  /// tradable. This functionality allows the owner of a credit to have more
  /// control over the credits they are putting in baskets then ordinary users
  /// to deal with the scenario where basket tokens end up being worth
  /// significantly less than the credits on their own.
  ///
  /// - Parameters:
  ///   - request: Request to send to PickFromBasket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pickFromBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Ecocredit_V1alpha2_MsgPickFromBasket, Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse> {
    return self.makeUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.pickFromBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePickFromBasketInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Regen_Ecocredit_V1alpha2_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Regen_Ecocredit_V1alpha2_MsgNIOClient")
internal final class Regen_Ecocredit_V1alpha2_MsgClient: Regen_Ecocredit_V1alpha2_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the regen.ecocredit.v1alpha2.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Regen_Ecocredit_V1alpha2_MsgNIOClient: Regen_Ecocredit_V1alpha2_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the regen.ecocredit.v1alpha2.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg is the regen.ecocredit.v1alpha1 Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Regen_Ecocredit_V1alpha2_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateClassCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateClass,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateClass, Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>

  func makeCreateProjectCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateProject,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateProject, Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>

  func makeCreateBatchCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBatch,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBatch, Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>

  func makeSendCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgSend,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgSend, Regen_Ecocredit_V1alpha2_MsgSendResponse>

  func makeRetireCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgRetire,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgRetire, Regen_Ecocredit_V1alpha2_MsgRetireResponse>

  func makeCancelCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCancel,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCancel, Regen_Ecocredit_V1alpha2_MsgCancelResponse>

  func makeUpdateClassAdminCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>

  func makeUpdateClassIssuersCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>

  func makeUpdateClassMetadataCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>

  func makeSellCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgSell,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgSell, Regen_Ecocredit_V1alpha2_MsgSellResponse>

  func makeUpdateSellOrdersCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>

  func makeBuyCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgBuy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgBuy, Regen_Ecocredit_V1alpha2_MsgBuyResponse>

  func makeAllowAskDenomCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>

  func makeCreateBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBasket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBasket, Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>

  func makeAddToBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgAddToBasket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgAddToBasket, Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>

  func makeTakeFromBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>

  func makePickFromBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgPickFromBasket, Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Ecocredit_V1alpha2_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Regen_Ecocredit_V1alpha2_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateClassCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateClass,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateClass, Regen_Ecocredit_V1alpha2_MsgCreateClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateClassInterceptors() ?? []
    )
  }

  internal func makeCreateProjectCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateProject,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateProject, Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createProject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? []
    )
  }

  internal func makeCreateBatchCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBatch,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBatch, Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBatchInterceptors() ?? []
    )
  }

  internal func makeSendCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgSend,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgSend, Regen_Ecocredit_V1alpha2_MsgSendResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  internal func makeRetireCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgRetire,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgRetire, Regen_Ecocredit_V1alpha2_MsgRetireResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.retire.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetireInterceptors() ?? []
    )
  }

  internal func makeCancelCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCancel,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCancel, Regen_Ecocredit_V1alpha2_MsgCancelResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  internal func makeUpdateClassAdminCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassAdminInterceptors() ?? []
    )
  }

  internal func makeUpdateClassIssuersCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassIssuers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassIssuersInterceptors() ?? []
    )
  }

  internal func makeUpdateClassMetadataCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassMetadataInterceptors() ?? []
    )
  }

  internal func makeSellCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgSell,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgSell, Regen_Ecocredit_V1alpha2_MsgSellResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.sell.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellInterceptors() ?? []
    )
  }

  internal func makeUpdateSellOrdersCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateSellOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSellOrdersInterceptors() ?? []
    )
  }

  internal func makeBuyCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgBuy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgBuy, Regen_Ecocredit_V1alpha2_MsgBuyResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.buy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyInterceptors() ?? []
    )
  }

  internal func makeAllowAskDenomCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.allowAskDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowAskDenomInterceptors() ?? []
    )
  }

  internal func makeCreateBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBasket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgCreateBasket, Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBasketInterceptors() ?? []
    )
  }

  internal func makeAddToBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgAddToBasket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgAddToBasket, Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.addToBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToBasketInterceptors() ?? []
    )
  }

  internal func makeTakeFromBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.takeFromBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTakeFromBasketInterceptors() ?? []
    )
  }

  internal func makePickFromBasketCall(
    _ request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Regen_Ecocredit_V1alpha2_MsgPickFromBasket, Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse> {
    return self.makeAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.pickFromBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePickFromBasketInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Ecocredit_V1alpha2_MsgAsyncClientProtocol {
  internal func createClass(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateClass,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createClass.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateClassInterceptors() ?? []
    )
  }

  internal func createProject(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateProject,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createProject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? []
    )
  }

  internal func createBatch(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBatch,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBatchInterceptors() ?? []
    )
  }

  internal func send(
    _ request: Regen_Ecocredit_V1alpha2_MsgSend,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgSendResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  internal func retire(
    _ request: Regen_Ecocredit_V1alpha2_MsgRetire,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgRetireResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.retire.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetireInterceptors() ?? []
    )
  }

  internal func cancel(
    _ request: Regen_Ecocredit_V1alpha2_MsgCancel,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCancelResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }

  internal func updateClassAdmin(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassAdminInterceptors() ?? []
    )
  }

  internal func updateClassIssuers(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassIssuers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassIssuersInterceptors() ?? []
    )
  }

  internal func updateClassMetadata(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateClassMetadataInterceptors() ?? []
    )
  }

  internal func sell(
    _ request: Regen_Ecocredit_V1alpha2_MsgSell,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgSellResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.sell.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellInterceptors() ?? []
    )
  }

  internal func updateSellOrders(
    _ request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateSellOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSellOrdersInterceptors() ?? []
    )
  }

  internal func buy(
    _ request: Regen_Ecocredit_V1alpha2_MsgBuy,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgBuyResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.buy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyInterceptors() ?? []
    )
  }

  internal func allowAskDenom(
    _ request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.allowAskDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowAskDenomInterceptors() ?? []
    )
  }

  internal func createBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgCreateBasket,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBasketInterceptors() ?? []
    )
  }

  internal func addToBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgAddToBasket,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.addToBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToBasketInterceptors() ?? []
    )
  }

  internal func takeFromBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.takeFromBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTakeFromBasketInterceptors() ?? []
    )
  }

  internal func pickFromBasket(
    _ request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket,
    callOptions: CallOptions? = nil
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse {
    return try await self.performAsyncUnaryCall(
      path: Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.pickFromBasket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePickFromBasketInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Regen_Ecocredit_V1alpha2_MsgAsyncClient: Regen_Ecocredit_V1alpha2_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Regen_Ecocredit_V1alpha2_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createClass'.
  func makeCreateClassInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateClass, Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>]

  /// - Returns: Interceptors to use when invoking 'createProject'.
  func makeCreateProjectInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateProject, Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>]

  /// - Returns: Interceptors to use when invoking 'createBatch'.
  func makeCreateBatchInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateBatch, Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'send'.
  func makeSendInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgSend, Regen_Ecocredit_V1alpha2_MsgSendResponse>]

  /// - Returns: Interceptors to use when invoking 'retire'.
  func makeRetireInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgRetire, Regen_Ecocredit_V1alpha2_MsgRetireResponse>]

  /// - Returns: Interceptors to use when invoking 'cancel'.
  func makeCancelInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgCancel, Regen_Ecocredit_V1alpha2_MsgCancelResponse>]

  /// - Returns: Interceptors to use when invoking 'updateClassAdmin'.
  func makeUpdateClassAdminInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateClassIssuers'.
  func makeUpdateClassIssuersInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>]

  /// - Returns: Interceptors to use when invoking 'updateClassMetadata'.
  func makeUpdateClassMetadataInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'sell'.
  func makeSellInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgSell, Regen_Ecocredit_V1alpha2_MsgSellResponse>]

  /// - Returns: Interceptors to use when invoking 'updateSellOrders'.
  func makeUpdateSellOrdersInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'buy'.
  func makeBuyInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgBuy, Regen_Ecocredit_V1alpha2_MsgBuyResponse>]

  /// - Returns: Interceptors to use when invoking 'allowAskDenom'.
  func makeAllowAskDenomInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'createBasket'.
  func makeCreateBasketInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateBasket, Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>]

  /// - Returns: Interceptors to use when invoking 'addToBasket'.
  func makeAddToBasketInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgAddToBasket, Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>]

  /// - Returns: Interceptors to use when invoking 'takeFromBasket'.
  func makeTakeFromBasketInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>]

  /// - Returns: Interceptors to use when invoking 'pickFromBasket'.
  func makePickFromBasketInterceptors() -> [ClientInterceptor<Regen_Ecocredit_V1alpha2_MsgPickFromBasket, Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>]
}

internal enum Regen_Ecocredit_V1alpha2_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "regen.ecocredit.v1alpha2.Msg",
    methods: [
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createClass,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createProject,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBatch,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.send,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.retire,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.cancel,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassAdmin,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassIssuers,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateClassMetadata,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.sell,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.updateSellOrders,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.buy,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.allowAskDenom,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.createBasket,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.addToBasket,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.takeFromBasket,
      Regen_Ecocredit_V1alpha2_MsgClientMetadata.Methods.pickFromBasket,
    ]
  )

  internal enum Methods {
    internal static let createClass = GRPCMethodDescriptor(
      name: "CreateClass",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateClass",
      type: GRPCCallType.unary
    )

    internal static let createProject = GRPCMethodDescriptor(
      name: "CreateProject",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateProject",
      type: GRPCCallType.unary
    )

    internal static let createBatch = GRPCMethodDescriptor(
      name: "CreateBatch",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateBatch",
      type: GRPCCallType.unary
    )

    internal static let send = GRPCMethodDescriptor(
      name: "Send",
      path: "/regen.ecocredit.v1alpha2.Msg/Send",
      type: GRPCCallType.unary
    )

    internal static let retire = GRPCMethodDescriptor(
      name: "Retire",
      path: "/regen.ecocredit.v1alpha2.Msg/Retire",
      type: GRPCCallType.unary
    )

    internal static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/regen.ecocredit.v1alpha2.Msg/Cancel",
      type: GRPCCallType.unary
    )

    internal static let updateClassAdmin = GRPCMethodDescriptor(
      name: "UpdateClassAdmin",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateClassAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateClassIssuers = GRPCMethodDescriptor(
      name: "UpdateClassIssuers",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateClassIssuers",
      type: GRPCCallType.unary
    )

    internal static let updateClassMetadata = GRPCMethodDescriptor(
      name: "UpdateClassMetadata",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateClassMetadata",
      type: GRPCCallType.unary
    )

    internal static let sell = GRPCMethodDescriptor(
      name: "Sell",
      path: "/regen.ecocredit.v1alpha2.Msg/Sell",
      type: GRPCCallType.unary
    )

    internal static let updateSellOrders = GRPCMethodDescriptor(
      name: "UpdateSellOrders",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateSellOrders",
      type: GRPCCallType.unary
    )

    internal static let buy = GRPCMethodDescriptor(
      name: "Buy",
      path: "/regen.ecocredit.v1alpha2.Msg/Buy",
      type: GRPCCallType.unary
    )

    internal static let allowAskDenom = GRPCMethodDescriptor(
      name: "AllowAskDenom",
      path: "/regen.ecocredit.v1alpha2.Msg/AllowAskDenom",
      type: GRPCCallType.unary
    )

    internal static let createBasket = GRPCMethodDescriptor(
      name: "CreateBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateBasket",
      type: GRPCCallType.unary
    )

    internal static let addToBasket = GRPCMethodDescriptor(
      name: "AddToBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/AddToBasket",
      type: GRPCCallType.unary
    )

    internal static let takeFromBasket = GRPCMethodDescriptor(
      name: "TakeFromBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/TakeFromBasket",
      type: GRPCCallType.unary
    )

    internal static let pickFromBasket = GRPCMethodDescriptor(
      name: "PickFromBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/PickFromBasket",
      type: GRPCCallType.unary
    )
  }
}

/// Msg is the regen.ecocredit.v1alpha1 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Regen_Ecocredit_V1alpha2_MsgProvider: CallHandlerProvider {
  var interceptors: Regen_Ecocredit_V1alpha2_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateClass creates a new credit class with an approved list of issuers and
  /// optional metadata.
  func createClass(request: Regen_Ecocredit_V1alpha2_MsgCreateClass, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>

  /// CreateProject creates a new project within a credit class.
  func createProject(request: Regen_Ecocredit_V1alpha2_MsgCreateProject, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>

  /// CreateBatch creates a new batch of credits for an existing project.
  /// This will create a new batch denom with a fixed supply. Issued credits can
  /// be distributed to recipients in either tradable or retired form.
  func createBatch(request: Regen_Ecocredit_V1alpha2_MsgCreateBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>

  /// Send sends tradable credits from one account to another account. Sent
  /// credits can either be tradable or retired on receipt.
  func send(request: Regen_Ecocredit_V1alpha2_MsgSend, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgSendResponse>

  /// Retire retires a specified number of credits in the holder's account.
  func retire(request: Regen_Ecocredit_V1alpha2_MsgRetire, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgRetireResponse>

  /// Cancel removes a number of credits from the holder's account and also
  /// deducts them from the tradable supply, effectively cancelling their
  /// issuance on Regen Ledger
  func cancel(request: Regen_Ecocredit_V1alpha2_MsgCancel, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgCancelResponse>

  /// UpdateClassAdmin updates the credit class admin
  func updateClassAdmin(request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>

  /// UpdateClassIssuers updates the credit class issuer list
  func updateClassIssuers(request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>

  /// UpdateClassMetadata updates the credit class metadata
  func updateClassMetadata(request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>

  /// Sell creates new sell orders.
  func sell(request: Regen_Ecocredit_V1alpha2_MsgSell, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgSellResponse>

  /// UpdateSellOrders updates existing sell orders.
  func updateSellOrders(request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>

  /// Buy creates credit buy orders.
  func buy(request: Regen_Ecocredit_V1alpha2_MsgBuy, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgBuyResponse>

  /// AllowAskDenom is a governance operation which authorizes a new ask denom to be used in sell orders
  func allowAskDenom(request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>

  /// CreateBasket creates a bank denom which wraps credits.
  func createBasket(request: Regen_Ecocredit_V1alpha2_MsgCreateBasket, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>

  /// AddToBasket adds credits to a basket in return for basket tokens.
  func addToBasket(request: Regen_Ecocredit_V1alpha2_MsgAddToBasket, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>

  /// TakeFromBasket takes credits from a basket without regard for which
  /// credits they are. The credits will be auto-retired if disable_auto_retire
  /// is false. Credits will be chosen randomly using the previous block hash
  /// as a consensus source of randomness.
  /// More concretely, the implementation is as follows:
  /// - take the previous block hash and convert it into an uint64,
  /// - given the total number of different credits within the basket `n`, the
  ///   first credits that will get picked correspond to: hash modulo n (in
  ///   terms of order),
  /// - then if we need to take more credits, we get some from the next one and
  ///   so on.
  func takeFromBasket(request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>

  /// PickFromBasket picks specific credits from a basket. If allow_picking is
  /// set to false, then only an address which deposited credits in the basket
  /// can pick those credits. All other addresses will be blocked from picking
  /// those credits. The credits will be auto-retired if disable_auto_retire is
  /// false unless the credits were previously put into the basket by the
  /// address picking them from the basket, in which case they will remain
  /// tradable. This functionality allows the owner of a credit to have more
  /// control over the credits they are putting in baskets then ordinary users
  /// to deal with the scenario where basket tokens end up being worth
  /// significantly less than the credits on their own.
  func pickFromBasket(request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>
}

extension Regen_Ecocredit_V1alpha2_MsgProvider {
  internal var serviceName: Substring {
    return Regen_Ecocredit_V1alpha2_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateClass":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateClass>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>(),
        interceptors: self.interceptors?.makeCreateClassInterceptors() ?? [],
        userFunction: self.createClass(request:context:)
      )

    case "CreateProject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateProject>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>(),
        interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? [],
        userFunction: self.createProject(request:context:)
      )

    case "CreateBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateBatch>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>(),
        interceptors: self.interceptors?.makeCreateBatchInterceptors() ?? [],
        userFunction: self.createBatch(request:context:)
      )

    case "Send":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgSend>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgSendResponse>(),
        interceptors: self.interceptors?.makeSendInterceptors() ?? [],
        userFunction: self.send(request:context:)
      )

    case "Retire":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgRetire>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgRetireResponse>(),
        interceptors: self.interceptors?.makeRetireInterceptors() ?? [],
        userFunction: self.retire(request:context:)
      )

    case "Cancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCancel>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        userFunction: self.cancel(request:context:)
      )

    case "UpdateClassAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateClassAdminInterceptors() ?? [],
        userFunction: self.updateClassAdmin(request:context:)
      )

    case "UpdateClassIssuers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>(),
        interceptors: self.interceptors?.makeUpdateClassIssuersInterceptors() ?? [],
        userFunction: self.updateClassIssuers(request:context:)
      )

    case "UpdateClassMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateClassMetadataInterceptors() ?? [],
        userFunction: self.updateClassMetadata(request:context:)
      )

    case "Sell":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgSell>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgSellResponse>(),
        interceptors: self.interceptors?.makeSellInterceptors() ?? [],
        userFunction: self.sell(request:context:)
      )

    case "UpdateSellOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>(),
        interceptors: self.interceptors?.makeUpdateSellOrdersInterceptors() ?? [],
        userFunction: self.updateSellOrders(request:context:)
      )

    case "Buy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgBuy>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgBuyResponse>(),
        interceptors: self.interceptors?.makeBuyInterceptors() ?? [],
        userFunction: self.buy(request:context:)
      )

    case "AllowAskDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>(),
        interceptors: self.interceptors?.makeAllowAskDenomInterceptors() ?? [],
        userFunction: self.allowAskDenom(request:context:)
      )

    case "CreateBasket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>(),
        interceptors: self.interceptors?.makeCreateBasketInterceptors() ?? [],
        userFunction: self.createBasket(request:context:)
      )

    case "AddToBasket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgAddToBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>(),
        interceptors: self.interceptors?.makeAddToBasketInterceptors() ?? [],
        userFunction: self.addToBasket(request:context:)
      )

    case "TakeFromBasket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>(),
        interceptors: self.interceptors?.makeTakeFromBasketInterceptors() ?? [],
        userFunction: self.takeFromBasket(request:context:)
      )

    case "PickFromBasket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgPickFromBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>(),
        interceptors: self.interceptors?.makePickFromBasketInterceptors() ?? [],
        userFunction: self.pickFromBasket(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg is the regen.ecocredit.v1alpha1 Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Regen_Ecocredit_V1alpha2_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Regen_Ecocredit_V1alpha2_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateClass creates a new credit class with an approved list of issuers and
  /// optional metadata.
  @Sendable func createClass(
    request: Regen_Ecocredit_V1alpha2_MsgCreateClass,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateClassResponse

  /// CreateProject creates a new project within a credit class.
  @Sendable func createProject(
    request: Regen_Ecocredit_V1alpha2_MsgCreateProject,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse

  /// CreateBatch creates a new batch of credits for an existing project.
  /// This will create a new batch denom with a fixed supply. Issued credits can
  /// be distributed to recipients in either tradable or retired form.
  @Sendable func createBatch(
    request: Regen_Ecocredit_V1alpha2_MsgCreateBatch,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse

  /// Send sends tradable credits from one account to another account. Sent
  /// credits can either be tradable or retired on receipt.
  @Sendable func send(
    request: Regen_Ecocredit_V1alpha2_MsgSend,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgSendResponse

  /// Retire retires a specified number of credits in the holder's account.
  @Sendable func retire(
    request: Regen_Ecocredit_V1alpha2_MsgRetire,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgRetireResponse

  /// Cancel removes a number of credits from the holder's account and also
  /// deducts them from the tradable supply, effectively cancelling their
  /// issuance on Regen Ledger
  @Sendable func cancel(
    request: Regen_Ecocredit_V1alpha2_MsgCancel,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCancelResponse

  /// UpdateClassAdmin updates the credit class admin
  @Sendable func updateClassAdmin(
    request: Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse

  /// UpdateClassIssuers updates the credit class issuer list
  @Sendable func updateClassIssuers(
    request: Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse

  /// UpdateClassMetadata updates the credit class metadata
  @Sendable func updateClassMetadata(
    request: Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse

  /// Sell creates new sell orders.
  @Sendable func sell(
    request: Regen_Ecocredit_V1alpha2_MsgSell,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgSellResponse

  /// UpdateSellOrders updates existing sell orders.
  @Sendable func updateSellOrders(
    request: Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse

  /// Buy creates credit buy orders.
  @Sendable func buy(
    request: Regen_Ecocredit_V1alpha2_MsgBuy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgBuyResponse

  /// AllowAskDenom is a governance operation which authorizes a new ask denom to be used in sell orders
  @Sendable func allowAskDenom(
    request: Regen_Ecocredit_V1alpha2_MsgAllowAskDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse

  /// CreateBasket creates a bank denom which wraps credits.
  @Sendable func createBasket(
    request: Regen_Ecocredit_V1alpha2_MsgCreateBasket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse

  /// AddToBasket adds credits to a basket in return for basket tokens.
  @Sendable func addToBasket(
    request: Regen_Ecocredit_V1alpha2_MsgAddToBasket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse

  /// TakeFromBasket takes credits from a basket without regard for which
  /// credits they are. The credits will be auto-retired if disable_auto_retire
  /// is false. Credits will be chosen randomly using the previous block hash
  /// as a consensus source of randomness.
  /// More concretely, the implementation is as follows:
  /// - take the previous block hash and convert it into an uint64,
  /// - given the total number of different credits within the basket `n`, the
  ///   first credits that will get picked correspond to: hash modulo n (in
  ///   terms of order),
  /// - then if we need to take more credits, we get some from the next one and
  ///   so on.
  @Sendable func takeFromBasket(
    request: Regen_Ecocredit_V1alpha2_MsgTakeFromBasket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse

  /// PickFromBasket picks specific credits from a basket. If allow_picking is
  /// set to false, then only an address which deposited credits in the basket
  /// can pick those credits. All other addresses will be blocked from picking
  /// those credits. The credits will be auto-retired if disable_auto_retire is
  /// false unless the credits were previously put into the basket by the
  /// address picking them from the basket, in which case they will remain
  /// tradable. This functionality allows the owner of a credit to have more
  /// control over the credits they are putting in baskets then ordinary users
  /// to deal with the scenario where basket tokens end up being worth
  /// significantly less than the credits on their own.
  @Sendable func pickFromBasket(
    request: Regen_Ecocredit_V1alpha2_MsgPickFromBasket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Regen_Ecocredit_V1alpha2_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Regen_Ecocredit_V1alpha2_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Regen_Ecocredit_V1alpha2_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Regen_Ecocredit_V1alpha2_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateClass":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateClass>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>(),
        interceptors: self.interceptors?.makeCreateClassInterceptors() ?? [],
        wrapping: self.createClass(request:context:)
      )

    case "CreateProject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateProject>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>(),
        interceptors: self.interceptors?.makeCreateProjectInterceptors() ?? [],
        wrapping: self.createProject(request:context:)
      )

    case "CreateBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateBatch>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>(),
        interceptors: self.interceptors?.makeCreateBatchInterceptors() ?? [],
        wrapping: self.createBatch(request:context:)
      )

    case "Send":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgSend>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgSendResponse>(),
        interceptors: self.interceptors?.makeSendInterceptors() ?? [],
        wrapping: self.send(request:context:)
      )

    case "Retire":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgRetire>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgRetireResponse>(),
        interceptors: self.interceptors?.makeRetireInterceptors() ?? [],
        wrapping: self.retire(request:context:)
      )

    case "Cancel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCancel>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        wrapping: self.cancel(request:context:)
      )

    case "UpdateClassAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateClassAdminInterceptors() ?? [],
        wrapping: self.updateClassAdmin(request:context:)
      )

    case "UpdateClassIssuers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>(),
        interceptors: self.interceptors?.makeUpdateClassIssuersInterceptors() ?? [],
        wrapping: self.updateClassIssuers(request:context:)
      )

    case "UpdateClassMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateClassMetadataInterceptors() ?? [],
        wrapping: self.updateClassMetadata(request:context:)
      )

    case "Sell":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgSell>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgSellResponse>(),
        interceptors: self.interceptors?.makeSellInterceptors() ?? [],
        wrapping: self.sell(request:context:)
      )

    case "UpdateSellOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>(),
        interceptors: self.interceptors?.makeUpdateSellOrdersInterceptors() ?? [],
        wrapping: self.updateSellOrders(request:context:)
      )

    case "Buy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgBuy>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgBuyResponse>(),
        interceptors: self.interceptors?.makeBuyInterceptors() ?? [],
        wrapping: self.buy(request:context:)
      )

    case "AllowAskDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>(),
        interceptors: self.interceptors?.makeAllowAskDenomInterceptors() ?? [],
        wrapping: self.allowAskDenom(request:context:)
      )

    case "CreateBasket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgCreateBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>(),
        interceptors: self.interceptors?.makeCreateBasketInterceptors() ?? [],
        wrapping: self.createBasket(request:context:)
      )

    case "AddToBasket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgAddToBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>(),
        interceptors: self.interceptors?.makeAddToBasketInterceptors() ?? [],
        wrapping: self.addToBasket(request:context:)
      )

    case "TakeFromBasket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>(),
        interceptors: self.interceptors?.makeTakeFromBasketInterceptors() ?? [],
        wrapping: self.takeFromBasket(request:context:)
      )

    case "PickFromBasket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Ecocredit_V1alpha2_MsgPickFromBasket>(),
        responseSerializer: ProtobufSerializer<Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>(),
        interceptors: self.interceptors?.makePickFromBasketInterceptors() ?? [],
        wrapping: self.pickFromBasket(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Regen_Ecocredit_V1alpha2_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createClass'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateClassInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateClass, Regen_Ecocredit_V1alpha2_MsgCreateClassResponse>]

  /// - Returns: Interceptors to use when handling 'createProject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateProjectInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateProject, Regen_Ecocredit_V1alpha2_MsgCreateProjectResponse>]

  /// - Returns: Interceptors to use when handling 'createBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBatchInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateBatch, Regen_Ecocredit_V1alpha2_MsgCreateBatchResponse>]

  /// - Returns: Interceptors to use when handling 'send'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgSend, Regen_Ecocredit_V1alpha2_MsgSendResponse>]

  /// - Returns: Interceptors to use when handling 'retire'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetireInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgRetire, Regen_Ecocredit_V1alpha2_MsgRetireResponse>]

  /// - Returns: Interceptors to use when handling 'cancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgCancel, Regen_Ecocredit_V1alpha2_MsgCancelResponse>]

  /// - Returns: Interceptors to use when handling 'updateClassAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateClassAdminInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateClassAdmin, Regen_Ecocredit_V1alpha2_MsgUpdateClassAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateClassIssuers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateClassIssuersInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuers, Regen_Ecocredit_V1alpha2_MsgUpdateClassIssuersResponse>]

  /// - Returns: Interceptors to use when handling 'updateClassMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateClassMetadataInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadata, Regen_Ecocredit_V1alpha2_MsgUpdateClassMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'sell'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgSell, Regen_Ecocredit_V1alpha2_MsgSellResponse>]

  /// - Returns: Interceptors to use when handling 'updateSellOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateSellOrdersInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgUpdateSellOrders, Regen_Ecocredit_V1alpha2_MsgUpdateSellOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'buy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgBuy, Regen_Ecocredit_V1alpha2_MsgBuyResponse>]

  /// - Returns: Interceptors to use when handling 'allowAskDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllowAskDenomInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgAllowAskDenom, Regen_Ecocredit_V1alpha2_MsgAllowAskDenomResponse>]

  /// - Returns: Interceptors to use when handling 'createBasket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBasketInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgCreateBasket, Regen_Ecocredit_V1alpha2_MsgCreateBasketResponse>]

  /// - Returns: Interceptors to use when handling 'addToBasket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddToBasketInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgAddToBasket, Regen_Ecocredit_V1alpha2_MsgAddToBasketResponse>]

  /// - Returns: Interceptors to use when handling 'takeFromBasket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTakeFromBasketInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgTakeFromBasket, Regen_Ecocredit_V1alpha2_MsgTakeFromBasketResponse>]

  /// - Returns: Interceptors to use when handling 'pickFromBasket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePickFromBasketInterceptors() -> [ServerInterceptor<Regen_Ecocredit_V1alpha2_MsgPickFromBasket, Regen_Ecocredit_V1alpha2_MsgPickFromBasketResponse>]
}

internal enum Regen_Ecocredit_V1alpha2_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "regen.ecocredit.v1alpha2.Msg",
    methods: [
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.createClass,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.createProject,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.createBatch,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.send,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.retire,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.cancel,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.updateClassAdmin,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.updateClassIssuers,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.updateClassMetadata,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.sell,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.updateSellOrders,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.buy,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.allowAskDenom,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.createBasket,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.addToBasket,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.takeFromBasket,
      Regen_Ecocredit_V1alpha2_MsgServerMetadata.Methods.pickFromBasket,
    ]
  )

  internal enum Methods {
    internal static let createClass = GRPCMethodDescriptor(
      name: "CreateClass",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateClass",
      type: GRPCCallType.unary
    )

    internal static let createProject = GRPCMethodDescriptor(
      name: "CreateProject",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateProject",
      type: GRPCCallType.unary
    )

    internal static let createBatch = GRPCMethodDescriptor(
      name: "CreateBatch",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateBatch",
      type: GRPCCallType.unary
    )

    internal static let send = GRPCMethodDescriptor(
      name: "Send",
      path: "/regen.ecocredit.v1alpha2.Msg/Send",
      type: GRPCCallType.unary
    )

    internal static let retire = GRPCMethodDescriptor(
      name: "Retire",
      path: "/regen.ecocredit.v1alpha2.Msg/Retire",
      type: GRPCCallType.unary
    )

    internal static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/regen.ecocredit.v1alpha2.Msg/Cancel",
      type: GRPCCallType.unary
    )

    internal static let updateClassAdmin = GRPCMethodDescriptor(
      name: "UpdateClassAdmin",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateClassAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateClassIssuers = GRPCMethodDescriptor(
      name: "UpdateClassIssuers",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateClassIssuers",
      type: GRPCCallType.unary
    )

    internal static let updateClassMetadata = GRPCMethodDescriptor(
      name: "UpdateClassMetadata",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateClassMetadata",
      type: GRPCCallType.unary
    )

    internal static let sell = GRPCMethodDescriptor(
      name: "Sell",
      path: "/regen.ecocredit.v1alpha2.Msg/Sell",
      type: GRPCCallType.unary
    )

    internal static let updateSellOrders = GRPCMethodDescriptor(
      name: "UpdateSellOrders",
      path: "/regen.ecocredit.v1alpha2.Msg/UpdateSellOrders",
      type: GRPCCallType.unary
    )

    internal static let buy = GRPCMethodDescriptor(
      name: "Buy",
      path: "/regen.ecocredit.v1alpha2.Msg/Buy",
      type: GRPCCallType.unary
    )

    internal static let allowAskDenom = GRPCMethodDescriptor(
      name: "AllowAskDenom",
      path: "/regen.ecocredit.v1alpha2.Msg/AllowAskDenom",
      type: GRPCCallType.unary
    )

    internal static let createBasket = GRPCMethodDescriptor(
      name: "CreateBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/CreateBasket",
      type: GRPCCallType.unary
    )

    internal static let addToBasket = GRPCMethodDescriptor(
      name: "AddToBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/AddToBasket",
      type: GRPCCallType.unary
    )

    internal static let takeFromBasket = GRPCMethodDescriptor(
      name: "TakeFromBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/TakeFromBasket",
      type: GRPCCallType.unary
    )

    internal static let pickFromBasket = GRPCMethodDescriptor(
      name: "PickFromBasket",
      path: "/regen.ecocredit.v1alpha2.Msg/PickFromBasket",
      type: GRPCCallType.unary
    )
  }
}
