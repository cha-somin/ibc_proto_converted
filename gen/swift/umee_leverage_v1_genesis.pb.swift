// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: umee/leverage/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the x/leverage module's genesis state.
struct Umee_Leverage_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Umee_Leverage_V1_Params {
    get {return _params ?? Umee_Leverage_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var registry: [Umee_Leverage_V1_Token] = []

  var adjustedBorrows: [Umee_Leverage_V1_AdjustedBorrow] = []

  var collateral: [Umee_Leverage_V1_Collateral] = []

  var reserves: [Cosmos_Base_V1beta1_Coin] = []

  var lastInterestTime: Int64 = 0

  var badDebts: [Umee_Leverage_V1_BadDebt] = []

  var interestScalars: [Umee_Leverage_V1_InterestScalar] = []

  var utokenSupply: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Umee_Leverage_V1_Params? = nil
}

/// AdjustedBorrow is a borrow struct used in the leverage module's genesis
/// state.
struct Umee_Leverage_V1_AdjustedBorrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var amount: Cosmos_Base_V1beta1_DecCoin {
    get {return _amount ?? Cosmos_Base_V1beta1_DecCoin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_DecCoin? = nil
}

/// Collateral is a collateral struct used in the leverage module's genesis
/// state.
struct Umee_Leverage_V1_Collateral {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

/// BadDebt is a bad debt instance used in the leverage module's genesis state.
struct Umee_Leverage_V1_BadDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var denom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// InterestScalar is an interest scalar used in the leverage module's genesis
/// state.
struct Umee_Leverage_V1_InterestScalar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var scalar: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Umee_Leverage_V1_GenesisState: @unchecked Sendable {}
extension Umee_Leverage_V1_AdjustedBorrow: @unchecked Sendable {}
extension Umee_Leverage_V1_Collateral: @unchecked Sendable {}
extension Umee_Leverage_V1_BadDebt: @unchecked Sendable {}
extension Umee_Leverage_V1_InterestScalar: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "umee.leverage.v1"

extension Umee_Leverage_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "registry"),
    3: .standard(proto: "adjusted_borrows"),
    4: .same(proto: "collateral"),
    5: .same(proto: "reserves"),
    6: .standard(proto: "last_interest_time"),
    7: .standard(proto: "bad_debts"),
    8: .standard(proto: "interest_scalars"),
    9: .standard(proto: "utoken_supply"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.registry) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.adjustedBorrows) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.collateral) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.reserves) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastInterestTime) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.badDebts) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.interestScalars) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.utokenSupply) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.registry.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.registry, fieldNumber: 2)
    }
    if !self.adjustedBorrows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.adjustedBorrows, fieldNumber: 3)
    }
    if !self.collateral.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collateral, fieldNumber: 4)
    }
    if !self.reserves.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reserves, fieldNumber: 5)
    }
    if self.lastInterestTime != 0 {
      try visitor.visitSingularInt64Field(value: self.lastInterestTime, fieldNumber: 6)
    }
    if !self.badDebts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.badDebts, fieldNumber: 7)
    }
    if !self.interestScalars.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.interestScalars, fieldNumber: 8)
    }
    if !self.utokenSupply.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.utokenSupply, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_GenesisState, rhs: Umee_Leverage_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.registry != rhs.registry {return false}
    if lhs.adjustedBorrows != rhs.adjustedBorrows {return false}
    if lhs.collateral != rhs.collateral {return false}
    if lhs.reserves != rhs.reserves {return false}
    if lhs.lastInterestTime != rhs.lastInterestTime {return false}
    if lhs.badDebts != rhs.badDebts {return false}
    if lhs.interestScalars != rhs.interestScalars {return false}
    if lhs.utokenSupply != rhs.utokenSupply {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_AdjustedBorrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdjustedBorrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_AdjustedBorrow, rhs: Umee_Leverage_V1_AdjustedBorrow) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_Collateral: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Collateral"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_Collateral, rhs: Umee_Leverage_V1_Collateral) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_BadDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BadDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_BadDebt, rhs: Umee_Leverage_V1_BadDebt) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_InterestScalar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InterestScalar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "scalar"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.scalar) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.scalar.isEmpty {
      try visitor.visitSingularStringField(value: self.scalar, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_InterestScalar, rhs: Umee_Leverage_V1_InterestScalar) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.scalar != rhs.scalar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
