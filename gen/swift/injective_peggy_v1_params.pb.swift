// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/peggy/v1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Injective_Peggy_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var peggyID: String {
    get {return _storage._peggyID}
    set {_uniqueStorage()._peggyID = newValue}
  }

  var contractSourceHash: String {
    get {return _storage._contractSourceHash}
    set {_uniqueStorage()._contractSourceHash = newValue}
  }

  var bridgeEthereumAddress: String {
    get {return _storage._bridgeEthereumAddress}
    set {_uniqueStorage()._bridgeEthereumAddress = newValue}
  }

  var bridgeChainID: UInt64 {
    get {return _storage._bridgeChainID}
    set {_uniqueStorage()._bridgeChainID = newValue}
  }

  var signedValsetsWindow: UInt64 {
    get {return _storage._signedValsetsWindow}
    set {_uniqueStorage()._signedValsetsWindow = newValue}
  }

  var signedBatchesWindow: UInt64 {
    get {return _storage._signedBatchesWindow}
    set {_uniqueStorage()._signedBatchesWindow = newValue}
  }

  var signedClaimsWindow: UInt64 {
    get {return _storage._signedClaimsWindow}
    set {_uniqueStorage()._signedClaimsWindow = newValue}
  }

  var targetBatchTimeout: UInt64 {
    get {return _storage._targetBatchTimeout}
    set {_uniqueStorage()._targetBatchTimeout = newValue}
  }

  var averageBlockTime: UInt64 {
    get {return _storage._averageBlockTime}
    set {_uniqueStorage()._averageBlockTime = newValue}
  }

  var averageEthereumBlockTime: UInt64 {
    get {return _storage._averageEthereumBlockTime}
    set {_uniqueStorage()._averageEthereumBlockTime = newValue}
  }

  var slashFractionValset: Data {
    get {return _storage._slashFractionValset}
    set {_uniqueStorage()._slashFractionValset = newValue}
  }

  var slashFractionBatch: Data {
    get {return _storage._slashFractionBatch}
    set {_uniqueStorage()._slashFractionBatch = newValue}
  }

  var slashFractionClaim: Data {
    get {return _storage._slashFractionClaim}
    set {_uniqueStorage()._slashFractionClaim = newValue}
  }

  var slashFractionConflictingClaim: Data {
    get {return _storage._slashFractionConflictingClaim}
    set {_uniqueStorage()._slashFractionConflictingClaim = newValue}
  }

  var unbondSlashingValsetsWindow: UInt64 {
    get {return _storage._unbondSlashingValsetsWindow}
    set {_uniqueStorage()._unbondSlashingValsetsWindow = newValue}
  }

  var slashFractionBadEthSignature: Data {
    get {return _storage._slashFractionBadEthSignature}
    set {_uniqueStorage()._slashFractionBadEthSignature = newValue}
  }

  var cosmosCoinDenom: String {
    get {return _storage._cosmosCoinDenom}
    set {_uniqueStorage()._cosmosCoinDenom = newValue}
  }

  var cosmosCoinErc20Contract: String {
    get {return _storage._cosmosCoinErc20Contract}
    set {_uniqueStorage()._cosmosCoinErc20Contract = newValue}
  }

  var claimSlashingEnabled: Bool {
    get {return _storage._claimSlashingEnabled}
    set {_uniqueStorage()._claimSlashingEnabled = newValue}
  }

  var bridgeContractStartHeight: UInt64 {
    get {return _storage._bridgeContractStartHeight}
    set {_uniqueStorage()._bridgeContractStartHeight = newValue}
  }

  var valsetReward: Cosmos_Base_V1beta1_Coin {
    get {return _storage._valsetReward ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._valsetReward = newValue}
  }
  /// Returns true if `valsetReward` has been explicitly set.
  var hasValsetReward: Bool {return _storage._valsetReward != nil}
  /// Clears the value of `valsetReward`. Subsequent reads from it will return its default value.
  mutating func clearValsetReward() {_uniqueStorage()._valsetReward = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Injective_Peggy_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.peggy.v1"

extension Injective_Peggy_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peggy_id"),
    2: .standard(proto: "contract_source_hash"),
    3: .standard(proto: "bridge_ethereum_address"),
    4: .standard(proto: "bridge_chain_id"),
    5: .standard(proto: "signed_valsets_window"),
    6: .standard(proto: "signed_batches_window"),
    7: .standard(proto: "signed_claims_window"),
    8: .standard(proto: "target_batch_timeout"),
    9: .standard(proto: "average_block_time"),
    10: .standard(proto: "average_ethereum_block_time"),
    11: .standard(proto: "slash_fraction_valset"),
    12: .standard(proto: "slash_fraction_batch"),
    13: .standard(proto: "slash_fraction_claim"),
    14: .standard(proto: "slash_fraction_conflicting_claim"),
    15: .standard(proto: "unbond_slashing_valsets_window"),
    16: .standard(proto: "slash_fraction_bad_eth_signature"),
    17: .standard(proto: "cosmos_coin_denom"),
    18: .standard(proto: "cosmos_coin_erc20_contract"),
    19: .standard(proto: "claim_slashing_enabled"),
    20: .standard(proto: "bridge_contract_start_height"),
    21: .standard(proto: "valset_reward"),
  ]

  fileprivate class _StorageClass {
    var _peggyID: String = String()
    var _contractSourceHash: String = String()
    var _bridgeEthereumAddress: String = String()
    var _bridgeChainID: UInt64 = 0
    var _signedValsetsWindow: UInt64 = 0
    var _signedBatchesWindow: UInt64 = 0
    var _signedClaimsWindow: UInt64 = 0
    var _targetBatchTimeout: UInt64 = 0
    var _averageBlockTime: UInt64 = 0
    var _averageEthereumBlockTime: UInt64 = 0
    var _slashFractionValset: Data = Data()
    var _slashFractionBatch: Data = Data()
    var _slashFractionClaim: Data = Data()
    var _slashFractionConflictingClaim: Data = Data()
    var _unbondSlashingValsetsWindow: UInt64 = 0
    var _slashFractionBadEthSignature: Data = Data()
    var _cosmosCoinDenom: String = String()
    var _cosmosCoinErc20Contract: String = String()
    var _claimSlashingEnabled: Bool = false
    var _bridgeContractStartHeight: UInt64 = 0
    var _valsetReward: Cosmos_Base_V1beta1_Coin? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _peggyID = source._peggyID
      _contractSourceHash = source._contractSourceHash
      _bridgeEthereumAddress = source._bridgeEthereumAddress
      _bridgeChainID = source._bridgeChainID
      _signedValsetsWindow = source._signedValsetsWindow
      _signedBatchesWindow = source._signedBatchesWindow
      _signedClaimsWindow = source._signedClaimsWindow
      _targetBatchTimeout = source._targetBatchTimeout
      _averageBlockTime = source._averageBlockTime
      _averageEthereumBlockTime = source._averageEthereumBlockTime
      _slashFractionValset = source._slashFractionValset
      _slashFractionBatch = source._slashFractionBatch
      _slashFractionClaim = source._slashFractionClaim
      _slashFractionConflictingClaim = source._slashFractionConflictingClaim
      _unbondSlashingValsetsWindow = source._unbondSlashingValsetsWindow
      _slashFractionBadEthSignature = source._slashFractionBadEthSignature
      _cosmosCoinDenom = source._cosmosCoinDenom
      _cosmosCoinErc20Contract = source._cosmosCoinErc20Contract
      _claimSlashingEnabled = source._claimSlashingEnabled
      _bridgeContractStartHeight = source._bridgeContractStartHeight
      _valsetReward = source._valsetReward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._peggyID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._contractSourceHash) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bridgeEthereumAddress) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._bridgeChainID) }()
        case 5: try { try decoder.decodeSingularUInt64Field(value: &_storage._signedValsetsWindow) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._signedBatchesWindow) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._signedClaimsWindow) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._targetBatchTimeout) }()
        case 9: try { try decoder.decodeSingularUInt64Field(value: &_storage._averageBlockTime) }()
        case 10: try { try decoder.decodeSingularUInt64Field(value: &_storage._averageEthereumBlockTime) }()
        case 11: try { try decoder.decodeSingularBytesField(value: &_storage._slashFractionValset) }()
        case 12: try { try decoder.decodeSingularBytesField(value: &_storage._slashFractionBatch) }()
        case 13: try { try decoder.decodeSingularBytesField(value: &_storage._slashFractionClaim) }()
        case 14: try { try decoder.decodeSingularBytesField(value: &_storage._slashFractionConflictingClaim) }()
        case 15: try { try decoder.decodeSingularUInt64Field(value: &_storage._unbondSlashingValsetsWindow) }()
        case 16: try { try decoder.decodeSingularBytesField(value: &_storage._slashFractionBadEthSignature) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._cosmosCoinDenom) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._cosmosCoinErc20Contract) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._claimSlashingEnabled) }()
        case 20: try { try decoder.decodeSingularUInt64Field(value: &_storage._bridgeContractStartHeight) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._valsetReward) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._peggyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._peggyID, fieldNumber: 1)
      }
      if !_storage._contractSourceHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contractSourceHash, fieldNumber: 2)
      }
      if !_storage._bridgeEthereumAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bridgeEthereumAddress, fieldNumber: 3)
      }
      if _storage._bridgeChainID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._bridgeChainID, fieldNumber: 4)
      }
      if _storage._signedValsetsWindow != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._signedValsetsWindow, fieldNumber: 5)
      }
      if _storage._signedBatchesWindow != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._signedBatchesWindow, fieldNumber: 6)
      }
      if _storage._signedClaimsWindow != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._signedClaimsWindow, fieldNumber: 7)
      }
      if _storage._targetBatchTimeout != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._targetBatchTimeout, fieldNumber: 8)
      }
      if _storage._averageBlockTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._averageBlockTime, fieldNumber: 9)
      }
      if _storage._averageEthereumBlockTime != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._averageEthereumBlockTime, fieldNumber: 10)
      }
      if !_storage._slashFractionValset.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionValset, fieldNumber: 11)
      }
      if !_storage._slashFractionBatch.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionBatch, fieldNumber: 12)
      }
      if !_storage._slashFractionClaim.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionClaim, fieldNumber: 13)
      }
      if !_storage._slashFractionConflictingClaim.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionConflictingClaim, fieldNumber: 14)
      }
      if _storage._unbondSlashingValsetsWindow != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._unbondSlashingValsetsWindow, fieldNumber: 15)
      }
      if !_storage._slashFractionBadEthSignature.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionBadEthSignature, fieldNumber: 16)
      }
      if !_storage._cosmosCoinDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cosmosCoinDenom, fieldNumber: 17)
      }
      if !_storage._cosmosCoinErc20Contract.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cosmosCoinErc20Contract, fieldNumber: 18)
      }
      if _storage._claimSlashingEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._claimSlashingEnabled, fieldNumber: 19)
      }
      if _storage._bridgeContractStartHeight != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._bridgeContractStartHeight, fieldNumber: 20)
      }
      try { if let v = _storage._valsetReward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Peggy_V1_Params, rhs: Injective_Peggy_V1_Params) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._peggyID != rhs_storage._peggyID {return false}
        if _storage._contractSourceHash != rhs_storage._contractSourceHash {return false}
        if _storage._bridgeEthereumAddress != rhs_storage._bridgeEthereumAddress {return false}
        if _storage._bridgeChainID != rhs_storage._bridgeChainID {return false}
        if _storage._signedValsetsWindow != rhs_storage._signedValsetsWindow {return false}
        if _storage._signedBatchesWindow != rhs_storage._signedBatchesWindow {return false}
        if _storage._signedClaimsWindow != rhs_storage._signedClaimsWindow {return false}
        if _storage._targetBatchTimeout != rhs_storage._targetBatchTimeout {return false}
        if _storage._averageBlockTime != rhs_storage._averageBlockTime {return false}
        if _storage._averageEthereumBlockTime != rhs_storage._averageEthereumBlockTime {return false}
        if _storage._slashFractionValset != rhs_storage._slashFractionValset {return false}
        if _storage._slashFractionBatch != rhs_storage._slashFractionBatch {return false}
        if _storage._slashFractionClaim != rhs_storage._slashFractionClaim {return false}
        if _storage._slashFractionConflictingClaim != rhs_storage._slashFractionConflictingClaim {return false}
        if _storage._unbondSlashingValsetsWindow != rhs_storage._unbondSlashingValsetsWindow {return false}
        if _storage._slashFractionBadEthSignature != rhs_storage._slashFractionBadEthSignature {return false}
        if _storage._cosmosCoinDenom != rhs_storage._cosmosCoinDenom {return false}
        if _storage._cosmosCoinErc20Contract != rhs_storage._cosmosCoinErc20Contract {return false}
        if _storage._claimSlashingEnabled != rhs_storage._claimSlashingEnabled {return false}
        if _storage._bridgeContractStartHeight != rhs_storage._bridgeContractStartHeight {return false}
        if _storage._valsetReward != rhs_storage._valsetReward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
