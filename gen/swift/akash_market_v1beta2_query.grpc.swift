//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/market/v1beta2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Akash_Market_V1beta2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Market_V1beta2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? { get }

  func orders(
    _ request: Akash_Market_V1beta2_QueryOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta2_QueryOrdersRequest, Akash_Market_V1beta2_QueryOrdersResponse>

  func order(
    _ request: Akash_Market_V1beta2_QueryOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta2_QueryOrderRequest, Akash_Market_V1beta2_QueryOrderResponse>

  func bids(
    _ request: Akash_Market_V1beta2_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta2_QueryBidsRequest, Akash_Market_V1beta2_QueryBidsResponse>

  func bid(
    _ request: Akash_Market_V1beta2_QueryBidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta2_QueryBidRequest, Akash_Market_V1beta2_QueryBidResponse>

  func leases(
    _ request: Akash_Market_V1beta2_QueryLeasesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta2_QueryLeasesRequest, Akash_Market_V1beta2_QueryLeasesResponse>

  func lease(
    _ request: Akash_Market_V1beta2_QueryLeaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta2_QueryLeaseRequest, Akash_Market_V1beta2_QueryLeaseResponse>
}

extension Akash_Market_V1beta2_QueryClientProtocol {
  internal var serviceName: String {
    return "akash.market.v1beta2.Query"
  }

  /// Orders queries orders with filters
  ///
  /// - Parameters:
  ///   - request: Request to send to Orders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func orders(
    _ request: Akash_Market_V1beta2_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta2_QueryOrdersRequest, Akash_Market_V1beta2_QueryOrdersResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.orders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  /// Order queries order details
  ///
  /// - Parameters:
  ///   - request: Request to send to Order.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func order(
    _ request: Akash_Market_V1beta2_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta2_QueryOrderRequest, Akash_Market_V1beta2_QueryOrderResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.order.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  /// Bids queries bids with filters
  ///
  /// - Parameters:
  ///   - request: Request to send to Bids.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bids(
    _ request: Akash_Market_V1beta2_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta2_QueryBidsRequest, Akash_Market_V1beta2_QueryBidsResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  /// Bid queries bid details
  ///
  /// - Parameters:
  ///   - request: Request to send to Bid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bid(
    _ request: Akash_Market_V1beta2_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta2_QueryBidRequest, Akash_Market_V1beta2_QueryBidResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.bid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }

  /// Leases queries leases with filters
  ///
  /// - Parameters:
  ///   - request: Request to send to Leases.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leases(
    _ request: Akash_Market_V1beta2_QueryLeasesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta2_QueryLeasesRequest, Akash_Market_V1beta2_QueryLeasesResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.leases.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeasesInterceptors() ?? []
    )
  }

  /// Lease queries lease details
  ///
  /// - Parameters:
  ///   - request: Request to send to Lease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lease(
    _ request: Akash_Market_V1beta2_QueryLeaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta2_QueryLeaseRequest, Akash_Market_V1beta2_QueryLeaseResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.lease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Akash_Market_V1beta2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Akash_Market_V1beta2_QueryNIOClient")
internal final class Akash_Market_V1beta2_QueryClient: Akash_Market_V1beta2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the akash.market.v1beta2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Akash_Market_V1beta2_QueryNIOClient: Akash_Market_V1beta2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.market.v1beta2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Market_V1beta2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? { get }

  func makeOrdersCall(
    _ request: Akash_Market_V1beta2_QueryOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryOrdersRequest, Akash_Market_V1beta2_QueryOrdersResponse>

  func makeOrderCall(
    _ request: Akash_Market_V1beta2_QueryOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryOrderRequest, Akash_Market_V1beta2_QueryOrderResponse>

  func makeBidsCall(
    _ request: Akash_Market_V1beta2_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryBidsRequest, Akash_Market_V1beta2_QueryBidsResponse>

  func makeBidCall(
    _ request: Akash_Market_V1beta2_QueryBidRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryBidRequest, Akash_Market_V1beta2_QueryBidResponse>

  func makeLeasesCall(
    _ request: Akash_Market_V1beta2_QueryLeasesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryLeasesRequest, Akash_Market_V1beta2_QueryLeasesResponse>

  func makeLeaseCall(
    _ request: Akash_Market_V1beta2_QueryLeaseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryLeaseRequest, Akash_Market_V1beta2_QueryLeaseResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Market_V1beta2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Market_V1beta2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeOrdersCall(
    _ request: Akash_Market_V1beta2_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryOrdersRequest, Akash_Market_V1beta2_QueryOrdersResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.orders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  internal func makeOrderCall(
    _ request: Akash_Market_V1beta2_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryOrderRequest, Akash_Market_V1beta2_QueryOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.order.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  internal func makeBidsCall(
    _ request: Akash_Market_V1beta2_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryBidsRequest, Akash_Market_V1beta2_QueryBidsResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  internal func makeBidCall(
    _ request: Akash_Market_V1beta2_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryBidRequest, Akash_Market_V1beta2_QueryBidResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.bid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }

  internal func makeLeasesCall(
    _ request: Akash_Market_V1beta2_QueryLeasesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryLeasesRequest, Akash_Market_V1beta2_QueryLeasesResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.leases.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeasesInterceptors() ?? []
    )
  }

  internal func makeLeaseCall(
    _ request: Akash_Market_V1beta2_QueryLeaseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta2_QueryLeaseRequest, Akash_Market_V1beta2_QueryLeaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.lease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Market_V1beta2_QueryAsyncClientProtocol {
  internal func orders(
    _ request: Akash_Market_V1beta2_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta2_QueryOrdersResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.orders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  internal func order(
    _ request: Akash_Market_V1beta2_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta2_QueryOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.order.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  internal func bids(
    _ request: Akash_Market_V1beta2_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta2_QueryBidsResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.bids.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  internal func bid(
    _ request: Akash_Market_V1beta2_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta2_QueryBidResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.bid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }

  internal func leases(
    _ request: Akash_Market_V1beta2_QueryLeasesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta2_QueryLeasesResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.leases.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeasesInterceptors() ?? []
    )
  }

  internal func lease(
    _ request: Akash_Market_V1beta2_QueryLeaseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta2_QueryLeaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta2_QueryClientMetadata.Methods.lease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Akash_Market_V1beta2_QueryAsyncClient: Akash_Market_V1beta2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Akash_Market_V1beta2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'orders'.
  func makeOrdersInterceptors() -> [ClientInterceptor<Akash_Market_V1beta2_QueryOrdersRequest, Akash_Market_V1beta2_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'order'.
  func makeOrderInterceptors() -> [ClientInterceptor<Akash_Market_V1beta2_QueryOrderRequest, Akash_Market_V1beta2_QueryOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'bids'.
  func makeBidsInterceptors() -> [ClientInterceptor<Akash_Market_V1beta2_QueryBidsRequest, Akash_Market_V1beta2_QueryBidsResponse>]

  /// - Returns: Interceptors to use when invoking 'bid'.
  func makeBidInterceptors() -> [ClientInterceptor<Akash_Market_V1beta2_QueryBidRequest, Akash_Market_V1beta2_QueryBidResponse>]

  /// - Returns: Interceptors to use when invoking 'leases'.
  func makeLeasesInterceptors() -> [ClientInterceptor<Akash_Market_V1beta2_QueryLeasesRequest, Akash_Market_V1beta2_QueryLeasesResponse>]

  /// - Returns: Interceptors to use when invoking 'lease'.
  func makeLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta2_QueryLeaseRequest, Akash_Market_V1beta2_QueryLeaseResponse>]
}

internal enum Akash_Market_V1beta2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "akash.market.v1beta2.Query",
    methods: [
      Akash_Market_V1beta2_QueryClientMetadata.Methods.orders,
      Akash_Market_V1beta2_QueryClientMetadata.Methods.order,
      Akash_Market_V1beta2_QueryClientMetadata.Methods.bids,
      Akash_Market_V1beta2_QueryClientMetadata.Methods.bid,
      Akash_Market_V1beta2_QueryClientMetadata.Methods.leases,
      Akash_Market_V1beta2_QueryClientMetadata.Methods.lease,
    ]
  )

  internal enum Methods {
    internal static let orders = GRPCMethodDescriptor(
      name: "Orders",
      path: "/akash.market.v1beta2.Query/Orders",
      type: GRPCCallType.unary
    )

    internal static let order = GRPCMethodDescriptor(
      name: "Order",
      path: "/akash.market.v1beta2.Query/Order",
      type: GRPCCallType.unary
    )

    internal static let bids = GRPCMethodDescriptor(
      name: "Bids",
      path: "/akash.market.v1beta2.Query/Bids",
      type: GRPCCallType.unary
    )

    internal static let bid = GRPCMethodDescriptor(
      name: "Bid",
      path: "/akash.market.v1beta2.Query/Bid",
      type: GRPCCallType.unary
    )

    internal static let leases = GRPCMethodDescriptor(
      name: "Leases",
      path: "/akash.market.v1beta2.Query/Leases",
      type: GRPCCallType.unary
    )

    internal static let lease = GRPCMethodDescriptor(
      name: "Lease",
      path: "/akash.market.v1beta2.Query/Lease",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Market_V1beta2_QueryProvider: CallHandlerProvider {
  var interceptors: Akash_Market_V1beta2_QueryServerInterceptorFactoryProtocol? { get }

  /// Orders queries orders with filters
  func orders(request: Akash_Market_V1beta2_QueryOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta2_QueryOrdersResponse>

  /// Order queries order details
  func order(request: Akash_Market_V1beta2_QueryOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta2_QueryOrderResponse>

  /// Bids queries bids with filters
  func bids(request: Akash_Market_V1beta2_QueryBidsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta2_QueryBidsResponse>

  /// Bid queries bid details
  func bid(request: Akash_Market_V1beta2_QueryBidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta2_QueryBidResponse>

  /// Leases queries leases with filters
  func leases(request: Akash_Market_V1beta2_QueryLeasesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta2_QueryLeasesResponse>

  /// Lease queries lease details
  func lease(request: Akash_Market_V1beta2_QueryLeaseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta2_QueryLeaseResponse>
}

extension Akash_Market_V1beta2_QueryProvider {
  internal var serviceName: Substring {
    return Akash_Market_V1beta2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Orders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersInterceptors() ?? [],
        userFunction: self.orders(request:context:)
      )

    case "Order":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryOrderRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryOrderResponse>(),
        interceptors: self.interceptors?.makeOrderInterceptors() ?? [],
        userFunction: self.order(request:context:)
      )

    case "Bids":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        userFunction: self.bids(request:context:)
      )

    case "Bid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryBidResponse>(),
        interceptors: self.interceptors?.makeBidInterceptors() ?? [],
        userFunction: self.bid(request:context:)
      )

    case "Leases":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryLeasesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryLeasesResponse>(),
        interceptors: self.interceptors?.makeLeasesInterceptors() ?? [],
        userFunction: self.leases(request:context:)
      )

    case "Lease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryLeaseRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryLeaseResponse>(),
        interceptors: self.interceptors?.makeLeaseInterceptors() ?? [],
        userFunction: self.lease(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Market_V1beta2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Market_V1beta2_QueryServerInterceptorFactoryProtocol? { get }

  /// Orders queries orders with filters
  @Sendable func orders(
    request: Akash_Market_V1beta2_QueryOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta2_QueryOrdersResponse

  /// Order queries order details
  @Sendable func order(
    request: Akash_Market_V1beta2_QueryOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta2_QueryOrderResponse

  /// Bids queries bids with filters
  @Sendable func bids(
    request: Akash_Market_V1beta2_QueryBidsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta2_QueryBidsResponse

  /// Bid queries bid details
  @Sendable func bid(
    request: Akash_Market_V1beta2_QueryBidRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta2_QueryBidResponse

  /// Leases queries leases with filters
  @Sendable func leases(
    request: Akash_Market_V1beta2_QueryLeasesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta2_QueryLeasesResponse

  /// Lease queries lease details
  @Sendable func lease(
    request: Akash_Market_V1beta2_QueryLeaseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta2_QueryLeaseResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Market_V1beta2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Market_V1beta2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Akash_Market_V1beta2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Akash_Market_V1beta2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Orders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersInterceptors() ?? [],
        wrapping: self.orders(request:context:)
      )

    case "Order":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryOrderRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryOrderResponse>(),
        interceptors: self.interceptors?.makeOrderInterceptors() ?? [],
        wrapping: self.order(request:context:)
      )

    case "Bids":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        wrapping: self.bids(request:context:)
      )

    case "Bid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryBidResponse>(),
        interceptors: self.interceptors?.makeBidInterceptors() ?? [],
        wrapping: self.bid(request:context:)
      )

    case "Leases":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryLeasesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryLeasesResponse>(),
        interceptors: self.interceptors?.makeLeasesInterceptors() ?? [],
        wrapping: self.leases(request:context:)
      )

    case "Lease":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta2_QueryLeaseRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta2_QueryLeaseResponse>(),
        interceptors: self.interceptors?.makeLeaseInterceptors() ?? [],
        wrapping: self.lease(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Market_V1beta2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'orders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrdersInterceptors() -> [ServerInterceptor<Akash_Market_V1beta2_QueryOrdersRequest, Akash_Market_V1beta2_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'order'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrderInterceptors() -> [ServerInterceptor<Akash_Market_V1beta2_QueryOrderRequest, Akash_Market_V1beta2_QueryOrderResponse>]

  /// - Returns: Interceptors to use when handling 'bids'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidsInterceptors() -> [ServerInterceptor<Akash_Market_V1beta2_QueryBidsRequest, Akash_Market_V1beta2_QueryBidsResponse>]

  /// - Returns: Interceptors to use when handling 'bid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidInterceptors() -> [ServerInterceptor<Akash_Market_V1beta2_QueryBidRequest, Akash_Market_V1beta2_QueryBidResponse>]

  /// - Returns: Interceptors to use when handling 'leases'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeasesInterceptors() -> [ServerInterceptor<Akash_Market_V1beta2_QueryLeasesRequest, Akash_Market_V1beta2_QueryLeasesResponse>]

  /// - Returns: Interceptors to use when handling 'lease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta2_QueryLeaseRequest, Akash_Market_V1beta2_QueryLeaseResponse>]
}

internal enum Akash_Market_V1beta2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "akash.market.v1beta2.Query",
    methods: [
      Akash_Market_V1beta2_QueryServerMetadata.Methods.orders,
      Akash_Market_V1beta2_QueryServerMetadata.Methods.order,
      Akash_Market_V1beta2_QueryServerMetadata.Methods.bids,
      Akash_Market_V1beta2_QueryServerMetadata.Methods.bid,
      Akash_Market_V1beta2_QueryServerMetadata.Methods.leases,
      Akash_Market_V1beta2_QueryServerMetadata.Methods.lease,
    ]
  )

  internal enum Methods {
    internal static let orders = GRPCMethodDescriptor(
      name: "Orders",
      path: "/akash.market.v1beta2.Query/Orders",
      type: GRPCCallType.unary
    )

    internal static let order = GRPCMethodDescriptor(
      name: "Order",
      path: "/akash.market.v1beta2.Query/Order",
      type: GRPCCallType.unary
    )

    internal static let bids = GRPCMethodDescriptor(
      name: "Bids",
      path: "/akash.market.v1beta2.Query/Bids",
      type: GRPCCallType.unary
    )

    internal static let bid = GRPCMethodDescriptor(
      name: "Bid",
      path: "/akash.market.v1beta2.Query/Bid",
      type: GRPCCallType.unary
    )

    internal static let leases = GRPCMethodDescriptor(
      name: "Leases",
      path: "/akash.market.v1beta2.Query/Leases",
      type: GRPCCallType.unary
    )

    internal static let lease = GRPCMethodDescriptor(
      name: "Lease",
      path: "/akash.market.v1beta2.Query/Lease",
      type: GRPCCallType.unary
    )
  }
}
