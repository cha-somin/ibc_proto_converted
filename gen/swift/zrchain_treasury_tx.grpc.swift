//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: zrchain/treasury/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Zrchain_Treasury_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Zrchain_Treasury_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? { get }

  func updateParams(
    _ request: Zrchain_Treasury_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgUpdateParams, Zrchain_Treasury_MsgUpdateParamsResponse>

  func newKeyRequest(
    _ request: Zrchain_Treasury_MsgNewKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgNewKeyRequest, Zrchain_Treasury_MsgNewKeyRequestResponse>

  func fulfilKeyRequest(
    _ request: Zrchain_Treasury_MsgFulfilKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgFulfilKeyRequest, Zrchain_Treasury_MsgFulfilKeyRequestResponse>

  func newSignatureRequest(
    _ request: Zrchain_Treasury_MsgNewSignatureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgNewSignatureRequest, Zrchain_Treasury_MsgNewSignatureRequestResponse>

  func fulfilSignatureRequest(
    _ request: Zrchain_Treasury_MsgFulfilSignatureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgFulfilSignatureRequest, Zrchain_Treasury_MsgFulfilSignatureRequestResponse>

  func newSignTransactionRequest(
    _ request: Zrchain_Treasury_MsgNewSignTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgNewSignTransactionRequest, Zrchain_Treasury_MsgNewSignTransactionRequestResponse>

  func transferFromKeyring(
    _ request: Zrchain_Treasury_MsgTransferFromKeyring,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgTransferFromKeyring, Zrchain_Treasury_MsgTransferFromKeyringResponse>

  func newICATransactionRequest(
    _ request: Zrchain_Treasury_MsgNewICATransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgNewICATransactionRequest, Zrchain_Treasury_MsgNewICATransactionRequestResponse>

  func fulfilICATransactionRequest(
    _ request: Zrchain_Treasury_MsgFulfilICATransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgFulfilICATransactionRequest, Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>

  func newZrSignSignatureRequest(
    _ request: Zrchain_Treasury_MsgNewZrSignSignatureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgNewZrSignSignatureRequest, Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>

  func updateKeyPolicy(
    _ request: Zrchain_Treasury_MsgUpdateKeyPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_MsgUpdateKeyPolicy, Zrchain_Treasury_MsgUpdateKeyPolicyResponse>
}

extension Zrchain_Treasury_MsgClientProtocol {
  internal var serviceName: String {
    return "zrchain.treasury.Msg"
  }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Zrchain_Treasury_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgUpdateParams, Zrchain_Treasury_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  /// NewKeyRequest defines an operation for creating a key request.
  ///
  /// - Parameters:
  ///   - request: Request to send to NewKeyRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newKeyRequest(
    _ request: Zrchain_Treasury_MsgNewKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgNewKeyRequest, Zrchain_Treasury_MsgNewKeyRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newKeyRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeyRequestInterceptors() ?? []
    )
  }

  /// FulfilKeyRequest defines an operation for responding to a key request
  ///
  /// - Parameters:
  ///   - request: Request to send to FulfilKeyRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fulfilKeyRequest(
    _ request: Zrchain_Treasury_MsgFulfilKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgFulfilKeyRequest, Zrchain_Treasury_MsgFulfilKeyRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilKeyRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilKeyRequestInterceptors() ?? []
    )
  }

  /// NewSignatureRequest defines an operation for creating a signature request
  ///
  /// - Parameters:
  ///   - request: Request to send to NewSignatureRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newSignatureRequest(
    _ request: Zrchain_Treasury_MsgNewSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgNewSignatureRequest, Zrchain_Treasury_MsgNewSignatureRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewSignatureRequestInterceptors() ?? []
    )
  }

  /// FulfilSignatureRequest defines an operation for returning a signature
  /// response to a request
  ///
  /// - Parameters:
  ///   - request: Request to send to FulfilSignatureRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fulfilSignatureRequest(
    _ request: Zrchain_Treasury_MsgFulfilSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgFulfilSignatureRequest, Zrchain_Treasury_MsgFulfilSignatureRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilSignatureRequestInterceptors() ?? []
    )
  }

  /// NewSignTransactionRequest defines an operation for creating a signature for
  /// transaction request
  ///
  /// - Parameters:
  ///   - request: Request to send to NewSignTransactionRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newSignTransactionRequest(
    _ request: Zrchain_Treasury_MsgNewSignTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgNewSignTransactionRequest, Zrchain_Treasury_MsgNewSignTransactionRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newSignTransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewSignTransactionRequestInterceptors() ?? []
    )
  }

  /// TransferFromKeyring defines an operation for transferring tokens from a
  /// keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferFromKeyring.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferFromKeyring(
    _ request: Zrchain_Treasury_MsgTransferFromKeyring,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgTransferFromKeyring, Zrchain_Treasury_MsgTransferFromKeyringResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.transferFromKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFromKeyringInterceptors() ?? []
    )
  }

  /// NewICATransactionRequest defines an operation for creating an interchain
  /// account transaction request
  ///
  /// - Parameters:
  ///   - request: Request to send to NewICATransactionRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newICATransactionRequest(
    _ request: Zrchain_Treasury_MsgNewICATransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgNewICATransactionRequest, Zrchain_Treasury_MsgNewICATransactionRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newICATransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewICATransactionRequestInterceptors() ?? []
    )
  }

  /// FulfilICATransactionRequest defines an operation for responding to an
  /// interchain account transaction request
  ///
  /// - Parameters:
  ///   - request: Request to send to FulfilICATransactionRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fulfilICATransactionRequest(
    _ request: Zrchain_Treasury_MsgFulfilICATransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgFulfilICATransactionRequest, Zrchain_Treasury_MsgFulfilICATransactionRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilICATransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilICATransactionRequestInterceptors() ?? []
    )
  }

  /// NewZrSignSignatureRequest defines an operation for creating a zrsign
  /// signature request
  ///
  /// - Parameters:
  ///   - request: Request to send to NewZrSignSignatureRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newZrSignSignatureRequest(
    _ request: Zrchain_Treasury_MsgNewZrSignSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgNewZrSignSignatureRequest, Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newZrSignSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewZrSignSignatureRequestInterceptors() ?? []
    )
  }

  /// UpdateKeyPolicy defines an operation for updating a key policy
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateKeyPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateKeyPolicy(
    _ request: Zrchain_Treasury_MsgUpdateKeyPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_MsgUpdateKeyPolicy, Zrchain_Treasury_MsgUpdateKeyPolicyResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.updateKeyPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateKeyPolicyInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Zrchain_Treasury_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Zrchain_Treasury_MsgNIOClient")
internal final class Zrchain_Treasury_MsgClient: Zrchain_Treasury_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the zrchain.treasury.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Zrchain_Treasury_MsgNIOClient: Zrchain_Treasury_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the zrchain.treasury.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Treasury_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? { get }

  func makeUpdateParamsCall(
    _ request: Zrchain_Treasury_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgUpdateParams, Zrchain_Treasury_MsgUpdateParamsResponse>

  func makeNewKeyRequestCall(
    _ request: Zrchain_Treasury_MsgNewKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewKeyRequest, Zrchain_Treasury_MsgNewKeyRequestResponse>

  func makeFulfilKeyRequestCall(
    _ request: Zrchain_Treasury_MsgFulfilKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgFulfilKeyRequest, Zrchain_Treasury_MsgFulfilKeyRequestResponse>

  func makeNewSignatureRequestCall(
    _ request: Zrchain_Treasury_MsgNewSignatureRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewSignatureRequest, Zrchain_Treasury_MsgNewSignatureRequestResponse>

  func makeFulfilSignatureRequestCall(
    _ request: Zrchain_Treasury_MsgFulfilSignatureRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgFulfilSignatureRequest, Zrchain_Treasury_MsgFulfilSignatureRequestResponse>

  func makeNewSignTransactionRequestCall(
    _ request: Zrchain_Treasury_MsgNewSignTransactionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewSignTransactionRequest, Zrchain_Treasury_MsgNewSignTransactionRequestResponse>

  func makeTransferFromKeyringCall(
    _ request: Zrchain_Treasury_MsgTransferFromKeyring,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgTransferFromKeyring, Zrchain_Treasury_MsgTransferFromKeyringResponse>

  func makeNewIcatransactionRequestCall(
    _ request: Zrchain_Treasury_MsgNewICATransactionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewICATransactionRequest, Zrchain_Treasury_MsgNewICATransactionRequestResponse>

  func makeFulfilIcatransactionRequestCall(
    _ request: Zrchain_Treasury_MsgFulfilICATransactionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgFulfilICATransactionRequest, Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>

  func makeNewZrSignSignatureRequestCall(
    _ request: Zrchain_Treasury_MsgNewZrSignSignatureRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewZrSignSignatureRequest, Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>

  func makeUpdateKeyPolicyCall(
    _ request: Zrchain_Treasury_MsgUpdateKeyPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgUpdateKeyPolicy, Zrchain_Treasury_MsgUpdateKeyPolicyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Treasury_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Treasury_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateParamsCall(
    _ request: Zrchain_Treasury_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgUpdateParams, Zrchain_Treasury_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func makeNewKeyRequestCall(
    _ request: Zrchain_Treasury_MsgNewKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewKeyRequest, Zrchain_Treasury_MsgNewKeyRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newKeyRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeyRequestInterceptors() ?? []
    )
  }

  internal func makeFulfilKeyRequestCall(
    _ request: Zrchain_Treasury_MsgFulfilKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgFulfilKeyRequest, Zrchain_Treasury_MsgFulfilKeyRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilKeyRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilKeyRequestInterceptors() ?? []
    )
  }

  internal func makeNewSignatureRequestCall(
    _ request: Zrchain_Treasury_MsgNewSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewSignatureRequest, Zrchain_Treasury_MsgNewSignatureRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewSignatureRequestInterceptors() ?? []
    )
  }

  internal func makeFulfilSignatureRequestCall(
    _ request: Zrchain_Treasury_MsgFulfilSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgFulfilSignatureRequest, Zrchain_Treasury_MsgFulfilSignatureRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilSignatureRequestInterceptors() ?? []
    )
  }

  internal func makeNewSignTransactionRequestCall(
    _ request: Zrchain_Treasury_MsgNewSignTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewSignTransactionRequest, Zrchain_Treasury_MsgNewSignTransactionRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newSignTransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewSignTransactionRequestInterceptors() ?? []
    )
  }

  internal func makeTransferFromKeyringCall(
    _ request: Zrchain_Treasury_MsgTransferFromKeyring,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgTransferFromKeyring, Zrchain_Treasury_MsgTransferFromKeyringResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.transferFromKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFromKeyringInterceptors() ?? []
    )
  }

  internal func makeNewIcatransactionRequestCall(
    _ request: Zrchain_Treasury_MsgNewICATransactionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewICATransactionRequest, Zrchain_Treasury_MsgNewICATransactionRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newICATransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewICATransactionRequestInterceptors() ?? []
    )
  }

  internal func makeFulfilIcatransactionRequestCall(
    _ request: Zrchain_Treasury_MsgFulfilICATransactionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgFulfilICATransactionRequest, Zrchain_Treasury_MsgFulfilICATransactionRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilICATransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilICATransactionRequestInterceptors() ?? []
    )
  }

  internal func makeNewZrSignSignatureRequestCall(
    _ request: Zrchain_Treasury_MsgNewZrSignSignatureRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgNewZrSignSignatureRequest, Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newZrSignSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewZrSignSignatureRequestInterceptors() ?? []
    )
  }

  internal func makeUpdateKeyPolicyCall(
    _ request: Zrchain_Treasury_MsgUpdateKeyPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_MsgUpdateKeyPolicy, Zrchain_Treasury_MsgUpdateKeyPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.updateKeyPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateKeyPolicyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Treasury_MsgAsyncClientProtocol {
  internal func updateParams(
    _ request: Zrchain_Treasury_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func newKeyRequest(
    _ request: Zrchain_Treasury_MsgNewKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgNewKeyRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newKeyRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeyRequestInterceptors() ?? []
    )
  }

  internal func fulfilKeyRequest(
    _ request: Zrchain_Treasury_MsgFulfilKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgFulfilKeyRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilKeyRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilKeyRequestInterceptors() ?? []
    )
  }

  internal func newSignatureRequest(
    _ request: Zrchain_Treasury_MsgNewSignatureRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgNewSignatureRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewSignatureRequestInterceptors() ?? []
    )
  }

  internal func fulfilSignatureRequest(
    _ request: Zrchain_Treasury_MsgFulfilSignatureRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgFulfilSignatureRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilSignatureRequestInterceptors() ?? []
    )
  }

  internal func newSignTransactionRequest(
    _ request: Zrchain_Treasury_MsgNewSignTransactionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgNewSignTransactionRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newSignTransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewSignTransactionRequestInterceptors() ?? []
    )
  }

  internal func transferFromKeyring(
    _ request: Zrchain_Treasury_MsgTransferFromKeyring,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgTransferFromKeyringResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.transferFromKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFromKeyringInterceptors() ?? []
    )
  }

  internal func newICATransactionRequest(
    _ request: Zrchain_Treasury_MsgNewICATransactionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgNewICATransactionRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newICATransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewICATransactionRequestInterceptors() ?? []
    )
  }

  internal func fulfilICATransactionRequest(
    _ request: Zrchain_Treasury_MsgFulfilICATransactionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgFulfilICATransactionRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.fulfilICATransactionRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFulfilICATransactionRequestInterceptors() ?? []
    )
  }

  internal func newZrSignSignatureRequest(
    _ request: Zrchain_Treasury_MsgNewZrSignSignatureRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.newZrSignSignatureRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewZrSignSignatureRequestInterceptors() ?? []
    )
  }

  internal func updateKeyPolicy(
    _ request: Zrchain_Treasury_MsgUpdateKeyPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_MsgUpdateKeyPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_MsgClientMetadata.Methods.updateKeyPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateKeyPolicyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Zrchain_Treasury_MsgAsyncClient: Zrchain_Treasury_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Treasury_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Zrchain_Treasury_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgUpdateParams, Zrchain_Treasury_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'newKeyRequest'.
  func makeNewKeyRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgNewKeyRequest, Zrchain_Treasury_MsgNewKeyRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'fulfilKeyRequest'.
  func makeFulfilKeyRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgFulfilKeyRequest, Zrchain_Treasury_MsgFulfilKeyRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'newSignatureRequest'.
  func makeNewSignatureRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgNewSignatureRequest, Zrchain_Treasury_MsgNewSignatureRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'fulfilSignatureRequest'.
  func makeFulfilSignatureRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgFulfilSignatureRequest, Zrchain_Treasury_MsgFulfilSignatureRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'newSignTransactionRequest'.
  func makeNewSignTransactionRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgNewSignTransactionRequest, Zrchain_Treasury_MsgNewSignTransactionRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'transferFromKeyring'.
  func makeTransferFromKeyringInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgTransferFromKeyring, Zrchain_Treasury_MsgTransferFromKeyringResponse>]

  /// - Returns: Interceptors to use when invoking 'newICATransactionRequest'.
  func makeNewICATransactionRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgNewICATransactionRequest, Zrchain_Treasury_MsgNewICATransactionRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'fulfilICATransactionRequest'.
  func makeFulfilICATransactionRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgFulfilICATransactionRequest, Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'newZrSignSignatureRequest'.
  func makeNewZrSignSignatureRequestInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgNewZrSignSignatureRequest, Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'updateKeyPolicy'.
  func makeUpdateKeyPolicyInterceptors() -> [ClientInterceptor<Zrchain_Treasury_MsgUpdateKeyPolicy, Zrchain_Treasury_MsgUpdateKeyPolicyResponse>]
}

internal enum Zrchain_Treasury_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "zrchain.treasury.Msg",
    methods: [
      Zrchain_Treasury_MsgClientMetadata.Methods.updateParams,
      Zrchain_Treasury_MsgClientMetadata.Methods.newKeyRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.fulfilKeyRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.newSignatureRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.fulfilSignatureRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.newSignTransactionRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.transferFromKeyring,
      Zrchain_Treasury_MsgClientMetadata.Methods.newICATransactionRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.fulfilICATransactionRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.newZrSignSignatureRequest,
      Zrchain_Treasury_MsgClientMetadata.Methods.updateKeyPolicy,
    ]
  )

  internal enum Methods {
    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/zrchain.treasury.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let newKeyRequest = GRPCMethodDescriptor(
      name: "NewKeyRequest",
      path: "/zrchain.treasury.Msg/NewKeyRequest",
      type: GRPCCallType.unary
    )

    internal static let fulfilKeyRequest = GRPCMethodDescriptor(
      name: "FulfilKeyRequest",
      path: "/zrchain.treasury.Msg/FulfilKeyRequest",
      type: GRPCCallType.unary
    )

    internal static let newSignatureRequest = GRPCMethodDescriptor(
      name: "NewSignatureRequest",
      path: "/zrchain.treasury.Msg/NewSignatureRequest",
      type: GRPCCallType.unary
    )

    internal static let fulfilSignatureRequest = GRPCMethodDescriptor(
      name: "FulfilSignatureRequest",
      path: "/zrchain.treasury.Msg/FulfilSignatureRequest",
      type: GRPCCallType.unary
    )

    internal static let newSignTransactionRequest = GRPCMethodDescriptor(
      name: "NewSignTransactionRequest",
      path: "/zrchain.treasury.Msg/NewSignTransactionRequest",
      type: GRPCCallType.unary
    )

    internal static let transferFromKeyring = GRPCMethodDescriptor(
      name: "TransferFromKeyring",
      path: "/zrchain.treasury.Msg/TransferFromKeyring",
      type: GRPCCallType.unary
    )

    internal static let newICATransactionRequest = GRPCMethodDescriptor(
      name: "NewICATransactionRequest",
      path: "/zrchain.treasury.Msg/NewICATransactionRequest",
      type: GRPCCallType.unary
    )

    internal static let fulfilICATransactionRequest = GRPCMethodDescriptor(
      name: "FulfilICATransactionRequest",
      path: "/zrchain.treasury.Msg/FulfilICATransactionRequest",
      type: GRPCCallType.unary
    )

    internal static let newZrSignSignatureRequest = GRPCMethodDescriptor(
      name: "NewZrSignSignatureRequest",
      path: "/zrchain.treasury.Msg/NewZrSignSignatureRequest",
      type: GRPCCallType.unary
    )

    internal static let updateKeyPolicy = GRPCMethodDescriptor(
      name: "UpdateKeyPolicy",
      path: "/zrchain.treasury.Msg/UpdateKeyPolicy",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Zrchain_Treasury_MsgProvider: CallHandlerProvider {
  var interceptors: Zrchain_Treasury_MsgServerInterceptorFactoryProtocol? { get }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  func updateParams(request: Zrchain_Treasury_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgUpdateParamsResponse>

  /// NewKeyRequest defines an operation for creating a key request.
  func newKeyRequest(request: Zrchain_Treasury_MsgNewKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgNewKeyRequestResponse>

  /// FulfilKeyRequest defines an operation for responding to a key request
  func fulfilKeyRequest(request: Zrchain_Treasury_MsgFulfilKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgFulfilKeyRequestResponse>

  /// NewSignatureRequest defines an operation for creating a signature request
  func newSignatureRequest(request: Zrchain_Treasury_MsgNewSignatureRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgNewSignatureRequestResponse>

  /// FulfilSignatureRequest defines an operation for returning a signature
  /// response to a request
  func fulfilSignatureRequest(request: Zrchain_Treasury_MsgFulfilSignatureRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgFulfilSignatureRequestResponse>

  /// NewSignTransactionRequest defines an operation for creating a signature for
  /// transaction request
  func newSignTransactionRequest(request: Zrchain_Treasury_MsgNewSignTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgNewSignTransactionRequestResponse>

  /// TransferFromKeyring defines an operation for transferring tokens from a
  /// keyring
  func transferFromKeyring(request: Zrchain_Treasury_MsgTransferFromKeyring, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgTransferFromKeyringResponse>

  /// NewICATransactionRequest defines an operation for creating an interchain
  /// account transaction request
  func newICATransactionRequest(request: Zrchain_Treasury_MsgNewICATransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgNewICATransactionRequestResponse>

  /// FulfilICATransactionRequest defines an operation for responding to an
  /// interchain account transaction request
  func fulfilICATransactionRequest(request: Zrchain_Treasury_MsgFulfilICATransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>

  /// NewZrSignSignatureRequest defines an operation for creating a zrsign
  /// signature request
  func newZrSignSignatureRequest(request: Zrchain_Treasury_MsgNewZrSignSignatureRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>

  /// UpdateKeyPolicy defines an operation for updating a key policy
  func updateKeyPolicy(request: Zrchain_Treasury_MsgUpdateKeyPolicy, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_MsgUpdateKeyPolicyResponse>
}

extension Zrchain_Treasury_MsgProvider {
  internal var serviceName: Substring {
    return Zrchain_Treasury_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    case "NewKeyRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewKeyRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewKeyRequestResponse>(),
        interceptors: self.interceptors?.makeNewKeyRequestInterceptors() ?? [],
        userFunction: self.newKeyRequest(request:context:)
      )

    case "FulfilKeyRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgFulfilKeyRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgFulfilKeyRequestResponse>(),
        interceptors: self.interceptors?.makeFulfilKeyRequestInterceptors() ?? [],
        userFunction: self.fulfilKeyRequest(request:context:)
      )

    case "NewSignatureRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewSignatureRequestResponse>(),
        interceptors: self.interceptors?.makeNewSignatureRequestInterceptors() ?? [],
        userFunction: self.newSignatureRequest(request:context:)
      )

    case "FulfilSignatureRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgFulfilSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgFulfilSignatureRequestResponse>(),
        interceptors: self.interceptors?.makeFulfilSignatureRequestInterceptors() ?? [],
        userFunction: self.fulfilSignatureRequest(request:context:)
      )

    case "NewSignTransactionRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewSignTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewSignTransactionRequestResponse>(),
        interceptors: self.interceptors?.makeNewSignTransactionRequestInterceptors() ?? [],
        userFunction: self.newSignTransactionRequest(request:context:)
      )

    case "TransferFromKeyring":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgTransferFromKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgTransferFromKeyringResponse>(),
        interceptors: self.interceptors?.makeTransferFromKeyringInterceptors() ?? [],
        userFunction: self.transferFromKeyring(request:context:)
      )

    case "NewICATransactionRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewICATransactionRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewICATransactionRequestResponse>(),
        interceptors: self.interceptors?.makeNewICATransactionRequestInterceptors() ?? [],
        userFunction: self.newICATransactionRequest(request:context:)
      )

    case "FulfilICATransactionRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgFulfilICATransactionRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>(),
        interceptors: self.interceptors?.makeFulfilICATransactionRequestInterceptors() ?? [],
        userFunction: self.fulfilICATransactionRequest(request:context:)
      )

    case "NewZrSignSignatureRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewZrSignSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>(),
        interceptors: self.interceptors?.makeNewZrSignSignatureRequestInterceptors() ?? [],
        userFunction: self.newZrSignSignatureRequest(request:context:)
      )

    case "UpdateKeyPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgUpdateKeyPolicy>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgUpdateKeyPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateKeyPolicyInterceptors() ?? [],
        userFunction: self.updateKeyPolicy(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Treasury_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Treasury_MsgServerInterceptorFactoryProtocol? { get }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  @Sendable func updateParams(
    request: Zrchain_Treasury_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgUpdateParamsResponse

  /// NewKeyRequest defines an operation for creating a key request.
  @Sendable func newKeyRequest(
    request: Zrchain_Treasury_MsgNewKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgNewKeyRequestResponse

  /// FulfilKeyRequest defines an operation for responding to a key request
  @Sendable func fulfilKeyRequest(
    request: Zrchain_Treasury_MsgFulfilKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgFulfilKeyRequestResponse

  /// NewSignatureRequest defines an operation for creating a signature request
  @Sendable func newSignatureRequest(
    request: Zrchain_Treasury_MsgNewSignatureRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgNewSignatureRequestResponse

  /// FulfilSignatureRequest defines an operation for returning a signature
  /// response to a request
  @Sendable func fulfilSignatureRequest(
    request: Zrchain_Treasury_MsgFulfilSignatureRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgFulfilSignatureRequestResponse

  /// NewSignTransactionRequest defines an operation for creating a signature for
  /// transaction request
  @Sendable func newSignTransactionRequest(
    request: Zrchain_Treasury_MsgNewSignTransactionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgNewSignTransactionRequestResponse

  /// TransferFromKeyring defines an operation for transferring tokens from a
  /// keyring
  @Sendable func transferFromKeyring(
    request: Zrchain_Treasury_MsgTransferFromKeyring,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgTransferFromKeyringResponse

  /// NewICATransactionRequest defines an operation for creating an interchain
  /// account transaction request
  @Sendable func newICATransactionRequest(
    request: Zrchain_Treasury_MsgNewICATransactionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgNewICATransactionRequestResponse

  /// FulfilICATransactionRequest defines an operation for responding to an
  /// interchain account transaction request
  @Sendable func fulfilICATransactionRequest(
    request: Zrchain_Treasury_MsgFulfilICATransactionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgFulfilICATransactionRequestResponse

  /// NewZrSignSignatureRequest defines an operation for creating a zrsign
  /// signature request
  @Sendable func newZrSignSignatureRequest(
    request: Zrchain_Treasury_MsgNewZrSignSignatureRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse

  /// UpdateKeyPolicy defines an operation for updating a key policy
  @Sendable func updateKeyPolicy(
    request: Zrchain_Treasury_MsgUpdateKeyPolicy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_MsgUpdateKeyPolicyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Treasury_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Treasury_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Zrchain_Treasury_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Zrchain_Treasury_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    case "NewKeyRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewKeyRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewKeyRequestResponse>(),
        interceptors: self.interceptors?.makeNewKeyRequestInterceptors() ?? [],
        wrapping: self.newKeyRequest(request:context:)
      )

    case "FulfilKeyRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgFulfilKeyRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgFulfilKeyRequestResponse>(),
        interceptors: self.interceptors?.makeFulfilKeyRequestInterceptors() ?? [],
        wrapping: self.fulfilKeyRequest(request:context:)
      )

    case "NewSignatureRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewSignatureRequestResponse>(),
        interceptors: self.interceptors?.makeNewSignatureRequestInterceptors() ?? [],
        wrapping: self.newSignatureRequest(request:context:)
      )

    case "FulfilSignatureRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgFulfilSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgFulfilSignatureRequestResponse>(),
        interceptors: self.interceptors?.makeFulfilSignatureRequestInterceptors() ?? [],
        wrapping: self.fulfilSignatureRequest(request:context:)
      )

    case "NewSignTransactionRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewSignTransactionRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewSignTransactionRequestResponse>(),
        interceptors: self.interceptors?.makeNewSignTransactionRequestInterceptors() ?? [],
        wrapping: self.newSignTransactionRequest(request:context:)
      )

    case "TransferFromKeyring":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgTransferFromKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgTransferFromKeyringResponse>(),
        interceptors: self.interceptors?.makeTransferFromKeyringInterceptors() ?? [],
        wrapping: self.transferFromKeyring(request:context:)
      )

    case "NewICATransactionRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewICATransactionRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewICATransactionRequestResponse>(),
        interceptors: self.interceptors?.makeNewICATransactionRequestInterceptors() ?? [],
        wrapping: self.newICATransactionRequest(request:context:)
      )

    case "FulfilICATransactionRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgFulfilICATransactionRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>(),
        interceptors: self.interceptors?.makeFulfilICATransactionRequestInterceptors() ?? [],
        wrapping: self.fulfilICATransactionRequest(request:context:)
      )

    case "NewZrSignSignatureRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgNewZrSignSignatureRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>(),
        interceptors: self.interceptors?.makeNewZrSignSignatureRequestInterceptors() ?? [],
        wrapping: self.newZrSignSignatureRequest(request:context:)
      )

    case "UpdateKeyPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_MsgUpdateKeyPolicy>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_MsgUpdateKeyPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateKeyPolicyInterceptors() ?? [],
        wrapping: self.updateKeyPolicy(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Zrchain_Treasury_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgUpdateParams, Zrchain_Treasury_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when handling 'newKeyRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewKeyRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgNewKeyRequest, Zrchain_Treasury_MsgNewKeyRequestResponse>]

  /// - Returns: Interceptors to use when handling 'fulfilKeyRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFulfilKeyRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgFulfilKeyRequest, Zrchain_Treasury_MsgFulfilKeyRequestResponse>]

  /// - Returns: Interceptors to use when handling 'newSignatureRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewSignatureRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgNewSignatureRequest, Zrchain_Treasury_MsgNewSignatureRequestResponse>]

  /// - Returns: Interceptors to use when handling 'fulfilSignatureRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFulfilSignatureRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgFulfilSignatureRequest, Zrchain_Treasury_MsgFulfilSignatureRequestResponse>]

  /// - Returns: Interceptors to use when handling 'newSignTransactionRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewSignTransactionRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgNewSignTransactionRequest, Zrchain_Treasury_MsgNewSignTransactionRequestResponse>]

  /// - Returns: Interceptors to use when handling 'transferFromKeyring'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferFromKeyringInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgTransferFromKeyring, Zrchain_Treasury_MsgTransferFromKeyringResponse>]

  /// - Returns: Interceptors to use when handling 'newICATransactionRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewICATransactionRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgNewICATransactionRequest, Zrchain_Treasury_MsgNewICATransactionRequestResponse>]

  /// - Returns: Interceptors to use when handling 'fulfilICATransactionRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFulfilICATransactionRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgFulfilICATransactionRequest, Zrchain_Treasury_MsgFulfilICATransactionRequestResponse>]

  /// - Returns: Interceptors to use when handling 'newZrSignSignatureRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewZrSignSignatureRequestInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgNewZrSignSignatureRequest, Zrchain_Treasury_MsgNewZrSignSignatureRequestResponse>]

  /// - Returns: Interceptors to use when handling 'updateKeyPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateKeyPolicyInterceptors() -> [ServerInterceptor<Zrchain_Treasury_MsgUpdateKeyPolicy, Zrchain_Treasury_MsgUpdateKeyPolicyResponse>]
}

internal enum Zrchain_Treasury_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "zrchain.treasury.Msg",
    methods: [
      Zrchain_Treasury_MsgServerMetadata.Methods.updateParams,
      Zrchain_Treasury_MsgServerMetadata.Methods.newKeyRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.fulfilKeyRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.newSignatureRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.fulfilSignatureRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.newSignTransactionRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.transferFromKeyring,
      Zrchain_Treasury_MsgServerMetadata.Methods.newICATransactionRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.fulfilICATransactionRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.newZrSignSignatureRequest,
      Zrchain_Treasury_MsgServerMetadata.Methods.updateKeyPolicy,
    ]
  )

  internal enum Methods {
    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/zrchain.treasury.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let newKeyRequest = GRPCMethodDescriptor(
      name: "NewKeyRequest",
      path: "/zrchain.treasury.Msg/NewKeyRequest",
      type: GRPCCallType.unary
    )

    internal static let fulfilKeyRequest = GRPCMethodDescriptor(
      name: "FulfilKeyRequest",
      path: "/zrchain.treasury.Msg/FulfilKeyRequest",
      type: GRPCCallType.unary
    )

    internal static let newSignatureRequest = GRPCMethodDescriptor(
      name: "NewSignatureRequest",
      path: "/zrchain.treasury.Msg/NewSignatureRequest",
      type: GRPCCallType.unary
    )

    internal static let fulfilSignatureRequest = GRPCMethodDescriptor(
      name: "FulfilSignatureRequest",
      path: "/zrchain.treasury.Msg/FulfilSignatureRequest",
      type: GRPCCallType.unary
    )

    internal static let newSignTransactionRequest = GRPCMethodDescriptor(
      name: "NewSignTransactionRequest",
      path: "/zrchain.treasury.Msg/NewSignTransactionRequest",
      type: GRPCCallType.unary
    )

    internal static let transferFromKeyring = GRPCMethodDescriptor(
      name: "TransferFromKeyring",
      path: "/zrchain.treasury.Msg/TransferFromKeyring",
      type: GRPCCallType.unary
    )

    internal static let newICATransactionRequest = GRPCMethodDescriptor(
      name: "NewICATransactionRequest",
      path: "/zrchain.treasury.Msg/NewICATransactionRequest",
      type: GRPCCallType.unary
    )

    internal static let fulfilICATransactionRequest = GRPCMethodDescriptor(
      name: "FulfilICATransactionRequest",
      path: "/zrchain.treasury.Msg/FulfilICATransactionRequest",
      type: GRPCCallType.unary
    )

    internal static let newZrSignSignatureRequest = GRPCMethodDescriptor(
      name: "NewZrSignSignatureRequest",
      path: "/zrchain.treasury.Msg/NewZrSignSignatureRequest",
      type: GRPCCallType.unary
    )

    internal static let updateKeyPolicy = GRPCMethodDescriptor(
      name: "UpdateKeyPolicy",
      path: "/zrchain.treasury.Msg/UpdateKeyPolicy",
      type: GRPCCallType.unary
    )
  }
}
