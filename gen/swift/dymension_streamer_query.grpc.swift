//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: dymension/streamer/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Dymensionxyz_Dymension_Streamer_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Dymensionxyz_Dymension_Streamer_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? { get }

  func moduleToDistributeCoins(
    _ request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>

  func streamByID(
    _ request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_StreamByIDRequest, Dymensionxyz_Dymension_Streamer_StreamByIDResponse>

  func streams(
    _ request: Dymensionxyz_Dymension_Streamer_StreamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_StreamsRequest, Dymensionxyz_Dymension_Streamer_StreamsResponse>

  func activeStreams(
    _ request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>

  func upcomingStreams(
    _ request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>
}

extension Dymensionxyz_Dymension_Streamer_QueryClientProtocol {
  internal var serviceName: String {
    return "dymensionxyz.dymension.streamer.Query"
  }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleToDistributeCoins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moduleToDistributeCoins(
    _ request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  /// StreamByID returns streams by their respective ID
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func streamByID(
    _ request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_StreamByIDRequest, Dymensionxyz_Dymension_Streamer_StreamByIDResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streamByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamByIDInterceptors() ?? []
    )
  }

  /// Streams returns both upcoming and active streams
  ///
  /// - Parameters:
  ///   - request: Request to send to Streams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func streams(
    _ request: Dymensionxyz_Dymension_Streamer_StreamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_StreamsRequest, Dymensionxyz_Dymension_Streamer_StreamsResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamsInterceptors() ?? []
    )
  }

  /// ActiveStreams returns active streams
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveStreams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activeStreams(
    _ request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.activeStreams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveStreamsInterceptors() ?? []
    )
  }

  /// Returns scheduled streams that have not yet occurred
  ///
  /// - Parameters:
  ///   - request: Request to send to UpcomingStreams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upcomingStreams(
    _ request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse> {
    return self.makeUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.upcomingStreams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingStreamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Dymensionxyz_Dymension_Streamer_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Dymensionxyz_Dymension_Streamer_QueryNIOClient")
internal final class Dymensionxyz_Dymension_Streamer_QueryClient: Dymensionxyz_Dymension_Streamer_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the dymensionxyz.dymension.streamer.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Dymensionxyz_Dymension_Streamer_QueryNIOClient: Dymensionxyz_Dymension_Streamer_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the dymensionxyz.dymension.streamer.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Dymensionxyz_Dymension_Streamer_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? { get }

  func makeModuleToDistributeCoinsCall(
    _ request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>

  func makeStreamByIDCall(
    _ request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_StreamByIDRequest, Dymensionxyz_Dymension_Streamer_StreamByIDResponse>

  func makeStreamsCall(
    _ request: Dymensionxyz_Dymension_Streamer_StreamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_StreamsRequest, Dymensionxyz_Dymension_Streamer_StreamsResponse>

  func makeActiveStreamsCall(
    _ request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>

  func makeUpcomingStreamsCall(
    _ request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dymensionxyz_Dymension_Streamer_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Dymensionxyz_Dymension_Streamer_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeModuleToDistributeCoinsCall(
    _ request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  internal func makeStreamByIDCall(
    _ request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_StreamByIDRequest, Dymensionxyz_Dymension_Streamer_StreamByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streamByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamByIDInterceptors() ?? []
    )
  }

  internal func makeStreamsCall(
    _ request: Dymensionxyz_Dymension_Streamer_StreamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_StreamsRequest, Dymensionxyz_Dymension_Streamer_StreamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamsInterceptors() ?? []
    )
  }

  internal func makeActiveStreamsCall(
    _ request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.activeStreams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveStreamsInterceptors() ?? []
    )
  }

  internal func makeUpcomingStreamsCall(
    _ request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.upcomingStreams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingStreamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dymensionxyz_Dymension_Streamer_QueryAsyncClientProtocol {
  internal func moduleToDistributeCoins(
    _ request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  internal func streamByID(
    _ request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Streamer_StreamByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streamByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamByIDInterceptors() ?? []
    )
  }

  internal func streams(
    _ request: Dymensionxyz_Dymension_Streamer_StreamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Streamer_StreamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamsInterceptors() ?? []
    )
  }

  internal func activeStreams(
    _ request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.activeStreams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveStreamsInterceptors() ?? []
    )
  }

  internal func upcomingStreams(
    _ request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.upcomingStreams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingStreamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Dymensionxyz_Dymension_Streamer_QueryAsyncClient: Dymensionxyz_Dymension_Streamer_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Dymensionxyz_Dymension_Streamer_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'moduleToDistributeCoins'.
  func makeModuleToDistributeCoinsInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>]

  /// - Returns: Interceptors to use when invoking 'streamByID'.
  func makeStreamByIDInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Streamer_StreamByIDRequest, Dymensionxyz_Dymension_Streamer_StreamByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'streams'.
  func makeStreamsInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Streamer_StreamsRequest, Dymensionxyz_Dymension_Streamer_StreamsResponse>]

  /// - Returns: Interceptors to use when invoking 'activeStreams'.
  func makeActiveStreamsInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>]

  /// - Returns: Interceptors to use when invoking 'upcomingStreams'.
  func makeUpcomingStreamsInterceptors() -> [ClientInterceptor<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>]
}

internal enum Dymensionxyz_Dymension_Streamer_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "dymensionxyz.dymension.streamer.Query",
    methods: [
      Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.moduleToDistributeCoins,
      Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streamByID,
      Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.streams,
      Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.activeStreams,
      Dymensionxyz_Dymension_Streamer_QueryClientMetadata.Methods.upcomingStreams,
    ]
  )

  internal enum Methods {
    internal static let moduleToDistributeCoins = GRPCMethodDescriptor(
      name: "ModuleToDistributeCoins",
      path: "/dymensionxyz.dymension.streamer.Query/ModuleToDistributeCoins",
      type: GRPCCallType.unary
    )

    internal static let streamByID = GRPCMethodDescriptor(
      name: "StreamByID",
      path: "/dymensionxyz.dymension.streamer.Query/StreamByID",
      type: GRPCCallType.unary
    )

    internal static let streams = GRPCMethodDescriptor(
      name: "Streams",
      path: "/dymensionxyz.dymension.streamer.Query/Streams",
      type: GRPCCallType.unary
    )

    internal static let activeStreams = GRPCMethodDescriptor(
      name: "ActiveStreams",
      path: "/dymensionxyz.dymension.streamer.Query/ActiveStreams",
      type: GRPCCallType.unary
    )

    internal static let upcomingStreams = GRPCMethodDescriptor(
      name: "UpcomingStreams",
      path: "/dymensionxyz.dymension.streamer.Query/UpcomingStreams",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Dymensionxyz_Dymension_Streamer_QueryProvider: CallHandlerProvider {
  var interceptors: Dymensionxyz_Dymension_Streamer_QueryServerInterceptorFactoryProtocol? { get }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  func moduleToDistributeCoins(request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>

  /// StreamByID returns streams by their respective ID
  func streamByID(request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Streamer_StreamByIDResponse>

  /// Streams returns both upcoming and active streams
  func streams(request: Dymensionxyz_Dymension_Streamer_StreamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Streamer_StreamsResponse>

  /// ActiveStreams returns active streams
  func activeStreams(request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>

  /// Returns scheduled streams that have not yet occurred
  func upcomingStreams(request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>
}

extension Dymensionxyz_Dymension_Streamer_QueryProvider {
  internal var serviceName: Substring {
    return Dymensionxyz_Dymension_Streamer_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ModuleToDistributeCoins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>(),
        interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? [],
        userFunction: self.moduleToDistributeCoins(request:context:)
      )

    case "StreamByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_StreamByIDRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_StreamByIDResponse>(),
        interceptors: self.interceptors?.makeStreamByIDInterceptors() ?? [],
        userFunction: self.streamByID(request:context:)
      )

    case "Streams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_StreamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_StreamsResponse>(),
        interceptors: self.interceptors?.makeStreamsInterceptors() ?? [],
        userFunction: self.streams(request:context:)
      )

    case "ActiveStreams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>(),
        interceptors: self.interceptors?.makeActiveStreamsInterceptors() ?? [],
        userFunction: self.activeStreams(request:context:)
      )

    case "UpcomingStreams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>(),
        interceptors: self.interceptors?.makeUpcomingStreamsInterceptors() ?? [],
        userFunction: self.upcomingStreams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Dymensionxyz_Dymension_Streamer_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Dymensionxyz_Dymension_Streamer_QueryServerInterceptorFactoryProtocol? { get }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  @Sendable func moduleToDistributeCoins(
    request: Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse

  /// StreamByID returns streams by their respective ID
  @Sendable func streamByID(
    request: Dymensionxyz_Dymension_Streamer_StreamByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Streamer_StreamByIDResponse

  /// Streams returns both upcoming and active streams
  @Sendable func streams(
    request: Dymensionxyz_Dymension_Streamer_StreamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Streamer_StreamsResponse

  /// ActiveStreams returns active streams
  @Sendable func activeStreams(
    request: Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse

  /// Returns scheduled streams that have not yet occurred
  @Sendable func upcomingStreams(
    request: Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Dymensionxyz_Dymension_Streamer_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Dymensionxyz_Dymension_Streamer_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Dymensionxyz_Dymension_Streamer_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Dymensionxyz_Dymension_Streamer_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ModuleToDistributeCoins":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>(),
        interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? [],
        wrapping: self.moduleToDistributeCoins(request:context:)
      )

    case "StreamByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_StreamByIDRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_StreamByIDResponse>(),
        interceptors: self.interceptors?.makeStreamByIDInterceptors() ?? [],
        wrapping: self.streamByID(request:context:)
      )

    case "Streams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_StreamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_StreamsResponse>(),
        interceptors: self.interceptors?.makeStreamsInterceptors() ?? [],
        wrapping: self.streams(request:context:)
      )

    case "ActiveStreams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>(),
        interceptors: self.interceptors?.makeActiveStreamsInterceptors() ?? [],
        wrapping: self.activeStreams(request:context:)
      )

    case "UpcomingStreams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest>(),
        responseSerializer: ProtobufSerializer<Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>(),
        interceptors: self.interceptors?.makeUpcomingStreamsInterceptors() ?? [],
        wrapping: self.upcomingStreams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Dymensionxyz_Dymension_Streamer_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'moduleToDistributeCoins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModuleToDistributeCoinsInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsRequest, Dymensionxyz_Dymension_Streamer_ModuleToDistributeCoinsResponse>]

  /// - Returns: Interceptors to use when handling 'streamByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamByIDInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Streamer_StreamByIDRequest, Dymensionxyz_Dymension_Streamer_StreamByIDResponse>]

  /// - Returns: Interceptors to use when handling 'streams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamsInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Streamer_StreamsRequest, Dymensionxyz_Dymension_Streamer_StreamsResponse>]

  /// - Returns: Interceptors to use when handling 'activeStreams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActiveStreamsInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Streamer_ActiveStreamsRequest, Dymensionxyz_Dymension_Streamer_ActiveStreamsResponse>]

  /// - Returns: Interceptors to use when handling 'upcomingStreams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpcomingStreamsInterceptors() -> [ServerInterceptor<Dymensionxyz_Dymension_Streamer_UpcomingStreamsRequest, Dymensionxyz_Dymension_Streamer_UpcomingStreamsResponse>]
}

internal enum Dymensionxyz_Dymension_Streamer_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "dymensionxyz.dymension.streamer.Query",
    methods: [
      Dymensionxyz_Dymension_Streamer_QueryServerMetadata.Methods.moduleToDistributeCoins,
      Dymensionxyz_Dymension_Streamer_QueryServerMetadata.Methods.streamByID,
      Dymensionxyz_Dymension_Streamer_QueryServerMetadata.Methods.streams,
      Dymensionxyz_Dymension_Streamer_QueryServerMetadata.Methods.activeStreams,
      Dymensionxyz_Dymension_Streamer_QueryServerMetadata.Methods.upcomingStreams,
    ]
  )

  internal enum Methods {
    internal static let moduleToDistributeCoins = GRPCMethodDescriptor(
      name: "ModuleToDistributeCoins",
      path: "/dymensionxyz.dymension.streamer.Query/ModuleToDistributeCoins",
      type: GRPCCallType.unary
    )

    internal static let streamByID = GRPCMethodDescriptor(
      name: "StreamByID",
      path: "/dymensionxyz.dymension.streamer.Query/StreamByID",
      type: GRPCCallType.unary
    )

    internal static let streams = GRPCMethodDescriptor(
      name: "Streams",
      path: "/dymensionxyz.dymension.streamer.Query/Streams",
      type: GRPCCallType.unary
    )

    internal static let activeStreams = GRPCMethodDescriptor(
      name: "ActiveStreams",
      path: "/dymensionxyz.dymension.streamer.Query/ActiveStreams",
      type: GRPCCallType.unary
    )

    internal static let upcomingStreams = GRPCMethodDescriptor(
      name: "UpcomingStreams",
      path: "/dymensionxyz.dymension.streamer.Query/UpcomingStreams",
      type: GRPCCallType.unary
    )
  }
}
