// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/oracle/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the oracle module's genesis state.
struct Injective_Oracle_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters of related to oracle.
  var params: Injective_Oracle_V1beta1_Params {
    get {return _storage._params ?? Injective_Oracle_V1beta1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var bandRelayers: [String] {
    get {return _storage._bandRelayers}
    set {_uniqueStorage()._bandRelayers = newValue}
  }

  var bandPriceStates: [Injective_Oracle_V1beta1_BandPriceState] {
    get {return _storage._bandPriceStates}
    set {_uniqueStorage()._bandPriceStates = newValue}
  }

  var priceFeedPriceStates: [Injective_Oracle_V1beta1_PriceFeedState] {
    get {return _storage._priceFeedPriceStates}
    set {_uniqueStorage()._priceFeedPriceStates = newValue}
  }

  var coinbasePriceStates: [Injective_Oracle_V1beta1_CoinbasePriceState] {
    get {return _storage._coinbasePriceStates}
    set {_uniqueStorage()._coinbasePriceStates = newValue}
  }

  var bandIbcPriceStates: [Injective_Oracle_V1beta1_BandPriceState] {
    get {return _storage._bandIbcPriceStates}
    set {_uniqueStorage()._bandIbcPriceStates = newValue}
  }

  var bandIbcOracleRequests: [Injective_Oracle_V1beta1_BandOracleRequest] {
    get {return _storage._bandIbcOracleRequests}
    set {_uniqueStorage()._bandIbcOracleRequests = newValue}
  }

  var bandIbcParams: Injective_Oracle_V1beta1_BandIBCParams {
    get {return _storage._bandIbcParams ?? Injective_Oracle_V1beta1_BandIBCParams()}
    set {_uniqueStorage()._bandIbcParams = newValue}
  }
  /// Returns true if `bandIbcParams` has been explicitly set.
  var hasBandIbcParams: Bool {return _storage._bandIbcParams != nil}
  /// Clears the value of `bandIbcParams`. Subsequent reads from it will return its default value.
  mutating func clearBandIbcParams() {_uniqueStorage()._bandIbcParams = nil}

  var bandIbcLatestClientID: UInt64 {
    get {return _storage._bandIbcLatestClientID}
    set {_uniqueStorage()._bandIbcLatestClientID = newValue}
  }

  var calldataRecords: [Injective_Oracle_V1beta1_CalldataRecord] {
    get {return _storage._calldataRecords}
    set {_uniqueStorage()._calldataRecords = newValue}
  }

  var bandIbcLatestRequestID: UInt64 {
    get {return _storage._bandIbcLatestRequestID}
    set {_uniqueStorage()._bandIbcLatestRequestID = newValue}
  }

  var chainlinkPriceStates: [Injective_Oracle_V1beta1_ChainlinkPriceState] {
    get {return _storage._chainlinkPriceStates}
    set {_uniqueStorage()._chainlinkPriceStates = newValue}
  }

  var historicalPriceRecords: [Injective_Oracle_V1beta1_PriceRecords] {
    get {return _storage._historicalPriceRecords}
    set {_uniqueStorage()._historicalPriceRecords = newValue}
  }

  var providerStates: [Injective_Oracle_V1beta1_ProviderState] {
    get {return _storage._providerStates}
    set {_uniqueStorage()._providerStates = newValue}
  }

  var pythPriceStates: [Injective_Oracle_V1beta1_PythPriceState] {
    get {return _storage._pythPriceStates}
    set {_uniqueStorage()._pythPriceStates = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Injective_Oracle_V1beta1_CalldataRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: UInt64 = 0

  var calldata: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Injective_Oracle_V1beta1_GenesisState: @unchecked Sendable {}
extension Injective_Oracle_V1beta1_CalldataRecord: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.oracle.v1beta1"

extension Injective_Oracle_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "band_relayers"),
    3: .standard(proto: "band_price_states"),
    4: .standard(proto: "price_feed_price_states"),
    5: .standard(proto: "coinbase_price_states"),
    6: .standard(proto: "band_ibc_price_states"),
    7: .standard(proto: "band_ibc_oracle_requests"),
    8: .standard(proto: "band_ibc_params"),
    9: .standard(proto: "band_ibc_latest_client_id"),
    10: .standard(proto: "calldata_records"),
    11: .standard(proto: "band_ibc_latest_request_id"),
    12: .standard(proto: "chainlink_price_states"),
    13: .standard(proto: "historical_price_records"),
    14: .standard(proto: "provider_states"),
    15: .standard(proto: "pyth_price_states"),
  ]

  fileprivate class _StorageClass {
    var _params: Injective_Oracle_V1beta1_Params? = nil
    var _bandRelayers: [String] = []
    var _bandPriceStates: [Injective_Oracle_V1beta1_BandPriceState] = []
    var _priceFeedPriceStates: [Injective_Oracle_V1beta1_PriceFeedState] = []
    var _coinbasePriceStates: [Injective_Oracle_V1beta1_CoinbasePriceState] = []
    var _bandIbcPriceStates: [Injective_Oracle_V1beta1_BandPriceState] = []
    var _bandIbcOracleRequests: [Injective_Oracle_V1beta1_BandOracleRequest] = []
    var _bandIbcParams: Injective_Oracle_V1beta1_BandIBCParams? = nil
    var _bandIbcLatestClientID: UInt64 = 0
    var _calldataRecords: [Injective_Oracle_V1beta1_CalldataRecord] = []
    var _bandIbcLatestRequestID: UInt64 = 0
    var _chainlinkPriceStates: [Injective_Oracle_V1beta1_ChainlinkPriceState] = []
    var _historicalPriceRecords: [Injective_Oracle_V1beta1_PriceRecords] = []
    var _providerStates: [Injective_Oracle_V1beta1_ProviderState] = []
    var _pythPriceStates: [Injective_Oracle_V1beta1_PythPriceState] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _bandRelayers = source._bandRelayers
      _bandPriceStates = source._bandPriceStates
      _priceFeedPriceStates = source._priceFeedPriceStates
      _coinbasePriceStates = source._coinbasePriceStates
      _bandIbcPriceStates = source._bandIbcPriceStates
      _bandIbcOracleRequests = source._bandIbcOracleRequests
      _bandIbcParams = source._bandIbcParams
      _bandIbcLatestClientID = source._bandIbcLatestClientID
      _calldataRecords = source._calldataRecords
      _bandIbcLatestRequestID = source._bandIbcLatestRequestID
      _chainlinkPriceStates = source._chainlinkPriceStates
      _historicalPriceRecords = source._historicalPriceRecords
      _providerStates = source._providerStates
      _pythPriceStates = source._pythPriceStates
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._bandRelayers) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._bandPriceStates) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._priceFeedPriceStates) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._coinbasePriceStates) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._bandIbcPriceStates) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._bandIbcOracleRequests) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._bandIbcParams) }()
        case 9: try { try decoder.decodeSingularUInt64Field(value: &_storage._bandIbcLatestClientID) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._calldataRecords) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._bandIbcLatestRequestID) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._chainlinkPriceStates) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._historicalPriceRecords) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._providerStates) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._pythPriceStates) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._bandRelayers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._bandRelayers, fieldNumber: 2)
      }
      if !_storage._bandPriceStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bandPriceStates, fieldNumber: 3)
      }
      if !_storage._priceFeedPriceStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._priceFeedPriceStates, fieldNumber: 4)
      }
      if !_storage._coinbasePriceStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._coinbasePriceStates, fieldNumber: 5)
      }
      if !_storage._bandIbcPriceStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bandIbcPriceStates, fieldNumber: 6)
      }
      if !_storage._bandIbcOracleRequests.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bandIbcOracleRequests, fieldNumber: 7)
      }
      try { if let v = _storage._bandIbcParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._bandIbcLatestClientID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._bandIbcLatestClientID, fieldNumber: 9)
      }
      if !_storage._calldataRecords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._calldataRecords, fieldNumber: 10)
      }
      if _storage._bandIbcLatestRequestID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._bandIbcLatestRequestID, fieldNumber: 11)
      }
      if !_storage._chainlinkPriceStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chainlinkPriceStates, fieldNumber: 12)
      }
      if !_storage._historicalPriceRecords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._historicalPriceRecords, fieldNumber: 13)
      }
      if !_storage._providerStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._providerStates, fieldNumber: 14)
      }
      if !_storage._pythPriceStates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pythPriceStates, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Oracle_V1beta1_GenesisState, rhs: Injective_Oracle_V1beta1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._bandRelayers != rhs_storage._bandRelayers {return false}
        if _storage._bandPriceStates != rhs_storage._bandPriceStates {return false}
        if _storage._priceFeedPriceStates != rhs_storage._priceFeedPriceStates {return false}
        if _storage._coinbasePriceStates != rhs_storage._coinbasePriceStates {return false}
        if _storage._bandIbcPriceStates != rhs_storage._bandIbcPriceStates {return false}
        if _storage._bandIbcOracleRequests != rhs_storage._bandIbcOracleRequests {return false}
        if _storage._bandIbcParams != rhs_storage._bandIbcParams {return false}
        if _storage._bandIbcLatestClientID != rhs_storage._bandIbcLatestClientID {return false}
        if _storage._calldataRecords != rhs_storage._calldataRecords {return false}
        if _storage._bandIbcLatestRequestID != rhs_storage._bandIbcLatestRequestID {return false}
        if _storage._chainlinkPriceStates != rhs_storage._chainlinkPriceStates {return false}
        if _storage._historicalPriceRecords != rhs_storage._historicalPriceRecords {return false}
        if _storage._providerStates != rhs_storage._providerStates {return false}
        if _storage._pythPriceStates != rhs_storage._pythPriceStates {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Oracle_V1beta1_CalldataRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalldataRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "calldata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.calldata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularUInt64Field(value: self.clientID, fieldNumber: 1)
    }
    if !self.calldata.isEmpty {
      try visitor.visitSingularBytesField(value: self.calldata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Oracle_V1beta1_CalldataRecord, rhs: Injective_Oracle_V1beta1_CalldataRecord) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.calldata != rhs.calldata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
