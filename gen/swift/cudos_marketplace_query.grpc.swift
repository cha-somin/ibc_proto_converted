//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cudos/marketplace/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cudoventures_Cudosnode_Marketplace_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cudoventures_Cudosnode_Marketplace_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>

  func collection(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>

  func collectionAll(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>

  func nft(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>

  func nftAll(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>

  func collectionByDenomId(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>

  func listAdmins(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>
}

extension Cudoventures_Cudosnode_Marketplace_QueryClientProtocol {
  internal var serviceName: String {
    return "cudoventures.cudosnode.marketplace.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, Cudoventures_Cudosnode_Marketplace_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a Collection for sale by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Collection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collection(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  /// Queries all Collection items for sale.
  ///
  /// - Parameters:
  ///   - request: Request to send to CollectionAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collectionAll(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionAllInterceptors() ?? []
    )
  }

  /// Queries a Nft for sale by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Nft.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nft(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNftInterceptors() ?? []
    )
  }

  /// Queries all Nft items for sale.
  ///
  /// - Parameters:
  ///   - request: Request to send to NftAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nftAll(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nftAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNftAllInterceptors() ?? []
    )
  }

  /// Queries a list of CollectionByDenomId items.
  ///
  /// - Parameters:
  ///   - request: Request to send to CollectionByDenomId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collectionByDenomId(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionByDenomId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionByDenomIdInterceptors() ?? []
    )
  }

  /// Queries a list of ListAdmins items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAdmins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listAdmins(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse> {
    return self.makeUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.listAdmins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAdminsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cudoventures_Cudosnode_Marketplace_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cudoventures_Cudosnode_Marketplace_QueryNIOClient")
internal final class Cudoventures_Cudosnode_Marketplace_QueryClient: Cudoventures_Cudosnode_Marketplace_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cudoventures.cudosnode.marketplace.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cudoventures_Cudosnode_Marketplace_QueryNIOClient: Cudoventures_Cudosnode_Marketplace_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cudoventures.cudosnode.marketplace.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cudoventures_Cudosnode_Marketplace_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>

  func makeCollectionCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>

  func makeCollectionAllCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>

  func makeNftCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>

  func makeNftAllCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>

  func makeCollectionByDenomIDCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>

  func makeListAdminsCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudoventures_Cudosnode_Marketplace_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, Cudoventures_Cudosnode_Marketplace_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeCollectionCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func makeCollectionAllCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionAllInterceptors() ?? []
    )
  }

  internal func makeNftCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNftInterceptors() ?? []
    )
  }

  internal func makeNftAllCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nftAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNftAllInterceptors() ?? []
    )
  }

  internal func makeCollectionByDenomIDCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionByDenomId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionByDenomIdInterceptors() ?? []
    )
  }

  internal func makeListAdminsCall(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.listAdmins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAdminsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudoventures_Cudosnode_Marketplace_QueryAsyncClientProtocol {
  internal func params(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func collection(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func collectionAll(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionAllInterceptors() ?? []
    )
  }

  internal func nft(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nft.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNftInterceptors() ?? []
    )
  }

  internal func nftAll(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nftAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNftAllInterceptors() ?? []
    )
  }

  internal func collectionByDenomId(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionByDenomId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionByDenomIdInterceptors() ?? []
    )
  }

  internal func listAdmins(
    _ request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.listAdmins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAdminsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cudoventures_Cudosnode_Marketplace_QueryAsyncClient: Cudoventures_Cudosnode_Marketplace_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cudoventures_Cudosnode_Marketplace_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'collection'.
  func makeCollectionInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>]

  /// - Returns: Interceptors to use when invoking 'collectionAll'.
  func makeCollectionAllInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>]

  /// - Returns: Interceptors to use when invoking 'nft'.
  func makeNftInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>]

  /// - Returns: Interceptors to use when invoking 'nftAll'.
  func makeNftAllInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>]

  /// - Returns: Interceptors to use when invoking 'collectionByDenomId'.
  func makeCollectionByDenomIdInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>]

  /// - Returns: Interceptors to use when invoking 'listAdmins'.
  func makeListAdminsInterceptors() -> [ClientInterceptor<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>]
}

internal enum Cudoventures_Cudosnode_Marketplace_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cudoventures.cudosnode.marketplace.Query",
    methods: [
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.params,
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collection,
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionAll,
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nft,
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.nftAll,
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.collectionByDenomId,
      Cudoventures_Cudosnode_Marketplace_QueryClientMetadata.Methods.listAdmins,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cudoventures.cudosnode.marketplace.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/cudoventures.cudosnode.marketplace.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let collectionAll = GRPCMethodDescriptor(
      name: "CollectionAll",
      path: "/cudoventures.cudosnode.marketplace.Query/CollectionAll",
      type: GRPCCallType.unary
    )

    internal static let nft = GRPCMethodDescriptor(
      name: "Nft",
      path: "/cudoventures.cudosnode.marketplace.Query/Nft",
      type: GRPCCallType.unary
    )

    internal static let nftAll = GRPCMethodDescriptor(
      name: "NftAll",
      path: "/cudoventures.cudosnode.marketplace.Query/NftAll",
      type: GRPCCallType.unary
    )

    internal static let collectionByDenomId = GRPCMethodDescriptor(
      name: "CollectionByDenomId",
      path: "/cudoventures.cudosnode.marketplace.Query/CollectionByDenomId",
      type: GRPCCallType.unary
    )

    internal static let listAdmins = GRPCMethodDescriptor(
      name: "ListAdmins",
      path: "/cudoventures.cudosnode.marketplace.Query/ListAdmins",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cudoventures_Cudosnode_Marketplace_QueryProvider: CallHandlerProvider {
  var interceptors: Cudoventures_Cudosnode_Marketplace_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>

  /// Queries a Collection for sale by id.
  func collection(request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>

  /// Queries all Collection items for sale.
  func collectionAll(request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>

  /// Queries a Nft for sale by id.
  func nft(request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>

  /// Queries all Nft items for sale.
  func nftAll(request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>

  /// Queries a list of CollectionByDenomId items.
  func collectionByDenomId(request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>

  /// Queries a list of ListAdmins items.
  func listAdmins(request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>
}

extension Cudoventures_Cudosnode_Marketplace_QueryProvider {
  internal var serviceName: Substring {
    return Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Collection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        userFunction: self.collection(request:context:)
      )

    case "CollectionAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionAllInterceptors() ?? [],
        userFunction: self.collectionAll(request:context:)
      )

    case "Nft":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>(),
        interceptors: self.interceptors?.makeNftInterceptors() ?? [],
        userFunction: self.nft(request:context:)
      )

    case "NftAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>(),
        interceptors: self.interceptors?.makeNftAllInterceptors() ?? [],
        userFunction: self.nftAll(request:context:)
      )

    case "CollectionByDenomId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>(),
        interceptors: self.interceptors?.makeCollectionByDenomIdInterceptors() ?? [],
        userFunction: self.collectionByDenomId(request:context:)
      )

    case "ListAdmins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>(),
        interceptors: self.interceptors?.makeListAdminsInterceptors() ?? [],
        userFunction: self.listAdmins(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cudoventures_Cudosnode_Marketplace_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cudoventures_Cudosnode_Marketplace_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Cudoventures_Cudosnode_Marketplace_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryParamsResponse

  /// Queries a Collection for sale by id.
  @Sendable func collection(
    request: Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse

  /// Queries all Collection items for sale.
  @Sendable func collectionAll(
    request: Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse

  /// Queries a Nft for sale by id.
  @Sendable func nft(
    request: Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse

  /// Queries all Nft items for sale.
  @Sendable func nftAll(
    request: Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse

  /// Queries a list of CollectionByDenomId items.
  @Sendable func collectionByDenomId(
    request: Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse

  /// Queries a list of ListAdmins items.
  @Sendable func listAdmins(
    request: Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cudoventures_Cudosnode_Marketplace_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cudoventures_Cudosnode_Marketplace_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Collection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        wrapping: self.collection(request:context:)
      )

    case "CollectionAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionAllInterceptors() ?? [],
        wrapping: self.collectionAll(request:context:)
      )

    case "Nft":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>(),
        interceptors: self.interceptors?.makeNftInterceptors() ?? [],
        wrapping: self.nft(request:context:)
      )

    case "NftAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>(),
        interceptors: self.interceptors?.makeNftAllInterceptors() ?? [],
        wrapping: self.nftAll(request:context:)
      )

    case "CollectionByDenomId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>(),
        interceptors: self.interceptors?.makeCollectionByDenomIdInterceptors() ?? [],
        wrapping: self.collectionByDenomId(request:context:)
      )

    case "ListAdmins":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest>(),
        responseSerializer: ProtobufSerializer<Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>(),
        interceptors: self.interceptors?.makeListAdminsInterceptors() ?? [],
        wrapping: self.listAdmins(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cudoventures_Cudosnode_Marketplace_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryParamsRequest, Cudoventures_Cudosnode_Marketplace_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'collection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryGetCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryGetCollectionResponse>]

  /// - Returns: Interceptors to use when handling 'collectionAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionAllInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryAllCollectionRequest, Cudoventures_Cudosnode_Marketplace_QueryAllCollectionResponse>]

  /// - Returns: Interceptors to use when handling 'nft'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNftInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryGetNftRequest, Cudoventures_Cudosnode_Marketplace_QueryGetNftResponse>]

  /// - Returns: Interceptors to use when handling 'nftAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNftAllInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryAllNftRequest, Cudoventures_Cudosnode_Marketplace_QueryAllNftResponse>]

  /// - Returns: Interceptors to use when handling 'collectionByDenomId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionByDenomIdInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdRequest, Cudoventures_Cudosnode_Marketplace_QueryCollectionByDenomIdResponse>]

  /// - Returns: Interceptors to use when handling 'listAdmins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListAdminsInterceptors() -> [ServerInterceptor<Cudoventures_Cudosnode_Marketplace_QueryListAdminsRequest, Cudoventures_Cudosnode_Marketplace_QueryListAdminsResponse>]
}

internal enum Cudoventures_Cudosnode_Marketplace_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cudoventures.cudosnode.marketplace.Query",
    methods: [
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.params,
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.collection,
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.collectionAll,
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.nft,
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.nftAll,
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.collectionByDenomId,
      Cudoventures_Cudosnode_Marketplace_QueryServerMetadata.Methods.listAdmins,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cudoventures.cudosnode.marketplace.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/cudoventures.cudosnode.marketplace.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let collectionAll = GRPCMethodDescriptor(
      name: "CollectionAll",
      path: "/cudoventures.cudosnode.marketplace.Query/CollectionAll",
      type: GRPCCallType.unary
    )

    internal static let nft = GRPCMethodDescriptor(
      name: "Nft",
      path: "/cudoventures.cudosnode.marketplace.Query/Nft",
      type: GRPCCallType.unary
    )

    internal static let nftAll = GRPCMethodDescriptor(
      name: "NftAll",
      path: "/cudoventures.cudosnode.marketplace.Query/NftAll",
      type: GRPCCallType.unary
    )

    internal static let collectionByDenomId = GRPCMethodDescriptor(
      name: "CollectionByDenomId",
      path: "/cudoventures.cudosnode.marketplace.Query/CollectionByDenomId",
      type: GRPCCallType.unary
    )

    internal static let listAdmins = GRPCMethodDescriptor(
      name: "ListAdmins",
      path: "/cudoventures.cudosnode.marketplace.Query/ListAdmins",
      type: GRPCCallType.unary
    )
  }
}
