// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: zrchain/treasury/wallet.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// WalletType specifies the Layer 1 blockchain that this wallet will be used
/// for.
enum Zrchain_Treasury_WalletType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// The wallet type is missing (all wallets will be derived)
  case unspecified // = 0

  /// The wallet type for native cosmos accounts
  case native // = 1

  /// The wallet type for mainnet ETH and its ERC-20 tokens
  case evm // = 2

  /// The Wallet type for Testnet BTC
  case btcTestnet // = 3

  /// The Wallet type for Mainnet BTC
  case btcMainnet // = 4

  /// The Wallet type for RegNet - Local Test Network
  case btcRegnet // = 5

  /// Wallet type for Solana
  case solana // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .native
    case 2: self = .evm
    case 3: self = .btcTestnet
    case 4: self = .btcMainnet
    case 5: self = .btcRegnet
    case 6: self = .solana
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .native: return 1
    case .evm: return 2
    case .btcTestnet: return 3
    case .btcMainnet: return 4
    case .btcRegnet: return 5
    case .solana: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Zrchain_Treasury_WalletType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Zrchain_Treasury_WalletType] = [
    .unspecified,
    .native,
    .evm,
    .btcTestnet,
    .btcMainnet,
    .btcRegnet,
    .solana,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Zrchain_Treasury_WalletType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Zrchain_Treasury_WalletType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WALLET_TYPE_UNSPECIFIED"),
    1: .same(proto: "WALLET_TYPE_NATIVE"),
    2: .same(proto: "WALLET_TYPE_EVM"),
    3: .same(proto: "WALLET_TYPE_BTC_TESTNET"),
    4: .same(proto: "WALLET_TYPE_BTC_MAINNET"),
    5: .same(proto: "WALLET_TYPE_BTC_REGNET"),
    6: .same(proto: "WALLET_TYPE_SOLANA"),
  ]
}
