// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/transfer/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Transfer_MsgTransfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the port on which the packet will be sent
  var sourcePort: String = String()

  /// the channel by which the packet will be sent
  var sourceChannel: String = String()

  /// the tokens to be transferred
  var token: Cosmos_Base_V1beta1_Coin {
    get {return _token ?? Cosmos_Base_V1beta1_Coin()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  /// the sender address
  var sender: String = String()

  /// the recipient address on the destination chain
  var receiver: String = String()

  /// Timeout height relative to the current block height.
  /// The timeout is disabled when set to 0.
  var timeoutHeight: Ibc_Core_Client_V1_Height {
    get {return _timeoutHeight ?? Ibc_Core_Client_V1_Height()}
    set {_timeoutHeight = newValue}
  }
  /// Returns true if `timeoutHeight` has been explicitly set.
  var hasTimeoutHeight: Bool {return self._timeoutHeight != nil}
  /// Clears the value of `timeoutHeight`. Subsequent reads from it will return its default value.
  mutating func clearTimeoutHeight() {self._timeoutHeight = nil}

  /// Timeout timestamp in absolute nanoseconds since unix epoch.
  /// The timeout is disabled when set to 0.
  var timeoutTimestamp: UInt64 = 0

  var memo: String = String()

  var fee: Neutron_Feerefunder_Fee {
    get {return _fee ?? Neutron_Feerefunder_Fee()}
    set {_fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  var hasFee: Bool {return self._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  mutating func clearFee() {self._fee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _token: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _timeoutHeight: Ibc_Core_Client_V1_Height? = nil
  fileprivate var _fee: Neutron_Feerefunder_Fee? = nil
}

/// MsgTransferResponse is the modified response type for
/// ibc-go MsgTransfer.
struct Neutron_Transfer_MsgTransferResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// channel's sequence_id for outgoing ibc packet. Unique per a channel.
  var sequenceID: UInt64 = 0

  /// channel src channel on neutron side trasaction was submitted from
  var channel: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Transfer_MsgTransfer: @unchecked Sendable {}
extension Neutron_Transfer_MsgTransferResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.transfer"

extension Neutron_Transfer_MsgTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTransfer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_port"),
    2: .standard(proto: "source_channel"),
    3: .same(proto: "token"),
    4: .same(proto: "sender"),
    5: .same(proto: "receiver"),
    6: .standard(proto: "timeout_height"),
    7: .standard(proto: "timeout_timestamp"),
    8: .same(proto: "memo"),
    9: .same(proto: "fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourcePort) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceChannel) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timeoutHeight) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.timeoutTimestamp) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._fee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sourcePort.isEmpty {
      try visitor.visitSingularStringField(value: self.sourcePort, fieldNumber: 1)
    }
    if !self.sourceChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceChannel, fieldNumber: 2)
    }
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 4)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 5)
    }
    try { if let v = self._timeoutHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.timeoutTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeoutTimestamp, fieldNumber: 7)
    }
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 8)
    }
    try { if let v = self._fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Transfer_MsgTransfer, rhs: Neutron_Transfer_MsgTransfer) -> Bool {
    if lhs.sourcePort != rhs.sourcePort {return false}
    if lhs.sourceChannel != rhs.sourceChannel {return false}
    if lhs._token != rhs._token {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs._timeoutHeight != rhs._timeoutHeight {return false}
    if lhs.timeoutTimestamp != rhs.timeoutTimestamp {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs._fee != rhs._fee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutron_Transfer_MsgTransferResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTransferResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sequence_id"),
    2: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequenceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequenceID, fieldNumber: 1)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Transfer_MsgTransferResponse, rhs: Neutron_Transfer_MsgTransferResponse) -> Bool {
    if lhs.sequenceID != rhs.sequenceID {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
