// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: eth/evm/v1/evm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Copyright (c) 2023-2024 Nibi, Inc.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// FunToken is a fungible token mapping between a Bank Coin and a corresponding
/// ERC-20 smart contract. Bank Coins here refer to tokens like NIBI, IBC
/// coins (ICS-20), and token factory coins, which are each represented by the
/// "Coin" type in Golang.
struct Eth_Evm_V1_FunToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hexadecimal address of the ERC20 token to which the `FunToken` maps
  var erc20Addr: String = String()

  /// bank_denom: Coin denomination in the Bank Module.
  var bankDenom: String = String()

  /// True if the `FunToken` mapping was created from an existing Bank Coin and
  /// the ERC-20 contract gets deployed by the module account. False if the
  /// mapping was created from an externally owned ERC-20 contract.
  var isMadeFromCoin: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Params defines the EVM module parameters
struct Eth_Evm_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// extra_eips defines the additional EIPs for the vm.Config
  var extraEips: [Int64] = []

  /// evm_channels is the list of channel identifiers from EVM compatible chains
  var evmChannels: [String] = []

  /// Fee deducted and burned when calling "CreateFunToken" in units of
  /// "evm_denom".
  var createFuntokenFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// State represents a single Storage key value pair item.
struct Eth_Evm_V1_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// key is the stored key
  var key: String = String()

  /// value is the stored value for the given key
  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Log represents an protobuf compatible Ethereum Log that defines a contract
/// log event. These events are generated by the LOG opcode and stored/indexed by
/// the node.
///
/// NOTE: address, topics and data are consensus fields. The rest of the fields
/// are derived, i.e. filled in by the nodes, but not secured by consensus.
struct Eth_Evm_V1_Log {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of the contract that generated the event
  var address: String = String()

  /// topics is a list of topics provided by the contract.
  var topics: [String] = []

  /// data which is supplied by the contract, usually ABI-encoded
  var data: Data = Data()

  /// block_number of the block in which the transaction was included
  var blockNumber: UInt64 = 0

  /// tx_hash is the transaction hash
  var txHash: String = String()

  /// tx_index of the transaction in the block
  var txIndex: UInt64 = 0

  /// block_hash of the block in which the transaction was included
  var blockHash: String = String()

  /// index of the log in the block
  var index: UInt64 = 0

  /// removed is true if this log was reverted due to a chain
  /// reorganisation. You must pay attention to this field if you receive logs
  /// through a filter query.
  var removed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AccessTuple is the element type of an access list.
struct Eth_Evm_V1_AccessTuple {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is a hex formatted ethereum address
  var address: String = String()

  /// storage_keys are hex formatted hashes of the storage keys
  var storageKeys: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TracerConfig stores additional tracer args. For geth it's only one attr:
/// onlyTopCall
struct Eth_Evm_V1_TracerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var onlyTopCall: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TraceConfig holds extra parameters to trace functions.
struct Eth_Evm_V1_TraceConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// tracer is a custom javascript tracer
  var tracer: String = String()

  /// timeout overrides the default timeout of 5 seconds for JavaScript-based
  /// tracing calls
  var timeout: String = String()

  /// reexec defines the number of blocks the tracer is willing to go back
  var reexec: UInt64 = 0

  /// disable_stack switches stack capture
  var disableStack: Bool = false

  /// disable_storage switches storage capture
  var disableStorage: Bool = false

  /// debug can be used to print output during capture end
  var debug: Bool = false

  /// limit defines the maximum length of output, but zero means unlimited
  var limit: Int32 = 0

  /// enable_memory switches memory capture
  var enableMemory: Bool = false

  /// enable_return_data switches the capture of return data
  var enableReturnData: Bool = false

  /// tracer_config configures the tracer options
  var tracerConfig: Eth_Evm_V1_TracerConfig {
    get {return _tracerConfig ?? Eth_Evm_V1_TracerConfig()}
    set {_tracerConfig = newValue}
  }
  /// Returns true if `tracerConfig` has been explicitly set.
  var hasTracerConfig: Bool {return self._tracerConfig != nil}
  /// Clears the value of `tracerConfig`. Subsequent reads from it will return its default value.
  mutating func clearTracerConfig() {self._tracerConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tracerConfig: Eth_Evm_V1_TracerConfig? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Eth_Evm_V1_FunToken: @unchecked Sendable {}
extension Eth_Evm_V1_Params: @unchecked Sendable {}
extension Eth_Evm_V1_State: @unchecked Sendable {}
extension Eth_Evm_V1_Log: @unchecked Sendable {}
extension Eth_Evm_V1_AccessTuple: @unchecked Sendable {}
extension Eth_Evm_V1_TracerConfig: @unchecked Sendable {}
extension Eth_Evm_V1_TraceConfig: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "eth.evm.v1"

extension Eth_Evm_V1_FunToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FunToken"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "erc20_addr"),
    2: .standard(proto: "bank_denom"),
    3: .standard(proto: "is_made_from_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.erc20Addr) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bankDenom) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isMadeFromCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.erc20Addr.isEmpty {
      try visitor.visitSingularStringField(value: self.erc20Addr, fieldNumber: 1)
    }
    if !self.bankDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.bankDenom, fieldNumber: 2)
    }
    if self.isMadeFromCoin != false {
      try visitor.visitSingularBoolField(value: self.isMadeFromCoin, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_FunToken, rhs: Eth_Evm_V1_FunToken) -> Bool {
    if lhs.erc20Addr != rhs.erc20Addr {return false}
    if lhs.bankDenom != rhs.bankDenom {return false}
    if lhs.isMadeFromCoin != rhs.isMadeFromCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "extra_eips"),
    8: .standard(proto: "evm_channels"),
    9: .standard(proto: "create_funtoken_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.extraEips) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.evmChannels) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.createFuntokenFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.extraEips.isEmpty {
      try visitor.visitPackedInt64Field(value: self.extraEips, fieldNumber: 4)
    }
    if !self.evmChannels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.evmChannels, fieldNumber: 8)
    }
    if !self.createFuntokenFee.isEmpty {
      try visitor.visitSingularStringField(value: self.createFuntokenFee, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_Params, rhs: Eth_Evm_V1_Params) -> Bool {
    if lhs.extraEips != rhs.extraEips {return false}
    if lhs.evmChannels != rhs.evmChannels {return false}
    if lhs.createFuntokenFee != rhs.createFuntokenFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_State, rhs: Eth_Evm_V1_State) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "topics"),
    3: .same(proto: "data"),
    4: .standard(proto: "block_number"),
    5: .standard(proto: "tx_hash"),
    6: .standard(proto: "tx_index"),
    7: .standard(proto: "block_hash"),
    8: .same(proto: "index"),
    9: .same(proto: "removed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.topics) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.blockNumber) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.txHash) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.txIndex) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.blockHash) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.removed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.topics.isEmpty {
      try visitor.visitRepeatedStringField(value: self.topics, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNumber, fieldNumber: 4)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 5)
    }
    if self.txIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.txIndex, fieldNumber: 6)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 7)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 8)
    }
    if self.removed != false {
      try visitor.visitSingularBoolField(value: self.removed, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_Log, rhs: Eth_Evm_V1_Log) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.topics != rhs.topics {return false}
    if lhs.data != rhs.data {return false}
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.txIndex != rhs.txIndex {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.removed != rhs.removed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_AccessTuple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessTuple"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "storage_keys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.storageKeys) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.storageKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.storageKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_AccessTuple, rhs: Eth_Evm_V1_AccessTuple) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.storageKeys != rhs.storageKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_TracerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TracerConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "only_top_call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.onlyTopCall) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.onlyTopCall != false {
      try visitor.visitSingularBoolField(value: self.onlyTopCall, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_TracerConfig, rhs: Eth_Evm_V1_TracerConfig) -> Bool {
    if lhs.onlyTopCall != rhs.onlyTopCall {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_TraceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TraceConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tracer"),
    2: .same(proto: "timeout"),
    3: .same(proto: "reexec"),
    5: .standard(proto: "disable_stack"),
    6: .standard(proto: "disable_storage"),
    8: .same(proto: "debug"),
    9: .same(proto: "limit"),
    11: .standard(proto: "enable_memory"),
    12: .standard(proto: "enable_return_data"),
    13: .standard(proto: "tracer_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tracer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.timeout) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.reexec) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.disableStack) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.disableStorage) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.debug) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.enableMemory) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.enableReturnData) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._tracerConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.tracer.isEmpty {
      try visitor.visitSingularStringField(value: self.tracer, fieldNumber: 1)
    }
    if !self.timeout.isEmpty {
      try visitor.visitSingularStringField(value: self.timeout, fieldNumber: 2)
    }
    if self.reexec != 0 {
      try visitor.visitSingularUInt64Field(value: self.reexec, fieldNumber: 3)
    }
    if self.disableStack != false {
      try visitor.visitSingularBoolField(value: self.disableStack, fieldNumber: 5)
    }
    if self.disableStorage != false {
      try visitor.visitSingularBoolField(value: self.disableStorage, fieldNumber: 6)
    }
    if self.debug != false {
      try visitor.visitSingularBoolField(value: self.debug, fieldNumber: 8)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 9)
    }
    if self.enableMemory != false {
      try visitor.visitSingularBoolField(value: self.enableMemory, fieldNumber: 11)
    }
    if self.enableReturnData != false {
      try visitor.visitSingularBoolField(value: self.enableReturnData, fieldNumber: 12)
    }
    try { if let v = self._tracerConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_TraceConfig, rhs: Eth_Evm_V1_TraceConfig) -> Bool {
    if lhs.tracer != rhs.tracer {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.reexec != rhs.reexec {return false}
    if lhs.disableStack != rhs.disableStack {return false}
    if lhs.disableStorage != rhs.disableStorage {return false}
    if lhs.debug != rhs.debug {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.enableMemory != rhs.enableMemory {return false}
    if lhs.enableReturnData != rhs.enableReturnData {return false}
    if lhs._tracerConfig != rhs._tracerConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
