// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stride/stakeibc/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the module.
/// next id: 18
struct Stride_Stakeibc_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// define epoch lengths, in stride_epochs
  var rewardsInterval: UInt64 = 0

  var delegateInterval: UInt64 = 0

  var depositInterval: UInt64 = 0

  var redemptionRateInterval: UInt64 = 0

  var strideCommission: UInt64 = 0

  var reinvestInterval: UInt64 = 0

  var icaTimeoutNanos: UInt64 = 0

  var bufferSize: UInt64 = 0

  var ibcTimeoutBlocks: UInt64 = 0

  var feeTransferTimeoutNanos: UInt64 = 0

  var maxStakeIcaCallsPerEpoch: UInt64 = 0

  var defaultMinRedemptionRateThreshold: UInt64 = 0

  var defaultMaxRedemptionRateThreshold: UInt64 = 0

  var ibcTransferTimeoutNanos: UInt64 = 0

  var safetyNumValidators: UInt64 = 0

  var safetyMaxSlashPercent: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stride_Stakeibc_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stride.stakeibc"

extension Stride_Stakeibc_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rewards_interval"),
    6: .standard(proto: "delegate_interval"),
    2: .standard(proto: "deposit_interval"),
    3: .standard(proto: "redemption_rate_interval"),
    4: .standard(proto: "stride_commission"),
    7: .standard(proto: "reinvest_interval"),
    9: .standard(proto: "ica_timeout_nanos"),
    10: .standard(proto: "buffer_size"),
    11: .standard(proto: "ibc_timeout_blocks"),
    12: .standard(proto: "fee_transfer_timeout_nanos"),
    13: .standard(proto: "max_stake_ica_calls_per_epoch"),
    14: .standard(proto: "default_min_redemption_rate_threshold"),
    15: .standard(proto: "default_max_redemption_rate_threshold"),
    16: .standard(proto: "ibc_transfer_timeout_nanos"),
    17: .standard(proto: "safety_num_validators"),
    18: .standard(proto: "safety_max_slash_percent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.rewardsInterval) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.depositInterval) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.redemptionRateInterval) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.strideCommission) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.delegateInterval) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.reinvestInterval) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.icaTimeoutNanos) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.bufferSize) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.ibcTimeoutBlocks) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.feeTransferTimeoutNanos) }()
      case 13: try { try decoder.decodeSingularUInt64Field(value: &self.maxStakeIcaCallsPerEpoch) }()
      case 14: try { try decoder.decodeSingularUInt64Field(value: &self.defaultMinRedemptionRateThreshold) }()
      case 15: try { try decoder.decodeSingularUInt64Field(value: &self.defaultMaxRedemptionRateThreshold) }()
      case 16: try { try decoder.decodeSingularUInt64Field(value: &self.ibcTransferTimeoutNanos) }()
      case 17: try { try decoder.decodeSingularUInt64Field(value: &self.safetyNumValidators) }()
      case 18: try { try decoder.decodeSingularUInt64Field(value: &self.safetyMaxSlashPercent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rewardsInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.rewardsInterval, fieldNumber: 1)
    }
    if self.depositInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositInterval, fieldNumber: 2)
    }
    if self.redemptionRateInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.redemptionRateInterval, fieldNumber: 3)
    }
    if self.strideCommission != 0 {
      try visitor.visitSingularUInt64Field(value: self.strideCommission, fieldNumber: 4)
    }
    if self.delegateInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.delegateInterval, fieldNumber: 6)
    }
    if self.reinvestInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.reinvestInterval, fieldNumber: 7)
    }
    if self.icaTimeoutNanos != 0 {
      try visitor.visitSingularUInt64Field(value: self.icaTimeoutNanos, fieldNumber: 9)
    }
    if self.bufferSize != 0 {
      try visitor.visitSingularUInt64Field(value: self.bufferSize, fieldNumber: 10)
    }
    if self.ibcTimeoutBlocks != 0 {
      try visitor.visitSingularUInt64Field(value: self.ibcTimeoutBlocks, fieldNumber: 11)
    }
    if self.feeTransferTimeoutNanos != 0 {
      try visitor.visitSingularUInt64Field(value: self.feeTransferTimeoutNanos, fieldNumber: 12)
    }
    if self.maxStakeIcaCallsPerEpoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxStakeIcaCallsPerEpoch, fieldNumber: 13)
    }
    if self.defaultMinRedemptionRateThreshold != 0 {
      try visitor.visitSingularUInt64Field(value: self.defaultMinRedemptionRateThreshold, fieldNumber: 14)
    }
    if self.defaultMaxRedemptionRateThreshold != 0 {
      try visitor.visitSingularUInt64Field(value: self.defaultMaxRedemptionRateThreshold, fieldNumber: 15)
    }
    if self.ibcTransferTimeoutNanos != 0 {
      try visitor.visitSingularUInt64Field(value: self.ibcTransferTimeoutNanos, fieldNumber: 16)
    }
    if self.safetyNumValidators != 0 {
      try visitor.visitSingularUInt64Field(value: self.safetyNumValidators, fieldNumber: 17)
    }
    if self.safetyMaxSlashPercent != 0 {
      try visitor.visitSingularUInt64Field(value: self.safetyMaxSlashPercent, fieldNumber: 18)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stride_Stakeibc_Params, rhs: Stride_Stakeibc_Params) -> Bool {
    if lhs.rewardsInterval != rhs.rewardsInterval {return false}
    if lhs.delegateInterval != rhs.delegateInterval {return false}
    if lhs.depositInterval != rhs.depositInterval {return false}
    if lhs.redemptionRateInterval != rhs.redemptionRateInterval {return false}
    if lhs.strideCommission != rhs.strideCommission {return false}
    if lhs.reinvestInterval != rhs.reinvestInterval {return false}
    if lhs.icaTimeoutNanos != rhs.icaTimeoutNanos {return false}
    if lhs.bufferSize != rhs.bufferSize {return false}
    if lhs.ibcTimeoutBlocks != rhs.ibcTimeoutBlocks {return false}
    if lhs.feeTransferTimeoutNanos != rhs.feeTransferTimeoutNanos {return false}
    if lhs.maxStakeIcaCallsPerEpoch != rhs.maxStakeIcaCallsPerEpoch {return false}
    if lhs.defaultMinRedemptionRateThreshold != rhs.defaultMinRedemptionRateThreshold {return false}
    if lhs.defaultMaxRedemptionRateThreshold != rhs.defaultMaxRedemptionRateThreshold {return false}
    if lhs.ibcTransferTimeoutNanos != rhs.ibcTransferTimeoutNanos {return false}
    if lhs.safetyNumValidators != rhs.safetyNumValidators {return false}
    if lhs.safetyMaxSlashPercent != rhs.safetyMaxSlashPercent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
