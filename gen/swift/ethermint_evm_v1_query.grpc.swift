//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ethermint/evm/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Ethermint_Evm_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ethermint_Evm_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? { get }

  func account(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>

  func cosmosAccount(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>

  func validatorAccount(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>

  func balance(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>

  func storage(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>

  func code(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>

  func params(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>

  func ethCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>

  func estimateGas(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>

  func traceTx(
    _ request: Ethermint_Evm_V1_QueryTraceTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryTraceTxRequest, Ethermint_Evm_V1_QueryTraceTxResponse>

  func traceBlock(
    _ request: Ethermint_Evm_V1_QueryTraceBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryTraceBlockRequest, Ethermint_Evm_V1_QueryTraceBlockResponse>

  func baseFee(
    _ request: Ethermint_Evm_V1_QueryBaseFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBaseFeeRequest, Ethermint_Evm_V1_QueryBaseFeeResponse>
}

extension Ethermint_Evm_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "ethermint.evm.v1.Query"
  }

  /// Account queries an Ethereum account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Account.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func account(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  /// CosmosAccount queries an Ethereum account's Cosmos Address.
  ///
  /// - Parameters:
  ///   - request: Request to send to CosmosAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cosmosAccount(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.cosmosAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? []
    )
  }

  /// ValidatorAccount queries an Ethereum account's from a validator consensus
  /// Address.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorAccount(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.validatorAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? []
    )
  }

  /// Balance queries the balance of a the EVM denomination for a single
  /// EthAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// Storage queries the balance of all coins for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Storage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storage(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.storage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStorageInterceptors() ?? []
    )
  }

  /// Code queries the balance of all coins for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Code.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func code(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.code.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  /// Params queries the parameters of x/evm module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// EthCall implements the `eth_call` rpc api
  ///
  /// - Parameters:
  ///   - request: Request to send to EthCall.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ethCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.ethCall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthCallInterceptors() ?? []
    )
  }

  /// EstimateGas implements the `eth_estimateGas` rpc api
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateGas.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateGas(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.estimateGas.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? []
    )
  }

  /// TraceTx implements the `debug_traceTransaction` rpc api
  ///
  /// - Parameters:
  ///   - request: Request to send to TraceTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traceTx(
    _ request: Ethermint_Evm_V1_QueryTraceTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryTraceTxRequest, Ethermint_Evm_V1_QueryTraceTxResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.traceTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraceTxInterceptors() ?? []
    )
  }

  /// TraceBlock implements the `debug_traceBlockByNumber` and `debug_traceBlockByHash` rpc api
  ///
  /// - Parameters:
  ///   - request: Request to send to TraceBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traceBlock(
    _ request: Ethermint_Evm_V1_QueryTraceBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryTraceBlockRequest, Ethermint_Evm_V1_QueryTraceBlockResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.traceBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraceBlockInterceptors() ?? []
    )
  }

  /// BaseFee queries the base fee of the parent block of the current block,
  /// it's similar to feemarket module's method, but also checks london hardfork status.
  ///
  /// - Parameters:
  ///   - request: Request to send to BaseFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func baseFee(
    _ request: Ethermint_Evm_V1_QueryBaseFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBaseFeeRequest, Ethermint_Evm_V1_QueryBaseFeeResponse> {
    return self.makeUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.baseFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseFeeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ethermint_Evm_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ethermint_Evm_V1_QueryNIOClient")
internal final class Ethermint_Evm_V1_QueryClient: Ethermint_Evm_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ethermint.evm.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ethermint_Evm_V1_QueryNIOClient: Ethermint_Evm_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ethermint.evm.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ethermint_Evm_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeAccountCall(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>

  func makeCosmosAccountCall(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>

  func makeValidatorAccountCall(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>

  func makeBalanceCall(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>

  func makeStorageCall(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>

  func makeCodeCall(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>

  func makeParamsCall(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>

  func makeEthCallCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>

  func makeEstimateGasCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>

  func makeTraceTxCall(
    _ request: Ethermint_Evm_V1_QueryTraceTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryTraceTxRequest, Ethermint_Evm_V1_QueryTraceTxResponse>

  func makeTraceBlockCall(
    _ request: Ethermint_Evm_V1_QueryTraceBlockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryTraceBlockRequest, Ethermint_Evm_V1_QueryTraceBlockResponse>

  func makeBaseFeeCall(
    _ request: Ethermint_Evm_V1_QueryBaseFeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryBaseFeeRequest, Ethermint_Evm_V1_QueryBaseFeeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ethermint_Evm_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ethermint_Evm_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAccountCall(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  internal func makeCosmosAccountCall(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.cosmosAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? []
    )
  }

  internal func makeValidatorAccountCall(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.validatorAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? []
    )
  }

  internal func makeBalanceCall(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func makeStorageCall(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.storage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStorageInterceptors() ?? []
    )
  }

  internal func makeCodeCall(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.code.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeEthCallCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.ethCall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthCallInterceptors() ?? []
    )
  }

  internal func makeEstimateGasCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.estimateGas.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? []
    )
  }

  internal func makeTraceTxCall(
    _ request: Ethermint_Evm_V1_QueryTraceTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryTraceTxRequest, Ethermint_Evm_V1_QueryTraceTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.traceTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraceTxInterceptors() ?? []
    )
  }

  internal func makeTraceBlockCall(
    _ request: Ethermint_Evm_V1_QueryTraceBlockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryTraceBlockRequest, Ethermint_Evm_V1_QueryTraceBlockResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.traceBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraceBlockInterceptors() ?? []
    )
  }

  internal func makeBaseFeeCall(
    _ request: Ethermint_Evm_V1_QueryBaseFeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ethermint_Evm_V1_QueryBaseFeeRequest, Ethermint_Evm_V1_QueryBaseFeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.baseFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseFeeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ethermint_Evm_V1_QueryAsyncClientProtocol {
  internal func account(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  internal func cosmosAccount(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryCosmosAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.cosmosAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? []
    )
  }

  internal func validatorAccount(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryValidatorAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.validatorAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? []
    )
  }

  internal func balance(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func storage(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryStorageResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.storage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStorageInterceptors() ?? []
    )
  }

  internal func code(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryCodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.code.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func ethCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_MsgEthereumTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.ethCall.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthCallInterceptors() ?? []
    )
  }

  internal func estimateGas(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_EstimateGasResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.estimateGas.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? []
    )
  }

  internal func traceTx(
    _ request: Ethermint_Evm_V1_QueryTraceTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryTraceTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.traceTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraceTxInterceptors() ?? []
    )
  }

  internal func traceBlock(
    _ request: Ethermint_Evm_V1_QueryTraceBlockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryTraceBlockResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.traceBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraceBlockInterceptors() ?? []
    )
  }

  internal func baseFee(
    _ request: Ethermint_Evm_V1_QueryBaseFeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ethermint_Evm_V1_QueryBaseFeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Ethermint_Evm_V1_QueryClientMetadata.Methods.baseFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseFeeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ethermint_Evm_V1_QueryAsyncClient: Ethermint_Evm_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'account'.
  func makeAccountInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'cosmosAccount'.
  func makeCosmosAccountInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorAccount'.
  func makeValidatorAccountInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'storage'.
  func makeStorageInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>]

  /// - Returns: Interceptors to use when invoking 'code'.
  func makeCodeInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'ethCall'.
  func makeEthCallInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateGas'.
  func makeEstimateGasInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>]

  /// - Returns: Interceptors to use when invoking 'traceTx'.
  func makeTraceTxInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryTraceTxRequest, Ethermint_Evm_V1_QueryTraceTxResponse>]

  /// - Returns: Interceptors to use when invoking 'traceBlock'.
  func makeTraceBlockInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryTraceBlockRequest, Ethermint_Evm_V1_QueryTraceBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'baseFee'.
  func makeBaseFeeInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryBaseFeeRequest, Ethermint_Evm_V1_QueryBaseFeeResponse>]
}

internal enum Ethermint_Evm_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ethermint.evm.v1.Query",
    methods: [
      Ethermint_Evm_V1_QueryClientMetadata.Methods.account,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.cosmosAccount,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.validatorAccount,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.balance,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.storage,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.code,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.params,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.ethCall,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.estimateGas,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.traceTx,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.traceBlock,
      Ethermint_Evm_V1_QueryClientMetadata.Methods.baseFee,
    ]
  )

  internal enum Methods {
    internal static let account = GRPCMethodDescriptor(
      name: "Account",
      path: "/ethermint.evm.v1.Query/Account",
      type: GRPCCallType.unary
    )

    internal static let cosmosAccount = GRPCMethodDescriptor(
      name: "CosmosAccount",
      path: "/ethermint.evm.v1.Query/CosmosAccount",
      type: GRPCCallType.unary
    )

    internal static let validatorAccount = GRPCMethodDescriptor(
      name: "ValidatorAccount",
      path: "/ethermint.evm.v1.Query/ValidatorAccount",
      type: GRPCCallType.unary
    )

    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/ethermint.evm.v1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let storage = GRPCMethodDescriptor(
      name: "Storage",
      path: "/ethermint.evm.v1.Query/Storage",
      type: GRPCCallType.unary
    )

    internal static let code = GRPCMethodDescriptor(
      name: "Code",
      path: "/ethermint.evm.v1.Query/Code",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/ethermint.evm.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let ethCall = GRPCMethodDescriptor(
      name: "EthCall",
      path: "/ethermint.evm.v1.Query/EthCall",
      type: GRPCCallType.unary
    )

    internal static let estimateGas = GRPCMethodDescriptor(
      name: "EstimateGas",
      path: "/ethermint.evm.v1.Query/EstimateGas",
      type: GRPCCallType.unary
    )

    internal static let traceTx = GRPCMethodDescriptor(
      name: "TraceTx",
      path: "/ethermint.evm.v1.Query/TraceTx",
      type: GRPCCallType.unary
    )

    internal static let traceBlock = GRPCMethodDescriptor(
      name: "TraceBlock",
      path: "/ethermint.evm.v1.Query/TraceBlock",
      type: GRPCCallType.unary
    )

    internal static let baseFee = GRPCMethodDescriptor(
      name: "BaseFee",
      path: "/ethermint.evm.v1.Query/BaseFee",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ethermint_Evm_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Ethermint_Evm_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Account queries an Ethereum account.
  func account(request: Ethermint_Evm_V1_QueryAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryAccountResponse>

  /// CosmosAccount queries an Ethereum account's Cosmos Address.
  func cosmosAccount(request: Ethermint_Evm_V1_QueryCosmosAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryCosmosAccountResponse>

  /// ValidatorAccount queries an Ethereum account's from a validator consensus
  /// Address.
  func validatorAccount(request: Ethermint_Evm_V1_QueryValidatorAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryValidatorAccountResponse>

  /// Balance queries the balance of a the EVM denomination for a single
  /// EthAccount.
  func balance(request: Ethermint_Evm_V1_QueryBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryBalanceResponse>

  /// Storage queries the balance of all coins for a single account.
  func storage(request: Ethermint_Evm_V1_QueryStorageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryStorageResponse>

  /// Code queries the balance of all coins for a single account.
  func code(request: Ethermint_Evm_V1_QueryCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryCodeResponse>

  /// Params queries the parameters of x/evm module.
  func params(request: Ethermint_Evm_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryParamsResponse>

  /// EthCall implements the `eth_call` rpc api
  func ethCall(request: Ethermint_Evm_V1_EthCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_MsgEthereumTxResponse>

  /// EstimateGas implements the `eth_estimateGas` rpc api
  func estimateGas(request: Ethermint_Evm_V1_EthCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_EstimateGasResponse>

  /// TraceTx implements the `debug_traceTransaction` rpc api
  func traceTx(request: Ethermint_Evm_V1_QueryTraceTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryTraceTxResponse>

  /// TraceBlock implements the `debug_traceBlockByNumber` and `debug_traceBlockByHash` rpc api
  func traceBlock(request: Ethermint_Evm_V1_QueryTraceBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryTraceBlockResponse>

  /// BaseFee queries the base fee of the parent block of the current block,
  /// it's similar to feemarket module's method, but also checks london hardfork status.
  func baseFee(request: Ethermint_Evm_V1_QueryBaseFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryBaseFeeResponse>
}

extension Ethermint_Evm_V1_QueryProvider {
  internal var serviceName: Substring {
    return Ethermint_Evm_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Account":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryAccountResponse>(),
        interceptors: self.interceptors?.makeAccountInterceptors() ?? [],
        userFunction: self.account(request:context:)
      )

    case "CosmosAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryCosmosAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryCosmosAccountResponse>(),
        interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? [],
        userFunction: self.cosmosAccount(request:context:)
      )

    case "ValidatorAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryValidatorAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryValidatorAccountResponse>(),
        interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? [],
        userFunction: self.validatorAccount(request:context:)
      )

    case "Balance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        userFunction: self.balance(request:context:)
      )

    case "Storage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryStorageRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryStorageResponse>(),
        interceptors: self.interceptors?.makeStorageInterceptors() ?? [],
        userFunction: self.storage(request:context:)
      )

    case "Code":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryCodeRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryCodeResponse>(),
        interceptors: self.interceptors?.makeCodeInterceptors() ?? [],
        userFunction: self.code(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "EthCall":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_EthCallRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_MsgEthereumTxResponse>(),
        interceptors: self.interceptors?.makeEthCallInterceptors() ?? [],
        userFunction: self.ethCall(request:context:)
      )

    case "EstimateGas":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_EthCallRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_EstimateGasResponse>(),
        interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? [],
        userFunction: self.estimateGas(request:context:)
      )

    case "TraceTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryTraceTxRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryTraceTxResponse>(),
        interceptors: self.interceptors?.makeTraceTxInterceptors() ?? [],
        userFunction: self.traceTx(request:context:)
      )

    case "TraceBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryTraceBlockRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryTraceBlockResponse>(),
        interceptors: self.interceptors?.makeTraceBlockInterceptors() ?? [],
        userFunction: self.traceBlock(request:context:)
      )

    case "BaseFee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBaseFeeRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBaseFeeResponse>(),
        interceptors: self.interceptors?.makeBaseFeeInterceptors() ?? [],
        userFunction: self.baseFee(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ethermint_Evm_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ethermint_Evm_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Account queries an Ethereum account.
  @Sendable func account(
    request: Ethermint_Evm_V1_QueryAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryAccountResponse

  /// CosmosAccount queries an Ethereum account's Cosmos Address.
  @Sendable func cosmosAccount(
    request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryCosmosAccountResponse

  /// ValidatorAccount queries an Ethereum account's from a validator consensus
  /// Address.
  @Sendable func validatorAccount(
    request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryValidatorAccountResponse

  /// Balance queries the balance of a the EVM denomination for a single
  /// EthAccount.
  @Sendable func balance(
    request: Ethermint_Evm_V1_QueryBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryBalanceResponse

  /// Storage queries the balance of all coins for a single account.
  @Sendable func storage(
    request: Ethermint_Evm_V1_QueryStorageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryStorageResponse

  /// Code queries the balance of all coins for a single account.
  @Sendable func code(
    request: Ethermint_Evm_V1_QueryCodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryCodeResponse

  /// Params queries the parameters of x/evm module.
  @Sendable func params(
    request: Ethermint_Evm_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryParamsResponse

  /// EthCall implements the `eth_call` rpc api
  @Sendable func ethCall(
    request: Ethermint_Evm_V1_EthCallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_MsgEthereumTxResponse

  /// EstimateGas implements the `eth_estimateGas` rpc api
  @Sendable func estimateGas(
    request: Ethermint_Evm_V1_EthCallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_EstimateGasResponse

  /// TraceTx implements the `debug_traceTransaction` rpc api
  @Sendable func traceTx(
    request: Ethermint_Evm_V1_QueryTraceTxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryTraceTxResponse

  /// TraceBlock implements the `debug_traceBlockByNumber` and `debug_traceBlockByHash` rpc api
  @Sendable func traceBlock(
    request: Ethermint_Evm_V1_QueryTraceBlockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryTraceBlockResponse

  /// BaseFee queries the base fee of the parent block of the current block,
  /// it's similar to feemarket module's method, but also checks london hardfork status.
  @Sendable func baseFee(
    request: Ethermint_Evm_V1_QueryBaseFeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ethermint_Evm_V1_QueryBaseFeeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ethermint_Evm_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ethermint_Evm_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ethermint_Evm_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ethermint_Evm_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Account":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryAccountResponse>(),
        interceptors: self.interceptors?.makeAccountInterceptors() ?? [],
        wrapping: self.account(request:context:)
      )

    case "CosmosAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryCosmosAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryCosmosAccountResponse>(),
        interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? [],
        wrapping: self.cosmosAccount(request:context:)
      )

    case "ValidatorAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryValidatorAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryValidatorAccountResponse>(),
        interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? [],
        wrapping: self.validatorAccount(request:context:)
      )

    case "Balance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        wrapping: self.balance(request:context:)
      )

    case "Storage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryStorageRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryStorageResponse>(),
        interceptors: self.interceptors?.makeStorageInterceptors() ?? [],
        wrapping: self.storage(request:context:)
      )

    case "Code":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryCodeRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryCodeResponse>(),
        interceptors: self.interceptors?.makeCodeInterceptors() ?? [],
        wrapping: self.code(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "EthCall":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_EthCallRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_MsgEthereumTxResponse>(),
        interceptors: self.interceptors?.makeEthCallInterceptors() ?? [],
        wrapping: self.ethCall(request:context:)
      )

    case "EstimateGas":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_EthCallRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_EstimateGasResponse>(),
        interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? [],
        wrapping: self.estimateGas(request:context:)
      )

    case "TraceTx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryTraceTxRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryTraceTxResponse>(),
        interceptors: self.interceptors?.makeTraceTxInterceptors() ?? [],
        wrapping: self.traceTx(request:context:)
      )

    case "TraceBlock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryTraceBlockRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryTraceBlockResponse>(),
        interceptors: self.interceptors?.makeTraceBlockInterceptors() ?? [],
        wrapping: self.traceBlock(request:context:)
      )

    case "BaseFee":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBaseFeeRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBaseFeeResponse>(),
        interceptors: self.interceptors?.makeBaseFeeInterceptors() ?? [],
        wrapping: self.baseFee(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ethermint_Evm_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'account'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>]

  /// - Returns: Interceptors to use when handling 'cosmosAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCosmosAccountInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>]

  /// - Returns: Interceptors to use when handling 'validatorAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorAccountInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>]

  /// - Returns: Interceptors to use when handling 'balance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'storage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStorageInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>]

  /// - Returns: Interceptors to use when handling 'code'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'ethCall'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEthCallInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>]

  /// - Returns: Interceptors to use when handling 'estimateGas'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateGasInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>]

  /// - Returns: Interceptors to use when handling 'traceTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraceTxInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryTraceTxRequest, Ethermint_Evm_V1_QueryTraceTxResponse>]

  /// - Returns: Interceptors to use when handling 'traceBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraceBlockInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryTraceBlockRequest, Ethermint_Evm_V1_QueryTraceBlockResponse>]

  /// - Returns: Interceptors to use when handling 'baseFee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBaseFeeInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryBaseFeeRequest, Ethermint_Evm_V1_QueryBaseFeeResponse>]
}

internal enum Ethermint_Evm_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ethermint.evm.v1.Query",
    methods: [
      Ethermint_Evm_V1_QueryServerMetadata.Methods.account,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.cosmosAccount,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.validatorAccount,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.balance,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.storage,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.code,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.params,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.ethCall,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.estimateGas,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.traceTx,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.traceBlock,
      Ethermint_Evm_V1_QueryServerMetadata.Methods.baseFee,
    ]
  )

  internal enum Methods {
    internal static let account = GRPCMethodDescriptor(
      name: "Account",
      path: "/ethermint.evm.v1.Query/Account",
      type: GRPCCallType.unary
    )

    internal static let cosmosAccount = GRPCMethodDescriptor(
      name: "CosmosAccount",
      path: "/ethermint.evm.v1.Query/CosmosAccount",
      type: GRPCCallType.unary
    )

    internal static let validatorAccount = GRPCMethodDescriptor(
      name: "ValidatorAccount",
      path: "/ethermint.evm.v1.Query/ValidatorAccount",
      type: GRPCCallType.unary
    )

    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/ethermint.evm.v1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let storage = GRPCMethodDescriptor(
      name: "Storage",
      path: "/ethermint.evm.v1.Query/Storage",
      type: GRPCCallType.unary
    )

    internal static let code = GRPCMethodDescriptor(
      name: "Code",
      path: "/ethermint.evm.v1.Query/Code",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/ethermint.evm.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let ethCall = GRPCMethodDescriptor(
      name: "EthCall",
      path: "/ethermint.evm.v1.Query/EthCall",
      type: GRPCCallType.unary
    )

    internal static let estimateGas = GRPCMethodDescriptor(
      name: "EstimateGas",
      path: "/ethermint.evm.v1.Query/EstimateGas",
      type: GRPCCallType.unary
    )

    internal static let traceTx = GRPCMethodDescriptor(
      name: "TraceTx",
      path: "/ethermint.evm.v1.Query/TraceTx",
      type: GRPCCallType.unary
    )

    internal static let traceBlock = GRPCMethodDescriptor(
      name: "TraceBlock",
      path: "/ethermint.evm.v1.Query/TraceBlock",
      type: GRPCCallType.unary
    )

    internal static let baseFee = GRPCMethodDescriptor(
      name: "BaseFee",
      path: "/ethermint.evm.v1.Query/BaseFee",
      type: GRPCCallType.unary
    )
  }
}
