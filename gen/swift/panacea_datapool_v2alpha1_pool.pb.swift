// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/datapool/v2alpha1/pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Pool defines a data pool
struct Panacea_Datapool_V2alpha1_Pool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 {
    get {return _storage._poolID}
    set {_uniqueStorage()._poolID = newValue}
  }

  var poolAddress: String {
    get {return _storage._poolAddress}
    set {_uniqueStorage()._poolAddress = newValue}
  }

  var round: UInt64 {
    get {return _storage._round}
    set {_uniqueStorage()._round = newValue}
  }

  var poolParams: Panacea_Datapool_V2alpha1_PoolParams {
    get {return _storage._poolParams ?? Panacea_Datapool_V2alpha1_PoolParams()}
    set {_uniqueStorage()._poolParams = newValue}
  }
  /// Returns true if `poolParams` has been explicitly set.
  var hasPoolParams: Bool {return _storage._poolParams != nil}
  /// Clears the value of `poolParams`. Subsequent reads from it will return its default value.
  mutating func clearPoolParams() {_uniqueStorage()._poolParams = nil}

  /// current number of data
  var curNumData: UInt64 {
    get {return _storage._curNumData}
    set {_uniqueStorage()._curNumData = newValue}
  }

  /// current issued NFTs
  var numIssuedNfts: UInt64 {
    get {return _storage._numIssuedNfts}
    set {_uniqueStorage()._numIssuedNfts = newValue}
  }

  var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var curator: String {
    get {return _storage._curator}
    set {_uniqueStorage()._curator = newValue}
  }

  /// deposit
  var deposit: Cosmos_Base_V1beta1_Coin {
    get {return _storage._deposit ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._deposit = newValue}
  }
  /// Returns true if `deposit` has been explicitly set.
  var hasDeposit: Bool {return _storage._deposit != nil}
  /// Clears the value of `deposit`. Subsequent reads from it will return its default value.
  mutating func clearDeposit() {_uniqueStorage()._deposit = nil}

  /// NFT contract address of pool
  var nftContractAddr: String {
    get {return _storage._nftContractAddr}
    set {_uniqueStorage()._nftContractAddr = newValue}
  }

  var wasDepositReturned: Bool {
    get {return _storage._wasDepositReturned}
    set {_uniqueStorage()._wasDepositReturned = newValue}
  }

  /// key: round, value: paid curator commission balance
  var curatorCommission: Dictionary<UInt64,Cosmos_Base_V1beta1_Coin> {
    get {return _storage._curatorCommission}
    set {_uniqueStorage()._curatorCommission = newValue}
  }

  /// curator commission rate
  var curatorCommissionRate: String {
    get {return _storage._curatorCommissionRate}
    set {_uniqueStorage()._curatorCommissionRate = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// DataCert defines the certificate for data validation w/ data oricle signature.
struct Panacea_Datapool_V2alpha1_DataCert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unsigned certificate
  var unsignedCert: Panacea_Datapool_V2alpha1_UnsignedDataCert {
    get {return _unsignedCert ?? Panacea_Datapool_V2alpha1_UnsignedDataCert()}
    set {_unsignedCert = newValue}
  }
  /// Returns true if `unsignedCert` has been explicitly set.
  var hasUnsignedCert: Bool {return self._unsignedCert != nil}
  /// Clears the value of `unsignedCert`. Subsequent reads from it will return its default value.
  mutating func clearUnsignedCert() {self._unsignedCert = nil}

  /// signature for data validation by data validator
  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unsignedCert: Panacea_Datapool_V2alpha1_UnsignedDataCert? = nil
}

/// UnsignedDataCert defines the unsigned certificate for data validation.
struct Panacea_Datapool_V2alpha1_UnsignedDataCert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool Id for selling data
  var poolID: UInt64 = 0

  /// Always 1 for v0
  var round: UInt64 = 0

  /// sha-256 hash of the data
  var dataHash: Data = Data()

  /// 'panacea1' address of oracle
  var oracle: String = String()

  /// 'panacea1' address of seller
  var requester: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DataPassRedeemReceipt defines a receipt for redeeming data pass to get data.
struct Panacea_Datapool_V2alpha1_DataPassRedeemReceipt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var round: UInt64 = 0

  var dataPassID: UInt64 = 0

  /// 'panacea1' address of redeemer
  var redeemer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PoolParams defines parameters for data pool
struct Panacea_Datapool_V2alpha1_PoolParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// JSON Schema URIs
  var dataSchema: [String] = []

  /// A target num of data to be collected
  var targetNumData: UInt64 = 0

  /// A max num of NFTs that can be minted (= A total num of potential buyers)
  var maxNftSupply: UInt64 = 0

  /// A price of a NFT
  var nftPrice: Cosmos_Base_V1beta1_Coin {
    get {return _nftPrice ?? Cosmos_Base_V1beta1_Coin()}
    set {_nftPrice = newValue}
  }
  /// Returns true if `nftPrice` has been explicitly set.
  var hasNftPrice: Bool {return self._nftPrice != nil}
  /// Clears the value of `nftPrice`. Subsequent reads from it will return its default value.
  mutating func clearNftPrice() {self._nftPrice = nil}

  /// Trusted oracles' addresses
  var trustedOracles: [String] = []

  /// Optional. Data issuers that is trusted by the curator
  var trustedDataIssuers: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nftPrice: Cosmos_Base_V1beta1_Coin? = nil
}

/// InstantRevenueDistribution defines poolID information to distribution revenue.
struct Panacea_Datapool_V2alpha1_InstantRevenueDistribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Execute information for pool reward distribution
  var poolIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SalesInfo defines sales information
struct Panacea_Datapool_V2alpha1_SalesHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool Id for selling data
  var poolID: UInt64 = 0

  /// Always 1 for v0
  var round: UInt64 = 0

  /// address to be distributed
  var sellerAddress: String = String()

  var dataHashes: [Data] = []

  /// Proceeds distributed in the round
  var paidCoin: Cosmos_Base_V1beta1_Coin {
    get {return _paidCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_paidCoin = newValue}
  }
  /// Returns true if `paidCoin` has been explicitly set.
  var hasPaidCoin: Bool {return self._paidCoin != nil}
  /// Clears the value of `paidCoin`. Subsequent reads from it will return its default value.
  mutating func clearPaidCoin() {self._paidCoin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _paidCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// DataPassRedeemHistory defines a list of redeem histories
struct Panacea_Datapool_V2alpha1_DataPassRedeemHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redeemer: String = String()

  var poolID: UInt64 = 0

  /// list of redeem receipts
  var dataPassRedeemReceipts: [Panacea_Datapool_V2alpha1_DataPassRedeemReceipt] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Datapool_V2alpha1_Pool: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_DataCert: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_UnsignedDataCert: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_DataPassRedeemReceipt: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_PoolParams: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_InstantRevenueDistribution: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_SalesHistory: @unchecked Sendable {}
extension Panacea_Datapool_V2alpha1_DataPassRedeemHistory: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.datapool.v2alpha1"

extension Panacea_Datapool_V2alpha1_Pool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "pool_address"),
    3: .same(proto: "round"),
    4: .standard(proto: "pool_params"),
    5: .standard(proto: "cur_num_data"),
    6: .standard(proto: "num_issued_nfts"),
    7: .same(proto: "status"),
    8: .same(proto: "curator"),
    9: .same(proto: "deposit"),
    10: .standard(proto: "nft_contract_addr"),
    11: .standard(proto: "was_deposit_returned"),
    12: .standard(proto: "curator_commission"),
    13: .standard(proto: "curator_commission_rate"),
  ]

  fileprivate class _StorageClass {
    var _poolID: UInt64 = 0
    var _poolAddress: String = String()
    var _round: UInt64 = 0
    var _poolParams: Panacea_Datapool_V2alpha1_PoolParams? = nil
    var _curNumData: UInt64 = 0
    var _numIssuedNfts: UInt64 = 0
    var _status: String = String()
    var _curator: String = String()
    var _deposit: Cosmos_Base_V1beta1_Coin? = nil
    var _nftContractAddr: String = String()
    var _wasDepositReturned: Bool = false
    var _curatorCommission: Dictionary<UInt64,Cosmos_Base_V1beta1_Coin> = [:]
    var _curatorCommissionRate: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _poolID = source._poolID
      _poolAddress = source._poolAddress
      _round = source._round
      _poolParams = source._poolParams
      _curNumData = source._curNumData
      _numIssuedNfts = source._numIssuedNfts
      _status = source._status
      _curator = source._curator
      _deposit = source._deposit
      _nftContractAddr = source._nftContractAddr
      _wasDepositReturned = source._wasDepositReturned
      _curatorCommission = source._curatorCommission
      _curatorCommissionRate = source._curatorCommissionRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._poolID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._poolAddress) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._round) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._poolParams) }()
        case 5: try { try decoder.decodeSingularUInt64Field(value: &_storage._curNumData) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._numIssuedNfts) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._curator) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._deposit) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._nftContractAddr) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._wasDepositReturned) }()
        case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt64,Cosmos_Base_V1beta1_Coin>.self, value: &_storage._curatorCommission) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._curatorCommissionRate) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._poolID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._poolID, fieldNumber: 1)
      }
      if !_storage._poolAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._poolAddress, fieldNumber: 2)
      }
      if _storage._round != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._round, fieldNumber: 3)
      }
      try { if let v = _storage._poolParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._curNumData != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._curNumData, fieldNumber: 5)
      }
      if _storage._numIssuedNfts != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._numIssuedNfts, fieldNumber: 6)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 7)
      }
      if !_storage._curator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._curator, fieldNumber: 8)
      }
      try { if let v = _storage._deposit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._nftContractAddr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nftContractAddr, fieldNumber: 10)
      }
      if _storage._wasDepositReturned != false {
        try visitor.visitSingularBoolField(value: _storage._wasDepositReturned, fieldNumber: 11)
      }
      if !_storage._curatorCommission.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt64,Cosmos_Base_V1beta1_Coin>.self, value: _storage._curatorCommission, fieldNumber: 12)
      }
      if !_storage._curatorCommissionRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._curatorCommissionRate, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_Pool, rhs: Panacea_Datapool_V2alpha1_Pool) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._poolID != rhs_storage._poolID {return false}
        if _storage._poolAddress != rhs_storage._poolAddress {return false}
        if _storage._round != rhs_storage._round {return false}
        if _storage._poolParams != rhs_storage._poolParams {return false}
        if _storage._curNumData != rhs_storage._curNumData {return false}
        if _storage._numIssuedNfts != rhs_storage._numIssuedNfts {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._curator != rhs_storage._curator {return false}
        if _storage._deposit != rhs_storage._deposit {return false}
        if _storage._nftContractAddr != rhs_storage._nftContractAddr {return false}
        if _storage._wasDepositReturned != rhs_storage._wasDepositReturned {return false}
        if _storage._curatorCommission != rhs_storage._curatorCommission {return false}
        if _storage._curatorCommissionRate != rhs_storage._curatorCommissionRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_DataCert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCert"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unsigned_cert"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._unsignedCert) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._unsignedCert {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_DataCert, rhs: Panacea_Datapool_V2alpha1_DataCert) -> Bool {
    if lhs._unsignedCert != rhs._unsignedCert {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_UnsignedDataCert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnsignedDataCert"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "round"),
    3: .standard(proto: "data_hash"),
    4: .same(proto: "oracle"),
    5: .same(proto: "requester"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.dataHash) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.oracle) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.requester) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 2)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataHash, fieldNumber: 3)
    }
    if !self.oracle.isEmpty {
      try visitor.visitSingularStringField(value: self.oracle, fieldNumber: 4)
    }
    if !self.requester.isEmpty {
      try visitor.visitSingularStringField(value: self.requester, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_UnsignedDataCert, rhs: Panacea_Datapool_V2alpha1_UnsignedDataCert) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.round != rhs.round {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.oracle != rhs.oracle {return false}
    if lhs.requester != rhs.requester {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_DataPassRedeemReceipt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataPassRedeemReceipt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "round"),
    3: .standard(proto: "data_pass_id"),
    4: .same(proto: "redeemer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.dataPassID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.redeemer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 2)
    }
    if self.dataPassID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dataPassID, fieldNumber: 3)
    }
    if !self.redeemer.isEmpty {
      try visitor.visitSingularStringField(value: self.redeemer, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_DataPassRedeemReceipt, rhs: Panacea_Datapool_V2alpha1_DataPassRedeemReceipt) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.round != rhs.round {return false}
    if lhs.dataPassID != rhs.dataPassID {return false}
    if lhs.redeemer != rhs.redeemer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_PoolParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_schema"),
    2: .standard(proto: "target_num_data"),
    3: .standard(proto: "max_nft_supply"),
    4: .standard(proto: "nft_price"),
    5: .standard(proto: "trusted_oracles"),
    6: .standard(proto: "trusted_data_issuers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.dataSchema) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.targetNumData) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxNftSupply) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._nftPrice) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.trustedOracles) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.trustedDataIssuers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataSchema.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataSchema, fieldNumber: 1)
    }
    if self.targetNumData != 0 {
      try visitor.visitSingularUInt64Field(value: self.targetNumData, fieldNumber: 2)
    }
    if self.maxNftSupply != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxNftSupply, fieldNumber: 3)
    }
    try { if let v = self._nftPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.trustedOracles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.trustedOracles, fieldNumber: 5)
    }
    if !self.trustedDataIssuers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.trustedDataIssuers, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_PoolParams, rhs: Panacea_Datapool_V2alpha1_PoolParams) -> Bool {
    if lhs.dataSchema != rhs.dataSchema {return false}
    if lhs.targetNumData != rhs.targetNumData {return false}
    if lhs.maxNftSupply != rhs.maxNftSupply {return false}
    if lhs._nftPrice != rhs._nftPrice {return false}
    if lhs.trustedOracles != rhs.trustedOracles {return false}
    if lhs.trustedDataIssuers != rhs.trustedDataIssuers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_InstantRevenueDistribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InstantRevenueDistribution"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.poolIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.poolIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.poolIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_InstantRevenueDistribution, rhs: Panacea_Datapool_V2alpha1_InstantRevenueDistribution) -> Bool {
    if lhs.poolIds != rhs.poolIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_SalesHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SalesHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "round"),
    3: .standard(proto: "seller_address"),
    4: .standard(proto: "data_hashes"),
    5: .standard(proto: "paid_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sellerAddress) }()
      case 4: try { try decoder.decodeRepeatedBytesField(value: &self.dataHashes) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._paidCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 2)
    }
    if !self.sellerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerAddress, fieldNumber: 3)
    }
    if !self.dataHashes.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.dataHashes, fieldNumber: 4)
    }
    try { if let v = self._paidCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_SalesHistory, rhs: Panacea_Datapool_V2alpha1_SalesHistory) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.round != rhs.round {return false}
    if lhs.sellerAddress != rhs.sellerAddress {return false}
    if lhs.dataHashes != rhs.dataHashes {return false}
    if lhs._paidCoin != rhs._paidCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datapool_V2alpha1_DataPassRedeemHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataPassRedeemHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "redeemer"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "data_pass_redeem_receipts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.redeemer) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.dataPassRedeemReceipts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.redeemer.isEmpty {
      try visitor.visitSingularStringField(value: self.redeemer, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.dataPassRedeemReceipts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataPassRedeemReceipts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datapool_V2alpha1_DataPassRedeemHistory, rhs: Panacea_Datapool_V2alpha1_DataPassRedeemHistory) -> Bool {
    if lhs.redeemer != rhs.redeemer {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.dataPassRedeemReceipts != rhs.dataPassRedeemReceipts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
