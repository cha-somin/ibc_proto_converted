// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/subspaces/v3/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState contains the data of the genesis state for the subspaces module
struct Desmos_Subspaces_V3_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var initialSubspaceID: UInt64 = 0

  var subspacesData: [Desmos_Subspaces_V3_SubspaceData] = []

  var subspaces: [Desmos_Subspaces_V3_Subspace] = []

  var sections: [Desmos_Subspaces_V3_Section] = []

  var userPermissions: [Desmos_Subspaces_V3_UserPermission] = []

  var userGroups: [Desmos_Subspaces_V3_UserGroup] = []

  var userGroupsMembers: [Desmos_Subspaces_V3_UserGroupMemberEntry] = []

  var grants: [Desmos_Subspaces_V3_Grant] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SubspaceData contains the genesis data for a single subspace
struct Desmos_Subspaces_V3_SubspaceData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subspaceID: UInt64 = 0

  var nextGroupID: UInt32 = 0

  var nextSectionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UserGroupMemberEntry contains the details of a user group member
struct Desmos_Subspaces_V3_UserGroupMemberEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subspaceID: UInt64 = 0

  var groupID: UInt32 = 0

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Desmos_Subspaces_V3_GenesisState: @unchecked Sendable {}
extension Desmos_Subspaces_V3_SubspaceData: @unchecked Sendable {}
extension Desmos_Subspaces_V3_UserGroupMemberEntry: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.subspaces.v3"

extension Desmos_Subspaces_V3_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "initial_subspace_id"),
    2: .standard(proto: "subspaces_data"),
    3: .same(proto: "subspaces"),
    4: .same(proto: "sections"),
    5: .standard(proto: "user_permissions"),
    6: .standard(proto: "user_groups"),
    7: .standard(proto: "user_groups_members"),
    8: .same(proto: "grants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.initialSubspaceID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.subspacesData) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.subspaces) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.userPermissions) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.userGroups) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.userGroupsMembers) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.grants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.initialSubspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.initialSubspaceID, fieldNumber: 1)
    }
    if !self.subspacesData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subspacesData, fieldNumber: 2)
    }
    if !self.subspaces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subspaces, fieldNumber: 3)
    }
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 4)
    }
    if !self.userPermissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userPermissions, fieldNumber: 5)
    }
    if !self.userGroups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userGroups, fieldNumber: 6)
    }
    if !self.userGroupsMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userGroupsMembers, fieldNumber: 7)
    }
    if !self.grants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.grants, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_GenesisState, rhs: Desmos_Subspaces_V3_GenesisState) -> Bool {
    if lhs.initialSubspaceID != rhs.initialSubspaceID {return false}
    if lhs.subspacesData != rhs.subspacesData {return false}
    if lhs.subspaces != rhs.subspaces {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs.userPermissions != rhs.userPermissions {return false}
    if lhs.userGroups != rhs.userGroups {return false}
    if lhs.userGroupsMembers != rhs.userGroupsMembers {return false}
    if lhs.grants != rhs.grants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Subspaces_V3_SubspaceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubspaceData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "next_group_id"),
    3: .standard(proto: "next_section_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.nextGroupID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.nextSectionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.nextGroupID != 0 {
      try visitor.visitSingularUInt32Field(value: self.nextGroupID, fieldNumber: 2)
    }
    if self.nextSectionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.nextSectionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_SubspaceData, rhs: Desmos_Subspaces_V3_SubspaceData) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.nextGroupID != rhs.nextGroupID {return false}
    if lhs.nextSectionID != rhs.nextSectionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Subspaces_V3_UserGroupMemberEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserGroupMemberEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "group_id"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt32Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V3_UserGroupMemberEntry, rhs: Desmos_Subspaces_V3_UserGroupMemberEntry) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
