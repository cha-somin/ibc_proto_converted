//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/incentives/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Osmosis_Incentives_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Incentives_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? { get }

  func moduleToDistributeCoins(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>

  func gaugeByID(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>

  func gauges(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>

  func activeGauges(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>

  func activeGaugesPerDenom(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>

  func upcomingGauges(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>

  func upcomingGaugesPerDenom(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>

  func rewardsEst(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>

  func lockableDurations(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>

  func allGroups(
    _ request: Osmosis_Incentives_QueryAllGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryAllGroupsRequest, Osmosis_Incentives_QueryAllGroupsResponse>

  func allGroupsGauges(
    _ request: Osmosis_Incentives_QueryAllGroupsGaugesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryAllGroupsGaugesRequest, Osmosis_Incentives_QueryAllGroupsGaugesResponse>

  func allGroupsWithGauge(
    _ request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>

  func groupByGroupGaugeID(
    _ request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>

  func currentWeightByGroupGaugeID(
    _ request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>

  func params(
    _ request: Osmosis_Incentives_ParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Incentives_ParamsRequest, Osmosis_Incentives_ParamsResponse>
}

extension Osmosis_Incentives_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.incentives.Query"
  }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleToDistributeCoins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moduleToDistributeCoins(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  /// GaugeByID returns gauges by their respective ID
  ///
  /// - Parameters:
  ///   - request: Request to send to GaugeByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gaugeByID(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? []
    )
  }

  /// Gauges returns both upcoming and active gauges
  ///
  /// - Parameters:
  ///   - request: Request to send to Gauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gauges(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugesInterceptors() ?? []
    )
  }

  /// ActiveGauges returns active gauges
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveGauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activeGauges(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? []
    )
  }

  /// ActiveGaugesPerDenom returns active gauges by denom
  ///
  /// - Parameters:
  ///   - request: Request to send to ActiveGaugesPerDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activeGaugesPerDenom(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? []
    )
  }

  /// Returns scheduled gauges that have not yet occurred
  ///
  /// - Parameters:
  ///   - request: Request to send to UpcomingGauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upcomingGauges(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? []
    )
  }

  /// UpcomingGaugesPerDenom returns scheduled gauges that have not yet occurred
  /// by denom
  ///
  /// - Parameters:
  ///   - request: Request to send to UpcomingGaugesPerDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upcomingGaugesPerDenom(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? []
    )
  }

  /// RewardsEst returns an estimate of the rewards from now until a specified
  /// time in the future The querier either provides an address or a set of locks
  /// for which they want to find the associated rewards
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardsEst.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardsEst(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? []
    )
  }

  /// LockableDurations returns lockable durations that are valid to distribute
  /// incentives for
  ///
  /// - Parameters:
  ///   - request: Request to send to LockableDurations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lockableDurations(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }

  /// AllGroups returns all groups
  ///
  /// - Parameters:
  ///   - request: Request to send to AllGroups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allGroups(
    _ request: Osmosis_Incentives_QueryAllGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryAllGroupsRequest, Osmosis_Incentives_QueryAllGroupsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsInterceptors() ?? []
    )
  }

  /// AllGroupsGauges returns all group gauges
  ///
  /// - Parameters:
  ///   - request: Request to send to AllGroupsGauges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allGroupsGauges(
    _ request: Osmosis_Incentives_QueryAllGroupsGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryAllGroupsGaugesRequest, Osmosis_Incentives_QueryAllGroupsGaugesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsGaugesInterceptors() ?? []
    )
  }

  /// AllGroupsWithGauge returns all groups with their group gauge
  ///
  /// - Parameters:
  ///   - request: Request to send to AllGroupsWithGauge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allGroupsWithGauge(
    _ request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, Osmosis_Incentives_QueryAllGroupsWithGaugeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsWithGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsWithGaugeInterceptors() ?? []
    )
  }

  /// GroupByGroupGaugeID returns a group given its group gauge ID
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupByGroupGaugeID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupByGroupGaugeID(
    _ request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.groupByGroupGaugeID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupByGroupGaugeIDInterceptors() ?? []
    )
  }

  /// CurrentWeightByGroupGaugeID returns the current weight since the
  /// the last epoch given a group gauge ID
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentWeightByGroupGaugeID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentWeightByGroupGaugeID(
    _ request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.currentWeightByGroupGaugeID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentWeightByGroupGaugeIDInterceptors() ?? []
    )
  }

  /// Params returns incentives module params.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Incentives_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Incentives_ParamsRequest, Osmosis_Incentives_ParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Incentives_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Incentives_QueryNIOClient")
internal final class Osmosis_Incentives_QueryClient: Osmosis_Incentives_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.incentives.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Incentives_QueryNIOClient: Osmosis_Incentives_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.incentives.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Incentives_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? { get }

  func makeModuleToDistributeCoinsCall(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>

  func makeGaugeByIDCall(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>

  func makeGaugesCall(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>

  func makeActiveGaugesCall(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>

  func makeActiveGaugesPerDenomCall(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>

  func makeUpcomingGaugesCall(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>

  func makeUpcomingGaugesPerDenomCall(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>

  func makeRewardsEstCall(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>

  func makeLockableDurationsCall(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>

  func makeAllGroupsCall(
    _ request: Osmosis_Incentives_QueryAllGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryAllGroupsRequest, Osmosis_Incentives_QueryAllGroupsResponse>

  func makeAllGroupsGaugesCall(
    _ request: Osmosis_Incentives_QueryAllGroupsGaugesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryAllGroupsGaugesRequest, Osmosis_Incentives_QueryAllGroupsGaugesResponse>

  func makeAllGroupsWithGaugeCall(
    _ request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>

  func makeGroupByGroupGaugeIDCall(
    _ request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>

  func makeCurrentWeightByGroupGaugeIDCall(
    _ request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>

  func makeParamsCall(
    _ request: Osmosis_Incentives_ParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ParamsRequest, Osmosis_Incentives_ParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Incentives_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeModuleToDistributeCoinsCall(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  internal func makeGaugeByIDCall(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? []
    )
  }

  internal func makeGaugesCall(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugesInterceptors() ?? []
    )
  }

  internal func makeActiveGaugesCall(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? []
    )
  }

  internal func makeActiveGaugesPerDenomCall(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? []
    )
  }

  internal func makeUpcomingGaugesCall(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? []
    )
  }

  internal func makeUpcomingGaugesPerDenomCall(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? []
    )
  }

  internal func makeRewardsEstCall(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? []
    )
  }

  internal func makeLockableDurationsCall(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }

  internal func makeAllGroupsCall(
    _ request: Osmosis_Incentives_QueryAllGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryAllGroupsRequest, Osmosis_Incentives_QueryAllGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsInterceptors() ?? []
    )
  }

  internal func makeAllGroupsGaugesCall(
    _ request: Osmosis_Incentives_QueryAllGroupsGaugesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryAllGroupsGaugesRequest, Osmosis_Incentives_QueryAllGroupsGaugesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsGaugesInterceptors() ?? []
    )
  }

  internal func makeAllGroupsWithGaugeCall(
    _ request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, Osmosis_Incentives_QueryAllGroupsWithGaugeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsWithGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsWithGaugeInterceptors() ?? []
    )
  }

  internal func makeGroupByGroupGaugeIDCall(
    _ request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.groupByGroupGaugeID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupByGroupGaugeIDInterceptors() ?? []
    )
  }

  internal func makeCurrentWeightByGroupGaugeIDCall(
    _ request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.currentWeightByGroupGaugeID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentWeightByGroupGaugeIDInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Osmosis_Incentives_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Incentives_ParamsRequest, Osmosis_Incentives_ParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_QueryAsyncClientProtocol {
  internal func moduleToDistributeCoins(
    _ request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ModuleToDistributeCoinsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? []
    )
  }

  internal func gaugeByID(
    _ request: Osmosis_Incentives_GaugeByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_GaugeByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? []
    )
  }

  internal func gauges(
    _ request: Osmosis_Incentives_GaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_GaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.gauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugesInterceptors() ?? []
    )
  }

  internal func activeGauges(
    _ request: Osmosis_Incentives_ActiveGaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ActiveGaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? []
    )
  }

  internal func activeGaugesPerDenom(
    _ request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ActiveGaugesPerDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? []
    )
  }

  internal func upcomingGauges(
    _ request: Osmosis_Incentives_UpcomingGaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_UpcomingGaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? []
    )
  }

  internal func upcomingGaugesPerDenom(
    _ request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_UpcomingGaugesPerDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? []
    )
  }

  internal func rewardsEst(
    _ request: Osmosis_Incentives_RewardsEstRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_RewardsEstResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? []
    )
  }

  internal func lockableDurations(
    _ request: Osmosis_Incentives_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryLockableDurationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }

  internal func allGroups(
    _ request: Osmosis_Incentives_QueryAllGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryAllGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsInterceptors() ?? []
    )
  }

  internal func allGroupsGauges(
    _ request: Osmosis_Incentives_QueryAllGroupsGaugesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryAllGroupsGaugesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsGauges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsGaugesInterceptors() ?? []
    )
  }

  internal func allGroupsWithGauge(
    _ request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryAllGroupsWithGaugeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsWithGauge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllGroupsWithGaugeInterceptors() ?? []
    )
  }

  internal func groupByGroupGaugeID(
    _ request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.groupByGroupGaugeID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupByGroupGaugeIDInterceptors() ?? []
    )
  }

  internal func currentWeightByGroupGaugeID(
    _ request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.currentWeightByGroupGaugeID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentWeightByGroupGaugeIDInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Osmosis_Incentives_ParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Incentives_ParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Incentives_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Incentives_QueryAsyncClient: Osmosis_Incentives_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Incentives_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Incentives_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'moduleToDistributeCoins'.
  func makeModuleToDistributeCoinsInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>]

  /// - Returns: Interceptors to use when invoking 'gaugeByID'.
  func makeGaugeByIDInterceptors() -> [ClientInterceptor<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'gauges'.
  func makeGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'activeGauges'.
  func makeActiveGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'activeGaugesPerDenom'.
  func makeActiveGaugesPerDenomInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'upcomingGauges'.
  func makeUpcomingGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'upcomingGaugesPerDenom'.
  func makeUpcomingGaugesPerDenomInterceptors() -> [ClientInterceptor<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardsEst'.
  func makeRewardsEstInterceptors() -> [ClientInterceptor<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>]

  /// - Returns: Interceptors to use when invoking 'lockableDurations'.
  func makeLockableDurationsInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>]

  /// - Returns: Interceptors to use when invoking 'allGroups'.
  func makeAllGroupsInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryAllGroupsRequest, Osmosis_Incentives_QueryAllGroupsResponse>]

  /// - Returns: Interceptors to use when invoking 'allGroupsGauges'.
  func makeAllGroupsGaugesInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryAllGroupsGaugesRequest, Osmosis_Incentives_QueryAllGroupsGaugesResponse>]

  /// - Returns: Interceptors to use when invoking 'allGroupsWithGauge'.
  func makeAllGroupsWithGaugeInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>]

  /// - Returns: Interceptors to use when invoking 'groupByGroupGaugeID'.
  func makeGroupByGroupGaugeIDInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>]

  /// - Returns: Interceptors to use when invoking 'currentWeightByGroupGaugeID'.
  func makeCurrentWeightByGroupGaugeIDInterceptors() -> [ClientInterceptor<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Incentives_ParamsRequest, Osmosis_Incentives_ParamsResponse>]
}

internal enum Osmosis_Incentives_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.incentives.Query",
    methods: [
      Osmosis_Incentives_QueryClientMetadata.Methods.moduleToDistributeCoins,
      Osmosis_Incentives_QueryClientMetadata.Methods.gaugeByID,
      Osmosis_Incentives_QueryClientMetadata.Methods.gauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.activeGauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.activeGaugesPerDenom,
      Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.upcomingGaugesPerDenom,
      Osmosis_Incentives_QueryClientMetadata.Methods.rewardsEst,
      Osmosis_Incentives_QueryClientMetadata.Methods.lockableDurations,
      Osmosis_Incentives_QueryClientMetadata.Methods.allGroups,
      Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsGauges,
      Osmosis_Incentives_QueryClientMetadata.Methods.allGroupsWithGauge,
      Osmosis_Incentives_QueryClientMetadata.Methods.groupByGroupGaugeID,
      Osmosis_Incentives_QueryClientMetadata.Methods.currentWeightByGroupGaugeID,
      Osmosis_Incentives_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let moduleToDistributeCoins = GRPCMethodDescriptor(
      name: "ModuleToDistributeCoins",
      path: "/osmosis.incentives.Query/ModuleToDistributeCoins",
      type: GRPCCallType.unary
    )

    internal static let gaugeByID = GRPCMethodDescriptor(
      name: "GaugeByID",
      path: "/osmosis.incentives.Query/GaugeByID",
      type: GRPCCallType.unary
    )

    internal static let gauges = GRPCMethodDescriptor(
      name: "Gauges",
      path: "/osmosis.incentives.Query/Gauges",
      type: GRPCCallType.unary
    )

    internal static let activeGauges = GRPCMethodDescriptor(
      name: "ActiveGauges",
      path: "/osmosis.incentives.Query/ActiveGauges",
      type: GRPCCallType.unary
    )

    internal static let activeGaugesPerDenom = GRPCMethodDescriptor(
      name: "ActiveGaugesPerDenom",
      path: "/osmosis.incentives.Query/ActiveGaugesPerDenom",
      type: GRPCCallType.unary
    )

    internal static let upcomingGauges = GRPCMethodDescriptor(
      name: "UpcomingGauges",
      path: "/osmosis.incentives.Query/UpcomingGauges",
      type: GRPCCallType.unary
    )

    internal static let upcomingGaugesPerDenom = GRPCMethodDescriptor(
      name: "UpcomingGaugesPerDenom",
      path: "/osmosis.incentives.Query/UpcomingGaugesPerDenom",
      type: GRPCCallType.unary
    )

    internal static let rewardsEst = GRPCMethodDescriptor(
      name: "RewardsEst",
      path: "/osmosis.incentives.Query/RewardsEst",
      type: GRPCCallType.unary
    )

    internal static let lockableDurations = GRPCMethodDescriptor(
      name: "LockableDurations",
      path: "/osmosis.incentives.Query/LockableDurations",
      type: GRPCCallType.unary
    )

    internal static let allGroups = GRPCMethodDescriptor(
      name: "AllGroups",
      path: "/osmosis.incentives.Query/AllGroups",
      type: GRPCCallType.unary
    )

    internal static let allGroupsGauges = GRPCMethodDescriptor(
      name: "AllGroupsGauges",
      path: "/osmosis.incentives.Query/AllGroupsGauges",
      type: GRPCCallType.unary
    )

    internal static let allGroupsWithGauge = GRPCMethodDescriptor(
      name: "AllGroupsWithGauge",
      path: "/osmosis.incentives.Query/AllGroupsWithGauge",
      type: GRPCCallType.unary
    )

    internal static let groupByGroupGaugeID = GRPCMethodDescriptor(
      name: "GroupByGroupGaugeID",
      path: "/osmosis.incentives.Query/GroupByGroupGaugeID",
      type: GRPCCallType.unary
    )

    internal static let currentWeightByGroupGaugeID = GRPCMethodDescriptor(
      name: "CurrentWeightByGroupGaugeID",
      path: "/osmosis.incentives.Query/CurrentWeightByGroupGaugeID",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.incentives.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Incentives_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Incentives_QueryServerInterceptorFactoryProtocol? { get }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  func moduleToDistributeCoins(request: Osmosis_Incentives_ModuleToDistributeCoinsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_ModuleToDistributeCoinsResponse>

  /// GaugeByID returns gauges by their respective ID
  func gaugeByID(request: Osmosis_Incentives_GaugeByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_GaugeByIDResponse>

  /// Gauges returns both upcoming and active gauges
  func gauges(request: Osmosis_Incentives_GaugesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_GaugesResponse>

  /// ActiveGauges returns active gauges
  func activeGauges(request: Osmosis_Incentives_ActiveGaugesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_ActiveGaugesResponse>

  /// ActiveGaugesPerDenom returns active gauges by denom
  func activeGaugesPerDenom(request: Osmosis_Incentives_ActiveGaugesPerDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_ActiveGaugesPerDenomResponse>

  /// Returns scheduled gauges that have not yet occurred
  func upcomingGauges(request: Osmosis_Incentives_UpcomingGaugesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_UpcomingGaugesResponse>

  /// UpcomingGaugesPerDenom returns scheduled gauges that have not yet occurred
  /// by denom
  func upcomingGaugesPerDenom(request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_UpcomingGaugesPerDenomResponse>

  /// RewardsEst returns an estimate of the rewards from now until a specified
  /// time in the future The querier either provides an address or a set of locks
  /// for which they want to find the associated rewards
  func rewardsEst(request: Osmosis_Incentives_RewardsEstRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_RewardsEstResponse>

  /// LockableDurations returns lockable durations that are valid to distribute
  /// incentives for
  func lockableDurations(request: Osmosis_Incentives_QueryLockableDurationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_QueryLockableDurationsResponse>

  /// AllGroups returns all groups
  func allGroups(request: Osmosis_Incentives_QueryAllGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_QueryAllGroupsResponse>

  /// AllGroupsGauges returns all group gauges
  func allGroupsGauges(request: Osmosis_Incentives_QueryAllGroupsGaugesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_QueryAllGroupsGaugesResponse>

  /// AllGroupsWithGauge returns all groups with their group gauge
  func allGroupsWithGauge(request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>

  /// GroupByGroupGaugeID returns a group given its group gauge ID
  func groupByGroupGaugeID(request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>

  /// CurrentWeightByGroupGaugeID returns the current weight since the
  /// the last epoch given a group gauge ID
  func currentWeightByGroupGaugeID(request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>

  /// Params returns incentives module params.
  func params(request: Osmosis_Incentives_ParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Incentives_ParamsResponse>
}

extension Osmosis_Incentives_QueryProvider {
  internal var serviceName: Substring {
    return Osmosis_Incentives_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ModuleToDistributeCoins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ModuleToDistributeCoinsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ModuleToDistributeCoinsResponse>(),
        interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? [],
        userFunction: self.moduleToDistributeCoins(request:context:)
      )

    case "GaugeByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_GaugeByIDRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_GaugeByIDResponse>(),
        interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? [],
        userFunction: self.gaugeByID(request:context:)
      )

    case "Gauges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_GaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_GaugesResponse>(),
        interceptors: self.interceptors?.makeGaugesInterceptors() ?? [],
        userFunction: self.gauges(request:context:)
      )

    case "ActiveGauges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ActiveGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ActiveGaugesResponse>(),
        interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? [],
        userFunction: self.activeGauges(request:context:)
      )

    case "ActiveGaugesPerDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ActiveGaugesPerDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ActiveGaugesPerDenomResponse>(),
        interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? [],
        userFunction: self.activeGaugesPerDenom(request:context:)
      )

    case "UpcomingGauges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_UpcomingGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_UpcomingGaugesResponse>(),
        interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? [],
        userFunction: self.upcomingGauges(request:context:)
      )

    case "UpcomingGaugesPerDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_UpcomingGaugesPerDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_UpcomingGaugesPerDenomResponse>(),
        interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? [],
        userFunction: self.upcomingGaugesPerDenom(request:context:)
      )

    case "RewardsEst":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_RewardsEstRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_RewardsEstResponse>(),
        interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? [],
        userFunction: self.rewardsEst(request:context:)
      )

    case "LockableDurations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryLockableDurationsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryLockableDurationsResponse>(),
        interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? [],
        userFunction: self.lockableDurations(request:context:)
      )

    case "AllGroups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryAllGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryAllGroupsResponse>(),
        interceptors: self.interceptors?.makeAllGroupsInterceptors() ?? [],
        userFunction: self.allGroups(request:context:)
      )

    case "AllGroupsGauges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryAllGroupsGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryAllGroupsGaugesResponse>(),
        interceptors: self.interceptors?.makeAllGroupsGaugesInterceptors() ?? [],
        userFunction: self.allGroupsGauges(request:context:)
      )

    case "AllGroupsWithGauge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>(),
        interceptors: self.interceptors?.makeAllGroupsWithGaugeInterceptors() ?? [],
        userFunction: self.allGroupsWithGauge(request:context:)
      )

    case "GroupByGroupGaugeID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>(),
        interceptors: self.interceptors?.makeGroupByGroupGaugeIDInterceptors() ?? [],
        userFunction: self.groupByGroupGaugeID(request:context:)
      )

    case "CurrentWeightByGroupGaugeID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>(),
        interceptors: self.interceptors?.makeCurrentWeightByGroupGaugeIDInterceptors() ?? [],
        userFunction: self.currentWeightByGroupGaugeID(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Incentives_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Incentives_QueryServerInterceptorFactoryProtocol? { get }

  /// ModuleToDistributeCoins returns coins that are going to be distributed
  @Sendable func moduleToDistributeCoins(
    request: Osmosis_Incentives_ModuleToDistributeCoinsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_ModuleToDistributeCoinsResponse

  /// GaugeByID returns gauges by their respective ID
  @Sendable func gaugeByID(
    request: Osmosis_Incentives_GaugeByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_GaugeByIDResponse

  /// Gauges returns both upcoming and active gauges
  @Sendable func gauges(
    request: Osmosis_Incentives_GaugesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_GaugesResponse

  /// ActiveGauges returns active gauges
  @Sendable func activeGauges(
    request: Osmosis_Incentives_ActiveGaugesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_ActiveGaugesResponse

  /// ActiveGaugesPerDenom returns active gauges by denom
  @Sendable func activeGaugesPerDenom(
    request: Osmosis_Incentives_ActiveGaugesPerDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_ActiveGaugesPerDenomResponse

  /// Returns scheduled gauges that have not yet occurred
  @Sendable func upcomingGauges(
    request: Osmosis_Incentives_UpcomingGaugesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_UpcomingGaugesResponse

  /// UpcomingGaugesPerDenom returns scheduled gauges that have not yet occurred
  /// by denom
  @Sendable func upcomingGaugesPerDenom(
    request: Osmosis_Incentives_UpcomingGaugesPerDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_UpcomingGaugesPerDenomResponse

  /// RewardsEst returns an estimate of the rewards from now until a specified
  /// time in the future The querier either provides an address or a set of locks
  /// for which they want to find the associated rewards
  @Sendable func rewardsEst(
    request: Osmosis_Incentives_RewardsEstRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_RewardsEstResponse

  /// LockableDurations returns lockable durations that are valid to distribute
  /// incentives for
  @Sendable func lockableDurations(
    request: Osmosis_Incentives_QueryLockableDurationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_QueryLockableDurationsResponse

  /// AllGroups returns all groups
  @Sendable func allGroups(
    request: Osmosis_Incentives_QueryAllGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_QueryAllGroupsResponse

  /// AllGroupsGauges returns all group gauges
  @Sendable func allGroupsGauges(
    request: Osmosis_Incentives_QueryAllGroupsGaugesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_QueryAllGroupsGaugesResponse

  /// AllGroupsWithGauge returns all groups with their group gauge
  @Sendable func allGroupsWithGauge(
    request: Osmosis_Incentives_QueryAllGroupsWithGaugeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_QueryAllGroupsWithGaugeResponse

  /// GroupByGroupGaugeID returns a group given its group gauge ID
  @Sendable func groupByGroupGaugeID(
    request: Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse

  /// CurrentWeightByGroupGaugeID returns the current weight since the
  /// the last epoch given a group gauge ID
  @Sendable func currentWeightByGroupGaugeID(
    request: Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse

  /// Params returns incentives module params.
  @Sendable func params(
    request: Osmosis_Incentives_ParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Incentives_ParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Incentives_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Incentives_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Incentives_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Incentives_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ModuleToDistributeCoins":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ModuleToDistributeCoinsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ModuleToDistributeCoinsResponse>(),
        interceptors: self.interceptors?.makeModuleToDistributeCoinsInterceptors() ?? [],
        wrapping: self.moduleToDistributeCoins(request:context:)
      )

    case "GaugeByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_GaugeByIDRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_GaugeByIDResponse>(),
        interceptors: self.interceptors?.makeGaugeByIDInterceptors() ?? [],
        wrapping: self.gaugeByID(request:context:)
      )

    case "Gauges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_GaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_GaugesResponse>(),
        interceptors: self.interceptors?.makeGaugesInterceptors() ?? [],
        wrapping: self.gauges(request:context:)
      )

    case "ActiveGauges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ActiveGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ActiveGaugesResponse>(),
        interceptors: self.interceptors?.makeActiveGaugesInterceptors() ?? [],
        wrapping: self.activeGauges(request:context:)
      )

    case "ActiveGaugesPerDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ActiveGaugesPerDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ActiveGaugesPerDenomResponse>(),
        interceptors: self.interceptors?.makeActiveGaugesPerDenomInterceptors() ?? [],
        wrapping: self.activeGaugesPerDenom(request:context:)
      )

    case "UpcomingGauges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_UpcomingGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_UpcomingGaugesResponse>(),
        interceptors: self.interceptors?.makeUpcomingGaugesInterceptors() ?? [],
        wrapping: self.upcomingGauges(request:context:)
      )

    case "UpcomingGaugesPerDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_UpcomingGaugesPerDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_UpcomingGaugesPerDenomResponse>(),
        interceptors: self.interceptors?.makeUpcomingGaugesPerDenomInterceptors() ?? [],
        wrapping: self.upcomingGaugesPerDenom(request:context:)
      )

    case "RewardsEst":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_RewardsEstRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_RewardsEstResponse>(),
        interceptors: self.interceptors?.makeRewardsEstInterceptors() ?? [],
        wrapping: self.rewardsEst(request:context:)
      )

    case "LockableDurations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryLockableDurationsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryLockableDurationsResponse>(),
        interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? [],
        wrapping: self.lockableDurations(request:context:)
      )

    case "AllGroups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryAllGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryAllGroupsResponse>(),
        interceptors: self.interceptors?.makeAllGroupsInterceptors() ?? [],
        wrapping: self.allGroups(request:context:)
      )

    case "AllGroupsGauges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryAllGroupsGaugesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryAllGroupsGaugesResponse>(),
        interceptors: self.interceptors?.makeAllGroupsGaugesInterceptors() ?? [],
        wrapping: self.allGroupsGauges(request:context:)
      )

    case "AllGroupsWithGauge":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>(),
        interceptors: self.interceptors?.makeAllGroupsWithGaugeInterceptors() ?? [],
        wrapping: self.allGroupsWithGauge(request:context:)
      )

    case "GroupByGroupGaugeID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>(),
        interceptors: self.interceptors?.makeGroupByGroupGaugeIDInterceptors() ?? [],
        wrapping: self.groupByGroupGaugeID(request:context:)
      )

    case "CurrentWeightByGroupGaugeID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>(),
        interceptors: self.interceptors?.makeCurrentWeightByGroupGaugeIDInterceptors() ?? [],
        wrapping: self.currentWeightByGroupGaugeID(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Incentives_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Incentives_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Incentives_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'moduleToDistributeCoins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModuleToDistributeCoinsInterceptors() -> [ServerInterceptor<Osmosis_Incentives_ModuleToDistributeCoinsRequest, Osmosis_Incentives_ModuleToDistributeCoinsResponse>]

  /// - Returns: Interceptors to use when handling 'gaugeByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGaugeByIDInterceptors() -> [ServerInterceptor<Osmosis_Incentives_GaugeByIDRequest, Osmosis_Incentives_GaugeByIDResponse>]

  /// - Returns: Interceptors to use when handling 'gauges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGaugesInterceptors() -> [ServerInterceptor<Osmosis_Incentives_GaugesRequest, Osmosis_Incentives_GaugesResponse>]

  /// - Returns: Interceptors to use when handling 'activeGauges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActiveGaugesInterceptors() -> [ServerInterceptor<Osmosis_Incentives_ActiveGaugesRequest, Osmosis_Incentives_ActiveGaugesResponse>]

  /// - Returns: Interceptors to use when handling 'activeGaugesPerDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActiveGaugesPerDenomInterceptors() -> [ServerInterceptor<Osmosis_Incentives_ActiveGaugesPerDenomRequest, Osmosis_Incentives_ActiveGaugesPerDenomResponse>]

  /// - Returns: Interceptors to use when handling 'upcomingGauges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpcomingGaugesInterceptors() -> [ServerInterceptor<Osmosis_Incentives_UpcomingGaugesRequest, Osmosis_Incentives_UpcomingGaugesResponse>]

  /// - Returns: Interceptors to use when handling 'upcomingGaugesPerDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpcomingGaugesPerDenomInterceptors() -> [ServerInterceptor<Osmosis_Incentives_UpcomingGaugesPerDenomRequest, Osmosis_Incentives_UpcomingGaugesPerDenomResponse>]

  /// - Returns: Interceptors to use when handling 'rewardsEst'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsEstInterceptors() -> [ServerInterceptor<Osmosis_Incentives_RewardsEstRequest, Osmosis_Incentives_RewardsEstResponse>]

  /// - Returns: Interceptors to use when handling 'lockableDurations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLockableDurationsInterceptors() -> [ServerInterceptor<Osmosis_Incentives_QueryLockableDurationsRequest, Osmosis_Incentives_QueryLockableDurationsResponse>]

  /// - Returns: Interceptors to use when handling 'allGroups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllGroupsInterceptors() -> [ServerInterceptor<Osmosis_Incentives_QueryAllGroupsRequest, Osmosis_Incentives_QueryAllGroupsResponse>]

  /// - Returns: Interceptors to use when handling 'allGroupsGauges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllGroupsGaugesInterceptors() -> [ServerInterceptor<Osmosis_Incentives_QueryAllGroupsGaugesRequest, Osmosis_Incentives_QueryAllGroupsGaugesResponse>]

  /// - Returns: Interceptors to use when handling 'allGroupsWithGauge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllGroupsWithGaugeInterceptors() -> [ServerInterceptor<Osmosis_Incentives_QueryAllGroupsWithGaugeRequest, Osmosis_Incentives_QueryAllGroupsWithGaugeResponse>]

  /// - Returns: Interceptors to use when handling 'groupByGroupGaugeID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupByGroupGaugeIDInterceptors() -> [ServerInterceptor<Osmosis_Incentives_QueryGroupByGroupGaugeIDRequest, Osmosis_Incentives_QueryGroupByGroupGaugeIDResponse>]

  /// - Returns: Interceptors to use when handling 'currentWeightByGroupGaugeID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentWeightByGroupGaugeIDInterceptors() -> [ServerInterceptor<Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDRequest, Osmosis_Incentives_QueryCurrentWeightByGroupGaugeIDResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Incentives_ParamsRequest, Osmosis_Incentives_ParamsResponse>]
}

internal enum Osmosis_Incentives_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.incentives.Query",
    methods: [
      Osmosis_Incentives_QueryServerMetadata.Methods.moduleToDistributeCoins,
      Osmosis_Incentives_QueryServerMetadata.Methods.gaugeByID,
      Osmosis_Incentives_QueryServerMetadata.Methods.gauges,
      Osmosis_Incentives_QueryServerMetadata.Methods.activeGauges,
      Osmosis_Incentives_QueryServerMetadata.Methods.activeGaugesPerDenom,
      Osmosis_Incentives_QueryServerMetadata.Methods.upcomingGauges,
      Osmosis_Incentives_QueryServerMetadata.Methods.upcomingGaugesPerDenom,
      Osmosis_Incentives_QueryServerMetadata.Methods.rewardsEst,
      Osmosis_Incentives_QueryServerMetadata.Methods.lockableDurations,
      Osmosis_Incentives_QueryServerMetadata.Methods.allGroups,
      Osmosis_Incentives_QueryServerMetadata.Methods.allGroupsGauges,
      Osmosis_Incentives_QueryServerMetadata.Methods.allGroupsWithGauge,
      Osmosis_Incentives_QueryServerMetadata.Methods.groupByGroupGaugeID,
      Osmosis_Incentives_QueryServerMetadata.Methods.currentWeightByGroupGaugeID,
      Osmosis_Incentives_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let moduleToDistributeCoins = GRPCMethodDescriptor(
      name: "ModuleToDistributeCoins",
      path: "/osmosis.incentives.Query/ModuleToDistributeCoins",
      type: GRPCCallType.unary
    )

    internal static let gaugeByID = GRPCMethodDescriptor(
      name: "GaugeByID",
      path: "/osmosis.incentives.Query/GaugeByID",
      type: GRPCCallType.unary
    )

    internal static let gauges = GRPCMethodDescriptor(
      name: "Gauges",
      path: "/osmosis.incentives.Query/Gauges",
      type: GRPCCallType.unary
    )

    internal static let activeGauges = GRPCMethodDescriptor(
      name: "ActiveGauges",
      path: "/osmosis.incentives.Query/ActiveGauges",
      type: GRPCCallType.unary
    )

    internal static let activeGaugesPerDenom = GRPCMethodDescriptor(
      name: "ActiveGaugesPerDenom",
      path: "/osmosis.incentives.Query/ActiveGaugesPerDenom",
      type: GRPCCallType.unary
    )

    internal static let upcomingGauges = GRPCMethodDescriptor(
      name: "UpcomingGauges",
      path: "/osmosis.incentives.Query/UpcomingGauges",
      type: GRPCCallType.unary
    )

    internal static let upcomingGaugesPerDenom = GRPCMethodDescriptor(
      name: "UpcomingGaugesPerDenom",
      path: "/osmosis.incentives.Query/UpcomingGaugesPerDenom",
      type: GRPCCallType.unary
    )

    internal static let rewardsEst = GRPCMethodDescriptor(
      name: "RewardsEst",
      path: "/osmosis.incentives.Query/RewardsEst",
      type: GRPCCallType.unary
    )

    internal static let lockableDurations = GRPCMethodDescriptor(
      name: "LockableDurations",
      path: "/osmosis.incentives.Query/LockableDurations",
      type: GRPCCallType.unary
    )

    internal static let allGroups = GRPCMethodDescriptor(
      name: "AllGroups",
      path: "/osmosis.incentives.Query/AllGroups",
      type: GRPCCallType.unary
    )

    internal static let allGroupsGauges = GRPCMethodDescriptor(
      name: "AllGroupsGauges",
      path: "/osmosis.incentives.Query/AllGroupsGauges",
      type: GRPCCallType.unary
    )

    internal static let allGroupsWithGauge = GRPCMethodDescriptor(
      name: "AllGroupsWithGauge",
      path: "/osmosis.incentives.Query/AllGroupsWithGauge",
      type: GRPCCallType.unary
    )

    internal static let groupByGroupGaugeID = GRPCMethodDescriptor(
      name: "GroupByGroupGaugeID",
      path: "/osmosis.incentives.Query/GroupByGroupGaugeID",
      type: GRPCCallType.unary
    )

    internal static let currentWeightByGroupGaugeID = GRPCMethodDescriptor(
      name: "CurrentWeightByGroupGaugeID",
      path: "/osmosis.incentives.Query/CurrentWeightByGroupGaugeID",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.incentives.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
