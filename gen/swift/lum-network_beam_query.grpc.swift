//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: lum-network/beam/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Lum_Network_Beam_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Lum_Network_Beam_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? { get }

  func beam(
    _ request: Lum_Network_Beam_QueryGetBeamRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Beam_QueryGetBeamRequest, Lum_Network_Beam_QueryGetBeamResponse>

  func beams(
    _ request: Lum_Network_Beam_QueryFetchBeamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Beam_QueryFetchBeamsRequest, Lum_Network_Beam_QueryFetchBeamsResponse>

  func beamsOpenQueue(
    _ request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>
}

extension Lum_Network_Beam_QueryClientProtocol {
  internal var serviceName: String {
    return "lum.network.beam.Query"
  }

  /// Unary call to Beam
  ///
  /// - Parameters:
  ///   - request: Request to send to Beam.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func beam(
    _ request: Lum_Network_Beam_QueryGetBeamRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Beam_QueryGetBeamRequest, Lum_Network_Beam_QueryGetBeamResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamInterceptors() ?? []
    )
  }

  /// Unary call to Beams
  ///
  /// - Parameters:
  ///   - request: Request to send to Beams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func beams(
    _ request: Lum_Network_Beam_QueryFetchBeamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Beam_QueryFetchBeamsRequest, Lum_Network_Beam_QueryFetchBeamsResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamsInterceptors() ?? []
    )
  }

  /// Unary call to BeamsOpenQueue
  ///
  /// - Parameters:
  ///   - request: Request to send to BeamsOpenQueue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func beamsOpenQueue(
    _ request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse> {
    return self.makeUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beamsOpenQueue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamsOpenQueueInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Lum_Network_Beam_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Lum_Network_Beam_QueryNIOClient")
internal final class Lum_Network_Beam_QueryClient: Lum_Network_Beam_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the lum.network.beam.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Lum_Network_Beam_QueryNIOClient: Lum_Network_Beam_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the lum.network.beam.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Lum_Network_Beam_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? { get }

  func makeBeamCall(
    _ request: Lum_Network_Beam_QueryGetBeamRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Beam_QueryGetBeamRequest, Lum_Network_Beam_QueryGetBeamResponse>

  func makeBeamsCall(
    _ request: Lum_Network_Beam_QueryFetchBeamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Beam_QueryFetchBeamsRequest, Lum_Network_Beam_QueryFetchBeamsResponse>

  func makeBeamsOpenQueueCall(
    _ request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Lum_Network_Beam_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Lum_Network_Beam_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeBeamCall(
    _ request: Lum_Network_Beam_QueryGetBeamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Beam_QueryGetBeamRequest, Lum_Network_Beam_QueryGetBeamResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamInterceptors() ?? []
    )
  }

  internal func makeBeamsCall(
    _ request: Lum_Network_Beam_QueryFetchBeamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Beam_QueryFetchBeamsRequest, Lum_Network_Beam_QueryFetchBeamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamsInterceptors() ?? []
    )
  }

  internal func makeBeamsOpenQueueCall(
    _ request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse> {
    return self.makeAsyncUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beamsOpenQueue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamsOpenQueueInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Lum_Network_Beam_QueryAsyncClientProtocol {
  internal func beam(
    _ request: Lum_Network_Beam_QueryGetBeamRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Beam_QueryGetBeamResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beam.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamInterceptors() ?? []
    )
  }

  internal func beams(
    _ request: Lum_Network_Beam_QueryFetchBeamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Beam_QueryFetchBeamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamsInterceptors() ?? []
    )
  }

  internal func beamsOpenQueue(
    _ request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse {
    return try await self.performAsyncUnaryCall(
      path: Lum_Network_Beam_QueryClientMetadata.Methods.beamsOpenQueue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeamsOpenQueueInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Lum_Network_Beam_QueryAsyncClient: Lum_Network_Beam_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Lum_Network_Beam_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Lum_Network_Beam_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'beam'.
  func makeBeamInterceptors() -> [ClientInterceptor<Lum_Network_Beam_QueryGetBeamRequest, Lum_Network_Beam_QueryGetBeamResponse>]

  /// - Returns: Interceptors to use when invoking 'beams'.
  func makeBeamsInterceptors() -> [ClientInterceptor<Lum_Network_Beam_QueryFetchBeamsRequest, Lum_Network_Beam_QueryFetchBeamsResponse>]

  /// - Returns: Interceptors to use when invoking 'beamsOpenQueue'.
  func makeBeamsOpenQueueInterceptors() -> [ClientInterceptor<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>]
}

internal enum Lum_Network_Beam_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "lum.network.beam.Query",
    methods: [
      Lum_Network_Beam_QueryClientMetadata.Methods.beam,
      Lum_Network_Beam_QueryClientMetadata.Methods.beams,
      Lum_Network_Beam_QueryClientMetadata.Methods.beamsOpenQueue,
    ]
  )

  internal enum Methods {
    internal static let beam = GRPCMethodDescriptor(
      name: "Beam",
      path: "/lum.network.beam.Query/Beam",
      type: GRPCCallType.unary
    )

    internal static let beams = GRPCMethodDescriptor(
      name: "Beams",
      path: "/lum.network.beam.Query/Beams",
      type: GRPCCallType.unary
    )

    internal static let beamsOpenQueue = GRPCMethodDescriptor(
      name: "BeamsOpenQueue",
      path: "/lum.network.beam.Query/BeamsOpenQueue",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Lum_Network_Beam_QueryProvider: CallHandlerProvider {
  var interceptors: Lum_Network_Beam_QueryServerInterceptorFactoryProtocol? { get }

  func beam(request: Lum_Network_Beam_QueryGetBeamRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Beam_QueryGetBeamResponse>

  func beams(request: Lum_Network_Beam_QueryFetchBeamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Beam_QueryFetchBeamsResponse>

  func beamsOpenQueue(request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>
}

extension Lum_Network_Beam_QueryProvider {
  internal var serviceName: Substring {
    return Lum_Network_Beam_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Beam":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Beam_QueryGetBeamRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Beam_QueryGetBeamResponse>(),
        interceptors: self.interceptors?.makeBeamInterceptors() ?? [],
        userFunction: self.beam(request:context:)
      )

    case "Beams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Beam_QueryFetchBeamsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Beam_QueryFetchBeamsResponse>(),
        interceptors: self.interceptors?.makeBeamsInterceptors() ?? [],
        userFunction: self.beams(request:context:)
      )

    case "BeamsOpenQueue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>(),
        interceptors: self.interceptors?.makeBeamsOpenQueueInterceptors() ?? [],
        userFunction: self.beamsOpenQueue(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Lum_Network_Beam_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Lum_Network_Beam_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func beam(
    request: Lum_Network_Beam_QueryGetBeamRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Beam_QueryGetBeamResponse

  @Sendable func beams(
    request: Lum_Network_Beam_QueryFetchBeamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Beam_QueryFetchBeamsResponse

  @Sendable func beamsOpenQueue(
    request: Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Lum_Network_Beam_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Lum_Network_Beam_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Lum_Network_Beam_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Lum_Network_Beam_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Beam":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Beam_QueryGetBeamRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Beam_QueryGetBeamResponse>(),
        interceptors: self.interceptors?.makeBeamInterceptors() ?? [],
        wrapping: self.beam(request:context:)
      )

    case "Beams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Beam_QueryFetchBeamsRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Beam_QueryFetchBeamsResponse>(),
        interceptors: self.interceptors?.makeBeamsInterceptors() ?? [],
        wrapping: self.beams(request:context:)
      )

    case "BeamsOpenQueue":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest>(),
        responseSerializer: ProtobufSerializer<Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>(),
        interceptors: self.interceptors?.makeBeamsOpenQueueInterceptors() ?? [],
        wrapping: self.beamsOpenQueue(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Lum_Network_Beam_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'beam'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBeamInterceptors() -> [ServerInterceptor<Lum_Network_Beam_QueryGetBeamRequest, Lum_Network_Beam_QueryGetBeamResponse>]

  /// - Returns: Interceptors to use when handling 'beams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBeamsInterceptors() -> [ServerInterceptor<Lum_Network_Beam_QueryFetchBeamsRequest, Lum_Network_Beam_QueryFetchBeamsResponse>]

  /// - Returns: Interceptors to use when handling 'beamsOpenQueue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBeamsOpenQueueInterceptors() -> [ServerInterceptor<Lum_Network_Beam_QueryFetchBeamsOpenQueueRequest, Lum_Network_Beam_QueryFetchBeamsOpenQueueResponse>]
}

internal enum Lum_Network_Beam_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "lum.network.beam.Query",
    methods: [
      Lum_Network_Beam_QueryServerMetadata.Methods.beam,
      Lum_Network_Beam_QueryServerMetadata.Methods.beams,
      Lum_Network_Beam_QueryServerMetadata.Methods.beamsOpenQueue,
    ]
  )

  internal enum Methods {
    internal static let beam = GRPCMethodDescriptor(
      name: "Beam",
      path: "/lum.network.beam.Query/Beam",
      type: GRPCCallType.unary
    )

    internal static let beams = GRPCMethodDescriptor(
      name: "Beams",
      path: "/lum.network.beam.Query/Beams",
      type: GRPCCallType.unary
    )

    internal static let beamsOpenQueue = GRPCMethodDescriptor(
      name: "BeamsOpenQueue",
      path: "/lum.network.beam.Query/BeamsOpenQueue",
      type: GRPCCallType.unary
    )
  }
}
