//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/bundles/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Kyve_Bundles_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Bundles_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func submitBundleProposal(
    _ request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>

  func voteBundleProposal(
    _ request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgVoteBundleProposal, Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>

  func claimUploaderRole(
    _ request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgClaimUploaderRole, Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>

  func skipUploaderRole(
    _ request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgSkipUploaderRole, Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>

  func updateParams(
    _ request: Kyve_Bundles_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgUpdateParams, Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>
}

extension Kyve_Bundles_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "kyve.bundles.v1beta1.Msg"
  }

  /// SubmitBundleProposal ...
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitBundleProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitBundleProposal(
    _ request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse> {
    return self.makeUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.submitBundleProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBundleProposalInterceptors() ?? []
    )
  }

  /// VoteBundleProposal ...
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteBundleProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteBundleProposal(
    _ request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgVoteBundleProposal, Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse> {
    return self.makeUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.voteBundleProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteBundleProposalInterceptors() ?? []
    )
  }

  /// ClaimUploaderRole ...
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimUploaderRole.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimUploaderRole(
    _ request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgClaimUploaderRole, Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse> {
    return self.makeUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.claimUploaderRole.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUploaderRoleInterceptors() ?? []
    )
  }

  /// SkipUploaderRole ...
  ///
  /// - Parameters:
  ///   - request: Request to send to SkipUploaderRole.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func skipUploaderRole(
    _ request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgSkipUploaderRole, Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse> {
    return self.makeUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.skipUploaderRole.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSkipUploaderRoleInterceptors() ?? []
    )
  }

  /// UpdateParams defines a governance operation for updating the x/bundles module
  /// parameters. The authority is hard-coded to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Kyve_Bundles_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Bundles_V1beta1_MsgUpdateParams, Kyve_Bundles_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Bundles_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Bundles_V1beta1_MsgNIOClient")
internal final class Kyve_Bundles_V1beta1_MsgClient: Kyve_Bundles_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.bundles.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Bundles_V1beta1_MsgNIOClient: Kyve_Bundles_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.bundles.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Bundles_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeSubmitBundleProposalCall(
    _ request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>

  func makeVoteBundleProposalCall(
    _ request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgVoteBundleProposal, Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>

  func makeClaimUploaderRoleCall(
    _ request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgClaimUploaderRole, Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>

  func makeSkipUploaderRoleCall(
    _ request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgSkipUploaderRole, Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>

  func makeUpdateParamsCall(
    _ request: Kyve_Bundles_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgUpdateParams, Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Bundles_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Bundles_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSubmitBundleProposalCall(
    _ request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.submitBundleProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBundleProposalInterceptors() ?? []
    )
  }

  internal func makeVoteBundleProposalCall(
    _ request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgVoteBundleProposal, Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.voteBundleProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteBundleProposalInterceptors() ?? []
    )
  }

  internal func makeClaimUploaderRoleCall(
    _ request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgClaimUploaderRole, Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.claimUploaderRole.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUploaderRoleInterceptors() ?? []
    )
  }

  internal func makeSkipUploaderRoleCall(
    _ request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgSkipUploaderRole, Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.skipUploaderRole.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSkipUploaderRoleInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Kyve_Bundles_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Bundles_V1beta1_MsgUpdateParams, Kyve_Bundles_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Bundles_V1beta1_MsgAsyncClientProtocol {
  internal func submitBundleProposal(
    _ request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.submitBundleProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBundleProposalInterceptors() ?? []
    )
  }

  internal func voteBundleProposal(
    _ request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.voteBundleProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteBundleProposalInterceptors() ?? []
    )
  }

  internal func claimUploaderRole(
    _ request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.claimUploaderRole.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimUploaderRoleInterceptors() ?? []
    )
  }

  internal func skipUploaderRole(
    _ request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.skipUploaderRole.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSkipUploaderRoleInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Kyve_Bundles_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Bundles_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Bundles_V1beta1_MsgAsyncClient: Kyve_Bundles_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Bundles_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'submitBundleProposal'.
  func makeSubmitBundleProposalInterceptors() -> [ClientInterceptor<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'voteBundleProposal'.
  func makeVoteBundleProposalInterceptors() -> [ClientInterceptor<Kyve_Bundles_V1beta1_MsgVoteBundleProposal, Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'claimUploaderRole'.
  func makeClaimUploaderRoleInterceptors() -> [ClientInterceptor<Kyve_Bundles_V1beta1_MsgClaimUploaderRole, Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>]

  /// - Returns: Interceptors to use when invoking 'skipUploaderRole'.
  func makeSkipUploaderRoleInterceptors() -> [ClientInterceptor<Kyve_Bundles_V1beta1_MsgSkipUploaderRole, Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Kyve_Bundles_V1beta1_MsgUpdateParams, Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Kyve_Bundles_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.bundles.v1beta1.Msg",
    methods: [
      Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.submitBundleProposal,
      Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.voteBundleProposal,
      Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.claimUploaderRole,
      Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.skipUploaderRole,
      Kyve_Bundles_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let submitBundleProposal = GRPCMethodDescriptor(
      name: "SubmitBundleProposal",
      path: "/kyve.bundles.v1beta1.Msg/SubmitBundleProposal",
      type: GRPCCallType.unary
    )

    internal static let voteBundleProposal = GRPCMethodDescriptor(
      name: "VoteBundleProposal",
      path: "/kyve.bundles.v1beta1.Msg/VoteBundleProposal",
      type: GRPCCallType.unary
    )

    internal static let claimUploaderRole = GRPCMethodDescriptor(
      name: "ClaimUploaderRole",
      path: "/kyve.bundles.v1beta1.Msg/ClaimUploaderRole",
      type: GRPCCallType.unary
    )

    internal static let skipUploaderRole = GRPCMethodDescriptor(
      name: "SkipUploaderRole",
      path: "/kyve.bundles.v1beta1.Msg/SkipUploaderRole",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/kyve.bundles.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Bundles_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Kyve_Bundles_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// SubmitBundleProposal ...
  func submitBundleProposal(request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>

  /// VoteBundleProposal ...
  func voteBundleProposal(request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>

  /// ClaimUploaderRole ...
  func claimUploaderRole(request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>

  /// SkipUploaderRole ...
  func skipUploaderRole(request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>

  /// UpdateParams defines a governance operation for updating the x/bundles module
  /// parameters. The authority is hard-coded to the x/gov module account.
  func updateParams(request: Kyve_Bundles_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>
}

extension Kyve_Bundles_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Kyve_Bundles_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubmitBundleProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>(),
        interceptors: self.interceptors?.makeSubmitBundleProposalInterceptors() ?? [],
        userFunction: self.submitBundleProposal(request:context:)
      )

    case "VoteBundleProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgVoteBundleProposal>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>(),
        interceptors: self.interceptors?.makeVoteBundleProposalInterceptors() ?? [],
        userFunction: self.voteBundleProposal(request:context:)
      )

    case "ClaimUploaderRole":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgClaimUploaderRole>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>(),
        interceptors: self.interceptors?.makeClaimUploaderRoleInterceptors() ?? [],
        userFunction: self.claimUploaderRole(request:context:)
      )

    case "SkipUploaderRole":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgSkipUploaderRole>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>(),
        interceptors: self.interceptors?.makeSkipUploaderRoleInterceptors() ?? [],
        userFunction: self.skipUploaderRole(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Bundles_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Bundles_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// SubmitBundleProposal ...
  @Sendable func submitBundleProposal(
    request: Kyve_Bundles_V1beta1_MsgSubmitBundleProposal,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse

  /// VoteBundleProposal ...
  @Sendable func voteBundleProposal(
    request: Kyve_Bundles_V1beta1_MsgVoteBundleProposal,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse

  /// ClaimUploaderRole ...
  @Sendable func claimUploaderRole(
    request: Kyve_Bundles_V1beta1_MsgClaimUploaderRole,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse

  /// SkipUploaderRole ...
  @Sendable func skipUploaderRole(
    request: Kyve_Bundles_V1beta1_MsgSkipUploaderRole,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse

  /// UpdateParams defines a governance operation for updating the x/bundles module
  /// parameters. The authority is hard-coded to the x/gov module account.
  @Sendable func updateParams(
    request: Kyve_Bundles_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Bundles_V1beta1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Bundles_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Bundles_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Bundles_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Bundles_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubmitBundleProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>(),
        interceptors: self.interceptors?.makeSubmitBundleProposalInterceptors() ?? [],
        wrapping: self.submitBundleProposal(request:context:)
      )

    case "VoteBundleProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgVoteBundleProposal>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>(),
        interceptors: self.interceptors?.makeVoteBundleProposalInterceptors() ?? [],
        wrapping: self.voteBundleProposal(request:context:)
      )

    case "ClaimUploaderRole":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgClaimUploaderRole>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>(),
        interceptors: self.interceptors?.makeClaimUploaderRoleInterceptors() ?? [],
        wrapping: self.claimUploaderRole(request:context:)
      )

    case "SkipUploaderRole":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgSkipUploaderRole>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>(),
        interceptors: self.interceptors?.makeSkipUploaderRoleInterceptors() ?? [],
        wrapping: self.skipUploaderRole(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Bundles_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Bundles_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'submitBundleProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitBundleProposalInterceptors() -> [ServerInterceptor<Kyve_Bundles_V1beta1_MsgSubmitBundleProposal, Kyve_Bundles_V1beta1_MsgSubmitBundleProposalResponse>]

  /// - Returns: Interceptors to use when handling 'voteBundleProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteBundleProposalInterceptors() -> [ServerInterceptor<Kyve_Bundles_V1beta1_MsgVoteBundleProposal, Kyve_Bundles_V1beta1_MsgVoteBundleProposalResponse>]

  /// - Returns: Interceptors to use when handling 'claimUploaderRole'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimUploaderRoleInterceptors() -> [ServerInterceptor<Kyve_Bundles_V1beta1_MsgClaimUploaderRole, Kyve_Bundles_V1beta1_MsgClaimUploaderRoleResponse>]

  /// - Returns: Interceptors to use when handling 'skipUploaderRole'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSkipUploaderRoleInterceptors() -> [ServerInterceptor<Kyve_Bundles_V1beta1_MsgSkipUploaderRole, Kyve_Bundles_V1beta1_MsgSkipUploaderRoleResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Kyve_Bundles_V1beta1_MsgUpdateParams, Kyve_Bundles_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Kyve_Bundles_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "kyve.bundles.v1beta1.Msg",
    methods: [
      Kyve_Bundles_V1beta1_MsgServerMetadata.Methods.submitBundleProposal,
      Kyve_Bundles_V1beta1_MsgServerMetadata.Methods.voteBundleProposal,
      Kyve_Bundles_V1beta1_MsgServerMetadata.Methods.claimUploaderRole,
      Kyve_Bundles_V1beta1_MsgServerMetadata.Methods.skipUploaderRole,
      Kyve_Bundles_V1beta1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let submitBundleProposal = GRPCMethodDescriptor(
      name: "SubmitBundleProposal",
      path: "/kyve.bundles.v1beta1.Msg/SubmitBundleProposal",
      type: GRPCCallType.unary
    )

    internal static let voteBundleProposal = GRPCMethodDescriptor(
      name: "VoteBundleProposal",
      path: "/kyve.bundles.v1beta1.Msg/VoteBundleProposal",
      type: GRPCCallType.unary
    )

    internal static let claimUploaderRole = GRPCMethodDescriptor(
      name: "ClaimUploaderRole",
      path: "/kyve.bundles.v1beta1.Msg/ClaimUploaderRole",
      type: GRPCCallType.unary
    )

    internal static let skipUploaderRole = GRPCMethodDescriptor(
      name: "SkipUploaderRole",
      path: "/kyve.bundles.v1beta1.Msg/SkipUploaderRole",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/kyve.bundles.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
