// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kyve/stakers/v1beta1/stakers.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Staker contains all metadata for a staker
/// Every address can only create one staker (itself)
struct Kyve_Stakers_V1beta1_Staker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address ...
  var address: String = String()

  /// commission ...
  var commission: String = String()

  /// moniker ...
  var moniker: String = String()

  /// website ...
  var website: String = String()

  /// identity is the 64 bit keybase.io identity string
  var identity: String = String()

  /// security_contact ...
  var securityContact: String = String()

  /// details are some additional notes the staker finds important
  var details: String = String()

  /// commission_rewards are the rewards in $KYVE earned through commission
  var commissionRewards: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Valaccount gets authorized by a staker to
/// vote in a given pool by favor of the staker.
struct Kyve_Stakers_V1beta1_Valaccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id defines the pool in which the address
  /// is allowed to vote in.
  var poolID: UInt64 = 0

  /// staker is the address the valaccount is voting for.
  var staker: String = String()

  /// valaddress is the account stored on the protocol
  /// node which votes for the staker in the given pool
  var valaddress: String = String()

  /// When a node is inactive (does not vote at all)
  /// A point is added, after a certain amount of points
  /// is reached the node gets kicked out.
  var points: UInt64 = 0

  /// isLeaving indicates if a staker is leaving the given pool.
  var isLeaving: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CommissionChangeEntry stores the information for an
/// upcoming commission change. A commission change is never
/// instant, so delegators have time to redelegate in case
/// they don't agree with the new commission.
struct Kyve_Stakers_V1beta1_CommissionChangeEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// index is needed for the queue-algorithm which
  /// processes the commission changes
  var index: UInt64 = 0

  /// staker is the address of the affected staker
  var staker: String = String()

  /// commission is the new commission which will
  /// be applied after the waiting time is over.
  var commission: String = String()

  /// creation_date is the UNIX-timestamp in seconds
  /// when the entry was created.
  var creationDate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// LeavePoolEntry stores the information for an upcoming
/// pool leave. A staker can't leave a pool instantly.
/// Instead a the `LeaveTime` needs to be awaited.
/// If a staker start to leave a pool, it will be shown
/// in the UI to the delegators.
struct Kyve_Stakers_V1beta1_LeavePoolEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// index is needed for the queue-algorithm which
  /// processes the commission changes
  var index: UInt64 = 0

  /// staker is the address of the affected staker
  var staker: String = String()

  /// pool_id indicates the pool the staker wants to leave
  var poolID: UInt64 = 0

  /// creation_date is the UNIX-timestamp in seconds
  /// when the entry was created.
  var creationDate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UnbondingState stores the state for the unbonding of stakes and delegations.
struct Kyve_Stakers_V1beta1_QueueState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// low_index is the tail of the queue. It is the
  /// oldest entry in the queue. If this entry isn't
  /// due, non of the other entries is.
  var lowIndex: UInt64 = 0

  /// high_index is the head of the queue. New entries
  /// are added to the top.
  var highIndex: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Kyve_Stakers_V1beta1_Staker: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_Valaccount: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_CommissionChangeEntry: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_LeavePoolEntry: @unchecked Sendable {}
extension Kyve_Stakers_V1beta1_QueueState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kyve.stakers.v1beta1"

extension Kyve_Stakers_V1beta1_Staker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Staker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "commission"),
    3: .same(proto: "moniker"),
    4: .same(proto: "website"),
    5: .same(proto: "identity"),
    6: .standard(proto: "security_contact"),
    7: .same(proto: "details"),
    8: .standard(proto: "commission_rewards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.website) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.securityContact) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.details) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.commissionRewards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 2)
    }
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 3)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 4)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 5)
    }
    if !self.securityContact.isEmpty {
      try visitor.visitSingularStringField(value: self.securityContact, fieldNumber: 6)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 7)
    }
    if self.commissionRewards != 0 {
      try visitor.visitSingularUInt64Field(value: self.commissionRewards, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_Staker, rhs: Kyve_Stakers_V1beta1_Staker) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.moniker != rhs.moniker {return false}
    if lhs.website != rhs.website {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.securityContact != rhs.securityContact {return false}
    if lhs.details != rhs.details {return false}
    if lhs.commissionRewards != rhs.commissionRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_Valaccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Valaccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "staker"),
    3: .same(proto: "valaddress"),
    4: .same(proto: "points"),
    5: .standard(proto: "is_leaving"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valaddress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.points) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isLeaving) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if !self.valaddress.isEmpty {
      try visitor.visitSingularStringField(value: self.valaddress, fieldNumber: 3)
    }
    if self.points != 0 {
      try visitor.visitSingularUInt64Field(value: self.points, fieldNumber: 4)
    }
    if self.isLeaving != false {
      try visitor.visitSingularBoolField(value: self.isLeaving, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_Valaccount, rhs: Kyve_Stakers_V1beta1_Valaccount) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.valaddress != rhs.valaddress {return false}
    if lhs.points != rhs.points {return false}
    if lhs.isLeaving != rhs.isLeaving {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_CommissionChangeEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommissionChangeEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "staker"),
    3: .same(proto: "commission"),
    4: .standard(proto: "creation_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commission) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.creationDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if !self.commission.isEmpty {
      try visitor.visitSingularStringField(value: self.commission, fieldNumber: 3)
    }
    if self.creationDate != 0 {
      try visitor.visitSingularInt64Field(value: self.creationDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_CommissionChangeEntry, rhs: Kyve_Stakers_V1beta1_CommissionChangeEntry) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.commission != rhs.commission {return false}
    if lhs.creationDate != rhs.creationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_LeavePoolEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeavePoolEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "staker"),
    3: .standard(proto: "pool_id"),
    4: .standard(proto: "creation_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.staker) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.creationDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt64Field(value: self.index, fieldNumber: 1)
    }
    if !self.staker.isEmpty {
      try visitor.visitSingularStringField(value: self.staker, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if self.creationDate != 0 {
      try visitor.visitSingularInt64Field(value: self.creationDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_LeavePoolEntry, rhs: Kyve_Stakers_V1beta1_LeavePoolEntry) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.staker != rhs.staker {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.creationDate != rhs.creationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kyve_Stakers_V1beta1_QueueState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueueState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "low_index"),
    2: .standard(proto: "high_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.lowIndex) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.highIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lowIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.lowIndex, fieldNumber: 1)
    }
    if self.highIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.highIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kyve_Stakers_V1beta1_QueueState, rhs: Kyve_Stakers_V1beta1_QueueState) -> Bool {
    if lhs.lowIndex != rhs.lowIndex {return false}
    if lhs.highIndex != rhs.highIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
