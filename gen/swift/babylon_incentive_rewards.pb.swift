// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/incentive/rewards.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// FinalityProviderHistoricalRewards represents the cumulative rewards ratio of
/// the finality provider per sat in that period. The period is ommited here and
/// should be part of the key used to store this structure. Key: Prefix +
/// Finality provider bech32 address + Period.
struct Babylon_Incentive_FinalityProviderHistoricalRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The cumulative rewards of that finality provider per sat until that period
  /// This coins will aways increase the value, never be reduced due to keep
  /// acumulation and when the cumulative rewards will be used to distribute
  /// rewards, 2 periods will be loaded, calculate the difference and multiplied
  /// by the total sat amount delegated
  /// https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
  var cumulativeRewardsPerSat: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// FinalityProviderCurrentRewards represents the current rewards of the pool of
/// BTC delegations that delegated for this finality provider is entitled to.
/// Note: This rewards are for the BTC delegators that delegated to this FP
/// the FP itself is not the owner or can withdraw this rewards.
/// If a slash event happens with this finality provider, all the delegations
/// need to withdraw to the RewardGauge and the related scrutures should be
/// deleted. Key: Prefix + Finality provider bech32 address.
struct Babylon_Incentive_FinalityProviderCurrentRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// CurrentRewards is the current rewards that the finality provider have and
  /// it was not yet stored inside the FinalityProviderHistoricalRewards. Once
  /// something happens that modifies the amount of satoshis delegated to this
  /// finality provider or the delegators starting period (activation, unbonding
  /// or btc rewards withdraw) a new period must be created, accumulate this
  /// rewards to FinalityProviderHistoricalRewards with a new period and zero out
  /// the Current Rewards.
  var currentRewards: [Cosmos_Base_V1beta1_Coin] = []

  /// Period stores the current period that serves as a reference for
  /// creating new historical rewards and correlate with
  /// BTCDelegationRewardsTracker StartPeriodCumulativeReward.
  var period: UInt64 = 0

  /// TotalActiveSat is the total amount of active satoshi delegated
  /// to this finality provider.
  var totalActiveSat: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BTCDelegationRewardsTracker represents the structure that holds information
/// from the last time this BTC delegator withdraw the rewards or modified his
/// active staked amount to one finality provider.
/// The finality provider address is ommitted here but should be part of the
/// key used to store this structure together with the BTC delegator address.
struct Babylon_Incentive_BTCDelegationRewardsTracker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// StartPeriodCumulativeReward the starting period the the BTC delegator
  /// made his last withdraw of rewards or modified his active staking amount
  /// of satoshis.
  var startPeriodCumulativeReward: UInt64 = 0

  /// TotalActiveSat is the total amount of active satoshi delegated
  /// to one specific finality provider.
  var totalActiveSat: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Incentive_FinalityProviderHistoricalRewards: @unchecked Sendable {}
extension Babylon_Incentive_FinalityProviderCurrentRewards: @unchecked Sendable {}
extension Babylon_Incentive_BTCDelegationRewardsTracker: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.incentive"

extension Babylon_Incentive_FinalityProviderHistoricalRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalityProviderHistoricalRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cumulative_rewards_per_sat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cumulativeRewardsPerSat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cumulativeRewardsPerSat.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cumulativeRewardsPerSat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_FinalityProviderHistoricalRewards, rhs: Babylon_Incentive_FinalityProviderHistoricalRewards) -> Bool {
    if lhs.cumulativeRewardsPerSat != rhs.cumulativeRewardsPerSat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Incentive_FinalityProviderCurrentRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FinalityProviderCurrentRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_rewards"),
    2: .same(proto: "period"),
    3: .standard(proto: "total_active_sat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.currentRewards) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.period) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.totalActiveSat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currentRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.currentRewards, fieldNumber: 1)
    }
    if self.period != 0 {
      try visitor.visitSingularUInt64Field(value: self.period, fieldNumber: 2)
    }
    if !self.totalActiveSat.isEmpty {
      try visitor.visitSingularBytesField(value: self.totalActiveSat, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_FinalityProviderCurrentRewards, rhs: Babylon_Incentive_FinalityProviderCurrentRewards) -> Bool {
    if lhs.currentRewards != rhs.currentRewards {return false}
    if lhs.period != rhs.period {return false}
    if lhs.totalActiveSat != rhs.totalActiveSat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Incentive_BTCDelegationRewardsTracker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCDelegationRewardsTracker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_period_cumulative_reward"),
    2: .standard(proto: "total_active_sat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.startPeriodCumulativeReward) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.totalActiveSat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startPeriodCumulativeReward != 0 {
      try visitor.visitSingularUInt64Field(value: self.startPeriodCumulativeReward, fieldNumber: 1)
    }
    if !self.totalActiveSat.isEmpty {
      try visitor.visitSingularBytesField(value: self.totalActiveSat, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Incentive_BTCDelegationRewardsTracker, rhs: Babylon_Incentive_BTCDelegationRewardsTracker) -> Bool {
    if lhs.startPeriodCumulativeReward != rhs.startPeriodCumulativeReward {return false}
    if lhs.totalActiveSat != rhs.totalActiveSat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
