// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dymension/rollapp/block_descriptor.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BlockDescriptor defines a single rollapp chain block description.
struct Dymensionxyz_Dymension_Rollapp_BlockDescriptor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// height is the height of the block
  var height: UInt64 = 0

  /// stateRoot is a 32 byte array of the hash of the block (state root of the block)
  var stateRoot: Data = Data()

  /// intermediateStatesRoot is a 32 byte array representing 
  /// the root of a Merkle tree built from the ISRs of the block (Intermediate State Roots)
  var intermediateStatesRoot: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BlockDescriptors defines list of BlockDescriptor.
struct Dymensionxyz_Dymension_Rollapp_BlockDescriptors {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bd: [Dymensionxyz_Dymension_Rollapp_BlockDescriptor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Dymensionxyz_Dymension_Rollapp_BlockDescriptor: @unchecked Sendable {}
extension Dymensionxyz_Dymension_Rollapp_BlockDescriptors: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dymensionxyz.dymension.rollapp"

extension Dymensionxyz_Dymension_Rollapp_BlockDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockDescriptor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "stateRoot"),
    3: .same(proto: "intermediateStatesRoot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.stateRoot) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.intermediateStatesRoot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 1)
    }
    if !self.stateRoot.isEmpty {
      try visitor.visitSingularBytesField(value: self.stateRoot, fieldNumber: 2)
    }
    if !self.intermediateStatesRoot.isEmpty {
      try visitor.visitSingularBytesField(value: self.intermediateStatesRoot, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_BlockDescriptor, rhs: Dymensionxyz_Dymension_Rollapp_BlockDescriptor) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.stateRoot != rhs.stateRoot {return false}
    if lhs.intermediateStatesRoot != rhs.intermediateStatesRoot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dymensionxyz_Dymension_Rollapp_BlockDescriptors: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockDescriptors"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BD"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.bd) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bd.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bd, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dymensionxyz_Dymension_Rollapp_BlockDescriptors, rhs: Dymensionxyz_Dymension_Rollapp_BlockDescriptors) -> Bool {
    if lhs.bd != rhs.bd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
