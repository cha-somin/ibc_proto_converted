//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/peggy/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Injective_Peggy_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Peggy_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? { get }

  func valsetConfirm(
    _ request: Injective_Peggy_V1_MsgValsetConfirm,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgValsetConfirm, Injective_Peggy_V1_MsgValsetConfirmResponse>

  func sendToEth(
    _ request: Injective_Peggy_V1_MsgSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgSendToEth, Injective_Peggy_V1_MsgSendToEthResponse>

  func requestBatch(
    _ request: Injective_Peggy_V1_MsgRequestBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgRequestBatch, Injective_Peggy_V1_MsgRequestBatchResponse>

  func confirmBatch(
    _ request: Injective_Peggy_V1_MsgConfirmBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgConfirmBatch, Injective_Peggy_V1_MsgConfirmBatchResponse>

  func depositClaim(
    _ request: Injective_Peggy_V1_MsgDepositClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgDepositClaim, Injective_Peggy_V1_MsgDepositClaimResponse>

  func withdrawClaim(
    _ request: Injective_Peggy_V1_MsgWithdrawClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgWithdrawClaim, Injective_Peggy_V1_MsgWithdrawClaimResponse>

  func valsetUpdateClaim(
    _ request: Injective_Peggy_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgValsetUpdatedClaim, Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>

  func eRC20DeployedClaim(
    _ request: Injective_Peggy_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgERC20DeployedClaim, Injective_Peggy_V1_MsgERC20DeployedClaimResponse>

  func setOrchestratorAddresses(
    _ request: Injective_Peggy_V1_MsgSetOrchestratorAddresses,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgSetOrchestratorAddresses, Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>

  func cancelSendToEth(
    _ request: Injective_Peggy_V1_MsgCancelSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgCancelSendToEth, Injective_Peggy_V1_MsgCancelSendToEthResponse>

  func submitBadSignatureEvidence(
    _ request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>

  func updateParams(
    _ request: Injective_Peggy_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Peggy_V1_MsgUpdateParams, Injective_Peggy_V1_MsgUpdateParamsResponse>
}

extension Injective_Peggy_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "injective.peggy.v1.Msg"
  }

  /// Unary call to ValsetConfirm
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirm(
    _ request: Injective_Peggy_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgValsetConfirm, Injective_Peggy_V1_MsgValsetConfirmResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  /// Unary call to SendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendToEth(
    _ request: Injective_Peggy_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgSendToEth, Injective_Peggy_V1_MsgSendToEthResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.sendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to RequestBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestBatch(
    _ request: Injective_Peggy_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgRequestBatch, Injective_Peggy_V1_MsgRequestBatchResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.requestBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmBatch(
    _ request: Injective_Peggy_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgConfirmBatch, Injective_Peggy_V1_MsgConfirmBatchResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.confirmBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  /// Unary call to DepositClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositClaim(
    _ request: Injective_Peggy_V1_MsgDepositClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgDepositClaim, Injective_Peggy_V1_MsgDepositClaimResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.depositClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawClaim(
    _ request: Injective_Peggy_V1_MsgWithdrawClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgWithdrawClaim, Injective_Peggy_V1_MsgWithdrawClaimResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.withdrawClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? []
    )
  }

  /// Unary call to ValsetUpdateClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetUpdateClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetUpdateClaim(
    _ request: Injective_Peggy_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgValsetUpdatedClaim, Injective_Peggy_V1_MsgValsetUpdatedClaimResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.valsetUpdateClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  /// Unary call to ERC20DeployedClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20DeployedClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20DeployedClaim(
    _ request: Injective_Peggy_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgERC20DeployedClaim, Injective_Peggy_V1_MsgERC20DeployedClaimResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.eRC20DeployedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  /// Unary call to SetOrchestratorAddresses
  ///
  /// - Parameters:
  ///   - request: Request to send to SetOrchestratorAddresses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setOrchestratorAddresses(
    _ request: Injective_Peggy_V1_MsgSetOrchestratorAddresses,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgSetOrchestratorAddresses, Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.setOrchestratorAddresses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressesInterceptors() ?? []
    )
  }

  /// Unary call to CancelSendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelSendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelSendToEth(
    _ request: Injective_Peggy_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgCancelSendToEth, Injective_Peggy_V1_MsgCancelSendToEthResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.cancelSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to SubmitBadSignatureEvidence
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitBadSignatureEvidence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitBadSignatureEvidence(
    _ request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }

  /// Unary call to UpdateParams
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Injective_Peggy_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Peggy_V1_MsgUpdateParams, Injective_Peggy_V1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Peggy_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Peggy_V1_MsgNIOClient")
internal final class Injective_Peggy_V1_MsgClient: Injective_Peggy_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.peggy.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Peggy_V1_MsgNIOClient: Injective_Peggy_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.peggy.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Peggy_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeValsetConfirmCall(
    _ request: Injective_Peggy_V1_MsgValsetConfirm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgValsetConfirm, Injective_Peggy_V1_MsgValsetConfirmResponse>

  func makeSendToEthCall(
    _ request: Injective_Peggy_V1_MsgSendToEth,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgSendToEth, Injective_Peggy_V1_MsgSendToEthResponse>

  func makeRequestBatchCall(
    _ request: Injective_Peggy_V1_MsgRequestBatch,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgRequestBatch, Injective_Peggy_V1_MsgRequestBatchResponse>

  func makeConfirmBatchCall(
    _ request: Injective_Peggy_V1_MsgConfirmBatch,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgConfirmBatch, Injective_Peggy_V1_MsgConfirmBatchResponse>

  func makeDepositClaimCall(
    _ request: Injective_Peggy_V1_MsgDepositClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgDepositClaim, Injective_Peggy_V1_MsgDepositClaimResponse>

  func makeWithdrawClaimCall(
    _ request: Injective_Peggy_V1_MsgWithdrawClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgWithdrawClaim, Injective_Peggy_V1_MsgWithdrawClaimResponse>

  func makeValsetUpdateClaimCall(
    _ request: Injective_Peggy_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgValsetUpdatedClaim, Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>

  func makeErc20DeployedClaimCall(
    _ request: Injective_Peggy_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgERC20DeployedClaim, Injective_Peggy_V1_MsgERC20DeployedClaimResponse>

  func makeSetOrchestratorAddressesCall(
    _ request: Injective_Peggy_V1_MsgSetOrchestratorAddresses,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgSetOrchestratorAddresses, Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>

  func makeCancelSendToEthCall(
    _ request: Injective_Peggy_V1_MsgCancelSendToEth,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgCancelSendToEth, Injective_Peggy_V1_MsgCancelSendToEthResponse>

  func makeSubmitBadSignatureEvidenceCall(
    _ request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>

  func makeUpdateParamsCall(
    _ request: Injective_Peggy_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgUpdateParams, Injective_Peggy_V1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Peggy_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Peggy_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeValsetConfirmCall(
    _ request: Injective_Peggy_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgValsetConfirm, Injective_Peggy_V1_MsgValsetConfirmResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  internal func makeSendToEthCall(
    _ request: Injective_Peggy_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgSendToEth, Injective_Peggy_V1_MsgSendToEthResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.sendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  internal func makeRequestBatchCall(
    _ request: Injective_Peggy_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgRequestBatch, Injective_Peggy_V1_MsgRequestBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.requestBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  internal func makeConfirmBatchCall(
    _ request: Injective_Peggy_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgConfirmBatch, Injective_Peggy_V1_MsgConfirmBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.confirmBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  internal func makeDepositClaimCall(
    _ request: Injective_Peggy_V1_MsgDepositClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgDepositClaim, Injective_Peggy_V1_MsgDepositClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.depositClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? []
    )
  }

  internal func makeWithdrawClaimCall(
    _ request: Injective_Peggy_V1_MsgWithdrawClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgWithdrawClaim, Injective_Peggy_V1_MsgWithdrawClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.withdrawClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? []
    )
  }

  internal func makeValsetUpdateClaimCall(
    _ request: Injective_Peggy_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgValsetUpdatedClaim, Injective_Peggy_V1_MsgValsetUpdatedClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.valsetUpdateClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  internal func makeErc20DeployedClaimCall(
    _ request: Injective_Peggy_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgERC20DeployedClaim, Injective_Peggy_V1_MsgERC20DeployedClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.eRC20DeployedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  internal func makeSetOrchestratorAddressesCall(
    _ request: Injective_Peggy_V1_MsgSetOrchestratorAddresses,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgSetOrchestratorAddresses, Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.setOrchestratorAddresses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressesInterceptors() ?? []
    )
  }

  internal func makeCancelSendToEthCall(
    _ request: Injective_Peggy_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgCancelSendToEth, Injective_Peggy_V1_MsgCancelSendToEthResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.cancelSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  internal func makeSubmitBadSignatureEvidenceCall(
    _ request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Injective_Peggy_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Peggy_V1_MsgUpdateParams, Injective_Peggy_V1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Peggy_V1_MsgAsyncClientProtocol {
  internal func valsetConfirm(
    _ request: Injective_Peggy_V1_MsgValsetConfirm,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgValsetConfirmResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  internal func sendToEth(
    _ request: Injective_Peggy_V1_MsgSendToEth,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgSendToEthResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.sendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthInterceptors() ?? []
    )
  }

  internal func requestBatch(
    _ request: Injective_Peggy_V1_MsgRequestBatch,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgRequestBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.requestBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? []
    )
  }

  internal func confirmBatch(
    _ request: Injective_Peggy_V1_MsgConfirmBatch,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgConfirmBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.confirmBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? []
    )
  }

  internal func depositClaim(
    _ request: Injective_Peggy_V1_MsgDepositClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgDepositClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.depositClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? []
    )
  }

  internal func withdrawClaim(
    _ request: Injective_Peggy_V1_MsgWithdrawClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgWithdrawClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.withdrawClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? []
    )
  }

  internal func valsetUpdateClaim(
    _ request: Injective_Peggy_V1_MsgValsetUpdatedClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgValsetUpdatedClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.valsetUpdateClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? []
    )
  }

  internal func eRC20DeployedClaim(
    _ request: Injective_Peggy_V1_MsgERC20DeployedClaim,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgERC20DeployedClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.eRC20DeployedClaim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? []
    )
  }

  internal func setOrchestratorAddresses(
    _ request: Injective_Peggy_V1_MsgSetOrchestratorAddresses,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.setOrchestratorAddresses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetOrchestratorAddressesInterceptors() ?? []
    )
  }

  internal func cancelSendToEth(
    _ request: Injective_Peggy_V1_MsgCancelSendToEth,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgCancelSendToEthResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.cancelSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? []
    )
  }

  internal func submitBadSignatureEvidence(
    _ request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Injective_Peggy_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Peggy_V1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Peggy_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Peggy_V1_MsgAsyncClient: Injective_Peggy_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Peggy_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'valsetConfirm'.
  func makeValsetConfirmInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgValsetConfirm, Injective_Peggy_V1_MsgValsetConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'sendToEth'.
  func makeSendToEthInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgSendToEth, Injective_Peggy_V1_MsgSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'requestBatch'.
  func makeRequestBatchInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgRequestBatch, Injective_Peggy_V1_MsgRequestBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmBatch'.
  func makeConfirmBatchInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgConfirmBatch, Injective_Peggy_V1_MsgConfirmBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'depositClaim'.
  func makeDepositClaimInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgDepositClaim, Injective_Peggy_V1_MsgDepositClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawClaim'.
  func makeWithdrawClaimInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgWithdrawClaim, Injective_Peggy_V1_MsgWithdrawClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetUpdateClaim'.
  func makeValsetUpdateClaimInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgValsetUpdatedClaim, Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20DeployedClaim'.
  func makeERC20DeployedClaimInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgERC20DeployedClaim, Injective_Peggy_V1_MsgERC20DeployedClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'setOrchestratorAddresses'.
  func makeSetOrchestratorAddressesInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgSetOrchestratorAddresses, Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelSendToEth'.
  func makeCancelSendToEthInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgCancelSendToEth, Injective_Peggy_V1_MsgCancelSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'submitBadSignatureEvidence'.
  func makeSubmitBadSignatureEvidenceInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Injective_Peggy_V1_MsgUpdateParams, Injective_Peggy_V1_MsgUpdateParamsResponse>]
}

internal enum Injective_Peggy_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.peggy.v1.Msg",
    methods: [
      Injective_Peggy_V1_MsgClientMetadata.Methods.valsetConfirm,
      Injective_Peggy_V1_MsgClientMetadata.Methods.sendToEth,
      Injective_Peggy_V1_MsgClientMetadata.Methods.requestBatch,
      Injective_Peggy_V1_MsgClientMetadata.Methods.confirmBatch,
      Injective_Peggy_V1_MsgClientMetadata.Methods.depositClaim,
      Injective_Peggy_V1_MsgClientMetadata.Methods.withdrawClaim,
      Injective_Peggy_V1_MsgClientMetadata.Methods.valsetUpdateClaim,
      Injective_Peggy_V1_MsgClientMetadata.Methods.eRC20DeployedClaim,
      Injective_Peggy_V1_MsgClientMetadata.Methods.setOrchestratorAddresses,
      Injective_Peggy_V1_MsgClientMetadata.Methods.cancelSendToEth,
      Injective_Peggy_V1_MsgClientMetadata.Methods.submitBadSignatureEvidence,
      Injective_Peggy_V1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let valsetConfirm = GRPCMethodDescriptor(
      name: "ValsetConfirm",
      path: "/injective.peggy.v1.Msg/ValsetConfirm",
      type: GRPCCallType.unary
    )

    internal static let sendToEth = GRPCMethodDescriptor(
      name: "SendToEth",
      path: "/injective.peggy.v1.Msg/SendToEth",
      type: GRPCCallType.unary
    )

    internal static let requestBatch = GRPCMethodDescriptor(
      name: "RequestBatch",
      path: "/injective.peggy.v1.Msg/RequestBatch",
      type: GRPCCallType.unary
    )

    internal static let confirmBatch = GRPCMethodDescriptor(
      name: "ConfirmBatch",
      path: "/injective.peggy.v1.Msg/ConfirmBatch",
      type: GRPCCallType.unary
    )

    internal static let depositClaim = GRPCMethodDescriptor(
      name: "DepositClaim",
      path: "/injective.peggy.v1.Msg/DepositClaim",
      type: GRPCCallType.unary
    )

    internal static let withdrawClaim = GRPCMethodDescriptor(
      name: "WithdrawClaim",
      path: "/injective.peggy.v1.Msg/WithdrawClaim",
      type: GRPCCallType.unary
    )

    internal static let valsetUpdateClaim = GRPCMethodDescriptor(
      name: "ValsetUpdateClaim",
      path: "/injective.peggy.v1.Msg/ValsetUpdateClaim",
      type: GRPCCallType.unary
    )

    internal static let eRC20DeployedClaim = GRPCMethodDescriptor(
      name: "ERC20DeployedClaim",
      path: "/injective.peggy.v1.Msg/ERC20DeployedClaim",
      type: GRPCCallType.unary
    )

    internal static let setOrchestratorAddresses = GRPCMethodDescriptor(
      name: "SetOrchestratorAddresses",
      path: "/injective.peggy.v1.Msg/SetOrchestratorAddresses",
      type: GRPCCallType.unary
    )

    internal static let cancelSendToEth = GRPCMethodDescriptor(
      name: "CancelSendToEth",
      path: "/injective.peggy.v1.Msg/CancelSendToEth",
      type: GRPCCallType.unary
    )

    internal static let submitBadSignatureEvidence = GRPCMethodDescriptor(
      name: "SubmitBadSignatureEvidence",
      path: "/injective.peggy.v1.Msg/SubmitBadSignatureEvidence",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.peggy.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Peggy_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Injective_Peggy_V1_MsgServerInterceptorFactoryProtocol? { get }

  func valsetConfirm(request: Injective_Peggy_V1_MsgValsetConfirm, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgValsetConfirmResponse>

  func sendToEth(request: Injective_Peggy_V1_MsgSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgSendToEthResponse>

  func requestBatch(request: Injective_Peggy_V1_MsgRequestBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgRequestBatchResponse>

  func confirmBatch(request: Injective_Peggy_V1_MsgConfirmBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgConfirmBatchResponse>

  func depositClaim(request: Injective_Peggy_V1_MsgDepositClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgDepositClaimResponse>

  func withdrawClaim(request: Injective_Peggy_V1_MsgWithdrawClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgWithdrawClaimResponse>

  func valsetUpdateClaim(request: Injective_Peggy_V1_MsgValsetUpdatedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>

  func eRC20DeployedClaim(request: Injective_Peggy_V1_MsgERC20DeployedClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgERC20DeployedClaimResponse>

  func setOrchestratorAddresses(request: Injective_Peggy_V1_MsgSetOrchestratorAddresses, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>

  func cancelSendToEth(request: Injective_Peggy_V1_MsgCancelSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgCancelSendToEthResponse>

  func submitBadSignatureEvidence(request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>

  func updateParams(request: Injective_Peggy_V1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Peggy_V1_MsgUpdateParamsResponse>
}

extension Injective_Peggy_V1_MsgProvider {
  internal var serviceName: Substring {
    return Injective_Peggy_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValsetConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgValsetConfirm>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        userFunction: self.valsetConfirm(request:context:)
      )

    case "SendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgSendToEth>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgSendToEthResponse>(),
        interceptors: self.interceptors?.makeSendToEthInterceptors() ?? [],
        userFunction: self.sendToEth(request:context:)
      )

    case "RequestBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgRequestBatch>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgRequestBatchResponse>(),
        interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? [],
        userFunction: self.requestBatch(request:context:)
      )

    case "ConfirmBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgConfirmBatch>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgConfirmBatchResponse>(),
        interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? [],
        userFunction: self.confirmBatch(request:context:)
      )

    case "DepositClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgDepositClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgDepositClaimResponse>(),
        interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? [],
        userFunction: self.depositClaim(request:context:)
      )

    case "WithdrawClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgWithdrawClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgWithdrawClaimResponse>(),
        interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? [],
        userFunction: self.withdrawClaim(request:context:)
      )

    case "ValsetUpdateClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgValsetUpdatedClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>(),
        interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? [],
        userFunction: self.valsetUpdateClaim(request:context:)
      )

    case "ERC20DeployedClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgERC20DeployedClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgERC20DeployedClaimResponse>(),
        interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? [],
        userFunction: self.eRC20DeployedClaim(request:context:)
      )

    case "SetOrchestratorAddresses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgSetOrchestratorAddresses>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>(),
        interceptors: self.interceptors?.makeSetOrchestratorAddressesInterceptors() ?? [],
        userFunction: self.setOrchestratorAddresses(request:context:)
      )

    case "CancelSendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgCancelSendToEth>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgCancelSendToEthResponse>(),
        interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? [],
        userFunction: self.cancelSendToEth(request:context:)
      )

    case "SubmitBadSignatureEvidence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>(),
        interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? [],
        userFunction: self.submitBadSignatureEvidence(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Peggy_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Peggy_V1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func valsetConfirm(
    request: Injective_Peggy_V1_MsgValsetConfirm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgValsetConfirmResponse

  @Sendable func sendToEth(
    request: Injective_Peggy_V1_MsgSendToEth,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgSendToEthResponse

  @Sendable func requestBatch(
    request: Injective_Peggy_V1_MsgRequestBatch,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgRequestBatchResponse

  @Sendable func confirmBatch(
    request: Injective_Peggy_V1_MsgConfirmBatch,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgConfirmBatchResponse

  @Sendable func depositClaim(
    request: Injective_Peggy_V1_MsgDepositClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgDepositClaimResponse

  @Sendable func withdrawClaim(
    request: Injective_Peggy_V1_MsgWithdrawClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgWithdrawClaimResponse

  @Sendable func valsetUpdateClaim(
    request: Injective_Peggy_V1_MsgValsetUpdatedClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgValsetUpdatedClaimResponse

  @Sendable func eRC20DeployedClaim(
    request: Injective_Peggy_V1_MsgERC20DeployedClaim,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgERC20DeployedClaimResponse

  @Sendable func setOrchestratorAddresses(
    request: Injective_Peggy_V1_MsgSetOrchestratorAddresses,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse

  @Sendable func cancelSendToEth(
    request: Injective_Peggy_V1_MsgCancelSendToEth,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgCancelSendToEthResponse

  @Sendable func submitBadSignatureEvidence(
    request: Injective_Peggy_V1_MsgSubmitBadSignatureEvidence,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse

  @Sendable func updateParams(
    request: Injective_Peggy_V1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Peggy_V1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Peggy_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Peggy_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Peggy_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Peggy_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ValsetConfirm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgValsetConfirm>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        wrapping: self.valsetConfirm(request:context:)
      )

    case "SendToEth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgSendToEth>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgSendToEthResponse>(),
        interceptors: self.interceptors?.makeSendToEthInterceptors() ?? [],
        wrapping: self.sendToEth(request:context:)
      )

    case "RequestBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgRequestBatch>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgRequestBatchResponse>(),
        interceptors: self.interceptors?.makeRequestBatchInterceptors() ?? [],
        wrapping: self.requestBatch(request:context:)
      )

    case "ConfirmBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgConfirmBatch>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgConfirmBatchResponse>(),
        interceptors: self.interceptors?.makeConfirmBatchInterceptors() ?? [],
        wrapping: self.confirmBatch(request:context:)
      )

    case "DepositClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgDepositClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgDepositClaimResponse>(),
        interceptors: self.interceptors?.makeDepositClaimInterceptors() ?? [],
        wrapping: self.depositClaim(request:context:)
      )

    case "WithdrawClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgWithdrawClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgWithdrawClaimResponse>(),
        interceptors: self.interceptors?.makeWithdrawClaimInterceptors() ?? [],
        wrapping: self.withdrawClaim(request:context:)
      )

    case "ValsetUpdateClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgValsetUpdatedClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>(),
        interceptors: self.interceptors?.makeValsetUpdateClaimInterceptors() ?? [],
        wrapping: self.valsetUpdateClaim(request:context:)
      )

    case "ERC20DeployedClaim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgERC20DeployedClaim>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgERC20DeployedClaimResponse>(),
        interceptors: self.interceptors?.makeERC20DeployedClaimInterceptors() ?? [],
        wrapping: self.eRC20DeployedClaim(request:context:)
      )

    case "SetOrchestratorAddresses":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgSetOrchestratorAddresses>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>(),
        interceptors: self.interceptors?.makeSetOrchestratorAddressesInterceptors() ?? [],
        wrapping: self.setOrchestratorAddresses(request:context:)
      )

    case "CancelSendToEth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgCancelSendToEth>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgCancelSendToEthResponse>(),
        interceptors: self.interceptors?.makeCancelSendToEthInterceptors() ?? [],
        wrapping: self.cancelSendToEth(request:context:)
      )

    case "SubmitBadSignatureEvidence":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>(),
        interceptors: self.interceptors?.makeSubmitBadSignatureEvidenceInterceptors() ?? [],
        wrapping: self.submitBadSignatureEvidence(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Peggy_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Peggy_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Peggy_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'valsetConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgValsetConfirm, Injective_Peggy_V1_MsgValsetConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'sendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendToEthInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgSendToEth, Injective_Peggy_V1_MsgSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'requestBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestBatchInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgRequestBatch, Injective_Peggy_V1_MsgRequestBatchResponse>]

  /// - Returns: Interceptors to use when handling 'confirmBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmBatchInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgConfirmBatch, Injective_Peggy_V1_MsgConfirmBatchResponse>]

  /// - Returns: Interceptors to use when handling 'depositClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositClaimInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgDepositClaim, Injective_Peggy_V1_MsgDepositClaimResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawClaimInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgWithdrawClaim, Injective_Peggy_V1_MsgWithdrawClaimResponse>]

  /// - Returns: Interceptors to use when handling 'valsetUpdateClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetUpdateClaimInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgValsetUpdatedClaim, Injective_Peggy_V1_MsgValsetUpdatedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20DeployedClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20DeployedClaimInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgERC20DeployedClaim, Injective_Peggy_V1_MsgERC20DeployedClaimResponse>]

  /// - Returns: Interceptors to use when handling 'setOrchestratorAddresses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetOrchestratorAddressesInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgSetOrchestratorAddresses, Injective_Peggy_V1_MsgSetOrchestratorAddressesResponse>]

  /// - Returns: Interceptors to use when handling 'cancelSendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelSendToEthInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgCancelSendToEth, Injective_Peggy_V1_MsgCancelSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'submitBadSignatureEvidence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitBadSignatureEvidenceInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgSubmitBadSignatureEvidence, Injective_Peggy_V1_MsgSubmitBadSignatureEvidenceResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Injective_Peggy_V1_MsgUpdateParams, Injective_Peggy_V1_MsgUpdateParamsResponse>]
}

internal enum Injective_Peggy_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.peggy.v1.Msg",
    methods: [
      Injective_Peggy_V1_MsgServerMetadata.Methods.valsetConfirm,
      Injective_Peggy_V1_MsgServerMetadata.Methods.sendToEth,
      Injective_Peggy_V1_MsgServerMetadata.Methods.requestBatch,
      Injective_Peggy_V1_MsgServerMetadata.Methods.confirmBatch,
      Injective_Peggy_V1_MsgServerMetadata.Methods.depositClaim,
      Injective_Peggy_V1_MsgServerMetadata.Methods.withdrawClaim,
      Injective_Peggy_V1_MsgServerMetadata.Methods.valsetUpdateClaim,
      Injective_Peggy_V1_MsgServerMetadata.Methods.eRC20DeployedClaim,
      Injective_Peggy_V1_MsgServerMetadata.Methods.setOrchestratorAddresses,
      Injective_Peggy_V1_MsgServerMetadata.Methods.cancelSendToEth,
      Injective_Peggy_V1_MsgServerMetadata.Methods.submitBadSignatureEvidence,
      Injective_Peggy_V1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let valsetConfirm = GRPCMethodDescriptor(
      name: "ValsetConfirm",
      path: "/injective.peggy.v1.Msg/ValsetConfirm",
      type: GRPCCallType.unary
    )

    internal static let sendToEth = GRPCMethodDescriptor(
      name: "SendToEth",
      path: "/injective.peggy.v1.Msg/SendToEth",
      type: GRPCCallType.unary
    )

    internal static let requestBatch = GRPCMethodDescriptor(
      name: "RequestBatch",
      path: "/injective.peggy.v1.Msg/RequestBatch",
      type: GRPCCallType.unary
    )

    internal static let confirmBatch = GRPCMethodDescriptor(
      name: "ConfirmBatch",
      path: "/injective.peggy.v1.Msg/ConfirmBatch",
      type: GRPCCallType.unary
    )

    internal static let depositClaim = GRPCMethodDescriptor(
      name: "DepositClaim",
      path: "/injective.peggy.v1.Msg/DepositClaim",
      type: GRPCCallType.unary
    )

    internal static let withdrawClaim = GRPCMethodDescriptor(
      name: "WithdrawClaim",
      path: "/injective.peggy.v1.Msg/WithdrawClaim",
      type: GRPCCallType.unary
    )

    internal static let valsetUpdateClaim = GRPCMethodDescriptor(
      name: "ValsetUpdateClaim",
      path: "/injective.peggy.v1.Msg/ValsetUpdateClaim",
      type: GRPCCallType.unary
    )

    internal static let eRC20DeployedClaim = GRPCMethodDescriptor(
      name: "ERC20DeployedClaim",
      path: "/injective.peggy.v1.Msg/ERC20DeployedClaim",
      type: GRPCCallType.unary
    )

    internal static let setOrchestratorAddresses = GRPCMethodDescriptor(
      name: "SetOrchestratorAddresses",
      path: "/injective.peggy.v1.Msg/SetOrchestratorAddresses",
      type: GRPCCallType.unary
    )

    internal static let cancelSendToEth = GRPCMethodDescriptor(
      name: "CancelSendToEth",
      path: "/injective.peggy.v1.Msg/CancelSendToEth",
      type: GRPCCallType.unary
    )

    internal static let submitBadSignatureEvidence = GRPCMethodDescriptor(
      name: "SubmitBadSignatureEvidence",
      path: "/injective.peggy.v1.Msg/SubmitBadSignatureEvidence",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.peggy.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
