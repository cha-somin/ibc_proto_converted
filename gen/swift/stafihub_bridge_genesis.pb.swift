// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stafihub/bridge/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Stafihub_Stafihub_Bridge_DenomType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case native // = 1
  case external // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .native
    case 2: self = .external
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .native: return 1
    case .external: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Stafihub_Stafihub_Bridge_DenomType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Stafihub_Stafihub_Bridge_DenomType] = [
    .unspecified,
    .native,
    .external,
  ]
}

#endif  // swift(>=4.2)

/// GenesisState defines the bridge module's genesis state.
struct Stafihub_Stafihub_Bridge_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stafihub_Stafihub_Bridge_Params {
    get {return _params ?? Stafihub_Stafihub_Bridge_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var depositCountList: [Stafihub_Stafihub_Bridge_DepositCount] = []

  var proposalList: [Stafihub_Stafihub_Bridge_GenesisProposal] = []

  var relayFeeList: [Stafihub_Stafihub_Bridge_RelayFee] = []

  var chainIDList: [UInt32] = []

  var relayFeeReceiver: String = String()

  var resourceIDToDenomList: [Stafihub_Stafihub_Bridge_ResourceIdToDenom] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var bannedDenomList: [Stafihub_Stafihub_Bridge_BannedDenom] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stafihub_Stafihub_Bridge_Params? = nil
}

struct Stafihub_Stafihub_Bridge_DepositCount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: UInt32 = 0

  var count: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stafihub_Stafihub_Bridge_GenesisProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: UInt32 = 0

  var depositNonce: UInt64 = 0

  var resourceID: String = String()

  var proposal: Stafihub_Stafihub_Bridge_Proposal {
    get {return _proposal ?? Stafihub_Stafihub_Bridge_Proposal()}
    set {_proposal = newValue}
  }
  /// Returns true if `proposal` has been explicitly set.
  var hasProposal: Bool {return self._proposal != nil}
  /// Clears the value of `proposal`. Subsequent reads from it will return its default value.
  mutating func clearProposal() {self._proposal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proposal: Stafihub_Stafihub_Bridge_Proposal? = nil
}

struct Stafihub_Stafihub_Bridge_RelayFee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: UInt32 = 0

  var value: Cosmos_Base_V1beta1_Coin {
    get {return _value ?? Cosmos_Base_V1beta1_Coin()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Cosmos_Base_V1beta1_Coin? = nil
}

struct Stafihub_Stafihub_Bridge_BannedDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: UInt32 = 0

  var denom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stafihub_Stafihub_Bridge_ResourceIdToDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resourceID: String = String()

  var denom: String = String()

  var denomType: Stafihub_Stafihub_Bridge_DenomType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stafihub_Stafihub_Bridge_DenomType: @unchecked Sendable {}
extension Stafihub_Stafihub_Bridge_GenesisState: @unchecked Sendable {}
extension Stafihub_Stafihub_Bridge_DepositCount: @unchecked Sendable {}
extension Stafihub_Stafihub_Bridge_GenesisProposal: @unchecked Sendable {}
extension Stafihub_Stafihub_Bridge_RelayFee: @unchecked Sendable {}
extension Stafihub_Stafihub_Bridge_BannedDenom: @unchecked Sendable {}
extension Stafihub_Stafihub_Bridge_ResourceIdToDenom: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stafihub.stafihub.bridge"

extension Stafihub_Stafihub_Bridge_DenomType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "NATIVE"),
    2: .same(proto: "EXTERNAL"),
  ]
}

extension Stafihub_Stafihub_Bridge_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "depositCountList"),
    3: .same(proto: "proposalList"),
    4: .same(proto: "relayFeeList"),
    5: .same(proto: "chainIdList"),
    6: .same(proto: "relayFeeReceiver"),
    7: .same(proto: "resourceIdToDenomList"),
    8: .same(proto: "bannedDenomList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.depositCountList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.proposalList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.relayFeeList) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.chainIDList) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.relayFeeReceiver) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.resourceIDToDenomList) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.bannedDenomList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.depositCountList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositCountList, fieldNumber: 2)
    }
    if !self.proposalList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proposalList, fieldNumber: 3)
    }
    if !self.relayFeeList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relayFeeList, fieldNumber: 4)
    }
    if !self.chainIDList.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.chainIDList, fieldNumber: 5)
    }
    if !self.relayFeeReceiver.isEmpty {
      try visitor.visitSingularStringField(value: self.relayFeeReceiver, fieldNumber: 6)
    }
    if !self.resourceIDToDenomList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resourceIDToDenomList, fieldNumber: 7)
    }
    if !self.bannedDenomList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bannedDenomList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Bridge_GenesisState, rhs: Stafihub_Stafihub_Bridge_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.depositCountList != rhs.depositCountList {return false}
    if lhs.proposalList != rhs.proposalList {return false}
    if lhs.relayFeeList != rhs.relayFeeList {return false}
    if lhs.chainIDList != rhs.chainIDList {return false}
    if lhs.relayFeeReceiver != rhs.relayFeeReceiver {return false}
    if lhs.resourceIDToDenomList != rhs.resourceIDToDenomList {return false}
    if lhs.bannedDenomList != rhs.bannedDenomList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Bridge_DepositCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DepositCount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chainId"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chainID != 0 {
      try visitor.visitSingularUInt32Field(value: self.chainID, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt64Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Bridge_DepositCount, rhs: Stafihub_Stafihub_Bridge_DepositCount) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Bridge_GenesisProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chainId"),
    2: .same(proto: "depositNonce"),
    3: .same(proto: "resourceId"),
    4: .same(proto: "proposal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.depositNonce) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._proposal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.chainID != 0 {
      try visitor.visitSingularUInt32Field(value: self.chainID, fieldNumber: 1)
    }
    if self.depositNonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositNonce, fieldNumber: 2)
    }
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 3)
    }
    try { if let v = self._proposal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Bridge_GenesisProposal, rhs: Stafihub_Stafihub_Bridge_GenesisProposal) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.depositNonce != rhs.depositNonce {return false}
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs._proposal != rhs._proposal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Bridge_RelayFee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RelayFee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chainId"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.chainID != 0 {
      try visitor.visitSingularUInt32Field(value: self.chainID, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Bridge_RelayFee, rhs: Stafihub_Stafihub_Bridge_RelayFee) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Bridge_BannedDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BannedDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chainId"),
    2: .same(proto: "denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chainID != 0 {
      try visitor.visitSingularUInt32Field(value: self.chainID, fieldNumber: 1)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Bridge_BannedDenom, rhs: Stafihub_Stafihub_Bridge_BannedDenom) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stafihub_Stafihub_Bridge_ResourceIdToDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResourceIdToDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resourceId"),
    2: .same(proto: "denom"),
    3: .same(proto: "denomType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.resourceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.denomType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resourceID.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceID, fieldNumber: 1)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 2)
    }
    if self.denomType != .unspecified {
      try visitor.visitSingularEnumField(value: self.denomType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Bridge_ResourceIdToDenom, rhs: Stafihub_Stafihub_Bridge_ResourceIdToDenom) -> Bool {
    if lhs.resourceID != rhs.resourceID {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.denomType != rhs.denomType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
