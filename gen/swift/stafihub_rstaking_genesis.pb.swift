// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stafihub/rstaking/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the rstaking module's genesis state.
struct Stafihub_Stafihub_Rstaking_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Stafihub_Stafihub_Rstaking_Params {
    get {return _params ?? Stafihub_Stafihub_Rstaking_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var inflationBase: String = String()

  var coinToBeBurned: Cosmos_Base_V1beta1_Coin {
    get {return _coinToBeBurned ?? Cosmos_Base_V1beta1_Coin()}
    set {_coinToBeBurned = newValue}
  }
  /// Returns true if `coinToBeBurned` has been explicitly set.
  var hasCoinToBeBurned: Bool {return self._coinToBeBurned != nil}
  /// Clears the value of `coinToBeBurned`. Subsequent reads from it will return its default value.
  mutating func clearCoinToBeBurned() {self._coinToBeBurned = nil}

  var validatorWhitelist: [String] = []

  var validatorWhitelistSwitch: Bool = false

  var delegatorWhitelist: [String] = []

  /// this line is used by starport scaffolding # genesis/proto/state
  var delegatorWhitelistSwitch: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Stafihub_Stafihub_Rstaking_Params? = nil
  fileprivate var _coinToBeBurned: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stafihub_Stafihub_Rstaking_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stafihub.stafihub.rstaking"

extension Stafihub_Stafihub_Rstaking_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "inflation_base"),
    3: .standard(proto: "coin_to_be_burned"),
    4: .standard(proto: "validator_whitelist"),
    5: .standard(proto: "validator_whitelist_switch"),
    6: .standard(proto: "delegator_whitelist"),
    7: .standard(proto: "delegator_whitelist_switch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.inflationBase) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._coinToBeBurned) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.validatorWhitelist) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.validatorWhitelistSwitch) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.delegatorWhitelist) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.delegatorWhitelistSwitch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.inflationBase.isEmpty {
      try visitor.visitSingularStringField(value: self.inflationBase, fieldNumber: 2)
    }
    try { if let v = self._coinToBeBurned {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.validatorWhitelist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.validatorWhitelist, fieldNumber: 4)
    }
    if self.validatorWhitelistSwitch != false {
      try visitor.visitSingularBoolField(value: self.validatorWhitelistSwitch, fieldNumber: 5)
    }
    if !self.delegatorWhitelist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.delegatorWhitelist, fieldNumber: 6)
    }
    if self.delegatorWhitelistSwitch != false {
      try visitor.visitSingularBoolField(value: self.delegatorWhitelistSwitch, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stafihub_Stafihub_Rstaking_GenesisState, rhs: Stafihub_Stafihub_Rstaking_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.inflationBase != rhs.inflationBase {return false}
    if lhs._coinToBeBurned != rhs._coinToBeBurned {return false}
    if lhs.validatorWhitelist != rhs.validatorWhitelist {return false}
    if lhs.validatorWhitelistSwitch != rhs.validatorWhitelistSwitch {return false}
    if lhs.delegatorWhitelist != rhs.delegatorWhitelist {return false}
    if lhs.delegatorWhitelistSwitch != rhs.delegatorWhitelistSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
