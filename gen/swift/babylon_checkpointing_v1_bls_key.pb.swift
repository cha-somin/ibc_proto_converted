// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/checkpointing/v1/bls_key.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BlsKey wraps BLS public key with PoP
struct Babylon_Checkpointing_V1_BlsKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pubkey is the BLS public key of a validator
  var pubkey: Data = Data()

  /// pop is the proof-of-possession of the BLS key
  var pop: Babylon_Checkpointing_V1_ProofOfPossession {
    get {return _pop ?? Babylon_Checkpointing_V1_ProofOfPossession()}
    set {_pop = newValue}
  }
  /// Returns true if `pop` has been explicitly set.
  var hasPop: Bool {return self._pop != nil}
  /// Clears the value of `pop`. Subsequent reads from it will return its default value.
  mutating func clearPop() {self._pop = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pop: Babylon_Checkpointing_V1_ProofOfPossession? = nil
}

/// ProofOfPossession defines proof for the ownership of Ed25519 and BLS private
/// keys
struct Babylon_Checkpointing_V1_ProofOfPossession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ed25519_sig is used for verification, ed25519_sig = sign(key = Ed25519_sk,
  /// data = BLS_pk)
  var ed25519Sig: Data = Data()

  /// bls_sig is the result of PoP, bls_sig = sign(key = BLS_sk, data =
  /// ed25519_sig)
  var blsSig: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ValidatorWithBLSSet defines a set of validators with their BLS public keys
struct Babylon_Checkpointing_V1_ValidatorWithBlsKeySet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var valSet: [Babylon_Checkpointing_V1_ValidatorWithBlsKey] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ValidatorWithBlsKey couples validator address, voting power, and its bls
/// public key
struct Babylon_Checkpointing_V1_ValidatorWithBlsKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// validator_address is the address of the validator
  var validatorAddress: String = String()

  /// bls_pub_key is the BLS public key of the validator
  var blsPubKey: Data = Data()

  /// voting_power is the voting power of the validator at the given epoch
  var votingPower: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// VoteExtension defines the structure used to create a BLS vote extension.
struct Babylon_Checkpointing_V1_VoteExtension {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// signer is the address of the vote extension signer
  var signer: String = String()

  /// validator_address is the address of the validator
  var validatorAddress: String = String()

  /// block_hash is the hash of the block that the vote extension is signed over
  var blockHash: Data = Data()

  /// epoch_num is the epoch number of the vote extension
  var epochNum: UInt64 = 0

  /// height is the height of the vote extension
  var height: UInt64 = 0

  /// bls_sig is the BLS signature
  var blsSig: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Checkpointing_V1_BlsKey: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_ProofOfPossession: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_ValidatorWithBlsKeySet: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_ValidatorWithBlsKey: @unchecked Sendable {}
extension Babylon_Checkpointing_V1_VoteExtension: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.checkpointing.v1"

extension Babylon_Checkpointing_V1_BlsKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlsKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pubkey"),
    2: .same(proto: "pop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.pubkey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pop) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.pubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubkey, fieldNumber: 1)
    }
    try { if let v = self._pop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_BlsKey, rhs: Babylon_Checkpointing_V1_BlsKey) -> Bool {
    if lhs.pubkey != rhs.pubkey {return false}
    if lhs._pop != rhs._pop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_ProofOfPossession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProofOfPossession"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ed25519_sig"),
    2: .standard(proto: "bls_sig"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ed25519Sig) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.blsSig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ed25519Sig.isEmpty {
      try visitor.visitSingularBytesField(value: self.ed25519Sig, fieldNumber: 1)
    }
    if !self.blsSig.isEmpty {
      try visitor.visitSingularBytesField(value: self.blsSig, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_ProofOfPossession, rhs: Babylon_Checkpointing_V1_ProofOfPossession) -> Bool {
    if lhs.ed25519Sig != rhs.ed25519Sig {return false}
    if lhs.blsSig != rhs.blsSig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_ValidatorWithBlsKeySet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorWithBlsKeySet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "val_set"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.valSet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.valSet.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.valSet, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_ValidatorWithBlsKeySet, rhs: Babylon_Checkpointing_V1_ValidatorWithBlsKeySet) -> Bool {
    if lhs.valSet != rhs.valSet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_ValidatorWithBlsKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorWithBlsKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .standard(proto: "bls_pub_key"),
    3: .standard(proto: "voting_power"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.blsPubKey) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.votingPower) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 1)
    }
    if !self.blsPubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.blsPubKey, fieldNumber: 2)
    }
    if self.votingPower != 0 {
      try visitor.visitSingularUInt64Field(value: self.votingPower, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_ValidatorWithBlsKey, rhs: Babylon_Checkpointing_V1_ValidatorWithBlsKey) -> Bool {
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.blsPubKey != rhs.blsPubKey {return false}
    if lhs.votingPower != rhs.votingPower {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Checkpointing_V1_VoteExtension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoteExtension"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signer"),
    2: .standard(proto: "validator_address"),
    3: .standard(proto: "block_hash"),
    4: .standard(proto: "epoch_num"),
    5: .same(proto: "height"),
    6: .standard(proto: "bls_sig"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.signer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.blockHash) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.epochNum) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.blsSig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.blockHash, fieldNumber: 3)
    }
    if self.epochNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.epochNum, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 5)
    }
    if !self.blsSig.isEmpty {
      try visitor.visitSingularBytesField(value: self.blsSig, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Checkpointing_V1_VoteExtension, rhs: Babylon_Checkpointing_V1_VoteExtension) -> Bool {
    if lhs.signer != rhs.signer {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.epochNum != rhs.epochNum {return false}
    if lhs.height != rhs.height {return false}
    if lhs.blsSig != rhs.blsSig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
