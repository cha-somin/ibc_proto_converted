// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: archway/tracking/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the initial state of the tracking module.
struct Archway_Tracking_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// tx_info_last_id defines the last unique ID for a TxInfo objs.
  var txInfoLastID: UInt64 = 0

  /// tx_infos defines a list of all the tracked transactions.
  var txInfos: [Archway_Tracking_V1_TxInfo] = []

  /// contract_op_info_last_id defines the last unique ID for
  /// ContractOperationInfo objs.
  var contractOpInfoLastID: UInt64 = 0

  /// contract_op_infos defines a list of all the tracked contract operations.
  var contractOpInfos: [Archway_Tracking_V1_ContractOperationInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Archway_Tracking_V1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "archway.tracking.v1"

extension Archway_Tracking_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tx_info_last_id"),
    2: .standard(proto: "tx_infos"),
    3: .standard(proto: "contract_op_info_last_id"),
    4: .standard(proto: "contract_op_infos"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.txInfoLastID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.txInfos) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.contractOpInfoLastID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.contractOpInfos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.txInfoLastID != 0 {
      try visitor.visitSingularUInt64Field(value: self.txInfoLastID, fieldNumber: 1)
    }
    if !self.txInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.txInfos, fieldNumber: 2)
    }
    if self.contractOpInfoLastID != 0 {
      try visitor.visitSingularUInt64Field(value: self.contractOpInfoLastID, fieldNumber: 3)
    }
    if !self.contractOpInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contractOpInfos, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Archway_Tracking_V1_GenesisState, rhs: Archway_Tracking_V1_GenesisState) -> Bool {
    if lhs.txInfoLastID != rhs.txInfoLastID {return false}
    if lhs.txInfos != rhs.txInfos {return false}
    if lhs.contractOpInfoLastID != rhs.contractOpInfoLastID {return false}
    if lhs.contractOpInfos != rhs.contractOpInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
