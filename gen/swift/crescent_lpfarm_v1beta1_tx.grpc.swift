//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/lpfarm/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Crescent_Lpfarm_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Lpfarm_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createPrivatePlan(
    _ request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>

  func farm(
    _ request: Crescent_Lpfarm_V1beta1_MsgFarm,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgFarm, Crescent_Lpfarm_V1beta1_MsgFarmResponse>

  func unfarm(
    _ request: Crescent_Lpfarm_V1beta1_MsgUnfarm,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgUnfarm, Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>

  func harvest(
    _ request: Crescent_Lpfarm_V1beta1_MsgHarvest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgHarvest, Crescent_Lpfarm_V1beta1_MsgHarvestResponse>
}

extension Crescent_Lpfarm_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "crescent.lpfarm.v1beta1.Msg"
  }

  /// Unary call to CreatePrivatePlan
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePrivatePlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPrivatePlan(
    _ request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.createPrivatePlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePrivatePlanInterceptors() ?? []
    )
  }

  /// Unary call to Farm
  ///
  /// - Parameters:
  ///   - request: Request to send to Farm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func farm(
    _ request: Crescent_Lpfarm_V1beta1_MsgFarm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgFarm, Crescent_Lpfarm_V1beta1_MsgFarmResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  /// Unary call to Unfarm
  ///
  /// - Parameters:
  ///   - request: Request to send to Unfarm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unfarm(
    _ request: Crescent_Lpfarm_V1beta1_MsgUnfarm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgUnfarm, Crescent_Lpfarm_V1beta1_MsgUnfarmResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.unfarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmInterceptors() ?? []
    )
  }

  /// Unary call to Harvest
  ///
  /// - Parameters:
  ///   - request: Request to send to Harvest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func harvest(
    _ request: Crescent_Lpfarm_V1beta1_MsgHarvest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Lpfarm_V1beta1_MsgHarvest, Crescent_Lpfarm_V1beta1_MsgHarvestResponse> {
    return self.makeUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.harvest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHarvestInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Crescent_Lpfarm_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Crescent_Lpfarm_V1beta1_MsgNIOClient")
internal final class Crescent_Lpfarm_V1beta1_MsgClient: Crescent_Lpfarm_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the crescent.lpfarm.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Crescent_Lpfarm_V1beta1_MsgNIOClient: Crescent_Lpfarm_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.lpfarm.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Lpfarm_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreatePrivatePlanCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>

  func makeFarmCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgFarm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgFarm, Crescent_Lpfarm_V1beta1_MsgFarmResponse>

  func makeUnfarmCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgUnfarm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgUnfarm, Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>

  func makeHarvestCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgHarvest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgHarvest, Crescent_Lpfarm_V1beta1_MsgHarvestResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Lpfarm_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Lpfarm_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreatePrivatePlanCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.createPrivatePlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePrivatePlanInterceptors() ?? []
    )
  }

  internal func makeFarmCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgFarm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgFarm, Crescent_Lpfarm_V1beta1_MsgFarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  internal func makeUnfarmCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgUnfarm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgUnfarm, Crescent_Lpfarm_V1beta1_MsgUnfarmResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.unfarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmInterceptors() ?? []
    )
  }

  internal func makeHarvestCall(
    _ request: Crescent_Lpfarm_V1beta1_MsgHarvest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Crescent_Lpfarm_V1beta1_MsgHarvest, Crescent_Lpfarm_V1beta1_MsgHarvestResponse> {
    return self.makeAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.harvest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHarvestInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Lpfarm_V1beta1_MsgAsyncClientProtocol {
  internal func createPrivatePlan(
    _ request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.createPrivatePlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePrivatePlanInterceptors() ?? []
    )
  }

  internal func farm(
    _ request: Crescent_Lpfarm_V1beta1_MsgFarm,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgFarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.farm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmInterceptors() ?? []
    )
  }

  internal func unfarm(
    _ request: Crescent_Lpfarm_V1beta1_MsgUnfarm,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgUnfarmResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.unfarm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnfarmInterceptors() ?? []
    )
  }

  internal func harvest(
    _ request: Crescent_Lpfarm_V1beta1_MsgHarvest,
    callOptions: CallOptions? = nil
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgHarvestResponse {
    return try await self.performAsyncUnaryCall(
      path: Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.harvest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHarvestInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Crescent_Lpfarm_V1beta1_MsgAsyncClient: Crescent_Lpfarm_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Crescent_Lpfarm_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createPrivatePlan'.
  func makeCreatePrivatePlanInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>]

  /// - Returns: Interceptors to use when invoking 'farm'.
  func makeFarmInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_MsgFarm, Crescent_Lpfarm_V1beta1_MsgFarmResponse>]

  /// - Returns: Interceptors to use when invoking 'unfarm'.
  func makeUnfarmInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_MsgUnfarm, Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>]

  /// - Returns: Interceptors to use when invoking 'harvest'.
  func makeHarvestInterceptors() -> [ClientInterceptor<Crescent_Lpfarm_V1beta1_MsgHarvest, Crescent_Lpfarm_V1beta1_MsgHarvestResponse>]
}

internal enum Crescent_Lpfarm_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "crescent.lpfarm.v1beta1.Msg",
    methods: [
      Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.createPrivatePlan,
      Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.farm,
      Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.unfarm,
      Crescent_Lpfarm_V1beta1_MsgClientMetadata.Methods.harvest,
    ]
  )

  internal enum Methods {
    internal static let createPrivatePlan = GRPCMethodDescriptor(
      name: "CreatePrivatePlan",
      path: "/crescent.lpfarm.v1beta1.Msg/CreatePrivatePlan",
      type: GRPCCallType.unary
    )

    internal static let farm = GRPCMethodDescriptor(
      name: "Farm",
      path: "/crescent.lpfarm.v1beta1.Msg/Farm",
      type: GRPCCallType.unary
    )

    internal static let unfarm = GRPCMethodDescriptor(
      name: "Unfarm",
      path: "/crescent.lpfarm.v1beta1.Msg/Unfarm",
      type: GRPCCallType.unary
    )

    internal static let harvest = GRPCMethodDescriptor(
      name: "Harvest",
      path: "/crescent.lpfarm.v1beta1.Msg/Harvest",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Lpfarm_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Crescent_Lpfarm_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  func createPrivatePlan(request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>

  func farm(request: Crescent_Lpfarm_V1beta1_MsgFarm, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_MsgFarmResponse>

  func unfarm(request: Crescent_Lpfarm_V1beta1_MsgUnfarm, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>

  func harvest(request: Crescent_Lpfarm_V1beta1_MsgHarvest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Lpfarm_V1beta1_MsgHarvestResponse>
}

extension Crescent_Lpfarm_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Crescent_Lpfarm_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePrivatePlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>(),
        interceptors: self.interceptors?.makeCreatePrivatePlanInterceptors() ?? [],
        userFunction: self.createPrivatePlan(request:context:)
      )

    case "Farm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgFarm>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgFarmResponse>(),
        interceptors: self.interceptors?.makeFarmInterceptors() ?? [],
        userFunction: self.farm(request:context:)
      )

    case "Unfarm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgUnfarm>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>(),
        interceptors: self.interceptors?.makeUnfarmInterceptors() ?? [],
        userFunction: self.unfarm(request:context:)
      )

    case "Harvest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgHarvest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgHarvestResponse>(),
        interceptors: self.interceptors?.makeHarvestInterceptors() ?? [],
        userFunction: self.harvest(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Crescent_Lpfarm_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Crescent_Lpfarm_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createPrivatePlan(
    request: Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse

  @Sendable func farm(
    request: Crescent_Lpfarm_V1beta1_MsgFarm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgFarmResponse

  @Sendable func unfarm(
    request: Crescent_Lpfarm_V1beta1_MsgUnfarm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgUnfarmResponse

  @Sendable func harvest(
    request: Crescent_Lpfarm_V1beta1_MsgHarvest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Crescent_Lpfarm_V1beta1_MsgHarvestResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Crescent_Lpfarm_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Crescent_Lpfarm_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Crescent_Lpfarm_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Crescent_Lpfarm_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePrivatePlan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>(),
        interceptors: self.interceptors?.makeCreatePrivatePlanInterceptors() ?? [],
        wrapping: self.createPrivatePlan(request:context:)
      )

    case "Farm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgFarm>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgFarmResponse>(),
        interceptors: self.interceptors?.makeFarmInterceptors() ?? [],
        wrapping: self.farm(request:context:)
      )

    case "Unfarm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgUnfarm>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>(),
        interceptors: self.interceptors?.makeUnfarmInterceptors() ?? [],
        wrapping: self.unfarm(request:context:)
      )

    case "Harvest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Lpfarm_V1beta1_MsgHarvest>(),
        responseSerializer: ProtobufSerializer<Crescent_Lpfarm_V1beta1_MsgHarvestResponse>(),
        interceptors: self.interceptors?.makeHarvestInterceptors() ?? [],
        wrapping: self.harvest(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Lpfarm_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPrivatePlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePrivatePlanInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlan, Crescent_Lpfarm_V1beta1_MsgCreatePrivatePlanResponse>]

  /// - Returns: Interceptors to use when handling 'farm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFarmInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_MsgFarm, Crescent_Lpfarm_V1beta1_MsgFarmResponse>]

  /// - Returns: Interceptors to use when handling 'unfarm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnfarmInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_MsgUnfarm, Crescent_Lpfarm_V1beta1_MsgUnfarmResponse>]

  /// - Returns: Interceptors to use when handling 'harvest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHarvestInterceptors() -> [ServerInterceptor<Crescent_Lpfarm_V1beta1_MsgHarvest, Crescent_Lpfarm_V1beta1_MsgHarvestResponse>]
}

internal enum Crescent_Lpfarm_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "crescent.lpfarm.v1beta1.Msg",
    methods: [
      Crescent_Lpfarm_V1beta1_MsgServerMetadata.Methods.createPrivatePlan,
      Crescent_Lpfarm_V1beta1_MsgServerMetadata.Methods.farm,
      Crescent_Lpfarm_V1beta1_MsgServerMetadata.Methods.unfarm,
      Crescent_Lpfarm_V1beta1_MsgServerMetadata.Methods.harvest,
    ]
  )

  internal enum Methods {
    internal static let createPrivatePlan = GRPCMethodDescriptor(
      name: "CreatePrivatePlan",
      path: "/crescent.lpfarm.v1beta1.Msg/CreatePrivatePlan",
      type: GRPCCallType.unary
    )

    internal static let farm = GRPCMethodDescriptor(
      name: "Farm",
      path: "/crescent.lpfarm.v1beta1.Msg/Farm",
      type: GRPCCallType.unary
    )

    internal static let unfarm = GRPCMethodDescriptor(
      name: "Unfarm",
      path: "/crescent.lpfarm.v1beta1.Msg/Unfarm",
      type: GRPCCallType.unary
    )

    internal static let harvest = GRPCMethodDescriptor(
      name: "Harvest",
      path: "/crescent.lpfarm.v1beta1.Msg/Harvest",
      type: GRPCCallType.unary
    )
  }
}
