// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: umee/leverage/v1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventSupply is emitted on Msg/Supply
struct Umee_Leverage_V1_EventSupply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Liquidity supplier bech32 address.
  var supplier: String = String()

  /// Liquidity provided to the module.
  var asset: Cosmos_Base_V1beta1_Coin {
    get {return _asset ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {self._asset = nil}

  /// uToken received by the supplier in exchange for the provided liquidity.
  var utoken: Cosmos_Base_V1beta1_Coin {
    get {return _utoken ?? Cosmos_Base_V1beta1_Coin()}
    set {_utoken = newValue}
  }
  /// Returns true if `utoken` has been explicitly set.
  var hasUtoken: Bool {return self._utoken != nil}
  /// Clears the value of `utoken`. Subsequent reads from it will return its default value.
  mutating func clearUtoken() {self._utoken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _asset: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _utoken: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventWithdraw is emitted on Msg/Withdraw
struct Umee_Leverage_V1_EventWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Liquidity supplier bech32 address.
  var supplier: String = String()

  /// uToken sent to the module in exchange for the underlying asset.
  var utoken: Cosmos_Base_V1beta1_Coin {
    get {return _utoken ?? Cosmos_Base_V1beta1_Coin()}
    set {_utoken = newValue}
  }
  /// Returns true if `utoken` has been explicitly set.
  var hasUtoken: Bool {return self._utoken != nil}
  /// Clears the value of `utoken`. Subsequent reads from it will return its default value.
  mutating func clearUtoken() {self._utoken = nil}

  /// Liquidity received by the supplier.
  var asset: Cosmos_Base_V1beta1_Coin {
    get {return _asset ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {self._asset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _utoken: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _asset: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventCollaterize is emitted on Msg/Collaterize
struct Umee_Leverage_V1_EventCollaterize {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Borrower bech32 address.
  var borrower: String = String()

  /// uToken provided as a collateral.
  var utoken: Cosmos_Base_V1beta1_Coin {
    get {return _utoken ?? Cosmos_Base_V1beta1_Coin()}
    set {_utoken = newValue}
  }
  /// Returns true if `utoken` has been explicitly set.
  var hasUtoken: Bool {return self._utoken != nil}
  /// Clears the value of `utoken`. Subsequent reads from it will return its default value.
  mutating func clearUtoken() {self._utoken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _utoken: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventDecollaterize is emitted on Msg/Decollateralize
struct Umee_Leverage_V1_EventDecollaterize {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Borrower bech32 address.
  var borrower: String = String()

  /// utoken removed from collateral.
  var utoken: Cosmos_Base_V1beta1_Coin {
    get {return _utoken ?? Cosmos_Base_V1beta1_Coin()}
    set {_utoken = newValue}
  }
  /// Returns true if `utoken` has been explicitly set.
  var hasUtoken: Bool {return self._utoken != nil}
  /// Clears the value of `utoken`. Subsequent reads from it will return its default value.
  mutating func clearUtoken() {self._utoken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _utoken: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventBorrow is emitted on Msg/Borrow
struct Umee_Leverage_V1_EventBorrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Borrower bech32 address.
  var borrower: String = String()

  /// Asset borrowed.
  var asset: Cosmos_Base_V1beta1_Coin {
    get {return _asset ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {self._asset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _asset: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventRepay is emitted on Msg/Repay
struct Umee_Leverage_V1_EventRepay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Borrower bech32 address.
  var borrower: String = String()

  /// Asset repaid
  var repaid: Cosmos_Base_V1beta1_Coin {
    get {return _repaid ?? Cosmos_Base_V1beta1_Coin()}
    set {_repaid = newValue}
  }
  /// Returns true if `repaid` has been explicitly set.
  var hasRepaid: Bool {return self._repaid != nil}
  /// Clears the value of `repaid`. Subsequent reads from it will return its default value.
  mutating func clearRepaid() {self._repaid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _repaid: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventLiquidate is emitted on Msg/Liquidate
struct Umee_Leverage_V1_EventLiquidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Liquidator bech32 address.
  var liquidator: String = String()

  /// Borrower bech32 address.
  var borrower: String = String()

  /// Assets liquidated from the borrower
  var liquidated: Cosmos_Base_V1beta1_Coin {
    get {return _liquidated ?? Cosmos_Base_V1beta1_Coin()}
    set {_liquidated = newValue}
  }
  /// Returns true if `liquidated` has been explicitly set.
  var hasLiquidated: Bool {return self._liquidated != nil}
  /// Clears the value of `liquidated`. Subsequent reads from it will return its default value.
  mutating func clearLiquidated() {self._liquidated = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _liquidated: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventInterestAccrual is emitted when interest accrues in EndBlock
struct Umee_Leverage_V1_EventInterestAccrual {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockHeight: UInt64 = 0

  /// Unix timestamp (in seconds)
  var timestamp: UInt64 = 0

  var totalInterest: [Cosmos_Base_V1beta1_Coin] = []

  var reserved: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRepayBadDebt is emitted when bad debt is detected and repayed
/// (potentially partially)
struct Umee_Leverage_V1_EventRepayBadDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Borrower bech32 address.
  var borrower: String = String()

  /// Asset repaid
  var asset: Cosmos_Base_V1beta1_Coin {
    get {return _asset ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {self._asset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _asset: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventReservesExhausted is emitted when the module reserves are exhausted
/// by paying off bad debts.
struct Umee_Leverage_V1_EventReservesExhausted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Borrower bech32 address.
  var borrower: String = String()

  /// Outstanding bad debt
  var outstandingDebt: Cosmos_Base_V1beta1_Coin {
    get {return _outstandingDebt ?? Cosmos_Base_V1beta1_Coin()}
    set {_outstandingDebt = newValue}
  }
  /// Returns true if `outstandingDebt` has been explicitly set.
  var hasOutstandingDebt: Bool {return self._outstandingDebt != nil}
  /// Clears the value of `outstandingDebt`. Subsequent reads from it will return its default value.
  mutating func clearOutstandingDebt() {self._outstandingDebt = nil}

  /// Module balance remaining
  var moduleBalance: Cosmos_Base_V1beta1_Coin {
    get {return _moduleBalance ?? Cosmos_Base_V1beta1_Coin()}
    set {_moduleBalance = newValue}
  }
  /// Returns true if `moduleBalance` has been explicitly set.
  var hasModuleBalance: Bool {return self._moduleBalance != nil}
  /// Clears the value of `moduleBalance`. Subsequent reads from it will return its default value.
  mutating func clearModuleBalance() {self._moduleBalance = nil}

  /// Reserves remaining
  var reserves: Cosmos_Base_V1beta1_Coin {
    get {return _reserves ?? Cosmos_Base_V1beta1_Coin()}
    set {_reserves = newValue}
  }
  /// Returns true if `reserves` has been explicitly set.
  var hasReserves: Bool {return self._reserves != nil}
  /// Clears the value of `reserves`. Subsequent reads from it will return its default value.
  mutating func clearReserves() {self._reserves = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _outstandingDebt: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _moduleBalance: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _reserves: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventFundOracle is emitted when sending rewards to oracle module
struct Umee_Leverage_V1_EventFundOracle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Assets sent to oracle module
  var assets: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Umee_Leverage_V1_EventSupply: @unchecked Sendable {}
extension Umee_Leverage_V1_EventWithdraw: @unchecked Sendable {}
extension Umee_Leverage_V1_EventCollaterize: @unchecked Sendable {}
extension Umee_Leverage_V1_EventDecollaterize: @unchecked Sendable {}
extension Umee_Leverage_V1_EventBorrow: @unchecked Sendable {}
extension Umee_Leverage_V1_EventRepay: @unchecked Sendable {}
extension Umee_Leverage_V1_EventLiquidate: @unchecked Sendable {}
extension Umee_Leverage_V1_EventInterestAccrual: @unchecked Sendable {}
extension Umee_Leverage_V1_EventRepayBadDebt: @unchecked Sendable {}
extension Umee_Leverage_V1_EventReservesExhausted: @unchecked Sendable {}
extension Umee_Leverage_V1_EventFundOracle: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "umee.leverage.v1"

extension Umee_Leverage_V1_EventSupply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventSupply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "supplier"),
    2: .same(proto: "asset"),
    3: .same(proto: "utoken"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.supplier) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._utoken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.supplier.isEmpty {
      try visitor.visitSingularStringField(value: self.supplier, fieldNumber: 1)
    }
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._utoken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventSupply, rhs: Umee_Leverage_V1_EventSupply) -> Bool {
    if lhs.supplier != rhs.supplier {return false}
    if lhs._asset != rhs._asset {return false}
    if lhs._utoken != rhs._utoken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventWithdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "supplier"),
    2: .same(proto: "utoken"),
    3: .same(proto: "asset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.supplier) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._utoken) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.supplier.isEmpty {
      try visitor.visitSingularStringField(value: self.supplier, fieldNumber: 1)
    }
    try { if let v = self._utoken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventWithdraw, rhs: Umee_Leverage_V1_EventWithdraw) -> Bool {
    if lhs.supplier != rhs.supplier {return false}
    if lhs._utoken != rhs._utoken {return false}
    if lhs._asset != rhs._asset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventCollaterize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCollaterize"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .same(proto: "utoken"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._utoken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    try { if let v = self._utoken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventCollaterize, rhs: Umee_Leverage_V1_EventCollaterize) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs._utoken != rhs._utoken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventDecollaterize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventDecollaterize"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .same(proto: "utoken"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._utoken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    try { if let v = self._utoken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventDecollaterize, rhs: Umee_Leverage_V1_EventDecollaterize) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs._utoken != rhs._utoken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventBorrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBorrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .same(proto: "asset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventBorrow, rhs: Umee_Leverage_V1_EventBorrow) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs._asset != rhs._asset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventRepay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRepay"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .same(proto: "repaid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._repaid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    try { if let v = self._repaid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventRepay, rhs: Umee_Leverage_V1_EventRepay) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs._repaid != rhs._repaid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventLiquidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventLiquidate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "liquidator"),
    2: .same(proto: "borrower"),
    3: .same(proto: "liquidated"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.liquidator) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._liquidated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.liquidator.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidator, fieldNumber: 1)
    }
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 2)
    }
    try { if let v = self._liquidated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventLiquidate, rhs: Umee_Leverage_V1_EventLiquidate) -> Bool {
    if lhs.liquidator != rhs.liquidator {return false}
    if lhs.borrower != rhs.borrower {return false}
    if lhs._liquidated != rhs._liquidated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventInterestAccrual: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventInterestAccrual"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_height"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "total_interest"),
    4: .same(proto: "reserved"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.blockHeight) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.totalInterest) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.reserved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockHeight, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if !self.totalInterest.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalInterest, fieldNumber: 3)
    }
    if !self.reserved.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reserved, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventInterestAccrual, rhs: Umee_Leverage_V1_EventInterestAccrual) -> Bool {
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.totalInterest != rhs.totalInterest {return false}
    if lhs.reserved != rhs.reserved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventRepayBadDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRepayBadDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .same(proto: "asset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventRepayBadDebt, rhs: Umee_Leverage_V1_EventRepayBadDebt) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs._asset != rhs._asset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventReservesExhausted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventReservesExhausted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .standard(proto: "outstanding_debt"),
    3: .standard(proto: "module_balance"),
    4: .same(proto: "reserves"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outstandingDebt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._moduleBalance) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._reserves) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    try { if let v = self._outstandingDebt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._moduleBalance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._reserves {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventReservesExhausted, rhs: Umee_Leverage_V1_EventReservesExhausted) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs._outstandingDebt != rhs._outstandingDebt {return false}
    if lhs._moduleBalance != rhs._moduleBalance {return false}
    if lhs._reserves != rhs._reserves {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Umee_Leverage_V1_EventFundOracle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventFundOracle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Umee_Leverage_V1_EventFundOracle, rhs: Umee_Leverage_V1_EventFundOracle) -> Bool {
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
