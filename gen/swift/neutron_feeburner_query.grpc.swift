//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: neutron/feeburner/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Neutron_Feeburner_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Neutron_Feeburner_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Neutron_Feeburner_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Feeburner_QueryParamsRequest, Neutron_Feeburner_QueryParamsResponse>

  func totalBurnedNeutronsAmount(
    _ request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>
}

extension Neutron_Feeburner_QueryClientProtocol {
  internal var serviceName: String {
    return "neutron.feeburner.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Neutron_Feeburner_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Feeburner_QueryParamsRequest, Neutron_Feeburner_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Neutron_Feeburner_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// TotalBurnedNeutronsAmount queries total amount of burned neutron fees.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalBurnedNeutronsAmount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalBurnedNeutronsAmount(
    _ request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse> {
    return self.makeUnaryCall(
      path: Neutron_Feeburner_QueryClientMetadata.Methods.totalBurnedNeutronsAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalBurnedNeutronsAmountInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Neutron_Feeburner_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Neutron_Feeburner_QueryNIOClient")
internal final class Neutron_Feeburner_QueryClient: Neutron_Feeburner_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the neutron.feeburner.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Neutron_Feeburner_QueryNIOClient: Neutron_Feeburner_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the neutron.feeburner.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Neutron_Feeburner_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Neutron_Feeburner_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Feeburner_QueryParamsRequest, Neutron_Feeburner_QueryParamsResponse>

  func makeTotalBurnedNeutronsAmountCall(
    _ request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Feeburner_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Neutron_Feeburner_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Neutron_Feeburner_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Feeburner_QueryParamsRequest, Neutron_Feeburner_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Feeburner_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeTotalBurnedNeutronsAmountCall(
    _ request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse> {
    return self.makeAsyncUnaryCall(
      path: Neutron_Feeburner_QueryClientMetadata.Methods.totalBurnedNeutronsAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalBurnedNeutronsAmountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Feeburner_QueryAsyncClientProtocol {
  internal func params(
    _ request: Neutron_Feeburner_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Feeburner_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Feeburner_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func totalBurnedNeutronsAmount(
    _ request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse {
    return try await self.performAsyncUnaryCall(
      path: Neutron_Feeburner_QueryClientMetadata.Methods.totalBurnedNeutronsAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalBurnedNeutronsAmountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Neutron_Feeburner_QueryAsyncClient: Neutron_Feeburner_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Neutron_Feeburner_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Neutron_Feeburner_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Neutron_Feeburner_QueryParamsRequest, Neutron_Feeburner_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalBurnedNeutronsAmount'.
  func makeTotalBurnedNeutronsAmountInterceptors() -> [ClientInterceptor<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>]
}

internal enum Neutron_Feeburner_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "neutron.feeburner.Query",
    methods: [
      Neutron_Feeburner_QueryClientMetadata.Methods.params,
      Neutron_Feeburner_QueryClientMetadata.Methods.totalBurnedNeutronsAmount,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/neutron.feeburner.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let totalBurnedNeutronsAmount = GRPCMethodDescriptor(
      name: "TotalBurnedNeutronsAmount",
      path: "/neutron.feeburner.Query/TotalBurnedNeutronsAmount",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Neutron_Feeburner_QueryProvider: CallHandlerProvider {
  var interceptors: Neutron_Feeburner_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Neutron_Feeburner_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Feeburner_QueryParamsResponse>

  /// TotalBurnedNeutronsAmount queries total amount of burned neutron fees.
  func totalBurnedNeutronsAmount(request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>
}

extension Neutron_Feeburner_QueryProvider {
  internal var serviceName: Substring {
    return Neutron_Feeburner_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Feeburner_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Feeburner_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "TotalBurnedNeutronsAmount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>(),
        interceptors: self.interceptors?.makeTotalBurnedNeutronsAmountInterceptors() ?? [],
        userFunction: self.totalBurnedNeutronsAmount(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Neutron_Feeburner_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Neutron_Feeburner_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Neutron_Feeburner_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Feeburner_QueryParamsResponse

  /// TotalBurnedNeutronsAmount queries total amount of burned neutron fees.
  @Sendable func totalBurnedNeutronsAmount(
    request: Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Neutron_Feeburner_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Neutron_Feeburner_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Neutron_Feeburner_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Neutron_Feeburner_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Feeburner_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Feeburner_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "TotalBurnedNeutronsAmount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest>(),
        responseSerializer: ProtobufSerializer<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>(),
        interceptors: self.interceptors?.makeTotalBurnedNeutronsAmountInterceptors() ?? [],
        wrapping: self.totalBurnedNeutronsAmount(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Neutron_Feeburner_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Neutron_Feeburner_QueryParamsRequest, Neutron_Feeburner_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'totalBurnedNeutronsAmount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalBurnedNeutronsAmountInterceptors() -> [ServerInterceptor<Neutron_Feeburner_QueryTotalBurnedNeutronsAmountRequest, Neutron_Feeburner_QueryTotalBurnedNeutronsAmountResponse>]
}

internal enum Neutron_Feeburner_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "neutron.feeburner.Query",
    methods: [
      Neutron_Feeburner_QueryServerMetadata.Methods.params,
      Neutron_Feeburner_QueryServerMetadata.Methods.totalBurnedNeutronsAmount,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/neutron.feeburner.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let totalBurnedNeutronsAmount = GRPCMethodDescriptor(
      name: "TotalBurnedNeutronsAmount",
      path: "/neutron.feeburner.Query/TotalBurnedNeutronsAmount",
      type: GRPCCallType.unary
    )
  }
}
