// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lum-network/millions/prize.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Lum_Network_Millions_PrizeState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case pending // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Lum_Network_Millions_PrizeState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Lum_Network_Millions_PrizeState] = [
    .unspecified,
    .pending,
  ]
}

#endif  // swift(>=4.2)

struct Lum_Network_Millions_Prize {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var drawID: UInt64 = 0

  var prizeID: UInt64 = 0

  var state: Lum_Network_Millions_PrizeState = .unspecified

  var winnerAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var createdAtHeight: Int64 = 0

  var updatedAtHeight: Int64 = 0

  var expiresAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiresAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiresAt = newValue}
  }
  /// Returns true if `expiresAt` has been explicitly set.
  var hasExpiresAt: Bool {return self._expiresAt != nil}
  /// Clears the value of `expiresAt`. Subsequent reads from it will return its default value.
  mutating func clearExpiresAt() {self._expiresAt = nil}

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _expiresAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Lum_Network_Millions_PrizeIDs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var drawID: UInt64 = 0

  var prizeID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_PrizeIDsCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prizesIds: [Lum_Network_Millions_PrizeIDs] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lum_Network_Millions_PrizeState: @unchecked Sendable {}
extension Lum_Network_Millions_Prize: @unchecked Sendable {}
extension Lum_Network_Millions_PrizeIDs: @unchecked Sendable {}
extension Lum_Network_Millions_PrizeIDsCollection: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lum.network.millions"

extension Lum_Network_Millions_PrizeState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIZE_STATE_UNSPECIFIED"),
    1: .same(proto: "PRIZE_STATE_PENDING"),
  ]
}

extension Lum_Network_Millions_Prize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Prize"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "draw_id"),
    3: .standard(proto: "prize_id"),
    4: .same(proto: "state"),
    5: .standard(proto: "winner_address"),
    6: .same(proto: "amount"),
    7: .standard(proto: "created_at_height"),
    8: .standard(proto: "updated_at_height"),
    9: .standard(proto: "expires_at"),
    10: .standard(proto: "created_at"),
    11: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.drawID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.prizeID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.winnerAddress) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.createdAtHeight) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.updatedAtHeight) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._expiresAt) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.drawID != 0 {
      try visitor.visitSingularUInt64Field(value: self.drawID, fieldNumber: 2)
    }
    if self.prizeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.prizeID, fieldNumber: 3)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    if !self.winnerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.winnerAddress, fieldNumber: 5)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.createdAtHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAtHeight, fieldNumber: 7)
    }
    if self.updatedAtHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAtHeight, fieldNumber: 8)
    }
    try { if let v = self._expiresAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_Prize, rhs: Lum_Network_Millions_Prize) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.drawID != rhs.drawID {return false}
    if lhs.prizeID != rhs.prizeID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.winnerAddress != rhs.winnerAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.createdAtHeight != rhs.createdAtHeight {return false}
    if lhs.updatedAtHeight != rhs.updatedAtHeight {return false}
    if lhs._expiresAt != rhs._expiresAt {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_PrizeIDs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrizeIDs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "draw_id"),
    3: .standard(proto: "prize_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.drawID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.prizeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.drawID != 0 {
      try visitor.visitSingularUInt64Field(value: self.drawID, fieldNumber: 2)
    }
    if self.prizeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.prizeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_PrizeIDs, rhs: Lum_Network_Millions_PrizeIDs) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.drawID != rhs.drawID {return false}
    if lhs.prizeID != rhs.prizeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_PrizeIDsCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrizeIDsCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "prizes_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.prizesIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prizesIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.prizesIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_PrizeIDsCollection, rhs: Lum_Network_Millions_PrizeIDsCollection) -> Bool {
    if lhs.prizesIds != rhs.prizesIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
