// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: assetmantle/ids/base/any_id.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Assetmantle_Schema_Ids_Base_AnyID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var impl: Assetmantle_Schema_Ids_Base_AnyID.OneOf_Impl? = nil

  var assetID: Assetmantle_Schema_Ids_Base_AssetID {
    get {
      if case .assetID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_AssetID()
    }
    set {impl = .assetID(newValue)}
  }

  var classificationID: Assetmantle_Schema_Ids_Base_ClassificationID {
    get {
      if case .classificationID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_ClassificationID()
    }
    set {impl = .classificationID(newValue)}
  }

  var coinID: Assetmantle_Schema_Ids_Base_CoinID {
    get {
      if case .coinID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_CoinID()
    }
    set {impl = .coinID(newValue)}
  }

  var dataID: Assetmantle_Schema_Ids_Base_DataID {
    get {
      if case .dataID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_DataID()
    }
    set {impl = .dataID(newValue)}
  }

  var hashID: Assetmantle_Schema_Ids_Base_HashID {
    get {
      if case .hashID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_HashID()
    }
    set {impl = .hashID(newValue)}
  }

  var identityID: Assetmantle_Schema_Ids_Base_IdentityID {
    get {
      if case .identityID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_IdentityID()
    }
    set {impl = .identityID(newValue)}
  }

  var maintainerID: Assetmantle_Schema_Ids_Base_MaintainerID {
    get {
      if case .maintainerID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_MaintainerID()
    }
    set {impl = .maintainerID(newValue)}
  }

  var orderID: Assetmantle_Schema_Ids_Base_OrderID {
    get {
      if case .orderID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_OrderID()
    }
    set {impl = .orderID(newValue)}
  }

  var ownableID: Assetmantle_Schema_Ids_Base_AnyOwnableID {
    get {
      if case .ownableID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_AnyOwnableID()
    }
    set {impl = .ownableID(newValue)}
  }

  var propertyID: Assetmantle_Schema_Ids_Base_PropertyID {
    get {
      if case .propertyID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_PropertyID()
    }
    set {impl = .propertyID(newValue)}
  }

  var splitID: Assetmantle_Schema_Ids_Base_SplitID {
    get {
      if case .splitID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_SplitID()
    }
    set {impl = .splitID(newValue)}
  }

  var stringID: Assetmantle_Schema_Ids_Base_StringID {
    get {
      if case .stringID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_StringID()
    }
    set {impl = .stringID(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Impl: Equatable {
    case assetID(Assetmantle_Schema_Ids_Base_AssetID)
    case classificationID(Assetmantle_Schema_Ids_Base_ClassificationID)
    case coinID(Assetmantle_Schema_Ids_Base_CoinID)
    case dataID(Assetmantle_Schema_Ids_Base_DataID)
    case hashID(Assetmantle_Schema_Ids_Base_HashID)
    case identityID(Assetmantle_Schema_Ids_Base_IdentityID)
    case maintainerID(Assetmantle_Schema_Ids_Base_MaintainerID)
    case orderID(Assetmantle_Schema_Ids_Base_OrderID)
    case ownableID(Assetmantle_Schema_Ids_Base_AnyOwnableID)
    case propertyID(Assetmantle_Schema_Ids_Base_PropertyID)
    case splitID(Assetmantle_Schema_Ids_Base_SplitID)
    case stringID(Assetmantle_Schema_Ids_Base_StringID)

  #if !swift(>=4.1)
    static func ==(lhs: Assetmantle_Schema_Ids_Base_AnyID.OneOf_Impl, rhs: Assetmantle_Schema_Ids_Base_AnyID.OneOf_Impl) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.assetID, .assetID): return {
        guard case .assetID(let l) = lhs, case .assetID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.classificationID, .classificationID): return {
        guard case .classificationID(let l) = lhs, case .classificationID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.coinID, .coinID): return {
        guard case .coinID(let l) = lhs, case .coinID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dataID, .dataID): return {
        guard case .dataID(let l) = lhs, case .dataID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.hashID, .hashID): return {
        guard case .hashID(let l) = lhs, case .hashID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.identityID, .identityID): return {
        guard case .identityID(let l) = lhs, case .identityID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.maintainerID, .maintainerID): return {
        guard case .maintainerID(let l) = lhs, case .maintainerID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.orderID, .orderID): return {
        guard case .orderID(let l) = lhs, case .orderID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ownableID, .ownableID): return {
        guard case .ownableID(let l) = lhs, case .ownableID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.propertyID, .propertyID): return {
        guard case .propertyID(let l) = lhs, case .propertyID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.splitID, .splitID): return {
        guard case .splitID(let l) = lhs, case .splitID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stringID, .stringID): return {
        guard case .stringID(let l) = lhs, case .stringID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Assetmantle_Schema_Ids_Base_AnyID: @unchecked Sendable {}
extension Assetmantle_Schema_Ids_Base_AnyID.OneOf_Impl: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "assetmantle.schema.ids.base"

extension Assetmantle_Schema_Ids_Base_AnyID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnyID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_i_d"),
    2: .standard(proto: "classification_i_d"),
    3: .standard(proto: "coin_i_d"),
    4: .standard(proto: "data_i_d"),
    5: .standard(proto: "hash_i_d"),
    6: .standard(proto: "identity_i_d"),
    7: .standard(proto: "maintainer_i_d"),
    8: .standard(proto: "order_i_d"),
    9: .standard(proto: "ownable_i_d"),
    10: .standard(proto: "property_i_d"),
    11: .standard(proto: "split_i_d"),
    12: .standard(proto: "string_i_d"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Assetmantle_Schema_Ids_Base_AssetID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .assetID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .assetID(v)
        }
      }()
      case 2: try {
        var v: Assetmantle_Schema_Ids_Base_ClassificationID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .classificationID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .classificationID(v)
        }
      }()
      case 3: try {
        var v: Assetmantle_Schema_Ids_Base_CoinID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .coinID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .coinID(v)
        }
      }()
      case 4: try {
        var v: Assetmantle_Schema_Ids_Base_DataID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .dataID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .dataID(v)
        }
      }()
      case 5: try {
        var v: Assetmantle_Schema_Ids_Base_HashID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .hashID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .hashID(v)
        }
      }()
      case 6: try {
        var v: Assetmantle_Schema_Ids_Base_IdentityID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .identityID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .identityID(v)
        }
      }()
      case 7: try {
        var v: Assetmantle_Schema_Ids_Base_MaintainerID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .maintainerID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .maintainerID(v)
        }
      }()
      case 8: try {
        var v: Assetmantle_Schema_Ids_Base_OrderID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .orderID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .orderID(v)
        }
      }()
      case 9: try {
        var v: Assetmantle_Schema_Ids_Base_AnyOwnableID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .ownableID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .ownableID(v)
        }
      }()
      case 10: try {
        var v: Assetmantle_Schema_Ids_Base_PropertyID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .propertyID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .propertyID(v)
        }
      }()
      case 11: try {
        var v: Assetmantle_Schema_Ids_Base_SplitID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .splitID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .splitID(v)
        }
      }()
      case 12: try {
        var v: Assetmantle_Schema_Ids_Base_StringID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .stringID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .stringID(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.impl {
    case .assetID?: try {
      guard case .assetID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .classificationID?: try {
      guard case .classificationID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .coinID?: try {
      guard case .coinID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .dataID?: try {
      guard case .dataID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .hashID?: try {
      guard case .hashID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .identityID?: try {
      guard case .identityID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .maintainerID?: try {
      guard case .maintainerID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .orderID?: try {
      guard case .orderID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .ownableID?: try {
      guard case .ownableID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .propertyID?: try {
      guard case .propertyID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .splitID?: try {
      guard case .splitID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .stringID?: try {
      guard case .stringID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Assetmantle_Schema_Ids_Base_AnyID, rhs: Assetmantle_Schema_Ids_Base_AnyID) -> Bool {
    if lhs.impl != rhs.impl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
