//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: em/market/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Em_Market_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Em_Market_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? { get }

  func addLimitOrder(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>

  func addMarketOrder(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>

  func cancelOrder(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>

  func cancelReplaceLimitOrder(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>

  func cancelReplaceMarketOrder(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>
}

extension Em_Market_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "em.market.v1.Msg"
  }

  /// Unary call to AddLimitOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to AddLimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addLimitOrder(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.addLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? []
    )
  }

  /// Unary call to AddMarketOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to AddMarketOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addMarketOrder(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.addMarketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelOrder(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelReplaceLimitOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelReplaceLimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelReplaceLimitOrder(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelReplaceMarketOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelReplaceMarketOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelReplaceMarketOrder(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse> {
    return self.makeUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceMarketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Em_Market_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Em_Market_V1_MsgNIOClient")
internal final class Em_Market_V1_MsgClient: Em_Market_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the em.market.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Em_Market_V1_MsgNIOClient: Em_Market_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the em.market.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Em_Market_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeAddLimitOrderCall(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>

  func makeAddMarketOrderCall(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>

  func makeCancelOrderCall(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>

  func makeCancelReplaceLimitOrderCall(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>

  func makeCancelReplaceMarketOrderCall(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Em_Market_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Em_Market_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddLimitOrderCall(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.addLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? []
    )
  }

  internal func makeAddMarketOrderCall(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.addMarketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? []
    )
  }

  internal func makeCancelOrderCall(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func makeCancelReplaceLimitOrderCall(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? []
    )
  }

  internal func makeCancelReplaceMarketOrderCall(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceMarketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Em_Market_V1_MsgAsyncClientProtocol {
  internal func addLimitOrder(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_MsgAddLimitOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.addLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? []
    )
  }

  internal func addMarketOrder(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_MsgAddMarketOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.addMarketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? []
    )
  }

  internal func cancelOrder(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_MsgCancelOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func cancelReplaceLimitOrder(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_MsgCancelReplaceLimitOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceLimitOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? []
    )
  }

  internal func cancelReplaceMarketOrder(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions? = nil
  ) async throws -> Em_Market_V1_MsgCancelReplaceMarketOrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceMarketOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Em_Market_V1_MsgAsyncClient: Em_Market_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Em_Market_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addLimitOrder'.
  func makeAddLimitOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'addMarketOrder'.
  func makeAddMarketOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelOrder'.
  func makeCancelOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelReplaceLimitOrder'.
  func makeCancelReplaceLimitOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelReplaceMarketOrder'.
  func makeCancelReplaceMarketOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>]
}

internal enum Em_Market_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "em.market.v1.Msg",
    methods: [
      Em_Market_V1_MsgClientMetadata.Methods.addLimitOrder,
      Em_Market_V1_MsgClientMetadata.Methods.addMarketOrder,
      Em_Market_V1_MsgClientMetadata.Methods.cancelOrder,
      Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceLimitOrder,
      Em_Market_V1_MsgClientMetadata.Methods.cancelReplaceMarketOrder,
    ]
  )

  internal enum Methods {
    internal static let addLimitOrder = GRPCMethodDescriptor(
      name: "AddLimitOrder",
      path: "/em.market.v1.Msg/AddLimitOrder",
      type: GRPCCallType.unary
    )

    internal static let addMarketOrder = GRPCMethodDescriptor(
      name: "AddMarketOrder",
      path: "/em.market.v1.Msg/AddMarketOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/em.market.v1.Msg/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelReplaceLimitOrder = GRPCMethodDescriptor(
      name: "CancelReplaceLimitOrder",
      path: "/em.market.v1.Msg/CancelReplaceLimitOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelReplaceMarketOrder = GRPCMethodDescriptor(
      name: "CancelReplaceMarketOrder",
      path: "/em.market.v1.Msg/CancelReplaceMarketOrder",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Em_Market_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Em_Market_V1_MsgServerInterceptorFactoryProtocol? { get }

  func addLimitOrder(request: Em_Market_V1_MsgAddLimitOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgAddLimitOrderResponse>

  func addMarketOrder(request: Em_Market_V1_MsgAddMarketOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgAddMarketOrderResponse>

  func cancelOrder(request: Em_Market_V1_MsgCancelOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgCancelOrderResponse>

  func cancelReplaceLimitOrder(request: Em_Market_V1_MsgCancelReplaceLimitOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgCancelReplaceLimitOrderResponse>

  func cancelReplaceMarketOrder(request: Em_Market_V1_MsgCancelReplaceMarketOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgCancelReplaceMarketOrderResponse>
}

extension Em_Market_V1_MsgProvider {
  internal var serviceName: Substring {
    return Em_Market_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddLimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgAddLimitOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgAddLimitOrderResponse>(),
        interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? [],
        userFunction: self.addLimitOrder(request:context:)
      )

    case "AddMarketOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgAddMarketOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgAddMarketOrderResponse>(),
        interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? [],
        userFunction: self.addMarketOrder(request:context:)
      )

    case "CancelOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelOrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        userFunction: self.cancelOrder(request:context:)
      )

    case "CancelReplaceLimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelReplaceLimitOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelReplaceLimitOrderResponse>(),
        interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? [],
        userFunction: self.cancelReplaceLimitOrder(request:context:)
      )

    case "CancelReplaceMarketOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelReplaceMarketOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelReplaceMarketOrderResponse>(),
        interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? [],
        userFunction: self.cancelReplaceMarketOrder(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Em_Market_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Em_Market_V1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func addLimitOrder(
    request: Em_Market_V1_MsgAddLimitOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_MsgAddLimitOrderResponse

  @Sendable func addMarketOrder(
    request: Em_Market_V1_MsgAddMarketOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_MsgAddMarketOrderResponse

  @Sendable func cancelOrder(
    request: Em_Market_V1_MsgCancelOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_MsgCancelOrderResponse

  @Sendable func cancelReplaceLimitOrder(
    request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_MsgCancelReplaceLimitOrderResponse

  @Sendable func cancelReplaceMarketOrder(
    request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    context: GRPCAsyncServerCallContext
  ) async throws -> Em_Market_V1_MsgCancelReplaceMarketOrderResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Em_Market_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Em_Market_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Em_Market_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Em_Market_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddLimitOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgAddLimitOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgAddLimitOrderResponse>(),
        interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? [],
        wrapping: self.addLimitOrder(request:context:)
      )

    case "AddMarketOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgAddMarketOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgAddMarketOrderResponse>(),
        interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? [],
        wrapping: self.addMarketOrder(request:context:)
      )

    case "CancelOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelOrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        wrapping: self.cancelOrder(request:context:)
      )

    case "CancelReplaceLimitOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelReplaceLimitOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelReplaceLimitOrderResponse>(),
        interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? [],
        wrapping: self.cancelReplaceLimitOrder(request:context:)
      )

    case "CancelReplaceMarketOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelReplaceMarketOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelReplaceMarketOrderResponse>(),
        interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? [],
        wrapping: self.cancelReplaceMarketOrder(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Em_Market_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addLimitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddLimitOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'addMarketOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddMarketOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelReplaceLimitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelReplaceLimitOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelReplaceMarketOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelReplaceMarketOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>]
}

internal enum Em_Market_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "em.market.v1.Msg",
    methods: [
      Em_Market_V1_MsgServerMetadata.Methods.addLimitOrder,
      Em_Market_V1_MsgServerMetadata.Methods.addMarketOrder,
      Em_Market_V1_MsgServerMetadata.Methods.cancelOrder,
      Em_Market_V1_MsgServerMetadata.Methods.cancelReplaceLimitOrder,
      Em_Market_V1_MsgServerMetadata.Methods.cancelReplaceMarketOrder,
    ]
  )

  internal enum Methods {
    internal static let addLimitOrder = GRPCMethodDescriptor(
      name: "AddLimitOrder",
      path: "/em.market.v1.Msg/AddLimitOrder",
      type: GRPCCallType.unary
    )

    internal static let addMarketOrder = GRPCMethodDescriptor(
      name: "AddMarketOrder",
      path: "/em.market.v1.Msg/AddMarketOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/em.market.v1.Msg/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelReplaceLimitOrder = GRPCMethodDescriptor(
      name: "CancelReplaceLimitOrder",
      path: "/em.market.v1.Msg/CancelReplaceLimitOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelReplaceMarketOrder = GRPCMethodDescriptor(
      name: "CancelReplaceMarketOrder",
      path: "/em.market.v1.Msg/CancelReplaceMarketOrder",
      type: GRPCCallType.unary
    )
  }
}
