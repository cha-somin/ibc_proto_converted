//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sommelier/pubsub/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Pubsub_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Pubsub_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Pubsub_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryParamsRequest, Pubsub_V1_QueryParamsResponse>

  func queryPublisher(
    _ request: Pubsub_V1_QueryPublisherRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryPublisherRequest, Pubsub_V1_QueryPublisherResponse>

  func queryPublishers(
    _ request: Pubsub_V1_QueryPublishersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryPublishersRequest, Pubsub_V1_QueryPublishersResponse>

  func querySubscriber(
    _ request: Pubsub_V1_QuerySubscriberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberRequest, Pubsub_V1_QuerySubscriberResponse>

  func querySubscribers(
    _ request: Pubsub_V1_QuerySubscribersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscribersRequest, Pubsub_V1_QuerySubscribersResponse>

  func queryPublisherIntent(
    _ request: Pubsub_V1_QueryPublisherIntentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentRequest, Pubsub_V1_QueryPublisherIntentResponse>

  func queryPublisherIntents(
    _ request: Pubsub_V1_QueryPublisherIntentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentsRequest, Pubsub_V1_QueryPublisherIntentsResponse>

  func queryPublisherIntentsByPublisherDomain(
    _ request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>

  func queryPublisherIntentsBySubscriptionID(
    _ request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>

  func querySubscriberIntent(
    _ request: Pubsub_V1_QuerySubscriberIntentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentRequest, Pubsub_V1_QuerySubscriberIntentResponse>

  func querySubscriberIntents(
    _ request: Pubsub_V1_QuerySubscriberIntentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsRequest, Pubsub_V1_QuerySubscriberIntentsResponse>

  func querySubscriberIntentsBySubscriberAddress(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>

  func querySubscriberIntentsBySubscriptionID(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>

  func querySubscriberIntentsByPublisherDomain(
    _ request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>

  func queryDefaultSubscription(
    _ request: Pubsub_V1_QueryDefaultSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryDefaultSubscriptionRequest, Pubsub_V1_QueryDefaultSubscriptionResponse>

  func queryDefaultSubscriptions(
    _ request: Pubsub_V1_QueryDefaultSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pubsub_V1_QueryDefaultSubscriptionsRequest, Pubsub_V1_QueryDefaultSubscriptionsResponse>
}

extension Pubsub_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "pubsub.v1.Query"
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Pubsub_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryParamsRequest, Pubsub_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to QueryPublisher
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPublisher.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPublisher(
    _ request: Pubsub_V1_QueryPublisherRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryPublisherRequest, Pubsub_V1_QueryPublisherResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherInterceptors() ?? []
    )
  }

  /// Unary call to QueryPublishers
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPublishers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPublishers(
    _ request: Pubsub_V1_QueryPublishersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryPublishersRequest, Pubsub_V1_QueryPublishersResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublishers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublishersInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriber
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriber(
    _ request: Pubsub_V1_QuerySubscriberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberRequest, Pubsub_V1_QuerySubscriberResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscribers
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscribers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscribers(
    _ request: Pubsub_V1_QuerySubscribersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscribersRequest, Pubsub_V1_QuerySubscribersResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscribers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscribersInterceptors() ?? []
    )
  }

  /// Unary call to QueryPublisherIntent
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPublisherIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPublisherIntent(
    _ request: Pubsub_V1_QueryPublisherIntentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentRequest, Pubsub_V1_QueryPublisherIntentResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentInterceptors() ?? []
    )
  }

  /// Unary call to QueryPublisherIntents
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPublisherIntents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPublisherIntents(
    _ request: Pubsub_V1_QueryPublisherIntentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentsRequest, Pubsub_V1_QueryPublisherIntentsResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsInterceptors() ?? []
    )
  }

  /// Unary call to QueryPublisherIntentsByPublisherDomain
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPublisherIntentsByPublisherDomain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPublisherIntentsByPublisherDomain(
    _ request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsByPublisherDomain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsByPublisherDomainInterceptors() ?? []
    )
  }

  /// Unary call to QueryPublisherIntentsBySubscriptionID
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPublisherIntentsBySubscriptionID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPublisherIntentsBySubscriptionID(
    _ request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsBySubscriptionID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsBySubscriptionIDInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriberIntent
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriberIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriberIntent(
    _ request: Pubsub_V1_QuerySubscriberIntentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentRequest, Pubsub_V1_QuerySubscriberIntentResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriberIntents
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriberIntents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriberIntents(
    _ request: Pubsub_V1_QuerySubscriberIntentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsRequest, Pubsub_V1_QuerySubscriberIntentsResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriberIntentsBySubscriberAddress
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriberIntentsBySubscriberAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriberIntentsBySubscriberAddress(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriberAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriberAddressInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriberIntentsBySubscriptionID
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriberIntentsBySubscriptionID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriberIntentsBySubscriptionID(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriptionID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriptionIDInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriberIntentsByPublisherDomain
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriberIntentsByPublisherDomain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriberIntentsByPublisherDomain(
    _ request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsByPublisherDomain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsByPublisherDomainInterceptors() ?? []
    )
  }

  /// Unary call to QueryDefaultSubscription
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryDefaultSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryDefaultSubscription(
    _ request: Pubsub_V1_QueryDefaultSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryDefaultSubscriptionRequest, Pubsub_V1_QueryDefaultSubscriptionResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryDefaultSubscriptionInterceptors() ?? []
    )
  }

  /// Unary call to QueryDefaultSubscriptions
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryDefaultSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryDefaultSubscriptions(
    _ request: Pubsub_V1_QueryDefaultSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pubsub_V1_QueryDefaultSubscriptionsRequest, Pubsub_V1_QueryDefaultSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryDefaultSubscriptionsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Pubsub_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Pubsub_V1_QueryNIOClient")
internal final class Pubsub_V1_QueryClient: Pubsub_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the pubsub.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Pubsub_V1_QueryNIOClient: Pubsub_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the pubsub.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Pubsub_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Pubsub_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryParamsRequest, Pubsub_V1_QueryParamsResponse>

  func makeQueryPublisherCall(
    _ request: Pubsub_V1_QueryPublisherRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherRequest, Pubsub_V1_QueryPublisherResponse>

  func makeQueryPublishersCall(
    _ request: Pubsub_V1_QueryPublishersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublishersRequest, Pubsub_V1_QueryPublishersResponse>

  func makeQuerySubscriberCall(
    _ request: Pubsub_V1_QuerySubscriberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberRequest, Pubsub_V1_QuerySubscriberResponse>

  func makeQuerySubscribersCall(
    _ request: Pubsub_V1_QuerySubscribersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscribersRequest, Pubsub_V1_QuerySubscribersResponse>

  func makeQueryPublisherIntentCall(
    _ request: Pubsub_V1_QueryPublisherIntentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentRequest, Pubsub_V1_QueryPublisherIntentResponse>

  func makeQueryPublisherIntentsCall(
    _ request: Pubsub_V1_QueryPublisherIntentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentsRequest, Pubsub_V1_QueryPublisherIntentsResponse>

  func makeQueryPublisherIntentsByPublisherDomainCall(
    _ request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>

  func makeQueryPublisherIntentsBySubscriptionIDCall(
    _ request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>

  func makeQuerySubscriberIntentCall(
    _ request: Pubsub_V1_QuerySubscriberIntentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentRequest, Pubsub_V1_QuerySubscriberIntentResponse>

  func makeQuerySubscriberIntentsCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsRequest, Pubsub_V1_QuerySubscriberIntentsResponse>

  func makeQuerySubscriberIntentsBySubscriberAddressCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>

  func makeQuerySubscriberIntentsBySubscriptionIDCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>

  func makeQuerySubscriberIntentsByPublisherDomainCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>

  func makeQueryDefaultSubscriptionCall(
    _ request: Pubsub_V1_QueryDefaultSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryDefaultSubscriptionRequest, Pubsub_V1_QueryDefaultSubscriptionResponse>

  func makeQueryDefaultSubscriptionsCall(
    _ request: Pubsub_V1_QueryDefaultSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryDefaultSubscriptionsRequest, Pubsub_V1_QueryDefaultSubscriptionsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pubsub_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Pubsub_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Pubsub_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryParamsRequest, Pubsub_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeQueryPublisherCall(
    _ request: Pubsub_V1_QueryPublisherRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherRequest, Pubsub_V1_QueryPublisherResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherInterceptors() ?? []
    )
  }

  internal func makeQueryPublishersCall(
    _ request: Pubsub_V1_QueryPublishersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublishersRequest, Pubsub_V1_QueryPublishersResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublishers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublishersInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriberCall(
    _ request: Pubsub_V1_QuerySubscriberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberRequest, Pubsub_V1_QuerySubscriberResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberInterceptors() ?? []
    )
  }

  internal func makeQuerySubscribersCall(
    _ request: Pubsub_V1_QuerySubscribersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscribersRequest, Pubsub_V1_QuerySubscribersResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscribers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscribersInterceptors() ?? []
    )
  }

  internal func makeQueryPublisherIntentCall(
    _ request: Pubsub_V1_QueryPublisherIntentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentRequest, Pubsub_V1_QueryPublisherIntentResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentInterceptors() ?? []
    )
  }

  internal func makeQueryPublisherIntentsCall(
    _ request: Pubsub_V1_QueryPublisherIntentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentsRequest, Pubsub_V1_QueryPublisherIntentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsInterceptors() ?? []
    )
  }

  internal func makeQueryPublisherIntentsByPublisherDomainCall(
    _ request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsByPublisherDomain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsByPublisherDomainInterceptors() ?? []
    )
  }

  internal func makeQueryPublisherIntentsBySubscriptionIDCall(
    _ request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsBySubscriptionID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsBySubscriptionIDInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriberIntentCall(
    _ request: Pubsub_V1_QuerySubscriberIntentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentRequest, Pubsub_V1_QuerySubscriberIntentResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriberIntentsCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsRequest, Pubsub_V1_QuerySubscriberIntentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriberIntentsBySubscriberAddressCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriberAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriberAddressInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriberIntentsBySubscriptionIDCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriptionID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriptionIDInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriberIntentsByPublisherDomainCall(
    _ request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsByPublisherDomain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsByPublisherDomainInterceptors() ?? []
    )
  }

  internal func makeQueryDefaultSubscriptionCall(
    _ request: Pubsub_V1_QueryDefaultSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryDefaultSubscriptionRequest, Pubsub_V1_QueryDefaultSubscriptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryDefaultSubscriptionInterceptors() ?? []
    )
  }

  internal func makeQueryDefaultSubscriptionsCall(
    _ request: Pubsub_V1_QueryDefaultSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Pubsub_V1_QueryDefaultSubscriptionsRequest, Pubsub_V1_QueryDefaultSubscriptionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryDefaultSubscriptionsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pubsub_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Pubsub_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func queryPublisher(
    _ request: Pubsub_V1_QueryPublisherRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryPublisherResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherInterceptors() ?? []
    )
  }

  internal func queryPublishers(
    _ request: Pubsub_V1_QueryPublishersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryPublishersResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublishers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublishersInterceptors() ?? []
    )
  }

  internal func querySubscriber(
    _ request: Pubsub_V1_QuerySubscriberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscriberResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberInterceptors() ?? []
    )
  }

  internal func querySubscribers(
    _ request: Pubsub_V1_QuerySubscribersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscribersResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscribers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscribersInterceptors() ?? []
    )
  }

  internal func queryPublisherIntent(
    _ request: Pubsub_V1_QueryPublisherIntentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryPublisherIntentResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentInterceptors() ?? []
    )
  }

  internal func queryPublisherIntents(
    _ request: Pubsub_V1_QueryPublisherIntentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryPublisherIntentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsInterceptors() ?? []
    )
  }

  internal func queryPublisherIntentsByPublisherDomain(
    _ request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsByPublisherDomain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsByPublisherDomainInterceptors() ?? []
    )
  }

  internal func queryPublisherIntentsBySubscriptionID(
    _ request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsBySubscriptionID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPublisherIntentsBySubscriptionIDInterceptors() ?? []
    )
  }

  internal func querySubscriberIntent(
    _ request: Pubsub_V1_QuerySubscriberIntentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscriberIntentResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentInterceptors() ?? []
    )
  }

  internal func querySubscriberIntents(
    _ request: Pubsub_V1_QuerySubscriberIntentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsInterceptors() ?? []
    )
  }

  internal func querySubscriberIntentsBySubscriberAddress(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriberAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriberAddressInterceptors() ?? []
    )
  }

  internal func querySubscriberIntentsBySubscriptionID(
    _ request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriptionID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriptionIDInterceptors() ?? []
    )
  }

  internal func querySubscriberIntentsByPublisherDomain(
    _ request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsByPublisherDomain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriberIntentsByPublisherDomainInterceptors() ?? []
    )
  }

  internal func queryDefaultSubscription(
    _ request: Pubsub_V1_QueryDefaultSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryDefaultSubscriptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryDefaultSubscriptionInterceptors() ?? []
    )
  }

  internal func queryDefaultSubscriptions(
    _ request: Pubsub_V1_QueryDefaultSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Pubsub_V1_QueryDefaultSubscriptionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryDefaultSubscriptionsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Pubsub_V1_QueryAsyncClient: Pubsub_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pubsub_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Pubsub_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryParamsRequest, Pubsub_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPublisher'.
  func makeQueryPublisherInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryPublisherRequest, Pubsub_V1_QueryPublisherResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPublishers'.
  func makeQueryPublishersInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryPublishersRequest, Pubsub_V1_QueryPublishersResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriber'.
  func makeQuerySubscriberInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscriberRequest, Pubsub_V1_QuerySubscriberResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscribers'.
  func makeQuerySubscribersInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscribersRequest, Pubsub_V1_QuerySubscribersResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPublisherIntent'.
  func makeQueryPublisherIntentInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryPublisherIntentRequest, Pubsub_V1_QueryPublisherIntentResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPublisherIntents'.
  func makeQueryPublisherIntentsInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryPublisherIntentsRequest, Pubsub_V1_QueryPublisherIntentsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPublisherIntentsByPublisherDomain'.
  func makeQueryPublisherIntentsByPublisherDomainInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPublisherIntentsBySubscriptionID'.
  func makeQueryPublisherIntentsBySubscriptionIDInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriberIntent'.
  func makeQuerySubscriberIntentInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscriberIntentRequest, Pubsub_V1_QuerySubscriberIntentResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriberIntents'.
  func makeQuerySubscriberIntentsInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscriberIntentsRequest, Pubsub_V1_QuerySubscriberIntentsResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriberIntentsBySubscriberAddress'.
  func makeQuerySubscriberIntentsBySubscriberAddressInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriberIntentsBySubscriptionID'.
  func makeQuerySubscriberIntentsBySubscriptionIDInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriberIntentsByPublisherDomain'.
  func makeQuerySubscriberIntentsByPublisherDomainInterceptors() -> [ClientInterceptor<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>]

  /// - Returns: Interceptors to use when invoking 'queryDefaultSubscription'.
  func makeQueryDefaultSubscriptionInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryDefaultSubscriptionRequest, Pubsub_V1_QueryDefaultSubscriptionResponse>]

  /// - Returns: Interceptors to use when invoking 'queryDefaultSubscriptions'.
  func makeQueryDefaultSubscriptionsInterceptors() -> [ClientInterceptor<Pubsub_V1_QueryDefaultSubscriptionsRequest, Pubsub_V1_QueryDefaultSubscriptionsResponse>]
}

internal enum Pubsub_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "pubsub.v1.Query",
    methods: [
      Pubsub_V1_QueryClientMetadata.Methods.params,
      Pubsub_V1_QueryClientMetadata.Methods.queryPublisher,
      Pubsub_V1_QueryClientMetadata.Methods.queryPublishers,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscriber,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscribers,
      Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntent,
      Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntents,
      Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsByPublisherDomain,
      Pubsub_V1_QueryClientMetadata.Methods.queryPublisherIntentsBySubscriptionID,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntent,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntents,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriberAddress,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsBySubscriptionID,
      Pubsub_V1_QueryClientMetadata.Methods.querySubscriberIntentsByPublisherDomain,
      Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscription,
      Pubsub_V1_QueryClientMetadata.Methods.queryDefaultSubscriptions,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/pubsub.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryPublisher = GRPCMethodDescriptor(
      name: "QueryPublisher",
      path: "/pubsub.v1.Query/QueryPublisher",
      type: GRPCCallType.unary
    )

    internal static let queryPublishers = GRPCMethodDescriptor(
      name: "QueryPublishers",
      path: "/pubsub.v1.Query/QueryPublishers",
      type: GRPCCallType.unary
    )

    internal static let querySubscriber = GRPCMethodDescriptor(
      name: "QuerySubscriber",
      path: "/pubsub.v1.Query/QuerySubscriber",
      type: GRPCCallType.unary
    )

    internal static let querySubscribers = GRPCMethodDescriptor(
      name: "QuerySubscribers",
      path: "/pubsub.v1.Query/QuerySubscribers",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntent = GRPCMethodDescriptor(
      name: "QueryPublisherIntent",
      path: "/pubsub.v1.Query/QueryPublisherIntent",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntents = GRPCMethodDescriptor(
      name: "QueryPublisherIntents",
      path: "/pubsub.v1.Query/QueryPublisherIntents",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntentsByPublisherDomain = GRPCMethodDescriptor(
      name: "QueryPublisherIntentsByPublisherDomain",
      path: "/pubsub.v1.Query/QueryPublisherIntentsByPublisherDomain",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntentsBySubscriptionID = GRPCMethodDescriptor(
      name: "QueryPublisherIntentsBySubscriptionID",
      path: "/pubsub.v1.Query/QueryPublisherIntentsBySubscriptionID",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntent = GRPCMethodDescriptor(
      name: "QuerySubscriberIntent",
      path: "/pubsub.v1.Query/QuerySubscriberIntent",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntents = GRPCMethodDescriptor(
      name: "QuerySubscriberIntents",
      path: "/pubsub.v1.Query/QuerySubscriberIntents",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntentsBySubscriberAddress = GRPCMethodDescriptor(
      name: "QuerySubscriberIntentsBySubscriberAddress",
      path: "/pubsub.v1.Query/QuerySubscriberIntentsBySubscriberAddress",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntentsBySubscriptionID = GRPCMethodDescriptor(
      name: "QuerySubscriberIntentsBySubscriptionID",
      path: "/pubsub.v1.Query/QuerySubscriberIntentsBySubscriptionID",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntentsByPublisherDomain = GRPCMethodDescriptor(
      name: "QuerySubscriberIntentsByPublisherDomain",
      path: "/pubsub.v1.Query/QuerySubscriberIntentsByPublisherDomain",
      type: GRPCCallType.unary
    )

    internal static let queryDefaultSubscription = GRPCMethodDescriptor(
      name: "QueryDefaultSubscription",
      path: "/pubsub.v1.Query/QueryDefaultSubscription",
      type: GRPCCallType.unary
    )

    internal static let queryDefaultSubscriptions = GRPCMethodDescriptor(
      name: "QueryDefaultSubscriptions",
      path: "/pubsub.v1.Query/QueryDefaultSubscriptions",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Pubsub_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Pubsub_V1_QueryServerInterceptorFactoryProtocol? { get }

  func params(request: Pubsub_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryParamsResponse>

  func queryPublisher(request: Pubsub_V1_QueryPublisherRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryPublisherResponse>

  func queryPublishers(request: Pubsub_V1_QueryPublishersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryPublishersResponse>

  func querySubscriber(request: Pubsub_V1_QuerySubscriberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscriberResponse>

  func querySubscribers(request: Pubsub_V1_QuerySubscribersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscribersResponse>

  func queryPublisherIntent(request: Pubsub_V1_QueryPublisherIntentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryPublisherIntentResponse>

  func queryPublisherIntents(request: Pubsub_V1_QueryPublisherIntentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryPublisherIntentsResponse>

  func queryPublisherIntentsByPublisherDomain(request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>

  func queryPublisherIntentsBySubscriptionID(request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>

  func querySubscriberIntent(request: Pubsub_V1_QuerySubscriberIntentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscriberIntentResponse>

  func querySubscriberIntents(request: Pubsub_V1_QuerySubscriberIntentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscriberIntentsResponse>

  func querySubscriberIntentsBySubscriberAddress(request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>

  func querySubscriberIntentsBySubscriptionID(request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>

  func querySubscriberIntentsByPublisherDomain(request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>

  func queryDefaultSubscription(request: Pubsub_V1_QueryDefaultSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryDefaultSubscriptionResponse>

  func queryDefaultSubscriptions(request: Pubsub_V1_QueryDefaultSubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Pubsub_V1_QueryDefaultSubscriptionsResponse>
}

extension Pubsub_V1_QueryProvider {
  internal var serviceName: Substring {
    return Pubsub_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "QueryPublisher":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherInterceptors() ?? [],
        userFunction: self.queryPublisher(request:context:)
      )

    case "QueryPublishers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublishersRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublishersResponse>(),
        interceptors: self.interceptors?.makeQueryPublishersInterceptors() ?? [],
        userFunction: self.queryPublishers(request:context:)
      )

    case "QuerySubscriber":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberInterceptors() ?? [],
        userFunction: self.querySubscriber(request:context:)
      )

    case "QuerySubscribers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscribersRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscribersResponse>(),
        interceptors: self.interceptors?.makeQuerySubscribersInterceptors() ?? [],
        userFunction: self.querySubscribers(request:context:)
      )

    case "QueryPublisherIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentInterceptors() ?? [],
        userFunction: self.queryPublisherIntent(request:context:)
      )

    case "QueryPublisherIntents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentsResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentsInterceptors() ?? [],
        userFunction: self.queryPublisherIntents(request:context:)
      )

    case "QueryPublisherIntentsByPublisherDomain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentsByPublisherDomainInterceptors() ?? [],
        userFunction: self.queryPublisherIntentsByPublisherDomain(request:context:)
      )

    case "QueryPublisherIntentsBySubscriptionID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentsBySubscriptionIDInterceptors() ?? [],
        userFunction: self.queryPublisherIntentsBySubscriptionID(request:context:)
      )

    case "QuerySubscriberIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentInterceptors() ?? [],
        userFunction: self.querySubscriberIntent(request:context:)
      )

    case "QuerySubscriberIntents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsInterceptors() ?? [],
        userFunction: self.querySubscriberIntents(request:context:)
      )

    case "QuerySubscriberIntentsBySubscriberAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriberAddressInterceptors() ?? [],
        userFunction: self.querySubscriberIntentsBySubscriberAddress(request:context:)
      )

    case "QuerySubscriberIntentsBySubscriptionID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriptionIDInterceptors() ?? [],
        userFunction: self.querySubscriberIntentsBySubscriptionID(request:context:)
      )

    case "QuerySubscriberIntentsByPublisherDomain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsByPublisherDomainInterceptors() ?? [],
        userFunction: self.querySubscriberIntentsByPublisherDomain(request:context:)
      )

    case "QueryDefaultSubscription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryDefaultSubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryDefaultSubscriptionResponse>(),
        interceptors: self.interceptors?.makeQueryDefaultSubscriptionInterceptors() ?? [],
        userFunction: self.queryDefaultSubscription(request:context:)
      )

    case "QueryDefaultSubscriptions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryDefaultSubscriptionsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryDefaultSubscriptionsResponse>(),
        interceptors: self.interceptors?.makeQueryDefaultSubscriptionsInterceptors() ?? [],
        userFunction: self.queryDefaultSubscriptions(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Pubsub_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Pubsub_V1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func params(
    request: Pubsub_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryParamsResponse

  @Sendable func queryPublisher(
    request: Pubsub_V1_QueryPublisherRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryPublisherResponse

  @Sendable func queryPublishers(
    request: Pubsub_V1_QueryPublishersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryPublishersResponse

  @Sendable func querySubscriber(
    request: Pubsub_V1_QuerySubscriberRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscriberResponse

  @Sendable func querySubscribers(
    request: Pubsub_V1_QuerySubscribersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscribersResponse

  @Sendable func queryPublisherIntent(
    request: Pubsub_V1_QueryPublisherIntentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryPublisherIntentResponse

  @Sendable func queryPublisherIntents(
    request: Pubsub_V1_QueryPublisherIntentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryPublisherIntentsResponse

  @Sendable func queryPublisherIntentsByPublisherDomain(
    request: Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse

  @Sendable func queryPublisherIntentsBySubscriptionID(
    request: Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse

  @Sendable func querySubscriberIntent(
    request: Pubsub_V1_QuerySubscriberIntentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscriberIntentResponse

  @Sendable func querySubscriberIntents(
    request: Pubsub_V1_QuerySubscriberIntentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsResponse

  @Sendable func querySubscriberIntentsBySubscriberAddress(
    request: Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse

  @Sendable func querySubscriberIntentsBySubscriptionID(
    request: Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse

  @Sendable func querySubscriberIntentsByPublisherDomain(
    request: Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse

  @Sendable func queryDefaultSubscription(
    request: Pubsub_V1_QueryDefaultSubscriptionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryDefaultSubscriptionResponse

  @Sendable func queryDefaultSubscriptions(
    request: Pubsub_V1_QueryDefaultSubscriptionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Pubsub_V1_QueryDefaultSubscriptionsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Pubsub_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Pubsub_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Pubsub_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Pubsub_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "QueryPublisher":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherInterceptors() ?? [],
        wrapping: self.queryPublisher(request:context:)
      )

    case "QueryPublishers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublishersRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublishersResponse>(),
        interceptors: self.interceptors?.makeQueryPublishersInterceptors() ?? [],
        wrapping: self.queryPublishers(request:context:)
      )

    case "QuerySubscriber":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberInterceptors() ?? [],
        wrapping: self.querySubscriber(request:context:)
      )

    case "QuerySubscribers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscribersRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscribersResponse>(),
        interceptors: self.interceptors?.makeQuerySubscribersInterceptors() ?? [],
        wrapping: self.querySubscribers(request:context:)
      )

    case "QueryPublisherIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentInterceptors() ?? [],
        wrapping: self.queryPublisherIntent(request:context:)
      )

    case "QueryPublisherIntents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentsResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentsInterceptors() ?? [],
        wrapping: self.queryPublisherIntents(request:context:)
      )

    case "QueryPublisherIntentsByPublisherDomain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentsByPublisherDomainInterceptors() ?? [],
        wrapping: self.queryPublisherIntentsByPublisherDomain(request:context:)
      )

    case "QueryPublisherIntentsBySubscriptionID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>(),
        interceptors: self.interceptors?.makeQueryPublisherIntentsBySubscriptionIDInterceptors() ?? [],
        wrapping: self.queryPublisherIntentsBySubscriptionID(request:context:)
      )

    case "QuerySubscriberIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentInterceptors() ?? [],
        wrapping: self.querySubscriberIntent(request:context:)
      )

    case "QuerySubscriberIntents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsInterceptors() ?? [],
        wrapping: self.querySubscriberIntents(request:context:)
      )

    case "QuerySubscriberIntentsBySubscriberAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriberAddressInterceptors() ?? [],
        wrapping: self.querySubscriberIntentsBySubscriberAddress(request:context:)
      )

    case "QuerySubscriberIntentsBySubscriptionID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsBySubscriptionIDInterceptors() ?? [],
        wrapping: self.querySubscriberIntentsBySubscriptionID(request:context:)
      )

    case "QuerySubscriberIntentsByPublisherDomain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriberIntentsByPublisherDomainInterceptors() ?? [],
        wrapping: self.querySubscriberIntentsByPublisherDomain(request:context:)
      )

    case "QueryDefaultSubscription":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryDefaultSubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryDefaultSubscriptionResponse>(),
        interceptors: self.interceptors?.makeQueryDefaultSubscriptionInterceptors() ?? [],
        wrapping: self.queryDefaultSubscription(request:context:)
      )

    case "QueryDefaultSubscriptions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pubsub_V1_QueryDefaultSubscriptionsRequest>(),
        responseSerializer: ProtobufSerializer<Pubsub_V1_QueryDefaultSubscriptionsResponse>(),
        interceptors: self.interceptors?.makeQueryDefaultSubscriptionsInterceptors() ?? [],
        wrapping: self.queryDefaultSubscriptions(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Pubsub_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryParamsRequest, Pubsub_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryPublisher'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPublisherInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryPublisherRequest, Pubsub_V1_QueryPublisherResponse>]

  /// - Returns: Interceptors to use when handling 'queryPublishers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPublishersInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryPublishersRequest, Pubsub_V1_QueryPublishersResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriber'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriberInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscriberRequest, Pubsub_V1_QuerySubscriberResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscribers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscribersInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscribersRequest, Pubsub_V1_QuerySubscribersResponse>]

  /// - Returns: Interceptors to use when handling 'queryPublisherIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPublisherIntentInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryPublisherIntentRequest, Pubsub_V1_QueryPublisherIntentResponse>]

  /// - Returns: Interceptors to use when handling 'queryPublisherIntents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPublisherIntentsInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryPublisherIntentsRequest, Pubsub_V1_QueryPublisherIntentsResponse>]

  /// - Returns: Interceptors to use when handling 'queryPublisherIntentsByPublisherDomain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPublisherIntentsByPublisherDomainInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryPublisherIntentsByPublisherDomainRequest, Pubsub_V1_QueryPublisherIntentsByPublisherDomainResponse>]

  /// - Returns: Interceptors to use when handling 'queryPublisherIntentsBySubscriptionID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPublisherIntentsBySubscriptionIDInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryPublisherIntentsBySubscriptionIDRequest, Pubsub_V1_QueryPublisherIntentsBySubscriptionIDResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriberIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriberIntentInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscriberIntentRequest, Pubsub_V1_QuerySubscriberIntentResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriberIntents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriberIntentsInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscriberIntentsRequest, Pubsub_V1_QuerySubscriberIntentsResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriberIntentsBySubscriberAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriberIntentsBySubscriberAddressInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriberAddressResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriberIntentsBySubscriptionID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriberIntentsBySubscriptionIDInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDRequest, Pubsub_V1_QuerySubscriberIntentsBySubscriptionIDResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriberIntentsByPublisherDomain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriberIntentsByPublisherDomainInterceptors() -> [ServerInterceptor<Pubsub_V1_QuerySubscriberIntentsByPublisherDomainRequest, Pubsub_V1_QuerySubscriberIntentsByPublisherDomainResponse>]

  /// - Returns: Interceptors to use when handling 'queryDefaultSubscription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryDefaultSubscriptionInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryDefaultSubscriptionRequest, Pubsub_V1_QueryDefaultSubscriptionResponse>]

  /// - Returns: Interceptors to use when handling 'queryDefaultSubscriptions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryDefaultSubscriptionsInterceptors() -> [ServerInterceptor<Pubsub_V1_QueryDefaultSubscriptionsRequest, Pubsub_V1_QueryDefaultSubscriptionsResponse>]
}

internal enum Pubsub_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "pubsub.v1.Query",
    methods: [
      Pubsub_V1_QueryServerMetadata.Methods.params,
      Pubsub_V1_QueryServerMetadata.Methods.queryPublisher,
      Pubsub_V1_QueryServerMetadata.Methods.queryPublishers,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscriber,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscribers,
      Pubsub_V1_QueryServerMetadata.Methods.queryPublisherIntent,
      Pubsub_V1_QueryServerMetadata.Methods.queryPublisherIntents,
      Pubsub_V1_QueryServerMetadata.Methods.queryPublisherIntentsByPublisherDomain,
      Pubsub_V1_QueryServerMetadata.Methods.queryPublisherIntentsBySubscriptionID,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscriberIntent,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscriberIntents,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscriberIntentsBySubscriberAddress,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscriberIntentsBySubscriptionID,
      Pubsub_V1_QueryServerMetadata.Methods.querySubscriberIntentsByPublisherDomain,
      Pubsub_V1_QueryServerMetadata.Methods.queryDefaultSubscription,
      Pubsub_V1_QueryServerMetadata.Methods.queryDefaultSubscriptions,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/pubsub.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let queryPublisher = GRPCMethodDescriptor(
      name: "QueryPublisher",
      path: "/pubsub.v1.Query/QueryPublisher",
      type: GRPCCallType.unary
    )

    internal static let queryPublishers = GRPCMethodDescriptor(
      name: "QueryPublishers",
      path: "/pubsub.v1.Query/QueryPublishers",
      type: GRPCCallType.unary
    )

    internal static let querySubscriber = GRPCMethodDescriptor(
      name: "QuerySubscriber",
      path: "/pubsub.v1.Query/QuerySubscriber",
      type: GRPCCallType.unary
    )

    internal static let querySubscribers = GRPCMethodDescriptor(
      name: "QuerySubscribers",
      path: "/pubsub.v1.Query/QuerySubscribers",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntent = GRPCMethodDescriptor(
      name: "QueryPublisherIntent",
      path: "/pubsub.v1.Query/QueryPublisherIntent",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntents = GRPCMethodDescriptor(
      name: "QueryPublisherIntents",
      path: "/pubsub.v1.Query/QueryPublisherIntents",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntentsByPublisherDomain = GRPCMethodDescriptor(
      name: "QueryPublisherIntentsByPublisherDomain",
      path: "/pubsub.v1.Query/QueryPublisherIntentsByPublisherDomain",
      type: GRPCCallType.unary
    )

    internal static let queryPublisherIntentsBySubscriptionID = GRPCMethodDescriptor(
      name: "QueryPublisherIntentsBySubscriptionID",
      path: "/pubsub.v1.Query/QueryPublisherIntentsBySubscriptionID",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntent = GRPCMethodDescriptor(
      name: "QuerySubscriberIntent",
      path: "/pubsub.v1.Query/QuerySubscriberIntent",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntents = GRPCMethodDescriptor(
      name: "QuerySubscriberIntents",
      path: "/pubsub.v1.Query/QuerySubscriberIntents",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntentsBySubscriberAddress = GRPCMethodDescriptor(
      name: "QuerySubscriberIntentsBySubscriberAddress",
      path: "/pubsub.v1.Query/QuerySubscriberIntentsBySubscriberAddress",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntentsBySubscriptionID = GRPCMethodDescriptor(
      name: "QuerySubscriberIntentsBySubscriptionID",
      path: "/pubsub.v1.Query/QuerySubscriberIntentsBySubscriptionID",
      type: GRPCCallType.unary
    )

    internal static let querySubscriberIntentsByPublisherDomain = GRPCMethodDescriptor(
      name: "QuerySubscriberIntentsByPublisherDomain",
      path: "/pubsub.v1.Query/QuerySubscriberIntentsByPublisherDomain",
      type: GRPCCallType.unary
    )

    internal static let queryDefaultSubscription = GRPCMethodDescriptor(
      name: "QueryDefaultSubscription",
      path: "/pubsub.v1.Query/QueryDefaultSubscription",
      type: GRPCCallType.unary
    )

    internal static let queryDefaultSubscriptions = GRPCMethodDescriptor(
      name: "QueryDefaultSubscriptions",
      path: "/pubsub.v1.Query/QueryDefaultSubscriptions",
      type: GRPCCallType.unary
    )
  }
}
