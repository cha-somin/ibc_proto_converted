// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/zoneconcierge/v1/packet.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ZoneconciergePacketData is the message that defines the IBC packets of
/// ZoneConcierge
struct Babylon_Zoneconcierge_V1_ZoneconciergePacketData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// packet is the actual message carried in the IBC packet
  var packet: Babylon_Zoneconcierge_V1_ZoneconciergePacketData.OneOf_Packet? = nil

  var btcTimestamp: Babylon_Zoneconcierge_V1_BTCTimestamp {
    get {
      if case .btcTimestamp(let v)? = packet {return v}
      return Babylon_Zoneconcierge_V1_BTCTimestamp()
    }
    set {packet = .btcTimestamp(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// packet is the actual message carried in the IBC packet
  enum OneOf_Packet: Equatable {
    case btcTimestamp(Babylon_Zoneconcierge_V1_BTCTimestamp)

  #if !swift(>=4.1)
    static func ==(lhs: Babylon_Zoneconcierge_V1_ZoneconciergePacketData.OneOf_Packet, rhs: Babylon_Zoneconcierge_V1_ZoneconciergePacketData.OneOf_Packet) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.btcTimestamp, .btcTimestamp): return {
        guard case .btcTimestamp(let l) = lhs, case .btcTimestamp(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

/// BTCTimestamp is a BTC timestamp that carries information of a BTC-finalised epoch
/// It includes a number of BTC headers, a raw checkpoint, an epoch metadata, and 
/// a CZ header if there exists CZ headers checkpointed to this epoch.
/// Upon a newly finalised epoch in Babylon, Babylon will send a BTC timestamp to each
/// Cosmos zone that has phase-2 integration with Babylon via IBC.
struct Babylon_Zoneconcierge_V1_BTCTimestamp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// header is the last CZ header in the finalized Babylon epoch
  var header: Babylon_Zoneconcierge_V1_IndexedHeader {
    get {return _storage._header ?? Babylon_Zoneconcierge_V1_IndexedHeader()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {_uniqueStorage()._header = nil}

  /// btc_headers is BTC headers between
  /// - the block AFTER the common ancestor of BTC tip at epoch `lastFinalizedEpoch-1` and BTC tip at epoch `lastFinalizedEpoch`
  /// - BTC tip at epoch `lastFinalizedEpoch`
  /// where `lastFinalizedEpoch` is the last finalised epoch in Babylon
  var btcHeaders: [Babylon_Btclightclient_V1_BTCHeaderInfo] {
    get {return _storage._btcHeaders}
    set {_uniqueStorage()._btcHeaders = newValue}
  }

  /// epoch_info is the metadata of the sealed epoch
  var epochInfo: Babylon_Epoching_V1_Epoch {
    get {return _storage._epochInfo ?? Babylon_Epoching_V1_Epoch()}
    set {_uniqueStorage()._epochInfo = newValue}
  }
  /// Returns true if `epochInfo` has been explicitly set.
  var hasEpochInfo: Bool {return _storage._epochInfo != nil}
  /// Clears the value of `epochInfo`. Subsequent reads from it will return its default value.
  mutating func clearEpochInfo() {_uniqueStorage()._epochInfo = nil}

  /// raw_checkpoint is the raw checkpoint that seals this epoch
  var rawCheckpoint: Babylon_Checkpointing_V1_RawCheckpoint {
    get {return _storage._rawCheckpoint ?? Babylon_Checkpointing_V1_RawCheckpoint()}
    set {_uniqueStorage()._rawCheckpoint = newValue}
  }
  /// Returns true if `rawCheckpoint` has been explicitly set.
  var hasRawCheckpoint: Bool {return _storage._rawCheckpoint != nil}
  /// Clears the value of `rawCheckpoint`. Subsequent reads from it will return its default value.
  mutating func clearRawCheckpoint() {_uniqueStorage()._rawCheckpoint = nil}

  /// btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch
  var btcSubmissionKey: Babylon_Btccheckpoint_V1_SubmissionKey {
    get {return _storage._btcSubmissionKey ?? Babylon_Btccheckpoint_V1_SubmissionKey()}
    set {_uniqueStorage()._btcSubmissionKey = newValue}
  }
  /// Returns true if `btcSubmissionKey` has been explicitly set.
  var hasBtcSubmissionKey: Bool {return _storage._btcSubmissionKey != nil}
  /// Clears the value of `btcSubmissionKey`. Subsequent reads from it will return its default value.
  mutating func clearBtcSubmissionKey() {_uniqueStorage()._btcSubmissionKey = nil}

  /// 
  ///Proofs that the header is finalized
  var proof: Babylon_Zoneconcierge_V1_ProofFinalizedChainInfo {
    get {return _storage._proof ?? Babylon_Zoneconcierge_V1_ProofFinalizedChainInfo()}
    set {_uniqueStorage()._proof = newValue}
  }
  /// Returns true if `proof` has been explicitly set.
  var hasProof: Bool {return _storage._proof != nil}
  /// Clears the value of `proof`. Subsequent reads from it will return its default value.
  mutating func clearProof() {_uniqueStorage()._proof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Zoneconcierge_V1_ZoneconciergePacketData: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_ZoneconciergePacketData.OneOf_Packet: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_BTCTimestamp: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.zoneconcierge.v1"

extension Babylon_Zoneconcierge_V1_ZoneconciergePacketData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ZoneconciergePacketData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "btc_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Babylon_Zoneconcierge_V1_BTCTimestamp?
        var hadOneofValue = false
        if let current = self.packet {
          hadOneofValue = true
          if case .btcTimestamp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.packet = .btcTimestamp(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .btcTimestamp(let v)? = self.packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_ZoneconciergePacketData, rhs: Babylon_Zoneconcierge_V1_ZoneconciergePacketData) -> Bool {
    if lhs.packet != rhs.packet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_BTCTimestamp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BTCTimestamp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "btc_headers"),
    3: .standard(proto: "epoch_info"),
    4: .standard(proto: "raw_checkpoint"),
    5: .standard(proto: "btc_submission_key"),
    6: .same(proto: "proof"),
  ]

  fileprivate class _StorageClass {
    var _header: Babylon_Zoneconcierge_V1_IndexedHeader? = nil
    var _btcHeaders: [Babylon_Btclightclient_V1_BTCHeaderInfo] = []
    var _epochInfo: Babylon_Epoching_V1_Epoch? = nil
    var _rawCheckpoint: Babylon_Checkpointing_V1_RawCheckpoint? = nil
    var _btcSubmissionKey: Babylon_Btccheckpoint_V1_SubmissionKey? = nil
    var _proof: Babylon_Zoneconcierge_V1_ProofFinalizedChainInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _header = source._header
      _btcHeaders = source._btcHeaders
      _epochInfo = source._epochInfo
      _rawCheckpoint = source._rawCheckpoint
      _btcSubmissionKey = source._btcSubmissionKey
      _proof = source._proof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._header) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._btcHeaders) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._epochInfo) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._rawCheckpoint) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._btcSubmissionKey) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._proof) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._btcHeaders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._btcHeaders, fieldNumber: 2)
      }
      try { if let v = _storage._epochInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._rawCheckpoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._btcSubmissionKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._proof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_BTCTimestamp, rhs: Babylon_Zoneconcierge_V1_BTCTimestamp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._header != rhs_storage._header {return false}
        if _storage._btcHeaders != rhs_storage._btcHeaders {return false}
        if _storage._epochInfo != rhs_storage._epochInfo {return false}
        if _storage._rawCheckpoint != rhs_storage._rawCheckpoint {return false}
        if _storage._btcSubmissionKey != rhs_storage._btcSubmissionKey {return false}
        if _storage._proof != rhs_storage._proof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
