//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/tokenfactory/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the tokefactory module's gRPC message service.
///
/// Usage: instantiate `Injective_Tokenfactory_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Tokenfactory_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createDenom(
    _ request: Injective_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgCreateDenom, Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func mint(
    _ request: Injective_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgMint, Injective_Tokenfactory_V1beta1_MsgMintResponse>

  func burn(
    _ request: Injective_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgBurn, Injective_Tokenfactory_V1beta1_MsgBurnResponse>

  func changeAdmin(
    _ request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgChangeAdmin, Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func setDenomMetadata(
    _ request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>

  func updateParams(
    _ request: Injective_Tokenfactory_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgUpdateParams, Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>
}

extension Injective_Tokenfactory_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "injective.tokenfactory.v1beta1.Msg"
  }

  /// Unary call to CreateDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDenom(
    _ request: Injective_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgCreateDenom, Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.makeUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  /// Unary call to Mint
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mint(
    _ request: Injective_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgMint, Injective_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.makeUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Unary call to Burn
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burn(
    _ request: Injective_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgBurn, Injective_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.makeUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// Unary call to ChangeAdmin
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changeAdmin(
    _ request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgChangeAdmin, Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.makeUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  /// Unary call to SetDenomMetadata
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDenomMetadata(
    _ request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  /// Unary call to UpdateParams
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Injective_Tokenfactory_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Tokenfactory_V1beta1_MsgUpdateParams, Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Injective_Tokenfactory_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Injective_Tokenfactory_V1beta1_MsgNIOClient")
internal final class Injective_Tokenfactory_V1beta1_MsgClient: Injective_Tokenfactory_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the injective.tokenfactory.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Injective_Tokenfactory_V1beta1_MsgNIOClient: Injective_Tokenfactory_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.tokenfactory.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the tokefactory module's gRPC message service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Tokenfactory_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateDenomCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgCreateDenom, Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func makeMintCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgMint, Injective_Tokenfactory_V1beta1_MsgMintResponse>

  func makeBurnCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgBurn, Injective_Tokenfactory_V1beta1_MsgBurnResponse>

  func makeChangeAdminCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgChangeAdmin, Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func makeSetDenomMetadataCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>

  func makeUpdateParamsCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgUpdateParams, Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Tokenfactory_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateDenomCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgCreateDenom, Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  internal func makeMintCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgMint, Injective_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func makeBurnCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgBurn, Injective_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func makeChangeAdminCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgChangeAdmin, Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  internal func makeSetDenomMetadataCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Injective_Tokenfactory_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Injective_Tokenfactory_V1beta1_MsgUpdateParams, Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  internal func createDenom(
    _ request: Injective_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  internal func mint(
    _ request: Injective_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func burn(
    _ request: Injective_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgBurnResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func changeAdmin(
    _ request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  internal func setDenomMetadata(
    _ request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Injective_Tokenfactory_V1beta1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Injective_Tokenfactory_V1beta1_MsgAsyncClient: Injective_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Injective_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createDenom'.
  func makeCreateDenomInterceptors() -> [ClientInterceptor<Injective_Tokenfactory_V1beta1_MsgCreateDenom, Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Injective_Tokenfactory_V1beta1_MsgMint, Injective_Tokenfactory_V1beta1_MsgMintResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Injective_Tokenfactory_V1beta1_MsgBurn, Injective_Tokenfactory_V1beta1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when invoking 'changeAdmin'.
  func makeChangeAdminInterceptors() -> [ClientInterceptor<Injective_Tokenfactory_V1beta1_MsgChangeAdmin, Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'setDenomMetadata'.
  func makeSetDenomMetadataInterceptors() -> [ClientInterceptor<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Injective_Tokenfactory_V1beta1_MsgUpdateParams, Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Injective_Tokenfactory_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.tokenfactory.v1beta1.Msg",
    methods: [
      Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom,
      Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint,
      Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn,
      Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin,
      Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata,
      Injective_Tokenfactory_V1beta1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/injective.tokenfactory.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/injective.tokenfactory.v1beta1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/injective.tokenfactory.v1beta1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let changeAdmin = GRPCMethodDescriptor(
      name: "ChangeAdmin",
      path: "/injective.tokenfactory.v1beta1.Msg/ChangeAdmin",
      type: GRPCCallType.unary
    )

    internal static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/injective.tokenfactory.v1beta1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.tokenfactory.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the tokefactory module's gRPC message service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Tokenfactory_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Injective_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  func createDenom(request: Injective_Tokenfactory_V1beta1_MsgCreateDenom, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func mint(request: Injective_Tokenfactory_V1beta1_MsgMint, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Tokenfactory_V1beta1_MsgMintResponse>

  func burn(request: Injective_Tokenfactory_V1beta1_MsgBurn, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Tokenfactory_V1beta1_MsgBurnResponse>

  func changeAdmin(request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func setDenomMetadata(request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>

  func updateParams(request: Injective_Tokenfactory_V1beta1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>
}

extension Injective_Tokenfactory_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Injective_Tokenfactory_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgCreateDenom>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>(),
        interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? [],
        userFunction: self.createDenom(request:context:)
      )

    case "Mint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgMint>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        userFunction: self.mint(request:context:)
      )

    case "Burn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        userFunction: self.burn(request:context:)
      )

    case "ChangeAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgChangeAdmin>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>(),
        interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? [],
        userFunction: self.changeAdmin(request:context:)
      )

    case "SetDenomMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? [],
        userFunction: self.setDenomMetadata(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the tokefactory module's gRPC message service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Injective_Tokenfactory_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Injective_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createDenom(
    request: Injective_Tokenfactory_V1beta1_MsgCreateDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse

  @Sendable func mint(
    request: Injective_Tokenfactory_V1beta1_MsgMint,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgMintResponse

  @Sendable func burn(
    request: Injective_Tokenfactory_V1beta1_MsgBurn,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgBurnResponse

  @Sendable func changeAdmin(
    request: Injective_Tokenfactory_V1beta1_MsgChangeAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse

  @Sendable func setDenomMetadata(
    request: Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse

  @Sendable func updateParams(
    request: Injective_Tokenfactory_V1beta1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Injective_Tokenfactory_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Injective_Tokenfactory_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Injective_Tokenfactory_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Injective_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgCreateDenom>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>(),
        interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? [],
        wrapping: self.createDenom(request:context:)
      )

    case "Mint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgMint>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        wrapping: self.mint(request:context:)
      )

    case "Burn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        wrapping: self.burn(request:context:)
      )

    case "ChangeAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgChangeAdmin>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>(),
        interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? [],
        wrapping: self.changeAdmin(request:context:)
      )

    case "SetDenomMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? [],
        wrapping: self.setDenomMetadata(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Tokenfactory_V1beta1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDenomInterceptors() -> [ServerInterceptor<Injective_Tokenfactory_V1beta1_MsgCreateDenom, Injective_Tokenfactory_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when handling 'mint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintInterceptors() -> [ServerInterceptor<Injective_Tokenfactory_V1beta1_MsgMint, Injective_Tokenfactory_V1beta1_MsgMintResponse>]

  /// - Returns: Interceptors to use when handling 'burn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnInterceptors() -> [ServerInterceptor<Injective_Tokenfactory_V1beta1_MsgBurn, Injective_Tokenfactory_V1beta1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when handling 'changeAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChangeAdminInterceptors() -> [ServerInterceptor<Injective_Tokenfactory_V1beta1_MsgChangeAdmin, Injective_Tokenfactory_V1beta1_MsgChangeAdminResponse>]

  /// - Returns: Interceptors to use when handling 'setDenomMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDenomMetadataInterceptors() -> [ServerInterceptor<Injective_Tokenfactory_V1beta1_MsgSetDenomMetadata, Injective_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Injective_Tokenfactory_V1beta1_MsgUpdateParams, Injective_Tokenfactory_V1beta1_MsgUpdateParamsResponse>]
}

internal enum Injective_Tokenfactory_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "injective.tokenfactory.v1beta1.Msg",
    methods: [
      Injective_Tokenfactory_V1beta1_MsgServerMetadata.Methods.createDenom,
      Injective_Tokenfactory_V1beta1_MsgServerMetadata.Methods.mint,
      Injective_Tokenfactory_V1beta1_MsgServerMetadata.Methods.burn,
      Injective_Tokenfactory_V1beta1_MsgServerMetadata.Methods.changeAdmin,
      Injective_Tokenfactory_V1beta1_MsgServerMetadata.Methods.setDenomMetadata,
      Injective_Tokenfactory_V1beta1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/injective.tokenfactory.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/injective.tokenfactory.v1beta1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/injective.tokenfactory.v1beta1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let changeAdmin = GRPCMethodDescriptor(
      name: "ChangeAdmin",
      path: "/injective.tokenfactory.v1beta1.Msg/ChangeAdmin",
      type: GRPCCallType.unary
    )

    internal static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/injective.tokenfactory.v1beta1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/injective.tokenfactory.v1beta1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
