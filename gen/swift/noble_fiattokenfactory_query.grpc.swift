//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: noble/fiattokenfactory/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Noble_Fiattokenfactory_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Noble_Fiattokenfactory_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Noble_Fiattokenfactory_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryParamsRequest, Noble_Fiattokenfactory_QueryParamsResponse>

  func blacklisted(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetBlacklistedRequest, Noble_Fiattokenfactory_QueryGetBlacklistedResponse>

  func blacklistedAll(
    _ request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryAllBlacklistedRequest, Noble_Fiattokenfactory_QueryAllBlacklistedResponse>

  func paused(
    _ request: Noble_Fiattokenfactory_QueryGetPausedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetPausedRequest, Noble_Fiattokenfactory_QueryGetPausedResponse>

  func masterMinter(
    _ request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMasterMinterRequest, Noble_Fiattokenfactory_QueryGetMasterMinterResponse>

  func minters(
    _ request: Noble_Fiattokenfactory_QueryGetMintersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMintersRequest, Noble_Fiattokenfactory_QueryGetMintersResponse>

  func mintersAll(
    _ request: Noble_Fiattokenfactory_QueryAllMintersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryAllMintersRequest, Noble_Fiattokenfactory_QueryAllMintersResponse>

  func pauser(
    _ request: Noble_Fiattokenfactory_QueryGetPauserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetPauserRequest, Noble_Fiattokenfactory_QueryGetPauserResponse>

  func blacklister(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetBlacklisterRequest, Noble_Fiattokenfactory_QueryGetBlacklisterResponse>

  func owner(
    _ request: Noble_Fiattokenfactory_QueryGetOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetOwnerRequest, Noble_Fiattokenfactory_QueryGetOwnerResponse>

  func minterController(
    _ request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMinterControllerRequest, Noble_Fiattokenfactory_QueryGetMinterControllerResponse>

  func minterControllerAll(
    _ request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryAllMinterControllerRequest, Noble_Fiattokenfactory_QueryAllMinterControllerResponse>

  func mintingDenom(
    _ request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMintingDenomRequest, Noble_Fiattokenfactory_QueryGetMintingDenomResponse>
}

extension Noble_Fiattokenfactory_QueryClientProtocol {
  internal var serviceName: String {
    return "noble.fiattokenfactory.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Noble_Fiattokenfactory_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryParamsRequest, Noble_Fiattokenfactory_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a Blacklisted by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Blacklisted.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blacklisted(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetBlacklistedRequest, Noble_Fiattokenfactory_QueryGetBlacklistedResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklisted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistedInterceptors() ?? []
    )
  }

  /// Queries a list of Blacklisted items.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlacklistedAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blacklistedAll(
    _ request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryAllBlacklistedRequest, Noble_Fiattokenfactory_QueryAllBlacklistedResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklistedAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistedAllInterceptors() ?? []
    )
  }

  /// Queries a Paused by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Paused.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paused(
    _ request: Noble_Fiattokenfactory_QueryGetPausedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetPausedRequest, Noble_Fiattokenfactory_QueryGetPausedResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.paused.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePausedInterceptors() ?? []
    )
  }

  /// Queries a MasterMinter by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to MasterMinter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func masterMinter(
    _ request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMasterMinterRequest, Noble_Fiattokenfactory_QueryGetMasterMinterResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.masterMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMasterMinterInterceptors() ?? []
    )
  }

  /// Queries a Minters by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Minters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func minters(
    _ request: Noble_Fiattokenfactory_QueryGetMintersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMintersRequest, Noble_Fiattokenfactory_QueryGetMintersResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintersInterceptors() ?? []
    )
  }

  /// Queries a list of Minters items.
  ///
  /// - Parameters:
  ///   - request: Request to send to MintersAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintersAll(
    _ request: Noble_Fiattokenfactory_QueryAllMintersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryAllMintersRequest, Noble_Fiattokenfactory_QueryAllMintersResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintersAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintersAllInterceptors() ?? []
    )
  }

  /// Queries a Pauser by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pauser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pauser(
    _ request: Noble_Fiattokenfactory_QueryGetPauserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetPauserRequest, Noble_Fiattokenfactory_QueryGetPauserResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.pauser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauserInterceptors() ?? []
    )
  }

  /// Queries a Blacklister by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Blacklister.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blacklister(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetBlacklisterRequest, Noble_Fiattokenfactory_QueryGetBlacklisterResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklister.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklisterInterceptors() ?? []
    )
  }

  /// Queries a Owner by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Owner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func owner(
    _ request: Noble_Fiattokenfactory_QueryGetOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetOwnerRequest, Noble_Fiattokenfactory_QueryGetOwnerResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  /// Queries a MinterController by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to MinterController.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func minterController(
    _ request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMinterControllerRequest, Noble_Fiattokenfactory_QueryGetMinterControllerResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinterControllerInterceptors() ?? []
    )
  }

  /// Queries a list of MinterController items.
  ///
  /// - Parameters:
  ///   - request: Request to send to MinterControllerAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func minterControllerAll(
    _ request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryAllMinterControllerRequest, Noble_Fiattokenfactory_QueryAllMinterControllerResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterControllerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinterControllerAllInterceptors() ?? []
    )
  }

  /// Queries a MintingDenom by index.
  ///
  /// - Parameters:
  ///   - request: Request to send to MintingDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintingDenom(
    _ request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Noble_Fiattokenfactory_QueryGetMintingDenomRequest, Noble_Fiattokenfactory_QueryGetMintingDenomResponse> {
    return self.makeUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintingDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintingDenomInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Noble_Fiattokenfactory_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Noble_Fiattokenfactory_QueryNIOClient")
internal final class Noble_Fiattokenfactory_QueryClient: Noble_Fiattokenfactory_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the noble.fiattokenfactory.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Noble_Fiattokenfactory_QueryNIOClient: Noble_Fiattokenfactory_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the noble.fiattokenfactory.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Noble_Fiattokenfactory_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Noble_Fiattokenfactory_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryParamsRequest, Noble_Fiattokenfactory_QueryParamsResponse>

  func makeBlacklistedCall(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetBlacklistedRequest, Noble_Fiattokenfactory_QueryGetBlacklistedResponse>

  func makeBlacklistedAllCall(
    _ request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryAllBlacklistedRequest, Noble_Fiattokenfactory_QueryAllBlacklistedResponse>

  func makePausedCall(
    _ request: Noble_Fiattokenfactory_QueryGetPausedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetPausedRequest, Noble_Fiattokenfactory_QueryGetPausedResponse>

  func makeMasterMinterCall(
    _ request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMasterMinterRequest, Noble_Fiattokenfactory_QueryGetMasterMinterResponse>

  func makeMintersCall(
    _ request: Noble_Fiattokenfactory_QueryGetMintersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMintersRequest, Noble_Fiattokenfactory_QueryGetMintersResponse>

  func makeMintersAllCall(
    _ request: Noble_Fiattokenfactory_QueryAllMintersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryAllMintersRequest, Noble_Fiattokenfactory_QueryAllMintersResponse>

  func makePauserCall(
    _ request: Noble_Fiattokenfactory_QueryGetPauserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetPauserRequest, Noble_Fiattokenfactory_QueryGetPauserResponse>

  func makeBlacklisterCall(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetBlacklisterRequest, Noble_Fiattokenfactory_QueryGetBlacklisterResponse>

  func makeOwnerCall(
    _ request: Noble_Fiattokenfactory_QueryGetOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetOwnerRequest, Noble_Fiattokenfactory_QueryGetOwnerResponse>

  func makeMinterControllerCall(
    _ request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMinterControllerRequest, Noble_Fiattokenfactory_QueryGetMinterControllerResponse>

  func makeMinterControllerAllCall(
    _ request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryAllMinterControllerRequest, Noble_Fiattokenfactory_QueryAllMinterControllerResponse>

  func makeMintingDenomCall(
    _ request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMintingDenomRequest, Noble_Fiattokenfactory_QueryGetMintingDenomResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Noble_Fiattokenfactory_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Noble_Fiattokenfactory_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Noble_Fiattokenfactory_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryParamsRequest, Noble_Fiattokenfactory_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeBlacklistedCall(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetBlacklistedRequest, Noble_Fiattokenfactory_QueryGetBlacklistedResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklisted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistedInterceptors() ?? []
    )
  }

  internal func makeBlacklistedAllCall(
    _ request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryAllBlacklistedRequest, Noble_Fiattokenfactory_QueryAllBlacklistedResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklistedAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistedAllInterceptors() ?? []
    )
  }

  internal func makePausedCall(
    _ request: Noble_Fiattokenfactory_QueryGetPausedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetPausedRequest, Noble_Fiattokenfactory_QueryGetPausedResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.paused.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePausedInterceptors() ?? []
    )
  }

  internal func makeMasterMinterCall(
    _ request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMasterMinterRequest, Noble_Fiattokenfactory_QueryGetMasterMinterResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.masterMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMasterMinterInterceptors() ?? []
    )
  }

  internal func makeMintersCall(
    _ request: Noble_Fiattokenfactory_QueryGetMintersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMintersRequest, Noble_Fiattokenfactory_QueryGetMintersResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintersInterceptors() ?? []
    )
  }

  internal func makeMintersAllCall(
    _ request: Noble_Fiattokenfactory_QueryAllMintersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryAllMintersRequest, Noble_Fiattokenfactory_QueryAllMintersResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintersAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintersAllInterceptors() ?? []
    )
  }

  internal func makePauserCall(
    _ request: Noble_Fiattokenfactory_QueryGetPauserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetPauserRequest, Noble_Fiattokenfactory_QueryGetPauserResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.pauser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauserInterceptors() ?? []
    )
  }

  internal func makeBlacklisterCall(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetBlacklisterRequest, Noble_Fiattokenfactory_QueryGetBlacklisterResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklister.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklisterInterceptors() ?? []
    )
  }

  internal func makeOwnerCall(
    _ request: Noble_Fiattokenfactory_QueryGetOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetOwnerRequest, Noble_Fiattokenfactory_QueryGetOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  internal func makeMinterControllerCall(
    _ request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMinterControllerRequest, Noble_Fiattokenfactory_QueryGetMinterControllerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinterControllerInterceptors() ?? []
    )
  }

  internal func makeMinterControllerAllCall(
    _ request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryAllMinterControllerRequest, Noble_Fiattokenfactory_QueryAllMinterControllerResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterControllerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinterControllerAllInterceptors() ?? []
    )
  }

  internal func makeMintingDenomCall(
    _ request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Noble_Fiattokenfactory_QueryGetMintingDenomRequest, Noble_Fiattokenfactory_QueryGetMintingDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintingDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintingDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Noble_Fiattokenfactory_QueryAsyncClientProtocol {
  internal func params(
    _ request: Noble_Fiattokenfactory_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func blacklisted(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetBlacklistedResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklisted.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistedInterceptors() ?? []
    )
  }

  internal func blacklistedAll(
    _ request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryAllBlacklistedResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklistedAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklistedAllInterceptors() ?? []
    )
  }

  internal func paused(
    _ request: Noble_Fiattokenfactory_QueryGetPausedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetPausedResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.paused.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePausedInterceptors() ?? []
    )
  }

  internal func masterMinter(
    _ request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetMasterMinterResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.masterMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMasterMinterInterceptors() ?? []
    )
  }

  internal func minters(
    _ request: Noble_Fiattokenfactory_QueryGetMintersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetMintersResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintersInterceptors() ?? []
    )
  }

  internal func mintersAll(
    _ request: Noble_Fiattokenfactory_QueryAllMintersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryAllMintersResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintersAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintersAllInterceptors() ?? []
    )
  }

  internal func pauser(
    _ request: Noble_Fiattokenfactory_QueryGetPauserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetPauserResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.pauser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauserInterceptors() ?? []
    )
  }

  internal func blacklister(
    _ request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetBlacklisterResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklister.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlacklisterInterceptors() ?? []
    )
  }

  internal func owner(
    _ request: Noble_Fiattokenfactory_QueryGetOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  internal func minterController(
    _ request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetMinterControllerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterController.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinterControllerInterceptors() ?? []
    )
  }

  internal func minterControllerAll(
    _ request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryAllMinterControllerResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterControllerAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinterControllerAllInterceptors() ?? []
    )
  }

  internal func mintingDenom(
    _ request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Noble_Fiattokenfactory_QueryGetMintingDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintingDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintingDenomInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Noble_Fiattokenfactory_QueryAsyncClient: Noble_Fiattokenfactory_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Noble_Fiattokenfactory_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryParamsRequest, Noble_Fiattokenfactory_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'blacklisted'.
  func makeBlacklistedInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetBlacklistedRequest, Noble_Fiattokenfactory_QueryGetBlacklistedResponse>]

  /// - Returns: Interceptors to use when invoking 'blacklistedAll'.
  func makeBlacklistedAllInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryAllBlacklistedRequest, Noble_Fiattokenfactory_QueryAllBlacklistedResponse>]

  /// - Returns: Interceptors to use when invoking 'paused'.
  func makePausedInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetPausedRequest, Noble_Fiattokenfactory_QueryGetPausedResponse>]

  /// - Returns: Interceptors to use when invoking 'masterMinter'.
  func makeMasterMinterInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetMasterMinterRequest, Noble_Fiattokenfactory_QueryGetMasterMinterResponse>]

  /// - Returns: Interceptors to use when invoking 'minters'.
  func makeMintersInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetMintersRequest, Noble_Fiattokenfactory_QueryGetMintersResponse>]

  /// - Returns: Interceptors to use when invoking 'mintersAll'.
  func makeMintersAllInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryAllMintersRequest, Noble_Fiattokenfactory_QueryAllMintersResponse>]

  /// - Returns: Interceptors to use when invoking 'pauser'.
  func makePauserInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetPauserRequest, Noble_Fiattokenfactory_QueryGetPauserResponse>]

  /// - Returns: Interceptors to use when invoking 'blacklister'.
  func makeBlacklisterInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetBlacklisterRequest, Noble_Fiattokenfactory_QueryGetBlacklisterResponse>]

  /// - Returns: Interceptors to use when invoking 'owner'.
  func makeOwnerInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetOwnerRequest, Noble_Fiattokenfactory_QueryGetOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'minterController'.
  func makeMinterControllerInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetMinterControllerRequest, Noble_Fiattokenfactory_QueryGetMinterControllerResponse>]

  /// - Returns: Interceptors to use when invoking 'minterControllerAll'.
  func makeMinterControllerAllInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryAllMinterControllerRequest, Noble_Fiattokenfactory_QueryAllMinterControllerResponse>]

  /// - Returns: Interceptors to use when invoking 'mintingDenom'.
  func makeMintingDenomInterceptors() -> [ClientInterceptor<Noble_Fiattokenfactory_QueryGetMintingDenomRequest, Noble_Fiattokenfactory_QueryGetMintingDenomResponse>]
}

internal enum Noble_Fiattokenfactory_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "noble.fiattokenfactory.Query",
    methods: [
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.params,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklisted,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklistedAll,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.paused,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.masterMinter,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.minters,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintersAll,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.pauser,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.blacklister,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.owner,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterController,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.minterControllerAll,
      Noble_Fiattokenfactory_QueryClientMetadata.Methods.mintingDenom,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/noble.fiattokenfactory.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let blacklisted = GRPCMethodDescriptor(
      name: "Blacklisted",
      path: "/noble.fiattokenfactory.Query/Blacklisted",
      type: GRPCCallType.unary
    )

    internal static let blacklistedAll = GRPCMethodDescriptor(
      name: "BlacklistedAll",
      path: "/noble.fiattokenfactory.Query/BlacklistedAll",
      type: GRPCCallType.unary
    )

    internal static let paused = GRPCMethodDescriptor(
      name: "Paused",
      path: "/noble.fiattokenfactory.Query/Paused",
      type: GRPCCallType.unary
    )

    internal static let masterMinter = GRPCMethodDescriptor(
      name: "MasterMinter",
      path: "/noble.fiattokenfactory.Query/MasterMinter",
      type: GRPCCallType.unary
    )

    internal static let minters = GRPCMethodDescriptor(
      name: "Minters",
      path: "/noble.fiattokenfactory.Query/Minters",
      type: GRPCCallType.unary
    )

    internal static let mintersAll = GRPCMethodDescriptor(
      name: "MintersAll",
      path: "/noble.fiattokenfactory.Query/MintersAll",
      type: GRPCCallType.unary
    )

    internal static let pauser = GRPCMethodDescriptor(
      name: "Pauser",
      path: "/noble.fiattokenfactory.Query/Pauser",
      type: GRPCCallType.unary
    )

    internal static let blacklister = GRPCMethodDescriptor(
      name: "Blacklister",
      path: "/noble.fiattokenfactory.Query/Blacklister",
      type: GRPCCallType.unary
    )

    internal static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/noble.fiattokenfactory.Query/Owner",
      type: GRPCCallType.unary
    )

    internal static let minterController = GRPCMethodDescriptor(
      name: "MinterController",
      path: "/noble.fiattokenfactory.Query/MinterController",
      type: GRPCCallType.unary
    )

    internal static let minterControllerAll = GRPCMethodDescriptor(
      name: "MinterControllerAll",
      path: "/noble.fiattokenfactory.Query/MinterControllerAll",
      type: GRPCCallType.unary
    )

    internal static let mintingDenom = GRPCMethodDescriptor(
      name: "MintingDenom",
      path: "/noble.fiattokenfactory.Query/MintingDenom",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Noble_Fiattokenfactory_QueryProvider: CallHandlerProvider {
  var interceptors: Noble_Fiattokenfactory_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Noble_Fiattokenfactory_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryParamsResponse>

  /// Queries a Blacklisted by index.
  func blacklisted(request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetBlacklistedResponse>

  /// Queries a list of Blacklisted items.
  func blacklistedAll(request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryAllBlacklistedResponse>

  /// Queries a Paused by index.
  func paused(request: Noble_Fiattokenfactory_QueryGetPausedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetPausedResponse>

  /// Queries a MasterMinter by index.
  func masterMinter(request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetMasterMinterResponse>

  /// Queries a Minters by index.
  func minters(request: Noble_Fiattokenfactory_QueryGetMintersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetMintersResponse>

  /// Queries a list of Minters items.
  func mintersAll(request: Noble_Fiattokenfactory_QueryAllMintersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryAllMintersResponse>

  /// Queries a Pauser by index.
  func pauser(request: Noble_Fiattokenfactory_QueryGetPauserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetPauserResponse>

  /// Queries a Blacklister by index.
  func blacklister(request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetBlacklisterResponse>

  /// Queries a Owner by index.
  func owner(request: Noble_Fiattokenfactory_QueryGetOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetOwnerResponse>

  /// Queries a MinterController by index.
  func minterController(request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetMinterControllerResponse>

  /// Queries a list of MinterController items.
  func minterControllerAll(request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryAllMinterControllerResponse>

  /// Queries a MintingDenom by index.
  func mintingDenom(request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Noble_Fiattokenfactory_QueryGetMintingDenomResponse>
}

extension Noble_Fiattokenfactory_QueryProvider {
  internal var serviceName: Substring {
    return Noble_Fiattokenfactory_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Blacklisted":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetBlacklistedRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetBlacklistedResponse>(),
        interceptors: self.interceptors?.makeBlacklistedInterceptors() ?? [],
        userFunction: self.blacklisted(request:context:)
      )

    case "BlacklistedAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryAllBlacklistedRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryAllBlacklistedResponse>(),
        interceptors: self.interceptors?.makeBlacklistedAllInterceptors() ?? [],
        userFunction: self.blacklistedAll(request:context:)
      )

    case "Paused":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetPausedRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetPausedResponse>(),
        interceptors: self.interceptors?.makePausedInterceptors() ?? [],
        userFunction: self.paused(request:context:)
      )

    case "MasterMinter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMasterMinterRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMasterMinterResponse>(),
        interceptors: self.interceptors?.makeMasterMinterInterceptors() ?? [],
        userFunction: self.masterMinter(request:context:)
      )

    case "Minters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMintersRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMintersResponse>(),
        interceptors: self.interceptors?.makeMintersInterceptors() ?? [],
        userFunction: self.minters(request:context:)
      )

    case "MintersAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryAllMintersRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryAllMintersResponse>(),
        interceptors: self.interceptors?.makeMintersAllInterceptors() ?? [],
        userFunction: self.mintersAll(request:context:)
      )

    case "Pauser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetPauserRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetPauserResponse>(),
        interceptors: self.interceptors?.makePauserInterceptors() ?? [],
        userFunction: self.pauser(request:context:)
      )

    case "Blacklister":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetBlacklisterRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetBlacklisterResponse>(),
        interceptors: self.interceptors?.makeBlacklisterInterceptors() ?? [],
        userFunction: self.blacklister(request:context:)
      )

    case "Owner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetOwnerResponse>(),
        interceptors: self.interceptors?.makeOwnerInterceptors() ?? [],
        userFunction: self.owner(request:context:)
      )

    case "MinterController":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMinterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMinterControllerResponse>(),
        interceptors: self.interceptors?.makeMinterControllerInterceptors() ?? [],
        userFunction: self.minterController(request:context:)
      )

    case "MinterControllerAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryAllMinterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryAllMinterControllerResponse>(),
        interceptors: self.interceptors?.makeMinterControllerAllInterceptors() ?? [],
        userFunction: self.minterControllerAll(request:context:)
      )

    case "MintingDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMintingDenomRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMintingDenomResponse>(),
        interceptors: self.interceptors?.makeMintingDenomInterceptors() ?? [],
        userFunction: self.mintingDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Noble_Fiattokenfactory_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Noble_Fiattokenfactory_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Noble_Fiattokenfactory_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryParamsResponse

  /// Queries a Blacklisted by index.
  @Sendable func blacklisted(
    request: Noble_Fiattokenfactory_QueryGetBlacklistedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetBlacklistedResponse

  /// Queries a list of Blacklisted items.
  @Sendable func blacklistedAll(
    request: Noble_Fiattokenfactory_QueryAllBlacklistedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryAllBlacklistedResponse

  /// Queries a Paused by index.
  @Sendable func paused(
    request: Noble_Fiattokenfactory_QueryGetPausedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetPausedResponse

  /// Queries a MasterMinter by index.
  @Sendable func masterMinter(
    request: Noble_Fiattokenfactory_QueryGetMasterMinterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetMasterMinterResponse

  /// Queries a Minters by index.
  @Sendable func minters(
    request: Noble_Fiattokenfactory_QueryGetMintersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetMintersResponse

  /// Queries a list of Minters items.
  @Sendable func mintersAll(
    request: Noble_Fiattokenfactory_QueryAllMintersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryAllMintersResponse

  /// Queries a Pauser by index.
  @Sendable func pauser(
    request: Noble_Fiattokenfactory_QueryGetPauserRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetPauserResponse

  /// Queries a Blacklister by index.
  @Sendable func blacklister(
    request: Noble_Fiattokenfactory_QueryGetBlacklisterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetBlacklisterResponse

  /// Queries a Owner by index.
  @Sendable func owner(
    request: Noble_Fiattokenfactory_QueryGetOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetOwnerResponse

  /// Queries a MinterController by index.
  @Sendable func minterController(
    request: Noble_Fiattokenfactory_QueryGetMinterControllerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetMinterControllerResponse

  /// Queries a list of MinterController items.
  @Sendable func minterControllerAll(
    request: Noble_Fiattokenfactory_QueryAllMinterControllerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryAllMinterControllerResponse

  /// Queries a MintingDenom by index.
  @Sendable func mintingDenom(
    request: Noble_Fiattokenfactory_QueryGetMintingDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Noble_Fiattokenfactory_QueryGetMintingDenomResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Noble_Fiattokenfactory_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Noble_Fiattokenfactory_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Noble_Fiattokenfactory_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Noble_Fiattokenfactory_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Blacklisted":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetBlacklistedRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetBlacklistedResponse>(),
        interceptors: self.interceptors?.makeBlacklistedInterceptors() ?? [],
        wrapping: self.blacklisted(request:context:)
      )

    case "BlacklistedAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryAllBlacklistedRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryAllBlacklistedResponse>(),
        interceptors: self.interceptors?.makeBlacklistedAllInterceptors() ?? [],
        wrapping: self.blacklistedAll(request:context:)
      )

    case "Paused":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetPausedRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetPausedResponse>(),
        interceptors: self.interceptors?.makePausedInterceptors() ?? [],
        wrapping: self.paused(request:context:)
      )

    case "MasterMinter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMasterMinterRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMasterMinterResponse>(),
        interceptors: self.interceptors?.makeMasterMinterInterceptors() ?? [],
        wrapping: self.masterMinter(request:context:)
      )

    case "Minters":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMintersRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMintersResponse>(),
        interceptors: self.interceptors?.makeMintersInterceptors() ?? [],
        wrapping: self.minters(request:context:)
      )

    case "MintersAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryAllMintersRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryAllMintersResponse>(),
        interceptors: self.interceptors?.makeMintersAllInterceptors() ?? [],
        wrapping: self.mintersAll(request:context:)
      )

    case "Pauser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetPauserRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetPauserResponse>(),
        interceptors: self.interceptors?.makePauserInterceptors() ?? [],
        wrapping: self.pauser(request:context:)
      )

    case "Blacklister":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetBlacklisterRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetBlacklisterResponse>(),
        interceptors: self.interceptors?.makeBlacklisterInterceptors() ?? [],
        wrapping: self.blacklister(request:context:)
      )

    case "Owner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetOwnerResponse>(),
        interceptors: self.interceptors?.makeOwnerInterceptors() ?? [],
        wrapping: self.owner(request:context:)
      )

    case "MinterController":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMinterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMinterControllerResponse>(),
        interceptors: self.interceptors?.makeMinterControllerInterceptors() ?? [],
        wrapping: self.minterController(request:context:)
      )

    case "MinterControllerAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryAllMinterControllerRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryAllMinterControllerResponse>(),
        interceptors: self.interceptors?.makeMinterControllerAllInterceptors() ?? [],
        wrapping: self.minterControllerAll(request:context:)
      )

    case "MintingDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Noble_Fiattokenfactory_QueryGetMintingDenomRequest>(),
        responseSerializer: ProtobufSerializer<Noble_Fiattokenfactory_QueryGetMintingDenomResponse>(),
        interceptors: self.interceptors?.makeMintingDenomInterceptors() ?? [],
        wrapping: self.mintingDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Noble_Fiattokenfactory_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryParamsRequest, Noble_Fiattokenfactory_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'blacklisted'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlacklistedInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetBlacklistedRequest, Noble_Fiattokenfactory_QueryGetBlacklistedResponse>]

  /// - Returns: Interceptors to use when handling 'blacklistedAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlacklistedAllInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryAllBlacklistedRequest, Noble_Fiattokenfactory_QueryAllBlacklistedResponse>]

  /// - Returns: Interceptors to use when handling 'paused'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePausedInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetPausedRequest, Noble_Fiattokenfactory_QueryGetPausedResponse>]

  /// - Returns: Interceptors to use when handling 'masterMinter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMasterMinterInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetMasterMinterRequest, Noble_Fiattokenfactory_QueryGetMasterMinterResponse>]

  /// - Returns: Interceptors to use when handling 'minters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintersInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetMintersRequest, Noble_Fiattokenfactory_QueryGetMintersResponse>]

  /// - Returns: Interceptors to use when handling 'mintersAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintersAllInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryAllMintersRequest, Noble_Fiattokenfactory_QueryAllMintersResponse>]

  /// - Returns: Interceptors to use when handling 'pauser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauserInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetPauserRequest, Noble_Fiattokenfactory_QueryGetPauserResponse>]

  /// - Returns: Interceptors to use when handling 'blacklister'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlacklisterInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetBlacklisterRequest, Noble_Fiattokenfactory_QueryGetBlacklisterResponse>]

  /// - Returns: Interceptors to use when handling 'owner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetOwnerRequest, Noble_Fiattokenfactory_QueryGetOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'minterController'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMinterControllerInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetMinterControllerRequest, Noble_Fiattokenfactory_QueryGetMinterControllerResponse>]

  /// - Returns: Interceptors to use when handling 'minterControllerAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMinterControllerAllInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryAllMinterControllerRequest, Noble_Fiattokenfactory_QueryAllMinterControllerResponse>]

  /// - Returns: Interceptors to use when handling 'mintingDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintingDenomInterceptors() -> [ServerInterceptor<Noble_Fiattokenfactory_QueryGetMintingDenomRequest, Noble_Fiattokenfactory_QueryGetMintingDenomResponse>]
}

internal enum Noble_Fiattokenfactory_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "noble.fiattokenfactory.Query",
    methods: [
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.params,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.blacklisted,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.blacklistedAll,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.paused,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.masterMinter,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.minters,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.mintersAll,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.pauser,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.blacklister,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.owner,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.minterController,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.minterControllerAll,
      Noble_Fiattokenfactory_QueryServerMetadata.Methods.mintingDenom,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/noble.fiattokenfactory.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let blacklisted = GRPCMethodDescriptor(
      name: "Blacklisted",
      path: "/noble.fiattokenfactory.Query/Blacklisted",
      type: GRPCCallType.unary
    )

    internal static let blacklistedAll = GRPCMethodDescriptor(
      name: "BlacklistedAll",
      path: "/noble.fiattokenfactory.Query/BlacklistedAll",
      type: GRPCCallType.unary
    )

    internal static let paused = GRPCMethodDescriptor(
      name: "Paused",
      path: "/noble.fiattokenfactory.Query/Paused",
      type: GRPCCallType.unary
    )

    internal static let masterMinter = GRPCMethodDescriptor(
      name: "MasterMinter",
      path: "/noble.fiattokenfactory.Query/MasterMinter",
      type: GRPCCallType.unary
    )

    internal static let minters = GRPCMethodDescriptor(
      name: "Minters",
      path: "/noble.fiattokenfactory.Query/Minters",
      type: GRPCCallType.unary
    )

    internal static let mintersAll = GRPCMethodDescriptor(
      name: "MintersAll",
      path: "/noble.fiattokenfactory.Query/MintersAll",
      type: GRPCCallType.unary
    )

    internal static let pauser = GRPCMethodDescriptor(
      name: "Pauser",
      path: "/noble.fiattokenfactory.Query/Pauser",
      type: GRPCCallType.unary
    )

    internal static let blacklister = GRPCMethodDescriptor(
      name: "Blacklister",
      path: "/noble.fiattokenfactory.Query/Blacklister",
      type: GRPCCallType.unary
    )

    internal static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/noble.fiattokenfactory.Query/Owner",
      type: GRPCCallType.unary
    )

    internal static let minterController = GRPCMethodDescriptor(
      name: "MinterController",
      path: "/noble.fiattokenfactory.Query/MinterController",
      type: GRPCCallType.unary
    )

    internal static let minterControllerAll = GRPCMethodDescriptor(
      name: "MinterControllerAll",
      path: "/noble.fiattokenfactory.Query/MinterControllerAll",
      type: GRPCCallType.unary
    )

    internal static let mintingDenom = GRPCMethodDescriptor(
      name: "MintingDenom",
      path: "/noble.fiattokenfactory.Query/MintingDenom",
      type: GRPCCallType.unary
    )
  }
}
