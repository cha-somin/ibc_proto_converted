// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/marketmaker/v1beta1/marketmaker.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the set of params for the marketmaker module.
struct Crescent_Marketmaker_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address containing the funds used to distribute incentives
  var incentiveBudgetAddress: String = String()

  /// The amount of deposit to be applied to the market maker, which is calculated per pair and is refunded when the
  /// market maker included or rejected through the MarketMaker Proposal
  var depositAmount: [Cosmos_Base_V1beta1_Coin] = []

  /// Common variables used in market maker scoring system
  var common: Crescent_Marketmaker_V1beta1_Common {
    get {return _common ?? Crescent_Marketmaker_V1beta1_Common()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {self._common = nil}

  /// Include the pairs that are incentive target pairs and the variables used in market maker scoring system
  var incentivePairs: [Crescent_Marketmaker_V1beta1_IncentivePair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _common: Crescent_Marketmaker_V1beta1_Common? = nil
}

struct Crescent_Marketmaker_V1beta1_Common {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Minimum ratio to maintain the tick order
  var minOpenRatio: String = String()

  /// Minimum ratio of open amount to MinDepth
  var minOpenDepthRatio: String = String()

  /// Maximum allowable consecutive blocks of outage
  var maxDowntime: UInt32 = 0

  /// Maximum allowable sum of blocks in an hour
  var maxTotalDowntime: UInt32 = 0

  /// Minimum value of LiveHour to achieve LiveDay
  var minHours: UInt32 = 0

  /// Minimum value of LiveDay to maintain MM eligibility
  var minDays: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Crescent_Marketmaker_V1beta1_IncentivePair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Pair id of liquidity module
  var pairID: UInt64 = 0

  /// Time the pair variables start to be applied to the scoring system
  var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  mutating func clearUpdateTime() {self._updateTime = nil}

  /// Incentive weights for each pair
  var incentiveWeight: String = String()

  /// Maximum allowable spread between bid and ask
  var maxSpread: String = String()

  /// Minimum allowable price difference of high and low on both side of orders
  var minWidth: String = String()

  /// Minimum allowable order depth on each side
  var minDepth: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Store the total amount of incentives distributed through `MarketMakerProposal`, and it can be claimed at once through
/// `MsgClaimIncentives`
struct Crescent_Marketmaker_V1beta1_Incentive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var claimable: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Market maker object created by applying, if included through `MarketMakerProposal`, eligible becomes true and is
/// deleted if rejected or excluded
struct Crescent_Marketmaker_V1beta1_MarketMaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var pairID: UInt64 = 0

  var eligible: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// stores apply deposit amount for a future refund
struct Crescent_Marketmaker_V1beta1_Deposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Crescent_Marketmaker_V1beta1_DepositRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var pairID: UInt64 = 0

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Crescent_Marketmaker_V1beta1_Params: @unchecked Sendable {}
extension Crescent_Marketmaker_V1beta1_Common: @unchecked Sendable {}
extension Crescent_Marketmaker_V1beta1_IncentivePair: @unchecked Sendable {}
extension Crescent_Marketmaker_V1beta1_Incentive: @unchecked Sendable {}
extension Crescent_Marketmaker_V1beta1_MarketMaker: @unchecked Sendable {}
extension Crescent_Marketmaker_V1beta1_Deposit: @unchecked Sendable {}
extension Crescent_Marketmaker_V1beta1_DepositRecord: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.marketmaker.v1beta1"

extension Crescent_Marketmaker_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "incentive_budget_address"),
    2: .standard(proto: "deposit_amount"),
    3: .same(proto: "common"),
    4: .standard(proto: "incentive_pairs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.incentiveBudgetAddress) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.depositAmount) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.incentivePairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.incentiveBudgetAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.incentiveBudgetAddress, fieldNumber: 1)
    }
    if !self.depositAmount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.depositAmount, fieldNumber: 2)
    }
    try { if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.incentivePairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.incentivePairs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_Params, rhs: Crescent_Marketmaker_V1beta1_Params) -> Bool {
    if lhs.incentiveBudgetAddress != rhs.incentiveBudgetAddress {return false}
    if lhs.depositAmount != rhs.depositAmount {return false}
    if lhs._common != rhs._common {return false}
    if lhs.incentivePairs != rhs.incentivePairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Marketmaker_V1beta1_Common: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Common"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_open_ratio"),
    2: .standard(proto: "min_open_depth_ratio"),
    3: .standard(proto: "max_downtime"),
    4: .standard(proto: "max_total_downtime"),
    5: .standard(proto: "min_hours"),
    6: .standard(proto: "min_days"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.minOpenRatio) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.minOpenDepthRatio) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.maxDowntime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.maxTotalDowntime) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.minHours) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.minDays) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.minOpenRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.minOpenRatio, fieldNumber: 1)
    }
    if !self.minOpenDepthRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.minOpenDepthRatio, fieldNumber: 2)
    }
    if self.maxDowntime != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxDowntime, fieldNumber: 3)
    }
    if self.maxTotalDowntime != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxTotalDowntime, fieldNumber: 4)
    }
    if self.minHours != 0 {
      try visitor.visitSingularUInt32Field(value: self.minHours, fieldNumber: 5)
    }
    if self.minDays != 0 {
      try visitor.visitSingularUInt32Field(value: self.minDays, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_Common, rhs: Crescent_Marketmaker_V1beta1_Common) -> Bool {
    if lhs.minOpenRatio != rhs.minOpenRatio {return false}
    if lhs.minOpenDepthRatio != rhs.minOpenDepthRatio {return false}
    if lhs.maxDowntime != rhs.maxDowntime {return false}
    if lhs.maxTotalDowntime != rhs.maxTotalDowntime {return false}
    if lhs.minHours != rhs.minHours {return false}
    if lhs.minDays != rhs.minDays {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Marketmaker_V1beta1_IncentivePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IncentivePair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pair_id"),
    2: .standard(proto: "update_time"),
    3: .standard(proto: "incentive_weight"),
    4: .standard(proto: "max_spread"),
    5: .standard(proto: "min_width"),
    6: .standard(proto: "min_depth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.incentiveWeight) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.maxSpread) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.minWidth) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.minDepth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 1)
    }
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.incentiveWeight.isEmpty {
      try visitor.visitSingularStringField(value: self.incentiveWeight, fieldNumber: 3)
    }
    if !self.maxSpread.isEmpty {
      try visitor.visitSingularStringField(value: self.maxSpread, fieldNumber: 4)
    }
    if !self.minWidth.isEmpty {
      try visitor.visitSingularStringField(value: self.minWidth, fieldNumber: 5)
    }
    if !self.minDepth.isEmpty {
      try visitor.visitSingularStringField(value: self.minDepth, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_IncentivePair, rhs: Crescent_Marketmaker_V1beta1_IncentivePair) -> Bool {
    if lhs.pairID != rhs.pairID {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.incentiveWeight != rhs.incentiveWeight {return false}
    if lhs.maxSpread != rhs.maxSpread {return false}
    if lhs.minWidth != rhs.minWidth {return false}
    if lhs.minDepth != rhs.minDepth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Marketmaker_V1beta1_Incentive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Incentive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "claimable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.claimable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.claimable.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimable, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_Incentive, rhs: Crescent_Marketmaker_V1beta1_Incentive) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.claimable != rhs.claimable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Marketmaker_V1beta1_MarketMaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MarketMaker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "pair_id"),
    3: .same(proto: "eligible"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.eligible) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 2)
    }
    if self.eligible != false {
      try visitor.visitSingularBoolField(value: self.eligible, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_MarketMaker, rhs: Crescent_Marketmaker_V1beta1_MarketMaker) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.eligible != rhs.eligible {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Marketmaker_V1beta1_Deposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_Deposit, rhs: Crescent_Marketmaker_V1beta1_Deposit) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Marketmaker_V1beta1_DepositRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DepositRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "pair_id"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.pairID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.pairID != 0 {
      try visitor.visitSingularUInt64Field(value: self.pairID, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Marketmaker_V1beta1_DepositRecord, rhs: Crescent_Marketmaker_V1beta1_DepositRecord) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.pairID != rhs.pairID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
