//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/checkpointing/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Checkpointing_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Checkpointing_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? { get }

  func rawCheckpointList(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>

  func rawCheckpoint(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointRequest, Babylon_Checkpointing_V1_QueryRawCheckpointResponse>

  func rawCheckpoints(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>

  func blsPublicKeyList(
    _ request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>

  func epochStatus(
    _ request: Babylon_Checkpointing_V1_QueryEpochStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryEpochStatusRequest, Babylon_Checkpointing_V1_QueryEpochStatusResponse>

  func recentEpochStatusCount(
    _ request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>

  func lastCheckpointWithStatus(
    _ request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>
}

extension Babylon_Checkpointing_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.checkpointing.v1.Query"
  }

  /// RawCheckpointList queries all checkpoints that match the given status.
  ///
  /// - Parameters:
  ///   - request: Request to send to RawCheckpointList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rawCheckpointList(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, Babylon_Checkpointing_V1_QueryRawCheckpointListResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpointList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointListInterceptors() ?? []
    )
  }

  /// RawCheckpoint queries a checkpoints at a given epoch number.
  ///
  /// - Parameters:
  ///   - request: Request to send to RawCheckpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rawCheckpoint(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointRequest, Babylon_Checkpointing_V1_QueryRawCheckpointResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointInterceptors() ?? []
    )
  }

  /// RawCheckpoints queries checkpoints for a epoch range specified in pagination params.
  ///
  /// - Parameters:
  ///   - request: Request to send to RawCheckpoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rawCheckpoints(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, Babylon_Checkpointing_V1_QueryRawCheckpointsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointsInterceptors() ?? []
    )
  }

  /// BlsPublicKeyList queries a list of bls public keys of the validators at a
  /// given epoch number.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlsPublicKeyList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blsPublicKeyList(
    _ request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.blsPublicKeyList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlsPublicKeyListInterceptors() ?? []
    )
  }

  /// EpochStatus queries the status of the checkpoint at a given epoch
  ///
  /// - Parameters:
  ///   - request: Request to send to EpochStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func epochStatus(
    _ request: Babylon_Checkpointing_V1_QueryEpochStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryEpochStatusRequest, Babylon_Checkpointing_V1_QueryEpochStatusResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.epochStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochStatusInterceptors() ?? []
    )
  }

  /// RecentEpochStatusCount queries the number of epochs with each status in
  /// recent epochs
  ///
  /// - Parameters:
  ///   - request: Request to send to RecentEpochStatusCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recentEpochStatusCount(
    _ request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.recentEpochStatusCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecentEpochStatusCountInterceptors() ?? []
    )
  }

  /// LastCheckpointWithStatus queries the last checkpoint with a given status or
  /// a more matured status
  ///
  /// - Parameters:
  ///   - request: Request to send to LastCheckpointWithStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastCheckpointWithStatus(
    _ request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse> {
    return self.makeUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.lastCheckpointWithStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastCheckpointWithStatusInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Checkpointing_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Checkpointing_V1_QueryNIOClient")
internal final class Babylon_Checkpointing_V1_QueryClient: Babylon_Checkpointing_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.checkpointing.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Checkpointing_V1_QueryNIOClient: Babylon_Checkpointing_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.checkpointing.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Checkpointing_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeRawCheckpointListCall(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>

  func makeRawCheckpointCall(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointRequest, Babylon_Checkpointing_V1_QueryRawCheckpointResponse>

  func makeRawCheckpointsCall(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>

  func makeBlsPublicKeyListCall(
    _ request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>

  func makeEpochStatusCall(
    _ request: Babylon_Checkpointing_V1_QueryEpochStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryEpochStatusRequest, Babylon_Checkpointing_V1_QueryEpochStatusResponse>

  func makeRecentEpochStatusCountCall(
    _ request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>

  func makeLastCheckpointWithStatusCall(
    _ request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Checkpointing_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Checkpointing_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRawCheckpointListCall(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, Babylon_Checkpointing_V1_QueryRawCheckpointListResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpointList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointListInterceptors() ?? []
    )
  }

  internal func makeRawCheckpointCall(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointRequest, Babylon_Checkpointing_V1_QueryRawCheckpointResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointInterceptors() ?? []
    )
  }

  internal func makeRawCheckpointsCall(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, Babylon_Checkpointing_V1_QueryRawCheckpointsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointsInterceptors() ?? []
    )
  }

  internal func makeBlsPublicKeyListCall(
    _ request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.blsPublicKeyList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlsPublicKeyListInterceptors() ?? []
    )
  }

  internal func makeEpochStatusCall(
    _ request: Babylon_Checkpointing_V1_QueryEpochStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryEpochStatusRequest, Babylon_Checkpointing_V1_QueryEpochStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.epochStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochStatusInterceptors() ?? []
    )
  }

  internal func makeRecentEpochStatusCountCall(
    _ request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.recentEpochStatusCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecentEpochStatusCountInterceptors() ?? []
    )
  }

  internal func makeLastCheckpointWithStatusCall(
    _ request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.lastCheckpointWithStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastCheckpointWithStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Checkpointing_V1_QueryAsyncClientProtocol {
  internal func rawCheckpointList(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryRawCheckpointListResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpointList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointListInterceptors() ?? []
    )
  }

  internal func rawCheckpoint(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryRawCheckpointResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointInterceptors() ?? []
    )
  }

  internal func rawCheckpoints(
    _ request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryRawCheckpointsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoints.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawCheckpointsInterceptors() ?? []
    )
  }

  internal func blsPublicKeyList(
    _ request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.blsPublicKeyList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlsPublicKeyListInterceptors() ?? []
    )
  }

  internal func epochStatus(
    _ request: Babylon_Checkpointing_V1_QueryEpochStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryEpochStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.epochStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEpochStatusInterceptors() ?? []
    )
  }

  internal func recentEpochStatusCount(
    _ request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.recentEpochStatusCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecentEpochStatusCountInterceptors() ?? []
    )
  }

  internal func lastCheckpointWithStatus(
    _ request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Checkpointing_V1_QueryClientMetadata.Methods.lastCheckpointWithStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastCheckpointWithStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Checkpointing_V1_QueryAsyncClient: Babylon_Checkpointing_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Checkpointing_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'rawCheckpointList'.
  func makeRawCheckpointListInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>]

  /// - Returns: Interceptors to use when invoking 'rawCheckpoint'.
  func makeRawCheckpointInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryRawCheckpointRequest, Babylon_Checkpointing_V1_QueryRawCheckpointResponse>]

  /// - Returns: Interceptors to use when invoking 'rawCheckpoints'.
  func makeRawCheckpointsInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>]

  /// - Returns: Interceptors to use when invoking 'blsPublicKeyList'.
  func makeBlsPublicKeyListInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>]

  /// - Returns: Interceptors to use when invoking 'epochStatus'.
  func makeEpochStatusInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryEpochStatusRequest, Babylon_Checkpointing_V1_QueryEpochStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'recentEpochStatusCount'.
  func makeRecentEpochStatusCountInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>]

  /// - Returns: Interceptors to use when invoking 'lastCheckpointWithStatus'.
  func makeLastCheckpointWithStatusInterceptors() -> [ClientInterceptor<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>]
}

internal enum Babylon_Checkpointing_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.checkpointing.v1.Query",
    methods: [
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpointList,
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoint,
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.rawCheckpoints,
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.blsPublicKeyList,
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.epochStatus,
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.recentEpochStatusCount,
      Babylon_Checkpointing_V1_QueryClientMetadata.Methods.lastCheckpointWithStatus,
    ]
  )

  internal enum Methods {
    internal static let rawCheckpointList = GRPCMethodDescriptor(
      name: "RawCheckpointList",
      path: "/babylon.checkpointing.v1.Query/RawCheckpointList",
      type: GRPCCallType.unary
    )

    internal static let rawCheckpoint = GRPCMethodDescriptor(
      name: "RawCheckpoint",
      path: "/babylon.checkpointing.v1.Query/RawCheckpoint",
      type: GRPCCallType.unary
    )

    internal static let rawCheckpoints = GRPCMethodDescriptor(
      name: "RawCheckpoints",
      path: "/babylon.checkpointing.v1.Query/RawCheckpoints",
      type: GRPCCallType.unary
    )

    internal static let blsPublicKeyList = GRPCMethodDescriptor(
      name: "BlsPublicKeyList",
      path: "/babylon.checkpointing.v1.Query/BlsPublicKeyList",
      type: GRPCCallType.unary
    )

    internal static let epochStatus = GRPCMethodDescriptor(
      name: "EpochStatus",
      path: "/babylon.checkpointing.v1.Query/EpochStatus",
      type: GRPCCallType.unary
    )

    internal static let recentEpochStatusCount = GRPCMethodDescriptor(
      name: "RecentEpochStatusCount",
      path: "/babylon.checkpointing.v1.Query/RecentEpochStatusCount",
      type: GRPCCallType.unary
    )

    internal static let lastCheckpointWithStatus = GRPCMethodDescriptor(
      name: "LastCheckpointWithStatus",
      path: "/babylon.checkpointing.v1.Query/LastCheckpointWithStatus",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Checkpointing_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Checkpointing_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// RawCheckpointList queries all checkpoints that match the given status.
  func rawCheckpointList(request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>

  /// RawCheckpoint queries a checkpoints at a given epoch number.
  func rawCheckpoint(request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryRawCheckpointResponse>

  /// RawCheckpoints queries checkpoints for a epoch range specified in pagination params.
  func rawCheckpoints(request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>

  /// BlsPublicKeyList queries a list of bls public keys of the validators at a
  /// given epoch number.
  func blsPublicKeyList(request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>

  /// EpochStatus queries the status of the checkpoint at a given epoch
  func epochStatus(request: Babylon_Checkpointing_V1_QueryEpochStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryEpochStatusResponse>

  /// RecentEpochStatusCount queries the number of epochs with each status in
  /// recent epochs
  func recentEpochStatusCount(request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>

  /// LastCheckpointWithStatus queries the last checkpoint with a given status or
  /// a more matured status
  func lastCheckpointWithStatus(request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>
}

extension Babylon_Checkpointing_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Checkpointing_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RawCheckpointList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>(),
        interceptors: self.interceptors?.makeRawCheckpointListInterceptors() ?? [],
        userFunction: self.rawCheckpointList(request:context:)
      )

    case "RawCheckpoint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRawCheckpointRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRawCheckpointResponse>(),
        interceptors: self.interceptors?.makeRawCheckpointInterceptors() ?? [],
        userFunction: self.rawCheckpoint(request:context:)
      )

    case "RawCheckpoints":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>(),
        interceptors: self.interceptors?.makeRawCheckpointsInterceptors() ?? [],
        userFunction: self.rawCheckpoints(request:context:)
      )

    case "BlsPublicKeyList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>(),
        interceptors: self.interceptors?.makeBlsPublicKeyListInterceptors() ?? [],
        userFunction: self.blsPublicKeyList(request:context:)
      )

    case "EpochStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryEpochStatusRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryEpochStatusResponse>(),
        interceptors: self.interceptors?.makeEpochStatusInterceptors() ?? [],
        userFunction: self.epochStatus(request:context:)
      )

    case "RecentEpochStatusCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>(),
        interceptors: self.interceptors?.makeRecentEpochStatusCountInterceptors() ?? [],
        userFunction: self.recentEpochStatusCount(request:context:)
      )

    case "LastCheckpointWithStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>(),
        interceptors: self.interceptors?.makeLastCheckpointWithStatusInterceptors() ?? [],
        userFunction: self.lastCheckpointWithStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Checkpointing_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Checkpointing_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// RawCheckpointList queries all checkpoints that match the given status.
  @Sendable func rawCheckpointList(
    request: Babylon_Checkpointing_V1_QueryRawCheckpointListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryRawCheckpointListResponse

  /// RawCheckpoint queries a checkpoints at a given epoch number.
  @Sendable func rawCheckpoint(
    request: Babylon_Checkpointing_V1_QueryRawCheckpointRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryRawCheckpointResponse

  /// RawCheckpoints queries checkpoints for a epoch range specified in pagination params.
  @Sendable func rawCheckpoints(
    request: Babylon_Checkpointing_V1_QueryRawCheckpointsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryRawCheckpointsResponse

  /// BlsPublicKeyList queries a list of bls public keys of the validators at a
  /// given epoch number.
  @Sendable func blsPublicKeyList(
    request: Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse

  /// EpochStatus queries the status of the checkpoint at a given epoch
  @Sendable func epochStatus(
    request: Babylon_Checkpointing_V1_QueryEpochStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryEpochStatusResponse

  /// RecentEpochStatusCount queries the number of epochs with each status in
  /// recent epochs
  @Sendable func recentEpochStatusCount(
    request: Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse

  /// LastCheckpointWithStatus queries the last checkpoint with a given status or
  /// a more matured status
  @Sendable func lastCheckpointWithStatus(
    request: Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Checkpointing_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Checkpointing_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Checkpointing_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Checkpointing_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RawCheckpointList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>(),
        interceptors: self.interceptors?.makeRawCheckpointListInterceptors() ?? [],
        wrapping: self.rawCheckpointList(request:context:)
      )

    case "RawCheckpoint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRawCheckpointRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRawCheckpointResponse>(),
        interceptors: self.interceptors?.makeRawCheckpointInterceptors() ?? [],
        wrapping: self.rawCheckpoint(request:context:)
      )

    case "RawCheckpoints":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>(),
        interceptors: self.interceptors?.makeRawCheckpointsInterceptors() ?? [],
        wrapping: self.rawCheckpoints(request:context:)
      )

    case "BlsPublicKeyList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>(),
        interceptors: self.interceptors?.makeBlsPublicKeyListInterceptors() ?? [],
        wrapping: self.blsPublicKeyList(request:context:)
      )

    case "EpochStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryEpochStatusRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryEpochStatusResponse>(),
        interceptors: self.interceptors?.makeEpochStatusInterceptors() ?? [],
        wrapping: self.epochStatus(request:context:)
      )

    case "RecentEpochStatusCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>(),
        interceptors: self.interceptors?.makeRecentEpochStatusCountInterceptors() ?? [],
        wrapping: self.recentEpochStatusCount(request:context:)
      )

    case "LastCheckpointWithStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>(),
        interceptors: self.interceptors?.makeLastCheckpointWithStatusInterceptors() ?? [],
        wrapping: self.lastCheckpointWithStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Checkpointing_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'rawCheckpointList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRawCheckpointListInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryRawCheckpointListRequest, Babylon_Checkpointing_V1_QueryRawCheckpointListResponse>]

  /// - Returns: Interceptors to use when handling 'rawCheckpoint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRawCheckpointInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryRawCheckpointRequest, Babylon_Checkpointing_V1_QueryRawCheckpointResponse>]

  /// - Returns: Interceptors to use when handling 'rawCheckpoints'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRawCheckpointsInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryRawCheckpointsRequest, Babylon_Checkpointing_V1_QueryRawCheckpointsResponse>]

  /// - Returns: Interceptors to use when handling 'blsPublicKeyList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlsPublicKeyListInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryBlsPublicKeyListRequest, Babylon_Checkpointing_V1_QueryBlsPublicKeyListResponse>]

  /// - Returns: Interceptors to use when handling 'epochStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEpochStatusInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryEpochStatusRequest, Babylon_Checkpointing_V1_QueryEpochStatusResponse>]

  /// - Returns: Interceptors to use when handling 'recentEpochStatusCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecentEpochStatusCountInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryRecentEpochStatusCountRequest, Babylon_Checkpointing_V1_QueryRecentEpochStatusCountResponse>]

  /// - Returns: Interceptors to use when handling 'lastCheckpointWithStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastCheckpointWithStatusInterceptors() -> [ServerInterceptor<Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusRequest, Babylon_Checkpointing_V1_QueryLastCheckpointWithStatusResponse>]
}

internal enum Babylon_Checkpointing_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.checkpointing.v1.Query",
    methods: [
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.rawCheckpointList,
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.rawCheckpoint,
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.rawCheckpoints,
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.blsPublicKeyList,
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.epochStatus,
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.recentEpochStatusCount,
      Babylon_Checkpointing_V1_QueryServerMetadata.Methods.lastCheckpointWithStatus,
    ]
  )

  internal enum Methods {
    internal static let rawCheckpointList = GRPCMethodDescriptor(
      name: "RawCheckpointList",
      path: "/babylon.checkpointing.v1.Query/RawCheckpointList",
      type: GRPCCallType.unary
    )

    internal static let rawCheckpoint = GRPCMethodDescriptor(
      name: "RawCheckpoint",
      path: "/babylon.checkpointing.v1.Query/RawCheckpoint",
      type: GRPCCallType.unary
    )

    internal static let rawCheckpoints = GRPCMethodDescriptor(
      name: "RawCheckpoints",
      path: "/babylon.checkpointing.v1.Query/RawCheckpoints",
      type: GRPCCallType.unary
    )

    internal static let blsPublicKeyList = GRPCMethodDescriptor(
      name: "BlsPublicKeyList",
      path: "/babylon.checkpointing.v1.Query/BlsPublicKeyList",
      type: GRPCCallType.unary
    )

    internal static let epochStatus = GRPCMethodDescriptor(
      name: "EpochStatus",
      path: "/babylon.checkpointing.v1.Query/EpochStatus",
      type: GRPCCallType.unary
    )

    internal static let recentEpochStatusCount = GRPCMethodDescriptor(
      name: "RecentEpochStatusCount",
      path: "/babylon.checkpointing.v1.Query/RecentEpochStatusCount",
      type: GRPCCallType.unary
    )

    internal static let lastCheckpointWithStatus = GRPCMethodDescriptor(
      name: "LastCheckpointWithStatus",
      path: "/babylon.checkpointing.v1.Query/LastCheckpointWithStatus",
      type: GRPCCallType.unary
    )
  }
}
