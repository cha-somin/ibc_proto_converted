// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/dex/deposit_record.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Dex_DepositRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pairID: Neutron_Dex_PairID {
    get {return _storage._pairID ?? Neutron_Dex_PairID()}
    set {_uniqueStorage()._pairID = newValue}
  }
  /// Returns true if `pairID` has been explicitly set.
  var hasPairID: Bool {return _storage._pairID != nil}
  /// Clears the value of `pairID`. Subsequent reads from it will return its default value.
  mutating func clearPairID() {_uniqueStorage()._pairID = nil}

  var sharesOwned: String {
    get {return _storage._sharesOwned}
    set {_uniqueStorage()._sharesOwned = newValue}
  }

  var centerTickIndex: Int64 {
    get {return _storage._centerTickIndex}
    set {_uniqueStorage()._centerTickIndex = newValue}
  }

  var lowerTickIndex: Int64 {
    get {return _storage._lowerTickIndex}
    set {_uniqueStorage()._lowerTickIndex = newValue}
  }

  var upperTickIndex: Int64 {
    get {return _storage._upperTickIndex}
    set {_uniqueStorage()._upperTickIndex = newValue}
  }

  var fee: UInt64 {
    get {return _storage._fee}
    set {_uniqueStorage()._fee = newValue}
  }

  var totalShares: String {
    get {return _storage._totalShares}
    set {_uniqueStorage()._totalShares = newValue}
  }

  var pool: Neutron_Dex_Pool {
    get {return _storage._pool ?? Neutron_Dex_Pool()}
    set {_uniqueStorage()._pool = newValue}
  }
  /// Returns true if `pool` has been explicitly set.
  var hasPool: Bool {return _storage._pool != nil}
  /// Clears the value of `pool`. Subsequent reads from it will return its default value.
  mutating func clearPool() {_uniqueStorage()._pool = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Dex_DepositRecord: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.dex"

extension Neutron_Dex_DepositRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DepositRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pair_id"),
    2: .standard(proto: "shares_owned"),
    3: .standard(proto: "center_tick_index"),
    4: .standard(proto: "lower_tick_index"),
    5: .standard(proto: "upper_tick_index"),
    6: .same(proto: "fee"),
    7: .standard(proto: "total_shares"),
    8: .same(proto: "pool"),
  ]

  fileprivate class _StorageClass {
    var _pairID: Neutron_Dex_PairID? = nil
    var _sharesOwned: String = String()
    var _centerTickIndex: Int64 = 0
    var _lowerTickIndex: Int64 = 0
    var _upperTickIndex: Int64 = 0
    var _fee: UInt64 = 0
    var _totalShares: String = String()
    var _pool: Neutron_Dex_Pool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pairID = source._pairID
      _sharesOwned = source._sharesOwned
      _centerTickIndex = source._centerTickIndex
      _lowerTickIndex = source._lowerTickIndex
      _upperTickIndex = source._upperTickIndex
      _fee = source._fee
      _totalShares = source._totalShares
      _pool = source._pool
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._pairID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._sharesOwned) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._centerTickIndex) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._lowerTickIndex) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._upperTickIndex) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._fee) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._totalShares) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._pool) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._pairID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._sharesOwned.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sharesOwned, fieldNumber: 2)
      }
      if _storage._centerTickIndex != 0 {
        try visitor.visitSingularInt64Field(value: _storage._centerTickIndex, fieldNumber: 3)
      }
      if _storage._lowerTickIndex != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lowerTickIndex, fieldNumber: 4)
      }
      if _storage._upperTickIndex != 0 {
        try visitor.visitSingularInt64Field(value: _storage._upperTickIndex, fieldNumber: 5)
      }
      if _storage._fee != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._fee, fieldNumber: 6)
      }
      if !_storage._totalShares.isEmpty {
        try visitor.visitSingularStringField(value: _storage._totalShares, fieldNumber: 7)
      }
      try { if let v = _storage._pool {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Dex_DepositRecord, rhs: Neutron_Dex_DepositRecord) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pairID != rhs_storage._pairID {return false}
        if _storage._sharesOwned != rhs_storage._sharesOwned {return false}
        if _storage._centerTickIndex != rhs_storage._centerTickIndex {return false}
        if _storage._lowerTickIndex != rhs_storage._lowerTickIndex {return false}
        if _storage._upperTickIndex != rhs_storage._upperTickIndex {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._totalShares != rhs_storage._totalShares {return false}
        if _storage._pool != rhs_storage._pool {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
