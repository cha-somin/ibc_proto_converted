//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/posts/v3/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Desmos_Posts_V3_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Posts_V3_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? { get }

  func subspacePosts(
    _ request: Desmos_Posts_V3_QuerySubspacePostsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V3_QuerySubspacePostsRequest, Desmos_Posts_V3_QuerySubspacePostsResponse>

  func sectionPosts(
    _ request: Desmos_Posts_V3_QuerySectionPostsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V3_QuerySectionPostsRequest, Desmos_Posts_V3_QuerySectionPostsResponse>

  func post(
    _ request: Desmos_Posts_V3_QueryPostRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V3_QueryPostRequest, Desmos_Posts_V3_QueryPostResponse>

  func postAttachments(
    _ request: Desmos_Posts_V3_QueryPostAttachmentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V3_QueryPostAttachmentsRequest, Desmos_Posts_V3_QueryPostAttachmentsResponse>

  func pollAnswers(
    _ request: Desmos_Posts_V3_QueryPollAnswersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V3_QueryPollAnswersRequest, Desmos_Posts_V3_QueryPollAnswersResponse>

  func params(
    _ request: Desmos_Posts_V3_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V3_QueryParamsRequest, Desmos_Posts_V3_QueryParamsResponse>
}

extension Desmos_Posts_V3_QueryClientProtocol {
  internal var serviceName: String {
    return "desmos.posts.v3.Query"
  }

  /// SubspacePosts queries all the posts inside a given subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to SubspacePosts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subspacePosts(
    _ request: Desmos_Posts_V3_QuerySubspacePostsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V3_QuerySubspacePostsRequest, Desmos_Posts_V3_QuerySubspacePostsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.subspacePosts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacePostsInterceptors() ?? []
    )
  }

  /// SectionPosts queries all the posts inside a given section
  ///
  /// - Parameters:
  ///   - request: Request to send to SectionPosts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sectionPosts(
    _ request: Desmos_Posts_V3_QuerySectionPostsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V3_QuerySectionPostsRequest, Desmos_Posts_V3_QuerySectionPostsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.sectionPosts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionPostsInterceptors() ?? []
    )
  }

  /// Post queries for a single post inside a given subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to Post.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func post(
    _ request: Desmos_Posts_V3_QueryPostRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V3_QueryPostRequest, Desmos_Posts_V3_QueryPostResponse> {
    return self.makeUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.post.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostInterceptors() ?? []
    )
  }

  /// PostAttachments queries the attachments of the post having the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAttachments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func postAttachments(
    _ request: Desmos_Posts_V3_QueryPostAttachmentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V3_QueryPostAttachmentsRequest, Desmos_Posts_V3_QueryPostAttachmentsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.postAttachments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostAttachmentsInterceptors() ?? []
    )
  }

  /// PollAnswers queries the answers for the poll having the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to PollAnswers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pollAnswers(
    _ request: Desmos_Posts_V3_QueryPollAnswersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V3_QueryPollAnswersRequest, Desmos_Posts_V3_QueryPollAnswersResponse> {
    return self.makeUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.pollAnswers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePollAnswersInterceptors() ?? []
    )
  }

  /// Params queries the module parameters
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Desmos_Posts_V3_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V3_QueryParamsRequest, Desmos_Posts_V3_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Desmos_Posts_V3_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Desmos_Posts_V3_QueryNIOClient")
internal final class Desmos_Posts_V3_QueryClient: Desmos_Posts_V3_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the desmos.posts.v3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Desmos_Posts_V3_QueryNIOClient: Desmos_Posts_V3_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.posts.v3.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Posts_V3_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? { get }

  func makeSubspacePostsCall(
    _ request: Desmos_Posts_V3_QuerySubspacePostsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QuerySubspacePostsRequest, Desmos_Posts_V3_QuerySubspacePostsResponse>

  func makeSectionPostsCall(
    _ request: Desmos_Posts_V3_QuerySectionPostsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QuerySectionPostsRequest, Desmos_Posts_V3_QuerySectionPostsResponse>

  func makePostCall(
    _ request: Desmos_Posts_V3_QueryPostRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryPostRequest, Desmos_Posts_V3_QueryPostResponse>

  func makePostAttachmentsCall(
    _ request: Desmos_Posts_V3_QueryPostAttachmentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryPostAttachmentsRequest, Desmos_Posts_V3_QueryPostAttachmentsResponse>

  func makePollAnswersCall(
    _ request: Desmos_Posts_V3_QueryPollAnswersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryPollAnswersRequest, Desmos_Posts_V3_QueryPollAnswersResponse>

  func makeParamsCall(
    _ request: Desmos_Posts_V3_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryParamsRequest, Desmos_Posts_V3_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Posts_V3_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Posts_V3_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSubspacePostsCall(
    _ request: Desmos_Posts_V3_QuerySubspacePostsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QuerySubspacePostsRequest, Desmos_Posts_V3_QuerySubspacePostsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.subspacePosts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacePostsInterceptors() ?? []
    )
  }

  internal func makeSectionPostsCall(
    _ request: Desmos_Posts_V3_QuerySectionPostsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QuerySectionPostsRequest, Desmos_Posts_V3_QuerySectionPostsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.sectionPosts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionPostsInterceptors() ?? []
    )
  }

  internal func makePostCall(
    _ request: Desmos_Posts_V3_QueryPostRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryPostRequest, Desmos_Posts_V3_QueryPostResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.post.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostInterceptors() ?? []
    )
  }

  internal func makePostAttachmentsCall(
    _ request: Desmos_Posts_V3_QueryPostAttachmentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryPostAttachmentsRequest, Desmos_Posts_V3_QueryPostAttachmentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.postAttachments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostAttachmentsInterceptors() ?? []
    )
  }

  internal func makePollAnswersCall(
    _ request: Desmos_Posts_V3_QueryPollAnswersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryPollAnswersRequest, Desmos_Posts_V3_QueryPollAnswersResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.pollAnswers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePollAnswersInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Desmos_Posts_V3_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Desmos_Posts_V3_QueryParamsRequest, Desmos_Posts_V3_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Posts_V3_QueryAsyncClientProtocol {
  internal func subspacePosts(
    _ request: Desmos_Posts_V3_QuerySubspacePostsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Posts_V3_QuerySubspacePostsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.subspacePosts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacePostsInterceptors() ?? []
    )
  }

  internal func sectionPosts(
    _ request: Desmos_Posts_V3_QuerySectionPostsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Posts_V3_QuerySectionPostsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.sectionPosts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSectionPostsInterceptors() ?? []
    )
  }

  internal func post(
    _ request: Desmos_Posts_V3_QueryPostRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Posts_V3_QueryPostResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.post.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostInterceptors() ?? []
    )
  }

  internal func postAttachments(
    _ request: Desmos_Posts_V3_QueryPostAttachmentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Posts_V3_QueryPostAttachmentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.postAttachments.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostAttachmentsInterceptors() ?? []
    )
  }

  internal func pollAnswers(
    _ request: Desmos_Posts_V3_QueryPollAnswersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Posts_V3_QueryPollAnswersResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.pollAnswers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePollAnswersInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Desmos_Posts_V3_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Desmos_Posts_V3_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Desmos_Posts_V3_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Desmos_Posts_V3_QueryAsyncClient: Desmos_Posts_V3_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Desmos_Posts_V3_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'subspacePosts'.
  func makeSubspacePostsInterceptors() -> [ClientInterceptor<Desmos_Posts_V3_QuerySubspacePostsRequest, Desmos_Posts_V3_QuerySubspacePostsResponse>]

  /// - Returns: Interceptors to use when invoking 'sectionPosts'.
  func makeSectionPostsInterceptors() -> [ClientInterceptor<Desmos_Posts_V3_QuerySectionPostsRequest, Desmos_Posts_V3_QuerySectionPostsResponse>]

  /// - Returns: Interceptors to use when invoking 'post'.
  func makePostInterceptors() -> [ClientInterceptor<Desmos_Posts_V3_QueryPostRequest, Desmos_Posts_V3_QueryPostResponse>]

  /// - Returns: Interceptors to use when invoking 'postAttachments'.
  func makePostAttachmentsInterceptors() -> [ClientInterceptor<Desmos_Posts_V3_QueryPostAttachmentsRequest, Desmos_Posts_V3_QueryPostAttachmentsResponse>]

  /// - Returns: Interceptors to use when invoking 'pollAnswers'.
  func makePollAnswersInterceptors() -> [ClientInterceptor<Desmos_Posts_V3_QueryPollAnswersRequest, Desmos_Posts_V3_QueryPollAnswersResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Desmos_Posts_V3_QueryParamsRequest, Desmos_Posts_V3_QueryParamsResponse>]
}

internal enum Desmos_Posts_V3_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "desmos.posts.v3.Query",
    methods: [
      Desmos_Posts_V3_QueryClientMetadata.Methods.subspacePosts,
      Desmos_Posts_V3_QueryClientMetadata.Methods.sectionPosts,
      Desmos_Posts_V3_QueryClientMetadata.Methods.post,
      Desmos_Posts_V3_QueryClientMetadata.Methods.postAttachments,
      Desmos_Posts_V3_QueryClientMetadata.Methods.pollAnswers,
      Desmos_Posts_V3_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let subspacePosts = GRPCMethodDescriptor(
      name: "SubspacePosts",
      path: "/desmos.posts.v3.Query/SubspacePosts",
      type: GRPCCallType.unary
    )

    internal static let sectionPosts = GRPCMethodDescriptor(
      name: "SectionPosts",
      path: "/desmos.posts.v3.Query/SectionPosts",
      type: GRPCCallType.unary
    )

    internal static let post = GRPCMethodDescriptor(
      name: "Post",
      path: "/desmos.posts.v3.Query/Post",
      type: GRPCCallType.unary
    )

    internal static let postAttachments = GRPCMethodDescriptor(
      name: "PostAttachments",
      path: "/desmos.posts.v3.Query/PostAttachments",
      type: GRPCCallType.unary
    )

    internal static let pollAnswers = GRPCMethodDescriptor(
      name: "PollAnswers",
      path: "/desmos.posts.v3.Query/PollAnswers",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/desmos.posts.v3.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Posts_V3_QueryProvider: CallHandlerProvider {
  var interceptors: Desmos_Posts_V3_QueryServerInterceptorFactoryProtocol? { get }

  /// SubspacePosts queries all the posts inside a given subspace
  func subspacePosts(request: Desmos_Posts_V3_QuerySubspacePostsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V3_QuerySubspacePostsResponse>

  /// SectionPosts queries all the posts inside a given section
  func sectionPosts(request: Desmos_Posts_V3_QuerySectionPostsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V3_QuerySectionPostsResponse>

  /// Post queries for a single post inside a given subspace
  func post(request: Desmos_Posts_V3_QueryPostRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V3_QueryPostResponse>

  /// PostAttachments queries the attachments of the post having the given id
  func postAttachments(request: Desmos_Posts_V3_QueryPostAttachmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V3_QueryPostAttachmentsResponse>

  /// PollAnswers queries the answers for the poll having the given id
  func pollAnswers(request: Desmos_Posts_V3_QueryPollAnswersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V3_QueryPollAnswersResponse>

  /// Params queries the module parameters
  func params(request: Desmos_Posts_V3_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V3_QueryParamsResponse>
}

extension Desmos_Posts_V3_QueryProvider {
  internal var serviceName: Substring {
    return Desmos_Posts_V3_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubspacePosts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QuerySubspacePostsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QuerySubspacePostsResponse>(),
        interceptors: self.interceptors?.makeSubspacePostsInterceptors() ?? [],
        userFunction: self.subspacePosts(request:context:)
      )

    case "SectionPosts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QuerySectionPostsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QuerySectionPostsResponse>(),
        interceptors: self.interceptors?.makeSectionPostsInterceptors() ?? [],
        userFunction: self.sectionPosts(request:context:)
      )

    case "Post":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryPostRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryPostResponse>(),
        interceptors: self.interceptors?.makePostInterceptors() ?? [],
        userFunction: self.post(request:context:)
      )

    case "PostAttachments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryPostAttachmentsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryPostAttachmentsResponse>(),
        interceptors: self.interceptors?.makePostAttachmentsInterceptors() ?? [],
        userFunction: self.postAttachments(request:context:)
      )

    case "PollAnswers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryPollAnswersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryPollAnswersResponse>(),
        interceptors: self.interceptors?.makePollAnswersInterceptors() ?? [],
        userFunction: self.pollAnswers(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Desmos_Posts_V3_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Desmos_Posts_V3_QueryServerInterceptorFactoryProtocol? { get }

  /// SubspacePosts queries all the posts inside a given subspace
  @Sendable func subspacePosts(
    request: Desmos_Posts_V3_QuerySubspacePostsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Posts_V3_QuerySubspacePostsResponse

  /// SectionPosts queries all the posts inside a given section
  @Sendable func sectionPosts(
    request: Desmos_Posts_V3_QuerySectionPostsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Posts_V3_QuerySectionPostsResponse

  /// Post queries for a single post inside a given subspace
  @Sendable func post(
    request: Desmos_Posts_V3_QueryPostRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Posts_V3_QueryPostResponse

  /// PostAttachments queries the attachments of the post having the given id
  @Sendable func postAttachments(
    request: Desmos_Posts_V3_QueryPostAttachmentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Posts_V3_QueryPostAttachmentsResponse

  /// PollAnswers queries the answers for the poll having the given id
  @Sendable func pollAnswers(
    request: Desmos_Posts_V3_QueryPollAnswersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Posts_V3_QueryPollAnswersResponse

  /// Params queries the module parameters
  @Sendable func params(
    request: Desmos_Posts_V3_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Desmos_Posts_V3_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Desmos_Posts_V3_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Desmos_Posts_V3_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Desmos_Posts_V3_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Desmos_Posts_V3_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubspacePosts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QuerySubspacePostsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QuerySubspacePostsResponse>(),
        interceptors: self.interceptors?.makeSubspacePostsInterceptors() ?? [],
        wrapping: self.subspacePosts(request:context:)
      )

    case "SectionPosts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QuerySectionPostsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QuerySectionPostsResponse>(),
        interceptors: self.interceptors?.makeSectionPostsInterceptors() ?? [],
        wrapping: self.sectionPosts(request:context:)
      )

    case "Post":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryPostRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryPostResponse>(),
        interceptors: self.interceptors?.makePostInterceptors() ?? [],
        wrapping: self.post(request:context:)
      )

    case "PostAttachments":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryPostAttachmentsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryPostAttachmentsResponse>(),
        interceptors: self.interceptors?.makePostAttachmentsInterceptors() ?? [],
        wrapping: self.postAttachments(request:context:)
      )

    case "PollAnswers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryPollAnswersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryPollAnswersResponse>(),
        interceptors: self.interceptors?.makePollAnswersInterceptors() ?? [],
        wrapping: self.pollAnswers(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V3_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V3_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Posts_V3_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subspacePosts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubspacePostsInterceptors() -> [ServerInterceptor<Desmos_Posts_V3_QuerySubspacePostsRequest, Desmos_Posts_V3_QuerySubspacePostsResponse>]

  /// - Returns: Interceptors to use when handling 'sectionPosts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSectionPostsInterceptors() -> [ServerInterceptor<Desmos_Posts_V3_QuerySectionPostsRequest, Desmos_Posts_V3_QuerySectionPostsResponse>]

  /// - Returns: Interceptors to use when handling 'post'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePostInterceptors() -> [ServerInterceptor<Desmos_Posts_V3_QueryPostRequest, Desmos_Posts_V3_QueryPostResponse>]

  /// - Returns: Interceptors to use when handling 'postAttachments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePostAttachmentsInterceptors() -> [ServerInterceptor<Desmos_Posts_V3_QueryPostAttachmentsRequest, Desmos_Posts_V3_QueryPostAttachmentsResponse>]

  /// - Returns: Interceptors to use when handling 'pollAnswers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePollAnswersInterceptors() -> [ServerInterceptor<Desmos_Posts_V3_QueryPollAnswersRequest, Desmos_Posts_V3_QueryPollAnswersResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Desmos_Posts_V3_QueryParamsRequest, Desmos_Posts_V3_QueryParamsResponse>]
}

internal enum Desmos_Posts_V3_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "desmos.posts.v3.Query",
    methods: [
      Desmos_Posts_V3_QueryServerMetadata.Methods.subspacePosts,
      Desmos_Posts_V3_QueryServerMetadata.Methods.sectionPosts,
      Desmos_Posts_V3_QueryServerMetadata.Methods.post,
      Desmos_Posts_V3_QueryServerMetadata.Methods.postAttachments,
      Desmos_Posts_V3_QueryServerMetadata.Methods.pollAnswers,
      Desmos_Posts_V3_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let subspacePosts = GRPCMethodDescriptor(
      name: "SubspacePosts",
      path: "/desmos.posts.v3.Query/SubspacePosts",
      type: GRPCCallType.unary
    )

    internal static let sectionPosts = GRPCMethodDescriptor(
      name: "SectionPosts",
      path: "/desmos.posts.v3.Query/SectionPosts",
      type: GRPCCallType.unary
    )

    internal static let post = GRPCMethodDescriptor(
      name: "Post",
      path: "/desmos.posts.v3.Query/Post",
      type: GRPCCallType.unary
    )

    internal static let postAttachments = GRPCMethodDescriptor(
      name: "PostAttachments",
      path: "/desmos.posts.v3.Query/PostAttachments",
      type: GRPCCallType.unary
    )

    internal static let pollAnswers = GRPCMethodDescriptor(
      name: "PollAnswers",
      path: "/desmos.posts.v3.Query/PollAnswers",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/desmos.posts.v3.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
