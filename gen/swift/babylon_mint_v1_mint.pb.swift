// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/mint/v1/mint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Minter represents the mint state.
struct Babylon_Mint_V1_Minter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// InflationRate is the rate at which new tokens should be minted for the
  /// current year. For example if InflationRate=0.1, then 10% of the total
  /// supply will be minted over the course of the year.
  var inflationRate: String = String()

  /// AnnualProvisions is the total number of tokens to be minted in the current
  /// year due to inflation.
  var annualProvisions: String = String()

  /// PreviousBlockTime is the timestamp of the previous block.
  var previousBlockTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _previousBlockTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_previousBlockTime = newValue}
  }
  /// Returns true if `previousBlockTime` has been explicitly set.
  var hasPreviousBlockTime: Bool {return self._previousBlockTime != nil}
  /// Clears the value of `previousBlockTime`. Subsequent reads from it will return its default value.
  mutating func clearPreviousBlockTime() {self._previousBlockTime = nil}

  /// BondDenom is the denomination of the token that should be minted.
  var bondDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _previousBlockTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// GenesisTime contains the timestamp of the genesis block.
struct Babylon_Mint_V1_GenesisTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// GenesisTime is the timestamp of the genesis block.
  var genesisTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _genesisTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_genesisTime = newValue}
  }
  /// Returns true if `genesisTime` has been explicitly set.
  var hasGenesisTime: Bool {return self._genesisTime != nil}
  /// Clears the value of `genesisTime`. Subsequent reads from it will return its default value.
  mutating func clearGenesisTime() {self._genesisTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _genesisTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Mint_V1_Minter: @unchecked Sendable {}
extension Babylon_Mint_V1_GenesisTime: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.mint.v1"

extension Babylon_Mint_V1_Minter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Minter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inflation_rate"),
    2: .standard(proto: "annual_provisions"),
    4: .standard(proto: "previous_block_time"),
    5: .standard(proto: "bond_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inflationRate) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.annualProvisions) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._previousBlockTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bondDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.inflationRate.isEmpty {
      try visitor.visitSingularStringField(value: self.inflationRate, fieldNumber: 1)
    }
    if !self.annualProvisions.isEmpty {
      try visitor.visitSingularStringField(value: self.annualProvisions, fieldNumber: 2)
    }
    try { if let v = self._previousBlockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.bondDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.bondDenom, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Mint_V1_Minter, rhs: Babylon_Mint_V1_Minter) -> Bool {
    if lhs.inflationRate != rhs.inflationRate {return false}
    if lhs.annualProvisions != rhs.annualProvisions {return false}
    if lhs._previousBlockTime != rhs._previousBlockTime {return false}
    if lhs.bondDenom != rhs.bondDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Mint_V1_GenesisTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "genesis_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._genesisTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._genesisTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Mint_V1_GenesisTime, rhs: Babylon_Mint_V1_GenesisTime) -> Bool {
    if lhs._genesisTime != rhs._genesisTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
