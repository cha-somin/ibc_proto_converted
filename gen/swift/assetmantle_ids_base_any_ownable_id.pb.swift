// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: assetmantle/ids/base/any_ownable_id.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Assetmantle_Schema_Ids_Base_AnyOwnableID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var impl: Assetmantle_Schema_Ids_Base_AnyOwnableID.OneOf_Impl? = nil

  var assetID: Assetmantle_Schema_Ids_Base_AssetID {
    get {
      if case .assetID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_AssetID()
    }
    set {impl = .assetID(newValue)}
  }

  var coinID: Assetmantle_Schema_Ids_Base_CoinID {
    get {
      if case .coinID(let v)? = impl {return v}
      return Assetmantle_Schema_Ids_Base_CoinID()
    }
    set {impl = .coinID(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Impl: Equatable {
    case assetID(Assetmantle_Schema_Ids_Base_AssetID)
    case coinID(Assetmantle_Schema_Ids_Base_CoinID)

  #if !swift(>=4.1)
    static func ==(lhs: Assetmantle_Schema_Ids_Base_AnyOwnableID.OneOf_Impl, rhs: Assetmantle_Schema_Ids_Base_AnyOwnableID.OneOf_Impl) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.assetID, .assetID): return {
        guard case .assetID(let l) = lhs, case .assetID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.coinID, .coinID): return {
        guard case .coinID(let l) = lhs, case .coinID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Assetmantle_Schema_Ids_Base_AnyOwnableID: @unchecked Sendable {}
extension Assetmantle_Schema_Ids_Base_AnyOwnableID.OneOf_Impl: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "assetmantle.schema.ids.base"

extension Assetmantle_Schema_Ids_Base_AnyOwnableID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnyOwnableID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_i_d"),
    2: .standard(proto: "coin_i_d"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Assetmantle_Schema_Ids_Base_AssetID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .assetID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .assetID(v)
        }
      }()
      case 2: try {
        var v: Assetmantle_Schema_Ids_Base_CoinID?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .coinID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .coinID(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.impl {
    case .assetID?: try {
      guard case .assetID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .coinID?: try {
      guard case .coinID(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Assetmantle_Schema_Ids_Base_AnyOwnableID, rhs: Assetmantle_Schema_Ids_Base_AnyOwnableID) -> Bool {
    if lhs.impl != rhs.impl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
