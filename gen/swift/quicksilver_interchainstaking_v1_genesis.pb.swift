// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quicksilver/interchainstaking/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Quicksilver_Interchainstaking_V1_Params_v1 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositInterval: UInt64 = 0

  var validatorsetInterval: UInt64 = 0

  var commissionRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositInterval: UInt64 = 0

  var validatorsetInterval: UInt64 = 0

  var commissionRate: String = String()

  var unbondingEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_DelegationsForZone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var delegations: [Quicksilver_Interchainstaking_V1_Delegation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Quicksilver_Interchainstaking_V1_DelegatorIntentsForZone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var delegationIntent: [Quicksilver_Interchainstaking_V1_DelegatorIntent] = []

  var snapshot: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GenesisState defines the interchainstaking module's genesis state.
struct Quicksilver_Interchainstaking_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Quicksilver_Interchainstaking_V1_Params {
    get {return _params ?? Quicksilver_Interchainstaking_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var zones: [Quicksilver_Interchainstaking_V1_Zone] = []

  var receipts: [Quicksilver_Interchainstaking_V1_Receipt] = []

  var delegations: [Quicksilver_Interchainstaking_V1_DelegationsForZone] = []

  var performanceDelegations: [Quicksilver_Interchainstaking_V1_DelegationsForZone] = []

  var delegatorIntents: [Quicksilver_Interchainstaking_V1_DelegatorIntentsForZone] = []

  var portConnections: [Quicksilver_Interchainstaking_V1_PortConnectionTuple] = []

  var withdrawalRecords: [Quicksilver_Interchainstaking_V1_WithdrawalRecord] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Quicksilver_Interchainstaking_V1_Params? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quicksilver_Interchainstaking_V1_Params_v1: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_Params: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_DelegationsForZone: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_DelegatorIntentsForZone: @unchecked Sendable {}
extension Quicksilver_Interchainstaking_V1_GenesisState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quicksilver.interchainstaking.v1"

extension Quicksilver_Interchainstaking_V1_Params_v1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params_v1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deposit_interval"),
    2: .standard(proto: "validatorset_interval"),
    3: .standard(proto: "commission_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.depositInterval) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.validatorsetInterval) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commissionRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.depositInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositInterval, fieldNumber: 1)
    }
    if self.validatorsetInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.validatorsetInterval, fieldNumber: 2)
    }
    if !self.commissionRate.isEmpty {
      try visitor.visitSingularStringField(value: self.commissionRate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_Params_v1, rhs: Quicksilver_Interchainstaking_V1_Params_v1) -> Bool {
    if lhs.depositInterval != rhs.depositInterval {return false}
    if lhs.validatorsetInterval != rhs.validatorsetInterval {return false}
    if lhs.commissionRate != rhs.commissionRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deposit_interval"),
    2: .standard(proto: "validatorset_interval"),
    3: .standard(proto: "commission_rate"),
    4: .standard(proto: "unbonding_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.depositInterval) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.validatorsetInterval) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.commissionRate) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.unbondingEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.depositInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.depositInterval, fieldNumber: 1)
    }
    if self.validatorsetInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.validatorsetInterval, fieldNumber: 2)
    }
    if !self.commissionRate.isEmpty {
      try visitor.visitSingularStringField(value: self.commissionRate, fieldNumber: 3)
    }
    if self.unbondingEnabled != false {
      try visitor.visitSingularBoolField(value: self.unbondingEnabled, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_Params, rhs: Quicksilver_Interchainstaking_V1_Params) -> Bool {
    if lhs.depositInterval != rhs.depositInterval {return false}
    if lhs.validatorsetInterval != rhs.validatorsetInterval {return false}
    if lhs.commissionRate != rhs.commissionRate {return false}
    if lhs.unbondingEnabled != rhs.unbondingEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_DelegationsForZone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegationsForZone"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "delegations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.delegations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if !self.delegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_DelegationsForZone, rhs: Quicksilver_Interchainstaking_V1_DelegationsForZone) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.delegations != rhs.delegations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_DelegatorIntentsForZone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegatorIntentsForZone"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "delegation_intent"),
    3: .same(proto: "snapshot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.delegationIntent) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.snapshot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if !self.delegationIntent.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegationIntent, fieldNumber: 2)
    }
    if self.snapshot != false {
      try visitor.visitSingularBoolField(value: self.snapshot, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_DelegatorIntentsForZone, rhs: Quicksilver_Interchainstaking_V1_DelegatorIntentsForZone) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.delegationIntent != rhs.delegationIntent {return false}
    if lhs.snapshot != rhs.snapshot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Interchainstaking_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "zones"),
    3: .same(proto: "receipts"),
    4: .same(proto: "delegations"),
    5: .standard(proto: "performance_delegations"),
    6: .standard(proto: "delegator_intents"),
    7: .standard(proto: "port_connections"),
    8: .standard(proto: "withdrawal_records"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.zones) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.receipts) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.delegations) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.performanceDelegations) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.delegatorIntents) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.portConnections) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.withdrawalRecords) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.zones.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.zones, fieldNumber: 2)
    }
    if !self.receipts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.receipts, fieldNumber: 3)
    }
    if !self.delegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegations, fieldNumber: 4)
    }
    if !self.performanceDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.performanceDelegations, fieldNumber: 5)
    }
    if !self.delegatorIntents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegatorIntents, fieldNumber: 6)
    }
    if !self.portConnections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.portConnections, fieldNumber: 7)
    }
    if !self.withdrawalRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.withdrawalRecords, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Interchainstaking_V1_GenesisState, rhs: Quicksilver_Interchainstaking_V1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.zones != rhs.zones {return false}
    if lhs.receipts != rhs.receipts {return false}
    if lhs.delegations != rhs.delegations {return false}
    if lhs.performanceDelegations != rhs.performanceDelegations {return false}
    if lhs.delegatorIntents != rhs.delegatorIntents {return false}
    if lhs.portConnections != rhs.portConnections {return false}
    if lhs.withdrawalRecords != rhs.withdrawalRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
