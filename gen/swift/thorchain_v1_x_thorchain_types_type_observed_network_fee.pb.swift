// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_observed_network_fee.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_ObservedNetworkFeeVoter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockHeight: Int64 = 0

  var reportBlockHeight: Int64 = 0

  var chain: String = String()

  var signers: [String] = []

  var feeRate: Int64 = 0

  var transactionSize: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_ObservedNetworkFeeVoter: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_ObservedNetworkFeeVoter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObservedNetworkFeeVoter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_height"),
    2: .standard(proto: "report_block_height"),
    3: .same(proto: "chain"),
    4: .same(proto: "signers"),
    5: .standard(proto: "fee_rate"),
    6: .standard(proto: "transaction_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.blockHeight) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.reportBlockHeight) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.signers) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.feeRate) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.transactionSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.blockHeight, fieldNumber: 1)
    }
    if self.reportBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.reportBlockHeight, fieldNumber: 2)
    }
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 3)
    }
    if !self.signers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.signers, fieldNumber: 4)
    }
    if self.feeRate != 0 {
      try visitor.visitSingularInt64Field(value: self.feeRate, fieldNumber: 5)
    }
    if self.transactionSize != 0 {
      try visitor.visitSingularInt64Field(value: self.transactionSize, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_ObservedNetworkFeeVoter, rhs: Types_ObservedNetworkFeeVoter) -> Bool {
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.reportBlockHeight != rhs.reportBlockHeight {return false}
    if lhs.chain != rhs.chain {return false}
    if lhs.signers != rhs.signers {return false}
    if lhs.feeRate != rhs.feeRate {return false}
    if lhs.transactionSize != rhs.transactionSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
