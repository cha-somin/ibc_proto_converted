// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quicksilver/claimsmanager/v1/claimsmanager.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Quicksilver_Claimsmanager_V1_ClaimType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Undefined action (per protobuf spec)
  case undefined // = 0
  case liquidToken // = 1
  case osmosisPool // = 2
  case crescentPool // = 3
  case sifchainPool // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .liquidToken
    case 2: self = .osmosisPool
    case 3: self = .crescentPool
    case 4: self = .sifchainPool
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .liquidToken: return 1
    case .osmosisPool: return 2
    case .crescentPool: return 3
    case .sifchainPool: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Quicksilver_Claimsmanager_V1_ClaimType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Quicksilver_Claimsmanager_V1_ClaimType] = [
    .undefined,
    .liquidToken,
    .osmosisPool,
    .crescentPool,
    .sifchainPool,
  ]
}

#endif  // swift(>=4.2)

/// Params holds parameters for the claimsmanager module.
struct Quicksilver_Claimsmanager_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Claim define the users claim for holding assets within a given zone.
struct Quicksilver_Claimsmanager_V1_Claim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userAddress: String = String()

  var chainID: String = String()

  var module: Quicksilver_Claimsmanager_V1_ClaimType = .undefined

  var sourceChainID: String = String()

  var amount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Proof defines a type used to cryptographically prove a claim.
struct Quicksilver_Claimsmanager_V1_Proof {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Data = Data()

  var data: Data = Data()

  var proofOps: Tendermint_Crypto_ProofOps {
    get {return _proofOps ?? Tendermint_Crypto_ProofOps()}
    set {_proofOps = newValue}
  }
  /// Returns true if `proofOps` has been explicitly set.
  var hasProofOps: Bool {return self._proofOps != nil}
  /// Clears the value of `proofOps`. Subsequent reads from it will return its default value.
  mutating func clearProofOps() {self._proofOps = nil}

  var height: Int64 = 0

  var proofType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proofOps: Tendermint_Crypto_ProofOps? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quicksilver_Claimsmanager_V1_ClaimType: @unchecked Sendable {}
extension Quicksilver_Claimsmanager_V1_Params: @unchecked Sendable {}
extension Quicksilver_Claimsmanager_V1_Claim: @unchecked Sendable {}
extension Quicksilver_Claimsmanager_V1_Proof: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quicksilver.claimsmanager.v1"

extension Quicksilver_Claimsmanager_V1_ClaimType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ClaimTypeUndefined"),
    1: .same(proto: "ClaimTypeLiquidToken"),
    2: .same(proto: "ClaimTypeOsmosisPool"),
    3: .same(proto: "ClaimTypeCrescentPool"),
    4: .same(proto: "ClaimTypeSifchainPool"),
  ]
}

extension Quicksilver_Claimsmanager_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Claimsmanager_V1_Params, rhs: Quicksilver_Claimsmanager_V1_Params) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Claimsmanager_V1_Claim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Claim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_address"),
    2: .standard(proto: "chain_id"),
    3: .same(proto: "module"),
    4: .standard(proto: "source_chain_id"),
    5: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.module) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sourceChainID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.userAddress, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    if self.module != .undefined {
      try visitor.visitSingularEnumField(value: self.module, fieldNumber: 3)
    }
    if !self.sourceChainID.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceChainID, fieldNumber: 4)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Claimsmanager_V1_Claim, rhs: Quicksilver_Claimsmanager_V1_Claim) -> Bool {
    if lhs.userAddress != rhs.userAddress {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.module != rhs.module {return false}
    if lhs.sourceChainID != rhs.sourceChainID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quicksilver_Claimsmanager_V1_Proof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proof"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "data"),
    3: .same(proto: "proof_ops"),
    4: .same(proto: "height"),
    5: .same(proto: "proof_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._proofOps) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.proofType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try { if let v = self._proofOps {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 4)
    }
    if !self.proofType.isEmpty {
      try visitor.visitSingularStringField(value: self.proofType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quicksilver_Claimsmanager_V1_Proof, rhs: Quicksilver_Claimsmanager_V1_Proof) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.data != rhs.data {return false}
    if lhs._proofOps != rhs._proofOps {return false}
    if lhs.height != rhs.height {return false}
    if lhs.proofType != rhs.proofType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
