// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sommelier/pubsub/v1/pubsub.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// for a given PublisherIntent, whether or not it is pulled or pushed
enum Pubsub_V1_PublishMethod: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// subscribers should pull from the provided URL
  case pull // = 0

  /// subscribers must provide a URL to receive push messages
  case push // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .pull
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pull
    case 1: self = .push
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .pull: return 0
    case .push: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pubsub_V1_PublishMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pubsub_V1_PublishMethod] = [
    .pull,
    .push,
  ]
}

#endif  // swift(>=4.2)

/// for a given PublisherIntent, determines what types of subscribers may subscribe
enum Pubsub_V1_AllowedSubscribers: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// any valid account address
  case any // = 0

  /// account address must map to a validator in the active validator set
  case validators // = 1

  /// a specific list of account addresses
  case list // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .any
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .any
    case 1: self = .validators
    case 2: self = .list
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .any: return 0
    case .validators: return 1
    case .list: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pubsub_V1_AllowedSubscribers: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pubsub_V1_AllowedSubscribers] = [
    .any,
    .validators,
    .list,
  ]
}

#endif  // swift(>=4.2)

/// represents a publisher, which are added via governance
struct Pubsub_V1_Publisher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// account address of the publisher
  var address: String = String()

  /// unique key, FQDN of the publisher, max length of 256
  var domain: String = String()

  /// the publisher's self-signed CA cert PEM file, expecting TLS 1.3 compatible ECDSA certificates, max length 4096
  var caCert: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// represents a subscriber, can be set or modified by the owner of the subscriber address
struct Pubsub_V1_Subscriber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unique key, account address representation of either an account or a validator
  var address: String = String()

  /// FQDN of the subscriber, max length of 256
  var domain: String = String()

  /// the subscriber's self-signed CA cert PEM file, expecting TLS 1.3 compatible ECDSA certificates, max length 4096
  var caCert: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// represents a publisher committing to sending messages for a specific subscription ID
struct Pubsub_V1_PublisherIntent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// arbitary string representing a subscription, max length of 128
  var subscriptionID: String = String()

  /// FQDN of the publisher, max length of 256
  var publisherDomain: String = String()

  /// either PULL or PUSH (see enum above for details)
  var method: Pubsub_V1_PublishMethod = .pull

  /// optional, only needs to be set if using the PULL method, max length of 512
  var pullURL: String = String()

  /// either ANY, VALIDATORS, or LIST (see enum above for details)
  var allowedSubscribers: Pubsub_V1_AllowedSubscribers = .any

  /// optional, must be provided if allowed_subscribers is LIST, list of account addresses, max length 256
  var allowedAddresses: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// represents a subscriber requesting messages for a specific subscription ID and publisher
struct Pubsub_V1_SubscriberIntent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// arbitary string representing a subscription, max length of 128
  var subscriptionID: String = String()

  /// account address of the subscriber
  var subscriberAddress: String = String()

  /// FQDN of the publisher, max length of 256
  var publisherDomain: String = String()

  /// optional, only needs to be set if the PublisherIntent for this subscription uses the PUSH method, max length of 512
  var pushURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// represents a default subscription voted in by governance that can be overridden by a subscriber
struct Pubsub_V1_DefaultSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// arbitary string representing a subscription, max length of 128
  var subscriptionID: String = String()

  /// FQDN of the publisher, max length of 256
  var publisherDomain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// governance proposal to add a publisher, with domain, adress, and ca_cert the same as the Publisher type
/// proof URL expected in the format: https://<domain>/<address>/cacert.pem and serving cacert.pem matching ca_cert
struct Pubsub_V1_AddPublisherProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var domain: String = String()

  var address: String = String()

  var proofURL: String = String()

  var caCert: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pubsub_V1_AddPublisherProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var domain: String = String()

  var address: String = String()

  var proofURL: String = String()

  var caCert: String = String()

  var deposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// governance proposal to remove a publisher (publishers can remove themselves, but this might be necessary in the
/// event of a malicious publisher or a key compromise), since Publishers are unique by domain, it's the only
/// necessary information to remove one
struct Pubsub_V1_RemovePublisherProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var domain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pubsub_V1_RemovePublisherProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var domain: String = String()

  var deposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// set the default publisher for a given subscription ID
/// these can be overridden by the client
struct Pubsub_V1_AddDefaultSubscriptionProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var subscriptionID: String = String()

  var publisherDomain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pubsub_V1_AddDefaultSubscriptionProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var subscriptionID: String = String()

  var publisherDomain: String = String()

  var deposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// remove a default subscription
struct Pubsub_V1_RemoveDefaultSubscriptionProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var subscriptionID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pubsub_V1_RemoveDefaultSubscriptionProposalWithDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var subscriptionID: String = String()

  var deposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pubsub_V1_PublishMethod: @unchecked Sendable {}
extension Pubsub_V1_AllowedSubscribers: @unchecked Sendable {}
extension Pubsub_V1_Publisher: @unchecked Sendable {}
extension Pubsub_V1_Subscriber: @unchecked Sendable {}
extension Pubsub_V1_PublisherIntent: @unchecked Sendable {}
extension Pubsub_V1_SubscriberIntent: @unchecked Sendable {}
extension Pubsub_V1_DefaultSubscription: @unchecked Sendable {}
extension Pubsub_V1_AddPublisherProposal: @unchecked Sendable {}
extension Pubsub_V1_AddPublisherProposalWithDeposit: @unchecked Sendable {}
extension Pubsub_V1_RemovePublisherProposal: @unchecked Sendable {}
extension Pubsub_V1_RemovePublisherProposalWithDeposit: @unchecked Sendable {}
extension Pubsub_V1_AddDefaultSubscriptionProposal: @unchecked Sendable {}
extension Pubsub_V1_AddDefaultSubscriptionProposalWithDeposit: @unchecked Sendable {}
extension Pubsub_V1_RemoveDefaultSubscriptionProposal: @unchecked Sendable {}
extension Pubsub_V1_RemoveDefaultSubscriptionProposalWithDeposit: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pubsub.v1"

extension Pubsub_V1_PublishMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PULL"),
    1: .same(proto: "PUSH"),
  ]
}

extension Pubsub_V1_AllowedSubscribers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANY"),
    1: .same(proto: "VALIDATORS"),
    2: .same(proto: "LIST"),
  ]
}

extension Pubsub_V1_Publisher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Publisher"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "domain"),
    3: .standard(proto: "ca_cert"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.caCert) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 2)
    }
    if !self.caCert.isEmpty {
      try visitor.visitSingularStringField(value: self.caCert, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_Publisher, rhs: Pubsub_V1_Publisher) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.caCert != rhs.caCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_Subscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Subscriber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "domain"),
    3: .standard(proto: "ca_cert"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.caCert) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 2)
    }
    if !self.caCert.isEmpty {
      try visitor.visitSingularStringField(value: self.caCert, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_Subscriber, rhs: Pubsub_V1_Subscriber) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.caCert != rhs.caCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_PublisherIntent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublisherIntent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscription_id"),
    2: .standard(proto: "publisher_domain"),
    3: .same(proto: "method"),
    4: .standard(proto: "pull_url"),
    5: .standard(proto: "allowed_subscribers"),
    6: .standard(proto: "allowed_addresses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.publisherDomain) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.method) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pullURL) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.allowedSubscribers) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.allowedAddresses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 1)
    }
    if !self.publisherDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherDomain, fieldNumber: 2)
    }
    if self.method != .pull {
      try visitor.visitSingularEnumField(value: self.method, fieldNumber: 3)
    }
    if !self.pullURL.isEmpty {
      try visitor.visitSingularStringField(value: self.pullURL, fieldNumber: 4)
    }
    if self.allowedSubscribers != .any {
      try visitor.visitSingularEnumField(value: self.allowedSubscribers, fieldNumber: 5)
    }
    if !self.allowedAddresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedAddresses, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_PublisherIntent, rhs: Pubsub_V1_PublisherIntent) -> Bool {
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.publisherDomain != rhs.publisherDomain {return false}
    if lhs.method != rhs.method {return false}
    if lhs.pullURL != rhs.pullURL {return false}
    if lhs.allowedSubscribers != rhs.allowedSubscribers {return false}
    if lhs.allowedAddresses != rhs.allowedAddresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_SubscriberIntent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriberIntent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscription_id"),
    2: .standard(proto: "subscriber_address"),
    3: .standard(proto: "publisher_domain"),
    4: .standard(proto: "push_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subscriberAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.publisherDomain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pushURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 1)
    }
    if !self.subscriberAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriberAddress, fieldNumber: 2)
    }
    if !self.publisherDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherDomain, fieldNumber: 3)
    }
    if !self.pushURL.isEmpty {
      try visitor.visitSingularStringField(value: self.pushURL, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_SubscriberIntent, rhs: Pubsub_V1_SubscriberIntent) -> Bool {
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.subscriberAddress != rhs.subscriberAddress {return false}
    if lhs.publisherDomain != rhs.publisherDomain {return false}
    if lhs.pushURL != rhs.pushURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_DefaultSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DefaultSubscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscription_id"),
    2: .standard(proto: "publisher_domain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.publisherDomain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 1)
    }
    if !self.publisherDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherDomain, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_DefaultSubscription, rhs: Pubsub_V1_DefaultSubscription) -> Bool {
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.publisherDomain != rhs.publisherDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_AddPublisherProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddPublisherProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "domain"),
    4: .same(proto: "address"),
    5: .standard(proto: "proof_url"),
    6: .standard(proto: "ca_cert"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.proofURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.caCert) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.proofURL.isEmpty {
      try visitor.visitSingularStringField(value: self.proofURL, fieldNumber: 5)
    }
    if !self.caCert.isEmpty {
      try visitor.visitSingularStringField(value: self.caCert, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_AddPublisherProposal, rhs: Pubsub_V1_AddPublisherProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.address != rhs.address {return false}
    if lhs.proofURL != rhs.proofURL {return false}
    if lhs.caCert != rhs.caCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_AddPublisherProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddPublisherProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "domain"),
    4: .same(proto: "address"),
    5: .standard(proto: "proof_url"),
    6: .standard(proto: "ca_cert"),
    7: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.proofURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.caCert) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.proofURL.isEmpty {
      try visitor.visitSingularStringField(value: self.proofURL, fieldNumber: 5)
    }
    if !self.caCert.isEmpty {
      try visitor.visitSingularStringField(value: self.caCert, fieldNumber: 6)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_AddPublisherProposalWithDeposit, rhs: Pubsub_V1_AddPublisherProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.address != rhs.address {return false}
    if lhs.proofURL != rhs.proofURL {return false}
    if lhs.caCert != rhs.caCert {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_RemovePublisherProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemovePublisherProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "domain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_RemovePublisherProposal, rhs: Pubsub_V1_RemovePublisherProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_RemovePublisherProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemovePublisherProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "domain"),
    4: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 3)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_RemovePublisherProposalWithDeposit, rhs: Pubsub_V1_RemovePublisherProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_AddDefaultSubscriptionProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddDefaultSubscriptionProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "subscription_id"),
    4: .standard(proto: "publisher_domain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.publisherDomain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 3)
    }
    if !self.publisherDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherDomain, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_AddDefaultSubscriptionProposal, rhs: Pubsub_V1_AddDefaultSubscriptionProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.publisherDomain != rhs.publisherDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_AddDefaultSubscriptionProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddDefaultSubscriptionProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "subscription_id"),
    4: .standard(proto: "publisher_domain"),
    5: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.publisherDomain) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 3)
    }
    if !self.publisherDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherDomain, fieldNumber: 4)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_AddDefaultSubscriptionProposalWithDeposit, rhs: Pubsub_V1_AddDefaultSubscriptionProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.publisherDomain != rhs.publisherDomain {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_RemoveDefaultSubscriptionProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveDefaultSubscriptionProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "subscription_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_RemoveDefaultSubscriptionProposal, rhs: Pubsub_V1_RemoveDefaultSubscriptionProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pubsub_V1_RemoveDefaultSubscriptionProposalWithDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RemoveDefaultSubscriptionProposalWithDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "subscription_id"),
    4: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 3)
    }
    if !self.deposit.isEmpty {
      try visitor.visitSingularStringField(value: self.deposit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pubsub_V1_RemoveDefaultSubscriptionProposalWithDeposit, rhs: Pubsub_V1_RemoveDefaultSubscriptionProposalWithDeposit) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
