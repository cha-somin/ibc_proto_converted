// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: eth/evm/v1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Copyright (c) 2023-2024 Nibi, Inc.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventEthereumTx defines the event for an Ethereum transaction
struct Eth_Evm_V1_EventEthereumTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// amount
  var amount: String = String()

  /// eth_hash is the Ethereum hash of the transaction
  var ethHash: String = String()

  /// index of the transaction in the block
  var index: String = String()

  /// gas_used is the amount of gas used by the transaction
  var gasUsed: String = String()

  /// hash is the Tendermint hash of the transaction
  var hash: String = String()

  /// recipient of the transaction
  var recipient: String = String()

  /// vm_error contains a VM error should it occur
  var vmError: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventTxLog defines the event for an Ethereum transaction log
struct Eth_Evm_V1_EventTxLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// tx_logs is an array of transaction logs
  var logs: [Eth_Evm_V1_Log] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventBlockBloom defines an Ethereum block bloom filter event
struct Eth_Evm_V1_EventBlockBloom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// bloom is the bloom filter of the block
  var bloom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventFunTokenCreated defines a fun token creation event.
struct Eth_Evm_V1_EventFunTokenCreated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bankDenom: String = String()

  var erc20ContractAddress: String = String()

  var creator: String = String()

  var isMadeFromCoin: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ConvertCoinToEvm defines sending fun token to erc20 event.
struct Eth_Evm_V1_EventConvertCoinToEvm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var erc20ContractAddress: String = String()

  var toEthAddr: String = String()

  var bankCoin: Cosmos_Base_V1beta1_Coin {
    get {return _bankCoin ?? Cosmos_Base_V1beta1_Coin()}
    set {_bankCoin = newValue}
  }
  /// Returns true if `bankCoin` has been explicitly set.
  var hasBankCoin: Bool {return self._bankCoin != nil}
  /// Clears the value of `bankCoin`. Subsequent reads from it will return its default value.
  mutating func clearBankCoin() {self._bankCoin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bankCoin: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventTransfer defines event for EVM transfer
struct Eth_Evm_V1_EventTransfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var recipient: String = String()

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventContractDeployed defines event for EVM contract deployment
struct Eth_Evm_V1_EventContractDeployed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var contractAddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventContractExecuted defines event for EVM contract execution
struct Eth_Evm_V1_EventContractExecuted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var contractAddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Eth_Evm_V1_EventEthereumTx: @unchecked Sendable {}
extension Eth_Evm_V1_EventTxLog: @unchecked Sendable {}
extension Eth_Evm_V1_EventBlockBloom: @unchecked Sendable {}
extension Eth_Evm_V1_EventFunTokenCreated: @unchecked Sendable {}
extension Eth_Evm_V1_EventConvertCoinToEvm: @unchecked Sendable {}
extension Eth_Evm_V1_EventTransfer: @unchecked Sendable {}
extension Eth_Evm_V1_EventContractDeployed: @unchecked Sendable {}
extension Eth_Evm_V1_EventContractExecuted: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "eth.evm.v1"

extension Eth_Evm_V1_EventEthereumTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventEthereumTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "eth_hash"),
    3: .same(proto: "index"),
    4: .standard(proto: "gas_used"),
    5: .same(proto: "hash"),
    6: .same(proto: "recipient"),
    7: .standard(proto: "vm_error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ethHash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.index) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.gasUsed) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.vmError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 1)
    }
    if !self.ethHash.isEmpty {
      try visitor.visitSingularStringField(value: self.ethHash, fieldNumber: 2)
    }
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 3)
    }
    if !self.gasUsed.isEmpty {
      try visitor.visitSingularStringField(value: self.gasUsed, fieldNumber: 4)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 5)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 6)
    }
    if !self.vmError.isEmpty {
      try visitor.visitSingularStringField(value: self.vmError, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventEthereumTx, rhs: Eth_Evm_V1_EventEthereumTx) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.ethHash != rhs.ethHash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.vmError != rhs.vmError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventTxLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventTxLog"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "logs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventTxLog, rhs: Eth_Evm_V1_EventTxLog) -> Bool {
    if lhs.logs != rhs.logs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventBlockBloom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBlockBloom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bloom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bloom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bloom.isEmpty {
      try visitor.visitSingularStringField(value: self.bloom, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventBlockBloom, rhs: Eth_Evm_V1_EventBlockBloom) -> Bool {
    if lhs.bloom != rhs.bloom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventFunTokenCreated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventFunTokenCreated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bank_denom"),
    2: .standard(proto: "erc20_contract_address"),
    3: .same(proto: "creator"),
    4: .standard(proto: "is_made_from_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bankDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.erc20ContractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isMadeFromCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bankDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.bankDenom, fieldNumber: 1)
    }
    if !self.erc20ContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.erc20ContractAddress, fieldNumber: 2)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 3)
    }
    if self.isMadeFromCoin != false {
      try visitor.visitSingularBoolField(value: self.isMadeFromCoin, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventFunTokenCreated, rhs: Eth_Evm_V1_EventFunTokenCreated) -> Bool {
    if lhs.bankDenom != rhs.bankDenom {return false}
    if lhs.erc20ContractAddress != rhs.erc20ContractAddress {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.isMadeFromCoin != rhs.isMadeFromCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventConvertCoinToEvm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventConvertCoinToEvm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "erc20_contract_address"),
    3: .standard(proto: "to_eth_addr"),
    4: .standard(proto: "bank_coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.erc20ContractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.toEthAddr) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._bankCoin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.erc20ContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.erc20ContractAddress, fieldNumber: 2)
    }
    if !self.toEthAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.toEthAddr, fieldNumber: 3)
    }
    try { if let v = self._bankCoin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventConvertCoinToEvm, rhs: Eth_Evm_V1_EventConvertCoinToEvm) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.erc20ContractAddress != rhs.erc20ContractAddress {return false}
    if lhs.toEthAddr != rhs.toEthAddr {return false}
    if lhs._bankCoin != rhs._bankCoin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventTransfer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "recipient"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventTransfer, rhs: Eth_Evm_V1_EventTransfer) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventContractDeployed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventContractDeployed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "contract_addr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.contractAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventContractDeployed, rhs: Eth_Evm_V1_EventContractDeployed) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddr != rhs.contractAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eth_Evm_V1_EventContractExecuted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventContractExecuted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "contract_addr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.contractAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eth_Evm_V1_EventContractExecuted, rhs: Eth_Evm_V1_EventContractExecuted) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.contractAddr != rhs.contractAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
