// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ixo/token/v1beta1/authz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ixo_Token_V1beta1_MintAuthorization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of minter
  var minter: String = String()

  var constraints: [Ixo_Token_V1beta1_MintConstraints] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Token_V1beta1_MintConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractAddress: String = String()

  var amount: String = String()

  /// name is the token name, which must be unique (namespace), will be verified
  /// against Token name provided on msgCreateToken
  var name: String = String()

  /// index is the unique identifier hexstring that identifies the token
  var index: String = String()

  /// did of collection (eg Supamoto Malawi)
  var collection: String = String()

  /// tokenData is the linkedResources added to tokenMetadata when queried eg
  /// (credential link ***.ipfs)
  var tokenData: [Ixo_Token_V1beta1_TokenData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ixo_Token_V1beta1_MintAuthorization: @unchecked Sendable {}
extension Ixo_Token_V1beta1_MintConstraints: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ixo.token.v1beta1"

extension Ixo_Token_V1beta1_MintAuthorization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MintAuthorization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "minter"),
    2: .same(proto: "constraints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.minter) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.constraints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.minter.isEmpty {
      try visitor.visitSingularStringField(value: self.minter, fieldNumber: 1)
    }
    if !self.constraints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.constraints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Token_V1beta1_MintAuthorization, rhs: Ixo_Token_V1beta1_MintAuthorization) -> Bool {
    if lhs.minter != rhs.minter {return false}
    if lhs.constraints != rhs.constraints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Token_V1beta1_MintConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MintConstraints"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .same(proto: "amount"),
    3: .same(proto: "name"),
    4: .same(proto: "index"),
    5: .same(proto: "collection"),
    6: .same(proto: "tokenData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.index) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.collection) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.tokenData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 4)
    }
    if !self.collection.isEmpty {
      try visitor.visitSingularStringField(value: self.collection, fieldNumber: 5)
    }
    if !self.tokenData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenData, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Token_V1beta1_MintConstraints, rhs: Ixo_Token_V1beta1_MintConstraints) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.name != rhs.name {return false}
    if lhs.index != rhs.index {return false}
    if lhs.collection != rhs.collection {return false}
    if lhs.tokenData != rhs.tokenData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
