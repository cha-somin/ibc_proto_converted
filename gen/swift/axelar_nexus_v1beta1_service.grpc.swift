//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/nexus/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the nexus Msg service.
///
/// Usage: instantiate `Axelar_Nexus_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Nexus_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func registerChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>

  func deregisterChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>

  func activateChain(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>

  func deactivateChain(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>

  func registerAssetFee(
    _ request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>

  func setTransferRateLimit(
    _ request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>
}

extension Axelar_Nexus_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.nexus.v1beta1.MsgService"
  }

  /// Unary call to RegisterChainMaintainer
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterChainMaintainer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerChainMaintainer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? []
    )
  }

  /// Unary call to DeregisterChainMaintainer
  ///
  /// - Parameters:
  ///   - request: Request to send to DeregisterChainMaintainer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deregisterChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deregisterChainMaintainer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? []
    )
  }

  /// Unary call to ActivateChain
  ///
  /// - Parameters:
  ///   - request: Request to send to ActivateChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activateChain(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.activateChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateChainInterceptors() ?? []
    )
  }

  /// Unary call to DeactivateChain
  ///
  /// - Parameters:
  ///   - request: Request to send to DeactivateChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deactivateChain(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deactivateChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? []
    )
  }

  /// Unary call to RegisterAssetFee
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterAssetFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerAssetFee(
    _ request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, Axelar_Nexus_V1beta1_RegisterAssetFeeResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerAssetFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterAssetFeeInterceptors() ?? []
    )
  }

  /// Unary call to SetTransferRateLimit
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTransferRateLimit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTransferRateLimit(
    _ request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, Axelar_Nexus_V1beta1_SetTransferRateLimitResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.setTransferRateLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTransferRateLimitInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Nexus_V1beta1_MsgServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Nexus_V1beta1_MsgServiceNIOClient")
internal final class Axelar_Nexus_V1beta1_MsgServiceClient: Axelar_Nexus_V1beta1_MsgServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.nexus.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Nexus_V1beta1_MsgServiceNIOClient: Axelar_Nexus_V1beta1_MsgServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.nexus.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the nexus Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Nexus_V1beta1_MsgServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func makeRegisterChainMaintainerCall(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>

  func makeDeregisterChainMaintainerCall(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>

  func makeActivateChainCall(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>

  func makeDeactivateChainCall(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>

  func makeRegisterAssetFeeCall(
    _ request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>

  func makeSetTransferRateLimitCall(
    _ request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Nexus_V1beta1_MsgServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Nexus_V1beta1_MsgServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterChainMaintainerCall(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerChainMaintainer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? []
    )
  }

  internal func makeDeregisterChainMaintainerCall(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deregisterChainMaintainer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? []
    )
  }

  internal func makeActivateChainCall(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.activateChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateChainInterceptors() ?? []
    )
  }

  internal func makeDeactivateChainCall(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deactivateChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? []
    )
  }

  internal func makeRegisterAssetFeeCall(
    _ request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, Axelar_Nexus_V1beta1_RegisterAssetFeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerAssetFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterAssetFeeInterceptors() ?? []
    )
  }

  internal func makeSetTransferRateLimitCall(
    _ request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, Axelar_Nexus_V1beta1_SetTransferRateLimitResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.setTransferRateLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTransferRateLimitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Nexus_V1beta1_MsgServiceAsyncClientProtocol {
  internal func registerChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerChainMaintainer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? []
    )
  }

  internal func deregisterChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deregisterChainMaintainer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? []
    )
  }

  internal func activateChain(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_ActivateChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.activateChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateChainInterceptors() ?? []
    )
  }

  internal func deactivateChain(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_DeactivateChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deactivateChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? []
    )
  }

  internal func registerAssetFee(
    _ request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_RegisterAssetFeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerAssetFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterAssetFeeInterceptors() ?? []
    )
  }

  internal func setTransferRateLimit(
    _ request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_SetTransferRateLimitResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.setTransferRateLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetTransferRateLimitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Nexus_V1beta1_MsgServiceAsyncClient: Axelar_Nexus_V1beta1_MsgServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'registerChainMaintainer'.
  func makeRegisterChainMaintainerInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when invoking 'deregisterChainMaintainer'.
  func makeDeregisterChainMaintainerInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when invoking 'activateChain'.
  func makeActivateChainInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>]

  /// - Returns: Interceptors to use when invoking 'deactivateChain'.
  func makeDeactivateChainInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>]

  /// - Returns: Interceptors to use when invoking 'registerAssetFee'.
  func makeRegisterAssetFeeInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>]

  /// - Returns: Interceptors to use when invoking 'setTransferRateLimit'.
  func makeSetTransferRateLimitInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>]
}

internal enum Axelar_Nexus_V1beta1_MsgServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.nexus.v1beta1.MsgService",
    methods: [
      Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerChainMaintainer,
      Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deregisterChainMaintainer,
      Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.activateChain,
      Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.deactivateChain,
      Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.registerAssetFee,
      Axelar_Nexus_V1beta1_MsgServiceClientMetadata.Methods.setTransferRateLimit,
    ]
  )

  internal enum Methods {
    internal static let registerChainMaintainer = GRPCMethodDescriptor(
      name: "RegisterChainMaintainer",
      path: "/axelar.nexus.v1beta1.MsgService/RegisterChainMaintainer",
      type: GRPCCallType.unary
    )

    internal static let deregisterChainMaintainer = GRPCMethodDescriptor(
      name: "DeregisterChainMaintainer",
      path: "/axelar.nexus.v1beta1.MsgService/DeregisterChainMaintainer",
      type: GRPCCallType.unary
    )

    internal static let activateChain = GRPCMethodDescriptor(
      name: "ActivateChain",
      path: "/axelar.nexus.v1beta1.MsgService/ActivateChain",
      type: GRPCCallType.unary
    )

    internal static let deactivateChain = GRPCMethodDescriptor(
      name: "DeactivateChain",
      path: "/axelar.nexus.v1beta1.MsgService/DeactivateChain",
      type: GRPCCallType.unary
    )

    internal static let registerAssetFee = GRPCMethodDescriptor(
      name: "RegisterAssetFee",
      path: "/axelar.nexus.v1beta1.MsgService/RegisterAssetFee",
      type: GRPCCallType.unary
    )

    internal static let setTransferRateLimit = GRPCMethodDescriptor(
      name: "SetTransferRateLimit",
      path: "/axelar.nexus.v1beta1.MsgService/SetTransferRateLimit",
      type: GRPCCallType.unary
    )
  }
}

/// QueryService defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Nexus_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Nexus_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func latestDepositAddress(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>

  func transfersForChain(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>

  func feeInfo(
    _ request: Axelar_Nexus_V1beta1_FeeInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_FeeInfoRequest, Axelar_Nexus_V1beta1_FeeInfoResponse>

  func transferFee(
    _ request: Axelar_Nexus_V1beta1_TransferFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransferFeeRequest, Axelar_Nexus_V1beta1_TransferFeeResponse>

  func chains(
    _ request: Axelar_Nexus_V1beta1_ChainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainsRequest, Axelar_Nexus_V1beta1_ChainsResponse>

  func assets(
    _ request: Axelar_Nexus_V1beta1_AssetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_AssetsRequest, Axelar_Nexus_V1beta1_AssetsResponse>

  func chainState(
    _ request: Axelar_Nexus_V1beta1_ChainStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainStateRequest, Axelar_Nexus_V1beta1_ChainStateResponse>

  func chainsByAsset(
    _ request: Axelar_Nexus_V1beta1_ChainsByAssetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainsByAssetRequest, Axelar_Nexus_V1beta1_ChainsByAssetResponse>

  func recipientAddress(
    _ request: Axelar_Nexus_V1beta1_RecipientAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RecipientAddressRequest, Axelar_Nexus_V1beta1_RecipientAddressResponse>

  func chainMaintainers(
    _ request: Axelar_Nexus_V1beta1_ChainMaintainersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainMaintainersRequest, Axelar_Nexus_V1beta1_ChainMaintainersResponse>

  func transferRateLimit(
    _ request: Axelar_Nexus_V1beta1_TransferRateLimitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransferRateLimitRequest, Axelar_Nexus_V1beta1_TransferRateLimitResponse>

  func message(
    _ request: Axelar_Nexus_V1beta1_MessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_MessageRequest, Axelar_Nexus_V1beta1_MessageResponse>
}

extension Axelar_Nexus_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.nexus.v1beta1.QueryService"
  }

  /// LatestDepositAddress queries the a deposit address by recipient
  ///
  /// - Parameters:
  ///   - request: Request to send to LatestDepositAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func latestDepositAddress(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.latestDepositAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? []
    )
  }

  /// TransfersForChain queries transfers by chain
  ///
  /// - Parameters:
  ///   - request: Request to send to TransfersForChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transfersForChain(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transfersForChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? []
    )
  }

  /// FeeInfo queries the fee info by chain and asset
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeInfo(
    _ request: Axelar_Nexus_V1beta1_FeeInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_FeeInfoRequest, Axelar_Nexus_V1beta1_FeeInfoResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.feeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeInfoInterceptors() ?? []
    )
  }

  /// TransferFee queries the transfer fee by the source, destination chain,
  /// and amount. If amount is 0, the min fee is returned
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferFee(
    _ request: Axelar_Nexus_V1beta1_TransferFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransferFeeRequest, Axelar_Nexus_V1beta1_TransferFeeResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFeeInterceptors() ?? []
    )
  }

  /// Chains queries the chains registered on the network
  ///
  /// - Parameters:
  ///   - request: Request to send to Chains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chains(
    _ request: Axelar_Nexus_V1beta1_ChainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainsRequest, Axelar_Nexus_V1beta1_ChainsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInterceptors() ?? []
    )
  }

  /// Assets queries the assets registered for a chain
  ///
  /// - Parameters:
  ///   - request: Request to send to Assets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assets(
    _ request: Axelar_Nexus_V1beta1_AssetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_AssetsRequest, Axelar_Nexus_V1beta1_AssetsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.assets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetsInterceptors() ?? []
    )
  }

  /// ChainState queries the state of a registered chain on the network
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainState(
    _ request: Axelar_Nexus_V1beta1_ChainStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainStateRequest, Axelar_Nexus_V1beta1_ChainStateResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainStateInterceptors() ?? []
    )
  }

  /// ChainsByAsset queries the chains that support an asset on the network
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainsByAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainsByAsset(
    _ request: Axelar_Nexus_V1beta1_ChainsByAssetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainsByAssetRequest, Axelar_Nexus_V1beta1_ChainsByAssetResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainsByAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsByAssetInterceptors() ?? []
    )
  }

  /// RecipientAddress queries the recipient address for a given deposit address
  ///
  /// - Parameters:
  ///   - request: Request to send to RecipientAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recipientAddress(
    _ request: Axelar_Nexus_V1beta1_RecipientAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RecipientAddressRequest, Axelar_Nexus_V1beta1_RecipientAddressResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.recipientAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecipientAddressInterceptors() ?? []
    )
  }

  /// ChainMaintainers queries the chain maintainers for a given chain
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainMaintainers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chainMaintainers(
    _ request: Axelar_Nexus_V1beta1_ChainMaintainersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ChainMaintainersRequest, Axelar_Nexus_V1beta1_ChainMaintainersResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainMaintainers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainMaintainersInterceptors() ?? []
    )
  }

  /// TransferRateLimit queries the transfer rate limit for a given chain and
  /// asset. If a rate limit is not set, nil is returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferRateLimit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferRateLimit(
    _ request: Axelar_Nexus_V1beta1_TransferRateLimitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransferRateLimitRequest, Axelar_Nexus_V1beta1_TransferRateLimitResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferRateLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferRateLimitInterceptors() ?? []
    )
  }

  /// Unary call to Message
  ///
  /// - Parameters:
  ///   - request: Request to send to Message.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func message(
    _ request: Axelar_Nexus_V1beta1_MessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_MessageRequest, Axelar_Nexus_V1beta1_MessageResponse> {
    return self.makeUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.message.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Nexus_V1beta1_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Nexus_V1beta1_QueryServiceNIOClient")
internal final class Axelar_Nexus_V1beta1_QueryServiceClient: Axelar_Nexus_V1beta1_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.nexus.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Nexus_V1beta1_QueryServiceNIOClient: Axelar_Nexus_V1beta1_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.nexus.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryService defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Nexus_V1beta1_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeLatestDepositAddressCall(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>

  func makeTransfersForChainCall(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>

  func makeFeeInfoCall(
    _ request: Axelar_Nexus_V1beta1_FeeInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_FeeInfoRequest, Axelar_Nexus_V1beta1_FeeInfoResponse>

  func makeTransferFeeCall(
    _ request: Axelar_Nexus_V1beta1_TransferFeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_TransferFeeRequest, Axelar_Nexus_V1beta1_TransferFeeResponse>

  func makeChainsCall(
    _ request: Axelar_Nexus_V1beta1_ChainsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainsRequest, Axelar_Nexus_V1beta1_ChainsResponse>

  func makeAssetsCall(
    _ request: Axelar_Nexus_V1beta1_AssetsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_AssetsRequest, Axelar_Nexus_V1beta1_AssetsResponse>

  func makeChainStateCall(
    _ request: Axelar_Nexus_V1beta1_ChainStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainStateRequest, Axelar_Nexus_V1beta1_ChainStateResponse>

  func makeChainsByAssetCall(
    _ request: Axelar_Nexus_V1beta1_ChainsByAssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainsByAssetRequest, Axelar_Nexus_V1beta1_ChainsByAssetResponse>

  func makeRecipientAddressCall(
    _ request: Axelar_Nexus_V1beta1_RecipientAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_RecipientAddressRequest, Axelar_Nexus_V1beta1_RecipientAddressResponse>

  func makeChainMaintainersCall(
    _ request: Axelar_Nexus_V1beta1_ChainMaintainersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainMaintainersRequest, Axelar_Nexus_V1beta1_ChainMaintainersResponse>

  func makeTransferRateLimitCall(
    _ request: Axelar_Nexus_V1beta1_TransferRateLimitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_TransferRateLimitRequest, Axelar_Nexus_V1beta1_TransferRateLimitResponse>

  func makeMessageCall(
    _ request: Axelar_Nexus_V1beta1_MessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_MessageRequest, Axelar_Nexus_V1beta1_MessageResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Nexus_V1beta1_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Nexus_V1beta1_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeLatestDepositAddressCall(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.latestDepositAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? []
    )
  }

  internal func makeTransfersForChainCall(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transfersForChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? []
    )
  }

  internal func makeFeeInfoCall(
    _ request: Axelar_Nexus_V1beta1_FeeInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_FeeInfoRequest, Axelar_Nexus_V1beta1_FeeInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.feeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeInfoInterceptors() ?? []
    )
  }

  internal func makeTransferFeeCall(
    _ request: Axelar_Nexus_V1beta1_TransferFeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_TransferFeeRequest, Axelar_Nexus_V1beta1_TransferFeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFeeInterceptors() ?? []
    )
  }

  internal func makeChainsCall(
    _ request: Axelar_Nexus_V1beta1_ChainsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainsRequest, Axelar_Nexus_V1beta1_ChainsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInterceptors() ?? []
    )
  }

  internal func makeAssetsCall(
    _ request: Axelar_Nexus_V1beta1_AssetsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_AssetsRequest, Axelar_Nexus_V1beta1_AssetsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.assets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetsInterceptors() ?? []
    )
  }

  internal func makeChainStateCall(
    _ request: Axelar_Nexus_V1beta1_ChainStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainStateRequest, Axelar_Nexus_V1beta1_ChainStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainStateInterceptors() ?? []
    )
  }

  internal func makeChainsByAssetCall(
    _ request: Axelar_Nexus_V1beta1_ChainsByAssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainsByAssetRequest, Axelar_Nexus_V1beta1_ChainsByAssetResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainsByAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsByAssetInterceptors() ?? []
    )
  }

  internal func makeRecipientAddressCall(
    _ request: Axelar_Nexus_V1beta1_RecipientAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_RecipientAddressRequest, Axelar_Nexus_V1beta1_RecipientAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.recipientAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecipientAddressInterceptors() ?? []
    )
  }

  internal func makeChainMaintainersCall(
    _ request: Axelar_Nexus_V1beta1_ChainMaintainersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_ChainMaintainersRequest, Axelar_Nexus_V1beta1_ChainMaintainersResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainMaintainers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainMaintainersInterceptors() ?? []
    )
  }

  internal func makeTransferRateLimitCall(
    _ request: Axelar_Nexus_V1beta1_TransferRateLimitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_TransferRateLimitRequest, Axelar_Nexus_V1beta1_TransferRateLimitResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferRateLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferRateLimitInterceptors() ?? []
    )
  }

  internal func makeMessageCall(
    _ request: Axelar_Nexus_V1beta1_MessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Nexus_V1beta1_MessageRequest, Axelar_Nexus_V1beta1_MessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.message.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Nexus_V1beta1_QueryServiceAsyncClientProtocol {
  internal func latestDepositAddress(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_LatestDepositAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.latestDepositAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? []
    )
  }

  internal func transfersForChain(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_TransfersForChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transfersForChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? []
    )
  }

  internal func feeInfo(
    _ request: Axelar_Nexus_V1beta1_FeeInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_FeeInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.feeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeInfoInterceptors() ?? []
    )
  }

  internal func transferFee(
    _ request: Axelar_Nexus_V1beta1_TransferFeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_TransferFeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFeeInterceptors() ?? []
    )
  }

  internal func chains(
    _ request: Axelar_Nexus_V1beta1_ChainsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_ChainsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInterceptors() ?? []
    )
  }

  internal func assets(
    _ request: Axelar_Nexus_V1beta1_AssetsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_AssetsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.assets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetsInterceptors() ?? []
    )
  }

  internal func chainState(
    _ request: Axelar_Nexus_V1beta1_ChainStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_ChainStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainStateInterceptors() ?? []
    )
  }

  internal func chainsByAsset(
    _ request: Axelar_Nexus_V1beta1_ChainsByAssetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_ChainsByAssetResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainsByAsset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsByAssetInterceptors() ?? []
    )
  }

  internal func recipientAddress(
    _ request: Axelar_Nexus_V1beta1_RecipientAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_RecipientAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.recipientAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecipientAddressInterceptors() ?? []
    )
  }

  internal func chainMaintainers(
    _ request: Axelar_Nexus_V1beta1_ChainMaintainersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_ChainMaintainersResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainMaintainers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainMaintainersInterceptors() ?? []
    )
  }

  internal func transferRateLimit(
    _ request: Axelar_Nexus_V1beta1_TransferRateLimitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_TransferRateLimitResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferRateLimit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferRateLimitInterceptors() ?? []
    )
  }

  internal func message(
    _ request: Axelar_Nexus_V1beta1_MessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Nexus_V1beta1_MessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.message.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Nexus_V1beta1_QueryServiceAsyncClient: Axelar_Nexus_V1beta1_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'latestDepositAddress'.
  func makeLatestDepositAddressInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'transfersForChain'.
  func makeTransfersForChainInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>]

  /// - Returns: Interceptors to use when invoking 'feeInfo'.
  func makeFeeInfoInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_FeeInfoRequest, Axelar_Nexus_V1beta1_FeeInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'transferFee'.
  func makeTransferFeeInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_TransferFeeRequest, Axelar_Nexus_V1beta1_TransferFeeResponse>]

  /// - Returns: Interceptors to use when invoking 'chains'.
  func makeChainsInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_ChainsRequest, Axelar_Nexus_V1beta1_ChainsResponse>]

  /// - Returns: Interceptors to use when invoking 'assets'.
  func makeAssetsInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_AssetsRequest, Axelar_Nexus_V1beta1_AssetsResponse>]

  /// - Returns: Interceptors to use when invoking 'chainState'.
  func makeChainStateInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_ChainStateRequest, Axelar_Nexus_V1beta1_ChainStateResponse>]

  /// - Returns: Interceptors to use when invoking 'chainsByAsset'.
  func makeChainsByAssetInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_ChainsByAssetRequest, Axelar_Nexus_V1beta1_ChainsByAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'recipientAddress'.
  func makeRecipientAddressInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_RecipientAddressRequest, Axelar_Nexus_V1beta1_RecipientAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'chainMaintainers'.
  func makeChainMaintainersInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_ChainMaintainersRequest, Axelar_Nexus_V1beta1_ChainMaintainersResponse>]

  /// - Returns: Interceptors to use when invoking 'transferRateLimit'.
  func makeTransferRateLimitInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_TransferRateLimitRequest, Axelar_Nexus_V1beta1_TransferRateLimitResponse>]

  /// - Returns: Interceptors to use when invoking 'message'.
  func makeMessageInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_MessageRequest, Axelar_Nexus_V1beta1_MessageResponse>]
}

internal enum Axelar_Nexus_V1beta1_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.nexus.v1beta1.QueryService",
    methods: [
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.latestDepositAddress,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transfersForChain,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.feeInfo,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferFee,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chains,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.assets,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainState,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainsByAsset,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.recipientAddress,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.chainMaintainers,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.transferRateLimit,
      Axelar_Nexus_V1beta1_QueryServiceClientMetadata.Methods.message,
    ]
  )

  internal enum Methods {
    internal static let latestDepositAddress = GRPCMethodDescriptor(
      name: "LatestDepositAddress",
      path: "/axelar.nexus.v1beta1.QueryService/LatestDepositAddress",
      type: GRPCCallType.unary
    )

    internal static let transfersForChain = GRPCMethodDescriptor(
      name: "TransfersForChain",
      path: "/axelar.nexus.v1beta1.QueryService/TransfersForChain",
      type: GRPCCallType.unary
    )

    internal static let feeInfo = GRPCMethodDescriptor(
      name: "FeeInfo",
      path: "/axelar.nexus.v1beta1.QueryService/FeeInfo",
      type: GRPCCallType.unary
    )

    internal static let transferFee = GRPCMethodDescriptor(
      name: "TransferFee",
      path: "/axelar.nexus.v1beta1.QueryService/TransferFee",
      type: GRPCCallType.unary
    )

    internal static let chains = GRPCMethodDescriptor(
      name: "Chains",
      path: "/axelar.nexus.v1beta1.QueryService/Chains",
      type: GRPCCallType.unary
    )

    internal static let assets = GRPCMethodDescriptor(
      name: "Assets",
      path: "/axelar.nexus.v1beta1.QueryService/Assets",
      type: GRPCCallType.unary
    )

    internal static let chainState = GRPCMethodDescriptor(
      name: "ChainState",
      path: "/axelar.nexus.v1beta1.QueryService/ChainState",
      type: GRPCCallType.unary
    )

    internal static let chainsByAsset = GRPCMethodDescriptor(
      name: "ChainsByAsset",
      path: "/axelar.nexus.v1beta1.QueryService/ChainsByAsset",
      type: GRPCCallType.unary
    )

    internal static let recipientAddress = GRPCMethodDescriptor(
      name: "RecipientAddress",
      path: "/axelar.nexus.v1beta1.QueryService/RecipientAddress",
      type: GRPCCallType.unary
    )

    internal static let chainMaintainers = GRPCMethodDescriptor(
      name: "ChainMaintainers",
      path: "/axelar.nexus.v1beta1.QueryService/ChainMaintainers",
      type: GRPCCallType.unary
    )

    internal static let transferRateLimit = GRPCMethodDescriptor(
      name: "TransferRateLimit",
      path: "/axelar.nexus.v1beta1.QueryService/TransferRateLimit",
      type: GRPCCallType.unary
    )

    internal static let message = GRPCMethodDescriptor(
      name: "Message",
      path: "/axelar.nexus.v1beta1.QueryService/Message",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the nexus Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Nexus_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Nexus_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func registerChainMaintainer(request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>

  func deregisterChainMaintainer(request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>

  func activateChain(request: Axelar_Nexus_V1beta1_ActivateChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_ActivateChainResponse>

  func deactivateChain(request: Axelar_Nexus_V1beta1_DeactivateChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_DeactivateChainResponse>

  func registerAssetFee(request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>

  func setTransferRateLimit(request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>
}

extension Axelar_Nexus_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Nexus_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterChainMaintainer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>(),
        interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? [],
        userFunction: self.registerChainMaintainer(request:context:)
      )

    case "DeregisterChainMaintainer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>(),
        interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? [],
        userFunction: self.deregisterChainMaintainer(request:context:)
      )

    case "ActivateChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ActivateChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ActivateChainResponse>(),
        interceptors: self.interceptors?.makeActivateChainInterceptors() ?? [],
        userFunction: self.activateChain(request:context:)
      )

    case "DeactivateChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_DeactivateChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_DeactivateChainResponse>(),
        interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? [],
        userFunction: self.deactivateChain(request:context:)
      )

    case "RegisterAssetFee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>(),
        interceptors: self.interceptors?.makeRegisterAssetFeeInterceptors() ?? [],
        userFunction: self.registerAssetFee(request:context:)
      )

    case "SetTransferRateLimit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>(),
        interceptors: self.interceptors?.makeSetTransferRateLimitInterceptors() ?? [],
        userFunction: self.setTransferRateLimit(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the nexus Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Nexus_V1beta1_MsgServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Nexus_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func registerChainMaintainer(
    request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse

  @Sendable func deregisterChainMaintainer(
    request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse

  @Sendable func activateChain(
    request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_ActivateChainResponse

  @Sendable func deactivateChain(
    request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_DeactivateChainResponse

  @Sendable func registerAssetFee(
    request: Axelar_Nexus_V1beta1_RegisterAssetFeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_RegisterAssetFeeResponse

  @Sendable func setTransferRateLimit(
    request: Axelar_Nexus_V1beta1_SetTransferRateLimitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_SetTransferRateLimitResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Nexus_V1beta1_MsgServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Nexus_V1beta1_MsgServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Nexus_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Nexus_V1beta1_MsgServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterChainMaintainer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>(),
        interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? [],
        wrapping: self.registerChainMaintainer(request:context:)
      )

    case "DeregisterChainMaintainer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>(),
        interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? [],
        wrapping: self.deregisterChainMaintainer(request:context:)
      )

    case "ActivateChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ActivateChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ActivateChainResponse>(),
        interceptors: self.interceptors?.makeActivateChainInterceptors() ?? [],
        wrapping: self.activateChain(request:context:)
      )

    case "DeactivateChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_DeactivateChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_DeactivateChainResponse>(),
        interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? [],
        wrapping: self.deactivateChain(request:context:)
      )

    case "RegisterAssetFee":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>(),
        interceptors: self.interceptors?.makeRegisterAssetFeeInterceptors() ?? [],
        wrapping: self.registerAssetFee(request:context:)
      )

    case "SetTransferRateLimit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>(),
        interceptors: self.interceptors?.makeSetTransferRateLimitInterceptors() ?? [],
        wrapping: self.setTransferRateLimit(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Nexus_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerChainMaintainer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterChainMaintainerInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when handling 'deregisterChainMaintainer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeregisterChainMaintainerInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when handling 'activateChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateChainInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>]

  /// - Returns: Interceptors to use when handling 'deactivateChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeactivateChainInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>]

  /// - Returns: Interceptors to use when handling 'registerAssetFee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterAssetFeeInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_RegisterAssetFeeRequest, Axelar_Nexus_V1beta1_RegisterAssetFeeResponse>]

  /// - Returns: Interceptors to use when handling 'setTransferRateLimit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetTransferRateLimitInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_SetTransferRateLimitRequest, Axelar_Nexus_V1beta1_SetTransferRateLimitResponse>]
}

internal enum Axelar_Nexus_V1beta1_MsgServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.nexus.v1beta1.MsgService",
    methods: [
      Axelar_Nexus_V1beta1_MsgServiceServerMetadata.Methods.registerChainMaintainer,
      Axelar_Nexus_V1beta1_MsgServiceServerMetadata.Methods.deregisterChainMaintainer,
      Axelar_Nexus_V1beta1_MsgServiceServerMetadata.Methods.activateChain,
      Axelar_Nexus_V1beta1_MsgServiceServerMetadata.Methods.deactivateChain,
      Axelar_Nexus_V1beta1_MsgServiceServerMetadata.Methods.registerAssetFee,
      Axelar_Nexus_V1beta1_MsgServiceServerMetadata.Methods.setTransferRateLimit,
    ]
  )

  internal enum Methods {
    internal static let registerChainMaintainer = GRPCMethodDescriptor(
      name: "RegisterChainMaintainer",
      path: "/axelar.nexus.v1beta1.MsgService/RegisterChainMaintainer",
      type: GRPCCallType.unary
    )

    internal static let deregisterChainMaintainer = GRPCMethodDescriptor(
      name: "DeregisterChainMaintainer",
      path: "/axelar.nexus.v1beta1.MsgService/DeregisterChainMaintainer",
      type: GRPCCallType.unary
    )

    internal static let activateChain = GRPCMethodDescriptor(
      name: "ActivateChain",
      path: "/axelar.nexus.v1beta1.MsgService/ActivateChain",
      type: GRPCCallType.unary
    )

    internal static let deactivateChain = GRPCMethodDescriptor(
      name: "DeactivateChain",
      path: "/axelar.nexus.v1beta1.MsgService/DeactivateChain",
      type: GRPCCallType.unary
    )

    internal static let registerAssetFee = GRPCMethodDescriptor(
      name: "RegisterAssetFee",
      path: "/axelar.nexus.v1beta1.MsgService/RegisterAssetFee",
      type: GRPCCallType.unary
    )

    internal static let setTransferRateLimit = GRPCMethodDescriptor(
      name: "SetTransferRateLimit",
      path: "/axelar.nexus.v1beta1.MsgService/SetTransferRateLimit",
      type: GRPCCallType.unary
    )
  }
}
/// QueryService defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Nexus_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Nexus_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// LatestDepositAddress queries the a deposit address by recipient
  func latestDepositAddress(request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_LatestDepositAddressResponse>

  /// TransfersForChain queries transfers by chain
  func transfersForChain(request: Axelar_Nexus_V1beta1_TransfersForChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_TransfersForChainResponse>

  /// FeeInfo queries the fee info by chain and asset
  func feeInfo(request: Axelar_Nexus_V1beta1_FeeInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_FeeInfoResponse>

  /// TransferFee queries the transfer fee by the source, destination chain,
  /// and amount. If amount is 0, the min fee is returned
  func transferFee(request: Axelar_Nexus_V1beta1_TransferFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_TransferFeeResponse>

  /// Chains queries the chains registered on the network
  func chains(request: Axelar_Nexus_V1beta1_ChainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_ChainsResponse>

  /// Assets queries the assets registered for a chain
  func assets(request: Axelar_Nexus_V1beta1_AssetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_AssetsResponse>

  /// ChainState queries the state of a registered chain on the network
  func chainState(request: Axelar_Nexus_V1beta1_ChainStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_ChainStateResponse>

  /// ChainsByAsset queries the chains that support an asset on the network
  func chainsByAsset(request: Axelar_Nexus_V1beta1_ChainsByAssetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_ChainsByAssetResponse>

  /// RecipientAddress queries the recipient address for a given deposit address
  func recipientAddress(request: Axelar_Nexus_V1beta1_RecipientAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_RecipientAddressResponse>

  /// ChainMaintainers queries the chain maintainers for a given chain
  func chainMaintainers(request: Axelar_Nexus_V1beta1_ChainMaintainersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_ChainMaintainersResponse>

  /// TransferRateLimit queries the transfer rate limit for a given chain and
  /// asset. If a rate limit is not set, nil is returned.
  func transferRateLimit(request: Axelar_Nexus_V1beta1_TransferRateLimitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_TransferRateLimitResponse>

  func message(request: Axelar_Nexus_V1beta1_MessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_MessageResponse>
}

extension Axelar_Nexus_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Nexus_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LatestDepositAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_LatestDepositAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_LatestDepositAddressResponse>(),
        interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? [],
        userFunction: self.latestDepositAddress(request:context:)
      )

    case "TransfersForChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransfersForChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransfersForChainResponse>(),
        interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? [],
        userFunction: self.transfersForChain(request:context:)
      )

    case "FeeInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_FeeInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_FeeInfoResponse>(),
        interceptors: self.interceptors?.makeFeeInfoInterceptors() ?? [],
        userFunction: self.feeInfo(request:context:)
      )

    case "TransferFee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransferFeeRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransferFeeResponse>(),
        interceptors: self.interceptors?.makeTransferFeeInterceptors() ?? [],
        userFunction: self.transferFee(request:context:)
      )

    case "Chains":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainsResponse>(),
        interceptors: self.interceptors?.makeChainsInterceptors() ?? [],
        userFunction: self.chains(request:context:)
      )

    case "Assets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_AssetsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_AssetsResponse>(),
        interceptors: self.interceptors?.makeAssetsInterceptors() ?? [],
        userFunction: self.assets(request:context:)
      )

    case "ChainState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainStateRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainStateResponse>(),
        interceptors: self.interceptors?.makeChainStateInterceptors() ?? [],
        userFunction: self.chainState(request:context:)
      )

    case "ChainsByAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainsByAssetRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainsByAssetResponse>(),
        interceptors: self.interceptors?.makeChainsByAssetInterceptors() ?? [],
        userFunction: self.chainsByAsset(request:context:)
      )

    case "RecipientAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RecipientAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RecipientAddressResponse>(),
        interceptors: self.interceptors?.makeRecipientAddressInterceptors() ?? [],
        userFunction: self.recipientAddress(request:context:)
      )

    case "ChainMaintainers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainMaintainersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainMaintainersResponse>(),
        interceptors: self.interceptors?.makeChainMaintainersInterceptors() ?? [],
        userFunction: self.chainMaintainers(request:context:)
      )

    case "TransferRateLimit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransferRateLimitRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransferRateLimitResponse>(),
        interceptors: self.interceptors?.makeTransferRateLimitInterceptors() ?? [],
        userFunction: self.transferRateLimit(request:context:)
      )

    case "Message":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_MessageRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_MessageResponse>(),
        interceptors: self.interceptors?.makeMessageInterceptors() ?? [],
        userFunction: self.message(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryService defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Nexus_V1beta1_QueryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Nexus_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// LatestDepositAddress queries the a deposit address by recipient
  @Sendable func latestDepositAddress(
    request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_LatestDepositAddressResponse

  /// TransfersForChain queries transfers by chain
  @Sendable func transfersForChain(
    request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_TransfersForChainResponse

  /// FeeInfo queries the fee info by chain and asset
  @Sendable func feeInfo(
    request: Axelar_Nexus_V1beta1_FeeInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_FeeInfoResponse

  /// TransferFee queries the transfer fee by the source, destination chain,
  /// and amount. If amount is 0, the min fee is returned
  @Sendable func transferFee(
    request: Axelar_Nexus_V1beta1_TransferFeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_TransferFeeResponse

  /// Chains queries the chains registered on the network
  @Sendable func chains(
    request: Axelar_Nexus_V1beta1_ChainsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_ChainsResponse

  /// Assets queries the assets registered for a chain
  @Sendable func assets(
    request: Axelar_Nexus_V1beta1_AssetsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_AssetsResponse

  /// ChainState queries the state of a registered chain on the network
  @Sendable func chainState(
    request: Axelar_Nexus_V1beta1_ChainStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_ChainStateResponse

  /// ChainsByAsset queries the chains that support an asset on the network
  @Sendable func chainsByAsset(
    request: Axelar_Nexus_V1beta1_ChainsByAssetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_ChainsByAssetResponse

  /// RecipientAddress queries the recipient address for a given deposit address
  @Sendable func recipientAddress(
    request: Axelar_Nexus_V1beta1_RecipientAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_RecipientAddressResponse

  /// ChainMaintainers queries the chain maintainers for a given chain
  @Sendable func chainMaintainers(
    request: Axelar_Nexus_V1beta1_ChainMaintainersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_ChainMaintainersResponse

  /// TransferRateLimit queries the transfer rate limit for a given chain and
  /// asset. If a rate limit is not set, nil is returned.
  @Sendable func transferRateLimit(
    request: Axelar_Nexus_V1beta1_TransferRateLimitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_TransferRateLimitResponse

  @Sendable func message(
    request: Axelar_Nexus_V1beta1_MessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Nexus_V1beta1_MessageResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Nexus_V1beta1_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Nexus_V1beta1_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Nexus_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Nexus_V1beta1_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LatestDepositAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_LatestDepositAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_LatestDepositAddressResponse>(),
        interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? [],
        wrapping: self.latestDepositAddress(request:context:)
      )

    case "TransfersForChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransfersForChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransfersForChainResponse>(),
        interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? [],
        wrapping: self.transfersForChain(request:context:)
      )

    case "FeeInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_FeeInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_FeeInfoResponse>(),
        interceptors: self.interceptors?.makeFeeInfoInterceptors() ?? [],
        wrapping: self.feeInfo(request:context:)
      )

    case "TransferFee":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransferFeeRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransferFeeResponse>(),
        interceptors: self.interceptors?.makeTransferFeeInterceptors() ?? [],
        wrapping: self.transferFee(request:context:)
      )

    case "Chains":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainsResponse>(),
        interceptors: self.interceptors?.makeChainsInterceptors() ?? [],
        wrapping: self.chains(request:context:)
      )

    case "Assets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_AssetsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_AssetsResponse>(),
        interceptors: self.interceptors?.makeAssetsInterceptors() ?? [],
        wrapping: self.assets(request:context:)
      )

    case "ChainState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainStateRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainStateResponse>(),
        interceptors: self.interceptors?.makeChainStateInterceptors() ?? [],
        wrapping: self.chainState(request:context:)
      )

    case "ChainsByAsset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainsByAssetRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainsByAssetResponse>(),
        interceptors: self.interceptors?.makeChainsByAssetInterceptors() ?? [],
        wrapping: self.chainsByAsset(request:context:)
      )

    case "RecipientAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RecipientAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RecipientAddressResponse>(),
        interceptors: self.interceptors?.makeRecipientAddressInterceptors() ?? [],
        wrapping: self.recipientAddress(request:context:)
      )

    case "ChainMaintainers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ChainMaintainersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ChainMaintainersResponse>(),
        interceptors: self.interceptors?.makeChainMaintainersInterceptors() ?? [],
        wrapping: self.chainMaintainers(request:context:)
      )

    case "TransferRateLimit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransferRateLimitRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransferRateLimitResponse>(),
        interceptors: self.interceptors?.makeTransferRateLimitInterceptors() ?? [],
        wrapping: self.transferRateLimit(request:context:)
      )

    case "Message":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_MessageRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_MessageResponse>(),
        interceptors: self.interceptors?.makeMessageInterceptors() ?? [],
        wrapping: self.message(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Nexus_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'latestDepositAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLatestDepositAddressInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>]

  /// - Returns: Interceptors to use when handling 'transfersForChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransfersForChainInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>]

  /// - Returns: Interceptors to use when handling 'feeInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeInfoInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_FeeInfoRequest, Axelar_Nexus_V1beta1_FeeInfoResponse>]

  /// - Returns: Interceptors to use when handling 'transferFee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferFeeInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_TransferFeeRequest, Axelar_Nexus_V1beta1_TransferFeeResponse>]

  /// - Returns: Interceptors to use when handling 'chains'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainsInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_ChainsRequest, Axelar_Nexus_V1beta1_ChainsResponse>]

  /// - Returns: Interceptors to use when handling 'assets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetsInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_AssetsRequest, Axelar_Nexus_V1beta1_AssetsResponse>]

  /// - Returns: Interceptors to use when handling 'chainState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainStateInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_ChainStateRequest, Axelar_Nexus_V1beta1_ChainStateResponse>]

  /// - Returns: Interceptors to use when handling 'chainsByAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainsByAssetInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_ChainsByAssetRequest, Axelar_Nexus_V1beta1_ChainsByAssetResponse>]

  /// - Returns: Interceptors to use when handling 'recipientAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecipientAddressInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_RecipientAddressRequest, Axelar_Nexus_V1beta1_RecipientAddressResponse>]

  /// - Returns: Interceptors to use when handling 'chainMaintainers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainMaintainersInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_ChainMaintainersRequest, Axelar_Nexus_V1beta1_ChainMaintainersResponse>]

  /// - Returns: Interceptors to use when handling 'transferRateLimit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferRateLimitInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_TransferRateLimitRequest, Axelar_Nexus_V1beta1_TransferRateLimitResponse>]

  /// - Returns: Interceptors to use when handling 'message'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMessageInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_MessageRequest, Axelar_Nexus_V1beta1_MessageResponse>]
}

internal enum Axelar_Nexus_V1beta1_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.nexus.v1beta1.QueryService",
    methods: [
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.latestDepositAddress,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.transfersForChain,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.feeInfo,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.transferFee,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.chains,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.assets,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.chainState,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.chainsByAsset,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.recipientAddress,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.chainMaintainers,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.transferRateLimit,
      Axelar_Nexus_V1beta1_QueryServiceServerMetadata.Methods.message,
    ]
  )

  internal enum Methods {
    internal static let latestDepositAddress = GRPCMethodDescriptor(
      name: "LatestDepositAddress",
      path: "/axelar.nexus.v1beta1.QueryService/LatestDepositAddress",
      type: GRPCCallType.unary
    )

    internal static let transfersForChain = GRPCMethodDescriptor(
      name: "TransfersForChain",
      path: "/axelar.nexus.v1beta1.QueryService/TransfersForChain",
      type: GRPCCallType.unary
    )

    internal static let feeInfo = GRPCMethodDescriptor(
      name: "FeeInfo",
      path: "/axelar.nexus.v1beta1.QueryService/FeeInfo",
      type: GRPCCallType.unary
    )

    internal static let transferFee = GRPCMethodDescriptor(
      name: "TransferFee",
      path: "/axelar.nexus.v1beta1.QueryService/TransferFee",
      type: GRPCCallType.unary
    )

    internal static let chains = GRPCMethodDescriptor(
      name: "Chains",
      path: "/axelar.nexus.v1beta1.QueryService/Chains",
      type: GRPCCallType.unary
    )

    internal static let assets = GRPCMethodDescriptor(
      name: "Assets",
      path: "/axelar.nexus.v1beta1.QueryService/Assets",
      type: GRPCCallType.unary
    )

    internal static let chainState = GRPCMethodDescriptor(
      name: "ChainState",
      path: "/axelar.nexus.v1beta1.QueryService/ChainState",
      type: GRPCCallType.unary
    )

    internal static let chainsByAsset = GRPCMethodDescriptor(
      name: "ChainsByAsset",
      path: "/axelar.nexus.v1beta1.QueryService/ChainsByAsset",
      type: GRPCCallType.unary
    )

    internal static let recipientAddress = GRPCMethodDescriptor(
      name: "RecipientAddress",
      path: "/axelar.nexus.v1beta1.QueryService/RecipientAddress",
      type: GRPCCallType.unary
    )

    internal static let chainMaintainers = GRPCMethodDescriptor(
      name: "ChainMaintainers",
      path: "/axelar.nexus.v1beta1.QueryService/ChainMaintainers",
      type: GRPCCallType.unary
    )

    internal static let transferRateLimit = GRPCMethodDescriptor(
      name: "TransferRateLimit",
      path: "/axelar.nexus.v1beta1.QueryService/TransferRateLimit",
      type: GRPCCallType.unary
    )

    internal static let message = GRPCMethodDescriptor(
      name: "Message",
      path: "/axelar.nexus.v1beta1.QueryService/Message",
      type: GRPCCallType.unary
    )
  }
}
