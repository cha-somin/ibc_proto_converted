// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lum-network/millions/withdrawal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Lum_Network_Millions_WithdrawalState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case icaUndelegate // = 1
  case icaUnbonding // = 2
  case ibcTransfer // = 3
  case failure // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .icaUndelegate
    case 2: self = .icaUnbonding
    case 3: self = .ibcTransfer
    case 4: self = .failure
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .icaUndelegate: return 1
    case .icaUnbonding: return 2
    case .ibcTransfer: return 3
    case .failure: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Lum_Network_Millions_WithdrawalState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Lum_Network_Millions_WithdrawalState] = [
    .unspecified,
    .icaUndelegate,
    .icaUnbonding,
    .ibcTransfer,
    .failure,
  ]
}

#endif  // swift(>=4.2)

struct Lum_Network_Millions_Withdrawal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 {
    get {return _storage._poolID}
    set {_uniqueStorage()._poolID = newValue}
  }

  var depositID: UInt64 {
    get {return _storage._depositID}
    set {_uniqueStorage()._depositID = newValue}
  }

  var withdrawalID: UInt64 {
    get {return _storage._withdrawalID}
    set {_uniqueStorage()._withdrawalID = newValue}
  }

  var state: Lum_Network_Millions_WithdrawalState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var errorState: Lum_Network_Millions_WithdrawalState {
    get {return _storage._errorState}
    set {_uniqueStorage()._errorState = newValue}
  }

  var depositorAddress: String {
    get {return _storage._depositorAddress}
    set {_uniqueStorage()._depositorAddress = newValue}
  }

  var toAddress: String {
    get {return _storage._toAddress}
    set {_uniqueStorage()._toAddress = newValue}
  }

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _storage._amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var createdAtHeight: Int64 {
    get {return _storage._createdAtHeight}
    set {_uniqueStorage()._createdAtHeight = newValue}
  }

  var updatedAtHeight: Int64 {
    get {return _storage._updatedAtHeight}
    set {_uniqueStorage()._updatedAtHeight = newValue}
  }

  var unbondingEndsAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._unbondingEndsAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._unbondingEndsAt = newValue}
  }
  /// Returns true if `unbondingEndsAt` has been explicitly set.
  var hasUnbondingEndsAt: Bool {return _storage._unbondingEndsAt != nil}
  /// Clears the value of `unbondingEndsAt`. Subsequent reads from it will return its default value.
  mutating func clearUnbondingEndsAt() {_uniqueStorage()._unbondingEndsAt = nil}

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lum_Network_Millions_WithdrawalIDs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var withdrawalID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Lum_Network_Millions_WithdrawalIDsCollection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var withdrawalsIds: [Lum_Network_Millions_WithdrawalIDs] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Lum_Network_Millions_WithdrawalState: @unchecked Sendable {}
extension Lum_Network_Millions_Withdrawal: @unchecked Sendable {}
extension Lum_Network_Millions_WithdrawalIDs: @unchecked Sendable {}
extension Lum_Network_Millions_WithdrawalIDsCollection: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lum.network.millions"

extension Lum_Network_Millions_WithdrawalState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WITHDRAWAL_STATE_UNSPECIFIED"),
    1: .same(proto: "WITHDRAWAL_STATE_ICA_UNDELEGATE"),
    2: .same(proto: "WITHDRAWAL_STATE_ICA_UNBONDING"),
    3: .same(proto: "WITHDRAWAL_STATE_IBC_TRANSFER"),
    4: .same(proto: "WITHDRAWAL_STATE_FAILURE"),
  ]
}

extension Lum_Network_Millions_Withdrawal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Withdrawal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "deposit_id"),
    3: .standard(proto: "withdrawal_id"),
    4: .same(proto: "state"),
    5: .standard(proto: "error_state"),
    6: .standard(proto: "depositor_address"),
    7: .standard(proto: "to_address"),
    8: .same(proto: "amount"),
    9: .standard(proto: "created_at_height"),
    10: .standard(proto: "updated_at_height"),
    11: .standard(proto: "unbonding_ends_at"),
    12: .standard(proto: "created_at"),
    13: .standard(proto: "updated_at"),
  ]

  fileprivate class _StorageClass {
    var _poolID: UInt64 = 0
    var _depositID: UInt64 = 0
    var _withdrawalID: UInt64 = 0
    var _state: Lum_Network_Millions_WithdrawalState = .unspecified
    var _errorState: Lum_Network_Millions_WithdrawalState = .unspecified
    var _depositorAddress: String = String()
    var _toAddress: String = String()
    var _amount: Cosmos_Base_V1beta1_Coin? = nil
    var _createdAtHeight: Int64 = 0
    var _updatedAtHeight: Int64 = 0
    var _unbondingEndsAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _poolID = source._poolID
      _depositID = source._depositID
      _withdrawalID = source._withdrawalID
      _state = source._state
      _errorState = source._errorState
      _depositorAddress = source._depositorAddress
      _toAddress = source._toAddress
      _amount = source._amount
      _createdAtHeight = source._createdAtHeight
      _updatedAtHeight = source._updatedAtHeight
      _unbondingEndsAt = source._unbondingEndsAt
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._poolID) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._depositID) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._withdrawalID) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._errorState) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._depositorAddress) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._toAddress) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._amount) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._createdAtHeight) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._updatedAtHeight) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._unbondingEndsAt) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._poolID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._poolID, fieldNumber: 1)
      }
      if _storage._depositID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._depositID, fieldNumber: 2)
      }
      if _storage._withdrawalID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._withdrawalID, fieldNumber: 3)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 4)
      }
      if _storage._errorState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._errorState, fieldNumber: 5)
      }
      if !_storage._depositorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._depositorAddress, fieldNumber: 6)
      }
      if !_storage._toAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._toAddress, fieldNumber: 7)
      }
      try { if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._createdAtHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAtHeight, fieldNumber: 9)
      }
      if _storage._updatedAtHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._updatedAtHeight, fieldNumber: 10)
      }
      try { if let v = _storage._unbondingEndsAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_Withdrawal, rhs: Lum_Network_Millions_Withdrawal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._poolID != rhs_storage._poolID {return false}
        if _storage._depositID != rhs_storage._depositID {return false}
        if _storage._withdrawalID != rhs_storage._withdrawalID {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._errorState != rhs_storage._errorState {return false}
        if _storage._depositorAddress != rhs_storage._depositorAddress {return false}
        if _storage._toAddress != rhs_storage._toAddress {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._createdAtHeight != rhs_storage._createdAtHeight {return false}
        if _storage._updatedAtHeight != rhs_storage._updatedAtHeight {return false}
        if _storage._unbondingEndsAt != rhs_storage._unbondingEndsAt {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_WithdrawalIDs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WithdrawalIDs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "withdrawal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.withdrawalID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if self.withdrawalID != 0 {
      try visitor.visitSingularUInt64Field(value: self.withdrawalID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_WithdrawalIDs, rhs: Lum_Network_Millions_WithdrawalIDs) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.withdrawalID != rhs.withdrawalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Lum_Network_Millions_WithdrawalIDsCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WithdrawalIDsCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "withdrawals_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.withdrawalsIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.withdrawalsIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.withdrawalsIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lum_Network_Millions_WithdrawalIDsCollection, rhs: Lum_Network_Millions_WithdrawalIDsCollection) -> Bool {
    if lhs.withdrawalsIds != rhs.withdrawalsIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
