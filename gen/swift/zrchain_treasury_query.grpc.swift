//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: zrchain/treasury/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Zrchain_Treasury_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Zrchain_Treasury_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Zrchain_Treasury_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryParamsRequest, Zrchain_Treasury_QueryParamsResponse>

  func keyRequests(
    _ request: Zrchain_Treasury_QueryKeyRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyRequestsRequest, Zrchain_Treasury_QueryKeyRequestsResponse>

  func keyRequestByID(
    _ request: Zrchain_Treasury_QueryKeyRequestByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyRequestByIDRequest, Zrchain_Treasury_QueryKeyRequestByIDResponse>

  func keys(
    _ request: Zrchain_Treasury_QueryKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryKeysRequest, Zrchain_Treasury_QueryKeysResponse>

  func keyByID(
    _ request: Zrchain_Treasury_QueryKeyByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyByIDRequest, Zrchain_Treasury_QueryKeyByIDResponse>

  func signatureRequests(
    _ request: Zrchain_Treasury_QuerySignatureRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QuerySignatureRequestsRequest, Zrchain_Treasury_QuerySignatureRequestsResponse>

  func signatureRequestByID(
    _ request: Zrchain_Treasury_QuerySignatureRequestByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QuerySignatureRequestByIDRequest, Zrchain_Treasury_QuerySignatureRequestByIDResponse>

  func signTransactionRequests(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QuerySignTransactionRequestsRequest, Zrchain_Treasury_QuerySignTransactionRequestsResponse>

  func signTransactionRequestByID(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>

  func zrSignKeys(
    _ request: Zrchain_Treasury_QueryZrSignKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryZrSignKeysRequest, Zrchain_Treasury_QueryZrSignKeysResponse>

  func keyByAddress(
    _ request: Zrchain_Treasury_QueryKeyByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyByAddressRequest, Zrchain_Treasury_QueryKeyByAddressResponse>

  func zenbtcWallets(
    _ request: Zrchain_Treasury_QueryZenbtcWalletsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Treasury_QueryZenbtcWalletsRequest, Zrchain_Treasury_QueryZenbtcWalletsResponse>
}

extension Zrchain_Treasury_QueryClientProtocol {
  internal var serviceName: String {
    return "zrchain.treasury.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Zrchain_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryParamsRequest, Zrchain_Treasury_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Queries a list of KeyRequests items.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyRequests(
    _ request: Zrchain_Treasury_QueryKeyRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyRequestsRequest, Zrchain_Treasury_QueryKeyRequestsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyRequestsInterceptors() ?? []
    )
  }

  /// Queries a list of KeyRequestByID items.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyRequestByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyRequestByID(
    _ request: Zrchain_Treasury_QueryKeyRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyRequestByIDRequest, Zrchain_Treasury_QueryKeyRequestByIDResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyRequestByIDInterceptors() ?? []
    )
  }

  /// Queries a list of Keys items.
  ///
  /// - Parameters:
  ///   - request: Request to send to Keys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keys(
    _ request: Zrchain_Treasury_QueryKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryKeysRequest, Zrchain_Treasury_QueryKeysResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeysInterceptors() ?? []
    )
  }

  /// Queries a list of KeyByID items.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyByID(
    _ request: Zrchain_Treasury_QueryKeyByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyByIDRequest, Zrchain_Treasury_QueryKeyByIDResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyByIDInterceptors() ?? []
    )
  }

  /// Queries a list of SignatureRequests items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignatureRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signatureRequests(
    _ request: Zrchain_Treasury_QuerySignatureRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QuerySignatureRequestsRequest, Zrchain_Treasury_QuerySignatureRequestsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignatureRequestsInterceptors() ?? []
    )
  }

  /// Queries a list of SignatureRequestByID items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignatureRequestByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signatureRequestByID(
    _ request: Zrchain_Treasury_QuerySignatureRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QuerySignatureRequestByIDRequest, Zrchain_Treasury_QuerySignatureRequestByIDResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignatureRequestByIDInterceptors() ?? []
    )
  }

  /// Queries a list of SignTransactionRequests items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignTransactionRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signTransactionRequests(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QuerySignTransactionRequestsRequest, Zrchain_Treasury_QuerySignTransactionRequestsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignTransactionRequestsInterceptors() ?? []
    )
  }

  /// Queries a list of SignTransactionRequestByID items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignTransactionRequestByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signTransactionRequestByID(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, Zrchain_Treasury_QuerySignTransactionRequestByIDResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignTransactionRequestByIDInterceptors() ?? []
    )
  }

  /// Queries a list of ZrSignKeys items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ZrSignKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func zrSignKeys(
    _ request: Zrchain_Treasury_QueryZrSignKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryZrSignKeysRequest, Zrchain_Treasury_QueryZrSignKeysResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.zrSignKeys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZrSignKeysInterceptors() ?? []
    )
  }

  /// Queries a list of KeyByAddress items.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyByAddress(
    _ request: Zrchain_Treasury_QueryKeyByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryKeyByAddressRequest, Zrchain_Treasury_QueryKeyByAddressResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyByAddressInterceptors() ?? []
    )
  }

  /// Queries a list of ZenbtcWallets items.
  ///
  /// - Parameters:
  ///   - request: Request to send to ZenbtcWallets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func zenbtcWallets(
    _ request: Zrchain_Treasury_QueryZenbtcWalletsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Treasury_QueryZenbtcWalletsRequest, Zrchain_Treasury_QueryZenbtcWalletsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.zenbtcWallets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZenbtcWalletsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Zrchain_Treasury_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Zrchain_Treasury_QueryNIOClient")
internal final class Zrchain_Treasury_QueryClient: Zrchain_Treasury_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the zrchain.treasury.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Zrchain_Treasury_QueryNIOClient: Zrchain_Treasury_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the zrchain.treasury.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Treasury_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Zrchain_Treasury_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryParamsRequest, Zrchain_Treasury_QueryParamsResponse>

  func makeKeyRequestsCall(
    _ request: Zrchain_Treasury_QueryKeyRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyRequestsRequest, Zrchain_Treasury_QueryKeyRequestsResponse>

  func makeKeyRequestByIDCall(
    _ request: Zrchain_Treasury_QueryKeyRequestByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyRequestByIDRequest, Zrchain_Treasury_QueryKeyRequestByIDResponse>

  func makeKeysCall(
    _ request: Zrchain_Treasury_QueryKeysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeysRequest, Zrchain_Treasury_QueryKeysResponse>

  func makeKeyByIDCall(
    _ request: Zrchain_Treasury_QueryKeyByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyByIDRequest, Zrchain_Treasury_QueryKeyByIDResponse>

  func makeSignatureRequestsCall(
    _ request: Zrchain_Treasury_QuerySignatureRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignatureRequestsRequest, Zrchain_Treasury_QuerySignatureRequestsResponse>

  func makeSignatureRequestByIDCall(
    _ request: Zrchain_Treasury_QuerySignatureRequestByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignatureRequestByIDRequest, Zrchain_Treasury_QuerySignatureRequestByIDResponse>

  func makeSignTransactionRequestsCall(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignTransactionRequestsRequest, Zrchain_Treasury_QuerySignTransactionRequestsResponse>

  func makeSignTransactionRequestByIDCall(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>

  func makeZrSignKeysCall(
    _ request: Zrchain_Treasury_QueryZrSignKeysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryZrSignKeysRequest, Zrchain_Treasury_QueryZrSignKeysResponse>

  func makeKeyByAddressCall(
    _ request: Zrchain_Treasury_QueryKeyByAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyByAddressRequest, Zrchain_Treasury_QueryKeyByAddressResponse>

  func makeZenbtcWalletsCall(
    _ request: Zrchain_Treasury_QueryZenbtcWalletsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryZenbtcWalletsRequest, Zrchain_Treasury_QueryZenbtcWalletsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Treasury_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Treasury_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Zrchain_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryParamsRequest, Zrchain_Treasury_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeKeyRequestsCall(
    _ request: Zrchain_Treasury_QueryKeyRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyRequestsRequest, Zrchain_Treasury_QueryKeyRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyRequestsInterceptors() ?? []
    )
  }

  internal func makeKeyRequestByIDCall(
    _ request: Zrchain_Treasury_QueryKeyRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyRequestByIDRequest, Zrchain_Treasury_QueryKeyRequestByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyRequestByIDInterceptors() ?? []
    )
  }

  internal func makeKeysCall(
    _ request: Zrchain_Treasury_QueryKeysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeysRequest, Zrchain_Treasury_QueryKeysResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeysInterceptors() ?? []
    )
  }

  internal func makeKeyByIDCall(
    _ request: Zrchain_Treasury_QueryKeyByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyByIDRequest, Zrchain_Treasury_QueryKeyByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyByIDInterceptors() ?? []
    )
  }

  internal func makeSignatureRequestsCall(
    _ request: Zrchain_Treasury_QuerySignatureRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignatureRequestsRequest, Zrchain_Treasury_QuerySignatureRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignatureRequestsInterceptors() ?? []
    )
  }

  internal func makeSignatureRequestByIDCall(
    _ request: Zrchain_Treasury_QuerySignatureRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignatureRequestByIDRequest, Zrchain_Treasury_QuerySignatureRequestByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignatureRequestByIDInterceptors() ?? []
    )
  }

  internal func makeSignTransactionRequestsCall(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignTransactionRequestsRequest, Zrchain_Treasury_QuerySignTransactionRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignTransactionRequestsInterceptors() ?? []
    )
  }

  internal func makeSignTransactionRequestByIDCall(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, Zrchain_Treasury_QuerySignTransactionRequestByIDResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignTransactionRequestByIDInterceptors() ?? []
    )
  }

  internal func makeZrSignKeysCall(
    _ request: Zrchain_Treasury_QueryZrSignKeysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryZrSignKeysRequest, Zrchain_Treasury_QueryZrSignKeysResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.zrSignKeys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZrSignKeysInterceptors() ?? []
    )
  }

  internal func makeKeyByAddressCall(
    _ request: Zrchain_Treasury_QueryKeyByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryKeyByAddressRequest, Zrchain_Treasury_QueryKeyByAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyByAddressInterceptors() ?? []
    )
  }

  internal func makeZenbtcWalletsCall(
    _ request: Zrchain_Treasury_QueryZenbtcWalletsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Treasury_QueryZenbtcWalletsRequest, Zrchain_Treasury_QueryZenbtcWalletsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.zenbtcWallets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZenbtcWalletsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Treasury_QueryAsyncClientProtocol {
  internal func params(
    _ request: Zrchain_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func keyRequests(
    _ request: Zrchain_Treasury_QueryKeyRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryKeyRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyRequestsInterceptors() ?? []
    )
  }

  internal func keyRequestByID(
    _ request: Zrchain_Treasury_QueryKeyRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryKeyRequestByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyRequestByIDInterceptors() ?? []
    )
  }

  internal func keys(
    _ request: Zrchain_Treasury_QueryKeysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryKeysResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeysInterceptors() ?? []
    )
  }

  internal func keyByID(
    _ request: Zrchain_Treasury_QueryKeyByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryKeyByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyByIDInterceptors() ?? []
    )
  }

  internal func signatureRequests(
    _ request: Zrchain_Treasury_QuerySignatureRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QuerySignatureRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignatureRequestsInterceptors() ?? []
    )
  }

  internal func signatureRequestByID(
    _ request: Zrchain_Treasury_QuerySignatureRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QuerySignatureRequestByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignatureRequestByIDInterceptors() ?? []
    )
  }

  internal func signTransactionRequests(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QuerySignTransactionRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignTransactionRequestsInterceptors() ?? []
    )
  }

  internal func signTransactionRequestByID(
    _ request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QuerySignTransactionRequestByIDResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequestByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignTransactionRequestByIDInterceptors() ?? []
    )
  }

  internal func zrSignKeys(
    _ request: Zrchain_Treasury_QueryZrSignKeysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryZrSignKeysResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.zrSignKeys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZrSignKeysInterceptors() ?? []
    )
  }

  internal func keyByAddress(
    _ request: Zrchain_Treasury_QueryKeyByAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryKeyByAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.keyByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyByAddressInterceptors() ?? []
    )
  }

  internal func zenbtcWallets(
    _ request: Zrchain_Treasury_QueryZenbtcWalletsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Treasury_QueryZenbtcWalletsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Treasury_QueryClientMetadata.Methods.zenbtcWallets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeZenbtcWalletsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Zrchain_Treasury_QueryAsyncClient: Zrchain_Treasury_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Zrchain_Treasury_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryParamsRequest, Zrchain_Treasury_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'keyRequests'.
  func makeKeyRequestsInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryKeyRequestsRequest, Zrchain_Treasury_QueryKeyRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'keyRequestByID'.
  func makeKeyRequestByIDInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryKeyRequestByIDRequest, Zrchain_Treasury_QueryKeyRequestByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'keys'.
  func makeKeysInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryKeysRequest, Zrchain_Treasury_QueryKeysResponse>]

  /// - Returns: Interceptors to use when invoking 'keyByID'.
  func makeKeyByIDInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryKeyByIDRequest, Zrchain_Treasury_QueryKeyByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'signatureRequests'.
  func makeSignatureRequestsInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QuerySignatureRequestsRequest, Zrchain_Treasury_QuerySignatureRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'signatureRequestByID'.
  func makeSignatureRequestByIDInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QuerySignatureRequestByIDRequest, Zrchain_Treasury_QuerySignatureRequestByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'signTransactionRequests'.
  func makeSignTransactionRequestsInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QuerySignTransactionRequestsRequest, Zrchain_Treasury_QuerySignTransactionRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'signTransactionRequestByID'.
  func makeSignTransactionRequestByIDInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'zrSignKeys'.
  func makeZrSignKeysInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryZrSignKeysRequest, Zrchain_Treasury_QueryZrSignKeysResponse>]

  /// - Returns: Interceptors to use when invoking 'keyByAddress'.
  func makeKeyByAddressInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryKeyByAddressRequest, Zrchain_Treasury_QueryKeyByAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'zenbtcWallets'.
  func makeZenbtcWalletsInterceptors() -> [ClientInterceptor<Zrchain_Treasury_QueryZenbtcWalletsRequest, Zrchain_Treasury_QueryZenbtcWalletsResponse>]
}

internal enum Zrchain_Treasury_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "zrchain.treasury.Query",
    methods: [
      Zrchain_Treasury_QueryClientMetadata.Methods.params,
      Zrchain_Treasury_QueryClientMetadata.Methods.keyRequests,
      Zrchain_Treasury_QueryClientMetadata.Methods.keyRequestByID,
      Zrchain_Treasury_QueryClientMetadata.Methods.keys,
      Zrchain_Treasury_QueryClientMetadata.Methods.keyByID,
      Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequests,
      Zrchain_Treasury_QueryClientMetadata.Methods.signatureRequestByID,
      Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequests,
      Zrchain_Treasury_QueryClientMetadata.Methods.signTransactionRequestByID,
      Zrchain_Treasury_QueryClientMetadata.Methods.zrSignKeys,
      Zrchain_Treasury_QueryClientMetadata.Methods.keyByAddress,
      Zrchain_Treasury_QueryClientMetadata.Methods.zenbtcWallets,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/zrchain.treasury.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let keyRequests = GRPCMethodDescriptor(
      name: "KeyRequests",
      path: "/zrchain.treasury.Query/KeyRequests",
      type: GRPCCallType.unary
    )

    internal static let keyRequestByID = GRPCMethodDescriptor(
      name: "KeyRequestByID",
      path: "/zrchain.treasury.Query/KeyRequestByID",
      type: GRPCCallType.unary
    )

    internal static let keys = GRPCMethodDescriptor(
      name: "Keys",
      path: "/zrchain.treasury.Query/Keys",
      type: GRPCCallType.unary
    )

    internal static let keyByID = GRPCMethodDescriptor(
      name: "KeyByID",
      path: "/zrchain.treasury.Query/KeyByID",
      type: GRPCCallType.unary
    )

    internal static let signatureRequests = GRPCMethodDescriptor(
      name: "SignatureRequests",
      path: "/zrchain.treasury.Query/SignatureRequests",
      type: GRPCCallType.unary
    )

    internal static let signatureRequestByID = GRPCMethodDescriptor(
      name: "SignatureRequestByID",
      path: "/zrchain.treasury.Query/SignatureRequestByID",
      type: GRPCCallType.unary
    )

    internal static let signTransactionRequests = GRPCMethodDescriptor(
      name: "SignTransactionRequests",
      path: "/zrchain.treasury.Query/SignTransactionRequests",
      type: GRPCCallType.unary
    )

    internal static let signTransactionRequestByID = GRPCMethodDescriptor(
      name: "SignTransactionRequestByID",
      path: "/zrchain.treasury.Query/SignTransactionRequestByID",
      type: GRPCCallType.unary
    )

    internal static let zrSignKeys = GRPCMethodDescriptor(
      name: "ZrSignKeys",
      path: "/zrchain.treasury.Query/ZrSignKeys",
      type: GRPCCallType.unary
    )

    internal static let keyByAddress = GRPCMethodDescriptor(
      name: "KeyByAddress",
      path: "/zrchain.treasury.Query/KeyByAddress",
      type: GRPCCallType.unary
    )

    internal static let zenbtcWallets = GRPCMethodDescriptor(
      name: "ZenbtcWallets",
      path: "/zrchain.treasury.Query/ZenbtcWallets",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Zrchain_Treasury_QueryProvider: CallHandlerProvider {
  var interceptors: Zrchain_Treasury_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Zrchain_Treasury_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryParamsResponse>

  /// Queries a list of KeyRequests items.
  func keyRequests(request: Zrchain_Treasury_QueryKeyRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryKeyRequestsResponse>

  /// Queries a list of KeyRequestByID items.
  func keyRequestByID(request: Zrchain_Treasury_QueryKeyRequestByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryKeyRequestByIDResponse>

  /// Queries a list of Keys items.
  func keys(request: Zrchain_Treasury_QueryKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryKeysResponse>

  /// Queries a list of KeyByID items.
  func keyByID(request: Zrchain_Treasury_QueryKeyByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryKeyByIDResponse>

  /// Queries a list of SignatureRequests items.
  func signatureRequests(request: Zrchain_Treasury_QuerySignatureRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QuerySignatureRequestsResponse>

  /// Queries a list of SignatureRequestByID items.
  func signatureRequestByID(request: Zrchain_Treasury_QuerySignatureRequestByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QuerySignatureRequestByIDResponse>

  /// Queries a list of SignTransactionRequests items.
  func signTransactionRequests(request: Zrchain_Treasury_QuerySignTransactionRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QuerySignTransactionRequestsResponse>

  /// Queries a list of SignTransactionRequestByID items.
  func signTransactionRequestByID(request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>

  /// Queries a list of ZrSignKeys items.
  func zrSignKeys(request: Zrchain_Treasury_QueryZrSignKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryZrSignKeysResponse>

  /// Queries a list of KeyByAddress items.
  func keyByAddress(request: Zrchain_Treasury_QueryKeyByAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryKeyByAddressResponse>

  /// Queries a list of ZenbtcWallets items.
  func zenbtcWallets(request: Zrchain_Treasury_QueryZenbtcWalletsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Treasury_QueryZenbtcWalletsResponse>
}

extension Zrchain_Treasury_QueryProvider {
  internal var serviceName: Substring {
    return Zrchain_Treasury_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "KeyRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyRequestsResponse>(),
        interceptors: self.interceptors?.makeKeyRequestsInterceptors() ?? [],
        userFunction: self.keyRequests(request:context:)
      )

    case "KeyRequestByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyRequestByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyRequestByIDResponse>(),
        interceptors: self.interceptors?.makeKeyRequestByIDInterceptors() ?? [],
        userFunction: self.keyRequestByID(request:context:)
      )

    case "Keys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeysRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeysResponse>(),
        interceptors: self.interceptors?.makeKeysInterceptors() ?? [],
        userFunction: self.keys(request:context:)
      )

    case "KeyByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyByIDResponse>(),
        interceptors: self.interceptors?.makeKeyByIDInterceptors() ?? [],
        userFunction: self.keyByID(request:context:)
      )

    case "SignatureRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignatureRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignatureRequestsResponse>(),
        interceptors: self.interceptors?.makeSignatureRequestsInterceptors() ?? [],
        userFunction: self.signatureRequests(request:context:)
      )

    case "SignatureRequestByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignatureRequestByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignatureRequestByIDResponse>(),
        interceptors: self.interceptors?.makeSignatureRequestByIDInterceptors() ?? [],
        userFunction: self.signatureRequestByID(request:context:)
      )

    case "SignTransactionRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignTransactionRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignTransactionRequestsResponse>(),
        interceptors: self.interceptors?.makeSignTransactionRequestsInterceptors() ?? [],
        userFunction: self.signTransactionRequests(request:context:)
      )

    case "SignTransactionRequestByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>(),
        interceptors: self.interceptors?.makeSignTransactionRequestByIDInterceptors() ?? [],
        userFunction: self.signTransactionRequestByID(request:context:)
      )

    case "ZrSignKeys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryZrSignKeysRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryZrSignKeysResponse>(),
        interceptors: self.interceptors?.makeZrSignKeysInterceptors() ?? [],
        userFunction: self.zrSignKeys(request:context:)
      )

    case "KeyByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyByAddressResponse>(),
        interceptors: self.interceptors?.makeKeyByAddressInterceptors() ?? [],
        userFunction: self.keyByAddress(request:context:)
      )

    case "ZenbtcWallets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryZenbtcWalletsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryZenbtcWalletsResponse>(),
        interceptors: self.interceptors?.makeZenbtcWalletsInterceptors() ?? [],
        userFunction: self.zenbtcWallets(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Treasury_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Treasury_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Zrchain_Treasury_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryParamsResponse

  /// Queries a list of KeyRequests items.
  @Sendable func keyRequests(
    request: Zrchain_Treasury_QueryKeyRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryKeyRequestsResponse

  /// Queries a list of KeyRequestByID items.
  @Sendable func keyRequestByID(
    request: Zrchain_Treasury_QueryKeyRequestByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryKeyRequestByIDResponse

  /// Queries a list of Keys items.
  @Sendable func keys(
    request: Zrchain_Treasury_QueryKeysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryKeysResponse

  /// Queries a list of KeyByID items.
  @Sendable func keyByID(
    request: Zrchain_Treasury_QueryKeyByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryKeyByIDResponse

  /// Queries a list of SignatureRequests items.
  @Sendable func signatureRequests(
    request: Zrchain_Treasury_QuerySignatureRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QuerySignatureRequestsResponse

  /// Queries a list of SignatureRequestByID items.
  @Sendable func signatureRequestByID(
    request: Zrchain_Treasury_QuerySignatureRequestByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QuerySignatureRequestByIDResponse

  /// Queries a list of SignTransactionRequests items.
  @Sendable func signTransactionRequests(
    request: Zrchain_Treasury_QuerySignTransactionRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QuerySignTransactionRequestsResponse

  /// Queries a list of SignTransactionRequestByID items.
  @Sendable func signTransactionRequestByID(
    request: Zrchain_Treasury_QuerySignTransactionRequestByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QuerySignTransactionRequestByIDResponse

  /// Queries a list of ZrSignKeys items.
  @Sendable func zrSignKeys(
    request: Zrchain_Treasury_QueryZrSignKeysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryZrSignKeysResponse

  /// Queries a list of KeyByAddress items.
  @Sendable func keyByAddress(
    request: Zrchain_Treasury_QueryKeyByAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryKeyByAddressResponse

  /// Queries a list of ZenbtcWallets items.
  @Sendable func zenbtcWallets(
    request: Zrchain_Treasury_QueryZenbtcWalletsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Treasury_QueryZenbtcWalletsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Treasury_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Treasury_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Zrchain_Treasury_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Zrchain_Treasury_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "KeyRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyRequestsResponse>(),
        interceptors: self.interceptors?.makeKeyRequestsInterceptors() ?? [],
        wrapping: self.keyRequests(request:context:)
      )

    case "KeyRequestByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyRequestByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyRequestByIDResponse>(),
        interceptors: self.interceptors?.makeKeyRequestByIDInterceptors() ?? [],
        wrapping: self.keyRequestByID(request:context:)
      )

    case "Keys":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeysRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeysResponse>(),
        interceptors: self.interceptors?.makeKeysInterceptors() ?? [],
        wrapping: self.keys(request:context:)
      )

    case "KeyByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyByIDResponse>(),
        interceptors: self.interceptors?.makeKeyByIDInterceptors() ?? [],
        wrapping: self.keyByID(request:context:)
      )

    case "SignatureRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignatureRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignatureRequestsResponse>(),
        interceptors: self.interceptors?.makeSignatureRequestsInterceptors() ?? [],
        wrapping: self.signatureRequests(request:context:)
      )

    case "SignatureRequestByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignatureRequestByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignatureRequestByIDResponse>(),
        interceptors: self.interceptors?.makeSignatureRequestByIDInterceptors() ?? [],
        wrapping: self.signatureRequestByID(request:context:)
      )

    case "SignTransactionRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignTransactionRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignTransactionRequestsResponse>(),
        interceptors: self.interceptors?.makeSignTransactionRequestsInterceptors() ?? [],
        wrapping: self.signTransactionRequests(request:context:)
      )

    case "SignTransactionRequestByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>(),
        interceptors: self.interceptors?.makeSignTransactionRequestByIDInterceptors() ?? [],
        wrapping: self.signTransactionRequestByID(request:context:)
      )

    case "ZrSignKeys":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryZrSignKeysRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryZrSignKeysResponse>(),
        interceptors: self.interceptors?.makeZrSignKeysInterceptors() ?? [],
        wrapping: self.zrSignKeys(request:context:)
      )

    case "KeyByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryKeyByAddressRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryKeyByAddressResponse>(),
        interceptors: self.interceptors?.makeKeyByAddressInterceptors() ?? [],
        wrapping: self.keyByAddress(request:context:)
      )

    case "ZenbtcWallets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Treasury_QueryZenbtcWalletsRequest>(),
        responseSerializer: ProtobufSerializer<Zrchain_Treasury_QueryZenbtcWalletsResponse>(),
        interceptors: self.interceptors?.makeZenbtcWalletsInterceptors() ?? [],
        wrapping: self.zenbtcWallets(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Zrchain_Treasury_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryParamsRequest, Zrchain_Treasury_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'keyRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyRequestsInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryKeyRequestsRequest, Zrchain_Treasury_QueryKeyRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'keyRequestByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyRequestByIDInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryKeyRequestByIDRequest, Zrchain_Treasury_QueryKeyRequestByIDResponse>]

  /// - Returns: Interceptors to use when handling 'keys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeysInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryKeysRequest, Zrchain_Treasury_QueryKeysResponse>]

  /// - Returns: Interceptors to use when handling 'keyByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyByIDInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryKeyByIDRequest, Zrchain_Treasury_QueryKeyByIDResponse>]

  /// - Returns: Interceptors to use when handling 'signatureRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignatureRequestsInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QuerySignatureRequestsRequest, Zrchain_Treasury_QuerySignatureRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'signatureRequestByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignatureRequestByIDInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QuerySignatureRequestByIDRequest, Zrchain_Treasury_QuerySignatureRequestByIDResponse>]

  /// - Returns: Interceptors to use when handling 'signTransactionRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignTransactionRequestsInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QuerySignTransactionRequestsRequest, Zrchain_Treasury_QuerySignTransactionRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'signTransactionRequestByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignTransactionRequestByIDInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QuerySignTransactionRequestByIDRequest, Zrchain_Treasury_QuerySignTransactionRequestByIDResponse>]

  /// - Returns: Interceptors to use when handling 'zrSignKeys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeZrSignKeysInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryZrSignKeysRequest, Zrchain_Treasury_QueryZrSignKeysResponse>]

  /// - Returns: Interceptors to use when handling 'keyByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyByAddressInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryKeyByAddressRequest, Zrchain_Treasury_QueryKeyByAddressResponse>]

  /// - Returns: Interceptors to use when handling 'zenbtcWallets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeZenbtcWalletsInterceptors() -> [ServerInterceptor<Zrchain_Treasury_QueryZenbtcWalletsRequest, Zrchain_Treasury_QueryZenbtcWalletsResponse>]
}

internal enum Zrchain_Treasury_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "zrchain.treasury.Query",
    methods: [
      Zrchain_Treasury_QueryServerMetadata.Methods.params,
      Zrchain_Treasury_QueryServerMetadata.Methods.keyRequests,
      Zrchain_Treasury_QueryServerMetadata.Methods.keyRequestByID,
      Zrchain_Treasury_QueryServerMetadata.Methods.keys,
      Zrchain_Treasury_QueryServerMetadata.Methods.keyByID,
      Zrchain_Treasury_QueryServerMetadata.Methods.signatureRequests,
      Zrchain_Treasury_QueryServerMetadata.Methods.signatureRequestByID,
      Zrchain_Treasury_QueryServerMetadata.Methods.signTransactionRequests,
      Zrchain_Treasury_QueryServerMetadata.Methods.signTransactionRequestByID,
      Zrchain_Treasury_QueryServerMetadata.Methods.zrSignKeys,
      Zrchain_Treasury_QueryServerMetadata.Methods.keyByAddress,
      Zrchain_Treasury_QueryServerMetadata.Methods.zenbtcWallets,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/zrchain.treasury.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let keyRequests = GRPCMethodDescriptor(
      name: "KeyRequests",
      path: "/zrchain.treasury.Query/KeyRequests",
      type: GRPCCallType.unary
    )

    internal static let keyRequestByID = GRPCMethodDescriptor(
      name: "KeyRequestByID",
      path: "/zrchain.treasury.Query/KeyRequestByID",
      type: GRPCCallType.unary
    )

    internal static let keys = GRPCMethodDescriptor(
      name: "Keys",
      path: "/zrchain.treasury.Query/Keys",
      type: GRPCCallType.unary
    )

    internal static let keyByID = GRPCMethodDescriptor(
      name: "KeyByID",
      path: "/zrchain.treasury.Query/KeyByID",
      type: GRPCCallType.unary
    )

    internal static let signatureRequests = GRPCMethodDescriptor(
      name: "SignatureRequests",
      path: "/zrchain.treasury.Query/SignatureRequests",
      type: GRPCCallType.unary
    )

    internal static let signatureRequestByID = GRPCMethodDescriptor(
      name: "SignatureRequestByID",
      path: "/zrchain.treasury.Query/SignatureRequestByID",
      type: GRPCCallType.unary
    )

    internal static let signTransactionRequests = GRPCMethodDescriptor(
      name: "SignTransactionRequests",
      path: "/zrchain.treasury.Query/SignTransactionRequests",
      type: GRPCCallType.unary
    )

    internal static let signTransactionRequestByID = GRPCMethodDescriptor(
      name: "SignTransactionRequestByID",
      path: "/zrchain.treasury.Query/SignTransactionRequestByID",
      type: GRPCCallType.unary
    )

    internal static let zrSignKeys = GRPCMethodDescriptor(
      name: "ZrSignKeys",
      path: "/zrchain.treasury.Query/ZrSignKeys",
      type: GRPCCallType.unary
    )

    internal static let keyByAddress = GRPCMethodDescriptor(
      name: "KeyByAddress",
      path: "/zrchain.treasury.Query/KeyByAddress",
      type: GRPCCallType.unary
    )

    internal static let zenbtcWallets = GRPCMethodDescriptor(
      name: "ZenbtcWallets",
      path: "/zrchain.treasury.Query/ZenbtcWallets",
      type: GRPCCallType.unary
    )
  }
}
