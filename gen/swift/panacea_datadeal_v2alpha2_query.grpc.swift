//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: panacea/datadeal/v2alpha2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Panacea_Datadeal_V2alpha2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Panacea_Datadeal_V2alpha2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func deal(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDealRequest, Panacea_Datadeal_V2alpha2_QueryDealResponse>

  func deals(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDealsRequest, Panacea_Datadeal_V2alpha2_QueryDealsResponse>

  func dataSale(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>

  func dataSales(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>

  func dataVerificationVote(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>

  func dataDeliveryVote(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>
}

extension Panacea_Datadeal_V2alpha2_QueryClientProtocol {
  internal var serviceName: String {
    return "panacea.datadeal.v2alpha2.Query"
  }

  /// Deal returns a Deal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deal(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDealRequest, Panacea_Datadeal_V2alpha2_QueryDealResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDealInterceptors() ?? []
    )
  }

  /// Deals return a list of Deal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deals(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDealsRequest, Panacea_Datadeal_V2alpha2_QueryDealsResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDealsInterceptors() ?? []
    )
  }

  /// DataSale returns a DataSale.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataSale.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataSale(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, Panacea_Datadeal_V2alpha2_QueryDataSaleResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSaleInterceptors() ?? []
    )
  }

  /// DataSales returns a list of DataSale.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataSales.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataSales(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, Panacea_Datadeal_V2alpha2_QueryDataSalesResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSales.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSalesInterceptors() ?? []
    )
  }

  /// DataVerificationVote returns a DataVerificationVote.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataVerificationVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataVerificationVote(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataVerificationVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataVerificationVoteInterceptors() ?? []
    )
  }

  /// DataDeliveryVote returns a DataDeliveryVote.
  ///
  /// - Parameters:
  ///   - request: Request to send to DataDeliveryVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dataDeliveryVote(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse> {
    return self.makeUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataDeliveryVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataDeliveryVoteInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Panacea_Datadeal_V2alpha2_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Panacea_Datadeal_V2alpha2_QueryNIOClient")
internal final class Panacea_Datadeal_V2alpha2_QueryClient: Panacea_Datadeal_V2alpha2_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the panacea.datadeal.v2alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Panacea_Datadeal_V2alpha2_QueryNIOClient: Panacea_Datadeal_V2alpha2_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the panacea.datadeal.v2alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Datadeal_V2alpha2_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func makeDealCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDealRequest, Panacea_Datadeal_V2alpha2_QueryDealResponse>

  func makeDealsCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDealsRequest, Panacea_Datadeal_V2alpha2_QueryDealsResponse>

  func makeDataSaleCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>

  func makeDataSalesCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>

  func makeDataVerificationVoteCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>

  func makeDataDeliveryVoteCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datadeal_V2alpha2_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Datadeal_V2alpha2_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDealCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDealRequest, Panacea_Datadeal_V2alpha2_QueryDealResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDealInterceptors() ?? []
    )
  }

  internal func makeDealsCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDealsRequest, Panacea_Datadeal_V2alpha2_QueryDealsResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDealsInterceptors() ?? []
    )
  }

  internal func makeDataSaleCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, Panacea_Datadeal_V2alpha2_QueryDataSaleResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSaleInterceptors() ?? []
    )
  }

  internal func makeDataSalesCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, Panacea_Datadeal_V2alpha2_QueryDataSalesResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSales.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSalesInterceptors() ?? []
    )
  }

  internal func makeDataVerificationVoteCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataVerificationVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataVerificationVoteInterceptors() ?? []
    )
  }

  internal func makeDataDeliveryVoteCall(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataDeliveryVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataDeliveryVoteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datadeal_V2alpha2_QueryAsyncClientProtocol {
  internal func deal(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDealResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDealInterceptors() ?? []
    )
  }

  internal func deals(
    _ request: Panacea_Datadeal_V2alpha2_QueryDealsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDealsResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDealsInterceptors() ?? []
    )
  }

  internal func dataSale(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataSaleResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSale.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSaleInterceptors() ?? []
    )
  }

  internal func dataSales(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataSalesResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSales.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataSalesInterceptors() ?? []
    )
  }

  internal func dataVerificationVote(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataVerificationVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataVerificationVoteInterceptors() ?? []
    )
  }

  internal func dataDeliveryVote(
    _ request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataDeliveryVote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDataDeliveryVoteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Panacea_Datadeal_V2alpha2_QueryAsyncClient: Panacea_Datadeal_V2alpha2_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Panacea_Datadeal_V2alpha2_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'deal'.
  func makeDealInterceptors() -> [ClientInterceptor<Panacea_Datadeal_V2alpha2_QueryDealRequest, Panacea_Datadeal_V2alpha2_QueryDealResponse>]

  /// - Returns: Interceptors to use when invoking 'deals'.
  func makeDealsInterceptors() -> [ClientInterceptor<Panacea_Datadeal_V2alpha2_QueryDealsRequest, Panacea_Datadeal_V2alpha2_QueryDealsResponse>]

  /// - Returns: Interceptors to use when invoking 'dataSale'.
  func makeDataSaleInterceptors() -> [ClientInterceptor<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>]

  /// - Returns: Interceptors to use when invoking 'dataSales'.
  func makeDataSalesInterceptors() -> [ClientInterceptor<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>]

  /// - Returns: Interceptors to use when invoking 'dataVerificationVote'.
  func makeDataVerificationVoteInterceptors() -> [ClientInterceptor<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'dataDeliveryVote'.
  func makeDataDeliveryVoteInterceptors() -> [ClientInterceptor<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>]
}

internal enum Panacea_Datadeal_V2alpha2_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "panacea.datadeal.v2alpha2.Query",
    methods: [
      Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deal,
      Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.deals,
      Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSale,
      Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataSales,
      Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataVerificationVote,
      Panacea_Datadeal_V2alpha2_QueryClientMetadata.Methods.dataDeliveryVote,
    ]
  )

  internal enum Methods {
    internal static let deal = GRPCMethodDescriptor(
      name: "Deal",
      path: "/panacea.datadeal.v2alpha2.Query/Deal",
      type: GRPCCallType.unary
    )

    internal static let deals = GRPCMethodDescriptor(
      name: "Deals",
      path: "/panacea.datadeal.v2alpha2.Query/Deals",
      type: GRPCCallType.unary
    )

    internal static let dataSale = GRPCMethodDescriptor(
      name: "DataSale",
      path: "/panacea.datadeal.v2alpha2.Query/DataSale",
      type: GRPCCallType.unary
    )

    internal static let dataSales = GRPCMethodDescriptor(
      name: "DataSales",
      path: "/panacea.datadeal.v2alpha2.Query/DataSales",
      type: GRPCCallType.unary
    )

    internal static let dataVerificationVote = GRPCMethodDescriptor(
      name: "DataVerificationVote",
      path: "/panacea.datadeal.v2alpha2.Query/DataVerificationVote",
      type: GRPCCallType.unary
    )

    internal static let dataDeliveryVote = GRPCMethodDescriptor(
      name: "DataDeliveryVote",
      path: "/panacea.datadeal.v2alpha2.Query/DataDeliveryVote",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Panacea_Datadeal_V2alpha2_QueryProvider: CallHandlerProvider {
  var interceptors: Panacea_Datadeal_V2alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// Deal returns a Deal.
  func deal(request: Panacea_Datadeal_V2alpha2_QueryDealRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datadeal_V2alpha2_QueryDealResponse>

  /// Deals return a list of Deal.
  func deals(request: Panacea_Datadeal_V2alpha2_QueryDealsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datadeal_V2alpha2_QueryDealsResponse>

  /// DataSale returns a DataSale.
  func dataSale(request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>

  /// DataSales returns a list of DataSale.
  func dataSales(request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>

  /// DataVerificationVote returns a DataVerificationVote.
  func dataVerificationVote(request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>

  /// DataDeliveryVote returns a DataDeliveryVote.
  func dataDeliveryVote(request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>
}

extension Panacea_Datadeal_V2alpha2_QueryProvider {
  internal var serviceName: Substring {
    return Panacea_Datadeal_V2alpha2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Deal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDealRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDealResponse>(),
        interceptors: self.interceptors?.makeDealInterceptors() ?? [],
        userFunction: self.deal(request:context:)
      )

    case "Deals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDealsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDealsResponse>(),
        interceptors: self.interceptors?.makeDealsInterceptors() ?? [],
        userFunction: self.deals(request:context:)
      )

    case "DataSale":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>(),
        interceptors: self.interceptors?.makeDataSaleInterceptors() ?? [],
        userFunction: self.dataSale(request:context:)
      )

    case "DataSales":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>(),
        interceptors: self.interceptors?.makeDataSalesInterceptors() ?? [],
        userFunction: self.dataSales(request:context:)
      )

    case "DataVerificationVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>(),
        interceptors: self.interceptors?.makeDataVerificationVoteInterceptors() ?? [],
        userFunction: self.dataVerificationVote(request:context:)
      )

    case "DataDeliveryVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>(),
        interceptors: self.interceptors?.makeDataDeliveryVoteInterceptors() ?? [],
        userFunction: self.dataDeliveryVote(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Panacea_Datadeal_V2alpha2_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Panacea_Datadeal_V2alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// Deal returns a Deal.
  @Sendable func deal(
    request: Panacea_Datadeal_V2alpha2_QueryDealRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDealResponse

  /// Deals return a list of Deal.
  @Sendable func deals(
    request: Panacea_Datadeal_V2alpha2_QueryDealsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDealsResponse

  /// DataSale returns a DataSale.
  @Sendable func dataSale(
    request: Panacea_Datadeal_V2alpha2_QueryDataSaleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataSaleResponse

  /// DataSales returns a list of DataSale.
  @Sendable func dataSales(
    request: Panacea_Datadeal_V2alpha2_QueryDataSalesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataSalesResponse

  /// DataVerificationVote returns a DataVerificationVote.
  @Sendable func dataVerificationVote(
    request: Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse

  /// DataDeliveryVote returns a DataDeliveryVote.
  @Sendable func dataDeliveryVote(
    request: Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Panacea_Datadeal_V2alpha2_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Panacea_Datadeal_V2alpha2_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Panacea_Datadeal_V2alpha2_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Panacea_Datadeal_V2alpha2_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Deal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDealRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDealResponse>(),
        interceptors: self.interceptors?.makeDealInterceptors() ?? [],
        wrapping: self.deal(request:context:)
      )

    case "Deals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDealsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDealsResponse>(),
        interceptors: self.interceptors?.makeDealsInterceptors() ?? [],
        wrapping: self.deals(request:context:)
      )

    case "DataSale":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>(),
        interceptors: self.interceptors?.makeDataSaleInterceptors() ?? [],
        wrapping: self.dataSale(request:context:)
      )

    case "DataSales":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>(),
        interceptors: self.interceptors?.makeDataSalesInterceptors() ?? [],
        wrapping: self.dataSales(request:context:)
      )

    case "DataVerificationVote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>(),
        interceptors: self.interceptors?.makeDataVerificationVoteInterceptors() ?? [],
        wrapping: self.dataVerificationVote(request:context:)
      )

    case "DataDeliveryVote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>(),
        interceptors: self.interceptors?.makeDataDeliveryVoteInterceptors() ?? [],
        wrapping: self.dataDeliveryVote(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Panacea_Datadeal_V2alpha2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'deal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDealInterceptors() -> [ServerInterceptor<Panacea_Datadeal_V2alpha2_QueryDealRequest, Panacea_Datadeal_V2alpha2_QueryDealResponse>]

  /// - Returns: Interceptors to use when handling 'deals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDealsInterceptors() -> [ServerInterceptor<Panacea_Datadeal_V2alpha2_QueryDealsRequest, Panacea_Datadeal_V2alpha2_QueryDealsResponse>]

  /// - Returns: Interceptors to use when handling 'dataSale'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataSaleInterceptors() -> [ServerInterceptor<Panacea_Datadeal_V2alpha2_QueryDataSaleRequest, Panacea_Datadeal_V2alpha2_QueryDataSaleResponse>]

  /// - Returns: Interceptors to use when handling 'dataSales'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataSalesInterceptors() -> [ServerInterceptor<Panacea_Datadeal_V2alpha2_QueryDataSalesRequest, Panacea_Datadeal_V2alpha2_QueryDataSalesResponse>]

  /// - Returns: Interceptors to use when handling 'dataVerificationVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataVerificationVoteInterceptors() -> [ServerInterceptor<Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataVerificationVoteResponse>]

  /// - Returns: Interceptors to use when handling 'dataDeliveryVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDataDeliveryVoteInterceptors() -> [ServerInterceptor<Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteRequest, Panacea_Datadeal_V2alpha2_QueryDataDeliveryVoteResponse>]
}

internal enum Panacea_Datadeal_V2alpha2_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "panacea.datadeal.v2alpha2.Query",
    methods: [
      Panacea_Datadeal_V2alpha2_QueryServerMetadata.Methods.deal,
      Panacea_Datadeal_V2alpha2_QueryServerMetadata.Methods.deals,
      Panacea_Datadeal_V2alpha2_QueryServerMetadata.Methods.dataSale,
      Panacea_Datadeal_V2alpha2_QueryServerMetadata.Methods.dataSales,
      Panacea_Datadeal_V2alpha2_QueryServerMetadata.Methods.dataVerificationVote,
      Panacea_Datadeal_V2alpha2_QueryServerMetadata.Methods.dataDeliveryVote,
    ]
  )

  internal enum Methods {
    internal static let deal = GRPCMethodDescriptor(
      name: "Deal",
      path: "/panacea.datadeal.v2alpha2.Query/Deal",
      type: GRPCCallType.unary
    )

    internal static let deals = GRPCMethodDescriptor(
      name: "Deals",
      path: "/panacea.datadeal.v2alpha2.Query/Deals",
      type: GRPCCallType.unary
    )

    internal static let dataSale = GRPCMethodDescriptor(
      name: "DataSale",
      path: "/panacea.datadeal.v2alpha2.Query/DataSale",
      type: GRPCCallType.unary
    )

    internal static let dataSales = GRPCMethodDescriptor(
      name: "DataSales",
      path: "/panacea.datadeal.v2alpha2.Query/DataSales",
      type: GRPCCallType.unary
    )

    internal static let dataVerificationVote = GRPCMethodDescriptor(
      name: "DataVerificationVote",
      path: "/panacea.datadeal.v2alpha2.Query/DataVerificationVote",
      type: GRPCCallType.unary
    )

    internal static let dataDeliveryVote = GRPCMethodDescriptor(
      name: "DataDeliveryVote",
      path: "/panacea.datadeal.v2alpha2.Query/DataDeliveryVote",
      type: GRPCCallType.unary
    )
  }
}
