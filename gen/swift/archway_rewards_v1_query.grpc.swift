//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: archway/rewards/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query service for the tracking module.
///
/// Usage: instantiate `Archway_Rewards_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Archway_Rewards_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Archway_Rewards_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryParamsRequest, Archway_Rewards_V1_QueryParamsResponse>

  func contractMetadata(
    _ request: Archway_Rewards_V1_QueryContractMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryContractMetadataRequest, Archway_Rewards_V1_QueryContractMetadataResponse>

  func blockRewardsTracking(
    _ request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>

  func rewardsPool(
    _ request: Archway_Rewards_V1_QueryRewardsPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryRewardsPoolRequest, Archway_Rewards_V1_QueryRewardsPoolResponse>

  func estimateTxFees(
    _ request: Archway_Rewards_V1_QueryEstimateTxFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryEstimateTxFeesRequest, Archway_Rewards_V1_QueryEstimateTxFeesResponse>

  func rewardsRecords(
    _ request: Archway_Rewards_V1_QueryRewardsRecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryRewardsRecordsRequest, Archway_Rewards_V1_QueryRewardsRecordsResponse>

  func outstandingRewards(
    _ request: Archway_Rewards_V1_QueryOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryOutstandingRewardsRequest, Archway_Rewards_V1_QueryOutstandingRewardsResponse>

  func flatFee(
    _ request: Archway_Rewards_V1_QueryFlatFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Archway_Rewards_V1_QueryFlatFeeRequest, Archway_Rewards_V1_QueryFlatFeeResponse>
}

extension Archway_Rewards_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "archway.rewards.v1.Query"
  }

  /// Params returns module parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Archway_Rewards_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryParamsRequest, Archway_Rewards_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// ContractMetadata returns the contract rewards parameters (metadata).
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractMetadata(
    _ request: Archway_Rewards_V1_QueryContractMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryContractMetadataRequest, Archway_Rewards_V1_QueryContractMetadataResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.contractMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractMetadataInterceptors() ?? []
    )
  }

  /// BlockRewardsTracking returns block rewards tracking for the current block.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockRewardsTracking.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockRewardsTracking(
    _ request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, Archway_Rewards_V1_QueryBlockRewardsTrackingResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.blockRewardsTracking.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockRewardsTrackingInterceptors() ?? []
    )
  }

  /// RewardsPool returns the current undistributed rewards pool funds.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardsPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardsPool(
    _ request: Archway_Rewards_V1_QueryRewardsPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryRewardsPoolRequest, Archway_Rewards_V1_QueryRewardsPoolResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsPoolInterceptors() ?? []
    )
  }

  /// EstimateTxFees returns the estimated transaction fees for the given
  /// transaction gas limit using the minimum consensus fee value for the current
  /// block.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateTxFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateTxFees(
    _ request: Archway_Rewards_V1_QueryEstimateTxFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryEstimateTxFeesRequest, Archway_Rewards_V1_QueryEstimateTxFeesResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.estimateTxFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateTxFeesInterceptors() ?? []
    )
  }

  /// RewardsRecords returns the paginated list of RewardsRecord objects stored
  /// for the provided rewards_address.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardsRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardsRecords(
    _ request: Archway_Rewards_V1_QueryRewardsRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryRewardsRecordsRequest, Archway_Rewards_V1_QueryRewardsRecordsResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsRecordsInterceptors() ?? []
    )
  }

  /// OutstandingRewards returns total rewards credited from different contracts
  /// for the provided rewards_address.
  ///
  /// - Parameters:
  ///   - request: Request to send to OutstandingRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func outstandingRewards(
    _ request: Archway_Rewards_V1_QueryOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryOutstandingRewardsRequest, Archway_Rewards_V1_QueryOutstandingRewardsResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.outstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutstandingRewardsInterceptors() ?? []
    )
  }

  /// FlatFee returns the flat fee set by the contract owner for the provided
  /// contract_address
  ///
  /// - Parameters:
  ///   - request: Request to send to FlatFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func flatFee(
    _ request: Archway_Rewards_V1_QueryFlatFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Archway_Rewards_V1_QueryFlatFeeRequest, Archway_Rewards_V1_QueryFlatFeeResponse> {
    return self.makeUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.flatFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlatFeeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Archway_Rewards_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Archway_Rewards_V1_QueryNIOClient")
internal final class Archway_Rewards_V1_QueryClient: Archway_Rewards_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the archway.rewards.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Archway_Rewards_V1_QueryNIOClient: Archway_Rewards_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the archway.rewards.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query service for the tracking module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Archway_Rewards_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Archway_Rewards_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryParamsRequest, Archway_Rewards_V1_QueryParamsResponse>

  func makeContractMetadataCall(
    _ request: Archway_Rewards_V1_QueryContractMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryContractMetadataRequest, Archway_Rewards_V1_QueryContractMetadataResponse>

  func makeBlockRewardsTrackingCall(
    _ request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>

  func makeRewardsPoolCall(
    _ request: Archway_Rewards_V1_QueryRewardsPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryRewardsPoolRequest, Archway_Rewards_V1_QueryRewardsPoolResponse>

  func makeEstimateTxFeesCall(
    _ request: Archway_Rewards_V1_QueryEstimateTxFeesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryEstimateTxFeesRequest, Archway_Rewards_V1_QueryEstimateTxFeesResponse>

  func makeRewardsRecordsCall(
    _ request: Archway_Rewards_V1_QueryRewardsRecordsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryRewardsRecordsRequest, Archway_Rewards_V1_QueryRewardsRecordsResponse>

  func makeOutstandingRewardsCall(
    _ request: Archway_Rewards_V1_QueryOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryOutstandingRewardsRequest, Archway_Rewards_V1_QueryOutstandingRewardsResponse>

  func makeFlatFeeCall(
    _ request: Archway_Rewards_V1_QueryFlatFeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryFlatFeeRequest, Archway_Rewards_V1_QueryFlatFeeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Archway_Rewards_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Archway_Rewards_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Archway_Rewards_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryParamsRequest, Archway_Rewards_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeContractMetadataCall(
    _ request: Archway_Rewards_V1_QueryContractMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryContractMetadataRequest, Archway_Rewards_V1_QueryContractMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.contractMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractMetadataInterceptors() ?? []
    )
  }

  internal func makeBlockRewardsTrackingCall(
    _ request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, Archway_Rewards_V1_QueryBlockRewardsTrackingResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.blockRewardsTracking.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockRewardsTrackingInterceptors() ?? []
    )
  }

  internal func makeRewardsPoolCall(
    _ request: Archway_Rewards_V1_QueryRewardsPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryRewardsPoolRequest, Archway_Rewards_V1_QueryRewardsPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsPoolInterceptors() ?? []
    )
  }

  internal func makeEstimateTxFeesCall(
    _ request: Archway_Rewards_V1_QueryEstimateTxFeesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryEstimateTxFeesRequest, Archway_Rewards_V1_QueryEstimateTxFeesResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.estimateTxFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateTxFeesInterceptors() ?? []
    )
  }

  internal func makeRewardsRecordsCall(
    _ request: Archway_Rewards_V1_QueryRewardsRecordsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryRewardsRecordsRequest, Archway_Rewards_V1_QueryRewardsRecordsResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsRecordsInterceptors() ?? []
    )
  }

  internal func makeOutstandingRewardsCall(
    _ request: Archway_Rewards_V1_QueryOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryOutstandingRewardsRequest, Archway_Rewards_V1_QueryOutstandingRewardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.outstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutstandingRewardsInterceptors() ?? []
    )
  }

  internal func makeFlatFeeCall(
    _ request: Archway_Rewards_V1_QueryFlatFeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Archway_Rewards_V1_QueryFlatFeeRequest, Archway_Rewards_V1_QueryFlatFeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.flatFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlatFeeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Archway_Rewards_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Archway_Rewards_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func contractMetadata(
    _ request: Archway_Rewards_V1_QueryContractMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryContractMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.contractMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractMetadataInterceptors() ?? []
    )
  }

  internal func blockRewardsTracking(
    _ request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryBlockRewardsTrackingResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.blockRewardsTracking.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockRewardsTrackingInterceptors() ?? []
    )
  }

  internal func rewardsPool(
    _ request: Archway_Rewards_V1_QueryRewardsPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryRewardsPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsPoolInterceptors() ?? []
    )
  }

  internal func estimateTxFees(
    _ request: Archway_Rewards_V1_QueryEstimateTxFeesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryEstimateTxFeesResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.estimateTxFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateTxFeesInterceptors() ?? []
    )
  }

  internal func rewardsRecords(
    _ request: Archway_Rewards_V1_QueryRewardsRecordsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryRewardsRecordsResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardsRecordsInterceptors() ?? []
    )
  }

  internal func outstandingRewards(
    _ request: Archway_Rewards_V1_QueryOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryOutstandingRewardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.outstandingRewards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutstandingRewardsInterceptors() ?? []
    )
  }

  internal func flatFee(
    _ request: Archway_Rewards_V1_QueryFlatFeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Archway_Rewards_V1_QueryFlatFeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Archway_Rewards_V1_QueryClientMetadata.Methods.flatFee.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlatFeeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Archway_Rewards_V1_QueryAsyncClient: Archway_Rewards_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Archway_Rewards_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryParamsRequest, Archway_Rewards_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'contractMetadata'.
  func makeContractMetadataInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryContractMetadataRequest, Archway_Rewards_V1_QueryContractMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'blockRewardsTracking'.
  func makeBlockRewardsTrackingInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardsPool'.
  func makeRewardsPoolInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryRewardsPoolRequest, Archway_Rewards_V1_QueryRewardsPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateTxFees'.
  func makeEstimateTxFeesInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryEstimateTxFeesRequest, Archway_Rewards_V1_QueryEstimateTxFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardsRecords'.
  func makeRewardsRecordsInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryRewardsRecordsRequest, Archway_Rewards_V1_QueryRewardsRecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'outstandingRewards'.
  func makeOutstandingRewardsInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryOutstandingRewardsRequest, Archway_Rewards_V1_QueryOutstandingRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'flatFee'.
  func makeFlatFeeInterceptors() -> [ClientInterceptor<Archway_Rewards_V1_QueryFlatFeeRequest, Archway_Rewards_V1_QueryFlatFeeResponse>]
}

internal enum Archway_Rewards_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "archway.rewards.v1.Query",
    methods: [
      Archway_Rewards_V1_QueryClientMetadata.Methods.params,
      Archway_Rewards_V1_QueryClientMetadata.Methods.contractMetadata,
      Archway_Rewards_V1_QueryClientMetadata.Methods.blockRewardsTracking,
      Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsPool,
      Archway_Rewards_V1_QueryClientMetadata.Methods.estimateTxFees,
      Archway_Rewards_V1_QueryClientMetadata.Methods.rewardsRecords,
      Archway_Rewards_V1_QueryClientMetadata.Methods.outstandingRewards,
      Archway_Rewards_V1_QueryClientMetadata.Methods.flatFee,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/archway.rewards.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let contractMetadata = GRPCMethodDescriptor(
      name: "ContractMetadata",
      path: "/archway.rewards.v1.Query/ContractMetadata",
      type: GRPCCallType.unary
    )

    internal static let blockRewardsTracking = GRPCMethodDescriptor(
      name: "BlockRewardsTracking",
      path: "/archway.rewards.v1.Query/BlockRewardsTracking",
      type: GRPCCallType.unary
    )

    internal static let rewardsPool = GRPCMethodDescriptor(
      name: "RewardsPool",
      path: "/archway.rewards.v1.Query/RewardsPool",
      type: GRPCCallType.unary
    )

    internal static let estimateTxFees = GRPCMethodDescriptor(
      name: "EstimateTxFees",
      path: "/archway.rewards.v1.Query/EstimateTxFees",
      type: GRPCCallType.unary
    )

    internal static let rewardsRecords = GRPCMethodDescriptor(
      name: "RewardsRecords",
      path: "/archway.rewards.v1.Query/RewardsRecords",
      type: GRPCCallType.unary
    )

    internal static let outstandingRewards = GRPCMethodDescriptor(
      name: "OutstandingRewards",
      path: "/archway.rewards.v1.Query/OutstandingRewards",
      type: GRPCCallType.unary
    )

    internal static let flatFee = GRPCMethodDescriptor(
      name: "FlatFee",
      path: "/archway.rewards.v1.Query/FlatFee",
      type: GRPCCallType.unary
    )
  }
}

/// Query service for the tracking module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Archway_Rewards_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Archway_Rewards_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns module parameters.
  func params(request: Archway_Rewards_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryParamsResponse>

  /// ContractMetadata returns the contract rewards parameters (metadata).
  func contractMetadata(request: Archway_Rewards_V1_QueryContractMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryContractMetadataResponse>

  /// BlockRewardsTracking returns block rewards tracking for the current block.
  func blockRewardsTracking(request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>

  /// RewardsPool returns the current undistributed rewards pool funds.
  func rewardsPool(request: Archway_Rewards_V1_QueryRewardsPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryRewardsPoolResponse>

  /// EstimateTxFees returns the estimated transaction fees for the given
  /// transaction gas limit using the minimum consensus fee value for the current
  /// block.
  func estimateTxFees(request: Archway_Rewards_V1_QueryEstimateTxFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryEstimateTxFeesResponse>

  /// RewardsRecords returns the paginated list of RewardsRecord objects stored
  /// for the provided rewards_address.
  func rewardsRecords(request: Archway_Rewards_V1_QueryRewardsRecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryRewardsRecordsResponse>

  /// OutstandingRewards returns total rewards credited from different contracts
  /// for the provided rewards_address.
  func outstandingRewards(request: Archway_Rewards_V1_QueryOutstandingRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryOutstandingRewardsResponse>

  /// FlatFee returns the flat fee set by the contract owner for the provided
  /// contract_address
  func flatFee(request: Archway_Rewards_V1_QueryFlatFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Archway_Rewards_V1_QueryFlatFeeResponse>
}

extension Archway_Rewards_V1_QueryProvider {
  internal var serviceName: Substring {
    return Archway_Rewards_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ContractMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryContractMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryContractMetadataResponse>(),
        interceptors: self.interceptors?.makeContractMetadataInterceptors() ?? [],
        userFunction: self.contractMetadata(request:context:)
      )

    case "BlockRewardsTracking":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>(),
        interceptors: self.interceptors?.makeBlockRewardsTrackingInterceptors() ?? [],
        userFunction: self.blockRewardsTracking(request:context:)
      )

    case "RewardsPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryRewardsPoolRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryRewardsPoolResponse>(),
        interceptors: self.interceptors?.makeRewardsPoolInterceptors() ?? [],
        userFunction: self.rewardsPool(request:context:)
      )

    case "EstimateTxFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryEstimateTxFeesRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryEstimateTxFeesResponse>(),
        interceptors: self.interceptors?.makeEstimateTxFeesInterceptors() ?? [],
        userFunction: self.estimateTxFees(request:context:)
      )

    case "RewardsRecords":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryRewardsRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryRewardsRecordsResponse>(),
        interceptors: self.interceptors?.makeRewardsRecordsInterceptors() ?? [],
        userFunction: self.rewardsRecords(request:context:)
      )

    case "OutstandingRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryOutstandingRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryOutstandingRewardsResponse>(),
        interceptors: self.interceptors?.makeOutstandingRewardsInterceptors() ?? [],
        userFunction: self.outstandingRewards(request:context:)
      )

    case "FlatFee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryFlatFeeRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryFlatFeeResponse>(),
        interceptors: self.interceptors?.makeFlatFeeInterceptors() ?? [],
        userFunction: self.flatFee(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query service for the tracking module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Archway_Rewards_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Archway_Rewards_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns module parameters.
  @Sendable func params(
    request: Archway_Rewards_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryParamsResponse

  /// ContractMetadata returns the contract rewards parameters (metadata).
  @Sendable func contractMetadata(
    request: Archway_Rewards_V1_QueryContractMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryContractMetadataResponse

  /// BlockRewardsTracking returns block rewards tracking for the current block.
  @Sendable func blockRewardsTracking(
    request: Archway_Rewards_V1_QueryBlockRewardsTrackingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryBlockRewardsTrackingResponse

  /// RewardsPool returns the current undistributed rewards pool funds.
  @Sendable func rewardsPool(
    request: Archway_Rewards_V1_QueryRewardsPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryRewardsPoolResponse

  /// EstimateTxFees returns the estimated transaction fees for the given
  /// transaction gas limit using the minimum consensus fee value for the current
  /// block.
  @Sendable func estimateTxFees(
    request: Archway_Rewards_V1_QueryEstimateTxFeesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryEstimateTxFeesResponse

  /// RewardsRecords returns the paginated list of RewardsRecord objects stored
  /// for the provided rewards_address.
  @Sendable func rewardsRecords(
    request: Archway_Rewards_V1_QueryRewardsRecordsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryRewardsRecordsResponse

  /// OutstandingRewards returns total rewards credited from different contracts
  /// for the provided rewards_address.
  @Sendable func outstandingRewards(
    request: Archway_Rewards_V1_QueryOutstandingRewardsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryOutstandingRewardsResponse

  /// FlatFee returns the flat fee set by the contract owner for the provided
  /// contract_address
  @Sendable func flatFee(
    request: Archway_Rewards_V1_QueryFlatFeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Archway_Rewards_V1_QueryFlatFeeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Archway_Rewards_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Archway_Rewards_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Archway_Rewards_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Archway_Rewards_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "ContractMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryContractMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryContractMetadataResponse>(),
        interceptors: self.interceptors?.makeContractMetadataInterceptors() ?? [],
        wrapping: self.contractMetadata(request:context:)
      )

    case "BlockRewardsTracking":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>(),
        interceptors: self.interceptors?.makeBlockRewardsTrackingInterceptors() ?? [],
        wrapping: self.blockRewardsTracking(request:context:)
      )

    case "RewardsPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryRewardsPoolRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryRewardsPoolResponse>(),
        interceptors: self.interceptors?.makeRewardsPoolInterceptors() ?? [],
        wrapping: self.rewardsPool(request:context:)
      )

    case "EstimateTxFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryEstimateTxFeesRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryEstimateTxFeesResponse>(),
        interceptors: self.interceptors?.makeEstimateTxFeesInterceptors() ?? [],
        wrapping: self.estimateTxFees(request:context:)
      )

    case "RewardsRecords":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryRewardsRecordsRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryRewardsRecordsResponse>(),
        interceptors: self.interceptors?.makeRewardsRecordsInterceptors() ?? [],
        wrapping: self.rewardsRecords(request:context:)
      )

    case "OutstandingRewards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryOutstandingRewardsRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryOutstandingRewardsResponse>(),
        interceptors: self.interceptors?.makeOutstandingRewardsInterceptors() ?? [],
        wrapping: self.outstandingRewards(request:context:)
      )

    case "FlatFee":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Archway_Rewards_V1_QueryFlatFeeRequest>(),
        responseSerializer: ProtobufSerializer<Archway_Rewards_V1_QueryFlatFeeResponse>(),
        interceptors: self.interceptors?.makeFlatFeeInterceptors() ?? [],
        wrapping: self.flatFee(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Archway_Rewards_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryParamsRequest, Archway_Rewards_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'contractMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractMetadataInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryContractMetadataRequest, Archway_Rewards_V1_QueryContractMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'blockRewardsTracking'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockRewardsTrackingInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryBlockRewardsTrackingRequest, Archway_Rewards_V1_QueryBlockRewardsTrackingResponse>]

  /// - Returns: Interceptors to use when handling 'rewardsPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsPoolInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryRewardsPoolRequest, Archway_Rewards_V1_QueryRewardsPoolResponse>]

  /// - Returns: Interceptors to use when handling 'estimateTxFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateTxFeesInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryEstimateTxFeesRequest, Archway_Rewards_V1_QueryEstimateTxFeesResponse>]

  /// - Returns: Interceptors to use when handling 'rewardsRecords'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRewardsRecordsInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryRewardsRecordsRequest, Archway_Rewards_V1_QueryRewardsRecordsResponse>]

  /// - Returns: Interceptors to use when handling 'outstandingRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOutstandingRewardsInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryOutstandingRewardsRequest, Archway_Rewards_V1_QueryOutstandingRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'flatFee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFlatFeeInterceptors() -> [ServerInterceptor<Archway_Rewards_V1_QueryFlatFeeRequest, Archway_Rewards_V1_QueryFlatFeeResponse>]
}

internal enum Archway_Rewards_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "archway.rewards.v1.Query",
    methods: [
      Archway_Rewards_V1_QueryServerMetadata.Methods.params,
      Archway_Rewards_V1_QueryServerMetadata.Methods.contractMetadata,
      Archway_Rewards_V1_QueryServerMetadata.Methods.blockRewardsTracking,
      Archway_Rewards_V1_QueryServerMetadata.Methods.rewardsPool,
      Archway_Rewards_V1_QueryServerMetadata.Methods.estimateTxFees,
      Archway_Rewards_V1_QueryServerMetadata.Methods.rewardsRecords,
      Archway_Rewards_V1_QueryServerMetadata.Methods.outstandingRewards,
      Archway_Rewards_V1_QueryServerMetadata.Methods.flatFee,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/archway.rewards.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let contractMetadata = GRPCMethodDescriptor(
      name: "ContractMetadata",
      path: "/archway.rewards.v1.Query/ContractMetadata",
      type: GRPCCallType.unary
    )

    internal static let blockRewardsTracking = GRPCMethodDescriptor(
      name: "BlockRewardsTracking",
      path: "/archway.rewards.v1.Query/BlockRewardsTracking",
      type: GRPCCallType.unary
    )

    internal static let rewardsPool = GRPCMethodDescriptor(
      name: "RewardsPool",
      path: "/archway.rewards.v1.Query/RewardsPool",
      type: GRPCCallType.unary
    )

    internal static let estimateTxFees = GRPCMethodDescriptor(
      name: "EstimateTxFees",
      path: "/archway.rewards.v1.Query/EstimateTxFees",
      type: GRPCCallType.unary
    )

    internal static let rewardsRecords = GRPCMethodDescriptor(
      name: "RewardsRecords",
      path: "/archway.rewards.v1.Query/RewardsRecords",
      type: GRPCCallType.unary
    )

    internal static let outstandingRewards = GRPCMethodDescriptor(
      name: "OutstandingRewards",
      path: "/archway.rewards.v1.Query/OutstandingRewards",
      type: GRPCCallType.unary
    )

    internal static let flatFee = GRPCMethodDescriptor(
      name: "FlatFee",
      path: "/archway.rewards.v1.Query/FlatFee",
      type: GRPCCallType.unary
    )
  }
}
