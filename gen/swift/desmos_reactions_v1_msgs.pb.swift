// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/reactions/v1/msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgAddReaction represents the message to be used to add a post reaction
struct Desmos_Reactions_V1_MsgAddReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which the post to react to is
  var subspaceID: UInt64 = 0

  /// Id of the post to react to
  var postID: UInt64 = 0

  /// Value of the reaction
  var value: SwiftProtobuf.Google_Protobuf_Any {
    get {return _value ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  /// User reacting to the post
  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// MsgAddReactionResponse represents the Msg/AddReaction response type
struct Desmos_Reactions_V1_MsgAddReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the newly added reaction
  var reactionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemoveReaction represents the message to be used to remove an
/// existing reaction from a post
struct Desmos_Reactions_V1_MsgRemoveReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which the reaction to remove is
  var subspaceID: UInt64 = 0

  /// Id of the post from which to remove the reaction
  var postID: UInt64 = 0

  /// Id of the reaction to be removed
  var reactionID: UInt32 = 0

  /// User removing the reaction
  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemoveReactionResponse represents the Msg/RemoveReaction response type
struct Desmos_Reactions_V1_MsgRemoveReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAddRegisteredReaction represents the message to be used to
/// register a new supported reaction
struct Desmos_Reactions_V1_MsgAddRegisteredReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which this reaction should be registered
  var subspaceID: UInt64 = 0

  /// Shorthand code of the reaction
  var shorthandCode: String = String()

  /// Display value of the reaction
  var displayValue: String = String()

  /// User adding the supported reaction
  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAddRegisteredReactionResponse represents the
/// Msg/AddRegisteredReaction response type
struct Desmos_Reactions_V1_MsgAddRegisteredReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the newly registered reaction
  var registeredReactionID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditRegisteredReaction represents the message to be used to edit a
/// registered reaction
struct Desmos_Reactions_V1_MsgEditRegisteredReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace inside which the reaction to edit is
  var subspaceID: UInt64 = 0

  /// Id of the registered reaction to edit
  var registeredReactionID: UInt32 = 0

  /// New shorthand code to be set
  var shorthandCode: String = String()

  /// Display value to be set
  var displayValue: String = String()

  /// User editing the registered reaction
  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditRegisteredReactionResponse represents the Msg/EditRegisteredReaction
/// response type
struct Desmos_Reactions_V1_MsgEditRegisteredReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemoveRegisteredReaction represents the message to be used to
/// remove an existing registered reaction
struct Desmos_Reactions_V1_MsgRemoveRegisteredReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace from which to remove the registered reaction
  var subspaceID: UInt64 = 0

  /// Id of the registered reaction to be removed
  var registeredReactionID: UInt32 = 0

  /// User removing the registered reaction
  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemoveRegisteredReactionResponse represents the
/// Msg/RemoveRegisteredReaction response type
struct Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetReactionsParams represents the message to be used when setting
/// a subspace reactions params
struct Desmos_Reactions_V1_MsgSetReactionsParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Id of the subspace for which to set the params
  var subspaceID: UInt64 = 0

  /// Params related to RegisteredReactionValue reactions
  var registeredReaction: Desmos_Reactions_V1_RegisteredReactionValueParams {
    get {return _registeredReaction ?? Desmos_Reactions_V1_RegisteredReactionValueParams()}
    set {_registeredReaction = newValue}
  }
  /// Returns true if `registeredReaction` has been explicitly set.
  var hasRegisteredReaction: Bool {return self._registeredReaction != nil}
  /// Clears the value of `registeredReaction`. Subsequent reads from it will return its default value.
  mutating func clearRegisteredReaction() {self._registeredReaction = nil}

  /// Params related to FreeTextValue reactions
  var freeText: Desmos_Reactions_V1_FreeTextValueParams {
    get {return _freeText ?? Desmos_Reactions_V1_FreeTextValueParams()}
    set {_freeText = newValue}
  }
  /// Returns true if `freeText` has been explicitly set.
  var hasFreeText: Bool {return self._freeText != nil}
  /// Clears the value of `freeText`. Subsequent reads from it will return its default value.
  mutating func clearFreeText() {self._freeText = nil}

  /// User setting the params
  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _registeredReaction: Desmos_Reactions_V1_RegisteredReactionValueParams? = nil
  fileprivate var _freeText: Desmos_Reactions_V1_FreeTextValueParams? = nil
}

/// MsgSetReactionsParamsResponse represents the Msg/SetReactionsParams response
/// type
struct Desmos_Reactions_V1_MsgSetReactionsParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Desmos_Reactions_V1_MsgAddReaction: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgAddReactionResponse: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgRemoveReaction: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgRemoveReactionResponse: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgAddRegisteredReaction: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgAddRegisteredReactionResponse: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgEditRegisteredReaction: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgEditRegisteredReactionResponse: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgRemoveRegisteredReaction: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgSetReactionsParams: @unchecked Sendable {}
extension Desmos_Reactions_V1_MsgSetReactionsParamsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.reactions.v1"

extension Desmos_Reactions_V1_MsgAddReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .same(proto: "value"),
    4: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgAddReaction, rhs: Desmos_Reactions_V1_MsgAddReaction) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs._value != rhs._value {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgAddReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddReactionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reaction_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.reactionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.reactionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgAddReactionResponse, rhs: Desmos_Reactions_V1_MsgAddReactionResponse) -> Bool {
    if lhs.reactionID != rhs.reactionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgRemoveReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "post_id"),
    3: .standard(proto: "reaction_id"),
    4: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.postID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.reactionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.postID != 0 {
      try visitor.visitSingularUInt64Field(value: self.postID, fieldNumber: 2)
    }
    if self.reactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.reactionID, fieldNumber: 3)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgRemoveReaction, rhs: Desmos_Reactions_V1_MsgRemoveReaction) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.reactionID != rhs.reactionID {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgRemoveReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveReactionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgRemoveReactionResponse, rhs: Desmos_Reactions_V1_MsgRemoveReactionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgAddRegisteredReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddRegisteredReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "shorthand_code"),
    3: .standard(proto: "display_value"),
    4: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shorthandCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayValue) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if !self.shorthandCode.isEmpty {
      try visitor.visitSingularStringField(value: self.shorthandCode, fieldNumber: 2)
    }
    if !self.displayValue.isEmpty {
      try visitor.visitSingularStringField(value: self.displayValue, fieldNumber: 3)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgAddRegisteredReaction, rhs: Desmos_Reactions_V1_MsgAddRegisteredReaction) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.shorthandCode != rhs.shorthandCode {return false}
    if lhs.displayValue != rhs.displayValue {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgAddRegisteredReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddRegisteredReactionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "registered_reaction_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.registeredReactionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.registeredReactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.registeredReactionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgAddRegisteredReactionResponse, rhs: Desmos_Reactions_V1_MsgAddRegisteredReactionResponse) -> Bool {
    if lhs.registeredReactionID != rhs.registeredReactionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgEditRegisteredReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditRegisteredReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "registered_reaction_id"),
    3: .standard(proto: "shorthand_code"),
    4: .standard(proto: "display_value"),
    5: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.registeredReactionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shorthandCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.displayValue) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.registeredReactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.registeredReactionID, fieldNumber: 2)
    }
    if !self.shorthandCode.isEmpty {
      try visitor.visitSingularStringField(value: self.shorthandCode, fieldNumber: 3)
    }
    if !self.displayValue.isEmpty {
      try visitor.visitSingularStringField(value: self.displayValue, fieldNumber: 4)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgEditRegisteredReaction, rhs: Desmos_Reactions_V1_MsgEditRegisteredReaction) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.registeredReactionID != rhs.registeredReactionID {return false}
    if lhs.shorthandCode != rhs.shorthandCode {return false}
    if lhs.displayValue != rhs.displayValue {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgEditRegisteredReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditRegisteredReactionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgEditRegisteredReactionResponse, rhs: Desmos_Reactions_V1_MsgEditRegisteredReactionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgRemoveRegisteredReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveRegisteredReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "registered_reaction_id"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.registeredReactionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    if self.registeredReactionID != 0 {
      try visitor.visitSingularUInt32Field(value: self.registeredReactionID, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgRemoveRegisteredReaction, rhs: Desmos_Reactions_V1_MsgRemoveRegisteredReaction) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.registeredReactionID != rhs.registeredReactionID {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveRegisteredReactionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse, rhs: Desmos_Reactions_V1_MsgRemoveRegisteredReactionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgSetReactionsParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetReactionsParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .standard(proto: "registered_reaction"),
    3: .standard(proto: "free_text"),
    4: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._registeredReaction) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._freeText) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.subspaceID != 0 {
      try visitor.visitSingularUInt64Field(value: self.subspaceID, fieldNumber: 1)
    }
    try { if let v = self._registeredReaction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._freeText {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgSetReactionsParams, rhs: Desmos_Reactions_V1_MsgSetReactionsParams) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs._registeredReaction != rhs._registeredReaction {return false}
    if lhs._freeText != rhs._freeText {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Reactions_V1_MsgSetReactionsParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetReactionsParamsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Reactions_V1_MsgSetReactionsParamsResponse, rhs: Desmos_Reactions_V1_MsgSetReactionsParamsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
