//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/accounts/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the Query service for the x/accounts module.
///
/// Usage: instantiate `Cosmos_Accounts_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Accounts_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? { get }

  func accountQuery(
    _ request: Cosmos_Accounts_V1_AccountQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Accounts_V1_AccountQueryRequest, Cosmos_Accounts_V1_AccountQueryResponse>

  func schema(
    _ request: Cosmos_Accounts_V1_SchemaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Accounts_V1_SchemaRequest, Cosmos_Accounts_V1_SchemaResponse>

  func accountType(
    _ request: Cosmos_Accounts_V1_AccountTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Accounts_V1_AccountTypeRequest, Cosmos_Accounts_V1_AccountTypeResponse>
}

extension Cosmos_Accounts_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.accounts.v1.Query"
  }

  /// AccountQuery runs an account query.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountQuery(
    _ request: Cosmos_Accounts_V1_AccountQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Accounts_V1_AccountQueryRequest, Cosmos_Accounts_V1_AccountQueryResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountQueryInterceptors() ?? []
    )
  }

  /// Schema returns an x/account schema. Unstable.
  ///
  /// - Parameters:
  ///   - request: Request to send to Schema.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func schema(
    _ request: Cosmos_Accounts_V1_SchemaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Accounts_V1_SchemaRequest, Cosmos_Accounts_V1_SchemaResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.schema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchemaInterceptors() ?? []
    )
  }

  /// AccountType returns the account type for an address.
  ///
  /// - Parameters:
  ///   - request: Request to send to AccountType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accountType(
    _ request: Cosmos_Accounts_V1_AccountTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Accounts_V1_AccountTypeRequest, Cosmos_Accounts_V1_AccountTypeResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountTypeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Accounts_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Accounts_V1_QueryNIOClient")
internal final class Cosmos_Accounts_V1_QueryClient: Cosmos_Accounts_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.accounts.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Accounts_V1_QueryNIOClient: Cosmos_Accounts_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.accounts.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the Query service for the x/accounts module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Accounts_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeAccountQueryCall(
    _ request: Cosmos_Accounts_V1_AccountQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Accounts_V1_AccountQueryRequest, Cosmos_Accounts_V1_AccountQueryResponse>

  func makeSchemaCall(
    _ request: Cosmos_Accounts_V1_SchemaRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Accounts_V1_SchemaRequest, Cosmos_Accounts_V1_SchemaResponse>

  func makeAccountTypeCall(
    _ request: Cosmos_Accounts_V1_AccountTypeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Accounts_V1_AccountTypeRequest, Cosmos_Accounts_V1_AccountTypeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Accounts_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Accounts_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAccountQueryCall(
    _ request: Cosmos_Accounts_V1_AccountQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Accounts_V1_AccountQueryRequest, Cosmos_Accounts_V1_AccountQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountQueryInterceptors() ?? []
    )
  }

  internal func makeSchemaCall(
    _ request: Cosmos_Accounts_V1_SchemaRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Accounts_V1_SchemaRequest, Cosmos_Accounts_V1_SchemaResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.schema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchemaInterceptors() ?? []
    )
  }

  internal func makeAccountTypeCall(
    _ request: Cosmos_Accounts_V1_AccountTypeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Accounts_V1_AccountTypeRequest, Cosmos_Accounts_V1_AccountTypeResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountTypeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Accounts_V1_QueryAsyncClientProtocol {
  internal func accountQuery(
    _ request: Cosmos_Accounts_V1_AccountQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Accounts_V1_AccountQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountQueryInterceptors() ?? []
    )
  }

  internal func schema(
    _ request: Cosmos_Accounts_V1_SchemaRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Accounts_V1_SchemaResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.schema.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchemaInterceptors() ?? []
    )
  }

  internal func accountType(
    _ request: Cosmos_Accounts_V1_AccountTypeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Accounts_V1_AccountTypeResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountTypeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Accounts_V1_QueryAsyncClient: Cosmos_Accounts_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Accounts_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'accountQuery'.
  func makeAccountQueryInterceptors() -> [ClientInterceptor<Cosmos_Accounts_V1_AccountQueryRequest, Cosmos_Accounts_V1_AccountQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'schema'.
  func makeSchemaInterceptors() -> [ClientInterceptor<Cosmos_Accounts_V1_SchemaRequest, Cosmos_Accounts_V1_SchemaResponse>]

  /// - Returns: Interceptors to use when invoking 'accountType'.
  func makeAccountTypeInterceptors() -> [ClientInterceptor<Cosmos_Accounts_V1_AccountTypeRequest, Cosmos_Accounts_V1_AccountTypeResponse>]
}

internal enum Cosmos_Accounts_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.accounts.v1.Query",
    methods: [
      Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountQuery,
      Cosmos_Accounts_V1_QueryClientMetadata.Methods.schema,
      Cosmos_Accounts_V1_QueryClientMetadata.Methods.accountType,
    ]
  )

  internal enum Methods {
    internal static let accountQuery = GRPCMethodDescriptor(
      name: "AccountQuery",
      path: "/cosmos.accounts.v1.Query/AccountQuery",
      type: GRPCCallType.unary
    )

    internal static let schema = GRPCMethodDescriptor(
      name: "Schema",
      path: "/cosmos.accounts.v1.Query/Schema",
      type: GRPCCallType.unary
    )

    internal static let accountType = GRPCMethodDescriptor(
      name: "AccountType",
      path: "/cosmos.accounts.v1.Query/AccountType",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the Query service for the x/accounts module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Accounts_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Accounts_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// AccountQuery runs an account query.
  func accountQuery(request: Cosmos_Accounts_V1_AccountQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Accounts_V1_AccountQueryResponse>

  /// Schema returns an x/account schema. Unstable.
  func schema(request: Cosmos_Accounts_V1_SchemaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Accounts_V1_SchemaResponse>

  /// AccountType returns the account type for an address.
  func accountType(request: Cosmos_Accounts_V1_AccountTypeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Accounts_V1_AccountTypeResponse>
}

extension Cosmos_Accounts_V1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Accounts_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AccountQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Accounts_V1_AccountQueryRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Accounts_V1_AccountQueryResponse>(),
        interceptors: self.interceptors?.makeAccountQueryInterceptors() ?? [],
        userFunction: self.accountQuery(request:context:)
      )

    case "Schema":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Accounts_V1_SchemaRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Accounts_V1_SchemaResponse>(),
        interceptors: self.interceptors?.makeSchemaInterceptors() ?? [],
        userFunction: self.schema(request:context:)
      )

    case "AccountType":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Accounts_V1_AccountTypeRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Accounts_V1_AccountTypeResponse>(),
        interceptors: self.interceptors?.makeAccountTypeInterceptors() ?? [],
        userFunction: self.accountType(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the Query service for the x/accounts module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Accounts_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Accounts_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// AccountQuery runs an account query.
  @Sendable func accountQuery(
    request: Cosmos_Accounts_V1_AccountQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Accounts_V1_AccountQueryResponse

  /// Schema returns an x/account schema. Unstable.
  @Sendable func schema(
    request: Cosmos_Accounts_V1_SchemaRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Accounts_V1_SchemaResponse

  /// AccountType returns the account type for an address.
  @Sendable func accountType(
    request: Cosmos_Accounts_V1_AccountTypeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Accounts_V1_AccountTypeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Accounts_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Accounts_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Accounts_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Accounts_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AccountQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Accounts_V1_AccountQueryRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Accounts_V1_AccountQueryResponse>(),
        interceptors: self.interceptors?.makeAccountQueryInterceptors() ?? [],
        wrapping: self.accountQuery(request:context:)
      )

    case "Schema":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Accounts_V1_SchemaRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Accounts_V1_SchemaResponse>(),
        interceptors: self.interceptors?.makeSchemaInterceptors() ?? [],
        wrapping: self.schema(request:context:)
      )

    case "AccountType":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Accounts_V1_AccountTypeRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Accounts_V1_AccountTypeResponse>(),
        interceptors: self.interceptors?.makeAccountTypeInterceptors() ?? [],
        wrapping: self.accountType(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Accounts_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'accountQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountQueryInterceptors() -> [ServerInterceptor<Cosmos_Accounts_V1_AccountQueryRequest, Cosmos_Accounts_V1_AccountQueryResponse>]

  /// - Returns: Interceptors to use when handling 'schema'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSchemaInterceptors() -> [ServerInterceptor<Cosmos_Accounts_V1_SchemaRequest, Cosmos_Accounts_V1_SchemaResponse>]

  /// - Returns: Interceptors to use when handling 'accountType'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountTypeInterceptors() -> [ServerInterceptor<Cosmos_Accounts_V1_AccountTypeRequest, Cosmos_Accounts_V1_AccountTypeResponse>]
}

internal enum Cosmos_Accounts_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.accounts.v1.Query",
    methods: [
      Cosmos_Accounts_V1_QueryServerMetadata.Methods.accountQuery,
      Cosmos_Accounts_V1_QueryServerMetadata.Methods.schema,
      Cosmos_Accounts_V1_QueryServerMetadata.Methods.accountType,
    ]
  )

  internal enum Methods {
    internal static let accountQuery = GRPCMethodDescriptor(
      name: "AccountQuery",
      path: "/cosmos.accounts.v1.Query/AccountQuery",
      type: GRPCCallType.unary
    )

    internal static let schema = GRPCMethodDescriptor(
      name: "Schema",
      path: "/cosmos.accounts.v1.Query/Schema",
      type: GRPCCallType.unary
    )

    internal static let accountType = GRPCMethodDescriptor(
      name: "AccountType",
      path: "/cosmos.accounts.v1.Query/AccountType",
      type: GRPCCallType.unary
    )
  }
}
