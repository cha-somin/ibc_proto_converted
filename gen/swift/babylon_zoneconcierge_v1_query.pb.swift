// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: babylon/zoneconcierge/v1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryParamsRequest is the request type for the Query/Params RPC method.
struct Babylon_Zoneconcierge_V1_QueryParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryParamsResponse is the response type for the Query/Params RPC method.
struct Babylon_Zoneconcierge_V1_QueryParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params holds all the parameters of this module.
  var params: Babylon_Zoneconcierge_V1_Params {
    get {return _params ?? Babylon_Zoneconcierge_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Babylon_Zoneconcierge_V1_Params? = nil
}

/// QueryHeaderRequest is request type for the Query/Header RPC method.
struct Babylon_Zoneconcierge_V1_QueryHeaderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var height: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryHeaderResponse is response type for the Query/Header RPC method.
struct Babylon_Zoneconcierge_V1_QueryHeaderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Babylon_Zoneconcierge_V1_IndexedHeader {
    get {return _header ?? Babylon_Zoneconcierge_V1_IndexedHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var forkHeaders: Babylon_Zoneconcierge_V1_Forks {
    get {return _forkHeaders ?? Babylon_Zoneconcierge_V1_Forks()}
    set {_forkHeaders = newValue}
  }
  /// Returns true if `forkHeaders` has been explicitly set.
  var hasForkHeaders: Bool {return self._forkHeaders != nil}
  /// Clears the value of `forkHeaders`. Subsequent reads from it will return its default value.
  mutating func clearForkHeaders() {self._forkHeaders = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Babylon_Zoneconcierge_V1_IndexedHeader? = nil
  fileprivate var _forkHeaders: Babylon_Zoneconcierge_V1_Forks? = nil
}

/// QueryChainListRequest is request type for the Query/ChainList RPC method
struct Babylon_Zoneconcierge_V1_QueryChainListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pagination defines whether to have the pagination in the request
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryChainListResponse is response type for the Query/ChainList RPC method
struct Babylon_Zoneconcierge_V1_QueryChainListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// chain_ids are IDs of the chains in ascending alphabetical order
  var chainIds: [String] = []

  /// pagination defines the pagination in the response
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryChainsInfoRequest is request type for the Query/ChainsInfo RPC method.
struct Babylon_Zoneconcierge_V1_QueryChainsInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryChainsInfoResponse is response type for the Query/ChainsInfo RPC method.
struct Babylon_Zoneconcierge_V1_QueryChainsInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainsInfo: [Babylon_Zoneconcierge_V1_ChainInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryEpochChainsInfoRequest is request type for the Query/EpochChainsInfo RPC
/// method.
struct Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epochNum: UInt64 = 0

  var chainIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryEpochChainsInfoResponse is response type for the Query/EpochChainsInfo RPC
/// method.
struct Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// chain_info is the info of the CZ
  var chainsInfo: [Babylon_Zoneconcierge_V1_ChainInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryListHeadersRequest is request type for the Query/ListHeaders RPC method.
struct Babylon_Zoneconcierge_V1_QueryListHeadersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  /// pagination defines whether to have the pagination in the request
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// QueryListHeadersResponse is response type for the Query/ListHeaders RPC
/// method.
struct Babylon_Zoneconcierge_V1_QueryListHeadersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// headers is the list of headers
  var headers: [Babylon_Zoneconcierge_V1_IndexedHeader] = []

  /// pagination defines the pagination in the response
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// QueryListEpochHeadersRequest is request type for the Query/ListEpochHeaders
/// RPC method.
struct Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epochNum: UInt64 = 0

  var chainID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryListEpochHeadersResponse is response type for the Query/ListEpochHeaders
/// RPC method.
struct Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// headers is the list of headers
  var headers: [Babylon_Zoneconcierge_V1_IndexedHeader] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalizedChainsInfoRequest is request type for the
/// Query/FinalizedChainsInfo RPC method.
struct Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// chain_ids is the list of ids of CZs
  var chainIds: [String] = []

  /// prove indicates whether the querier wants to get proofs of this timestamp
  var prove: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalizedChainsInfoResponse is response type for the
/// Query/FinalizedChainsInfo RPC method.
struct Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var finalizedChainsInfo: [Babylon_Zoneconcierge_V1_FinalizedChainInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalizedChainInfoUntilHeightRequest is request type for the
/// Query/FinalizedChainInfoUntilHeight RPC method.
struct Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// chain_id is the ID of the CZ
  var chainID: String = String()

  /// height is the height of the CZ chain
  /// such that the returned finalised chain info will be no later than this
  /// height
  var height: UInt64 = 0

  /// prove indicates whether the querier wants to get proofs of this timestamp
  var prove: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFinalizedChainInfoUntilHeightResponse is response type for the
/// Query/FinalizedChainInfoUntilHeight RPC method.
struct Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// finalized_chain_info is the info of the CZ
  var finalizedChainInfo: Babylon_Zoneconcierge_V1_ChainInfo {
    get {return _storage._finalizedChainInfo ?? Babylon_Zoneconcierge_V1_ChainInfo()}
    set {_uniqueStorage()._finalizedChainInfo = newValue}
  }
  /// Returns true if `finalizedChainInfo` has been explicitly set.
  var hasFinalizedChainInfo: Bool {return _storage._finalizedChainInfo != nil}
  /// Clears the value of `finalizedChainInfo`. Subsequent reads from it will return its default value.
  mutating func clearFinalizedChainInfo() {_uniqueStorage()._finalizedChainInfo = nil}

  /// epoch_info is the metadata of the last BTC-finalised epoch
  var epochInfo: Babylon_Epoching_V1_Epoch {
    get {return _storage._epochInfo ?? Babylon_Epoching_V1_Epoch()}
    set {_uniqueStorage()._epochInfo = newValue}
  }
  /// Returns true if `epochInfo` has been explicitly set.
  var hasEpochInfo: Bool {return _storage._epochInfo != nil}
  /// Clears the value of `epochInfo`. Subsequent reads from it will return its default value.
  mutating func clearEpochInfo() {_uniqueStorage()._epochInfo = nil}

  /// raw_checkpoint is the raw checkpoint of this epoch
  var rawCheckpoint: Babylon_Checkpointing_V1_RawCheckpoint {
    get {return _storage._rawCheckpoint ?? Babylon_Checkpointing_V1_RawCheckpoint()}
    set {_uniqueStorage()._rawCheckpoint = newValue}
  }
  /// Returns true if `rawCheckpoint` has been explicitly set.
  var hasRawCheckpoint: Bool {return _storage._rawCheckpoint != nil}
  /// Clears the value of `rawCheckpoint`. Subsequent reads from it will return its default value.
  mutating func clearRawCheckpoint() {_uniqueStorage()._rawCheckpoint = nil}

  /// btc_submission_key is position of two BTC txs that include the raw
  /// checkpoint of this epoch
  var btcSubmissionKey: Babylon_Btccheckpoint_V1_SubmissionKey {
    get {return _storage._btcSubmissionKey ?? Babylon_Btccheckpoint_V1_SubmissionKey()}
    set {_uniqueStorage()._btcSubmissionKey = newValue}
  }
  /// Returns true if `btcSubmissionKey` has been explicitly set.
  var hasBtcSubmissionKey: Bool {return _storage._btcSubmissionKey != nil}
  /// Clears the value of `btcSubmissionKey`. Subsequent reads from it will return its default value.
  mutating func clearBtcSubmissionKey() {_uniqueStorage()._btcSubmissionKey = nil}

  /// proof is the proof that the chain info is finalized
  var proof: Babylon_Zoneconcierge_V1_ProofFinalizedChainInfo {
    get {return _storage._proof ?? Babylon_Zoneconcierge_V1_ProofFinalizedChainInfo()}
    set {_uniqueStorage()._proof = newValue}
  }
  /// Returns true if `proof` has been explicitly set.
  var hasProof: Bool {return _storage._proof != nil}
  /// Clears the value of `proof`. Subsequent reads from it will return its default value.
  mutating func clearProof() {_uniqueStorage()._proof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Babylon_Zoneconcierge_V1_QueryParamsRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryParamsResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryHeaderRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryHeaderResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryChainListRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryChainListResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryChainsInfoRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryChainsInfoResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryListHeadersRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryListHeadersResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest: @unchecked Sendable {}
extension Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "babylon.zoneconcierge.v1"

extension Babylon_Zoneconcierge_V1_QueryParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryParamsRequest, rhs: Babylon_Zoneconcierge_V1_QueryParamsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryParamsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryParamsResponse, rhs: Babylon_Zoneconcierge_V1_QueryParamsResponse) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryHeaderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryHeaderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryHeaderRequest, rhs: Babylon_Zoneconcierge_V1_QueryHeaderRequest) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryHeaderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryHeaderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "fork_headers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._forkHeaders) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._forkHeaders {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryHeaderResponse, rhs: Babylon_Zoneconcierge_V1_QueryHeaderResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._forkHeaders != rhs._forkHeaders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryChainListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryChainListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryChainListRequest, rhs: Babylon_Zoneconcierge_V1_QueryChainListRequest) -> Bool {
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryChainListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryChainListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_ids"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.chainIds) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chainIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chainIds, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryChainListResponse, rhs: Babylon_Zoneconcierge_V1_QueryChainListResponse) -> Bool {
    if lhs.chainIds != rhs.chainIds {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryChainsInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryChainsInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.chainIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chainIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest, rhs: Babylon_Zoneconcierge_V1_QueryChainsInfoRequest) -> Bool {
    if lhs.chainIds != rhs.chainIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryChainsInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryChainsInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chains_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.chainsInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainsInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chainsInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryChainsInfoResponse, rhs: Babylon_Zoneconcierge_V1_QueryChainsInfoResponse) -> Bool {
    if lhs.chainsInfo != rhs.chainsInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEpochChainsInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epoch_num"),
    2: .standard(proto: "chain_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.epochNum) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.chainIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epochNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.epochNum, fieldNumber: 1)
    }
    if !self.chainIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chainIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest, rhs: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoRequest) -> Bool {
    if lhs.epochNum != rhs.epochNum {return false}
    if lhs.chainIds != rhs.chainIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryEpochChainsInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chains_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.chainsInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainsInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chainsInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse, rhs: Babylon_Zoneconcierge_V1_QueryEpochChainsInfoResponse) -> Bool {
    if lhs.chainsInfo != rhs.chainsInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryListHeadersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryListHeadersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryListHeadersRequest, rhs: Babylon_Zoneconcierge_V1_QueryListHeadersRequest) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryListHeadersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryListHeadersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "headers"),
    2: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.headers) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryListHeadersResponse, rhs: Babylon_Zoneconcierge_V1_QueryListHeadersResponse) -> Bool {
    if lhs.headers != rhs.headers {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryListEpochHeadersRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epoch_num"),
    2: .standard(proto: "chain_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.epochNum) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epochNum != 0 {
      try visitor.visitSingularUInt64Field(value: self.epochNum, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest, rhs: Babylon_Zoneconcierge_V1_QueryListEpochHeadersRequest) -> Bool {
    if lhs.epochNum != rhs.epochNum {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryListEpochHeadersResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "headers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.headers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse, rhs: Babylon_Zoneconcierge_V1_QueryListEpochHeadersResponse) -> Bool {
    if lhs.headers != rhs.headers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalizedChainsInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_ids"),
    2: .same(proto: "prove"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.chainIds) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.prove) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chainIds, fieldNumber: 1)
    }
    if self.prove != false {
      try visitor.visitSingularBoolField(value: self.prove, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest, rhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoRequest) -> Bool {
    if lhs.chainIds != rhs.chainIds {return false}
    if lhs.prove != rhs.prove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalizedChainsInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finalized_chains_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.finalizedChainsInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.finalizedChainsInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.finalizedChainsInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse, rhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainsInfoResponse) -> Bool {
    if lhs.finalizedChainsInfo != rhs.finalizedChainsInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalizedChainInfoUntilHeightRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "height"),
    3: .same(proto: "prove"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.prove) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 2)
    }
    if self.prove != false {
      try visitor.visitSingularBoolField(value: self.prove, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest, rhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightRequest) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.height != rhs.height {return false}
    if lhs.prove != rhs.prove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFinalizedChainInfoUntilHeightResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "finalized_chain_info"),
    2: .standard(proto: "epoch_info"),
    3: .standard(proto: "raw_checkpoint"),
    4: .standard(proto: "btc_submission_key"),
    5: .same(proto: "proof"),
  ]

  fileprivate class _StorageClass {
    var _finalizedChainInfo: Babylon_Zoneconcierge_V1_ChainInfo? = nil
    var _epochInfo: Babylon_Epoching_V1_Epoch? = nil
    var _rawCheckpoint: Babylon_Checkpointing_V1_RawCheckpoint? = nil
    var _btcSubmissionKey: Babylon_Btccheckpoint_V1_SubmissionKey? = nil
    var _proof: Babylon_Zoneconcierge_V1_ProofFinalizedChainInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _finalizedChainInfo = source._finalizedChainInfo
      _epochInfo = source._epochInfo
      _rawCheckpoint = source._rawCheckpoint
      _btcSubmissionKey = source._btcSubmissionKey
      _proof = source._proof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._finalizedChainInfo) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._epochInfo) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._rawCheckpoint) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._btcSubmissionKey) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._proof) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._finalizedChainInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._epochInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._rawCheckpoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._btcSubmissionKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._proof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse, rhs: Babylon_Zoneconcierge_V1_QueryFinalizedChainInfoUntilHeightResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._finalizedChainInfo != rhs_storage._finalizedChainInfo {return false}
        if _storage._epochInfo != rhs_storage._epochInfo {return false}
        if _storage._rawCheckpoint != rhs_storage._rawCheckpoint {return false}
        if _storage._btcSubmissionKey != rhs_storage._btcSubmissionKey {return false}
        if _storage._proof != rhs_storage._proof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
