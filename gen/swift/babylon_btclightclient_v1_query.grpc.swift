//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/btclightclient/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Babylon_Btclightclient_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Btclightclient_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Babylon_Btclightclient_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryParamsRequest, Babylon_Btclightclient_V1_QueryParamsResponse>

  func hashes(
    _ request: Babylon_Btclightclient_V1_QueryHashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryHashesRequest, Babylon_Btclightclient_V1_QueryHashesResponse>

  func contains(
    _ request: Babylon_Btclightclient_V1_QueryContainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryContainsRequest, Babylon_Btclightclient_V1_QueryContainsResponse>

  func containsBytes(
    _ request: Babylon_Btclightclient_V1_QueryContainsBytesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryContainsBytesRequest, Babylon_Btclightclient_V1_QueryContainsBytesResponse>

  func mainChain(
    _ request: Babylon_Btclightclient_V1_QueryMainChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryMainChainRequest, Babylon_Btclightclient_V1_QueryMainChainResponse>

  func tip(
    _ request: Babylon_Btclightclient_V1_QueryTipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryTipRequest, Babylon_Btclightclient_V1_QueryTipResponse>

  func baseHeader(
    _ request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryBaseHeaderRequest, Babylon_Btclightclient_V1_QueryBaseHeaderResponse>

  func headerDepth(
    _ request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryHeaderDepthRequest, Babylon_Btclightclient_V1_QueryHeaderDepthResponse>
}

extension Babylon_Btclightclient_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "babylon.btclightclient.v1.Query"
  }

  /// Params queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Babylon_Btclightclient_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryParamsRequest, Babylon_Btclightclient_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Hashes retrieves the hashes maintained by the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Hashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hashes(
    _ request: Babylon_Btclightclient_V1_QueryHashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryHashesRequest, Babylon_Btclightclient_V1_QueryHashesResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.hashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHashesInterceptors() ?? []
    )
  }

  /// Contains checks whether a hash is maintained by the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Contains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contains(
    _ request: Babylon_Btclightclient_V1_QueryContainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryContainsRequest, Babylon_Btclightclient_V1_QueryContainsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.contains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContainsInterceptors() ?? []
    )
  }

  /// ContainsBytes is a temporary method that
  /// checks whether a hash is maintained by the module.
  /// See discussion at https://github.com/babylonlabs-io/babylon/pull/132
  /// for more details.
  ///
  /// - Parameters:
  ///   - request: Request to send to ContainsBytes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func containsBytes(
    _ request: Babylon_Btclightclient_V1_QueryContainsBytesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryContainsBytesRequest, Babylon_Btclightclient_V1_QueryContainsBytesResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.containsBytes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContainsBytesInterceptors() ?? []
    )
  }

  /// MainChain returns the canonical chain
  ///
  /// - Parameters:
  ///   - request: Request to send to MainChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mainChain(
    _ request: Babylon_Btclightclient_V1_QueryMainChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryMainChainRequest, Babylon_Btclightclient_V1_QueryMainChainResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.mainChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMainChainInterceptors() ?? []
    )
  }

  /// Tip return best header on canonical chain
  ///
  /// - Parameters:
  ///   - request: Request to send to Tip.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tip(
    _ request: Babylon_Btclightclient_V1_QueryTipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryTipRequest, Babylon_Btclightclient_V1_QueryTipResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.tip.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTipInterceptors() ?? []
    )
  }

  /// BaseHeader returns the base BTC header of the chain. This header is defined
  /// on genesis.
  ///
  /// - Parameters:
  ///   - request: Request to send to BaseHeader.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func baseHeader(
    _ request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryBaseHeaderRequest, Babylon_Btclightclient_V1_QueryBaseHeaderResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.baseHeader.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseHeaderInterceptors() ?? []
    )
  }

  /// HeaderDepth returns the depth of the header in main chain or error if the
  /// block is not found or it exists on fork
  ///
  /// - Parameters:
  ///   - request: Request to send to HeaderDepth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func headerDepth(
    _ request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btclightclient_V1_QueryHeaderDepthRequest, Babylon_Btclightclient_V1_QueryHeaderDepthResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.headerDepth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeaderDepthInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Btclightclient_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Btclightclient_V1_QueryNIOClient")
internal final class Babylon_Btclightclient_V1_QueryClient: Babylon_Btclightclient_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.btclightclient.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Btclightclient_V1_QueryNIOClient: Babylon_Btclightclient_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.btclightclient.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btclightclient_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Babylon_Btclightclient_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryParamsRequest, Babylon_Btclightclient_V1_QueryParamsResponse>

  func makeHashesCall(
    _ request: Babylon_Btclightclient_V1_QueryHashesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryHashesRequest, Babylon_Btclightclient_V1_QueryHashesResponse>

  func makeContainsCall(
    _ request: Babylon_Btclightclient_V1_QueryContainsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryContainsRequest, Babylon_Btclightclient_V1_QueryContainsResponse>

  func makeContainsBytesCall(
    _ request: Babylon_Btclightclient_V1_QueryContainsBytesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryContainsBytesRequest, Babylon_Btclightclient_V1_QueryContainsBytesResponse>

  func makeMainChainCall(
    _ request: Babylon_Btclightclient_V1_QueryMainChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryMainChainRequest, Babylon_Btclightclient_V1_QueryMainChainResponse>

  func makeTipCall(
    _ request: Babylon_Btclightclient_V1_QueryTipRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryTipRequest, Babylon_Btclightclient_V1_QueryTipResponse>

  func makeBaseHeaderCall(
    _ request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryBaseHeaderRequest, Babylon_Btclightclient_V1_QueryBaseHeaderResponse>

  func makeHeaderDepthCall(
    _ request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryHeaderDepthRequest, Babylon_Btclightclient_V1_QueryHeaderDepthResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btclightclient_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btclightclient_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Babylon_Btclightclient_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryParamsRequest, Babylon_Btclightclient_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeHashesCall(
    _ request: Babylon_Btclightclient_V1_QueryHashesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryHashesRequest, Babylon_Btclightclient_V1_QueryHashesResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.hashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHashesInterceptors() ?? []
    )
  }

  internal func makeContainsCall(
    _ request: Babylon_Btclightclient_V1_QueryContainsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryContainsRequest, Babylon_Btclightclient_V1_QueryContainsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.contains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContainsInterceptors() ?? []
    )
  }

  internal func makeContainsBytesCall(
    _ request: Babylon_Btclightclient_V1_QueryContainsBytesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryContainsBytesRequest, Babylon_Btclightclient_V1_QueryContainsBytesResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.containsBytes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContainsBytesInterceptors() ?? []
    )
  }

  internal func makeMainChainCall(
    _ request: Babylon_Btclightclient_V1_QueryMainChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryMainChainRequest, Babylon_Btclightclient_V1_QueryMainChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.mainChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMainChainInterceptors() ?? []
    )
  }

  internal func makeTipCall(
    _ request: Babylon_Btclightclient_V1_QueryTipRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryTipRequest, Babylon_Btclightclient_V1_QueryTipResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.tip.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTipInterceptors() ?? []
    )
  }

  internal func makeBaseHeaderCall(
    _ request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryBaseHeaderRequest, Babylon_Btclightclient_V1_QueryBaseHeaderResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.baseHeader.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseHeaderInterceptors() ?? []
    )
  }

  internal func makeHeaderDepthCall(
    _ request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btclightclient_V1_QueryHeaderDepthRequest, Babylon_Btclightclient_V1_QueryHeaderDepthResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.headerDepth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeaderDepthInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btclightclient_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Babylon_Btclightclient_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func hashes(
    _ request: Babylon_Btclightclient_V1_QueryHashesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryHashesResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.hashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHashesInterceptors() ?? []
    )
  }

  internal func contains(
    _ request: Babylon_Btclightclient_V1_QueryContainsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryContainsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.contains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContainsInterceptors() ?? []
    )
  }

  internal func containsBytes(
    _ request: Babylon_Btclightclient_V1_QueryContainsBytesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryContainsBytesResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.containsBytes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContainsBytesInterceptors() ?? []
    )
  }

  internal func mainChain(
    _ request: Babylon_Btclightclient_V1_QueryMainChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryMainChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.mainChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMainChainInterceptors() ?? []
    )
  }

  internal func tip(
    _ request: Babylon_Btclightclient_V1_QueryTipRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryTipResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.tip.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTipInterceptors() ?? []
    )
  }

  internal func baseHeader(
    _ request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryBaseHeaderResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.baseHeader.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseHeaderInterceptors() ?? []
    )
  }

  internal func headerDepth(
    _ request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btclightclient_V1_QueryHeaderDepthResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btclightclient_V1_QueryClientMetadata.Methods.headerDepth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeaderDepthInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Btclightclient_V1_QueryAsyncClient: Babylon_Btclightclient_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Btclightclient_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryParamsRequest, Babylon_Btclightclient_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'hashes'.
  func makeHashesInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryHashesRequest, Babylon_Btclightclient_V1_QueryHashesResponse>]

  /// - Returns: Interceptors to use when invoking 'contains'.
  func makeContainsInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryContainsRequest, Babylon_Btclightclient_V1_QueryContainsResponse>]

  /// - Returns: Interceptors to use when invoking 'containsBytes'.
  func makeContainsBytesInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryContainsBytesRequest, Babylon_Btclightclient_V1_QueryContainsBytesResponse>]

  /// - Returns: Interceptors to use when invoking 'mainChain'.
  func makeMainChainInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryMainChainRequest, Babylon_Btclightclient_V1_QueryMainChainResponse>]

  /// - Returns: Interceptors to use when invoking 'tip'.
  func makeTipInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryTipRequest, Babylon_Btclightclient_V1_QueryTipResponse>]

  /// - Returns: Interceptors to use when invoking 'baseHeader'.
  func makeBaseHeaderInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryBaseHeaderRequest, Babylon_Btclightclient_V1_QueryBaseHeaderResponse>]

  /// - Returns: Interceptors to use when invoking 'headerDepth'.
  func makeHeaderDepthInterceptors() -> [ClientInterceptor<Babylon_Btclightclient_V1_QueryHeaderDepthRequest, Babylon_Btclightclient_V1_QueryHeaderDepthResponse>]
}

internal enum Babylon_Btclightclient_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.btclightclient.v1.Query",
    methods: [
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.params,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.hashes,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.contains,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.containsBytes,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.mainChain,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.tip,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.baseHeader,
      Babylon_Btclightclient_V1_QueryClientMetadata.Methods.headerDepth,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.btclightclient.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let hashes = GRPCMethodDescriptor(
      name: "Hashes",
      path: "/babylon.btclightclient.v1.Query/Hashes",
      type: GRPCCallType.unary
    )

    internal static let contains = GRPCMethodDescriptor(
      name: "Contains",
      path: "/babylon.btclightclient.v1.Query/Contains",
      type: GRPCCallType.unary
    )

    internal static let containsBytes = GRPCMethodDescriptor(
      name: "ContainsBytes",
      path: "/babylon.btclightclient.v1.Query/ContainsBytes",
      type: GRPCCallType.unary
    )

    internal static let mainChain = GRPCMethodDescriptor(
      name: "MainChain",
      path: "/babylon.btclightclient.v1.Query/MainChain",
      type: GRPCCallType.unary
    )

    internal static let tip = GRPCMethodDescriptor(
      name: "Tip",
      path: "/babylon.btclightclient.v1.Query/Tip",
      type: GRPCCallType.unary
    )

    internal static let baseHeader = GRPCMethodDescriptor(
      name: "BaseHeader",
      path: "/babylon.btclightclient.v1.Query/BaseHeader",
      type: GRPCCallType.unary
    )

    internal static let headerDepth = GRPCMethodDescriptor(
      name: "HeaderDepth",
      path: "/babylon.btclightclient.v1.Query/HeaderDepth",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Btclightclient_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Babylon_Btclightclient_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  func params(request: Babylon_Btclightclient_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryParamsResponse>

  /// Hashes retrieves the hashes maintained by the module.
  func hashes(request: Babylon_Btclightclient_V1_QueryHashesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryHashesResponse>

  /// Contains checks whether a hash is maintained by the module.
  func contains(request: Babylon_Btclightclient_V1_QueryContainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryContainsResponse>

  /// ContainsBytes is a temporary method that
  /// checks whether a hash is maintained by the module.
  /// See discussion at https://github.com/babylonlabs-io/babylon/pull/132
  /// for more details.
  func containsBytes(request: Babylon_Btclightclient_V1_QueryContainsBytesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryContainsBytesResponse>

  /// MainChain returns the canonical chain
  func mainChain(request: Babylon_Btclightclient_V1_QueryMainChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryMainChainResponse>

  /// Tip return best header on canonical chain
  func tip(request: Babylon_Btclightclient_V1_QueryTipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryTipResponse>

  /// BaseHeader returns the base BTC header of the chain. This header is defined
  /// on genesis.
  func baseHeader(request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryBaseHeaderResponse>

  /// HeaderDepth returns the depth of the header in main chain or error if the
  /// block is not found or it exists on fork
  func headerDepth(request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btclightclient_V1_QueryHeaderDepthResponse>
}

extension Babylon_Btclightclient_V1_QueryProvider {
  internal var serviceName: Substring {
    return Babylon_Btclightclient_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Hashes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryHashesRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryHashesResponse>(),
        interceptors: self.interceptors?.makeHashesInterceptors() ?? [],
        userFunction: self.hashes(request:context:)
      )

    case "Contains":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryContainsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryContainsResponse>(),
        interceptors: self.interceptors?.makeContainsInterceptors() ?? [],
        userFunction: self.contains(request:context:)
      )

    case "ContainsBytes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryContainsBytesRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryContainsBytesResponse>(),
        interceptors: self.interceptors?.makeContainsBytesInterceptors() ?? [],
        userFunction: self.containsBytes(request:context:)
      )

    case "MainChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryMainChainRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryMainChainResponse>(),
        interceptors: self.interceptors?.makeMainChainInterceptors() ?? [],
        userFunction: self.mainChain(request:context:)
      )

    case "Tip":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryTipRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryTipResponse>(),
        interceptors: self.interceptors?.makeTipInterceptors() ?? [],
        userFunction: self.tip(request:context:)
      )

    case "BaseHeader":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryBaseHeaderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryBaseHeaderResponse>(),
        interceptors: self.interceptors?.makeBaseHeaderInterceptors() ?? [],
        userFunction: self.baseHeader(request:context:)
      )

    case "HeaderDepth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryHeaderDepthRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryHeaderDepthResponse>(),
        interceptors: self.interceptors?.makeHeaderDepthInterceptors() ?? [],
        userFunction: self.headerDepth(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btclightclient_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btclightclient_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  @Sendable func params(
    request: Babylon_Btclightclient_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryParamsResponse

  /// Hashes retrieves the hashes maintained by the module.
  @Sendable func hashes(
    request: Babylon_Btclightclient_V1_QueryHashesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryHashesResponse

  /// Contains checks whether a hash is maintained by the module.
  @Sendable func contains(
    request: Babylon_Btclightclient_V1_QueryContainsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryContainsResponse

  /// ContainsBytes is a temporary method that
  /// checks whether a hash is maintained by the module.
  /// See discussion at https://github.com/babylonlabs-io/babylon/pull/132
  /// for more details.
  @Sendable func containsBytes(
    request: Babylon_Btclightclient_V1_QueryContainsBytesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryContainsBytesResponse

  /// MainChain returns the canonical chain
  @Sendable func mainChain(
    request: Babylon_Btclightclient_V1_QueryMainChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryMainChainResponse

  /// Tip return best header on canonical chain
  @Sendable func tip(
    request: Babylon_Btclightclient_V1_QueryTipRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryTipResponse

  /// BaseHeader returns the base BTC header of the chain. This header is defined
  /// on genesis.
  @Sendable func baseHeader(
    request: Babylon_Btclightclient_V1_QueryBaseHeaderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryBaseHeaderResponse

  /// HeaderDepth returns the depth of the header in main chain or error if the
  /// block is not found or it exists on fork
  @Sendable func headerDepth(
    request: Babylon_Btclightclient_V1_QueryHeaderDepthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btclightclient_V1_QueryHeaderDepthResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btclightclient_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btclightclient_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Btclightclient_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Btclightclient_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Hashes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryHashesRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryHashesResponse>(),
        interceptors: self.interceptors?.makeHashesInterceptors() ?? [],
        wrapping: self.hashes(request:context:)
      )

    case "Contains":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryContainsRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryContainsResponse>(),
        interceptors: self.interceptors?.makeContainsInterceptors() ?? [],
        wrapping: self.contains(request:context:)
      )

    case "ContainsBytes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryContainsBytesRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryContainsBytesResponse>(),
        interceptors: self.interceptors?.makeContainsBytesInterceptors() ?? [],
        wrapping: self.containsBytes(request:context:)
      )

    case "MainChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryMainChainRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryMainChainResponse>(),
        interceptors: self.interceptors?.makeMainChainInterceptors() ?? [],
        wrapping: self.mainChain(request:context:)
      )

    case "Tip":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryTipRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryTipResponse>(),
        interceptors: self.interceptors?.makeTipInterceptors() ?? [],
        wrapping: self.tip(request:context:)
      )

    case "BaseHeader":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryBaseHeaderRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryBaseHeaderResponse>(),
        interceptors: self.interceptors?.makeBaseHeaderInterceptors() ?? [],
        wrapping: self.baseHeader(request:context:)
      )

    case "HeaderDepth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btclightclient_V1_QueryHeaderDepthRequest>(),
        responseSerializer: ProtobufSerializer<Babylon_Btclightclient_V1_QueryHeaderDepthResponse>(),
        interceptors: self.interceptors?.makeHeaderDepthInterceptors() ?? [],
        wrapping: self.headerDepth(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Btclightclient_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryParamsRequest, Babylon_Btclightclient_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'hashes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHashesInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryHashesRequest, Babylon_Btclightclient_V1_QueryHashesResponse>]

  /// - Returns: Interceptors to use when handling 'contains'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContainsInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryContainsRequest, Babylon_Btclightclient_V1_QueryContainsResponse>]

  /// - Returns: Interceptors to use when handling 'containsBytes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContainsBytesInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryContainsBytesRequest, Babylon_Btclightclient_V1_QueryContainsBytesResponse>]

  /// - Returns: Interceptors to use when handling 'mainChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMainChainInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryMainChainRequest, Babylon_Btclightclient_V1_QueryMainChainResponse>]

  /// - Returns: Interceptors to use when handling 'tip'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTipInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryTipRequest, Babylon_Btclightclient_V1_QueryTipResponse>]

  /// - Returns: Interceptors to use when handling 'baseHeader'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBaseHeaderInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryBaseHeaderRequest, Babylon_Btclightclient_V1_QueryBaseHeaderResponse>]

  /// - Returns: Interceptors to use when handling 'headerDepth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHeaderDepthInterceptors() -> [ServerInterceptor<Babylon_Btclightclient_V1_QueryHeaderDepthRequest, Babylon_Btclightclient_V1_QueryHeaderDepthResponse>]
}

internal enum Babylon_Btclightclient_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "babylon.btclightclient.v1.Query",
    methods: [
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.params,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.hashes,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.contains,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.containsBytes,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.mainChain,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.tip,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.baseHeader,
      Babylon_Btclightclient_V1_QueryServerMetadata.Methods.headerDepth,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/babylon.btclightclient.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let hashes = GRPCMethodDescriptor(
      name: "Hashes",
      path: "/babylon.btclightclient.v1.Query/Hashes",
      type: GRPCCallType.unary
    )

    internal static let contains = GRPCMethodDescriptor(
      name: "Contains",
      path: "/babylon.btclightclient.v1.Query/Contains",
      type: GRPCCallType.unary
    )

    internal static let containsBytes = GRPCMethodDescriptor(
      name: "ContainsBytes",
      path: "/babylon.btclightclient.v1.Query/ContainsBytes",
      type: GRPCCallType.unary
    )

    internal static let mainChain = GRPCMethodDescriptor(
      name: "MainChain",
      path: "/babylon.btclightclient.v1.Query/MainChain",
      type: GRPCCallType.unary
    )

    internal static let tip = GRPCMethodDescriptor(
      name: "Tip",
      path: "/babylon.btclightclient.v1.Query/Tip",
      type: GRPCCallType.unary
    )

    internal static let baseHeader = GRPCMethodDescriptor(
      name: "BaseHeader",
      path: "/babylon.btclightclient.v1.Query/BaseHeader",
      type: GRPCCallType.unary
    )

    internal static let headerDepth = GRPCMethodDescriptor(
      name: "HeaderDepth",
      path: "/babylon.btclightclient.v1.Query/HeaderDepth",
      type: GRPCCallType.unary
    )
  }
}
