//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: coreum/nft/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Coreum_Nft_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Coreum_Nft_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func balance(
    _ request: Coreum_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryBalanceRequest, Coreum_Nft_V1beta1_QueryBalanceResponse>

  func owner(
    _ request: Coreum_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryOwnerRequest, Coreum_Nft_V1beta1_QueryOwnerResponse>

  func supply(
    _ request: Coreum_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QuerySupplyRequest, Coreum_Nft_V1beta1_QuerySupplyResponse>

  func nFTs(
    _ request: Coreum_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryNFTsRequest, Coreum_Nft_V1beta1_QueryNFTsResponse>

  func nFT(
    _ request: Coreum_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryNFTRequest, Coreum_Nft_V1beta1_QueryNFTResponse>

  func `class`(
    _ request: Coreum_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryClassRequest, Coreum_Nft_V1beta1_QueryClassResponse>

  func classes(
    _ request: Coreum_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryClassesRequest, Coreum_Nft_V1beta1_QueryClassesResponse>
}

extension Coreum_Nft_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "coreum.nft.v1beta1.Query"
  }

  /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Coreum_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryBalanceRequest, Coreum_Nft_V1beta1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
  ///
  /// - Parameters:
  ///   - request: Request to send to Owner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func owner(
    _ request: Coreum_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryOwnerRequest, Coreum_Nft_V1beta1_QueryOwnerResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Coreum_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QuerySupplyRequest, Coreum_Nft_V1beta1_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
  /// ERC721Enumerable
  ///
  /// - Parameters:
  ///   - request: Request to send to NFTs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nFTs(
    _ request: Coreum_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryNFTsRequest, Coreum_Nft_V1beta1_QueryNFTsResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  /// NFT queries an NFT based on its class and id.
  ///
  /// - Parameters:
  ///   - request: Request to send to NFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nFT(
    _ request: Coreum_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryNFTRequest, Coreum_Nft_V1beta1_QueryNFTResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  /// Class queries an NFT class based on its id
  ///
  /// - Parameters:
  ///   - request: Request to send to Class.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func `class`(
    _ request: Coreum_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryClassRequest, Coreum_Nft_V1beta1_QueryClassResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  /// Classes queries all NFT classes
  ///
  /// - Parameters:
  ///   - request: Request to send to Classes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classes(
    _ request: Coreum_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Nft_V1beta1_QueryClassesRequest, Coreum_Nft_V1beta1_QueryClassesResponse> {
    return self.makeUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Coreum_Nft_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Coreum_Nft_V1beta1_QueryNIOClient")
internal final class Coreum_Nft_V1beta1_QueryClient: Coreum_Nft_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the coreum.nft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Coreum_Nft_V1beta1_QueryNIOClient: Coreum_Nft_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the coreum.nft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Nft_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeBalanceCall(
    _ request: Coreum_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryBalanceRequest, Coreum_Nft_V1beta1_QueryBalanceResponse>

  func makeOwnerCall(
    _ request: Coreum_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryOwnerRequest, Coreum_Nft_V1beta1_QueryOwnerResponse>

  func makeSupplyCall(
    _ request: Coreum_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QuerySupplyRequest, Coreum_Nft_V1beta1_QuerySupplyResponse>

  func makeNftsCall(
    _ request: Coreum_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryNFTsRequest, Coreum_Nft_V1beta1_QueryNFTsResponse>

  func makeNftCall(
    _ request: Coreum_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryNFTRequest, Coreum_Nft_V1beta1_QueryNFTResponse>

  func makeClassCall(
    _ request: Coreum_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryClassRequest, Coreum_Nft_V1beta1_QueryClassResponse>

  func makeClassesCall(
    _ request: Coreum_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryClassesRequest, Coreum_Nft_V1beta1_QueryClassesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Nft_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Nft_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeBalanceCall(
    _ request: Coreum_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryBalanceRequest, Coreum_Nft_V1beta1_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func makeOwnerCall(
    _ request: Coreum_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryOwnerRequest, Coreum_Nft_V1beta1_QueryOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  internal func makeSupplyCall(
    _ request: Coreum_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QuerySupplyRequest, Coreum_Nft_V1beta1_QuerySupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func makeNftsCall(
    _ request: Coreum_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryNFTsRequest, Coreum_Nft_V1beta1_QueryNFTsResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  internal func makeNftCall(
    _ request: Coreum_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryNFTRequest, Coreum_Nft_V1beta1_QueryNFTResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  internal func makeClassCall(
    _ request: Coreum_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryClassRequest, Coreum_Nft_V1beta1_QueryClassResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  internal func makeClassesCall(
    _ request: Coreum_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Nft_V1beta1_QueryClassesRequest, Coreum_Nft_V1beta1_QueryClassesResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Nft_V1beta1_QueryAsyncClientProtocol {
  internal func balance(
    _ request: Coreum_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func owner(
    _ request: Coreum_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QueryOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.owner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  internal func supply(
    _ request: Coreum_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QuerySupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.supply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  internal func nFTs(
    _ request: Coreum_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QueryNFTsResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFTs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  internal func nFT(
    _ request: Coreum_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QueryNFTResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFT.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  internal func `class`(
    _ request: Coreum_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QueryClassResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.`class`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  internal func classes(
    _ request: Coreum_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Nft_V1beta1_QueryClassesResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Nft_V1beta1_QueryClientMetadata.Methods.classes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Coreum_Nft_V1beta1_QueryAsyncClient: Coreum_Nft_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Coreum_Nft_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QueryBalanceRequest, Coreum_Nft_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'owner'.
  func makeOwnerInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QueryOwnerRequest, Coreum_Nft_V1beta1_QueryOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QuerySupplyRequest, Coreum_Nft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'nFTs'.
  func makeNFTsInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QueryNFTsRequest, Coreum_Nft_V1beta1_QueryNFTsResponse>]

  /// - Returns: Interceptors to use when invoking 'nFT'.
  func makeNFTInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QueryNFTRequest, Coreum_Nft_V1beta1_QueryNFTResponse>]

  /// - Returns: Interceptors to use when invoking '`class`'.
  func makeClassInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QueryClassRequest, Coreum_Nft_V1beta1_QueryClassResponse>]

  /// - Returns: Interceptors to use when invoking 'classes'.
  func makeClassesInterceptors() -> [ClientInterceptor<Coreum_Nft_V1beta1_QueryClassesRequest, Coreum_Nft_V1beta1_QueryClassesResponse>]
}

internal enum Coreum_Nft_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "coreum.nft.v1beta1.Query",
    methods: [
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.balance,
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.owner,
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.supply,
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFTs,
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.nFT,
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.`class`,
      Coreum_Nft_V1beta1_QueryClientMetadata.Methods.classes,
    ]
  )

  internal enum Methods {
    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/coreum.nft.v1beta1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/coreum.nft.v1beta1.Query/Owner",
      type: GRPCCallType.unary
    )

    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/coreum.nft.v1beta1.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let nFTs = GRPCMethodDescriptor(
      name: "NFTs",
      path: "/coreum.nft.v1beta1.Query/NFTs",
      type: GRPCCallType.unary
    )

    internal static let nFT = GRPCMethodDescriptor(
      name: "NFT",
      path: "/coreum.nft.v1beta1.Query/NFT",
      type: GRPCCallType.unary
    )

    internal static let `class` = GRPCMethodDescriptor(
      name: "Class",
      path: "/coreum.nft.v1beta1.Query/Class",
      type: GRPCCallType.unary
    )

    internal static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/coreum.nft.v1beta1.Query/Classes",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Coreum_Nft_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Coreum_Nft_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
  func balance(request: Coreum_Nft_V1beta1_QueryBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QueryBalanceResponse>

  /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
  func owner(request: Coreum_Nft_V1beta1_QueryOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QueryOwnerResponse>

  /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
  func supply(request: Coreum_Nft_V1beta1_QuerySupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QuerySupplyResponse>

  /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
  /// ERC721Enumerable
  func nFTs(request: Coreum_Nft_V1beta1_QueryNFTsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QueryNFTsResponse>

  /// NFT queries an NFT based on its class and id.
  func nFT(request: Coreum_Nft_V1beta1_QueryNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QueryNFTResponse>

  /// Class queries an NFT class based on its id
  func `class`(request: Coreum_Nft_V1beta1_QueryClassRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QueryClassResponse>

  /// Classes queries all NFT classes
  func classes(request: Coreum_Nft_V1beta1_QueryClassesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Nft_V1beta1_QueryClassesResponse>
}

extension Coreum_Nft_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Coreum_Nft_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Balance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        userFunction: self.balance(request:context:)
      )

    case "Owner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryOwnerResponse>(),
        interceptors: self.interceptors?.makeOwnerInterceptors() ?? [],
        userFunction: self.owner(request:context:)
      )

    case "Supply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        userFunction: self.supply(request:context:)
      )

    case "NFTs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryNFTsRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryNFTsResponse>(),
        interceptors: self.interceptors?.makeNFTsInterceptors() ?? [],
        userFunction: self.nFTs(request:context:)
      )

    case "NFT":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryNFTRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryNFTResponse>(),
        interceptors: self.interceptors?.makeNFTInterceptors() ?? [],
        userFunction: self.nFT(request:context:)
      )

    case "Class":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryClassRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryClassResponse>(),
        interceptors: self.interceptors?.makeClassInterceptors() ?? [],
        userFunction: self.`class`(request:context:)
      )

    case "Classes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryClassesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryClassesResponse>(),
        interceptors: self.interceptors?.makeClassesInterceptors() ?? [],
        userFunction: self.classes(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Nft_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Nft_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
  @Sendable func balance(
    request: Coreum_Nft_V1beta1_QueryBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QueryBalanceResponse

  /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
  @Sendable func owner(
    request: Coreum_Nft_V1beta1_QueryOwnerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QueryOwnerResponse

  /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
  @Sendable func supply(
    request: Coreum_Nft_V1beta1_QuerySupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QuerySupplyResponse

  /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
  /// ERC721Enumerable
  @Sendable func nFTs(
    request: Coreum_Nft_V1beta1_QueryNFTsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QueryNFTsResponse

  /// NFT queries an NFT based on its class and id.
  @Sendable func nFT(
    request: Coreum_Nft_V1beta1_QueryNFTRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QueryNFTResponse

  /// Class queries an NFT class based on its id
  @Sendable func `class`(
    request: Coreum_Nft_V1beta1_QueryClassRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QueryClassResponse

  /// Classes queries all NFT classes
  @Sendable func classes(
    request: Coreum_Nft_V1beta1_QueryClassesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Nft_V1beta1_QueryClassesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Nft_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Nft_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Coreum_Nft_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Coreum_Nft_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Balance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        wrapping: self.balance(request:context:)
      )

    case "Owner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryOwnerRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryOwnerResponse>(),
        interceptors: self.interceptors?.makeOwnerInterceptors() ?? [],
        wrapping: self.owner(request:context:)
      )

    case "Supply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        wrapping: self.supply(request:context:)
      )

    case "NFTs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryNFTsRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryNFTsResponse>(),
        interceptors: self.interceptors?.makeNFTsInterceptors() ?? [],
        wrapping: self.nFTs(request:context:)
      )

    case "NFT":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryNFTRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryNFTResponse>(),
        interceptors: self.interceptors?.makeNFTInterceptors() ?? [],
        wrapping: self.nFT(request:context:)
      )

    case "Class":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryClassRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryClassResponse>(),
        interceptors: self.interceptors?.makeClassInterceptors() ?? [],
        wrapping: self.`class`(request:context:)
      )

    case "Classes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Nft_V1beta1_QueryClassesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Nft_V1beta1_QueryClassesResponse>(),
        interceptors: self.interceptors?.makeClassesInterceptors() ?? [],
        wrapping: self.classes(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Coreum_Nft_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'balance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QueryBalanceRequest, Coreum_Nft_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'owner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QueryOwnerRequest, Coreum_Nft_V1beta1_QueryOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'supply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QuerySupplyRequest, Coreum_Nft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when handling 'nFTs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNFTsInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QueryNFTsRequest, Coreum_Nft_V1beta1_QueryNFTsResponse>]

  /// - Returns: Interceptors to use when handling 'nFT'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNFTInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QueryNFTRequest, Coreum_Nft_V1beta1_QueryNFTResponse>]

  /// - Returns: Interceptors to use when handling '`class`'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QueryClassRequest, Coreum_Nft_V1beta1_QueryClassResponse>]

  /// - Returns: Interceptors to use when handling 'classes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClassesInterceptors() -> [ServerInterceptor<Coreum_Nft_V1beta1_QueryClassesRequest, Coreum_Nft_V1beta1_QueryClassesResponse>]
}

internal enum Coreum_Nft_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "coreum.nft.v1beta1.Query",
    methods: [
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.balance,
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.owner,
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.supply,
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.nFTs,
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.nFT,
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.`class`,
      Coreum_Nft_V1beta1_QueryServerMetadata.Methods.classes,
    ]
  )

  internal enum Methods {
    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/coreum.nft.v1beta1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let owner = GRPCMethodDescriptor(
      name: "Owner",
      path: "/coreum.nft.v1beta1.Query/Owner",
      type: GRPCCallType.unary
    )

    internal static let supply = GRPCMethodDescriptor(
      name: "Supply",
      path: "/coreum.nft.v1beta1.Query/Supply",
      type: GRPCCallType.unary
    )

    internal static let nFTs = GRPCMethodDescriptor(
      name: "NFTs",
      path: "/coreum.nft.v1beta1.Query/NFTs",
      type: GRPCCallType.unary
    )

    internal static let nFT = GRPCMethodDescriptor(
      name: "NFT",
      path: "/coreum.nft.v1beta1.Query/NFT",
      type: GRPCCallType.unary
    )

    internal static let `class` = GRPCMethodDescriptor(
      name: "Class",
      path: "/coreum.nft.v1beta1.Query/Class",
      type: GRPCCallType.unary
    )

    internal static let classes = GRPCMethodDescriptor(
      name: "Classes",
      path: "/coreum.nft.v1beta1.Query/Classes",
      type: GRPCCallType.unary
    )
  }
}
