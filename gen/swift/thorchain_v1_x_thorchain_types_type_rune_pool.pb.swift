// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_rune_pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// RUNEPool represents ownership of currently active POL.
struct Types_RUNEPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reserveUnits: String = String()

  var poolUnits: String = String()

  var runeDeposited: String = String()

  var runeWithdrawn: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_RUNEPool: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_RUNEPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RUNEPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reserve_units"),
    2: .standard(proto: "pool_units"),
    3: .standard(proto: "rune_deposited"),
    4: .standard(proto: "rune_withdrawn"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.reserveUnits) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.poolUnits) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runeDeposited) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.runeWithdrawn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reserveUnits.isEmpty {
      try visitor.visitSingularStringField(value: self.reserveUnits, fieldNumber: 1)
    }
    if !self.poolUnits.isEmpty {
      try visitor.visitSingularStringField(value: self.poolUnits, fieldNumber: 2)
    }
    if !self.runeDeposited.isEmpty {
      try visitor.visitSingularStringField(value: self.runeDeposited, fieldNumber: 3)
    }
    if !self.runeWithdrawn.isEmpty {
      try visitor.visitSingularStringField(value: self.runeWithdrawn, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_RUNEPool, rhs: Types_RUNEPool) -> Bool {
    if lhs.reserveUnits != rhs.reserveUnits {return false}
    if lhs.poolUnits != rhs.poolUnits {return false}
    if lhs.runeDeposited != rhs.runeDeposited {return false}
    if lhs.runeWithdrawn != rhs.runeWithdrawn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
