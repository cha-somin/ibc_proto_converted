// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ixo/claims/v1beta1/event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// CollectionCreatedEvent is an event triggered on a Collection creation
struct Ixo_Claims_V1beta1_CollectionCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collection: Ixo_Claims_V1beta1_Collection {
    get {return _collection ?? Ixo_Claims_V1beta1_Collection()}
    set {_collection = newValue}
  }
  /// Returns true if `collection` has been explicitly set.
  var hasCollection: Bool {return self._collection != nil}
  /// Clears the value of `collection`. Subsequent reads from it will return its default value.
  mutating func clearCollection() {self._collection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collection: Ixo_Claims_V1beta1_Collection? = nil
}

/// CollectionUpdatedEvent is an event triggered on a Collection update
struct Ixo_Claims_V1beta1_CollectionUpdatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collection: Ixo_Claims_V1beta1_Collection {
    get {return _collection ?? Ixo_Claims_V1beta1_Collection()}
    set {_collection = newValue}
  }
  /// Returns true if `collection` has been explicitly set.
  var hasCollection: Bool {return self._collection != nil}
  /// Clears the value of `collection`. Subsequent reads from it will return its default value.
  mutating func clearCollection() {self._collection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collection: Ixo_Claims_V1beta1_Collection? = nil
}

/// CollectionCreatedEvent is an event triggered on a Claim submission
struct Ixo_Claims_V1beta1_ClaimSubmittedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var claim: Ixo_Claims_V1beta1_Claim {
    get {return _claim ?? Ixo_Claims_V1beta1_Claim()}
    set {_claim = newValue}
  }
  /// Returns true if `claim` has been explicitly set.
  var hasClaim: Bool {return self._claim != nil}
  /// Clears the value of `claim`. Subsequent reads from it will return its default value.
  mutating func clearClaim() {self._claim = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _claim: Ixo_Claims_V1beta1_Claim? = nil
}

/// ClaimUpdatedEvent is an event triggered on a Claim update
struct Ixo_Claims_V1beta1_ClaimUpdatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var claim: Ixo_Claims_V1beta1_Claim {
    get {return _claim ?? Ixo_Claims_V1beta1_Claim()}
    set {_claim = newValue}
  }
  /// Returns true if `claim` has been explicitly set.
  var hasClaim: Bool {return self._claim != nil}
  /// Clears the value of `claim`. Subsequent reads from it will return its default value.
  mutating func clearClaim() {self._claim = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _claim: Ixo_Claims_V1beta1_Claim? = nil
}

/// ClaimEvaluatedEvent is an event triggered on a Claim evaluation
struct Ixo_Claims_V1beta1_ClaimEvaluatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var evaluation: Ixo_Claims_V1beta1_Evaluation {
    get {return _evaluation ?? Ixo_Claims_V1beta1_Evaluation()}
    set {_evaluation = newValue}
  }
  /// Returns true if `evaluation` has been explicitly set.
  var hasEvaluation: Bool {return self._evaluation != nil}
  /// Clears the value of `evaluation`. Subsequent reads from it will return its default value.
  mutating func clearEvaluation() {self._evaluation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _evaluation: Ixo_Claims_V1beta1_Evaluation? = nil
}

/// ClaimDisputedEvent is an event triggered on a Claim dispute
struct Ixo_Claims_V1beta1_ClaimDisputedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dispute: Ixo_Claims_V1beta1_Dispute {
    get {return _dispute ?? Ixo_Claims_V1beta1_Dispute()}
    set {_dispute = newValue}
  }
  /// Returns true if `dispute` has been explicitly set.
  var hasDispute: Bool {return self._dispute != nil}
  /// Clears the value of `dispute`. Subsequent reads from it will return its default value.
  mutating func clearDispute() {self._dispute = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dispute: Ixo_Claims_V1beta1_Dispute? = nil
}

/// ClaimDisputedEvent is an event triggered on a Claim dispute
struct Ixo_Claims_V1beta1_PaymentWithdrawnEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var withdraw: Ixo_Claims_V1beta1_WithdrawPaymentConstraints {
    get {return _withdraw ?? Ixo_Claims_V1beta1_WithdrawPaymentConstraints()}
    set {_withdraw = newValue}
  }
  /// Returns true if `withdraw` has been explicitly set.
  var hasWithdraw: Bool {return self._withdraw != nil}
  /// Clears the value of `withdraw`. Subsequent reads from it will return its default value.
  mutating func clearWithdraw() {self._withdraw = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _withdraw: Ixo_Claims_V1beta1_WithdrawPaymentConstraints? = nil
}

/// ClaimDisputedEvent is an event triggered on a Claim dispute
struct Ixo_Claims_V1beta1_PaymentWithdrawCreatedEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var withdraw: Ixo_Claims_V1beta1_WithdrawPaymentConstraints {
    get {return _withdraw ?? Ixo_Claims_V1beta1_WithdrawPaymentConstraints()}
    set {_withdraw = newValue}
  }
  /// Returns true if `withdraw` has been explicitly set.
  var hasWithdraw: Bool {return self._withdraw != nil}
  /// Clears the value of `withdraw`. Subsequent reads from it will return its default value.
  mutating func clearWithdraw() {self._withdraw = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _withdraw: Ixo_Claims_V1beta1_WithdrawPaymentConstraints? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ixo_Claims_V1beta1_CollectionCreatedEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_CollectionUpdatedEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_ClaimSubmittedEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_ClaimUpdatedEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_ClaimEvaluatedEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_ClaimDisputedEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_PaymentWithdrawnEvent: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_PaymentWithdrawCreatedEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ixo.claims.v1beta1"

extension Ixo_Claims_V1beta1_CollectionCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectionCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "collection"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._collection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._collection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_CollectionCreatedEvent, rhs: Ixo_Claims_V1beta1_CollectionCreatedEvent) -> Bool {
    if lhs._collection != rhs._collection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_CollectionUpdatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectionUpdatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "collection"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._collection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._collection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_CollectionUpdatedEvent, rhs: Ixo_Claims_V1beta1_CollectionUpdatedEvent) -> Bool {
    if lhs._collection != rhs._collection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_ClaimSubmittedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimSubmittedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "claim"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._claim) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._claim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_ClaimSubmittedEvent, rhs: Ixo_Claims_V1beta1_ClaimSubmittedEvent) -> Bool {
    if lhs._claim != rhs._claim {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_ClaimUpdatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimUpdatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "claim"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._claim) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._claim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_ClaimUpdatedEvent, rhs: Ixo_Claims_V1beta1_ClaimUpdatedEvent) -> Bool {
    if lhs._claim != rhs._claim {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_ClaimEvaluatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimEvaluatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "evaluation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._evaluation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._evaluation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_ClaimEvaluatedEvent, rhs: Ixo_Claims_V1beta1_ClaimEvaluatedEvent) -> Bool {
    if lhs._evaluation != rhs._evaluation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_ClaimDisputedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimDisputedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dispute"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dispute) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dispute {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_ClaimDisputedEvent, rhs: Ixo_Claims_V1beta1_ClaimDisputedEvent) -> Bool {
    if lhs._dispute != rhs._dispute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_PaymentWithdrawnEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaymentWithdrawnEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "withdraw"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._withdraw) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._withdraw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_PaymentWithdrawnEvent, rhs: Ixo_Claims_V1beta1_PaymentWithdrawnEvent) -> Bool {
    if lhs._withdraw != rhs._withdraw {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_PaymentWithdrawCreatedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaymentWithdrawCreatedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "withdraw"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._withdraw) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._withdraw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_PaymentWithdrawCreatedEvent, rhs: Ixo_Claims_V1beta1_PaymentWithdrawCreatedEvent) -> Bool {
    if lhs._withdraw != rhs._withdraw {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
