//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bcna/bcna/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Bitcannaglobal_Bcna_Bcna_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Bitcannaglobal_Bcna_Bcna_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? { get }

  func createBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>

  func updateBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>

  func deleteBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>

  func createSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>

  func updateSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>

  func deleteSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>
}

extension Bitcannaglobal_Bcna_Bcna_MsgClientProtocol {
  internal var serviceName: String {
    return "bitcannaglobal.bcna.bcna.Msg"
  }

  /// Unary call to CreateBitcannaid
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse> {
    return self.makeUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBitcannaid
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse> {
    return self.makeUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? []
    )
  }

  /// Unary call to DeleteBitcannaid
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse> {
    return self.makeUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? []
    )
  }

  /// Unary call to CreateSupplychain
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSupplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse> {
    return self.makeUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? []
    )
  }

  /// Unary call to UpdateSupplychain
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSupplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse> {
    return self.makeUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? []
    )
  }

  /// Unary call to DeleteSupplychain
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSupplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse> {
    return self.makeUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Bitcannaglobal_Bcna_Bcna_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Bitcannaglobal_Bcna_Bcna_MsgNIOClient")
internal final class Bitcannaglobal_Bcna_Bcna_MsgClient: Bitcannaglobal_Bcna_Bcna_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bitcannaglobal.bcna.bcna.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Bitcannaglobal_Bcna_Bcna_MsgNIOClient: Bitcannaglobal_Bcna_Bcna_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the bitcannaglobal.bcna.bcna.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bitcannaglobal_Bcna_Bcna_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateBitcannaidCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>

  func makeUpdateBitcannaidCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>

  func makeDeleteBitcannaidCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>

  func makeCreateSupplychainCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>

  func makeUpdateSupplychainCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>

  func makeDeleteSupplychainCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bitcannaglobal_Bcna_Bcna_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateBitcannaidCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? []
    )
  }

  internal func makeUpdateBitcannaidCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? []
    )
  }

  internal func makeDeleteBitcannaidCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? []
    )
  }

  internal func makeCreateSupplychainCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? []
    )
  }

  internal func makeUpdateSupplychainCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? []
    )
  }

  internal func makeDeleteSupplychainCall(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bitcannaglobal_Bcna_Bcna_MsgAsyncClientProtocol {
  internal func createBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions? = nil
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? []
    )
  }

  internal func updateBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions? = nil
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? []
    )
  }

  internal func deleteBitcannaid(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions? = nil
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteBitcannaid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? []
    )
  }

  internal func createSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions? = nil
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? []
    )
  }

  internal func updateSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions? = nil
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? []
    )
  }

  internal func deleteSupplychain(
    _ request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions? = nil
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteSupplychain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Bitcannaglobal_Bcna_Bcna_MsgAsyncClient: Bitcannaglobal_Bcna_Bcna_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Bitcannaglobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createBitcannaid'.
  func makeCreateBitcannaidInterceptors() -> [ClientInterceptor<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBitcannaid'.
  func makeUpdateBitcannaidInterceptors() -> [ClientInterceptor<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteBitcannaid'.
  func makeDeleteBitcannaidInterceptors() -> [ClientInterceptor<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'createSupplychain'.
  func makeCreateSupplychainInterceptors() -> [ClientInterceptor<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>]

  /// - Returns: Interceptors to use when invoking 'updateSupplychain'.
  func makeUpdateSupplychainInterceptors() -> [ClientInterceptor<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSupplychain'.
  func makeDeleteSupplychainInterceptors() -> [ClientInterceptor<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>]
}

internal enum Bitcannaglobal_Bcna_Bcna_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "bitcannaglobal.bcna.bcna.Msg",
    methods: [
      Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createBitcannaid,
      Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateBitcannaid,
      Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteBitcannaid,
      Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.createSupplychain,
      Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.updateSupplychain,
      Bitcannaglobal_Bcna_Bcna_MsgClientMetadata.Methods.deleteSupplychain,
    ]
  )

  internal enum Methods {
    internal static let createBitcannaid = GRPCMethodDescriptor(
      name: "CreateBitcannaid",
      path: "/bitcannaglobal.bcna.bcna.Msg/CreateBitcannaid",
      type: GRPCCallType.unary
    )

    internal static let updateBitcannaid = GRPCMethodDescriptor(
      name: "UpdateBitcannaid",
      path: "/bitcannaglobal.bcna.bcna.Msg/UpdateBitcannaid",
      type: GRPCCallType.unary
    )

    internal static let deleteBitcannaid = GRPCMethodDescriptor(
      name: "DeleteBitcannaid",
      path: "/bitcannaglobal.bcna.bcna.Msg/DeleteBitcannaid",
      type: GRPCCallType.unary
    )

    internal static let createSupplychain = GRPCMethodDescriptor(
      name: "CreateSupplychain",
      path: "/bitcannaglobal.bcna.bcna.Msg/CreateSupplychain",
      type: GRPCCallType.unary
    )

    internal static let updateSupplychain = GRPCMethodDescriptor(
      name: "UpdateSupplychain",
      path: "/bitcannaglobal.bcna.bcna.Msg/UpdateSupplychain",
      type: GRPCCallType.unary
    )

    internal static let deleteSupplychain = GRPCMethodDescriptor(
      name: "DeleteSupplychain",
      path: "/bitcannaglobal.bcna.bcna.Msg/DeleteSupplychain",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bitcannaglobal_Bcna_Bcna_MsgProvider: CallHandlerProvider {
  var interceptors: Bitcannaglobal_Bcna_Bcna_MsgServerInterceptorFactoryProtocol? { get }

  func createBitcannaid(request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, context: StatusOnlyCallContext) -> EventLoopFuture<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>

  func updateBitcannaid(request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, context: StatusOnlyCallContext) -> EventLoopFuture<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>

  func deleteBitcannaid(request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, context: StatusOnlyCallContext) -> EventLoopFuture<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>

  func createSupplychain(request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, context: StatusOnlyCallContext) -> EventLoopFuture<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>

  func updateSupplychain(request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, context: StatusOnlyCallContext) -> EventLoopFuture<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>

  func deleteSupplychain(request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, context: StatusOnlyCallContext) -> EventLoopFuture<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>
}

extension Bitcannaglobal_Bcna_Bcna_MsgProvider {
  internal var serviceName: Substring {
    return Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>(),
        interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? [],
        userFunction: self.createBitcannaid(request:context:)
      )

    case "UpdateBitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>(),
        interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? [],
        userFunction: self.updateBitcannaid(request:context:)
      )

    case "DeleteBitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>(),
        interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? [],
        userFunction: self.deleteBitcannaid(request:context:)
      )

    case "CreateSupplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>(),
        interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? [],
        userFunction: self.createSupplychain(request:context:)
      )

    case "UpdateSupplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>(),
        interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? [],
        userFunction: self.updateSupplychain(request:context:)
      )

    case "DeleteSupplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>(),
        interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? [],
        userFunction: self.deleteSupplychain(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bitcannaglobal_Bcna_Bcna_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bitcannaglobal_Bcna_Bcna_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createBitcannaid(
    request: Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse

  @Sendable func updateBitcannaid(
    request: Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse

  @Sendable func deleteBitcannaid(
    request: Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse

  @Sendable func createSupplychain(
    request: Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse

  @Sendable func updateSupplychain(
    request: Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse

  @Sendable func deleteSupplychain(
    request: Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bitcannaglobal_Bcna_Bcna_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Bitcannaglobal_Bcna_Bcna_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBitcannaid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>(),
        interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? [],
        wrapping: self.createBitcannaid(request:context:)
      )

    case "UpdateBitcannaid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>(),
        interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? [],
        wrapping: self.updateBitcannaid(request:context:)
      )

    case "DeleteBitcannaid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>(),
        interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? [],
        wrapping: self.deleteBitcannaid(request:context:)
      )

    case "CreateSupplychain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>(),
        interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? [],
        wrapping: self.createSupplychain(request:context:)
      )

    case "UpdateSupplychain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>(),
        interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? [],
        wrapping: self.updateSupplychain(request:context:)
      )

    case "DeleteSupplychain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain>(),
        responseSerializer: ProtobufSerializer<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>(),
        interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? [],
        wrapping: self.deleteSupplychain(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bitcannaglobal_Bcna_Bcna_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createBitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBitcannaidInterceptors() -> [ServerInterceptor<Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgCreateBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'updateBitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBitcannaidInterceptors() -> [ServerInterceptor<Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'deleteBitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteBitcannaidInterceptors() -> [ServerInterceptor<Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaid, Bitcannaglobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'createSupplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSupplychainInterceptors() -> [ServerInterceptor<Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgCreateSupplychainResponse>]

  /// - Returns: Interceptors to use when handling 'updateSupplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateSupplychainInterceptors() -> [ServerInterceptor<Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychain, Bitcannaglobal_Bcna_Bcna_MsgUpdateSupplychainResponse>]

  /// - Returns: Interceptors to use when handling 'deleteSupplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteSupplychainInterceptors() -> [ServerInterceptor<Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychain, Bitcannaglobal_Bcna_Bcna_MsgDeleteSupplychainResponse>]
}

internal enum Bitcannaglobal_Bcna_Bcna_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "bitcannaglobal.bcna.bcna.Msg",
    methods: [
      Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.Methods.createBitcannaid,
      Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.Methods.updateBitcannaid,
      Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.Methods.deleteBitcannaid,
      Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.Methods.createSupplychain,
      Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.Methods.updateSupplychain,
      Bitcannaglobal_Bcna_Bcna_MsgServerMetadata.Methods.deleteSupplychain,
    ]
  )

  internal enum Methods {
    internal static let createBitcannaid = GRPCMethodDescriptor(
      name: "CreateBitcannaid",
      path: "/bitcannaglobal.bcna.bcna.Msg/CreateBitcannaid",
      type: GRPCCallType.unary
    )

    internal static let updateBitcannaid = GRPCMethodDescriptor(
      name: "UpdateBitcannaid",
      path: "/bitcannaglobal.bcna.bcna.Msg/UpdateBitcannaid",
      type: GRPCCallType.unary
    )

    internal static let deleteBitcannaid = GRPCMethodDescriptor(
      name: "DeleteBitcannaid",
      path: "/bitcannaglobal.bcna.bcna.Msg/DeleteBitcannaid",
      type: GRPCCallType.unary
    )

    internal static let createSupplychain = GRPCMethodDescriptor(
      name: "CreateSupplychain",
      path: "/bitcannaglobal.bcna.bcna.Msg/CreateSupplychain",
      type: GRPCCallType.unary
    )

    internal static let updateSupplychain = GRPCMethodDescriptor(
      name: "UpdateSupplychain",
      path: "/bitcannaglobal.bcna.bcna.Msg/UpdateSupplychain",
      type: GRPCCallType.unary
    )

    internal static let deleteSupplychain = GRPCMethodDescriptor(
      name: "DeleteSupplychain",
      path: "/bitcannaglobal.bcna.bcna.Msg/DeleteSupplychain",
      type: GRPCCallType.unary
    )
  }
}
