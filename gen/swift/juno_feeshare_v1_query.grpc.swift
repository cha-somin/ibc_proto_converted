//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: juno/feeshare/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Juno_Feeshare_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Juno_Feeshare_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? { get }

  func feeShares(
    _ request: Juno_Feeshare_V1_QueryFeeSharesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_QueryFeeSharesRequest, Juno_Feeshare_V1_QueryFeeSharesResponse>

  func feeShare(
    _ request: Juno_Feeshare_V1_QueryFeeShareRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_QueryFeeShareRequest, Juno_Feeshare_V1_QueryFeeShareResponse>

  func params(
    _ request: Juno_Feeshare_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_QueryParamsRequest, Juno_Feeshare_V1_QueryParamsResponse>

  func deployerFeeShares(
    _ request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>

  func withdrawerFeeShares(
    _ request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>
}

extension Juno_Feeshare_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "juno.feeshare.v1.Query"
  }

  /// FeeShares retrieves all registered FeeShares
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeShares(
    _ request: Juno_Feeshare_V1_QueryFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_QueryFeeSharesRequest, Juno_Feeshare_V1_QueryFeeSharesResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeSharesInterceptors() ?? []
    )
  }

  /// FeeShare retrieves a registered FeeShare for a given contract address
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeShare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeShare(
    _ request: Juno_Feeshare_V1_QueryFeeShareRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_QueryFeeShareRequest, Juno_Feeshare_V1_QueryFeeShareResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeShareInterceptors() ?? []
    )
  }

  /// Params retrieves the FeeShare module params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Juno_Feeshare_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_QueryParamsRequest, Juno_Feeshare_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DeployerFeeShares retrieves all FeeShares that a given deployer has
  /// registered
  ///
  /// - Parameters:
  ///   - request: Request to send to DeployerFeeShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deployerFeeShares(
    _ request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, Juno_Feeshare_V1_QueryDeployerFeeSharesResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.deployerFeeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployerFeeSharesInterceptors() ?? []
    )
  }

  /// WithdrawerFeeShares retrieves all FeeShares with a given withdrawer
  /// address
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawerFeeShares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawerFeeShares(
    _ request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse> {
    return self.makeUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.withdrawerFeeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawerFeeSharesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Juno_Feeshare_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Juno_Feeshare_V1_QueryNIOClient")
internal final class Juno_Feeshare_V1_QueryClient: Juno_Feeshare_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the juno.feeshare.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Juno_Feeshare_V1_QueryNIOClient: Juno_Feeshare_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the juno.feeshare.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Juno_Feeshare_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeFeeSharesCall(
    _ request: Juno_Feeshare_V1_QueryFeeSharesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryFeeSharesRequest, Juno_Feeshare_V1_QueryFeeSharesResponse>

  func makeFeeShareCall(
    _ request: Juno_Feeshare_V1_QueryFeeShareRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryFeeShareRequest, Juno_Feeshare_V1_QueryFeeShareResponse>

  func makeParamsCall(
    _ request: Juno_Feeshare_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryParamsRequest, Juno_Feeshare_V1_QueryParamsResponse>

  func makeDeployerFeeSharesCall(
    _ request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>

  func makeWithdrawerFeeSharesCall(
    _ request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Juno_Feeshare_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Juno_Feeshare_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeFeeSharesCall(
    _ request: Juno_Feeshare_V1_QueryFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryFeeSharesRequest, Juno_Feeshare_V1_QueryFeeSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeSharesInterceptors() ?? []
    )
  }

  internal func makeFeeShareCall(
    _ request: Juno_Feeshare_V1_QueryFeeShareRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryFeeShareRequest, Juno_Feeshare_V1_QueryFeeShareResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeShareInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Juno_Feeshare_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryParamsRequest, Juno_Feeshare_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeDeployerFeeSharesCall(
    _ request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, Juno_Feeshare_V1_QueryDeployerFeeSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.deployerFeeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployerFeeSharesInterceptors() ?? []
    )
  }

  internal func makeWithdrawerFeeSharesCall(
    _ request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse> {
    return self.makeAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.withdrawerFeeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawerFeeSharesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Juno_Feeshare_V1_QueryAsyncClientProtocol {
  internal func feeShares(
    _ request: Juno_Feeshare_V1_QueryFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_QueryFeeSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeSharesInterceptors() ?? []
    )
  }

  internal func feeShare(
    _ request: Juno_Feeshare_V1_QueryFeeShareRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_QueryFeeShareResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeShareInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Juno_Feeshare_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func deployerFeeShares(
    _ request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_QueryDeployerFeeSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.deployerFeeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeployerFeeSharesInterceptors() ?? []
    )
  }

  internal func withdrawerFeeShares(
    _ request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse {
    return try await self.performAsyncUnaryCall(
      path: Juno_Feeshare_V1_QueryClientMetadata.Methods.withdrawerFeeShares.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawerFeeSharesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Juno_Feeshare_V1_QueryAsyncClient: Juno_Feeshare_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Juno_Feeshare_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'feeShares'.
  func makeFeeSharesInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_QueryFeeSharesRequest, Juno_Feeshare_V1_QueryFeeSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'feeShare'.
  func makeFeeShareInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_QueryFeeShareRequest, Juno_Feeshare_V1_QueryFeeShareResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_QueryParamsRequest, Juno_Feeshare_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'deployerFeeShares'.
  func makeDeployerFeeSharesInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawerFeeShares'.
  func makeWithdrawerFeeSharesInterceptors() -> [ClientInterceptor<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>]
}

internal enum Juno_Feeshare_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "juno.feeshare.v1.Query",
    methods: [
      Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShares,
      Juno_Feeshare_V1_QueryClientMetadata.Methods.feeShare,
      Juno_Feeshare_V1_QueryClientMetadata.Methods.params,
      Juno_Feeshare_V1_QueryClientMetadata.Methods.deployerFeeShares,
      Juno_Feeshare_V1_QueryClientMetadata.Methods.withdrawerFeeShares,
    ]
  )

  internal enum Methods {
    internal static let feeShares = GRPCMethodDescriptor(
      name: "FeeShares",
      path: "/juno.feeshare.v1.Query/FeeShares",
      type: GRPCCallType.unary
    )

    internal static let feeShare = GRPCMethodDescriptor(
      name: "FeeShare",
      path: "/juno.feeshare.v1.Query/FeeShare",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/juno.feeshare.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let deployerFeeShares = GRPCMethodDescriptor(
      name: "DeployerFeeShares",
      path: "/juno.feeshare.v1.Query/DeployerFeeShares",
      type: GRPCCallType.unary
    )

    internal static let withdrawerFeeShares = GRPCMethodDescriptor(
      name: "WithdrawerFeeShares",
      path: "/juno.feeshare.v1.Query/WithdrawerFeeShares",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Juno_Feeshare_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Juno_Feeshare_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// FeeShares retrieves all registered FeeShares
  func feeShares(request: Juno_Feeshare_V1_QueryFeeSharesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_QueryFeeSharesResponse>

  /// FeeShare retrieves a registered FeeShare for a given contract address
  func feeShare(request: Juno_Feeshare_V1_QueryFeeShareRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_QueryFeeShareResponse>

  /// Params retrieves the FeeShare module params
  func params(request: Juno_Feeshare_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_QueryParamsResponse>

  /// DeployerFeeShares retrieves all FeeShares that a given deployer has
  /// registered
  func deployerFeeShares(request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>

  /// WithdrawerFeeShares retrieves all FeeShares with a given withdrawer
  /// address
  func withdrawerFeeShares(request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>
}

extension Juno_Feeshare_V1_QueryProvider {
  internal var serviceName: Substring {
    return Juno_Feeshare_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FeeShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryFeeSharesRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryFeeSharesResponse>(),
        interceptors: self.interceptors?.makeFeeSharesInterceptors() ?? [],
        userFunction: self.feeShares(request:context:)
      )

    case "FeeShare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryFeeShareRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryFeeShareResponse>(),
        interceptors: self.interceptors?.makeFeeShareInterceptors() ?? [],
        userFunction: self.feeShare(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "DeployerFeeShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>(),
        interceptors: self.interceptors?.makeDeployerFeeSharesInterceptors() ?? [],
        userFunction: self.deployerFeeShares(request:context:)
      )

    case "WithdrawerFeeShares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>(),
        interceptors: self.interceptors?.makeWithdrawerFeeSharesInterceptors() ?? [],
        userFunction: self.withdrawerFeeShares(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Juno_Feeshare_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Juno_Feeshare_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// FeeShares retrieves all registered FeeShares
  @Sendable func feeShares(
    request: Juno_Feeshare_V1_QueryFeeSharesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_QueryFeeSharesResponse

  /// FeeShare retrieves a registered FeeShare for a given contract address
  @Sendable func feeShare(
    request: Juno_Feeshare_V1_QueryFeeShareRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_QueryFeeShareResponse

  /// Params retrieves the FeeShare module params
  @Sendable func params(
    request: Juno_Feeshare_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_QueryParamsResponse

  /// DeployerFeeShares retrieves all FeeShares that a given deployer has
  /// registered
  @Sendable func deployerFeeShares(
    request: Juno_Feeshare_V1_QueryDeployerFeeSharesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_QueryDeployerFeeSharesResponse

  /// WithdrawerFeeShares retrieves all FeeShares with a given withdrawer
  /// address
  @Sendable func withdrawerFeeShares(
    request: Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Juno_Feeshare_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Juno_Feeshare_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Juno_Feeshare_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Juno_Feeshare_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FeeShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryFeeSharesRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryFeeSharesResponse>(),
        interceptors: self.interceptors?.makeFeeSharesInterceptors() ?? [],
        wrapping: self.feeShares(request:context:)
      )

    case "FeeShare":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryFeeShareRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryFeeShareResponse>(),
        interceptors: self.interceptors?.makeFeeShareInterceptors() ?? [],
        wrapping: self.feeShare(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "DeployerFeeShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>(),
        interceptors: self.interceptors?.makeDeployerFeeSharesInterceptors() ?? [],
        wrapping: self.deployerFeeShares(request:context:)
      )

    case "WithdrawerFeeShares":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest>(),
        responseSerializer: ProtobufSerializer<Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>(),
        interceptors: self.interceptors?.makeWithdrawerFeeSharesInterceptors() ?? [],
        wrapping: self.withdrawerFeeShares(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Juno_Feeshare_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'feeShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeSharesInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_QueryFeeSharesRequest, Juno_Feeshare_V1_QueryFeeSharesResponse>]

  /// - Returns: Interceptors to use when handling 'feeShare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeShareInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_QueryFeeShareRequest, Juno_Feeshare_V1_QueryFeeShareResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_QueryParamsRequest, Juno_Feeshare_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'deployerFeeShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeployerFeeSharesInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_QueryDeployerFeeSharesRequest, Juno_Feeshare_V1_QueryDeployerFeeSharesResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawerFeeShares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawerFeeSharesInterceptors() -> [ServerInterceptor<Juno_Feeshare_V1_QueryWithdrawerFeeSharesRequest, Juno_Feeshare_V1_QueryWithdrawerFeeSharesResponse>]
}

internal enum Juno_Feeshare_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "juno.feeshare.v1.Query",
    methods: [
      Juno_Feeshare_V1_QueryServerMetadata.Methods.feeShares,
      Juno_Feeshare_V1_QueryServerMetadata.Methods.feeShare,
      Juno_Feeshare_V1_QueryServerMetadata.Methods.params,
      Juno_Feeshare_V1_QueryServerMetadata.Methods.deployerFeeShares,
      Juno_Feeshare_V1_QueryServerMetadata.Methods.withdrawerFeeShares,
    ]
  )

  internal enum Methods {
    internal static let feeShares = GRPCMethodDescriptor(
      name: "FeeShares",
      path: "/juno.feeshare.v1.Query/FeeShares",
      type: GRPCCallType.unary
    )

    internal static let feeShare = GRPCMethodDescriptor(
      name: "FeeShare",
      path: "/juno.feeshare.v1.Query/FeeShare",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/juno.feeshare.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let deployerFeeShares = GRPCMethodDescriptor(
      name: "DeployerFeeShares",
      path: "/juno.feeshare.v1.Query/DeployerFeeShares",
      type: GRPCCallType.unary
    )

    internal static let withdrawerFeeShares = GRPCMethodDescriptor(
      name: "WithdrawerFeeShares",
      path: "/juno.feeshare.v1.Query/WithdrawerFeeShares",
      type: GRPCCallType.unary
    )
  }
}
