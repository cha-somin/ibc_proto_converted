// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: initia/gov/v1/gov.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the x/gov module.
struct Initia_Gov_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Minimum deposit for a proposal to enter voting period.
  var minDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._minDeposit}
    set {_uniqueStorage()._minDeposit = newValue}
  }

  /// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  /// months.
  var maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._maxDepositPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._maxDepositPeriod = newValue}
  }
  /// Returns true if `maxDepositPeriod` has been explicitly set.
  var hasMaxDepositPeriod: Bool {return _storage._maxDepositPeriod != nil}
  /// Clears the value of `maxDepositPeriod`. Subsequent reads from it will return its default value.
  mutating func clearMaxDepositPeriod() {_uniqueStorage()._maxDepositPeriod = nil}

  /// Duration of the voting period.
  var votingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._votingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._votingPeriod = newValue}
  }
  /// Returns true if `votingPeriod` has been explicitly set.
  var hasVotingPeriod: Bool {return _storage._votingPeriod != nil}
  /// Clears the value of `votingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearVotingPeriod() {_uniqueStorage()._votingPeriod = nil}

  ///  Minimum percentage of total stake needed to vote for a result to be
  ///  considered valid.
  var quorum: String {
    get {return _storage._quorum}
    set {_uniqueStorage()._quorum = newValue}
  }

  ///  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
  var threshold: String {
    get {return _storage._threshold}
    set {_uniqueStorage()._threshold = newValue}
  }

  ///  Minimum value of Veto votes to Total votes ratio for proposal to be
  ///  vetoed. Default value: 1/3.
  var vetoThreshold: String {
    get {return _storage._vetoThreshold}
    set {_uniqueStorage()._vetoThreshold = newValue}
  }

  ///  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
  var minInitialDepositRatio: String {
    get {return _storage._minInitialDepositRatio}
    set {_uniqueStorage()._minInitialDepositRatio = newValue}
  }

  /// The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.
  ///
  /// Since: cosmos-sdk 0.50
  var proposalCancelRatio: String {
    get {return _storage._proposalCancelRatio}
    set {_uniqueStorage()._proposalCancelRatio = newValue}
  }

  /// The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.
  /// If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.
  ///
  /// Since: cosmos-sdk 0.50
  var proposalCancelDest: String {
    get {return _storage._proposalCancelDest}
    set {_uniqueStorage()._proposalCancelDest = newValue}
  }

  /// Duration of the voting period of an expedited proposal.
  ///
  /// Since: cosmos-sdk 0.50
  var expeditedVotingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._expeditedVotingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._expeditedVotingPeriod = newValue}
  }
  /// Returns true if `expeditedVotingPeriod` has been explicitly set.
  var hasExpeditedVotingPeriod: Bool {return _storage._expeditedVotingPeriod != nil}
  /// Clears the value of `expeditedVotingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearExpeditedVotingPeriod() {_uniqueStorage()._expeditedVotingPeriod = nil}

  /// Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
  ///
  /// Since: cosmos-sdk 0.50
  var expeditedThreshold: String {
    get {return _storage._expeditedThreshold}
    set {_uniqueStorage()._expeditedThreshold = newValue}
  }

  ///  Minimum expedited deposit for a proposal to enter voting period.
  var expeditedMinDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._expeditedMinDeposit}
    set {_uniqueStorage()._expeditedMinDeposit = newValue}
  }

  /// burn deposits if a proposal does not meet quorum
  var burnVoteQuorum: Bool {
    get {return _storage._burnVoteQuorum}
    set {_uniqueStorage()._burnVoteQuorum = newValue}
  }

  /// burn deposits if the proposal does not enter voting period
  var burnProposalDepositPrevote: Bool {
    get {return _storage._burnProposalDepositPrevote}
    set {_uniqueStorage()._burnProposalDepositPrevote = newValue}
  }

  /// burn deposits if quorum with vote type no_veto is met
  var burnVoteVeto: Bool {
    get {return _storage._burnVoteVeto}
    set {_uniqueStorage()._burnVoteVeto = newValue}
  }

  /// The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.
  /// Default value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be
  /// required.
  ///
  /// Since: cosmos-sdk 0.50
  var minDepositRatio: String {
    get {return _storage._minDepositRatio}
    set {_uniqueStorage()._minDepositRatio = newValue}
  }

  /// Minimum deposit for a emergency proposal to enter voting period.
  var emergencyMinDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._emergencyMinDeposit}
    set {_uniqueStorage()._emergencyMinDeposit = newValue}
  }

  /// Tally interval for emergency proposal.
  var emergencyTallyInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._emergencyTallyInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._emergencyTallyInterval = newValue}
  }
  /// Returns true if `emergencyTallyInterval` has been explicitly set.
  var hasEmergencyTallyInterval: Bool {return _storage._emergencyTallyInterval != nil}
  /// Clears the value of `emergencyTallyInterval`. Subsequent reads from it will return its default value.
  mutating func clearEmergencyTallyInterval() {_uniqueStorage()._emergencyTallyInterval = nil}

  /// Low threshold functions for emergency and expedited proposal.
  /// These are Move function identifiers and can only be applied
  /// for Move execute messages.
  var lowThresholdFunctions: [String] {
    get {return _storage._lowThresholdFunctions}
    set {_uniqueStorage()._lowThresholdFunctions = newValue}
  }

  /// Vesting is the vesting contract info for tally.
  var vesting: Initia_Gov_V1_Vesting {
    get {return _storage._vesting ?? Initia_Gov_V1_Vesting()}
    set {_uniqueStorage()._vesting = newValue}
  }
  /// Returns true if `vesting` has been explicitly set.
  var hasVesting: Bool {return _storage._vesting != nil}
  /// Clears the value of `vesting`. Subsequent reads from it will return its default value.
  mutating func clearVesting() {_uniqueStorage()._vesting = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Vesting defines the vesting contract info for MsgVestingVote.
/// At tally time, gov module would check vesting token amount.
struct Initia_Gov_V1_Vesting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// module_addr is the address of the vesting module.
  var moduleAddr: String = String()

  /// module_name is the name of the vesting module.
  var moduleName: String = String()

  /// creator_addr is the address of the creator of the vesting contract.
  var creatorAddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Initia_Gov_V1_TallyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tallyHeight: UInt64 = 0

  var totalStakingPower: String = String()

  var totalVestingPower: String = String()

  /// v1_tally_result is the original TallyResult from cosmos-sdk,
  /// which contains both staking and vesting power.
  var v1TallyResult: Cosmos_Gov_V1_TallyResult {
    get {return _v1TallyResult ?? Cosmos_Gov_V1_TallyResult()}
    set {_v1TallyResult = newValue}
  }
  /// Returns true if `v1TallyResult` has been explicitly set.
  var hasV1TallyResult: Bool {return self._v1TallyResult != nil}
  /// Clears the value of `v1TallyResult`. Subsequent reads from it will return its default value.
  mutating func clearV1TallyResult() {self._v1TallyResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _v1TallyResult: Cosmos_Gov_V1_TallyResult? = nil
}

/// Proposal defines the core field members of a governance proposal.
struct Initia_Gov_V1_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id defines the unique id of the proposal.
  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// messages are the arbitrary messages to be executed if the proposal passes.
  var messages: [SwiftProtobuf.Google_Protobuf_Any] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  /// status defines the proposal status.
  var status: Cosmos_Gov_V1_ProposalStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// final_tally_result is the final tally result of the proposal. When
  /// querying a proposal via gRPC, this field is not populated until the
  /// proposal's voting period has ended.
  var finalTallyResult: Initia_Gov_V1_TallyResult {
    get {return _storage._finalTallyResult ?? Initia_Gov_V1_TallyResult()}
    set {_uniqueStorage()._finalTallyResult = newValue}
  }
  /// Returns true if `finalTallyResult` has been explicitly set.
  var hasFinalTallyResult: Bool {return _storage._finalTallyResult != nil}
  /// Clears the value of `finalTallyResult`. Subsequent reads from it will return its default value.
  mutating func clearFinalTallyResult() {_uniqueStorage()._finalTallyResult = nil}

  /// submit_time is the time of proposal submission.
  var submitTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._submitTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._submitTime = newValue}
  }
  /// Returns true if `submitTime` has been explicitly set.
  var hasSubmitTime: Bool {return _storage._submitTime != nil}
  /// Clears the value of `submitTime`. Subsequent reads from it will return its default value.
  mutating func clearSubmitTime() {_uniqueStorage()._submitTime = nil}

  /// deposit_end_time is the end time for deposition.
  var depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._depositEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._depositEndTime = newValue}
  }
  /// Returns true if `depositEndTime` has been explicitly set.
  var hasDepositEndTime: Bool {return _storage._depositEndTime != nil}
  /// Clears the value of `depositEndTime`. Subsequent reads from it will return its default value.
  mutating func clearDepositEndTime() {_uniqueStorage()._depositEndTime = nil}

  /// total_deposit is the total deposit on the proposal.
  var totalDeposit: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._totalDeposit}
    set {_uniqueStorage()._totalDeposit = newValue}
  }

  /// voting_start_time is the starting time to vote on a proposal.
  var votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._votingStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._votingStartTime = newValue}
  }
  /// Returns true if `votingStartTime` has been explicitly set.
  var hasVotingStartTime: Bool {return _storage._votingStartTime != nil}
  /// Clears the value of `votingStartTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingStartTime() {_uniqueStorage()._votingStartTime = nil}

  /// voting_end_time is the end time of voting on a proposal.
  var votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._votingEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._votingEndTime = newValue}
  }
  /// Returns true if `votingEndTime` has been explicitly set.
  var hasVotingEndTime: Bool {return _storage._votingEndTime != nil}
  /// Clears the value of `votingEndTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingEndTime() {_uniqueStorage()._votingEndTime = nil}

  var emergencyStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._emergencyStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._emergencyStartTime = newValue}
  }
  /// Returns true if `emergencyStartTime` has been explicitly set.
  var hasEmergencyStartTime: Bool {return _storage._emergencyStartTime != nil}
  /// Clears the value of `emergencyStartTime`. Subsequent reads from it will return its default value.
  mutating func clearEmergencyStartTime() {_uniqueStorage()._emergencyStartTime = nil}

  var emergencyNextTallyTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._emergencyNextTallyTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._emergencyNextTallyTime = newValue}
  }
  /// Returns true if `emergencyNextTallyTime` has been explicitly set.
  var hasEmergencyNextTallyTime: Bool {return _storage._emergencyNextTallyTime != nil}
  /// Clears the value of `emergencyNextTallyTime`. Subsequent reads from it will return its default value.
  mutating func clearEmergencyNextTallyTime() {_uniqueStorage()._emergencyNextTallyTime = nil}

  /// metadata is any arbitrary metadata attached to the proposal.
  /// the recommended format of the metadata is to be found here:
  /// https://docs.cosmos.network/v0.47/modules/gov#proposal-3
  var metadata: String {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  /// title is the title of the proposal
  ///
  /// Since: cosmos-sdk 0.47
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// summary is a short summary of the proposal
  ///
  /// Since: cosmos-sdk 0.47
  var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  /// proposer is the address of the proposal sumbitter
  ///
  /// Since: cosmos-sdk 0.47
  var proposer: String {
    get {return _storage._proposer}
    set {_uniqueStorage()._proposer = newValue}
  }

  /// expedited defines if the proposal is expedited
  ///
  /// Since: cosmos-sdk 0.50
  var expedited: Bool {
    get {return _storage._expedited}
    set {_uniqueStorage()._expedited = newValue}
  }

  var emergency: Bool {
    get {return _storage._emergency}
    set {_uniqueStorage()._emergency = newValue}
  }

  /// failed_reason defines the reason why the proposal failed
  ///
  /// Since: cosmos-sdk 0.50
  var failedReason: String {
    get {return _storage._failedReason}
    set {_uniqueStorage()._failedReason = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Initia_Gov_V1_Params: @unchecked Sendable {}
extension Initia_Gov_V1_Vesting: @unchecked Sendable {}
extension Initia_Gov_V1_TallyResult: @unchecked Sendable {}
extension Initia_Gov_V1_Proposal: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "initia.gov.v1"

extension Initia_Gov_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_deposit"),
    2: .standard(proto: "max_deposit_period"),
    3: .standard(proto: "voting_period"),
    4: .same(proto: "quorum"),
    5: .same(proto: "threshold"),
    6: .standard(proto: "veto_threshold"),
    7: .standard(proto: "min_initial_deposit_ratio"),
    8: .standard(proto: "proposal_cancel_ratio"),
    9: .standard(proto: "proposal_cancel_dest"),
    10: .standard(proto: "expedited_voting_period"),
    11: .standard(proto: "expedited_threshold"),
    12: .standard(proto: "expedited_min_deposit"),
    13: .standard(proto: "burn_vote_quorum"),
    14: .standard(proto: "burn_proposal_deposit_prevote"),
    15: .standard(proto: "burn_vote_veto"),
    16: .standard(proto: "min_deposit_ratio"),
    91: .standard(proto: "emergency_min_deposit"),
    92: .standard(proto: "emergency_tally_interval"),
    93: .standard(proto: "low_threshold_functions"),
    94: .same(proto: "vesting"),
  ]

  fileprivate class _StorageClass {
    var _minDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _maxDepositPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _votingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _quorum: String = String()
    var _threshold: String = String()
    var _vetoThreshold: String = String()
    var _minInitialDepositRatio: String = String()
    var _proposalCancelRatio: String = String()
    var _proposalCancelDest: String = String()
    var _expeditedVotingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _expeditedThreshold: String = String()
    var _expeditedMinDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _burnVoteQuorum: Bool = false
    var _burnProposalDepositPrevote: Bool = false
    var _burnVoteVeto: Bool = false
    var _minDepositRatio: String = String()
    var _emergencyMinDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _emergencyTallyInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _lowThresholdFunctions: [String] = []
    var _vesting: Initia_Gov_V1_Vesting? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _minDeposit = source._minDeposit
      _maxDepositPeriod = source._maxDepositPeriod
      _votingPeriod = source._votingPeriod
      _quorum = source._quorum
      _threshold = source._threshold
      _vetoThreshold = source._vetoThreshold
      _minInitialDepositRatio = source._minInitialDepositRatio
      _proposalCancelRatio = source._proposalCancelRatio
      _proposalCancelDest = source._proposalCancelDest
      _expeditedVotingPeriod = source._expeditedVotingPeriod
      _expeditedThreshold = source._expeditedThreshold
      _expeditedMinDeposit = source._expeditedMinDeposit
      _burnVoteQuorum = source._burnVoteQuorum
      _burnProposalDepositPrevote = source._burnProposalDepositPrevote
      _burnVoteVeto = source._burnVoteVeto
      _minDepositRatio = source._minDepositRatio
      _emergencyMinDeposit = source._emergencyMinDeposit
      _emergencyTallyInterval = source._emergencyTallyInterval
      _lowThresholdFunctions = source._lowThresholdFunctions
      _vesting = source._vesting
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._minDeposit) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._maxDepositPeriod) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._votingPeriod) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._quorum) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._threshold) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._vetoThreshold) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._minInitialDepositRatio) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._proposalCancelRatio) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._proposalCancelDest) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._expeditedVotingPeriod) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._expeditedThreshold) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._expeditedMinDeposit) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._burnVoteQuorum) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._burnProposalDepositPrevote) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._burnVoteVeto) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._minDepositRatio) }()
        case 91: try { try decoder.decodeRepeatedMessageField(value: &_storage._emergencyMinDeposit) }()
        case 92: try { try decoder.decodeSingularMessageField(value: &_storage._emergencyTallyInterval) }()
        case 93: try { try decoder.decodeRepeatedStringField(value: &_storage._lowThresholdFunctions) }()
        case 94: try { try decoder.decodeSingularMessageField(value: &_storage._vesting) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._minDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._minDeposit, fieldNumber: 1)
      }
      try { if let v = _storage._maxDepositPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._votingPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._quorum.isEmpty {
        try visitor.visitSingularStringField(value: _storage._quorum, fieldNumber: 4)
      }
      if !_storage._threshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._threshold, fieldNumber: 5)
      }
      if !_storage._vetoThreshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vetoThreshold, fieldNumber: 6)
      }
      if !_storage._minInitialDepositRatio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minInitialDepositRatio, fieldNumber: 7)
      }
      if !_storage._proposalCancelRatio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proposalCancelRatio, fieldNumber: 8)
      }
      if !_storage._proposalCancelDest.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proposalCancelDest, fieldNumber: 9)
      }
      try { if let v = _storage._expeditedVotingPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._expeditedThreshold.isEmpty {
        try visitor.visitSingularStringField(value: _storage._expeditedThreshold, fieldNumber: 11)
      }
      if !_storage._expeditedMinDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._expeditedMinDeposit, fieldNumber: 12)
      }
      if _storage._burnVoteQuorum != false {
        try visitor.visitSingularBoolField(value: _storage._burnVoteQuorum, fieldNumber: 13)
      }
      if _storage._burnProposalDepositPrevote != false {
        try visitor.visitSingularBoolField(value: _storage._burnProposalDepositPrevote, fieldNumber: 14)
      }
      if _storage._burnVoteVeto != false {
        try visitor.visitSingularBoolField(value: _storage._burnVoteVeto, fieldNumber: 15)
      }
      if !_storage._minDepositRatio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minDepositRatio, fieldNumber: 16)
      }
      if !_storage._emergencyMinDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._emergencyMinDeposit, fieldNumber: 91)
      }
      try { if let v = _storage._emergencyTallyInterval {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 92)
      } }()
      if !_storage._lowThresholdFunctions.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._lowThresholdFunctions, fieldNumber: 93)
      }
      try { if let v = _storage._vesting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 94)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Gov_V1_Params, rhs: Initia_Gov_V1_Params) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._minDeposit != rhs_storage._minDeposit {return false}
        if _storage._maxDepositPeriod != rhs_storage._maxDepositPeriod {return false}
        if _storage._votingPeriod != rhs_storage._votingPeriod {return false}
        if _storage._quorum != rhs_storage._quorum {return false}
        if _storage._threshold != rhs_storage._threshold {return false}
        if _storage._vetoThreshold != rhs_storage._vetoThreshold {return false}
        if _storage._minInitialDepositRatio != rhs_storage._minInitialDepositRatio {return false}
        if _storage._proposalCancelRatio != rhs_storage._proposalCancelRatio {return false}
        if _storage._proposalCancelDest != rhs_storage._proposalCancelDest {return false}
        if _storage._expeditedVotingPeriod != rhs_storage._expeditedVotingPeriod {return false}
        if _storage._expeditedThreshold != rhs_storage._expeditedThreshold {return false}
        if _storage._expeditedMinDeposit != rhs_storage._expeditedMinDeposit {return false}
        if _storage._burnVoteQuorum != rhs_storage._burnVoteQuorum {return false}
        if _storage._burnProposalDepositPrevote != rhs_storage._burnProposalDepositPrevote {return false}
        if _storage._burnVoteVeto != rhs_storage._burnVoteVeto {return false}
        if _storage._minDepositRatio != rhs_storage._minDepositRatio {return false}
        if _storage._emergencyMinDeposit != rhs_storage._emergencyMinDeposit {return false}
        if _storage._emergencyTallyInterval != rhs_storage._emergencyTallyInterval {return false}
        if _storage._lowThresholdFunctions != rhs_storage._lowThresholdFunctions {return false}
        if _storage._vesting != rhs_storage._vesting {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Gov_V1_Vesting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vesting"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_addr"),
    2: .standard(proto: "module_name"),
    3: .standard(proto: "creator_addr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moduleAddr) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moduleName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.creatorAddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moduleAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleAddr, fieldNumber: 1)
    }
    if !self.moduleName.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleName, fieldNumber: 2)
    }
    if !self.creatorAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorAddr, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Gov_V1_Vesting, rhs: Initia_Gov_V1_Vesting) -> Bool {
    if lhs.moduleAddr != rhs.moduleAddr {return false}
    if lhs.moduleName != rhs.moduleName {return false}
    if lhs.creatorAddr != rhs.creatorAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Gov_V1_TallyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tally_height"),
    2: .standard(proto: "total_staking_power"),
    3: .standard(proto: "total_vesting_power"),
    4: .standard(proto: "v1_tally_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.tallyHeight) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.totalStakingPower) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.totalVestingPower) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._v1TallyResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.tallyHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.tallyHeight, fieldNumber: 1)
    }
    if !self.totalStakingPower.isEmpty {
      try visitor.visitSingularStringField(value: self.totalStakingPower, fieldNumber: 2)
    }
    if !self.totalVestingPower.isEmpty {
      try visitor.visitSingularStringField(value: self.totalVestingPower, fieldNumber: 3)
    }
    try { if let v = self._v1TallyResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Gov_V1_TallyResult, rhs: Initia_Gov_V1_TallyResult) -> Bool {
    if lhs.tallyHeight != rhs.tallyHeight {return false}
    if lhs.totalStakingPower != rhs.totalStakingPower {return false}
    if lhs.totalVestingPower != rhs.totalVestingPower {return false}
    if lhs._v1TallyResult != rhs._v1TallyResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Gov_V1_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "messages"),
    3: .same(proto: "status"),
    4: .standard(proto: "final_tally_result"),
    5: .standard(proto: "submit_time"),
    6: .standard(proto: "deposit_end_time"),
    7: .standard(proto: "total_deposit"),
    8: .standard(proto: "voting_start_time"),
    9: .standard(proto: "voting_end_time"),
    10: .standard(proto: "emergency_start_time"),
    11: .standard(proto: "emergency_next_tally_time"),
    12: .same(proto: "metadata"),
    13: .same(proto: "title"),
    14: .same(proto: "summary"),
    15: .same(proto: "proposer"),
    16: .same(proto: "expedited"),
    17: .same(proto: "emergency"),
    18: .standard(proto: "failed_reason"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _messages: [SwiftProtobuf.Google_Protobuf_Any] = []
    var _status: Cosmos_Gov_V1_ProposalStatus = .unspecified
    var _finalTallyResult: Initia_Gov_V1_TallyResult? = nil
    var _submitTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _depositEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _totalDeposit: [Cosmos_Base_V1beta1_Coin] = []
    var _votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _emergencyStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _emergencyNextTallyTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _metadata: String = String()
    var _title: String = String()
    var _summary: String = String()
    var _proposer: String = String()
    var _expedited: Bool = false
    var _emergency: Bool = false
    var _failedReason: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _messages = source._messages
      _status = source._status
      _finalTallyResult = source._finalTallyResult
      _submitTime = source._submitTime
      _depositEndTime = source._depositEndTime
      _totalDeposit = source._totalDeposit
      _votingStartTime = source._votingStartTime
      _votingEndTime = source._votingEndTime
      _emergencyStartTime = source._emergencyStartTime
      _emergencyNextTallyTime = source._emergencyNextTallyTime
      _metadata = source._metadata
      _title = source._title
      _summary = source._summary
      _proposer = source._proposer
      _expedited = source._expedited
      _emergency = source._emergency
      _failedReason = source._failedReason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._messages) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._finalTallyResult) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._submitTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._depositEndTime) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._totalDeposit) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._votingStartTime) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._votingEndTime) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._emergencyStartTime) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._emergencyNextTallyTime) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._metadata) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._summary) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._proposer) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._expedited) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._emergency) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._failedReason) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 2)
      }
      if _storage._status != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      try { if let v = _storage._finalTallyResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._submitTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._depositEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._totalDeposit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._totalDeposit, fieldNumber: 7)
      }
      try { if let v = _storage._votingStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._votingEndTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._emergencyStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._emergencyNextTallyTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if !_storage._metadata.isEmpty {
        try visitor.visitSingularStringField(value: _storage._metadata, fieldNumber: 12)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 13)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 14)
      }
      if !_storage._proposer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proposer, fieldNumber: 15)
      }
      if _storage._expedited != false {
        try visitor.visitSingularBoolField(value: _storage._expedited, fieldNumber: 16)
      }
      if _storage._emergency != false {
        try visitor.visitSingularBoolField(value: _storage._emergency, fieldNumber: 17)
      }
      if !_storage._failedReason.isEmpty {
        try visitor.visitSingularStringField(value: _storage._failedReason, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Gov_V1_Proposal, rhs: Initia_Gov_V1_Proposal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._messages != rhs_storage._messages {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._finalTallyResult != rhs_storage._finalTallyResult {return false}
        if _storage._submitTime != rhs_storage._submitTime {return false}
        if _storage._depositEndTime != rhs_storage._depositEndTime {return false}
        if _storage._totalDeposit != rhs_storage._totalDeposit {return false}
        if _storage._votingStartTime != rhs_storage._votingStartTime {return false}
        if _storage._votingEndTime != rhs_storage._votingEndTime {return false}
        if _storage._emergencyStartTime != rhs_storage._emergencyStartTime {return false}
        if _storage._emergencyNextTallyTime != rhs_storage._emergencyNextTallyTime {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._proposer != rhs_storage._proposer {return false}
        if _storage._expedited != rhs_storage._expedited {return false}
        if _storage._emergency != rhs_storage._emergency {return false}
        if _storage._failedReason != rhs_storage._failedReason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
