// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: coreum/asset/nft/v1/nft.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ClassFeature defines possible features of non-fungible token class.
enum Coreum_Asset_Nft_V1_ClassFeature: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case burning // = 0
  case freezing // = 1
  case whitelisting // = 2
  case disableSending // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .burning
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .burning
    case 1: self = .freezing
    case 2: self = .whitelisting
    case 3: self = .disableSending
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .burning: return 0
    case .freezing: return 1
    case .whitelisting: return 2
    case .disableSending: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Coreum_Asset_Nft_V1_ClassFeature: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Coreum_Asset_Nft_V1_ClassFeature] = [
    .burning,
    .freezing,
    .whitelisting,
    .disableSending,
  ]
}

#endif  // swift(>=4.2)

/// ClassDefinition defines the non-fungible token class settings to store.
struct Coreum_Asset_Nft_V1_ClassDefinition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var issuer: String = String()

  var features: [Coreum_Asset_Nft_V1_ClassFeature] = []

  /// royalty_rate is a number between 0 and 1,which will be used in coreum native Dex. 
  /// whenever an NFT this class is traded on the Dex, the traded amount will be multiplied by this value
  /// that will be transferred to the issuer of the NFT. 
  var royaltyRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Class is a full representation of the non-fungible token class.
struct Coreum_Asset_Nft_V1_Class {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var issuer: String = String()

  var name: String = String()

  var symbol: String = String()

  var description_p: String = String()

  var uri: String = String()

  var uriHash: String = String()

  var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var features: [Coreum_Asset_Nft_V1_ClassFeature] = []

  /// royalty_rate is a number between 0 and 1,which will be used in coreum native Dex. 
  /// whenever an NFT this class is traded on the Dex, the traded amount will be multiplied by this value
  /// that will be transferred to the issuer of the NFT. 
  var royaltyRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Coreum_Asset_Nft_V1_ClassFeature: @unchecked Sendable {}
extension Coreum_Asset_Nft_V1_ClassDefinition: @unchecked Sendable {}
extension Coreum_Asset_Nft_V1_Class: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "coreum.asset.nft.v1"

extension Coreum_Asset_Nft_V1_ClassFeature: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "burning"),
    1: .same(proto: "freezing"),
    2: .same(proto: "whitelisting"),
    3: .same(proto: "disable_sending"),
  ]
}

extension Coreum_Asset_Nft_V1_ClassDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClassDefinition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "issuer"),
    3: .same(proto: "features"),
    4: .standard(proto: "royalty_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.issuer) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.features) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.royaltyRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 2)
    }
    if !self.features.isEmpty {
      try visitor.visitPackedEnumField(value: self.features, fieldNumber: 3)
    }
    if !self.royaltyRate.isEmpty {
      try visitor.visitSingularStringField(value: self.royaltyRate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Coreum_Asset_Nft_V1_ClassDefinition, rhs: Coreum_Asset_Nft_V1_ClassDefinition) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs.features != rhs.features {return false}
    if lhs.royaltyRate != rhs.royaltyRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Coreum_Asset_Nft_V1_Class: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Class"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "issuer"),
    3: .same(proto: "name"),
    4: .same(proto: "symbol"),
    5: .same(proto: "description"),
    6: .same(proto: "uri"),
    7: .standard(proto: "uri_hash"),
    8: .same(proto: "data"),
    9: .same(proto: "features"),
    10: .standard(proto: "royalty_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.issuer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.uriHash) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 9: try { try decoder.decodeRepeatedEnumField(value: &self.features) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.royaltyRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 6)
    }
    if !self.uriHash.isEmpty {
      try visitor.visitSingularStringField(value: self.uriHash, fieldNumber: 7)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.features.isEmpty {
      try visitor.visitPackedEnumField(value: self.features, fieldNumber: 9)
    }
    if !self.royaltyRate.isEmpty {
      try visitor.visitSingularStringField(value: self.royaltyRate, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Coreum_Asset_Nft_V1_Class, rhs: Coreum_Asset_Nft_V1_Class) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs.name != rhs.name {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.uriHash != rhs.uriHash {return false}
    if lhs._data != rhs._data {return false}
    if lhs.features != rhs.features {return false}
    if lhs.royaltyRate != rhs.royaltyRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
