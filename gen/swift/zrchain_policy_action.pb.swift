// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: zrchain/policy/action.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Current status of an action.
enum Zrchain_Policy_ActionStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Unspecified status.
  case unspecified // = 0

  /// Action is pending approval. This is the initial status.
  case pending // = 1

  /// Policy has been satified, action has been executed.
  case completed // = 2

  /// Action has been revoked by its creator.
  case revoked // = 3

  /// Action has been rejected since Btl is expired
  case timeout // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .completed
    case 3: self = .revoked
    case 4: self = .timeout
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .completed: return 2
    case .revoked: return 3
    case .timeout: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Zrchain_Policy_ActionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Zrchain_Policy_ActionStatus] = [
    .unspecified,
    .pending,
    .completed,
    .revoked,
    .timeout,
  ]
}

#endif  // swift(>=4.2)

/// Action is a message that represents an action that needs to be approved by
/// a set of approvers. Once the action is approved, it will be executed.
struct Zrchain_Policy_Action {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var approvers: [String] = []

  var status: Zrchain_Policy_ActionStatus = .unspecified

  /// Optional policy id that must be satisfied by the approvers.
  /// If not specified, it's up to the creator of the action to decide what to
  /// apply.
  var policyID: UInt64 = 0

  /// Original message that started the action, it will be executed when the
  /// policy is satisfied.
  var msg: SwiftProtobuf.Google_Protobuf_Any {
    get {return _msg ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_msg = newValue}
  }
  /// Returns true if `msg` has been explicitly set.
  var hasMsg: Bool {return self._msg != nil}
  /// Clears the value of `msg`. Subsequent reads from it will return its default value.
  mutating func clearMsg() {self._msg = nil}

  var creator: String = String()

  /// BTL (blocks to live) is the block height up until this action can be
  /// approved or rejected.
  var btl: UInt64 = 0

  var policyData: [Zrchain_Policy_KeyValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _msg: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// KeyValue is a simple key/value pair.
struct Zrchain_Policy_KeyValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ActionResponse is a message that represents the response to an action that
/// has been approved or rejected.
struct Zrchain_Policy_ActionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var approvers: [String] = []

  var status: String = String()

  /// Optional policy id that must be satisfied by the approvers.
  /// If not specified, it's up to the creator of the action to decide what to
  /// apply.
  var policyID: UInt64 = 0

  /// Original message that started the action, it will be executed when the
  /// policy is satisfied.
  var msg: SwiftProtobuf.Google_Protobuf_Any {
    get {return _msg ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_msg = newValue}
  }
  /// Returns true if `msg` has been explicitly set.
  var hasMsg: Bool {return self._msg != nil}
  /// Clears the value of `msg`. Subsequent reads from it will return its default value.
  mutating func clearMsg() {self._msg = nil}

  var creator: String = String()

  /// BTL (blocks to live) is the block height up until this action can be
  /// approved or rejected.
  var btl: UInt64 = 0

  var policyData: [Zrchain_Policy_KeyValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _msg: SwiftProtobuf.Google_Protobuf_Any? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Zrchain_Policy_ActionStatus: @unchecked Sendable {}
extension Zrchain_Policy_Action: @unchecked Sendable {}
extension Zrchain_Policy_KeyValue: @unchecked Sendable {}
extension Zrchain_Policy_ActionResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "zrchain.policy"

extension Zrchain_Policy_ActionStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACTION_STATUS_UNSPECIFIED"),
    1: .same(proto: "ACTION_STATUS_PENDING"),
    2: .same(proto: "ACTION_STATUS_COMPLETED"),
    3: .same(proto: "ACTION_STATUS_REVOKED"),
    4: .same(proto: "ACTION_STATUS_TIMEOUT"),
  ]
}

extension Zrchain_Policy_Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Action"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "approvers"),
    3: .same(proto: "status"),
    4: .standard(proto: "policy_id"),
    5: .same(proto: "msg"),
    6: .same(proto: "creator"),
    7: .same(proto: "btl"),
    8: .standard(proto: "policy_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.approvers) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.policyID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._msg) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.btl) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.policyData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.approvers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.approvers, fieldNumber: 2)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.policyID != 0 {
      try visitor.visitSingularUInt64Field(value: self.policyID, fieldNumber: 4)
    }
    try { if let v = self._msg {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 6)
    }
    if self.btl != 0 {
      try visitor.visitSingularUInt64Field(value: self.btl, fieldNumber: 7)
    }
    if !self.policyData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policyData, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Zrchain_Policy_Action, rhs: Zrchain_Policy_Action) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.approvers != rhs.approvers {return false}
    if lhs.status != rhs.status {return false}
    if lhs.policyID != rhs.policyID {return false}
    if lhs._msg != rhs._msg {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.btl != rhs.btl {return false}
    if lhs.policyData != rhs.policyData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Zrchain_Policy_KeyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Zrchain_Policy_KeyValue, rhs: Zrchain_Policy_KeyValue) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Zrchain_Policy_ActionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "approvers"),
    3: .same(proto: "status"),
    4: .standard(proto: "policy_id"),
    5: .same(proto: "msg"),
    6: .same(proto: "creator"),
    7: .same(proto: "btl"),
    8: .standard(proto: "policy_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.approvers) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.policyID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._msg) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.btl) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.policyData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.approvers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.approvers, fieldNumber: 2)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 3)
    }
    if self.policyID != 0 {
      try visitor.visitSingularUInt64Field(value: self.policyID, fieldNumber: 4)
    }
    try { if let v = self._msg {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 6)
    }
    if self.btl != 0 {
      try visitor.visitSingularUInt64Field(value: self.btl, fieldNumber: 7)
    }
    if !self.policyData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policyData, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Zrchain_Policy_ActionResponse, rhs: Zrchain_Policy_ActionResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.approvers != rhs.approvers {return false}
    if lhs.status != rhs.status {return false}
    if lhs.policyID != rhs.policyID {return false}
    if lhs._msg != rhs._msg {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.btl != rhs.btl {return false}
    if lhs.policyData != rhs.policyData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
