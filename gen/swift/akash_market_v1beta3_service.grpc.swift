//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/market/v1beta3/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the market Msg service
///
/// Usage: instantiate `Akash_Market_V1beta3_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Market_V1beta3_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? { get }

  func createBid(
    _ request: Akash_Market_V1beta3_MsgCreateBid,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCreateBid, Akash_Market_V1beta3_MsgCreateBidResponse>

  func closeBid(
    _ request: Akash_Market_V1beta3_MsgCloseBid,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCloseBid, Akash_Market_V1beta3_MsgCloseBidResponse>

  func withdrawLease(
    _ request: Akash_Market_V1beta3_MsgWithdrawLease,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta3_MsgWithdrawLease, Akash_Market_V1beta3_MsgWithdrawLeaseResponse>

  func createLease(
    _ request: Akash_Market_V1beta3_MsgCreateLease,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCreateLease, Akash_Market_V1beta3_MsgCreateLeaseResponse>

  func closeLease(
    _ request: Akash_Market_V1beta3_MsgCloseLease,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCloseLease, Akash_Market_V1beta3_MsgCloseLeaseResponse>
}

extension Akash_Market_V1beta3_MsgClientProtocol {
  internal var serviceName: String {
    return "akash.market.v1beta3.Msg"
  }

  /// CreateBid defines a method to create a bid given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBid(
    _ request: Akash_Market_V1beta3_MsgCreateBid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCreateBid, Akash_Market_V1beta3_MsgCreateBidResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.createBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBidInterceptors() ?? []
    )
  }

  /// CloseBid defines a method to close a bid given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseBid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeBid(
    _ request: Akash_Market_V1beta3_MsgCloseBid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCloseBid, Akash_Market_V1beta3_MsgCloseBidResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.closeBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseBidInterceptors() ?? []
    )
  }

  /// WithdrawLease withdraws accrued funds from the lease payment
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawLease(
    _ request: Akash_Market_V1beta3_MsgWithdrawLease,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta3_MsgWithdrawLease, Akash_Market_V1beta3_MsgWithdrawLeaseResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.withdrawLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? []
    )
  }

  /// CreateLease creates a new lease
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createLease(
    _ request: Akash_Market_V1beta3_MsgCreateLease,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCreateLease, Akash_Market_V1beta3_MsgCreateLeaseResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.createLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? []
    )
  }

  /// CloseLease defines a method to close an order given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeLease(
    _ request: Akash_Market_V1beta3_MsgCloseLease,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta3_MsgCloseLease, Akash_Market_V1beta3_MsgCloseLeaseResponse> {
    return self.makeUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.closeLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Akash_Market_V1beta3_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Akash_Market_V1beta3_MsgNIOClient")
internal final class Akash_Market_V1beta3_MsgClient: Akash_Market_V1beta3_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the akash.market.v1beta3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Akash_Market_V1beta3_MsgNIOClient: Akash_Market_V1beta3_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.market.v1beta3.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the market Msg service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Market_V1beta3_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateBidCall(
    _ request: Akash_Market_V1beta3_MsgCreateBid,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCreateBid, Akash_Market_V1beta3_MsgCreateBidResponse>

  func makeCloseBidCall(
    _ request: Akash_Market_V1beta3_MsgCloseBid,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCloseBid, Akash_Market_V1beta3_MsgCloseBidResponse>

  func makeWithdrawLeaseCall(
    _ request: Akash_Market_V1beta3_MsgWithdrawLease,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgWithdrawLease, Akash_Market_V1beta3_MsgWithdrawLeaseResponse>

  func makeCreateLeaseCall(
    _ request: Akash_Market_V1beta3_MsgCreateLease,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCreateLease, Akash_Market_V1beta3_MsgCreateLeaseResponse>

  func makeCloseLeaseCall(
    _ request: Akash_Market_V1beta3_MsgCloseLease,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCloseLease, Akash_Market_V1beta3_MsgCloseLeaseResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Market_V1beta3_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Market_V1beta3_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateBidCall(
    _ request: Akash_Market_V1beta3_MsgCreateBid,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCreateBid, Akash_Market_V1beta3_MsgCreateBidResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.createBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBidInterceptors() ?? []
    )
  }

  internal func makeCloseBidCall(
    _ request: Akash_Market_V1beta3_MsgCloseBid,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCloseBid, Akash_Market_V1beta3_MsgCloseBidResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.closeBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseBidInterceptors() ?? []
    )
  }

  internal func makeWithdrawLeaseCall(
    _ request: Akash_Market_V1beta3_MsgWithdrawLease,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgWithdrawLease, Akash_Market_V1beta3_MsgWithdrawLeaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.withdrawLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? []
    )
  }

  internal func makeCreateLeaseCall(
    _ request: Akash_Market_V1beta3_MsgCreateLease,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCreateLease, Akash_Market_V1beta3_MsgCreateLeaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.createLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? []
    )
  }

  internal func makeCloseLeaseCall(
    _ request: Akash_Market_V1beta3_MsgCloseLease,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Akash_Market_V1beta3_MsgCloseLease, Akash_Market_V1beta3_MsgCloseLeaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.closeLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Market_V1beta3_MsgAsyncClientProtocol {
  internal func createBid(
    _ request: Akash_Market_V1beta3_MsgCreateBid,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta3_MsgCreateBidResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.createBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBidInterceptors() ?? []
    )
  }

  internal func closeBid(
    _ request: Akash_Market_V1beta3_MsgCloseBid,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta3_MsgCloseBidResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.closeBid.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseBidInterceptors() ?? []
    )
  }

  internal func withdrawLease(
    _ request: Akash_Market_V1beta3_MsgWithdrawLease,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta3_MsgWithdrawLeaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.withdrawLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? []
    )
  }

  internal func createLease(
    _ request: Akash_Market_V1beta3_MsgCreateLease,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta3_MsgCreateLeaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.createLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? []
    )
  }

  internal func closeLease(
    _ request: Akash_Market_V1beta3_MsgCloseLease,
    callOptions: CallOptions? = nil
  ) async throws -> Akash_Market_V1beta3_MsgCloseLeaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Akash_Market_V1beta3_MsgClientMetadata.Methods.closeLease.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Akash_Market_V1beta3_MsgAsyncClient: Akash_Market_V1beta3_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Akash_Market_V1beta3_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createBid'.
  func makeCreateBidInterceptors() -> [ClientInterceptor<Akash_Market_V1beta3_MsgCreateBid, Akash_Market_V1beta3_MsgCreateBidResponse>]

  /// - Returns: Interceptors to use when invoking 'closeBid'.
  func makeCloseBidInterceptors() -> [ClientInterceptor<Akash_Market_V1beta3_MsgCloseBid, Akash_Market_V1beta3_MsgCloseBidResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawLease'.
  func makeWithdrawLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta3_MsgWithdrawLease, Akash_Market_V1beta3_MsgWithdrawLeaseResponse>]

  /// - Returns: Interceptors to use when invoking 'createLease'.
  func makeCreateLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta3_MsgCreateLease, Akash_Market_V1beta3_MsgCreateLeaseResponse>]

  /// - Returns: Interceptors to use when invoking 'closeLease'.
  func makeCloseLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta3_MsgCloseLease, Akash_Market_V1beta3_MsgCloseLeaseResponse>]
}

internal enum Akash_Market_V1beta3_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "akash.market.v1beta3.Msg",
    methods: [
      Akash_Market_V1beta3_MsgClientMetadata.Methods.createBid,
      Akash_Market_V1beta3_MsgClientMetadata.Methods.closeBid,
      Akash_Market_V1beta3_MsgClientMetadata.Methods.withdrawLease,
      Akash_Market_V1beta3_MsgClientMetadata.Methods.createLease,
      Akash_Market_V1beta3_MsgClientMetadata.Methods.closeLease,
    ]
  )

  internal enum Methods {
    internal static let createBid = GRPCMethodDescriptor(
      name: "CreateBid",
      path: "/akash.market.v1beta3.Msg/CreateBid",
      type: GRPCCallType.unary
    )

    internal static let closeBid = GRPCMethodDescriptor(
      name: "CloseBid",
      path: "/akash.market.v1beta3.Msg/CloseBid",
      type: GRPCCallType.unary
    )

    internal static let withdrawLease = GRPCMethodDescriptor(
      name: "WithdrawLease",
      path: "/akash.market.v1beta3.Msg/WithdrawLease",
      type: GRPCCallType.unary
    )

    internal static let createLease = GRPCMethodDescriptor(
      name: "CreateLease",
      path: "/akash.market.v1beta3.Msg/CreateLease",
      type: GRPCCallType.unary
    )

    internal static let closeLease = GRPCMethodDescriptor(
      name: "CloseLease",
      path: "/akash.market.v1beta3.Msg/CloseLease",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the market Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Market_V1beta3_MsgProvider: CallHandlerProvider {
  var interceptors: Akash_Market_V1beta3_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateBid defines a method to create a bid given proper inputs.
  func createBid(request: Akash_Market_V1beta3_MsgCreateBid, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta3_MsgCreateBidResponse>

  /// CloseBid defines a method to close a bid given proper inputs.
  func closeBid(request: Akash_Market_V1beta3_MsgCloseBid, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta3_MsgCloseBidResponse>

  /// WithdrawLease withdraws accrued funds from the lease payment
  func withdrawLease(request: Akash_Market_V1beta3_MsgWithdrawLease, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta3_MsgWithdrawLeaseResponse>

  /// CreateLease creates a new lease
  func createLease(request: Akash_Market_V1beta3_MsgCreateLease, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta3_MsgCreateLeaseResponse>

  /// CloseLease defines a method to close an order given proper inputs.
  func closeLease(request: Akash_Market_V1beta3_MsgCloseLease, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta3_MsgCloseLeaseResponse>
}

extension Akash_Market_V1beta3_MsgProvider {
  internal var serviceName: Substring {
    return Akash_Market_V1beta3_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCreateBid>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCreateBidResponse>(),
        interceptors: self.interceptors?.makeCreateBidInterceptors() ?? [],
        userFunction: self.createBid(request:context:)
      )

    case "CloseBid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCloseBid>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCloseBidResponse>(),
        interceptors: self.interceptors?.makeCloseBidInterceptors() ?? [],
        userFunction: self.closeBid(request:context:)
      )

    case "WithdrawLease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgWithdrawLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgWithdrawLeaseResponse>(),
        interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? [],
        userFunction: self.withdrawLease(request:context:)
      )

    case "CreateLease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCreateLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCreateLeaseResponse>(),
        interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? [],
        userFunction: self.createLease(request:context:)
      )

    case "CloseLease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCloseLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCloseLeaseResponse>(),
        interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? [],
        userFunction: self.closeLease(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the market Msg service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Akash_Market_V1beta3_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Akash_Market_V1beta3_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateBid defines a method to create a bid given proper inputs.
  @Sendable func createBid(
    request: Akash_Market_V1beta3_MsgCreateBid,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta3_MsgCreateBidResponse

  /// CloseBid defines a method to close a bid given proper inputs.
  @Sendable func closeBid(
    request: Akash_Market_V1beta3_MsgCloseBid,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta3_MsgCloseBidResponse

  /// WithdrawLease withdraws accrued funds from the lease payment
  @Sendable func withdrawLease(
    request: Akash_Market_V1beta3_MsgWithdrawLease,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta3_MsgWithdrawLeaseResponse

  /// CreateLease creates a new lease
  @Sendable func createLease(
    request: Akash_Market_V1beta3_MsgCreateLease,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta3_MsgCreateLeaseResponse

  /// CloseLease defines a method to close an order given proper inputs.
  @Sendable func closeLease(
    request: Akash_Market_V1beta3_MsgCloseLease,
    context: GRPCAsyncServerCallContext
  ) async throws -> Akash_Market_V1beta3_MsgCloseLeaseResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Akash_Market_V1beta3_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Akash_Market_V1beta3_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Akash_Market_V1beta3_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Akash_Market_V1beta3_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCreateBid>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCreateBidResponse>(),
        interceptors: self.interceptors?.makeCreateBidInterceptors() ?? [],
        wrapping: self.createBid(request:context:)
      )

    case "CloseBid":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCloseBid>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCloseBidResponse>(),
        interceptors: self.interceptors?.makeCloseBidInterceptors() ?? [],
        wrapping: self.closeBid(request:context:)
      )

    case "WithdrawLease":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgWithdrawLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgWithdrawLeaseResponse>(),
        interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? [],
        wrapping: self.withdrawLease(request:context:)
      )

    case "CreateLease":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCreateLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCreateLeaseResponse>(),
        interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? [],
        wrapping: self.createLease(request:context:)
      )

    case "CloseLease":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta3_MsgCloseLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta3_MsgCloseLeaseResponse>(),
        interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? [],
        wrapping: self.closeLease(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Market_V1beta3_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createBid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBidInterceptors() -> [ServerInterceptor<Akash_Market_V1beta3_MsgCreateBid, Akash_Market_V1beta3_MsgCreateBidResponse>]

  /// - Returns: Interceptors to use when handling 'closeBid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseBidInterceptors() -> [ServerInterceptor<Akash_Market_V1beta3_MsgCloseBid, Akash_Market_V1beta3_MsgCloseBidResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta3_MsgWithdrawLease, Akash_Market_V1beta3_MsgWithdrawLeaseResponse>]

  /// - Returns: Interceptors to use when handling 'createLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta3_MsgCreateLease, Akash_Market_V1beta3_MsgCreateLeaseResponse>]

  /// - Returns: Interceptors to use when handling 'closeLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta3_MsgCloseLease, Akash_Market_V1beta3_MsgCloseLeaseResponse>]
}

internal enum Akash_Market_V1beta3_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "akash.market.v1beta3.Msg",
    methods: [
      Akash_Market_V1beta3_MsgServerMetadata.Methods.createBid,
      Akash_Market_V1beta3_MsgServerMetadata.Methods.closeBid,
      Akash_Market_V1beta3_MsgServerMetadata.Methods.withdrawLease,
      Akash_Market_V1beta3_MsgServerMetadata.Methods.createLease,
      Akash_Market_V1beta3_MsgServerMetadata.Methods.closeLease,
    ]
  )

  internal enum Methods {
    internal static let createBid = GRPCMethodDescriptor(
      name: "CreateBid",
      path: "/akash.market.v1beta3.Msg/CreateBid",
      type: GRPCCallType.unary
    )

    internal static let closeBid = GRPCMethodDescriptor(
      name: "CloseBid",
      path: "/akash.market.v1beta3.Msg/CloseBid",
      type: GRPCCallType.unary
    )

    internal static let withdrawLease = GRPCMethodDescriptor(
      name: "WithdrawLease",
      path: "/akash.market.v1beta3.Msg/WithdrawLease",
      type: GRPCCallType.unary
    )

    internal static let createLease = GRPCMethodDescriptor(
      name: "CreateLease",
      path: "/akash.market.v1beta3.Msg/CreateLease",
      type: GRPCCallType.unary
    )

    internal static let closeLease = GRPCMethodDescriptor(
      name: "CloseLease",
      path: "/akash.market.v1beta3.Msg/CloseLease",
      type: GRPCCallType.unary
    )
  }
}
