// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/datadeal/v2alpha2/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateDeal defines the Msg/CreateDeal request type.
struct Panacea_Datadeal_V2alpha2_MsgCreateDeal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataSchema: [String] = []

  var budget: Cosmos_Base_V1beta1_Coin {
    get {return _budget ?? Cosmos_Base_V1beta1_Coin()}
    set {_budget = newValue}
  }
  /// Returns true if `budget` has been explicitly set.
  var hasBudget: Bool {return self._budget != nil}
  /// Clears the value of `budget`. Subsequent reads from it will return its default value.
  mutating func clearBudget() {self._budget = nil}

  var maxNumData: UInt64 = 0

  var buyerAddress: String = String()

  var nonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _budget: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgCreateDealResponse defines the Msg/CreateDeal response type.
struct Panacea_Datadeal_V2alpha2_MsgCreateDealResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSellData defines the Msg/SellData request type.
struct Panacea_Datadeal_V2alpha2_MsgSellData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var verifiableCid: String = String()

  var dataHash: String = String()

  var sellerAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSellDataResponse defines the Msg/SellData response type.
struct Panacea_Datadeal_V2alpha2_MsgSellDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgVoteDataVerification defines the Msg/VoteDataVerification request type.
struct Panacea_Datadeal_V2alpha2_MsgVoteDataVerification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataVerificationVote: Panacea_Datadeal_V2alpha2_DataVerificationVote {
    get {return _dataVerificationVote ?? Panacea_Datadeal_V2alpha2_DataVerificationVote()}
    set {_dataVerificationVote = newValue}
  }
  /// Returns true if `dataVerificationVote` has been explicitly set.
  var hasDataVerificationVote: Bool {return self._dataVerificationVote != nil}
  /// Clears the value of `dataVerificationVote`. Subsequent reads from it will return its default value.
  mutating func clearDataVerificationVote() {self._dataVerificationVote = nil}

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataVerificationVote: Panacea_Datadeal_V2alpha2_DataVerificationVote? = nil
}

/// MsgVoteDataVerificationResponse defines the Msg/VoteDataVerification response type.
struct Panacea_Datadeal_V2alpha2_MsgVoteDataVerificationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DataVerificationVote defines the vote info for verifying data.
struct Panacea_Datadeal_V2alpha2_DataVerificationVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var voterUniqueID: String = String()

  var voterAddress: String = String()

  var dealID: UInt64 = 0

  var dataHash: String = String()

  var voteOption: Panacea_Oracle_V2alpha2_VoteOption = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgVoteDataDelivery defines the Msg/VoteDataDelivery request type.
struct Panacea_Datadeal_V2alpha2_MsgVoteDataDelivery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataDeliveryVote: Panacea_Datadeal_V2alpha2_DataDeliveryVote {
    get {return _dataDeliveryVote ?? Panacea_Datadeal_V2alpha2_DataDeliveryVote()}
    set {_dataDeliveryVote = newValue}
  }
  /// Returns true if `dataDeliveryVote` has been explicitly set.
  var hasDataDeliveryVote: Bool {return self._dataDeliveryVote != nil}
  /// Clears the value of `dataDeliveryVote`. Subsequent reads from it will return its default value.
  mutating func clearDataDeliveryVote() {self._dataDeliveryVote = nil}

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataDeliveryVote: Panacea_Datadeal_V2alpha2_DataDeliveryVote? = nil
}

/// MsgVoteDataDeliveryResponse defines the Msg/VoteDataDelivery response type.
struct Panacea_Datadeal_V2alpha2_MsgVoteDataDeliveryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DataDeliveryVote defines the vote info for delivering data.
struct Panacea_Datadeal_V2alpha2_DataDeliveryVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var voterUniqueID: String = String()

  var voterAddress: String = String()

  var dealID: UInt64 = 0

  var dataHash: String = String()

  var deliveredCid: String = String()

  var voteOption: Panacea_Oracle_V2alpha2_VoteOption = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeactivateDeal defines the Msg/DeactivateDeal request type.
struct Panacea_Datadeal_V2alpha2_MsgDeactivateDeal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var requesterAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeactivateDealResponse defines the Msg/DeactivateDeal response type.
struct Panacea_Datadeal_V2alpha2_MsgDeactivateDealResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgReRequestDataDeliveryVote defines the Msg/ReRequestDataDeliveryVote request type.
struct Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var dataHash: String = String()

  var requesterAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgReRequestDataDeliveryVoteResponse defines the Msg/ReRequestDataDeliveryVote response type.
struct Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVoteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Datadeal_V2alpha2_MsgCreateDeal: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgCreateDealResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgSellData: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgSellDataResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgVoteDataVerification: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgVoteDataVerificationResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_DataVerificationVote: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgVoteDataDelivery: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgVoteDataDeliveryResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_DataDeliveryVote: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgDeactivateDeal: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgDeactivateDealResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVote: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVoteResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.datadeal.v2alpha2"

extension Panacea_Datadeal_V2alpha2_MsgCreateDeal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateDeal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_schema"),
    2: .same(proto: "budget"),
    3: .standard(proto: "max_num_data"),
    4: .standard(proto: "buyer_address"),
    5: .same(proto: "nonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.dataSchema) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._budget) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxNumData) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buyerAddress) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataSchema.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataSchema, fieldNumber: 1)
    }
    try { if let v = self._budget {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.maxNumData != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxNumData, fieldNumber: 3)
    }
    if !self.buyerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.buyerAddress, fieldNumber: 4)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgCreateDeal, rhs: Panacea_Datadeal_V2alpha2_MsgCreateDeal) -> Bool {
    if lhs.dataSchema != rhs.dataSchema {return false}
    if lhs._budget != rhs._budget {return false}
    if lhs.maxNumData != rhs.maxNumData {return false}
    if lhs.buyerAddress != rhs.buyerAddress {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgCreateDealResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateDealResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgCreateDealResponse, rhs: Panacea_Datadeal_V2alpha2_MsgCreateDealResponse) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgSellData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSellData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "verifiable_cid"),
    3: .standard(proto: "data_hash"),
    4: .standard(proto: "seller_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.verifiableCid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sellerAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.verifiableCid.isEmpty {
      try visitor.visitSingularStringField(value: self.verifiableCid, fieldNumber: 2)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 3)
    }
    if !self.sellerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.sellerAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgSellData, rhs: Panacea_Datadeal_V2alpha2_MsgSellData) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.verifiableCid != rhs.verifiableCid {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.sellerAddress != rhs.sellerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgSellDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSellDataResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgSellDataResponse, rhs: Panacea_Datadeal_V2alpha2_MsgSellDataResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgVoteDataVerification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteDataVerification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_verification_vote"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dataVerificationVote) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dataVerificationVote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgVoteDataVerification, rhs: Panacea_Datadeal_V2alpha2_MsgVoteDataVerification) -> Bool {
    if lhs._dataVerificationVote != rhs._dataVerificationVote {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgVoteDataVerificationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteDataVerificationResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgVoteDataVerificationResponse, rhs: Panacea_Datadeal_V2alpha2_MsgVoteDataVerificationResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_DataVerificationVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataVerificationVote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voter_unique_id"),
    2: .standard(proto: "voter_address"),
    3: .standard(proto: "deal_id"),
    4: .standard(proto: "data_hash"),
    5: .standard(proto: "vote_option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.voterUniqueID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.voterAddress) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.voteOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.voterUniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.voterUniqueID, fieldNumber: 1)
    }
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 2)
    }
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 3)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 4)
    }
    if self.voteOption != .unspecified {
      try visitor.visitSingularEnumField(value: self.voteOption, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_DataVerificationVote, rhs: Panacea_Datadeal_V2alpha2_DataVerificationVote) -> Bool {
    if lhs.voterUniqueID != rhs.voterUniqueID {return false}
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.voteOption != rhs.voteOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgVoteDataDelivery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteDataDelivery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_delivery_vote"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dataDeliveryVote) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dataDeliveryVote {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgVoteDataDelivery, rhs: Panacea_Datadeal_V2alpha2_MsgVoteDataDelivery) -> Bool {
    if lhs._dataDeliveryVote != rhs._dataDeliveryVote {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgVoteDataDeliveryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgVoteDataDeliveryResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgVoteDataDeliveryResponse, rhs: Panacea_Datadeal_V2alpha2_MsgVoteDataDeliveryResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_DataDeliveryVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataDeliveryVote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voter_unique_id"),
    2: .standard(proto: "voter_address"),
    3: .standard(proto: "deal_id"),
    4: .standard(proto: "data_hash"),
    5: .standard(proto: "delivered_cid"),
    6: .standard(proto: "vote_option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.voterUniqueID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.voterAddress) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.deliveredCid) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.voteOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.voterUniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.voterUniqueID, fieldNumber: 1)
    }
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 2)
    }
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 3)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 4)
    }
    if !self.deliveredCid.isEmpty {
      try visitor.visitSingularStringField(value: self.deliveredCid, fieldNumber: 5)
    }
    if self.voteOption != .unspecified {
      try visitor.visitSingularEnumField(value: self.voteOption, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_DataDeliveryVote, rhs: Panacea_Datadeal_V2alpha2_DataDeliveryVote) -> Bool {
    if lhs.voterUniqueID != rhs.voterUniqueID {return false}
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.deliveredCid != rhs.deliveredCid {return false}
    if lhs.voteOption != rhs.voteOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgDeactivateDeal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeactivateDeal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "requester_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requesterAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.requesterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.requesterAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgDeactivateDeal, rhs: Panacea_Datadeal_V2alpha2_MsgDeactivateDeal) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.requesterAddress != rhs.requesterAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgDeactivateDealResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeactivateDealResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgDeactivateDealResponse, rhs: Panacea_Datadeal_V2alpha2_MsgDeactivateDealResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgReRequestDataDeliveryVote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "data_hash"),
    3: .standard(proto: "requester_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dataHash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.requesterAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularStringField(value: self.dataHash, fieldNumber: 2)
    }
    if !self.requesterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.requesterAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVote, rhs: Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVote) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.requesterAddress != rhs.requesterAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVoteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgReRequestDataDeliveryVoteResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVoteResponse, rhs: Panacea_Datadeal_V2alpha2_MsgReRequestDataDeliveryVoteResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
