//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: coreum/asset/ft/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Coreum_Asset_Ft_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Coreum_Asset_Ft_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Coreum_Asset_Ft_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryParamsRequest, Coreum_Asset_Ft_V1_QueryParamsResponse>

  func tokens(
    _ request: Coreum_Asset_Ft_V1_QueryTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryTokensRequest, Coreum_Asset_Ft_V1_QueryTokensResponse>

  func token(
    _ request: Coreum_Asset_Ft_V1_QueryTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryTokenRequest, Coreum_Asset_Ft_V1_QueryTokenResponse>

  func balance(
    _ request: Coreum_Asset_Ft_V1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryBalanceRequest, Coreum_Asset_Ft_V1_QueryBalanceResponse>

  func frozenBalances(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>

  func frozenBalance(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>

  func whitelistedBalances(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>

  func whitelistedBalance(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>
}

extension Coreum_Asset_Ft_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "coreum.asset.ft.v1.Query"
  }

  /// Params queries the parameters of x/asset/ft module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Coreum_Asset_Ft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryParamsRequest, Coreum_Asset_Ft_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Tokens queries the fungible tokens of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Tokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tokens(
    _ request: Coreum_Asset_Ft_V1_QueryTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryTokensRequest, Coreum_Asset_Ft_V1_QueryTokensResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.tokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokensInterceptors() ?? []
    )
  }

  /// Token queries the fungible token of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Token.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func token(
    _ request: Coreum_Asset_Ft_V1_QueryTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryTokenRequest, Coreum_Asset_Ft_V1_QueryTokenResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.token.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenInterceptors() ?? []
    )
  }

  /// Balance returns balance of the denom for the account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Coreum_Asset_Ft_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryBalanceRequest, Coreum_Asset_Ft_V1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// FrozenBalances returns all the frozen balances for the account.
  ///
  /// - Parameters:
  ///   - request: Request to send to FrozenBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func frozenBalances(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenBalancesInterceptors() ?? []
    )
  }

  /// FrozenBalance returns frozen balance of the denom for the account.
  ///
  /// - Parameters:
  ///   - request: Request to send to FrozenBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func frozenBalance(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenBalanceInterceptors() ?? []
    )
  }

  /// WhitelistedBalances returns all the whitelisted balances for the account.
  ///
  /// - Parameters:
  ///   - request: Request to send to WhitelistedBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func whitelistedBalances(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedBalancesInterceptors() ?? []
    )
  }

  /// WhitelistedBalance returns whitelisted balance of the denom for the account.
  ///
  /// - Parameters:
  ///   - request: Request to send to WhitelistedBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func whitelistedBalance(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse> {
    return self.makeUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedBalanceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Coreum_Asset_Ft_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Coreum_Asset_Ft_V1_QueryNIOClient")
internal final class Coreum_Asset_Ft_V1_QueryClient: Coreum_Asset_Ft_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the coreum.asset.ft.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Coreum_Asset_Ft_V1_QueryNIOClient: Coreum_Asset_Ft_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the coreum.asset.ft.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Asset_Ft_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Coreum_Asset_Ft_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryParamsRequest, Coreum_Asset_Ft_V1_QueryParamsResponse>

  func makeTokensCall(
    _ request: Coreum_Asset_Ft_V1_QueryTokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryTokensRequest, Coreum_Asset_Ft_V1_QueryTokensResponse>

  func makeTokenCall(
    _ request: Coreum_Asset_Ft_V1_QueryTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryTokenRequest, Coreum_Asset_Ft_V1_QueryTokenResponse>

  func makeBalanceCall(
    _ request: Coreum_Asset_Ft_V1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryBalanceRequest, Coreum_Asset_Ft_V1_QueryBalanceResponse>

  func makeFrozenBalancesCall(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>

  func makeFrozenBalanceCall(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>

  func makeWhitelistedBalancesCall(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>

  func makeWhitelistedBalanceCall(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Ft_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Asset_Ft_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Coreum_Asset_Ft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryParamsRequest, Coreum_Asset_Ft_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeTokensCall(
    _ request: Coreum_Asset_Ft_V1_QueryTokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryTokensRequest, Coreum_Asset_Ft_V1_QueryTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.tokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokensInterceptors() ?? []
    )
  }

  internal func makeTokenCall(
    _ request: Coreum_Asset_Ft_V1_QueryTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryTokenRequest, Coreum_Asset_Ft_V1_QueryTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.token.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenInterceptors() ?? []
    )
  }

  internal func makeBalanceCall(
    _ request: Coreum_Asset_Ft_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryBalanceRequest, Coreum_Asset_Ft_V1_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func makeFrozenBalancesCall(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenBalancesInterceptors() ?? []
    )
  }

  internal func makeFrozenBalanceCall(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenBalanceInterceptors() ?? []
    )
  }

  internal func makeWhitelistedBalancesCall(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedBalancesInterceptors() ?? []
    )
  }

  internal func makeWhitelistedBalanceCall(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedBalanceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Ft_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Coreum_Asset_Ft_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func tokens(
    _ request: Coreum_Asset_Ft_V1_QueryTokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.tokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokensInterceptors() ?? []
    )
  }

  internal func token(
    _ request: Coreum_Asset_Ft_V1_QueryTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.token.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenInterceptors() ?? []
    )
  }

  internal func balance(
    _ request: Coreum_Asset_Ft_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func frozenBalances(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenBalancesInterceptors() ?? []
    )
  }

  internal func frozenBalance(
    _ request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenBalanceInterceptors() ?? []
    )
  }

  internal func whitelistedBalances(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedBalancesInterceptors() ?? []
    )
  }

  internal func whitelistedBalance(
    _ request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWhitelistedBalanceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Coreum_Asset_Ft_V1_QueryAsyncClient: Coreum_Asset_Ft_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Coreum_Asset_Ft_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryParamsRequest, Coreum_Asset_Ft_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'tokens'.
  func makeTokensInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryTokensRequest, Coreum_Asset_Ft_V1_QueryTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'token'.
  func makeTokenInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryTokenRequest, Coreum_Asset_Ft_V1_QueryTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryBalanceRequest, Coreum_Asset_Ft_V1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'frozenBalances'.
  func makeFrozenBalancesInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'frozenBalance'.
  func makeFrozenBalanceInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'whitelistedBalances'.
  func makeWhitelistedBalancesInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'whitelistedBalance'.
  func makeWhitelistedBalanceInterceptors() -> [ClientInterceptor<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>]
}

internal enum Coreum_Asset_Ft_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "coreum.asset.ft.v1.Query",
    methods: [
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.params,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.tokens,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.token,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.balance,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalances,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.frozenBalance,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalances,
      Coreum_Asset_Ft_V1_QueryClientMetadata.Methods.whitelistedBalance,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/coreum.asset.ft.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let tokens = GRPCMethodDescriptor(
      name: "Tokens",
      path: "/coreum.asset.ft.v1.Query/Tokens",
      type: GRPCCallType.unary
    )

    internal static let token = GRPCMethodDescriptor(
      name: "Token",
      path: "/coreum.asset.ft.v1.Query/Token",
      type: GRPCCallType.unary
    )

    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/coreum.asset.ft.v1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let frozenBalances = GRPCMethodDescriptor(
      name: "FrozenBalances",
      path: "/coreum.asset.ft.v1.Query/FrozenBalances",
      type: GRPCCallType.unary
    )

    internal static let frozenBalance = GRPCMethodDescriptor(
      name: "FrozenBalance",
      path: "/coreum.asset.ft.v1.Query/FrozenBalance",
      type: GRPCCallType.unary
    )

    internal static let whitelistedBalances = GRPCMethodDescriptor(
      name: "WhitelistedBalances",
      path: "/coreum.asset.ft.v1.Query/WhitelistedBalances",
      type: GRPCCallType.unary
    )

    internal static let whitelistedBalance = GRPCMethodDescriptor(
      name: "WhitelistedBalance",
      path: "/coreum.asset.ft.v1.Query/WhitelistedBalance",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Coreum_Asset_Ft_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Coreum_Asset_Ft_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of x/asset/ft module.
  func params(request: Coreum_Asset_Ft_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryParamsResponse>

  /// Tokens queries the fungible tokens of the module.
  func tokens(request: Coreum_Asset_Ft_V1_QueryTokensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryTokensResponse>

  /// Token queries the fungible token of the module.
  func token(request: Coreum_Asset_Ft_V1_QueryTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryTokenResponse>

  /// Balance returns balance of the denom for the account.
  func balance(request: Coreum_Asset_Ft_V1_QueryBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryBalanceResponse>

  /// FrozenBalances returns all the frozen balances for the account.
  func frozenBalances(request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>

  /// FrozenBalance returns frozen balance of the denom for the account.
  func frozenBalance(request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>

  /// WhitelistedBalances returns all the whitelisted balances for the account.
  func whitelistedBalances(request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>

  /// WhitelistedBalance returns whitelisted balance of the denom for the account.
  func whitelistedBalance(request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>
}

extension Coreum_Asset_Ft_V1_QueryProvider {
  internal var serviceName: Substring {
    return Coreum_Asset_Ft_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Tokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryTokensRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryTokensResponse>(),
        interceptors: self.interceptors?.makeTokensInterceptors() ?? [],
        userFunction: self.tokens(request:context:)
      )

    case "Token":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryTokenRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryTokenResponse>(),
        interceptors: self.interceptors?.makeTokenInterceptors() ?? [],
        userFunction: self.token(request:context:)
      )

    case "Balance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        userFunction: self.balance(request:context:)
      )

    case "FrozenBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>(),
        interceptors: self.interceptors?.makeFrozenBalancesInterceptors() ?? [],
        userFunction: self.frozenBalances(request:context:)
      )

    case "FrozenBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>(),
        interceptors: self.interceptors?.makeFrozenBalanceInterceptors() ?? [],
        userFunction: self.frozenBalance(request:context:)
      )

    case "WhitelistedBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>(),
        interceptors: self.interceptors?.makeWhitelistedBalancesInterceptors() ?? [],
        userFunction: self.whitelistedBalances(request:context:)
      )

    case "WhitelistedBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>(),
        interceptors: self.interceptors?.makeWhitelistedBalanceInterceptors() ?? [],
        userFunction: self.whitelistedBalance(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Coreum_Asset_Ft_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Coreum_Asset_Ft_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of x/asset/ft module.
  @Sendable func params(
    request: Coreum_Asset_Ft_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryParamsResponse

  /// Tokens queries the fungible tokens of the module.
  @Sendable func tokens(
    request: Coreum_Asset_Ft_V1_QueryTokensRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryTokensResponse

  /// Token queries the fungible token of the module.
  @Sendable func token(
    request: Coreum_Asset_Ft_V1_QueryTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryTokenResponse

  /// Balance returns balance of the denom for the account.
  @Sendable func balance(
    request: Coreum_Asset_Ft_V1_QueryBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryBalanceResponse

  /// FrozenBalances returns all the frozen balances for the account.
  @Sendable func frozenBalances(
    request: Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse

  /// FrozenBalance returns frozen balance of the denom for the account.
  @Sendable func frozenBalance(
    request: Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse

  /// WhitelistedBalances returns all the whitelisted balances for the account.
  @Sendable func whitelistedBalances(
    request: Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse

  /// WhitelistedBalance returns whitelisted balance of the denom for the account.
  @Sendable func whitelistedBalance(
    request: Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Coreum_Asset_Ft_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Coreum_Asset_Ft_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Coreum_Asset_Ft_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Coreum_Asset_Ft_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Tokens":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryTokensRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryTokensResponse>(),
        interceptors: self.interceptors?.makeTokensInterceptors() ?? [],
        wrapping: self.tokens(request:context:)
      )

    case "Token":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryTokenRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryTokenResponse>(),
        interceptors: self.interceptors?.makeTokenInterceptors() ?? [],
        wrapping: self.token(request:context:)
      )

    case "Balance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        wrapping: self.balance(request:context:)
      )

    case "FrozenBalances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>(),
        interceptors: self.interceptors?.makeFrozenBalancesInterceptors() ?? [],
        wrapping: self.frozenBalances(request:context:)
      )

    case "FrozenBalance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>(),
        interceptors: self.interceptors?.makeFrozenBalanceInterceptors() ?? [],
        wrapping: self.frozenBalance(request:context:)
      )

    case "WhitelistedBalances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>(),
        interceptors: self.interceptors?.makeWhitelistedBalancesInterceptors() ?? [],
        wrapping: self.whitelistedBalances(request:context:)
      )

    case "WhitelistedBalance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>(),
        interceptors: self.interceptors?.makeWhitelistedBalanceInterceptors() ?? [],
        wrapping: self.whitelistedBalance(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Coreum_Asset_Ft_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryParamsRequest, Coreum_Asset_Ft_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'tokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTokensInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryTokensRequest, Coreum_Asset_Ft_V1_QueryTokensResponse>]

  /// - Returns: Interceptors to use when handling 'token'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTokenInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryTokenRequest, Coreum_Asset_Ft_V1_QueryTokenResponse>]

  /// - Returns: Interceptors to use when handling 'balance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryBalanceRequest, Coreum_Asset_Ft_V1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'frozenBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFrozenBalancesInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryFrozenBalancesRequest, Coreum_Asset_Ft_V1_QueryFrozenBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'frozenBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFrozenBalanceInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryFrozenBalanceRequest, Coreum_Asset_Ft_V1_QueryFrozenBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'whitelistedBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWhitelistedBalancesInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryWhitelistedBalancesRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'whitelistedBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWhitelistedBalanceInterceptors() -> [ServerInterceptor<Coreum_Asset_Ft_V1_QueryWhitelistedBalanceRequest, Coreum_Asset_Ft_V1_QueryWhitelistedBalanceResponse>]
}

internal enum Coreum_Asset_Ft_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "coreum.asset.ft.v1.Query",
    methods: [
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.params,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.tokens,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.token,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.balance,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.frozenBalances,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.frozenBalance,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.whitelistedBalances,
      Coreum_Asset_Ft_V1_QueryServerMetadata.Methods.whitelistedBalance,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/coreum.asset.ft.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let tokens = GRPCMethodDescriptor(
      name: "Tokens",
      path: "/coreum.asset.ft.v1.Query/Tokens",
      type: GRPCCallType.unary
    )

    internal static let token = GRPCMethodDescriptor(
      name: "Token",
      path: "/coreum.asset.ft.v1.Query/Token",
      type: GRPCCallType.unary
    )

    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/coreum.asset.ft.v1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let frozenBalances = GRPCMethodDescriptor(
      name: "FrozenBalances",
      path: "/coreum.asset.ft.v1.Query/FrozenBalances",
      type: GRPCCallType.unary
    )

    internal static let frozenBalance = GRPCMethodDescriptor(
      name: "FrozenBalance",
      path: "/coreum.asset.ft.v1.Query/FrozenBalance",
      type: GRPCCallType.unary
    )

    internal static let whitelistedBalances = GRPCMethodDescriptor(
      name: "WhitelistedBalances",
      path: "/coreum.asset.ft.v1.Query/WhitelistedBalances",
      type: GRPCCallType.unary
    )

    internal static let whitelistedBalance = GRPCMethodDescriptor(
      name: "WhitelistedBalance",
      path: "/coreum.asset.ft.v1.Query/WhitelistedBalance",
      type: GRPCCallType.unary
    )
  }
}
