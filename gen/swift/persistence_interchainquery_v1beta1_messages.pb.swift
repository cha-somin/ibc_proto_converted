// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: persistence/interchainquery/v1beta1/messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgSubmitQueryResponse represents a message type to fulfil a query request.
struct Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var queryID: String = String()

  var result: Data = Data()

  var proofOps: Tendermint_Crypto_ProofOps {
    get {return _proofOps ?? Tendermint_Crypto_ProofOps()}
    set {_proofOps = newValue}
  }
  /// Returns true if `proofOps` has been explicitly set.
  var hasProofOps: Bool {return self._proofOps != nil}
  /// Clears the value of `proofOps`. Subsequent reads from it will return its default value.
  mutating func clearProofOps() {self._proofOps = nil}

  var height: Int64 = 0

  var fromAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proofOps: Tendermint_Crypto_ProofOps? = nil
}

/// MsgSubmitQueryResponseResponse defines the MsgSubmitQueryResponse response
/// type.
struct Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponse: @unchecked Sendable {}
extension Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponseResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "persistence.interchainquery.v1beta1"

extension Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitQueryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "query_id"),
    3: .same(proto: "result"),
    4: .standard(proto: "proof_ops"),
    5: .same(proto: "height"),
    6: .standard(proto: "from_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.queryID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.result) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._proofOps) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if !self.queryID.isEmpty {
      try visitor.visitSingularStringField(value: self.queryID, fieldNumber: 2)
    }
    if !self.result.isEmpty {
      try visitor.visitSingularBytesField(value: self.result, fieldNumber: 3)
    }
    try { if let v = self._proofOps {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 5)
    }
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponse, rhs: Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponse) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.queryID != rhs.queryID {return false}
    if lhs.result != rhs.result {return false}
    if lhs._proofOps != rhs._proofOps {return false}
    if lhs.height != rhs.height {return false}
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubmitQueryResponseResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponseResponse, rhs: Persistence_Interchainquery_V1beta1_MsgSubmitQueryResponseResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
