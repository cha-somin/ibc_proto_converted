// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// |    State    | Swap | Add   | Withdraw  | Refunding |
/// | ----------- | ---- | ----- | --------- | --------- |
/// | `staged`    | no   | yes   | yes       | Refund Invalid Add/Remove Liquidity && all Swaps |
/// | `available` | yes  | yes   | yes       | Refund Invalid Tx |
/// | `suspended` | no   | no    | no        | Refund all |
enum Types_PoolStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownPoolStatus // = 0
  case available // = 1
  case staged // = 2
  case suspended // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownPoolStatus
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownPoolStatus
    case 1: self = .available
    case 2: self = .staged
    case 3: self = .suspended
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownPoolStatus: return 0
    case .available: return 1
    case .staged: return 2
    case .suspended: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Types_PoolStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Types_PoolStatus] = [
    .unknownPoolStatus,
    .available,
    .staged,
    .suspended,
  ]
}

#endif  // swift(>=4.2)

struct Types_Pool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var balanceRune: String = String()

  var balanceAsset: String = String()

  var asset: Common_Asset {
    get {return _asset ?? Common_Asset()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {self._asset = nil}

  var lpUnits: String = String()

  var status: Types_PoolStatus = .unknownPoolStatus

  var statusSince: Int64 = 0

  var decimals: Int64 = 0

  var synthUnits: String = String()

  var pendingInboundRune: String = String()

  var pendingInboundAsset: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _asset: Common_Asset? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_PoolStatus: @unchecked Sendable {}
extension Types_Pool: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_PoolStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UnknownPoolStatus"),
    1: .same(proto: "Available"),
    2: .same(proto: "Staged"),
    3: .same(proto: "Suspended"),
  ]
}

extension Types_Pool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "balance_rune"),
    2: .standard(proto: "balance_asset"),
    3: .same(proto: "asset"),
    4: .standard(proto: "LP_units"),
    5: .same(proto: "status"),
    10: .standard(proto: "status_since"),
    6: .same(proto: "decimals"),
    7: .standard(proto: "synth_units"),
    8: .standard(proto: "pending_inbound_rune"),
    9: .standard(proto: "pending_inbound_asset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.balanceRune) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.balanceAsset) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.lpUnits) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.decimals) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.synthUnits) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.pendingInboundRune) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.pendingInboundAsset) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.statusSince) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.balanceRune.isEmpty {
      try visitor.visitSingularStringField(value: self.balanceRune, fieldNumber: 1)
    }
    if !self.balanceAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.balanceAsset, fieldNumber: 2)
    }
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.lpUnits.isEmpty {
      try visitor.visitSingularStringField(value: self.lpUnits, fieldNumber: 4)
    }
    if self.status != .unknownPoolStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt64Field(value: self.decimals, fieldNumber: 6)
    }
    if !self.synthUnits.isEmpty {
      try visitor.visitSingularStringField(value: self.synthUnits, fieldNumber: 7)
    }
    if !self.pendingInboundRune.isEmpty {
      try visitor.visitSingularStringField(value: self.pendingInboundRune, fieldNumber: 8)
    }
    if !self.pendingInboundAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.pendingInboundAsset, fieldNumber: 9)
    }
    if self.statusSince != 0 {
      try visitor.visitSingularInt64Field(value: self.statusSince, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_Pool, rhs: Types_Pool) -> Bool {
    if lhs.balanceRune != rhs.balanceRune {return false}
    if lhs.balanceAsset != rhs.balanceAsset {return false}
    if lhs._asset != rhs._asset {return false}
    if lhs.lpUnits != rhs.lpUnits {return false}
    if lhs.status != rhs.status {return false}
    if lhs.statusSince != rhs.statusSince {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.synthUnits != rhs.synthUnits {return false}
    if lhs.pendingInboundRune != rhs.pendingInboundRune {return false}
    if lhs.pendingInboundAsset != rhs.pendingInboundAsset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
