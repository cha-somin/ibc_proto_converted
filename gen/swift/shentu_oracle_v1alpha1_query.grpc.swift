//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/oracle/v1alpha1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for oracle module.
///
/// Usage: instantiate `Shentu_Oracle_V1alpha1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Oracle_V1alpha1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func `operator`(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>

  func operators(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>

  func withdraws(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>

  func task(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>

  func txTask(
    _ request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTxTaskRequest, Shentu_Oracle_V1alpha1_QueryTxTaskResponse>

  func response(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>

  func txResponse(
    _ request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTxResponseRequest, Shentu_Oracle_V1alpha1_QueryTxResponseResponse>

  func params(
    _ request: Shentu_Oracle_V1alpha1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryParamsRequest, Shentu_Oracle_V1alpha1_QueryParamsResponse>
}

extension Shentu_Oracle_V1alpha1_QueryClientProtocol {
  internal var serviceName: String {
    return "shentu.oracle.v1alpha1.Query"
  }

  /// Unary call to Operator
  ///
  /// - Parameters:
  ///   - request: Request to send to Operator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func `operator`(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.`operator`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorInterceptors() ?? []
    )
  }

  /// Unary call to Operators
  ///
  /// - Parameters:
  ///   - request: Request to send to Operators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func operators(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.operators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorsInterceptors() ?? []
    )
  }

  /// Unary call to Withdraws
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraws.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdraws(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.withdraws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? []
    )
  }

  /// Unary call to Task
  ///
  /// - Parameters:
  ///   - request: Request to send to Task.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func task(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.task.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskInterceptors() ?? []
    )
  }

  /// Unary call to TxTask
  ///
  /// - Parameters:
  ///   - request: Request to send to TxTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txTask(
    _ request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTxTaskRequest, Shentu_Oracle_V1alpha1_QueryTxTaskResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxTaskInterceptors() ?? []
    )
  }

  /// Unary call to Response
  ///
  /// - Parameters:
  ///   - request: Request to send to Response.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func response(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.response.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }

  /// Unary call to TxResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to TxResponse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txResponse(
    _ request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTxResponseRequest, Shentu_Oracle_V1alpha1_QueryTxResponseResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxResponseInterceptors() ?? []
    )
  }

  /// Params queries all parameters of the oracle module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Shentu_Oracle_V1alpha1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryParamsRequest, Shentu_Oracle_V1alpha1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Shentu_Oracle_V1alpha1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Shentu_Oracle_V1alpha1_QueryNIOClient")
internal final class Shentu_Oracle_V1alpha1_QueryClient: Shentu_Oracle_V1alpha1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the shentu.oracle.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Shentu_Oracle_V1alpha1_QueryNIOClient: Shentu_Oracle_V1alpha1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.oracle.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for oracle module.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Oracle_V1alpha1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func makeOperatorCall(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>

  func makeOperatorsCall(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>

  func makeWithdrawsCall(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>

  func makeTaskCall(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>

  func makeTxTaskCall(
    _ request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryTxTaskRequest, Shentu_Oracle_V1alpha1_QueryTxTaskResponse>

  func makeResponseCall(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>

  func makeTxResponseCall(
    _ request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryTxResponseRequest, Shentu_Oracle_V1alpha1_QueryTxResponseResponse>

  func makeParamsCall(
    _ request: Shentu_Oracle_V1alpha1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryParamsRequest, Shentu_Oracle_V1alpha1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Oracle_V1alpha1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Oracle_V1alpha1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeOperatorCall(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.`operator`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorInterceptors() ?? []
    )
  }

  internal func makeOperatorsCall(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.operators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorsInterceptors() ?? []
    )
  }

  internal func makeWithdrawsCall(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.withdraws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? []
    )
  }

  internal func makeTaskCall(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.task.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskInterceptors() ?? []
    )
  }

  internal func makeTxTaskCall(
    _ request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryTxTaskRequest, Shentu_Oracle_V1alpha1_QueryTxTaskResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxTaskInterceptors() ?? []
    )
  }

  internal func makeResponseCall(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.response.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }

  internal func makeTxResponseCall(
    _ request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryTxResponseRequest, Shentu_Oracle_V1alpha1_QueryTxResponseResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxResponseInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Shentu_Oracle_V1alpha1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_QueryParamsRequest, Shentu_Oracle_V1alpha1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Oracle_V1alpha1_QueryAsyncClientProtocol {
  internal func `operator`(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryOperatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.`operator`.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorInterceptors() ?? []
    )
  }

  internal func operators(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryOperatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.operators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorsInterceptors() ?? []
    )
  }

  internal func withdraws(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryWithdrawsResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.withdraws.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? []
    )
  }

  internal func task(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryTaskResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.task.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskInterceptors() ?? []
    )
  }

  internal func txTask(
    _ request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryTxTaskResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxTaskInterceptors() ?? []
    )
  }

  internal func response(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryResponseResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.response.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }

  internal func txResponse(
    _ request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryTxResponseResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxResponseInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Shentu_Oracle_V1alpha1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Shentu_Oracle_V1alpha1_QueryAsyncClient: Shentu_Oracle_V1alpha1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking '`operator`'.
  func makeOperatorInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>]

  /// - Returns: Interceptors to use when invoking 'operators'.
  func makeOperatorsInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'withdraws'.
  func makeWithdrawsInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>]

  /// - Returns: Interceptors to use when invoking 'task'.
  func makeTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>]

  /// - Returns: Interceptors to use when invoking 'txTask'.
  func makeTxTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryTxTaskRequest, Shentu_Oracle_V1alpha1_QueryTxTaskResponse>]

  /// - Returns: Interceptors to use when invoking 'response'.
  func makeResponseInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>]

  /// - Returns: Interceptors to use when invoking 'txResponse'.
  func makeTxResponseInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryTxResponseRequest, Shentu_Oracle_V1alpha1_QueryTxResponseResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryParamsRequest, Shentu_Oracle_V1alpha1_QueryParamsResponse>]
}

internal enum Shentu_Oracle_V1alpha1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "shentu.oracle.v1alpha1.Query",
    methods: [
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.`operator`,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.operators,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.withdraws,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.task,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txTask,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.response,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.txResponse,
      Shentu_Oracle_V1alpha1_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let `operator` = GRPCMethodDescriptor(
      name: "Operator",
      path: "/shentu.oracle.v1alpha1.Query/Operator",
      type: GRPCCallType.unary
    )

    internal static let operators = GRPCMethodDescriptor(
      name: "Operators",
      path: "/shentu.oracle.v1alpha1.Query/Operators",
      type: GRPCCallType.unary
    )

    internal static let withdraws = GRPCMethodDescriptor(
      name: "Withdraws",
      path: "/shentu.oracle.v1alpha1.Query/Withdraws",
      type: GRPCCallType.unary
    )

    internal static let task = GRPCMethodDescriptor(
      name: "Task",
      path: "/shentu.oracle.v1alpha1.Query/Task",
      type: GRPCCallType.unary
    )

    internal static let txTask = GRPCMethodDescriptor(
      name: "TxTask",
      path: "/shentu.oracle.v1alpha1.Query/TxTask",
      type: GRPCCallType.unary
    )

    internal static let response = GRPCMethodDescriptor(
      name: "Response",
      path: "/shentu.oracle.v1alpha1.Query/Response",
      type: GRPCCallType.unary
    )

    internal static let txResponse = GRPCMethodDescriptor(
      name: "TxResponse",
      path: "/shentu.oracle.v1alpha1.Query/TxResponse",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/shentu.oracle.v1alpha1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for oracle module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Oracle_V1alpha1_QueryProvider: CallHandlerProvider {
  var interceptors: Shentu_Oracle_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  func `operator`(request: Shentu_Oracle_V1alpha1_QueryOperatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryOperatorResponse>

  func operators(request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryOperatorsResponse>

  func withdraws(request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>

  func task(request: Shentu_Oracle_V1alpha1_QueryTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryTaskResponse>

  func txTask(request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryTxTaskResponse>

  func response(request: Shentu_Oracle_V1alpha1_QueryResponseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryResponseResponse>

  func txResponse(request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryTxResponseResponse>

  /// Params queries all parameters of the oracle module.
  func params(request: Shentu_Oracle_V1alpha1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryParamsResponse>
}

extension Shentu_Oracle_V1alpha1_QueryProvider {
  internal var serviceName: Substring {
    return Shentu_Oracle_V1alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Operator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryOperatorRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryOperatorResponse>(),
        interceptors: self.interceptors?.makeOperatorInterceptors() ?? [],
        userFunction: self.`operator`(request:context:)
      )

    case "Operators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryOperatorsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryOperatorsResponse>(),
        interceptors: self.interceptors?.makeOperatorsInterceptors() ?? [],
        userFunction: self.operators(request:context:)
      )

    case "Withdraws":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>(),
        interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? [],
        userFunction: self.withdraws(request:context:)
      )

    case "Task":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTaskRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTaskResponse>(),
        interceptors: self.interceptors?.makeTaskInterceptors() ?? [],
        userFunction: self.task(request:context:)
      )

    case "TxTask":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTxTaskRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTxTaskResponse>(),
        interceptors: self.interceptors?.makeTxTaskInterceptors() ?? [],
        userFunction: self.txTask(request:context:)
      )

    case "Response":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryResponseRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryResponseResponse>(),
        interceptors: self.interceptors?.makeResponseInterceptors() ?? [],
        userFunction: self.response(request:context:)
      )

    case "TxResponse":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTxResponseRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTxResponseResponse>(),
        interceptors: self.interceptors?.makeTxResponseInterceptors() ?? [],
        userFunction: self.txResponse(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for oracle module.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Oracle_V1alpha1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Oracle_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func `operator`(
    request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryOperatorResponse

  @Sendable func operators(
    request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryOperatorsResponse

  @Sendable func withdraws(
    request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryWithdrawsResponse

  @Sendable func task(
    request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryTaskResponse

  @Sendable func txTask(
    request: Shentu_Oracle_V1alpha1_QueryTxTaskRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryTxTaskResponse

  @Sendable func response(
    request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryResponseResponse

  @Sendable func txResponse(
    request: Shentu_Oracle_V1alpha1_QueryTxResponseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryTxResponseResponse

  /// Params queries all parameters of the oracle module.
  @Sendable func params(
    request: Shentu_Oracle_V1alpha1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Oracle_V1alpha1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Oracle_V1alpha1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Shentu_Oracle_V1alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Shentu_Oracle_V1alpha1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Operator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryOperatorRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryOperatorResponse>(),
        interceptors: self.interceptors?.makeOperatorInterceptors() ?? [],
        wrapping: self.`operator`(request:context:)
      )

    case "Operators":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryOperatorsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryOperatorsResponse>(),
        interceptors: self.interceptors?.makeOperatorsInterceptors() ?? [],
        wrapping: self.operators(request:context:)
      )

    case "Withdraws":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>(),
        interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? [],
        wrapping: self.withdraws(request:context:)
      )

    case "Task":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTaskRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTaskResponse>(),
        interceptors: self.interceptors?.makeTaskInterceptors() ?? [],
        wrapping: self.task(request:context:)
      )

    case "TxTask":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTxTaskRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTxTaskResponse>(),
        interceptors: self.interceptors?.makeTxTaskInterceptors() ?? [],
        wrapping: self.txTask(request:context:)
      )

    case "Response":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryResponseRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryResponseResponse>(),
        interceptors: self.interceptors?.makeResponseInterceptors() ?? [],
        wrapping: self.response(request:context:)
      )

    case "TxResponse":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTxResponseRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTxResponseResponse>(),
        interceptors: self.interceptors?.makeTxResponseInterceptors() ?? [],
        wrapping: self.txResponse(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Oracle_V1alpha1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling '`operator`'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOperatorInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>]

  /// - Returns: Interceptors to use when handling 'operators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOperatorsInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>]

  /// - Returns: Interceptors to use when handling 'withdraws'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawsInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>]

  /// - Returns: Interceptors to use when handling 'task'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>]

  /// - Returns: Interceptors to use when handling 'txTask'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryTxTaskRequest, Shentu_Oracle_V1alpha1_QueryTxTaskResponse>]

  /// - Returns: Interceptors to use when handling 'response'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResponseInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>]

  /// - Returns: Interceptors to use when handling 'txResponse'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxResponseInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryTxResponseRequest, Shentu_Oracle_V1alpha1_QueryTxResponseResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryParamsRequest, Shentu_Oracle_V1alpha1_QueryParamsResponse>]
}

internal enum Shentu_Oracle_V1alpha1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "shentu.oracle.v1alpha1.Query",
    methods: [
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.`operator`,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.operators,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.withdraws,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.task,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.txTask,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.response,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.txResponse,
      Shentu_Oracle_V1alpha1_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let `operator` = GRPCMethodDescriptor(
      name: "Operator",
      path: "/shentu.oracle.v1alpha1.Query/Operator",
      type: GRPCCallType.unary
    )

    internal static let operators = GRPCMethodDescriptor(
      name: "Operators",
      path: "/shentu.oracle.v1alpha1.Query/Operators",
      type: GRPCCallType.unary
    )

    internal static let withdraws = GRPCMethodDescriptor(
      name: "Withdraws",
      path: "/shentu.oracle.v1alpha1.Query/Withdraws",
      type: GRPCCallType.unary
    )

    internal static let task = GRPCMethodDescriptor(
      name: "Task",
      path: "/shentu.oracle.v1alpha1.Query/Task",
      type: GRPCCallType.unary
    )

    internal static let txTask = GRPCMethodDescriptor(
      name: "TxTask",
      path: "/shentu.oracle.v1alpha1.Query/TxTask",
      type: GRPCCallType.unary
    )

    internal static let response = GRPCMethodDescriptor(
      name: "Response",
      path: "/shentu.oracle.v1alpha1.Query/Response",
      type: GRPCCallType.unary
    )

    internal static let txResponse = GRPCMethodDescriptor(
      name: "TxResponse",
      path: "/shentu.oracle.v1alpha1.Query/TxResponse",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/shentu.oracle.v1alpha1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
