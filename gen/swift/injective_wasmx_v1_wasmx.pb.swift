// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/wasmx/v1/wasmx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Injective_Wasmx_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Set the status to active to indicate that contracts can be executed in
  /// begin blocker.
  var isExecutionEnabled: Bool = false

  /// Maximum aggregate total gas to be used for the contract executions in the
  /// BeginBlocker.
  var maxBeginBlockTotalGas: UInt64 = 0

  /// the maximum gas limit each individual contract can consume in the
  /// BeginBlocker.
  var maxContractGasLimit: UInt64 = 0

  /// min_gas_price defines the minimum gas price the contracts must pay to be
  /// executed in the BeginBlocker.
  var minGasPrice: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Wasmx_V1_RegisteredContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// limit of gas per BB execution
  var gasLimit: UInt64 = 0

  /// gas price that contract is willing to pay for execution in BeginBlocker
  var gasPrice: UInt64 = 0

  /// is contract currently active
  var isExecutable: Bool = false

  /// code_id that is allowed to be executed (to prevent malicious updates) - if
  /// nil/0 any code_id can be executed
  var codeID: UInt64 = 0

  /// optional - admin addr that is allowed to update contract data
  var adminAddress: String = String()

  /// Optional: address of the contract granting fee
  /// Must be set if fund_mode is GrantOnly
  var granterAddress: String = String()

  /// funding mode
  var fundMode: Injective_Wasmx_V1_FundingMode = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Injective_Wasmx_V1_Params: @unchecked Sendable {}
extension Injective_Wasmx_V1_RegisteredContract: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.wasmx.v1"

extension Injective_Wasmx_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_execution_enabled"),
    2: .standard(proto: "max_begin_block_total_gas"),
    3: .standard(proto: "max_contract_gas_limit"),
    4: .standard(proto: "min_gas_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isExecutionEnabled) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.maxBeginBlockTotalGas) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxContractGasLimit) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.minGasPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isExecutionEnabled != false {
      try visitor.visitSingularBoolField(value: self.isExecutionEnabled, fieldNumber: 1)
    }
    if self.maxBeginBlockTotalGas != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxBeginBlockTotalGas, fieldNumber: 2)
    }
    if self.maxContractGasLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxContractGasLimit, fieldNumber: 3)
    }
    if self.minGasPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.minGasPrice, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_Params, rhs: Injective_Wasmx_V1_Params) -> Bool {
    if lhs.isExecutionEnabled != rhs.isExecutionEnabled {return false}
    if lhs.maxBeginBlockTotalGas != rhs.maxBeginBlockTotalGas {return false}
    if lhs.maxContractGasLimit != rhs.maxContractGasLimit {return false}
    if lhs.minGasPrice != rhs.minGasPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Wasmx_V1_RegisteredContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RegisteredContract"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gas_limit"),
    2: .standard(proto: "gas_price"),
    3: .standard(proto: "is_executable"),
    4: .standard(proto: "code_id"),
    5: .standard(proto: "admin_address"),
    6: .standard(proto: "granter_address"),
    7: .standard(proto: "fund_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.gasLimit) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.gasPrice) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isExecutable) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.codeID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.adminAddress) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.granterAddress) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.fundMode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gasLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasLimit, fieldNumber: 1)
    }
    if self.gasPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasPrice, fieldNumber: 2)
    }
    if self.isExecutable != false {
      try visitor.visitSingularBoolField(value: self.isExecutable, fieldNumber: 3)
    }
    if self.codeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.codeID, fieldNumber: 4)
    }
    if !self.adminAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAddress, fieldNumber: 5)
    }
    if !self.granterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.granterAddress, fieldNumber: 6)
    }
    if self.fundMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.fundMode, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Wasmx_V1_RegisteredContract, rhs: Injective_Wasmx_V1_RegisteredContract) -> Bool {
    if lhs.gasLimit != rhs.gasLimit {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.isExecutable != rhs.isExecutable {return false}
    if lhs.codeID != rhs.codeID {return false}
    if lhs.adminAddress != rhs.adminAddress {return false}
    if lhs.granterAddress != rhs.granterAddress {return false}
    if lhs.fundMode != rhs.fundMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
