//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: babylon/btcstaking/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
/// TODO: handle unbonding tx with full witness
///
/// Usage: instantiate `Babylon_Btcstaking_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Babylon_Btcstaking_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createFinalityProvider(
    _ request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgCreateFinalityProvider, Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>

  func editFinalityProvider(
    _ request: Babylon_Btcstaking_V1_MsgEditFinalityProvider,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgEditFinalityProvider, Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>

  func createBTCDelegation(
    _ request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgCreateBTCDelegation, Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>

  func addCovenantSigs(
    _ request: Babylon_Btcstaking_V1_MsgAddCovenantSigs,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgAddCovenantSigs, Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>

  func bTCUndelegate(
    _ request: Babylon_Btcstaking_V1_MsgBTCUndelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgBTCUndelegate, Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>

  func selectiveSlashingEvidence(
    _ request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>

  func updateParams(
    _ request: Babylon_Btcstaking_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgUpdateParams, Babylon_Btcstaking_V1_MsgUpdateParamsResponse>
}

extension Babylon_Btcstaking_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "babylon.btcstaking.v1.Msg"
  }

  /// CreateFinalityProvider creates a new finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFinalityProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFinalityProvider(
    _ request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgCreateFinalityProvider, Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createFinalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFinalityProviderInterceptors() ?? []
    )
  }

  /// EditFinalityProvider edits an existing finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to EditFinalityProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editFinalityProvider(
    _ request: Babylon_Btcstaking_V1_MsgEditFinalityProvider,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgEditFinalityProvider, Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.editFinalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFinalityProviderInterceptors() ?? []
    )
  }

  /// CreateBTCDelegation creates a new BTC delegation
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBTCDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBTCDelegation(
    _ request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgCreateBTCDelegation, Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createBTCDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBTCDelegationInterceptors() ?? []
    )
  }

  /// AddCovenantSigs handles signatures from a covenant member
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCovenantSigs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addCovenantSigs(
    _ request: Babylon_Btcstaking_V1_MsgAddCovenantSigs,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgAddCovenantSigs, Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.addCovenantSigs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCovenantSigsInterceptors() ?? []
    )
  }

  /// BTCUndelegate handles a signature on unbonding tx from its delegator
  ///
  /// - Parameters:
  ///   - request: Request to send to BTCUndelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bTCUndelegate(
    _ request: Babylon_Btcstaking_V1_MsgBTCUndelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgBTCUndelegate, Babylon_Btcstaking_V1_MsgBTCUndelegateResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.bTCUndelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCUndelegateInterceptors() ?? []
    )
  }

  /// SelectiveSlashingEvidence handles the evidence of selective slashing launched
  /// by a finality provider
  ///
  /// - Parameters:
  ///   - request: Request to send to SelectiveSlashingEvidence.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func selectiveSlashingEvidence(
    _ request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.selectiveSlashingEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSelectiveSlashingEvidenceInterceptors() ?? []
    )
  }

  /// UpdateParams updates the btcstaking module parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Babylon_Btcstaking_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Babylon_Btcstaking_V1_MsgUpdateParams, Babylon_Btcstaking_V1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Babylon_Btcstaking_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Babylon_Btcstaking_V1_MsgNIOClient")
internal final class Babylon_Btcstaking_V1_MsgClient: Babylon_Btcstaking_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the babylon.btcstaking.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Babylon_Btcstaking_V1_MsgNIOClient: Babylon_Btcstaking_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the babylon.btcstaking.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
/// TODO: handle unbonding tx with full witness
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btcstaking_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateFinalityProviderCall(
    _ request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgCreateFinalityProvider, Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>

  func makeEditFinalityProviderCall(
    _ request: Babylon_Btcstaking_V1_MsgEditFinalityProvider,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgEditFinalityProvider, Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>

  func makeCreateBtcdelegationCall(
    _ request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgCreateBTCDelegation, Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>

  func makeAddCovenantSigsCall(
    _ request: Babylon_Btcstaking_V1_MsgAddCovenantSigs,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgAddCovenantSigs, Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>

  func makeBtcundelegateCall(
    _ request: Babylon_Btcstaking_V1_MsgBTCUndelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgBTCUndelegate, Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>

  func makeSelectiveSlashingEvidenceCall(
    _ request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>

  func makeUpdateParamsCall(
    _ request: Babylon_Btcstaking_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgUpdateParams, Babylon_Btcstaking_V1_MsgUpdateParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstaking_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btcstaking_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateFinalityProviderCall(
    _ request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgCreateFinalityProvider, Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createFinalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFinalityProviderInterceptors() ?? []
    )
  }

  internal func makeEditFinalityProviderCall(
    _ request: Babylon_Btcstaking_V1_MsgEditFinalityProvider,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgEditFinalityProvider, Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.editFinalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFinalityProviderInterceptors() ?? []
    )
  }

  internal func makeCreateBtcdelegationCall(
    _ request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgCreateBTCDelegation, Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createBTCDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBTCDelegationInterceptors() ?? []
    )
  }

  internal func makeAddCovenantSigsCall(
    _ request: Babylon_Btcstaking_V1_MsgAddCovenantSigs,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgAddCovenantSigs, Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.addCovenantSigs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCovenantSigsInterceptors() ?? []
    )
  }

  internal func makeBtcundelegateCall(
    _ request: Babylon_Btcstaking_V1_MsgBTCUndelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgBTCUndelegate, Babylon_Btcstaking_V1_MsgBTCUndelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.bTCUndelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCUndelegateInterceptors() ?? []
    )
  }

  internal func makeSelectiveSlashingEvidenceCall(
    _ request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.selectiveSlashingEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSelectiveSlashingEvidenceInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Babylon_Btcstaking_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Babylon_Btcstaking_V1_MsgUpdateParams, Babylon_Btcstaking_V1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstaking_V1_MsgAsyncClientProtocol {
  internal func createFinalityProvider(
    _ request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createFinalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFinalityProviderInterceptors() ?? []
    )
  }

  internal func editFinalityProvider(
    _ request: Babylon_Btcstaking_V1_MsgEditFinalityProvider,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.editFinalityProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFinalityProviderInterceptors() ?? []
    )
  }

  internal func createBTCDelegation(
    _ request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createBTCDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBTCDelegationInterceptors() ?? []
    )
  }

  internal func addCovenantSigs(
    _ request: Babylon_Btcstaking_V1_MsgAddCovenantSigs,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.addCovenantSigs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCovenantSigsInterceptors() ?? []
    )
  }

  internal func bTCUndelegate(
    _ request: Babylon_Btcstaking_V1_MsgBTCUndelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgBTCUndelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.bTCUndelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBTCUndelegateInterceptors() ?? []
    )
  }

  internal func selectiveSlashingEvidence(
    _ request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.selectiveSlashingEvidence.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSelectiveSlashingEvidenceInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Babylon_Btcstaking_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Babylon_Btcstaking_V1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Babylon_Btcstaking_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Babylon_Btcstaking_V1_MsgAsyncClient: Babylon_Btcstaking_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Babylon_Btcstaking_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createFinalityProvider'.
  func makeCreateFinalityProviderInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgCreateFinalityProvider, Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'editFinalityProvider'.
  func makeEditFinalityProviderInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgEditFinalityProvider, Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'createBTCDelegation'.
  func makeCreateBTCDelegationInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgCreateBTCDelegation, Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'addCovenantSigs'.
  func makeAddCovenantSigsInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgAddCovenantSigs, Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>]

  /// - Returns: Interceptors to use when invoking 'bTCUndelegate'.
  func makeBTCUndelegateInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgBTCUndelegate, Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'selectiveSlashingEvidence'.
  func makeSelectiveSlashingEvidenceInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Babylon_Btcstaking_V1_MsgUpdateParams, Babylon_Btcstaking_V1_MsgUpdateParamsResponse>]
}

internal enum Babylon_Btcstaking_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "babylon.btcstaking.v1.Msg",
    methods: [
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createFinalityProvider,
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.editFinalityProvider,
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.createBTCDelegation,
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.addCovenantSigs,
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.bTCUndelegate,
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.selectiveSlashingEvidence,
      Babylon_Btcstaking_V1_MsgClientMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createFinalityProvider = GRPCMethodDescriptor(
      name: "CreateFinalityProvider",
      path: "/babylon.btcstaking.v1.Msg/CreateFinalityProvider",
      type: GRPCCallType.unary
    )

    internal static let editFinalityProvider = GRPCMethodDescriptor(
      name: "EditFinalityProvider",
      path: "/babylon.btcstaking.v1.Msg/EditFinalityProvider",
      type: GRPCCallType.unary
    )

    internal static let createBTCDelegation = GRPCMethodDescriptor(
      name: "CreateBTCDelegation",
      path: "/babylon.btcstaking.v1.Msg/CreateBTCDelegation",
      type: GRPCCallType.unary
    )

    internal static let addCovenantSigs = GRPCMethodDescriptor(
      name: "AddCovenantSigs",
      path: "/babylon.btcstaking.v1.Msg/AddCovenantSigs",
      type: GRPCCallType.unary
    )

    internal static let bTCUndelegate = GRPCMethodDescriptor(
      name: "BTCUndelegate",
      path: "/babylon.btcstaking.v1.Msg/BTCUndelegate",
      type: GRPCCallType.unary
    )

    internal static let selectiveSlashingEvidence = GRPCMethodDescriptor(
      name: "SelectiveSlashingEvidence",
      path: "/babylon.btcstaking.v1.Msg/SelectiveSlashingEvidence",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/babylon.btcstaking.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
/// TODO: handle unbonding tx with full witness
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Babylon_Btcstaking_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Babylon_Btcstaking_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateFinalityProvider creates a new finality provider
  func createFinalityProvider(request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>

  /// EditFinalityProvider edits an existing finality provider
  func editFinalityProvider(request: Babylon_Btcstaking_V1_MsgEditFinalityProvider, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>

  /// CreateBTCDelegation creates a new BTC delegation
  func createBTCDelegation(request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>

  /// AddCovenantSigs handles signatures from a covenant member
  func addCovenantSigs(request: Babylon_Btcstaking_V1_MsgAddCovenantSigs, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>

  /// BTCUndelegate handles a signature on unbonding tx from its delegator
  func bTCUndelegate(request: Babylon_Btcstaking_V1_MsgBTCUndelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>

  /// SelectiveSlashingEvidence handles the evidence of selective slashing launched
  /// by a finality provider
  func selectiveSlashingEvidence(request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>

  /// UpdateParams updates the btcstaking module parameters.
  func updateParams(request: Babylon_Btcstaking_V1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Babylon_Btcstaking_V1_MsgUpdateParamsResponse>
}

extension Babylon_Btcstaking_V1_MsgProvider {
  internal var serviceName: Substring {
    return Babylon_Btcstaking_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateFinalityProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgCreateFinalityProvider>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeCreateFinalityProviderInterceptors() ?? [],
        userFunction: self.createFinalityProvider(request:context:)
      )

    case "EditFinalityProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgEditFinalityProvider>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeEditFinalityProviderInterceptors() ?? [],
        userFunction: self.editFinalityProvider(request:context:)
      )

    case "CreateBTCDelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgCreateBTCDelegation>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>(),
        interceptors: self.interceptors?.makeCreateBTCDelegationInterceptors() ?? [],
        userFunction: self.createBTCDelegation(request:context:)
      )

    case "AddCovenantSigs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgAddCovenantSigs>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>(),
        interceptors: self.interceptors?.makeAddCovenantSigsInterceptors() ?? [],
        userFunction: self.addCovenantSigs(request:context:)
      )

    case "BTCUndelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgBTCUndelegate>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>(),
        interceptors: self.interceptors?.makeBTCUndelegateInterceptors() ?? [],
        userFunction: self.bTCUndelegate(request:context:)
      )

    case "SelectiveSlashingEvidence":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>(),
        interceptors: self.interceptors?.makeSelectiveSlashingEvidenceInterceptors() ?? [],
        userFunction: self.selectiveSlashingEvidence(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
/// TODO: handle unbonding tx with full witness
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Babylon_Btcstaking_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Babylon_Btcstaking_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateFinalityProvider creates a new finality provider
  @Sendable func createFinalityProvider(
    request: Babylon_Btcstaking_V1_MsgCreateFinalityProvider,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse

  /// EditFinalityProvider edits an existing finality provider
  @Sendable func editFinalityProvider(
    request: Babylon_Btcstaking_V1_MsgEditFinalityProvider,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse

  /// CreateBTCDelegation creates a new BTC delegation
  @Sendable func createBTCDelegation(
    request: Babylon_Btcstaking_V1_MsgCreateBTCDelegation,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse

  /// AddCovenantSigs handles signatures from a covenant member
  @Sendable func addCovenantSigs(
    request: Babylon_Btcstaking_V1_MsgAddCovenantSigs,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse

  /// BTCUndelegate handles a signature on unbonding tx from its delegator
  @Sendable func bTCUndelegate(
    request: Babylon_Btcstaking_V1_MsgBTCUndelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgBTCUndelegateResponse

  /// SelectiveSlashingEvidence handles the evidence of selective slashing launched
  /// by a finality provider
  @Sendable func selectiveSlashingEvidence(
    request: Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse

  /// UpdateParams updates the btcstaking module parameters.
  @Sendable func updateParams(
    request: Babylon_Btcstaking_V1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Babylon_Btcstaking_V1_MsgUpdateParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Babylon_Btcstaking_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Babylon_Btcstaking_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Babylon_Btcstaking_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Babylon_Btcstaking_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateFinalityProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgCreateFinalityProvider>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeCreateFinalityProviderInterceptors() ?? [],
        wrapping: self.createFinalityProvider(request:context:)
      )

    case "EditFinalityProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgEditFinalityProvider>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>(),
        interceptors: self.interceptors?.makeEditFinalityProviderInterceptors() ?? [],
        wrapping: self.editFinalityProvider(request:context:)
      )

    case "CreateBTCDelegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgCreateBTCDelegation>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>(),
        interceptors: self.interceptors?.makeCreateBTCDelegationInterceptors() ?? [],
        wrapping: self.createBTCDelegation(request:context:)
      )

    case "AddCovenantSigs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgAddCovenantSigs>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>(),
        interceptors: self.interceptors?.makeAddCovenantSigsInterceptors() ?? [],
        wrapping: self.addCovenantSigs(request:context:)
      )

    case "BTCUndelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgBTCUndelegate>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>(),
        interceptors: self.interceptors?.makeBTCUndelegateInterceptors() ?? [],
        wrapping: self.bTCUndelegate(request:context:)
      )

    case "SelectiveSlashingEvidence":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>(),
        interceptors: self.interceptors?.makeSelectiveSlashingEvidenceInterceptors() ?? [],
        wrapping: self.selectiveSlashingEvidence(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Babylon_Btcstaking_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Babylon_Btcstaking_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Babylon_Btcstaking_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createFinalityProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFinalityProviderInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgCreateFinalityProvider, Babylon_Btcstaking_V1_MsgCreateFinalityProviderResponse>]

  /// - Returns: Interceptors to use when handling 'editFinalityProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditFinalityProviderInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgEditFinalityProvider, Babylon_Btcstaking_V1_MsgEditFinalityProviderResponse>]

  /// - Returns: Interceptors to use when handling 'createBTCDelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBTCDelegationInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgCreateBTCDelegation, Babylon_Btcstaking_V1_MsgCreateBTCDelegationResponse>]

  /// - Returns: Interceptors to use when handling 'addCovenantSigs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddCovenantSigsInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgAddCovenantSigs, Babylon_Btcstaking_V1_MsgAddCovenantSigsResponse>]

  /// - Returns: Interceptors to use when handling 'bTCUndelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBTCUndelegateInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgBTCUndelegate, Babylon_Btcstaking_V1_MsgBTCUndelegateResponse>]

  /// - Returns: Interceptors to use when handling 'selectiveSlashingEvidence'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSelectiveSlashingEvidenceInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidence, Babylon_Btcstaking_V1_MsgSelectiveSlashingEvidenceResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Babylon_Btcstaking_V1_MsgUpdateParams, Babylon_Btcstaking_V1_MsgUpdateParamsResponse>]
}

internal enum Babylon_Btcstaking_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "babylon.btcstaking.v1.Msg",
    methods: [
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.createFinalityProvider,
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.editFinalityProvider,
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.createBTCDelegation,
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.addCovenantSigs,
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.bTCUndelegate,
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.selectiveSlashingEvidence,
      Babylon_Btcstaking_V1_MsgServerMetadata.Methods.updateParams,
    ]
  )

  internal enum Methods {
    internal static let createFinalityProvider = GRPCMethodDescriptor(
      name: "CreateFinalityProvider",
      path: "/babylon.btcstaking.v1.Msg/CreateFinalityProvider",
      type: GRPCCallType.unary
    )

    internal static let editFinalityProvider = GRPCMethodDescriptor(
      name: "EditFinalityProvider",
      path: "/babylon.btcstaking.v1.Msg/EditFinalityProvider",
      type: GRPCCallType.unary
    )

    internal static let createBTCDelegation = GRPCMethodDescriptor(
      name: "CreateBTCDelegation",
      path: "/babylon.btcstaking.v1.Msg/CreateBTCDelegation",
      type: GRPCCallType.unary
    )

    internal static let addCovenantSigs = GRPCMethodDescriptor(
      name: "AddCovenantSigs",
      path: "/babylon.btcstaking.v1.Msg/AddCovenantSigs",
      type: GRPCCallType.unary
    )

    internal static let bTCUndelegate = GRPCMethodDescriptor(
      name: "BTCUndelegate",
      path: "/babylon.btcstaking.v1.Msg/BTCUndelegate",
      type: GRPCCallType.unary
    )

    internal static let selectiveSlashingEvidence = GRPCMethodDescriptor(
      name: "SelectiveSlashingEvidence",
      path: "/babylon.btcstaking.v1.Msg/SelectiveSlashingEvidence",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/babylon.btcstaking.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )
  }
}
