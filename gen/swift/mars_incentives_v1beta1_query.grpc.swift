//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mars/incentives/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for the incentives module
///
/// Usage: instantiate `Mars_Incentives_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Mars_Incentives_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func schedule(
    _ request: Mars_Incentives_V1beta1_QueryScheduleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mars_Incentives_V1beta1_QueryScheduleRequest, Mars_Incentives_V1beta1_QueryScheduleResponse>

  func schedules(
    _ request: Mars_Incentives_V1beta1_QuerySchedulesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mars_Incentives_V1beta1_QuerySchedulesRequest, Mars_Incentives_V1beta1_QuerySchedulesResponse>
}

extension Mars_Incentives_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "mars.incentives.v1beta1.Query"
  }

  /// Schedule queries an incentives schedule by identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to Schedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func schedule(
    _ request: Mars_Incentives_V1beta1_QueryScheduleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mars_Incentives_V1beta1_QueryScheduleRequest, Mars_Incentives_V1beta1_QueryScheduleResponse> {
    return self.makeUnaryCall(
      path: Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleInterceptors() ?? []
    )
  }

  /// Schedules queries all incentives schedules
  ///
  /// - Parameters:
  ///   - request: Request to send to Schedules.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func schedules(
    _ request: Mars_Incentives_V1beta1_QuerySchedulesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mars_Incentives_V1beta1_QuerySchedulesRequest, Mars_Incentives_V1beta1_QuerySchedulesResponse> {
    return self.makeUnaryCall(
      path: Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedules.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Mars_Incentives_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Mars_Incentives_V1beta1_QueryNIOClient")
internal final class Mars_Incentives_V1beta1_QueryClient: Mars_Incentives_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the mars.incentives.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Mars_Incentives_V1beta1_QueryNIOClient: Mars_Incentives_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the mars.incentives.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for the incentives module
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Mars_Incentives_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeScheduleCall(
    _ request: Mars_Incentives_V1beta1_QueryScheduleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Mars_Incentives_V1beta1_QueryScheduleRequest, Mars_Incentives_V1beta1_QueryScheduleResponse>

  func makeSchedulesCall(
    _ request: Mars_Incentives_V1beta1_QuerySchedulesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Mars_Incentives_V1beta1_QuerySchedulesRequest, Mars_Incentives_V1beta1_QuerySchedulesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Mars_Incentives_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Mars_Incentives_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeScheduleCall(
    _ request: Mars_Incentives_V1beta1_QueryScheduleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Mars_Incentives_V1beta1_QueryScheduleRequest, Mars_Incentives_V1beta1_QueryScheduleResponse> {
    return self.makeAsyncUnaryCall(
      path: Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleInterceptors() ?? []
    )
  }

  internal func makeSchedulesCall(
    _ request: Mars_Incentives_V1beta1_QuerySchedulesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Mars_Incentives_V1beta1_QuerySchedulesRequest, Mars_Incentives_V1beta1_QuerySchedulesResponse> {
    return self.makeAsyncUnaryCall(
      path: Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedules.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Mars_Incentives_V1beta1_QueryAsyncClientProtocol {
  internal func schedule(
    _ request: Mars_Incentives_V1beta1_QueryScheduleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Mars_Incentives_V1beta1_QueryScheduleResponse {
    return try await self.performAsyncUnaryCall(
      path: Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScheduleInterceptors() ?? []
    )
  }

  internal func schedules(
    _ request: Mars_Incentives_V1beta1_QuerySchedulesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Mars_Incentives_V1beta1_QuerySchedulesResponse {
    return try await self.performAsyncUnaryCall(
      path: Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedules.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSchedulesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Mars_Incentives_V1beta1_QueryAsyncClient: Mars_Incentives_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Mars_Incentives_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'schedule'.
  func makeScheduleInterceptors() -> [ClientInterceptor<Mars_Incentives_V1beta1_QueryScheduleRequest, Mars_Incentives_V1beta1_QueryScheduleResponse>]

  /// - Returns: Interceptors to use when invoking 'schedules'.
  func makeSchedulesInterceptors() -> [ClientInterceptor<Mars_Incentives_V1beta1_QuerySchedulesRequest, Mars_Incentives_V1beta1_QuerySchedulesResponse>]
}

internal enum Mars_Incentives_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "mars.incentives.v1beta1.Query",
    methods: [
      Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedule,
      Mars_Incentives_V1beta1_QueryClientMetadata.Methods.schedules,
    ]
  )

  internal enum Methods {
    internal static let schedule = GRPCMethodDescriptor(
      name: "Schedule",
      path: "/mars.incentives.v1beta1.Query/Schedule",
      type: GRPCCallType.unary
    )

    internal static let schedules = GRPCMethodDescriptor(
      name: "Schedules",
      path: "/mars.incentives.v1beta1.Query/Schedules",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for the incentives module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Mars_Incentives_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Mars_Incentives_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Schedule queries an incentives schedule by identifier
  func schedule(request: Mars_Incentives_V1beta1_QueryScheduleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mars_Incentives_V1beta1_QueryScheduleResponse>

  /// Schedules queries all incentives schedules
  func schedules(request: Mars_Incentives_V1beta1_QuerySchedulesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mars_Incentives_V1beta1_QuerySchedulesResponse>
}

extension Mars_Incentives_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Mars_Incentives_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Schedule":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mars_Incentives_V1beta1_QueryScheduleRequest>(),
        responseSerializer: ProtobufSerializer<Mars_Incentives_V1beta1_QueryScheduleResponse>(),
        interceptors: self.interceptors?.makeScheduleInterceptors() ?? [],
        userFunction: self.schedule(request:context:)
      )

    case "Schedules":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mars_Incentives_V1beta1_QuerySchedulesRequest>(),
        responseSerializer: ProtobufSerializer<Mars_Incentives_V1beta1_QuerySchedulesResponse>(),
        interceptors: self.interceptors?.makeSchedulesInterceptors() ?? [],
        userFunction: self.schedules(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for the incentives module
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Mars_Incentives_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Mars_Incentives_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Schedule queries an incentives schedule by identifier
  @Sendable func schedule(
    request: Mars_Incentives_V1beta1_QueryScheduleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Mars_Incentives_V1beta1_QueryScheduleResponse

  /// Schedules queries all incentives schedules
  @Sendable func schedules(
    request: Mars_Incentives_V1beta1_QuerySchedulesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Mars_Incentives_V1beta1_QuerySchedulesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Mars_Incentives_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Mars_Incentives_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Mars_Incentives_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Mars_Incentives_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Schedule":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mars_Incentives_V1beta1_QueryScheduleRequest>(),
        responseSerializer: ProtobufSerializer<Mars_Incentives_V1beta1_QueryScheduleResponse>(),
        interceptors: self.interceptors?.makeScheduleInterceptors() ?? [],
        wrapping: self.schedule(request:context:)
      )

    case "Schedules":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mars_Incentives_V1beta1_QuerySchedulesRequest>(),
        responseSerializer: ProtobufSerializer<Mars_Incentives_V1beta1_QuerySchedulesResponse>(),
        interceptors: self.interceptors?.makeSchedulesInterceptors() ?? [],
        wrapping: self.schedules(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Mars_Incentives_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'schedule'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScheduleInterceptors() -> [ServerInterceptor<Mars_Incentives_V1beta1_QueryScheduleRequest, Mars_Incentives_V1beta1_QueryScheduleResponse>]

  /// - Returns: Interceptors to use when handling 'schedules'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSchedulesInterceptors() -> [ServerInterceptor<Mars_Incentives_V1beta1_QuerySchedulesRequest, Mars_Incentives_V1beta1_QuerySchedulesResponse>]
}

internal enum Mars_Incentives_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "mars.incentives.v1beta1.Query",
    methods: [
      Mars_Incentives_V1beta1_QueryServerMetadata.Methods.schedule,
      Mars_Incentives_V1beta1_QueryServerMetadata.Methods.schedules,
    ]
  )

  internal enum Methods {
    internal static let schedule = GRPCMethodDescriptor(
      name: "Schedule",
      path: "/mars.incentives.v1beta1.Query/Schedule",
      type: GRPCCallType.unary
    )

    internal static let schedules = GRPCMethodDescriptor(
      name: "Schedules",
      path: "/mars.incentives.v1beta1.Query/Schedules",
      type: GRPCCallType.unary
    )
  }
}
