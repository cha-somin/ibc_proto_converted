//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/evm/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the evm Msg service.
///
/// Usage: instantiate `Axelar_Evm_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Evm_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func setGateway(
    _ request: Axelar_Evm_V1beta1_SetGatewayRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_SetGatewayRequest, Axelar_Evm_V1beta1_SetGatewayResponse>

  func confirmGatewayTx(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>

  func confirmGatewayTxs(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>

  func link(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>

  func confirmToken(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>

  func confirmDeposit(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>

  func confirmTransferKey(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>

  func createDeployToken(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>

  func createBurnTokens(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>

  func createPendingTransfers(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>

  func createTransferOperatorship(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>

  func signCommands(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>

  func addChain(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>

  func retryFailedEvent(
    _ request: Axelar_Evm_V1beta1_RetryFailedEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_RetryFailedEventRequest, Axelar_Evm_V1beta1_RetryFailedEventResponse>
}

extension Axelar_Evm_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.evm.v1beta1.MsgService"
  }

  /// Unary call to SetGateway
  ///
  /// - Parameters:
  ///   - request: Request to send to SetGateway.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setGateway(
    _ request: Axelar_Evm_V1beta1_SetGatewayRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_SetGatewayRequest, Axelar_Evm_V1beta1_SetGatewayResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.setGateway.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetGatewayInterceptors() ?? []
    )
  }

  /// Deprecated: use ConfirmGatewayTxs instead
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmGatewayTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmGatewayTx(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayTxInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmGatewayTxs
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmGatewayTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmGatewayTxs(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayTxsInterceptors() ?? []
    )
  }

  /// Unary call to Link
  ///
  /// - Parameters:
  ///   - request: Request to send to Link.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func link(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.link.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmToken
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmToken(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmDeposit
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmDeposit(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmTransferKey
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmTransferKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmTransferKey(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmTransferKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? []
    )
  }

  /// Unary call to CreateDeployToken
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDeployToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDeployToken(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createDeployToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? []
    )
  }

  /// Unary call to CreateBurnTokens
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBurnTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBurnTokens(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createBurnTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? []
    )
  }

  /// Unary call to CreatePendingTransfers
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePendingTransfers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPendingTransfers(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createPendingTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? []
    )
  }

  /// Unary call to CreateTransferOperatorship
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTransferOperatorship.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTransferOperatorship(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createTransferOperatorship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? []
    )
  }

  /// Unary call to SignCommands
  ///
  /// - Parameters:
  ///   - request: Request to send to SignCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signCommands(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.signCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? []
    )
  }

  /// Unary call to AddChain
  ///
  /// - Parameters:
  ///   - request: Request to send to AddChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addChain(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.addChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChainInterceptors() ?? []
    )
  }

  /// Unary call to RetryFailedEvent
  ///
  /// - Parameters:
  ///   - request: Request to send to RetryFailedEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func retryFailedEvent(
    _ request: Axelar_Evm_V1beta1_RetryFailedEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_RetryFailedEventRequest, Axelar_Evm_V1beta1_RetryFailedEventResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.retryFailedEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetryFailedEventInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Evm_V1beta1_MsgServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Evm_V1beta1_MsgServiceNIOClient")
internal final class Axelar_Evm_V1beta1_MsgServiceClient: Axelar_Evm_V1beta1_MsgServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.evm.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Evm_V1beta1_MsgServiceNIOClient: Axelar_Evm_V1beta1_MsgServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.evm.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the evm Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Evm_V1beta1_MsgServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func makeSetGatewayCall(
    _ request: Axelar_Evm_V1beta1_SetGatewayRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_SetGatewayRequest, Axelar_Evm_V1beta1_SetGatewayResponse>

  func makeConfirmGatewayTxCall(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>

  func makeConfirmGatewayTxsCall(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>

  func makeLinkCall(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>

  func makeConfirmTokenCall(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>

  func makeConfirmDepositCall(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>

  func makeConfirmTransferKeyCall(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>

  func makeCreateDeployTokenCall(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>

  func makeCreateBurnTokensCall(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>

  func makeCreatePendingTransfersCall(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>

  func makeCreateTransferOperatorshipCall(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>

  func makeSignCommandsCall(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>

  func makeAddChainCall(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>

  func makeRetryFailedEventCall(
    _ request: Axelar_Evm_V1beta1_RetryFailedEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_RetryFailedEventRequest, Axelar_Evm_V1beta1_RetryFailedEventResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Evm_V1beta1_MsgServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Evm_V1beta1_MsgServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSetGatewayCall(
    _ request: Axelar_Evm_V1beta1_SetGatewayRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_SetGatewayRequest, Axelar_Evm_V1beta1_SetGatewayResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.setGateway.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetGatewayInterceptors() ?? []
    )
  }

  internal func makeConfirmGatewayTxCall(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayTxInterceptors() ?? []
    )
  }

  internal func makeConfirmGatewayTxsCall(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayTxsInterceptors() ?? []
    )
  }

  internal func makeLinkCall(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.link.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  internal func makeConfirmTokenCall(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? []
    )
  }

  internal func makeConfirmDepositCall(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  internal func makeConfirmTransferKeyCall(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmTransferKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? []
    )
  }

  internal func makeCreateDeployTokenCall(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createDeployToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? []
    )
  }

  internal func makeCreateBurnTokensCall(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createBurnTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? []
    )
  }

  internal func makeCreatePendingTransfersCall(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createPendingTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? []
    )
  }

  internal func makeCreateTransferOperatorshipCall(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createTransferOperatorship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? []
    )
  }

  internal func makeSignCommandsCall(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.signCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? []
    )
  }

  internal func makeAddChainCall(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.addChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChainInterceptors() ?? []
    )
  }

  internal func makeRetryFailedEventCall(
    _ request: Axelar_Evm_V1beta1_RetryFailedEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_RetryFailedEventRequest, Axelar_Evm_V1beta1_RetryFailedEventResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.retryFailedEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetryFailedEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Evm_V1beta1_MsgServiceAsyncClientProtocol {
  internal func setGateway(
    _ request: Axelar_Evm_V1beta1_SetGatewayRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_SetGatewayResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.setGateway.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetGatewayInterceptors() ?? []
    )
  }

  internal func confirmGatewayTx(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ConfirmGatewayTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayTxInterceptors() ?? []
    )
  }

  internal func confirmGatewayTxs(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayTxsInterceptors() ?? []
    )
  }

  internal func link(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_LinkResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.link.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  internal func confirmToken(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ConfirmTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? []
    )
  }

  internal func confirmDeposit(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ConfirmDepositResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  internal func confirmTransferKey(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ConfirmTransferKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmTransferKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? []
    )
  }

  internal func createDeployToken(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_CreateDeployTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createDeployToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? []
    )
  }

  internal func createBurnTokens(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_CreateBurnTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createBurnTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? []
    )
  }

  internal func createPendingTransfers(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_CreatePendingTransfersResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createPendingTransfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? []
    )
  }

  internal func createTransferOperatorship(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createTransferOperatorship.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? []
    )
  }

  internal func signCommands(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_SignCommandsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.signCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? []
    )
  }

  internal func addChain(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_AddChainResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.addChain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChainInterceptors() ?? []
    )
  }

  internal func retryFailedEvent(
    _ request: Axelar_Evm_V1beta1_RetryFailedEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_RetryFailedEventResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.retryFailedEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetryFailedEventInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Evm_V1beta1_MsgServiceAsyncClient: Axelar_Evm_V1beta1_MsgServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'setGateway'.
  func makeSetGatewayInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_SetGatewayRequest, Axelar_Evm_V1beta1_SetGatewayResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmGatewayTx'.
  func makeConfirmGatewayTxInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmGatewayTxs'.
  func makeConfirmGatewayTxsInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'link'.
  func makeLinkInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmToken'.
  func makeConfirmTokenInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmDeposit'.
  func makeConfirmDepositInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmTransferKey'.
  func makeConfirmTransferKeyInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'createDeployToken'.
  func makeCreateDeployTokenInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'createBurnTokens'.
  func makeCreateBurnTokensInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'createPendingTransfers'.
  func makeCreatePendingTransfersInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>]

  /// - Returns: Interceptors to use when invoking 'createTransferOperatorship'.
  func makeCreateTransferOperatorshipInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>]

  /// - Returns: Interceptors to use when invoking 'signCommands'.
  func makeSignCommandsInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>]

  /// - Returns: Interceptors to use when invoking 'addChain'.
  func makeAddChainInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>]

  /// - Returns: Interceptors to use when invoking 'retryFailedEvent'.
  func makeRetryFailedEventInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_RetryFailedEventRequest, Axelar_Evm_V1beta1_RetryFailedEventResponse>]
}

internal enum Axelar_Evm_V1beta1_MsgServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.evm.v1beta1.MsgService",
    methods: [
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.setGateway,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTx,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmGatewayTxs,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.link,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmToken,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmDeposit,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.confirmTransferKey,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createDeployToken,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createBurnTokens,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createPendingTransfers,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.createTransferOperatorship,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.signCommands,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.addChain,
      Axelar_Evm_V1beta1_MsgServiceClientMetadata.Methods.retryFailedEvent,
    ]
  )

  internal enum Methods {
    internal static let setGateway = GRPCMethodDescriptor(
      name: "SetGateway",
      path: "/axelar.evm.v1beta1.MsgService/SetGateway",
      type: GRPCCallType.unary
    )

    internal static let confirmGatewayTx = GRPCMethodDescriptor(
      name: "ConfirmGatewayTx",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmGatewayTx",
      type: GRPCCallType.unary
    )

    internal static let confirmGatewayTxs = GRPCMethodDescriptor(
      name: "ConfirmGatewayTxs",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmGatewayTxs",
      type: GRPCCallType.unary
    )

    internal static let link = GRPCMethodDescriptor(
      name: "Link",
      path: "/axelar.evm.v1beta1.MsgService/Link",
      type: GRPCCallType.unary
    )

    internal static let confirmToken = GRPCMethodDescriptor(
      name: "ConfirmToken",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmToken",
      type: GRPCCallType.unary
    )

    internal static let confirmDeposit = GRPCMethodDescriptor(
      name: "ConfirmDeposit",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmDeposit",
      type: GRPCCallType.unary
    )

    internal static let confirmTransferKey = GRPCMethodDescriptor(
      name: "ConfirmTransferKey",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmTransferKey",
      type: GRPCCallType.unary
    )

    internal static let createDeployToken = GRPCMethodDescriptor(
      name: "CreateDeployToken",
      path: "/axelar.evm.v1beta1.MsgService/CreateDeployToken",
      type: GRPCCallType.unary
    )

    internal static let createBurnTokens = GRPCMethodDescriptor(
      name: "CreateBurnTokens",
      path: "/axelar.evm.v1beta1.MsgService/CreateBurnTokens",
      type: GRPCCallType.unary
    )

    internal static let createPendingTransfers = GRPCMethodDescriptor(
      name: "CreatePendingTransfers",
      path: "/axelar.evm.v1beta1.MsgService/CreatePendingTransfers",
      type: GRPCCallType.unary
    )

    internal static let createTransferOperatorship = GRPCMethodDescriptor(
      name: "CreateTransferOperatorship",
      path: "/axelar.evm.v1beta1.MsgService/CreateTransferOperatorship",
      type: GRPCCallType.unary
    )

    internal static let signCommands = GRPCMethodDescriptor(
      name: "SignCommands",
      path: "/axelar.evm.v1beta1.MsgService/SignCommands",
      type: GRPCCallType.unary
    )

    internal static let addChain = GRPCMethodDescriptor(
      name: "AddChain",
      path: "/axelar.evm.v1beta1.MsgService/AddChain",
      type: GRPCCallType.unary
    )

    internal static let retryFailedEvent = GRPCMethodDescriptor(
      name: "RetryFailedEvent",
      path: "/axelar.evm.v1beta1.MsgService/RetryFailedEvent",
      type: GRPCCallType.unary
    )
  }
}

/// QueryService defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Evm_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Evm_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func batchedCommands(
    _ request: Axelar_Evm_V1beta1_BatchedCommandsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_BatchedCommandsRequest, Axelar_Evm_V1beta1_BatchedCommandsResponse>

  func burnerInfo(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>

  func confirmationHeight(
    _ request: Axelar_Evm_V1beta1_ConfirmationHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmationHeightRequest, Axelar_Evm_V1beta1_ConfirmationHeightResponse>

  func depositState(
    _ request: Axelar_Evm_V1beta1_DepositStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_DepositStateRequest, Axelar_Evm_V1beta1_DepositStateResponse>

  func pendingCommands(
    _ request: Axelar_Evm_V1beta1_PendingCommandsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_PendingCommandsRequest, Axelar_Evm_V1beta1_PendingCommandsResponse>

  func chains(
    _ request: Axelar_Evm_V1beta1_ChainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ChainsRequest, Axelar_Evm_V1beta1_ChainsResponse>

  func command(
    _ request: Axelar_Evm_V1beta1_CommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CommandRequest, Axelar_Evm_V1beta1_CommandResponse>

  func keyAddress(
    _ request: Axelar_Evm_V1beta1_KeyAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_KeyAddressRequest, Axelar_Evm_V1beta1_KeyAddressResponse>

  func gatewayAddress(
    _ request: Axelar_Evm_V1beta1_GatewayAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_GatewayAddressRequest, Axelar_Evm_V1beta1_GatewayAddressResponse>

  func bytecode(
    _ request: Axelar_Evm_V1beta1_BytecodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_BytecodeRequest, Axelar_Evm_V1beta1_BytecodeResponse>

  func event(
    _ request: Axelar_Evm_V1beta1_EventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_EventRequest, Axelar_Evm_V1beta1_EventResponse>

  func eRC20Tokens(
    _ request: Axelar_Evm_V1beta1_ERC20TokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ERC20TokensRequest, Axelar_Evm_V1beta1_ERC20TokensResponse>

  func tokenInfo(
    _ request: Axelar_Evm_V1beta1_TokenInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_TokenInfoRequest, Axelar_Evm_V1beta1_TokenInfoResponse>
}

extension Axelar_Evm_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.evm.v1beta1.QueryService"
  }

  /// BatchedCommands queries the batched commands for a specified chain and
  /// BatchedCommandsID if no BatchedCommandsID is specified, then it returns the
  /// latest batched commands
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchedCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchedCommands(
    _ request: Axelar_Evm_V1beta1_BatchedCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_BatchedCommandsRequest, Axelar_Evm_V1beta1_BatchedCommandsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.batchedCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchedCommandsInterceptors() ?? []
    )
  }

  /// BurnerInfo queries the burner info for the specified address
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnerInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnerInfo(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.burnerInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? []
    )
  }

  /// ConfirmationHeight queries the confirmation height for the specified chain
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmationHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmationHeight(
    _ request: Axelar_Evm_V1beta1_ConfirmationHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmationHeightRequest, Axelar_Evm_V1beta1_ConfirmationHeightResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.confirmationHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmationHeightInterceptors() ?? []
    )
  }

  /// DepositState queries the state of the specified deposit
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositState(
    _ request: Axelar_Evm_V1beta1_DepositStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_DepositStateRequest, Axelar_Evm_V1beta1_DepositStateResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.depositState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositStateInterceptors() ?? []
    )
  }

  /// PendingCommands queries the pending commands for the specified chain
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pendingCommands(
    _ request: Axelar_Evm_V1beta1_PendingCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_PendingCommandsRequest, Axelar_Evm_V1beta1_PendingCommandsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.pendingCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingCommandsInterceptors() ?? []
    )
  }

  /// Chains queries the available evm chains
  ///
  /// - Parameters:
  ///   - request: Request to send to Chains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chains(
    _ request: Axelar_Evm_V1beta1_ChainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ChainsRequest, Axelar_Evm_V1beta1_ChainsResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.chains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInterceptors() ?? []
    )
  }

  /// Command queries the command of a chain provided the command id
  ///
  /// - Parameters:
  ///   - request: Request to send to Command.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func command(
    _ request: Axelar_Evm_V1beta1_CommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CommandRequest, Axelar_Evm_V1beta1_CommandResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.command.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommandInterceptors() ?? []
    )
  }

  /// KeyAddress queries the address of key of a chain
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func keyAddress(
    _ request: Axelar_Evm_V1beta1_KeyAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_KeyAddressRequest, Axelar_Evm_V1beta1_KeyAddressResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.keyAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyAddressInterceptors() ?? []
    )
  }

  /// GatewayAddress queries the address of axelar gateway at the specified
  /// chain
  ///
  /// - Parameters:
  ///   - request: Request to send to GatewayAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gatewayAddress(
    _ request: Axelar_Evm_V1beta1_GatewayAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_GatewayAddressRequest, Axelar_Evm_V1beta1_GatewayAddressResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.gatewayAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGatewayAddressInterceptors() ?? []
    )
  }

  /// Bytecode queries the bytecode of a specified gateway at the specified
  /// chain
  ///
  /// - Parameters:
  ///   - request: Request to send to Bytecode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bytecode(
    _ request: Axelar_Evm_V1beta1_BytecodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_BytecodeRequest, Axelar_Evm_V1beta1_BytecodeResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.bytecode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBytecodeInterceptors() ?? []
    )
  }

  /// Event queries an event at the specified chain
  ///
  /// - Parameters:
  ///   - request: Request to send to Event.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func event(
    _ request: Axelar_Evm_V1beta1_EventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_EventRequest, Axelar_Evm_V1beta1_EventResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  /// ERC20Tokens queries the ERC20 tokens registered for a chain
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20Tokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20Tokens(
    _ request: Axelar_Evm_V1beta1_ERC20TokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ERC20TokensRequest, Axelar_Evm_V1beta1_ERC20TokensResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.eRC20Tokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20TokensInterceptors() ?? []
    )
  }

  /// TokenInfo queries the token info for a registered ERC20 Token
  ///
  /// - Parameters:
  ///   - request: Request to send to TokenInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tokenInfo(
    _ request: Axelar_Evm_V1beta1_TokenInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_TokenInfoRequest, Axelar_Evm_V1beta1_TokenInfoResponse> {
    return self.makeUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.tokenInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenInfoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Axelar_Evm_V1beta1_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Axelar_Evm_V1beta1_QueryServiceNIOClient")
internal final class Axelar_Evm_V1beta1_QueryServiceClient: Axelar_Evm_V1beta1_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the axelar.evm.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Axelar_Evm_V1beta1_QueryServiceNIOClient: Axelar_Evm_V1beta1_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.evm.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryService defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Evm_V1beta1_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeBatchedCommandsCall(
    _ request: Axelar_Evm_V1beta1_BatchedCommandsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_BatchedCommandsRequest, Axelar_Evm_V1beta1_BatchedCommandsResponse>

  func makeBurnerInfoCall(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>

  func makeConfirmationHeightCall(
    _ request: Axelar_Evm_V1beta1_ConfirmationHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmationHeightRequest, Axelar_Evm_V1beta1_ConfirmationHeightResponse>

  func makeDepositStateCall(
    _ request: Axelar_Evm_V1beta1_DepositStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_DepositStateRequest, Axelar_Evm_V1beta1_DepositStateResponse>

  func makePendingCommandsCall(
    _ request: Axelar_Evm_V1beta1_PendingCommandsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_PendingCommandsRequest, Axelar_Evm_V1beta1_PendingCommandsResponse>

  func makeChainsCall(
    _ request: Axelar_Evm_V1beta1_ChainsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ChainsRequest, Axelar_Evm_V1beta1_ChainsResponse>

  func makeCommandCall(
    _ request: Axelar_Evm_V1beta1_CommandRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CommandRequest, Axelar_Evm_V1beta1_CommandResponse>

  func makeKeyAddressCall(
    _ request: Axelar_Evm_V1beta1_KeyAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_KeyAddressRequest, Axelar_Evm_V1beta1_KeyAddressResponse>

  func makeGatewayAddressCall(
    _ request: Axelar_Evm_V1beta1_GatewayAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_GatewayAddressRequest, Axelar_Evm_V1beta1_GatewayAddressResponse>

  func makeBytecodeCall(
    _ request: Axelar_Evm_V1beta1_BytecodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_BytecodeRequest, Axelar_Evm_V1beta1_BytecodeResponse>

  func makeEventCall(
    _ request: Axelar_Evm_V1beta1_EventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_EventRequest, Axelar_Evm_V1beta1_EventResponse>

  func makeErc20TokensCall(
    _ request: Axelar_Evm_V1beta1_ERC20TokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ERC20TokensRequest, Axelar_Evm_V1beta1_ERC20TokensResponse>

  func makeTokenInfoCall(
    _ request: Axelar_Evm_V1beta1_TokenInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_TokenInfoRequest, Axelar_Evm_V1beta1_TokenInfoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Evm_V1beta1_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Evm_V1beta1_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeBatchedCommandsCall(
    _ request: Axelar_Evm_V1beta1_BatchedCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_BatchedCommandsRequest, Axelar_Evm_V1beta1_BatchedCommandsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.batchedCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchedCommandsInterceptors() ?? []
    )
  }

  internal func makeBurnerInfoCall(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.burnerInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? []
    )
  }

  internal func makeConfirmationHeightCall(
    _ request: Axelar_Evm_V1beta1_ConfirmationHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ConfirmationHeightRequest, Axelar_Evm_V1beta1_ConfirmationHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.confirmationHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmationHeightInterceptors() ?? []
    )
  }

  internal func makeDepositStateCall(
    _ request: Axelar_Evm_V1beta1_DepositStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_DepositStateRequest, Axelar_Evm_V1beta1_DepositStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.depositState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositStateInterceptors() ?? []
    )
  }

  internal func makePendingCommandsCall(
    _ request: Axelar_Evm_V1beta1_PendingCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_PendingCommandsRequest, Axelar_Evm_V1beta1_PendingCommandsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.pendingCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingCommandsInterceptors() ?? []
    )
  }

  internal func makeChainsCall(
    _ request: Axelar_Evm_V1beta1_ChainsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ChainsRequest, Axelar_Evm_V1beta1_ChainsResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.chains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInterceptors() ?? []
    )
  }

  internal func makeCommandCall(
    _ request: Axelar_Evm_V1beta1_CommandRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_CommandRequest, Axelar_Evm_V1beta1_CommandResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.command.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommandInterceptors() ?? []
    )
  }

  internal func makeKeyAddressCall(
    _ request: Axelar_Evm_V1beta1_KeyAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_KeyAddressRequest, Axelar_Evm_V1beta1_KeyAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.keyAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyAddressInterceptors() ?? []
    )
  }

  internal func makeGatewayAddressCall(
    _ request: Axelar_Evm_V1beta1_GatewayAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_GatewayAddressRequest, Axelar_Evm_V1beta1_GatewayAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.gatewayAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGatewayAddressInterceptors() ?? []
    )
  }

  internal func makeBytecodeCall(
    _ request: Axelar_Evm_V1beta1_BytecodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_BytecodeRequest, Axelar_Evm_V1beta1_BytecodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.bytecode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBytecodeInterceptors() ?? []
    )
  }

  internal func makeEventCall(
    _ request: Axelar_Evm_V1beta1_EventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_EventRequest, Axelar_Evm_V1beta1_EventResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  internal func makeErc20TokensCall(
    _ request: Axelar_Evm_V1beta1_ERC20TokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_ERC20TokensRequest, Axelar_Evm_V1beta1_ERC20TokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.eRC20Tokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20TokensInterceptors() ?? []
    )
  }

  internal func makeTokenInfoCall(
    _ request: Axelar_Evm_V1beta1_TokenInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Axelar_Evm_V1beta1_TokenInfoRequest, Axelar_Evm_V1beta1_TokenInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.tokenInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Evm_V1beta1_QueryServiceAsyncClientProtocol {
  internal func batchedCommands(
    _ request: Axelar_Evm_V1beta1_BatchedCommandsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_BatchedCommandsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.batchedCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchedCommandsInterceptors() ?? []
    )
  }

  internal func burnerInfo(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_BurnerInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.burnerInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? []
    )
  }

  internal func confirmationHeight(
    _ request: Axelar_Evm_V1beta1_ConfirmationHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ConfirmationHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.confirmationHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmationHeightInterceptors() ?? []
    )
  }

  internal func depositState(
    _ request: Axelar_Evm_V1beta1_DepositStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_DepositStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.depositState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositStateInterceptors() ?? []
    )
  }

  internal func pendingCommands(
    _ request: Axelar_Evm_V1beta1_PendingCommandsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_PendingCommandsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.pendingCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePendingCommandsInterceptors() ?? []
    )
  }

  internal func chains(
    _ request: Axelar_Evm_V1beta1_ChainsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ChainsResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.chains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainsInterceptors() ?? []
    )
  }

  internal func command(
    _ request: Axelar_Evm_V1beta1_CommandRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_CommandResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.command.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommandInterceptors() ?? []
    )
  }

  internal func keyAddress(
    _ request: Axelar_Evm_V1beta1_KeyAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_KeyAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.keyAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyAddressInterceptors() ?? []
    )
  }

  internal func gatewayAddress(
    _ request: Axelar_Evm_V1beta1_GatewayAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_GatewayAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.gatewayAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGatewayAddressInterceptors() ?? []
    )
  }

  internal func bytecode(
    _ request: Axelar_Evm_V1beta1_BytecodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_BytecodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.bytecode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBytecodeInterceptors() ?? []
    )
  }

  internal func event(
    _ request: Axelar_Evm_V1beta1_EventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_EventResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.event.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventInterceptors() ?? []
    )
  }

  internal func eRC20Tokens(
    _ request: Axelar_Evm_V1beta1_ERC20TokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_ERC20TokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.eRC20Tokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20TokensInterceptors() ?? []
    )
  }

  internal func tokenInfo(
    _ request: Axelar_Evm_V1beta1_TokenInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Axelar_Evm_V1beta1_TokenInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.tokenInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Axelar_Evm_V1beta1_QueryServiceAsyncClient: Axelar_Evm_V1beta1_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'batchedCommands'.
  func makeBatchedCommandsInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_BatchedCommandsRequest, Axelar_Evm_V1beta1_BatchedCommandsResponse>]

  /// - Returns: Interceptors to use when invoking 'burnerInfo'.
  func makeBurnerInfoInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmationHeight'.
  func makeConfirmationHeightInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmationHeightRequest, Axelar_Evm_V1beta1_ConfirmationHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'depositState'.
  func makeDepositStateInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_DepositStateRequest, Axelar_Evm_V1beta1_DepositStateResponse>]

  /// - Returns: Interceptors to use when invoking 'pendingCommands'.
  func makePendingCommandsInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_PendingCommandsRequest, Axelar_Evm_V1beta1_PendingCommandsResponse>]

  /// - Returns: Interceptors to use when invoking 'chains'.
  func makeChainsInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ChainsRequest, Axelar_Evm_V1beta1_ChainsResponse>]

  /// - Returns: Interceptors to use when invoking 'command'.
  func makeCommandInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CommandRequest, Axelar_Evm_V1beta1_CommandResponse>]

  /// - Returns: Interceptors to use when invoking 'keyAddress'.
  func makeKeyAddressInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_KeyAddressRequest, Axelar_Evm_V1beta1_KeyAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'gatewayAddress'.
  func makeGatewayAddressInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_GatewayAddressRequest, Axelar_Evm_V1beta1_GatewayAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'bytecode'.
  func makeBytecodeInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_BytecodeRequest, Axelar_Evm_V1beta1_BytecodeResponse>]

  /// - Returns: Interceptors to use when invoking 'event'.
  func makeEventInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_EventRequest, Axelar_Evm_V1beta1_EventResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20Tokens'.
  func makeERC20TokensInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ERC20TokensRequest, Axelar_Evm_V1beta1_ERC20TokensResponse>]

  /// - Returns: Interceptors to use when invoking 'tokenInfo'.
  func makeTokenInfoInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_TokenInfoRequest, Axelar_Evm_V1beta1_TokenInfoResponse>]
}

internal enum Axelar_Evm_V1beta1_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.evm.v1beta1.QueryService",
    methods: [
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.batchedCommands,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.burnerInfo,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.confirmationHeight,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.depositState,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.pendingCommands,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.chains,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.command,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.keyAddress,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.gatewayAddress,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.bytecode,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.event,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.eRC20Tokens,
      Axelar_Evm_V1beta1_QueryServiceClientMetadata.Methods.tokenInfo,
    ]
  )

  internal enum Methods {
    internal static let batchedCommands = GRPCMethodDescriptor(
      name: "BatchedCommands",
      path: "/axelar.evm.v1beta1.QueryService/BatchedCommands",
      type: GRPCCallType.unary
    )

    internal static let burnerInfo = GRPCMethodDescriptor(
      name: "BurnerInfo",
      path: "/axelar.evm.v1beta1.QueryService/BurnerInfo",
      type: GRPCCallType.unary
    )

    internal static let confirmationHeight = GRPCMethodDescriptor(
      name: "ConfirmationHeight",
      path: "/axelar.evm.v1beta1.QueryService/ConfirmationHeight",
      type: GRPCCallType.unary
    )

    internal static let depositState = GRPCMethodDescriptor(
      name: "DepositState",
      path: "/axelar.evm.v1beta1.QueryService/DepositState",
      type: GRPCCallType.unary
    )

    internal static let pendingCommands = GRPCMethodDescriptor(
      name: "PendingCommands",
      path: "/axelar.evm.v1beta1.QueryService/PendingCommands",
      type: GRPCCallType.unary
    )

    internal static let chains = GRPCMethodDescriptor(
      name: "Chains",
      path: "/axelar.evm.v1beta1.QueryService/Chains",
      type: GRPCCallType.unary
    )

    internal static let command = GRPCMethodDescriptor(
      name: "Command",
      path: "/axelar.evm.v1beta1.QueryService/Command",
      type: GRPCCallType.unary
    )

    internal static let keyAddress = GRPCMethodDescriptor(
      name: "KeyAddress",
      path: "/axelar.evm.v1beta1.QueryService/KeyAddress",
      type: GRPCCallType.unary
    )

    internal static let gatewayAddress = GRPCMethodDescriptor(
      name: "GatewayAddress",
      path: "/axelar.evm.v1beta1.QueryService/GatewayAddress",
      type: GRPCCallType.unary
    )

    internal static let bytecode = GRPCMethodDescriptor(
      name: "Bytecode",
      path: "/axelar.evm.v1beta1.QueryService/Bytecode",
      type: GRPCCallType.unary
    )

    internal static let event = GRPCMethodDescriptor(
      name: "Event",
      path: "/axelar.evm.v1beta1.QueryService/Event",
      type: GRPCCallType.unary
    )

    internal static let eRC20Tokens = GRPCMethodDescriptor(
      name: "ERC20Tokens",
      path: "/axelar.evm.v1beta1.QueryService/ERC20Tokens",
      type: GRPCCallType.unary
    )

    internal static let tokenInfo = GRPCMethodDescriptor(
      name: "TokenInfo",
      path: "/axelar.evm.v1beta1.QueryService/TokenInfo",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the evm Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Evm_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Evm_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func setGateway(request: Axelar_Evm_V1beta1_SetGatewayRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_SetGatewayResponse>

  /// Deprecated: use ConfirmGatewayTxs instead
  func confirmGatewayTx(request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>

  func confirmGatewayTxs(request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>

  func link(request: Axelar_Evm_V1beta1_LinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_LinkResponse>

  func confirmToken(request: Axelar_Evm_V1beta1_ConfirmTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmTokenResponse>

  func confirmDeposit(request: Axelar_Evm_V1beta1_ConfirmDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmDepositResponse>

  func confirmTransferKey(request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>

  func createDeployToken(request: Axelar_Evm_V1beta1_CreateDeployTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateDeployTokenResponse>

  func createBurnTokens(request: Axelar_Evm_V1beta1_CreateBurnTokensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateBurnTokensResponse>

  func createPendingTransfers(request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreatePendingTransfersResponse>

  func createTransferOperatorship(request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>

  func signCommands(request: Axelar_Evm_V1beta1_SignCommandsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_SignCommandsResponse>

  func addChain(request: Axelar_Evm_V1beta1_AddChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_AddChainResponse>

  func retryFailedEvent(request: Axelar_Evm_V1beta1_RetryFailedEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_RetryFailedEventResponse>
}

extension Axelar_Evm_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Evm_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetGateway":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_SetGatewayRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_SetGatewayResponse>(),
        interceptors: self.interceptors?.makeSetGatewayInterceptors() ?? [],
        userFunction: self.setGateway(request:context:)
      )

    case "ConfirmGatewayTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>(),
        interceptors: self.interceptors?.makeConfirmGatewayTxInterceptors() ?? [],
        userFunction: self.confirmGatewayTx(request:context:)
      )

    case "ConfirmGatewayTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>(),
        interceptors: self.interceptors?.makeConfirmGatewayTxsInterceptors() ?? [],
        userFunction: self.confirmGatewayTxs(request:context:)
      )

    case "Link":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_LinkRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_LinkResponse>(),
        interceptors: self.interceptors?.makeLinkInterceptors() ?? [],
        userFunction: self.link(request:context:)
      )

    case "ConfirmToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmTokenResponse>(),
        interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? [],
        userFunction: self.confirmToken(request:context:)
      )

    case "ConfirmDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmDepositRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmDepositResponse>(),
        interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? [],
        userFunction: self.confirmDeposit(request:context:)
      )

    case "ConfirmTransferKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>(),
        interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? [],
        userFunction: self.confirmTransferKey(request:context:)
      )

    case "CreateDeployToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateDeployTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateDeployTokenResponse>(),
        interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? [],
        userFunction: self.createDeployToken(request:context:)
      )

    case "CreateBurnTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateBurnTokensRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateBurnTokensResponse>(),
        interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? [],
        userFunction: self.createBurnTokens(request:context:)
      )

    case "CreatePendingTransfers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreatePendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreatePendingTransfersResponse>(),
        interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? [],
        userFunction: self.createPendingTransfers(request:context:)
      )

    case "CreateTransferOperatorship":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>(),
        interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? [],
        userFunction: self.createTransferOperatorship(request:context:)
      )

    case "SignCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_SignCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_SignCommandsResponse>(),
        interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? [],
        userFunction: self.signCommands(request:context:)
      )

    case "AddChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_AddChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_AddChainResponse>(),
        interceptors: self.interceptors?.makeAddChainInterceptors() ?? [],
        userFunction: self.addChain(request:context:)
      )

    case "RetryFailedEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_RetryFailedEventRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_RetryFailedEventResponse>(),
        interceptors: self.interceptors?.makeRetryFailedEventInterceptors() ?? [],
        userFunction: self.retryFailedEvent(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the evm Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Evm_V1beta1_MsgServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Evm_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func setGateway(
    request: Axelar_Evm_V1beta1_SetGatewayRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_SetGatewayResponse

  /// Deprecated: use ConfirmGatewayTxs instead
  @Sendable func confirmGatewayTx(
    request: Axelar_Evm_V1beta1_ConfirmGatewayTxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ConfirmGatewayTxResponse

  @Sendable func confirmGatewayTxs(
    request: Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse

  @Sendable func link(
    request: Axelar_Evm_V1beta1_LinkRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_LinkResponse

  @Sendable func confirmToken(
    request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ConfirmTokenResponse

  @Sendable func confirmDeposit(
    request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ConfirmDepositResponse

  @Sendable func confirmTransferKey(
    request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ConfirmTransferKeyResponse

  @Sendable func createDeployToken(
    request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_CreateDeployTokenResponse

  @Sendable func createBurnTokens(
    request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_CreateBurnTokensResponse

  @Sendable func createPendingTransfers(
    request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_CreatePendingTransfersResponse

  @Sendable func createTransferOperatorship(
    request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse

  @Sendable func signCommands(
    request: Axelar_Evm_V1beta1_SignCommandsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_SignCommandsResponse

  @Sendable func addChain(
    request: Axelar_Evm_V1beta1_AddChainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_AddChainResponse

  @Sendable func retryFailedEvent(
    request: Axelar_Evm_V1beta1_RetryFailedEventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_RetryFailedEventResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Evm_V1beta1_MsgServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Evm_V1beta1_MsgServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Evm_V1beta1_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Evm_V1beta1_MsgServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetGateway":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_SetGatewayRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_SetGatewayResponse>(),
        interceptors: self.interceptors?.makeSetGatewayInterceptors() ?? [],
        wrapping: self.setGateway(request:context:)
      )

    case "ConfirmGatewayTx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>(),
        interceptors: self.interceptors?.makeConfirmGatewayTxInterceptors() ?? [],
        wrapping: self.confirmGatewayTx(request:context:)
      )

    case "ConfirmGatewayTxs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>(),
        interceptors: self.interceptors?.makeConfirmGatewayTxsInterceptors() ?? [],
        wrapping: self.confirmGatewayTxs(request:context:)
      )

    case "Link":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_LinkRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_LinkResponse>(),
        interceptors: self.interceptors?.makeLinkInterceptors() ?? [],
        wrapping: self.link(request:context:)
      )

    case "ConfirmToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmTokenResponse>(),
        interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? [],
        wrapping: self.confirmToken(request:context:)
      )

    case "ConfirmDeposit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmDepositRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmDepositResponse>(),
        interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? [],
        wrapping: self.confirmDeposit(request:context:)
      )

    case "ConfirmTransferKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>(),
        interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? [],
        wrapping: self.confirmTransferKey(request:context:)
      )

    case "CreateDeployToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateDeployTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateDeployTokenResponse>(),
        interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? [],
        wrapping: self.createDeployToken(request:context:)
      )

    case "CreateBurnTokens":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateBurnTokensRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateBurnTokensResponse>(),
        interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? [],
        wrapping: self.createBurnTokens(request:context:)
      )

    case "CreatePendingTransfers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreatePendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreatePendingTransfersResponse>(),
        interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? [],
        wrapping: self.createPendingTransfers(request:context:)
      )

    case "CreateTransferOperatorship":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>(),
        interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? [],
        wrapping: self.createTransferOperatorship(request:context:)
      )

    case "SignCommands":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_SignCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_SignCommandsResponse>(),
        interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? [],
        wrapping: self.signCommands(request:context:)
      )

    case "AddChain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_AddChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_AddChainResponse>(),
        interceptors: self.interceptors?.makeAddChainInterceptors() ?? [],
        wrapping: self.addChain(request:context:)
      )

    case "RetryFailedEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_RetryFailedEventRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_RetryFailedEventResponse>(),
        interceptors: self.interceptors?.makeRetryFailedEventInterceptors() ?? [],
        wrapping: self.retryFailedEvent(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Evm_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setGateway'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetGatewayInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_SetGatewayRequest, Axelar_Evm_V1beta1_SetGatewayResponse>]

  /// - Returns: Interceptors to use when handling 'confirmGatewayTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmGatewayTxInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmGatewayTxRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxResponse>]

  /// - Returns: Interceptors to use when handling 'confirmGatewayTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmGatewayTxsInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmGatewayTxsRequest, Axelar_Evm_V1beta1_ConfirmGatewayTxsResponse>]

  /// - Returns: Interceptors to use when handling 'link'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>]

  /// - Returns: Interceptors to use when handling 'confirmToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmTokenInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>]

  /// - Returns: Interceptors to use when handling 'confirmDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmDepositInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>]

  /// - Returns: Interceptors to use when handling 'confirmTransferKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmTransferKeyInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>]

  /// - Returns: Interceptors to use when handling 'createDeployToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDeployTokenInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>]

  /// - Returns: Interceptors to use when handling 'createBurnTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBurnTokensInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>]

  /// - Returns: Interceptors to use when handling 'createPendingTransfers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePendingTransfersInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>]

  /// - Returns: Interceptors to use when handling 'createTransferOperatorship'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTransferOperatorshipInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>]

  /// - Returns: Interceptors to use when handling 'signCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignCommandsInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>]

  /// - Returns: Interceptors to use when handling 'addChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddChainInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>]

  /// - Returns: Interceptors to use when handling 'retryFailedEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetryFailedEventInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_RetryFailedEventRequest, Axelar_Evm_V1beta1_RetryFailedEventResponse>]
}

internal enum Axelar_Evm_V1beta1_MsgServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "axelar.evm.v1beta1.MsgService",
    methods: [
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.setGateway,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.confirmGatewayTx,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.confirmGatewayTxs,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.link,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.confirmToken,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.confirmDeposit,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.confirmTransferKey,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.createDeployToken,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.createBurnTokens,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.createPendingTransfers,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.createTransferOperatorship,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.signCommands,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.addChain,
      Axelar_Evm_V1beta1_MsgServiceServerMetadata.Methods.retryFailedEvent,
    ]
  )

  internal enum Methods {
    internal static let setGateway = GRPCMethodDescriptor(
      name: "SetGateway",
      path: "/axelar.evm.v1beta1.MsgService/SetGateway",
      type: GRPCCallType.unary
    )

    internal static let confirmGatewayTx = GRPCMethodDescriptor(
      name: "ConfirmGatewayTx",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmGatewayTx",
      type: GRPCCallType.unary
    )

    internal static let confirmGatewayTxs = GRPCMethodDescriptor(
      name: "ConfirmGatewayTxs",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmGatewayTxs",
      type: GRPCCallType.unary
    )

    internal static let link = GRPCMethodDescriptor(
      name: "Link",
      path: "/axelar.evm.v1beta1.MsgService/Link",
      type: GRPCCallType.unary
    )

    internal static let confirmToken = GRPCMethodDescriptor(
      name: "ConfirmToken",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmToken",
      type: GRPCCallType.unary
    )

    internal static let confirmDeposit = GRPCMethodDescriptor(
      name: "ConfirmDeposit",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmDeposit",
      type: GRPCCallType.unary
    )

    internal static let confirmTransferKey = GRPCMethodDescriptor(
      name: "ConfirmTransferKey",
      path: "/axelar.evm.v1beta1.MsgService/ConfirmTransferKey",
      type: GRPCCallType.unary
    )

    internal static let createDeployToken = GRPCMethodDescriptor(
      name: "CreateDeployToken",
      path: "/axelar.evm.v1beta1.MsgService/CreateDeployToken",
      type: GRPCCallType.unary
    )

    internal static let createBurnTokens = GRPCMethodDescriptor(
      name: "CreateBurnTokens",
      path: "/axelar.evm.v1beta1.MsgService/CreateBurnTokens",
      type: GRPCCallType.unary
    )

    internal static let createPendingTransfers = GRPCMethodDescriptor(
      name: "CreatePendingTransfers",
      path: "/axelar.evm.v1beta1.MsgService/CreatePendingTransfers",
      type: GRPCCallType.unary
    )

    internal static let createTransferOperatorship = GRPCMethodDescriptor(
      name: "CreateTransferOperatorship",
      path: "/axelar.evm.v1beta1.MsgService/CreateTransferOperatorship",
      type: GRPCCallType.unary
    )

    internal static let signCommands = GRPCMethodDescriptor(
      name: "SignCommands",
      path: "/axelar.evm.v1beta1.MsgService/SignCommands",
      type: GRPCCallType.unary
    )

    internal static let addChain = GRPCMethodDescriptor(
      name: "AddChain",
      path: "/axelar.evm.v1beta1.MsgService/AddChain",
      type: GRPCCallType.unary
    )

    internal static let retryFailedEvent = GRPCMethodDescriptor(
      name: "RetryFailedEvent",
      path: "/axelar.evm.v1beta1.MsgService/RetryFailedEvent",
      type: GRPCCallType.unary
    )
  }
}
/// QueryService defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Evm_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Evm_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// BatchedCommands queries the batched commands for a specified chain and
  /// BatchedCommandsID if no BatchedCommandsID is specified, then it returns the
  /// latest batched commands
  func batchedCommands(request: Axelar_Evm_V1beta1_BatchedCommandsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_BatchedCommandsResponse>

  /// BurnerInfo queries the burner info for the specified address
  func burnerInfo(request: Axelar_Evm_V1beta1_BurnerInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_BurnerInfoResponse>

  /// ConfirmationHeight queries the confirmation height for the specified chain
  func confirmationHeight(request: Axelar_Evm_V1beta1_ConfirmationHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmationHeightResponse>

  /// DepositState queries the state of the specified deposit
  func depositState(request: Axelar_Evm_V1beta1_DepositStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_DepositStateResponse>

  /// PendingCommands queries the pending commands for the specified chain
  func pendingCommands(request: Axelar_Evm_V1beta1_PendingCommandsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_PendingCommandsResponse>

  /// Chains queries the available evm chains
  func chains(request: Axelar_Evm_V1beta1_ChainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ChainsResponse>

  /// Command queries the command of a chain provided the command id
  func command(request: Axelar_Evm_V1beta1_CommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CommandResponse>

  /// KeyAddress queries the address of key of a chain
  func keyAddress(request: Axelar_Evm_V1beta1_KeyAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_KeyAddressResponse>

  /// GatewayAddress queries the address of axelar gateway at the specified
  /// chain
  func gatewayAddress(request: Axelar_Evm_V1beta1_GatewayAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_GatewayAddressResponse>

  /// Bytecode queries the bytecode of a specified gateway at the specified
  /// chain
  func bytecode(request: Axelar_Evm_V1beta1_BytecodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_BytecodeResponse>

  /// Event queries an event at the specified chain
  func event(request: Axelar_Evm_V1beta1_EventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_EventResponse>

  /// ERC20Tokens queries the ERC20 tokens registered for a chain
  func eRC20Tokens(request: Axelar_Evm_V1beta1_ERC20TokensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ERC20TokensResponse>

  /// TokenInfo queries the token info for a registered ERC20 Token
  func tokenInfo(request: Axelar_Evm_V1beta1_TokenInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_TokenInfoResponse>
}

extension Axelar_Evm_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring {
    return Axelar_Evm_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "BatchedCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BatchedCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BatchedCommandsResponse>(),
        interceptors: self.interceptors?.makeBatchedCommandsInterceptors() ?? [],
        userFunction: self.batchedCommands(request:context:)
      )

    case "BurnerInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BurnerInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BurnerInfoResponse>(),
        interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? [],
        userFunction: self.burnerInfo(request:context:)
      )

    case "ConfirmationHeight":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmationHeightRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmationHeightResponse>(),
        interceptors: self.interceptors?.makeConfirmationHeightInterceptors() ?? [],
        userFunction: self.confirmationHeight(request:context:)
      )

    case "DepositState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_DepositStateRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_DepositStateResponse>(),
        interceptors: self.interceptors?.makeDepositStateInterceptors() ?? [],
        userFunction: self.depositState(request:context:)
      )

    case "PendingCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_PendingCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_PendingCommandsResponse>(),
        interceptors: self.interceptors?.makePendingCommandsInterceptors() ?? [],
        userFunction: self.pendingCommands(request:context:)
      )

    case "Chains":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ChainsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ChainsResponse>(),
        interceptors: self.interceptors?.makeChainsInterceptors() ?? [],
        userFunction: self.chains(request:context:)
      )

    case "Command":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CommandRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CommandResponse>(),
        interceptors: self.interceptors?.makeCommandInterceptors() ?? [],
        userFunction: self.command(request:context:)
      )

    case "KeyAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_KeyAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_KeyAddressResponse>(),
        interceptors: self.interceptors?.makeKeyAddressInterceptors() ?? [],
        userFunction: self.keyAddress(request:context:)
      )

    case "GatewayAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_GatewayAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_GatewayAddressResponse>(),
        interceptors: self.interceptors?.makeGatewayAddressInterceptors() ?? [],
        userFunction: self.gatewayAddress(request:context:)
      )

    case "Bytecode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BytecodeRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BytecodeResponse>(),
        interceptors: self.interceptors?.makeBytecodeInterceptors() ?? [],
        userFunction: self.bytecode(request:context:)
      )

    case "Event":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_EventRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_EventResponse>(),
        interceptors: self.interceptors?.makeEventInterceptors() ?? [],
        userFunction: self.event(request:context:)
      )

    case "ERC20Tokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ERC20TokensRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ERC20TokensResponse>(),
        interceptors: self.interceptors?.makeERC20TokensInterceptors() ?? [],
        userFunction: self.eRC20Tokens(request:context:)
      )

    case "TokenInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_TokenInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_TokenInfoResponse>(),
        interceptors: self.interceptors?.makeTokenInfoInterceptors() ?? [],
        userFunction: self.tokenInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryService defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Axelar_Evm_V1beta1_QueryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Axelar_Evm_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// BatchedCommands queries the batched commands for a specified chain and
  /// BatchedCommandsID if no BatchedCommandsID is specified, then it returns the
  /// latest batched commands
  @Sendable func batchedCommands(
    request: Axelar_Evm_V1beta1_BatchedCommandsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_BatchedCommandsResponse

  /// BurnerInfo queries the burner info for the specified address
  @Sendable func burnerInfo(
    request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_BurnerInfoResponse

  /// ConfirmationHeight queries the confirmation height for the specified chain
  @Sendable func confirmationHeight(
    request: Axelar_Evm_V1beta1_ConfirmationHeightRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ConfirmationHeightResponse

  /// DepositState queries the state of the specified deposit
  @Sendable func depositState(
    request: Axelar_Evm_V1beta1_DepositStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_DepositStateResponse

  /// PendingCommands queries the pending commands for the specified chain
  @Sendable func pendingCommands(
    request: Axelar_Evm_V1beta1_PendingCommandsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_PendingCommandsResponse

  /// Chains queries the available evm chains
  @Sendable func chains(
    request: Axelar_Evm_V1beta1_ChainsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ChainsResponse

  /// Command queries the command of a chain provided the command id
  @Sendable func command(
    request: Axelar_Evm_V1beta1_CommandRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_CommandResponse

  /// KeyAddress queries the address of key of a chain
  @Sendable func keyAddress(
    request: Axelar_Evm_V1beta1_KeyAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_KeyAddressResponse

  /// GatewayAddress queries the address of axelar gateway at the specified
  /// chain
  @Sendable func gatewayAddress(
    request: Axelar_Evm_V1beta1_GatewayAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_GatewayAddressResponse

  /// Bytecode queries the bytecode of a specified gateway at the specified
  /// chain
  @Sendable func bytecode(
    request: Axelar_Evm_V1beta1_BytecodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_BytecodeResponse

  /// Event queries an event at the specified chain
  @Sendable func event(
    request: Axelar_Evm_V1beta1_EventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_EventResponse

  /// ERC20Tokens queries the ERC20 tokens registered for a chain
  @Sendable func eRC20Tokens(
    request: Axelar_Evm_V1beta1_ERC20TokensRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_ERC20TokensResponse

  /// TokenInfo queries the token info for a registered ERC20 Token
  @Sendable func tokenInfo(
    request: Axelar_Evm_V1beta1_TokenInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Axelar_Evm_V1beta1_TokenInfoResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Axelar_Evm_V1beta1_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Axelar_Evm_V1beta1_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Axelar_Evm_V1beta1_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Axelar_Evm_V1beta1_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "BatchedCommands":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BatchedCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BatchedCommandsResponse>(),
        interceptors: self.interceptors?.makeBatchedCommandsInterceptors() ?? [],
        wrapping: self.batchedCommands(request:context:)
      )

    case "BurnerInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BurnerInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BurnerInfoResponse>(),
        interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? [],
        wrapping: self.burnerInfo(request:context:)
      )

    case "ConfirmationHeight":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmationHeightRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmationHeightResponse>(),
        interceptors: self.interceptors?.makeConfirmationHeightInterceptors() ?? [],
        wrapping: self.confirmationHeight(request:context:)
      )

    case "DepositState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_DepositStateRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_DepositStateResponse>(),
        interceptors: self.interceptors?.makeDepositStateInterceptors() ?? [],
        wrapping: self.depositState(request:context:)
      )

    case "PendingCommands":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_PendingCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_PendingCommandsResponse>(),
        interceptors: self.interceptors?.makePendingCommandsInterceptors() ?? [],
        wrapping: self.pendingCommands(request:context:)
      )

    case "Chains":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ChainsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ChainsResponse>(),
        interceptors: self.interceptors?.makeChainsInterceptors() ?? [],
        wrapping: self.chains(request:context:)
      )

    case "Command":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CommandRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CommandResponse>(),
        interceptors: self.interceptors?.makeCommandInterceptors() ?? [],
        wrapping: self.command(request:context:)
      )

    case "KeyAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_KeyAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_KeyAddressResponse>(),
        interceptors: self.interceptors?.makeKeyAddressInterceptors() ?? [],
        wrapping: self.keyAddress(request:context:)
      )

    case "GatewayAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_GatewayAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_GatewayAddressResponse>(),
        interceptors: self.interceptors?.makeGatewayAddressInterceptors() ?? [],
        wrapping: self.gatewayAddress(request:context:)
      )

    case "Bytecode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BytecodeRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BytecodeResponse>(),
        interceptors: self.interceptors?.makeBytecodeInterceptors() ?? [],
        wrapping: self.bytecode(request:context:)
      )

    case "Event":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_EventRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_EventResponse>(),
        interceptors: self.interceptors?.makeEventInterceptors() ?? [],
        wrapping: self.event(request:context:)
      )

    case "ERC20Tokens":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ERC20TokensRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ERC20TokensResponse>(),
        interceptors: self.interceptors?.makeERC20TokensInterceptors() ?? [],
        wrapping: self.eRC20Tokens(request:context:)
      )

    case "TokenInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_TokenInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_TokenInfoResponse>(),
        interceptors: self.interceptors?.makeTokenInfoInterceptors() ?? [],
        wrapping: self.tokenInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Evm_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'batchedCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchedCommandsInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_BatchedCommandsRequest, Axelar_Evm_V1beta1_BatchedCommandsResponse>]

  /// - Returns: Interceptors to use when handling 'burnerInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnerInfoInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>]

  /// - Returns: Interceptors to use when handling 'confirmationHeight'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmationHeightInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmationHeightRequest, Axelar_Evm_V1beta1_ConfirmationHeightResponse>]

  /// - Returns: Interceptors to use when handling 'depositState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositStateInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_DepositStateRequest, Axelar_Evm_V1beta1_DepositStateResponse>]

  /// - Returns: Interceptors to use when handling 'pendingCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePendingCommandsInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_PendingCommandsRequest, Axelar_Evm_V1beta1_PendingCommandsResponse>]

  /// - Returns: Interceptors to use when handling 'chains'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainsInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ChainsRequest, Axelar_Evm_V1beta1_ChainsResponse>]

  /// - Returns: Interceptors to use when handling 'command'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCommandInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CommandRequest, Axelar_Evm_V1beta1_CommandResponse>]

  /// - Returns: Interceptors to use when handling 'keyAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyAddressInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_KeyAddressRequest, Axelar_Evm_V1beta1_KeyAddressResponse>]

  /// - Returns: Interceptors to use when handling 'gatewayAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGatewayAddressInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_GatewayAddressRequest, Axelar_Evm_V1beta1_GatewayAddressResponse>]

  /// - Returns: Interceptors to use when handling 'bytecode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBytecodeInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_BytecodeRequest, Axelar_Evm_V1beta1_BytecodeResponse>]

  /// - Returns: Interceptors to use when handling 'event'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_EventRequest, Axelar_Evm_V1beta1_EventResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20Tokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20TokensInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ERC20TokensRequest, Axelar_Evm_V1beta1_ERC20TokensResponse>]

  /// - Returns: Interceptors to use when handling 'tokenInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTokenInfoInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_TokenInfoRequest, Axelar_Evm_V1beta1_TokenInfoResponse>]
}

internal enum Axelar_Evm_V1beta1_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "axelar.evm.v1beta1.QueryService",
    methods: [
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.batchedCommands,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.burnerInfo,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.confirmationHeight,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.depositState,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.pendingCommands,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.chains,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.command,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.keyAddress,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.gatewayAddress,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.bytecode,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.event,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.eRC20Tokens,
      Axelar_Evm_V1beta1_QueryServiceServerMetadata.Methods.tokenInfo,
    ]
  )

  internal enum Methods {
    internal static let batchedCommands = GRPCMethodDescriptor(
      name: "BatchedCommands",
      path: "/axelar.evm.v1beta1.QueryService/BatchedCommands",
      type: GRPCCallType.unary
    )

    internal static let burnerInfo = GRPCMethodDescriptor(
      name: "BurnerInfo",
      path: "/axelar.evm.v1beta1.QueryService/BurnerInfo",
      type: GRPCCallType.unary
    )

    internal static let confirmationHeight = GRPCMethodDescriptor(
      name: "ConfirmationHeight",
      path: "/axelar.evm.v1beta1.QueryService/ConfirmationHeight",
      type: GRPCCallType.unary
    )

    internal static let depositState = GRPCMethodDescriptor(
      name: "DepositState",
      path: "/axelar.evm.v1beta1.QueryService/DepositState",
      type: GRPCCallType.unary
    )

    internal static let pendingCommands = GRPCMethodDescriptor(
      name: "PendingCommands",
      path: "/axelar.evm.v1beta1.QueryService/PendingCommands",
      type: GRPCCallType.unary
    )

    internal static let chains = GRPCMethodDescriptor(
      name: "Chains",
      path: "/axelar.evm.v1beta1.QueryService/Chains",
      type: GRPCCallType.unary
    )

    internal static let command = GRPCMethodDescriptor(
      name: "Command",
      path: "/axelar.evm.v1beta1.QueryService/Command",
      type: GRPCCallType.unary
    )

    internal static let keyAddress = GRPCMethodDescriptor(
      name: "KeyAddress",
      path: "/axelar.evm.v1beta1.QueryService/KeyAddress",
      type: GRPCCallType.unary
    )

    internal static let gatewayAddress = GRPCMethodDescriptor(
      name: "GatewayAddress",
      path: "/axelar.evm.v1beta1.QueryService/GatewayAddress",
      type: GRPCCallType.unary
    )

    internal static let bytecode = GRPCMethodDescriptor(
      name: "Bytecode",
      path: "/axelar.evm.v1beta1.QueryService/Bytecode",
      type: GRPCCallType.unary
    )

    internal static let event = GRPCMethodDescriptor(
      name: "Event",
      path: "/axelar.evm.v1beta1.QueryService/Event",
      type: GRPCCallType.unary
    )

    internal static let eRC20Tokens = GRPCMethodDescriptor(
      name: "ERC20Tokens",
      path: "/axelar.evm.v1beta1.QueryService/ERC20Tokens",
      type: GRPCCallType.unary
    )

    internal static let tokenInfo = GRPCMethodDescriptor(
      name: "TokenInfo",
      path: "/axelar.evm.v1beta1.QueryService/TokenInfo",
      type: GRPCCallType.unary
    )
  }
}
