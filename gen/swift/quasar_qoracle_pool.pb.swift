// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: quasar/qoracle/pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Pool defines the generalized structure of a liquidity pool coming from any source chain to qoracle.
struct Quasarlabs_Quasarnode_Qoracle_Pool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The identifier of this pool in the source chain
  var id: String = String()

  /// List of assets with their current volume in pool
  var assets: [Cosmos_Base_V1beta1_Coin] = []

  /// Total volume locked in the pool
  var tvl: Data = Data()

  /// Annual percentage yield of the pool
  var apy: Data = Data()

  /// Raw data of pool structure stored in the source chain
  var raw: SwiftProtobuf.Google_Protobuf_Any {
    get {return _raw ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_raw = newValue}
  }
  /// Returns true if `raw` has been explicitly set.
  var hasRaw: Bool {return self._raw != nil}
  /// Clears the value of `raw`. Subsequent reads from it will return its default value.
  mutating func clearRaw() {self._raw = nil}

  /// Last time this pool was updated
  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _raw: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Quasarlabs_Quasarnode_Qoracle_Pool: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "quasarlabs.quasarnode.qoracle"

extension Quasarlabs_Quasarnode_Qoracle_Pool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "assets"),
    3: .same(proto: "tvl"),
    4: .same(proto: "apy"),
    5: .same(proto: "raw"),
    6: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.tvl) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.apy) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._raw) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 2)
    }
    if !self.tvl.isEmpty {
      try visitor.visitSingularBytesField(value: self.tvl, fieldNumber: 3)
    }
    if !self.apy.isEmpty {
      try visitor.visitSingularBytesField(value: self.apy, fieldNumber: 4)
    }
    try { if let v = self._raw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Quasarlabs_Quasarnode_Qoracle_Pool, rhs: Quasarlabs_Quasarnode_Qoracle_Pool) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.tvl != rhs.tvl {return false}
    if lhs.apy != rhs.apy {return false}
    if lhs._raw != rhs._raw {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
